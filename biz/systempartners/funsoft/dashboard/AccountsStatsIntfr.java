/*
 * AccountsStatsIntfr.java
 *
 * Created on October 31, 2006, 10:20 AM
 */
package biz.systempartners.funsoft.dashboard;

import java.sql.SQLException;
import java.text.ParseException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Charles Wanjema Waweru <cwaweru@systempartners.biz>
 */
public class AccountsStatsIntfr extends javax.swing.JInternalFrame implements java.lang.Runnable {

    java.sql.Connection connectDB = null;
    long statisticsSnoozeTime = 5000;

    /**
     * Creates new form AccountsStatsIntfr
     */
    public AccountsStatsIntfr(java.sql.Connection connDB) {

        connectDB = connDB;

        initComponents();

        startThreads();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonPanel = new javax.swing.JPanel();
        refreshBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();
        helpBtn = new javax.swing.JButton();
        endDatePicker = new com.afrisoftech.lib.DatePicker();
        beginDatePicker = new com.afrisoftech.lib.DatePicker();
        facilityIndicatorsTabbedPane = new javax.swing.JTabbedPane();
        summaryPanel = new javax.swing.JPanel();
        OPAttendanceIndicatorsPanel = new javax.swing.JPanel();
        totalOPDAttendanceLbl = new javax.swing.JLabel();
        totalOPDAttendanceTxt = new javax.swing.JTextField();
        newlyRegisteredPatientTxt = new javax.swing.JTextField();
        newlyRegisteredPatientsLbl = new javax.swing.JLabel();
        revisitingPatientsTodayLbl = new javax.swing.JLabel();
        revisitingOPDPatientsTxt = new javax.swing.JTextField();
        staffOPDAttendanceTxt = new javax.swing.JTextField();
        staffOPDAttendanceLbl = new javax.swing.JLabel();
        mtdOPDAttendanceLbl = new javax.swing.JLabel();
        mtdOPDAttendanceTxt = new javax.swing.JTextField();
        ytdOPDAttendanceLbl = new javax.swing.JLabel();
        ytdOPDAtendanceTxt = new javax.swing.JTextField();
        averageDailyRevisitsLbl = new javax.swing.JLabel();
        averageDailyRevisitsTxt = new javax.swing.JTextField();
        averageOPDAttendanceLbl = new javax.swing.JLabel();
        averageDailyAttendanceTxt = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        ipdAdmissionsTotalLbl = new javax.swing.JLabel();
        totalDailyAdmissionsTxt = new javax.swing.JTextField();
        ipdReadmissionsLbl = new javax.swing.JLabel();
        totalDailyReadmissionsTxt = new javax.swing.JTextField();
        weeklyAdmissionsLbl = new javax.swing.JLabel();
        weeklyAdmissionsTxt = new javax.swing.JTextField();
        monthlyAdmissionsLbl = new javax.swing.JLabel();
        dailyDischargesTxt = new javax.swing.JTextField();
        mtdAdmissionsLbl = new javax.swing.JLabel();
        inPatientTxt = new javax.swing.JTextField();
        ytdIPAdmissionsLbl = new javax.swing.JLabel();
        ytdAdmissionsTxt = new javax.swing.JTextField();
        averageDailyAdmissionsLbl = new javax.swing.JLabel();
        averageDailyAdmissionsTxt = new javax.swing.JTextField();
        averangeDailyReadmissionsLbl = new javax.swing.JLabel();
        averageDailyReadmissionsTxt = new javax.swing.JTextField();
        previouspatientsLbl = new javax.swing.JLabel();
        previousPatientsTxt = new javax.swing.JTextField();
        ledgerBalancesPanel = new javax.swing.JPanel();
        totalCashCollectedLbl = new javax.swing.JLabel();
        dailyCashCollectionHplk = new org.jdesktop.swingx.JXHyperlink();
        ytdCashTotalLbl = new org.jdesktop.swingx.JXLabel();
        mtdCashTotalLbl = new org.jdesktop.swingx.JXLabel();
        qtdCashTotalLbl = new org.jdesktop.swingx.JXLabel();
        mtdCashTotalHplk = new org.jdesktop.swingx.JXHyperlink();
        qtdCashTotalHplk = new org.jdesktop.swingx.JXHyperlink();
        ytdCashTotalHplk = new org.jdesktop.swingx.JXHyperlink();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        ytdGRNTotalHplk = new org.jdesktop.swingx.JXHyperlink();
        ytdPCardTotalHplk2 = new org.jdesktop.swingx.JXHyperlink();
        ytdInventoryTotalHplk3 = new org.jdesktop.swingx.JXHyperlink();
        ytdCashBookTotalHplk4 = new org.jdesktop.swingx.JXHyperlink();
        ytdExpensesTotalHplk5 = new org.jdesktop.swingx.JXHyperlink();
        ytdRevenueTotalHplk6 = new org.jdesktop.swingx.JXHyperlink();
        ytdLiabilitiesTotalHplk7 = new org.jdesktop.swingx.JXHyperlink();
        ytdEquityFundingTotalHplk8 = new org.jdesktop.swingx.JXHyperlink();
        ytdCreditorsTotalHplk9 = new org.jdesktop.swingx.JXHyperlink();
        ytdDebtorsTotalHplk10 = new org.jdesktop.swingx.JXHyperlink();
        ytdRevenueTotalHplk11 = new org.jdesktop.swingx.JXHyperlink();
        qtdRevenueTotalHplk12 = new org.jdesktop.swingx.JXHyperlink();
        mtdRevenueTotalHplk13 = new org.jdesktop.swingx.JXHyperlink();
        jLabel3 = new javax.swing.JLabel();
        accountDetaledPanel = new javax.swing.JPanel();
        detailsScrollPane = new javax.swing.JScrollPane();
        accountDetailsPanel = new javax.swing.JTable();
        trendAnalysisPanel = new javax.swing.JPanel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Funsoft I-HMIS Dashboard");
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        buttonPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(51, 204, 255), null, new java.awt.Color(102, 102, 255)));
        buttonPanel.setLayout(new java.awt.GridBagLayout());

        refreshBtn.setText("Refresh Dashboard");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(refreshBtn, gridBagConstraints);

        closeBtn.setText("Close Dashboard");
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(closeBtn, gridBagConstraints);

        helpBtn.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(helpBtn, gridBagConstraints);

        endDatePicker.setBorder(javax.swing.BorderFactory.createTitledBorder("End Date"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(endDatePicker, gridBagConstraints);

        beginDatePicker.setBorder(javax.swing.BorderFactory.createTitledBorder("Begin Date"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(beginDatePicker, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(buttonPanel, gridBagConstraints);

        facilityIndicatorsTabbedPane.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(0, 153, 255)));

        summaryPanel.setBackground(new java.awt.Color(204, 204, 255));
        summaryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Facility Global Service Indicators"));
        summaryPanel.setEnabled(false);
        summaryPanel.setLayout(new java.awt.GridBagLayout());

        OPAttendanceIndicatorsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Patient Attendance Summary"));
        OPAttendanceIndicatorsPanel.setLayout(new java.awt.GridBagLayout());

        totalOPDAttendanceLbl.setText("Total OPD Attendance (TODAY)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        OPAttendanceIndicatorsPanel.add(totalOPDAttendanceLbl, gridBagConstraints);

        totalOPDAttendanceTxt.setEditable(false);
        totalOPDAttendanceTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        totalOPDAttendanceTxt.setText("0");
        totalOPDAttendanceTxt.setMinimumSize(new java.awt.Dimension(100, 20));
        totalOPDAttendanceTxt.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        OPAttendanceIndicatorsPanel.add(totalOPDAttendanceTxt, gridBagConstraints);

        newlyRegisteredPatientTxt.setEditable(false);
        newlyRegisteredPatientTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        newlyRegisteredPatientTxt.setText("0");
        newlyRegisteredPatientTxt.setMinimumSize(new java.awt.Dimension(100, 20));
        newlyRegisteredPatientTxt.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        OPAttendanceIndicatorsPanel.add(newlyRegisteredPatientTxt, gridBagConstraints);

        newlyRegisteredPatientsLbl.setText("Newly Registered Patients (TODAY)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        OPAttendanceIndicatorsPanel.add(newlyRegisteredPatientsLbl, gridBagConstraints);

        revisitingPatientsTodayLbl.setText("Revisiting Patients (TODAY)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        OPAttendanceIndicatorsPanel.add(revisitingPatientsTodayLbl, gridBagConstraints);

        revisitingOPDPatientsTxt.setEditable(false);
        revisitingOPDPatientsTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        revisitingOPDPatientsTxt.setText("0");
        revisitingOPDPatientsTxt.setMinimumSize(new java.awt.Dimension(100, 20));
        revisitingOPDPatientsTxt.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        OPAttendanceIndicatorsPanel.add(revisitingOPDPatientsTxt, gridBagConstraints);

        staffOPDAttendanceTxt.setEditable(false);
        staffOPDAttendanceTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        staffOPDAttendanceTxt.setText("0");
        staffOPDAttendanceTxt.setMinimumSize(new java.awt.Dimension(100, 20));
        staffOPDAttendanceTxt.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        OPAttendanceIndicatorsPanel.add(staffOPDAttendanceTxt, gridBagConstraints);

        staffOPDAttendanceLbl.setText("Daily Staff Visits (OPD) (TODAY)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        OPAttendanceIndicatorsPanel.add(staffOPDAttendanceLbl, gridBagConstraints);

        mtdOPDAttendanceLbl.setText("Month To Date OPD Attendance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        OPAttendanceIndicatorsPanel.add(mtdOPDAttendanceLbl, gridBagConstraints);

        mtdOPDAttendanceTxt.setEditable(false);
        mtdOPDAttendanceTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        mtdOPDAttendanceTxt.setText("0");
        mtdOPDAttendanceTxt.setMinimumSize(new java.awt.Dimension(100, 20));
        mtdOPDAttendanceTxt.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        OPAttendanceIndicatorsPanel.add(mtdOPDAttendanceTxt, gridBagConstraints);

        ytdOPDAttendanceLbl.setText("Year To Date OPD Attendance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        OPAttendanceIndicatorsPanel.add(ytdOPDAttendanceLbl, gridBagConstraints);

        ytdOPDAtendanceTxt.setEditable(false);
        ytdOPDAtendanceTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        ytdOPDAtendanceTxt.setText("0");
        ytdOPDAtendanceTxt.setMinimumSize(new java.awt.Dimension(100, 20));
        ytdOPDAtendanceTxt.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        OPAttendanceIndicatorsPanel.add(ytdOPDAtendanceTxt, gridBagConstraints);

        averageDailyRevisitsLbl.setText("Average Daily OPD Revisits");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        OPAttendanceIndicatorsPanel.add(averageDailyRevisitsLbl, gridBagConstraints);

        averageDailyRevisitsTxt.setEditable(false);
        averageDailyRevisitsTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        averageDailyRevisitsTxt.setText("0");
        averageDailyRevisitsTxt.setMinimumSize(new java.awt.Dimension(100, 20));
        averageDailyRevisitsTxt.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        OPAttendanceIndicatorsPanel.add(averageDailyRevisitsTxt, gridBagConstraints);

        averageOPDAttendanceLbl.setText("Average Daily OPD Attendance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        OPAttendanceIndicatorsPanel.add(averageOPDAttendanceLbl, gridBagConstraints);

        averageDailyAttendanceTxt.setEditable(false);
        averageDailyAttendanceTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        averageDailyAttendanceTxt.setText("0");
        averageDailyAttendanceTxt.setMinimumSize(new java.awt.Dimension(100, 20));
        averageDailyAttendanceTxt.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        OPAttendanceIndicatorsPanel.add(averageDailyAttendanceTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 200.0;
        summaryPanel.add(OPAttendanceIndicatorsPanel, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("IP Resources Summary"));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        ipdAdmissionsTotalLbl.setText("New Admissions (TODAY)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(ipdAdmissionsTotalLbl, gridBagConstraints);

        totalDailyAdmissionsTxt.setEditable(false);
        totalDailyAdmissionsTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        totalDailyAdmissionsTxt.setText("0");
        totalDailyAdmissionsTxt.setMinimumSize(new java.awt.Dimension(100, 20));
        totalDailyAdmissionsTxt.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(totalDailyAdmissionsTxt, gridBagConstraints);

        ipdReadmissionsLbl.setText("Re-Admissions (TODAY)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(ipdReadmissionsLbl, gridBagConstraints);

        totalDailyReadmissionsTxt.setEditable(false);
        totalDailyReadmissionsTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        totalDailyReadmissionsTxt.setText("0");
        totalDailyReadmissionsTxt.setMinimumSize(new java.awt.Dimension(100, 20));
        totalDailyReadmissionsTxt.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(totalDailyReadmissionsTxt, gridBagConstraints);

        weeklyAdmissionsLbl.setText("Total Admissions (TODAY)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(weeklyAdmissionsLbl, gridBagConstraints);

        weeklyAdmissionsTxt.setEditable(false);
        weeklyAdmissionsTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        weeklyAdmissionsTxt.setText("0");
        weeklyAdmissionsTxt.setMinimumSize(new java.awt.Dimension(100, 20));
        weeklyAdmissionsTxt.setPreferredSize(new java.awt.Dimension(100, 20));
        weeklyAdmissionsTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weeklyAdmissionsTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(weeklyAdmissionsTxt, gridBagConstraints);

        monthlyAdmissionsLbl.setText("Discharges (TODAY)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(monthlyAdmissionsLbl, gridBagConstraints);

        dailyDischargesTxt.setEditable(false);
        dailyDischargesTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        dailyDischargesTxt.setText("0");
        dailyDischargesTxt.setMinimumSize(new java.awt.Dimension(100, 20));
        dailyDischargesTxt.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(dailyDischargesTxt, gridBagConstraints);

        mtdAdmissionsLbl.setText("Patients In Ward");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(mtdAdmissionsLbl, gridBagConstraints);

        inPatientTxt.setEditable(false);
        inPatientTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        inPatientTxt.setText("0");
        inPatientTxt.setMinimumSize(new java.awt.Dimension(100, 20));
        inPatientTxt.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(inPatientTxt, gridBagConstraints);

        ytdIPAdmissionsLbl.setText("Year To Date Admissions");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(ytdIPAdmissionsLbl, gridBagConstraints);

        ytdAdmissionsTxt.setEditable(false);
        ytdAdmissionsTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        ytdAdmissionsTxt.setText("0");
        ytdAdmissionsTxt.setMinimumSize(new java.awt.Dimension(100, 20));
        ytdAdmissionsTxt.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(ytdAdmissionsTxt, gridBagConstraints);

        averageDailyAdmissionsLbl.setText("Average Daily Admissions");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(averageDailyAdmissionsLbl, gridBagConstraints);

        averageDailyAdmissionsTxt.setEditable(false);
        averageDailyAdmissionsTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        averageDailyAdmissionsTxt.setText("0");
        averageDailyAdmissionsTxt.setMinimumSize(new java.awt.Dimension(100, 20));
        averageDailyAdmissionsTxt.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(averageDailyAdmissionsTxt, gridBagConstraints);

        averangeDailyReadmissionsLbl.setText("Average Daily Re-Admissions");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(averangeDailyReadmissionsLbl, gridBagConstraints);

        averageDailyReadmissionsTxt.setEditable(false);
        averageDailyReadmissionsTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        averageDailyReadmissionsTxt.setText("0");
        averageDailyReadmissionsTxt.setMinimumSize(new java.awt.Dimension(100, 20));
        averageDailyReadmissionsTxt.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(averageDailyReadmissionsTxt, gridBagConstraints);

        previouspatientsLbl.setText("Previous Patients");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(previouspatientsLbl, gridBagConstraints);

        previousPatientsTxt.setEditable(false);
        previousPatientsTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        previousPatientsTxt.setText("0");
        previousPatientsTxt.setMinimumSize(new java.awt.Dimension(100, 20));
        previousPatientsTxt.setPreferredSize(new java.awt.Dimension(100, 20));
        previousPatientsTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousPatientsTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(previousPatientsTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 200.0;
        summaryPanel.add(jPanel2, gridBagConstraints);

        ledgerBalancesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Ledger Balances Information"));
        ledgerBalancesPanel.setLayout(new java.awt.GridBagLayout());

        totalCashCollectedLbl.setText("Total Cash Collected (TODAY)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ledgerBalancesPanel.add(totalCashCollectedLbl, gridBagConstraints);

        dailyCashCollectionHplk.setText("0.00");
        dailyCashCollectionHplk.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        dailyCashCollectionHplk.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        dailyCashCollectionHplk.setPreferredSize(new java.awt.Dimension(100, 20));
        dailyCashCollectionHplk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dailyCashCollectionHplkActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        ledgerBalancesPanel.add(dailyCashCollectionHplk, gridBagConstraints);

        ytdCashTotalLbl.setText("Year To Date Cash Total");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ledgerBalancesPanel.add(ytdCashTotalLbl, gridBagConstraints);

        mtdCashTotalLbl.setText("Month To Date Cash Total");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ledgerBalancesPanel.add(mtdCashTotalLbl, gridBagConstraints);

        qtdCashTotalLbl.setText("Quarter To Date Cash Total");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ledgerBalancesPanel.add(qtdCashTotalLbl, gridBagConstraints);

        mtdCashTotalHplk.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        mtdCashTotalHplk.setText("0.00");
        mtdCashTotalHplk.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        mtdCashTotalHplk.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        mtdCashTotalHplk.setMinimumSize(new java.awt.Dimension(100, 20));
        mtdCashTotalHplk.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ledgerBalancesPanel.add(mtdCashTotalHplk, gridBagConstraints);

        qtdCashTotalHplk.setText("0.00");
        qtdCashTotalHplk.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        qtdCashTotalHplk.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        qtdCashTotalHplk.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ledgerBalancesPanel.add(qtdCashTotalHplk, gridBagConstraints);

        ytdCashTotalHplk.setText("0.00");
        ytdCashTotalHplk.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        ytdCashTotalHplk.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        ytdCashTotalHplk.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ledgerBalancesPanel.add(ytdCashTotalHplk, gridBagConstraints);

        jLabel4.setText("Year to Date Total Revenue/Income");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ledgerBalancesPanel.add(jLabel4, gridBagConstraints);

        jLabel5.setText("Month to Date Revenue Bills");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ledgerBalancesPanel.add(jLabel5, gridBagConstraints);

        jLabel6.setText("Quarter to Date Revenue Bills");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ledgerBalancesPanel.add(jLabel6, gridBagConstraints);

        jLabel7.setText("Year to Date Revenue  Bills");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ledgerBalancesPanel.add(jLabel7, gridBagConstraints);

        jLabel8.setText("Year to Date Debtors Balance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ledgerBalancesPanel.add(jLabel8, gridBagConstraints);

        jLabel9.setText("Year to Date Creditors Balance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ledgerBalancesPanel.add(jLabel9, gridBagConstraints);

        jLabel10.setText("Year to Date Total Equity/Funding/Grants");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ledgerBalancesPanel.add(jLabel10, gridBagConstraints);

        jLabel11.setText("Year to Date Total Liabilities");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ledgerBalancesPanel.add(jLabel11, gridBagConstraints);

        jLabel12.setText("Year to Date Total Expenses");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ledgerBalancesPanel.add(jLabel12, gridBagConstraints);

        jLabel13.setText("Year to Date Cash Books Balance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ledgerBalancesPanel.add(jLabel13, gridBagConstraints);

        jLabel14.setText("Year to Date Stock/Inventoy Balance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ledgerBalancesPanel.add(jLabel14, gridBagConstraints);

        jLabel15.setText("GRN Account Balance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ledgerBalancesPanel.add(jLabel15, gridBagConstraints);

        jLabel16.setText("Patient Control Account Balance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        ledgerBalancesPanel.add(jLabel16, gridBagConstraints);

        ytdGRNTotalHplk.setText("0.00");
        ytdGRNTotalHplk.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        ytdGRNTotalHplk.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        ytdGRNTotalHplk.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ledgerBalancesPanel.add(ytdGRNTotalHplk, gridBagConstraints);

        ytdPCardTotalHplk2.setText("0.00");
        ytdPCardTotalHplk2.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        ytdPCardTotalHplk2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        ytdPCardTotalHplk2.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ledgerBalancesPanel.add(ytdPCardTotalHplk2, gridBagConstraints);

        ytdInventoryTotalHplk3.setText("0.00");
        ytdInventoryTotalHplk3.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        ytdInventoryTotalHplk3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        ytdInventoryTotalHplk3.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 1.0;
        ledgerBalancesPanel.add(ytdInventoryTotalHplk3, gridBagConstraints);

        ytdCashBookTotalHplk4.setText("0.00");
        ytdCashBookTotalHplk4.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        ytdCashBookTotalHplk4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        ytdCashBookTotalHplk4.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ledgerBalancesPanel.add(ytdCashBookTotalHplk4, gridBagConstraints);

        ytdExpensesTotalHplk5.setText("0.00");
        ytdExpensesTotalHplk5.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        ytdExpensesTotalHplk5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        ytdExpensesTotalHplk5.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ledgerBalancesPanel.add(ytdExpensesTotalHplk5, gridBagConstraints);

        ytdRevenueTotalHplk6.setText("0.00");
        ytdRevenueTotalHplk6.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        ytdRevenueTotalHplk6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        ytdRevenueTotalHplk6.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ledgerBalancesPanel.add(ytdRevenueTotalHplk6, gridBagConstraints);

        ytdLiabilitiesTotalHplk7.setText("0.00");
        ytdLiabilitiesTotalHplk7.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        ytdLiabilitiesTotalHplk7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        ytdLiabilitiesTotalHplk7.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ledgerBalancesPanel.add(ytdLiabilitiesTotalHplk7, gridBagConstraints);

        ytdEquityFundingTotalHplk8.setText("0.00");
        ytdEquityFundingTotalHplk8.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        ytdEquityFundingTotalHplk8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        ytdEquityFundingTotalHplk8.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 1.0;
        ledgerBalancesPanel.add(ytdEquityFundingTotalHplk8, gridBagConstraints);

        ytdCreditorsTotalHplk9.setText("0.00");
        ytdCreditorsTotalHplk9.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        ytdCreditorsTotalHplk9.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        ytdCreditorsTotalHplk9.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ledgerBalancesPanel.add(ytdCreditorsTotalHplk9, gridBagConstraints);

        ytdDebtorsTotalHplk10.setText("0.00");
        ytdDebtorsTotalHplk10.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        ytdDebtorsTotalHplk10.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        ytdDebtorsTotalHplk10.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ledgerBalancesPanel.add(ytdDebtorsTotalHplk10, gridBagConstraints);

        ytdRevenueTotalHplk11.setText("0.00");
        ytdRevenueTotalHplk11.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        ytdRevenueTotalHplk11.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        ytdRevenueTotalHplk11.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ledgerBalancesPanel.add(ytdRevenueTotalHplk11, gridBagConstraints);

        qtdRevenueTotalHplk12.setText("0.00");
        qtdRevenueTotalHplk12.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        qtdRevenueTotalHplk12.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        qtdRevenueTotalHplk12.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ledgerBalancesPanel.add(qtdRevenueTotalHplk12, gridBagConstraints);

        mtdRevenueTotalHplk13.setText("0.00");
        mtdRevenueTotalHplk13.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        mtdRevenueTotalHplk13.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        mtdRevenueTotalHplk13.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ledgerBalancesPanel.add(mtdRevenueTotalHplk13, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 200.0;
        summaryPanel.add(ledgerBalancesPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        summaryPanel.add(jLabel3, gridBagConstraints);

        facilityIndicatorsTabbedPane.addTab("Global Service Indicators", summaryPanel);

        accountDetaledPanel.setLayout(new java.awt.GridBagLayout());

        accountDetailsPanel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        detailsScrollPane.setViewportView(accountDetailsPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        accountDetaledPanel.add(detailsScrollPane, gridBagConstraints);

        facilityIndicatorsTabbedPane.addTab("Account Details Panel", accountDetaledPanel);

        trendAnalysisPanel.setLayout(new java.awt.GridBagLayout());
        facilityIndicatorsTabbedPane.addTab("Charts and Trend Analysis", trendAnalysisPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        getContentPane().add(facilityIndicatorsTabbedPane, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed

        this.dispose();

// TODO add your handling code here:
    }//GEN-LAST:event_closeBtnActionPerformed

    private void dailyCashCollectionHplkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dailyCashCollectionHplkActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_dailyCashCollectionHplkActionPerformed

private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed

    startThreads();
    // TODO add your handling code here:
}//GEN-LAST:event_refreshBtnActionPerformed

private void previousPatientsTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousPatientsTxtActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_previousPatientsTxtActionPerformed

private void weeklyAdmissionsTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weeklyAdmissionsTxtActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_weeklyAdmissionsTxtActionPerformed

    public void run() {
    }

    class DailyCashCollection extends Thread {

        public void DailyCashCollection() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                try {
                    System.out.println("Dates printed [" + endDatePicker.getDate() + "]");
                    java.sql.PreparedStatement dailyCashCollectionPstmt = connectDB.prepareStatement("SELECT sum(debit-credit) FROM ac_cash_collection WHERE  transaction_type not ilike 'Banking' AND date::date = '" + endDatePicker.getDate() + "'::date ");
                    java.sql.ResultSet dailyCashCollectionRset = dailyCashCollectionPstmt.executeQuery();
                    while (dailyCashCollectionRset.next()) {
                        dailyCashCollectionHplk.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(dailyCashCollectionRset.getDouble(1)));
                        // dailyCashCollectionHplk.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(Double.parseDouble(dailyCashCollectionRset.getString(1))));
                    }
                    dailyCashCollectionRset.close();
                    dailyCashCollectionPstmt.close();
                    //  dailyCashCollectionRset = null;
                    //  dailyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    //  javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
    }

    class DailyOpdTotal extends Thread {

        public void DailyOpdTotal() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                try {
                    // if (endDatePicker.getDate() != null) {
                    java.sql.PreparedStatement dailyOpdPstmt = connectDB.prepareStatement("SELECT COUNT(patient_no) FROM hp_patient_visit WHERE date::date = '" + endDatePicker.getDate() + "'::date ");
                    java.sql.ResultSet dailyOpdRset = dailyOpdPstmt.executeQuery();
                    while (dailyOpdRset.next()) {
                        totalOPDAttendanceTxt.setText(String.valueOf(dailyOpdRset.getInt(1)));
                    }
                    dailyOpdRset.close();
                    dailyOpdPstmt.close();
                    //  dailyOpdRset = null;
                    // dailyOpdPstmt = null;
                    // }
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    //  javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
    }

    class DailyOpdNew extends Thread {

        public void DailyOpdNew() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                try {
                    java.sql.PreparedStatement dailyOpdNewPstmt = connectDB.prepareStatement("SELECT COUNT(patient_no) FROM hp_patient_visit WHERE date::date = '" + endDatePicker.getDate() + "'::date AND comments = 'New' ");
                    java.sql.ResultSet dailyOpdNewRset = dailyOpdNewPstmt.executeQuery();
                    while (dailyOpdNewRset.next()) {
                        newlyRegisteredPatientTxt.setText(String.valueOf(dailyOpdNewRset.getInt(1)));
                    }
                    dailyOpdNewRset.close();
                    dailyOpdNewPstmt.close();
                    //  dailyOpdNewRset = null;
                    //  dailyOpdNewPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    //  javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
    }

    class DailyOpdOld extends Thread {

        public void DailyOpdOld() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                try {
                    // if (endDatePicker.getDate() != null) {
                    System.out.println("Date Picker Date String[" + endDatePicker + "]");
                    java.sql.PreparedStatement dailyOpdOldPstmt = connectDB.prepareStatement("SELECT COUNT(patient_no) FROM hp_patient_visit WHERE date::date = '" + endDatePicker.getDate() + "'::date AND comments = 'Old' ");
                    java.sql.ResultSet dailyOpdOldRset = dailyOpdOldPstmt.executeQuery();
                    while (dailyOpdOldRset.next()) {
                        revisitingOPDPatientsTxt.setText(String.valueOf(dailyOpdOldRset.getInt(1)));
                    }
                    dailyOpdOldRset.close();
                    dailyOpdOldPstmt.close();
                    //  dailyOpdOldRset = null;
                    //  dailyOpdOldPstmt = null;
                    // }
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    //  javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
    }

    class DailyOpdStaff extends Thread {

        public void DailyOpdStaff() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if(endDatePicker.getDate() != null){
                try {
                    java.sql.PreparedStatement dailyOpdStaffPstmt = connectDB.prepareStatement("SELECT COUNT(patient_no) FROM hp_patient_visit WHERE date::date = '" + endDatePicker.getDate() + "'::date AND department ILIKE '%Staff%' ");
                    java.sql.ResultSet dailyOpdStaffRset = dailyOpdStaffPstmt.executeQuery();
                    while (dailyOpdStaffRset.next()) {
                        staffOPDAttendanceTxt.setText(String.valueOf(dailyOpdStaffRset.getInt(1)));
                    }
                    dailyOpdStaffRset.close();
                    dailyOpdStaffPstmt.close();
                    //  dailyOpdStaffRset = null;
                    //  dailyOpdStaffPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    //  javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }
            }
        }
    }

    class PreviousPatients extends Thread {

        public void PreviousPatients() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                try {
                    java.sql.PreparedStatement previousAdmPstmt = connectDB.prepareStatement("SELECT DISTINCT "
                            + "count(patient_no) FROM hp_admission WHERE "
                            + "date_admitted::date < '" + endDatePicker.getDate() + "'::date AND "
                            + "(discharge_date::date >= '" + endDatePicker.getDate() + "'::date OR discharge_date::date IS NULL)"
                            + " AND patient_no NOT IN (SELECT DISTINCT patient_no FROM hp_mortuary)");

                    java.sql.ResultSet previousAdmRset = previousAdmPstmt.executeQuery();
                    while (previousAdmRset.next()) {
                        previousPatientsTxt.setText(String.valueOf(previousAdmRset.getInt(1)));
                    }
                    previousAdmRset.close();
                    previousAdmPstmt.close();
                    // previousAdmRset = null;
                    // previousAdmPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    //  javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
    }

    class DailyAdmission extends Thread {

        public void DailyAdmission() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if(endDatePicker.getDate() != null){
                try {
                    java.sql.PreparedStatement dailyAdmissionPstmt = connectDB.prepareStatement("SELECT COUNT(patient_no) FROM hp_admission WHERE date_admitted = '" + endDatePicker.getDate() + "' AND adm_type ILIKE 'First%' ");
                    java.sql.ResultSet dailyAdmissionRset = dailyAdmissionPstmt.executeQuery();
                    while (dailyAdmissionRset.next()) {
                        totalDailyAdmissionsTxt.setText(String.valueOf(dailyAdmissionRset.getInt(1)));
                    }
                    dailyAdmissionRset.close();
                    dailyAdmissionPstmt.close();
                    // dailyAdmissionRset = null;
                    // dailyAdmissionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    //  javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }
            }
        }
    }

    class ReAdmission extends Thread {

        public void ReAdmission() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if(endDatePicker.getDate() != null){
                try {
                    java.sql.PreparedStatement ReAdmissionPstmt = connectDB.prepareStatement("SELECT COUNT(patient_no) FROM hp_admission WHERE date_admitted = ? AND adm_type ILIKE 'Re%' ");
                    ReAdmissionPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(endDatePicker.getDate()));
                    java.sql.ResultSet ReAdmissionRset = ReAdmissionPstmt.executeQuery();
                    while (ReAdmissionRset.next()) {
                        totalDailyReadmissionsTxt.setText(String.valueOf(ReAdmissionRset.getInt(1)));
                    }
                    ReAdmissionRset.close();
                    ReAdmissionPstmt.close();
                    //  ReAdmissionRset = null;
                    //  ReAdmissionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    //  javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }
            }
        }
    }

    class TotalAdmission extends Thread {

        public void TotalAdmission() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
                try {
                    java.sql.PreparedStatement TotalAdmissionPstmt = connectDB.prepareStatement("SELECT COUNT(patient_no) FROM hp_admission WHERE date_admitted = ? "); //'" + endDatePicker.getDate() + "'");
                    TotalAdmissionPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(endDatePicker.getDate()));
                    java.sql.ResultSet TotalAdmissionRset = TotalAdmissionPstmt.executeQuery();
                    while (TotalAdmissionRset.next()) {
                        weeklyAdmissionsTxt.setText(String.valueOf(TotalAdmissionRset.getInt(1)));
                    }
                    TotalAdmissionRset.close();
                    TotalAdmissionPstmt.close();
                    // TotalAdmissionRset = null;
                    // TotalAdmissionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    //  javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }
            }
        }
    }

    class TotalDischarges extends Thread {

        public void TotalDischarges() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                //  if (endDatePicker.getDate() != null) {
                try {
                    java.sql.PreparedStatement TotalDischargesPstmt = connectDB.prepareStatement("SELECT COUNT(patient_no) FROM hp_admission WHERE discharge_date::DATE = ? "); //'" + endDatePicker.getDate() + "'");
                    TotalDischargesPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(endDatePicker.getDate()));
                    java.sql.ResultSet TotalDischargesRset = TotalDischargesPstmt.executeQuery();
                    while (TotalDischargesRset.next()) {
                        dailyDischargesTxt.setText(String.valueOf(TotalDischargesRset.getInt(1)));
                    }
                    TotalDischargesRset.close();
                    TotalDischargesPstmt.close();
                    // TotalDischargesRset = null;
                    // TotalDischargesPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    //  javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }
            }
        }
    }

    class TotalInPatients extends Thread {

        public void TotalInpatients() {
        }

        @Override
        public synchronized void run() {
            while (true) {

                try {
                    //  if (endDatePicker.getDate() != null) {
                    int allpatients = 0;
                    int discharges = 0;
                    java.sql.PreparedStatement TotalIpPstmt = connectDB.prepareStatement("SELECT DISTINCT count(patient_no) FROM hp_admission WHERE date_admitted::date <= ?"
                            + " AND( discharge_date::date >=  ? OR discharge_date::date IS NULL) AND patient_no NOT IN (SELECT DISTINCT patient_no "
                            + " FROM hp_mortuary)");
                    TotalIpPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(endDatePicker.getDate()));
                    TotalIpPstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(endDatePicker.getDate()));
                    java.sql.ResultSet TotalIpRset = TotalIpPstmt.executeQuery();
                    java.sql.PreparedStatement TotalDischargesPstmt = connectDB.prepareStatement("SELECT COUNT(patient_no) FROM hp_admission WHERE discharge_date::DATE = ?");
                    TotalDischargesPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(endDatePicker.getDate()));
                    java.sql.ResultSet TotalDischargesRset = TotalDischargesPstmt.executeQuery();
                    while (TotalDischargesRset.next()) {
                        discharges = TotalDischargesRset.getInt(1);

                        while (TotalIpRset.next()) {
                            allpatients = TotalIpRset.getInt(1);
                            inPatientTxt.setText(String.valueOf(allpatients - discharges));
                        }
                    }
                    TotalIpRset.close();
                    TotalIpPstmt.close();
                    //  TotalIpRset = null;
                    // TotalIpPstmt = null;
                    // }
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    //  javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
    }

    class MonthlyCashCollection extends Thread {

        public void MonthlyCashCollection() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {

                com.afrisoftech.timeseries.AgeingSeries monthlyAgeingSeries = new com.afrisoftech.timeseries.AgeingSeries(1, endDatePicker.getDate());
                java.lang.Object[][] monthrangeDates = monthlyAgeingSeries.getAgeingDateSeries();
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement MonthCashCollectionPstmt = connectDB.prepareStatement("SELECT sum(debit-credit) FROM ac_cash_collection WHERE transaction_type not ilike 'Banking' AND  date between '" + monthrangeDates[0][0].toString().trim() + "' AND ?");
                    MonthCashCollectionPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(endDatePicker.getDate()));
                    java.sql.ResultSet MonthCashCollectionRset = MonthCashCollectionPstmt.executeQuery();
                    while (MonthCashCollectionRset.next()) {
                        mtdCashTotalHplk.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(MonthCashCollectionRset.getDouble(1)));
                    }
                    MonthCashCollectionRset.close();
                    MonthCashCollectionPstmt.close();

                    //  MonthCashCollectionRset = null;
                    //  MonthCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class MonthlyOpd extends Thread {

        public void MonthlyOpd() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
                com.afrisoftech.timeseries.AgeingSeries monthlyAgeingSeries = new com.afrisoftech.timeseries.AgeingSeries(1, endDatePicker.getDate());
                java.lang.Object[][] monthrangeDates = monthlyAgeingSeries.getAgeingDateSeries();
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement MonthOpdPstmt = connectDB.prepareStatement("SELECT COUNT(patient_no) FROM hp_patient_visit WHERE date between ? AND ?");
                    try {
                        System.err.println(">>>"+com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(monthrangeDates[0][0].toString().trim())));
                        MonthOpdPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(monthrangeDates[0][0].toString().trim())));
                        // MonthCashCollectionPstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(monthrangeDates[0][1].toString().trim())));
                        MonthOpdPstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(endDatePicker.getDate().toString())));
                    } catch (ParseException ex) {
                        Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    java.sql.ResultSet MonthOpdRset = MonthOpdPstmt.executeQuery();
                    while (MonthOpdRset.next()) {
                        mtdOPDAttendanceTxt.setText(String.valueOf(MonthOpdRset.getInt(1)));
                    }
                    MonthOpdRset.close();
                    MonthOpdPstmt.close();

                    // MonthOpdRset = null;
                    //  MonthOpdPstmt = null;
                    //}
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    //  javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                // }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
    }

    class YearlyOpd extends Thread {

        public void YearlyOpd() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement yearlyOpdPstmt = connectDB.prepareStatement("SELECT COUNT(patient_no) FROM hp_patient_visit WHERE date between ? AND ?");
                    try {
                        System.err.println("SELECT COUNT(patient_no) FROM hp_patient_visit WHERE date between '"+com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(rangeDates[0][0].toString().trim()))+"' AND '"+com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(endDatePicker.getDate().toString()))+"'");
                        yearlyOpdPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(rangeDates[0][0].toString().trim())));
                        yearlyOpdPstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(endDatePicker.getDate().toString())));
                    } catch (ParseException ex) {
                        Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    java.sql.ResultSet yearlyOpdRset = yearlyOpdPstmt.executeQuery();

                    while (yearlyOpdRset.next()) {
                        ytdOPDAtendanceTxt.setText(String.valueOf(yearlyOpdRset.getInt(1)));
                    }
                    yearlyOpdRset.close();
                    yearlyOpdPstmt.close();

                    //  yearlyOpdRset = null;
                    //  yearlyOpdPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    //  javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class YearlyAdmissions extends Thread {

        public void YearlyAdmissions() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement yearlyAdmPstmt = connectDB.prepareStatement("SELECT COUNT(patient_no) FROM hp_admission WHERE date_admitted between ? AND ?");
                    try {
                        yearlyAdmPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(rangeDates[0][0].toString().trim())));
                        yearlyAdmPstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(endDatePicker.getDate().toString())));
                    } catch (ParseException ex) {
                        Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    java.sql.ResultSet yearlyAdmRset = yearlyAdmPstmt.executeQuery();

                    while (yearlyAdmRset.next()) {
                        ytdAdmissionsTxt.setText(String.valueOf(yearlyAdmRset.getInt(1)));
                    }
                    yearlyAdmRset.close();
                    yearlyAdmPstmt.close();

                    //  yearlyAdmRset = null;
                    //  yearlyAdmPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class QuaterlyCashCollection extends Thread {

        public void QuaterlyCashCollection() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
                com.afrisoftech.timeseries.QuarterAgeing quarterAgeingSeries = new com.afrisoftech.timeseries.QuarterAgeing(1, endDatePicker.getDate());
                java.lang.Object[][] quarterangeDates = quarterAgeingSeries.getAgeingDateSeries();
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement QuatCashCollectionPstmt = connectDB.prepareStatement("SELECT sum(debit-credit) FROM ac_cash_collection WHERE transaction_type not ilike 'Banking' AND  date between ? AND ?");
                    try {
                        QuatCashCollectionPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(quarterangeDates[0][0].toString().trim())));
                        QuatCashCollectionPstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(endDatePicker.getDate().toString())));
                    } catch (ParseException ex) {
                        Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    java.sql.ResultSet QuatCashCollectionRset = QuatCashCollectionPstmt.executeQuery();
                    while (QuatCashCollectionRset.next()) {
                        qtdCashTotalHplk.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(QuatCashCollectionRset.getDouble(1)));
                    }
                    QuatCashCollectionRset.close();
                    QuatCashCollectionPstmt.close();

                    //  QuatCashCollectionRset = null;
                    //  QuatCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class YearlyCashCollection extends Thread {

        public void YearlyCashCollection() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement yearlyCashCollectionPstmt = connectDB.prepareStatement("SELECT sum(debit-credit) FROM ac_cash_collection WHERE transaction_type not ilike 'Banking' AND date between ? AND ?");
                    try {
                        yearlyCashCollectionPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(rangeDates[0][0].toString().trim())));
                        yearlyCashCollectionPstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(endDatePicker.getDate().toString())));
                    } catch (ParseException ex) {
                        Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    java.sql.ResultSet yearlyCashCollectionRset = yearlyCashCollectionPstmt.executeQuery();

                    while (yearlyCashCollectionRset.next()) {
                        ytdCashTotalHplk.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(yearlyCashCollectionRset.getDouble(1)));
                    }
                    yearlyCashCollectionRset.close();
                    yearlyCashCollectionPstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class YearlyBills extends Thread {

        public void YearlyBills() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement yearlyBillsPstmt = connectDB.prepareStatement("SELECT sum(debit-credit) FROM hp_patient_card WHERE transaction_type not ilike 'Receipt%' AND date between ? AND ?");
                    try {
                        yearlyBillsPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(rangeDates[0][0].toString().trim())));
                        yearlyBillsPstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(endDatePicker.getDate().toString())));
                    } catch (ParseException ex) {
                        Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    java.sql.ResultSet yearlyBillsRset = yearlyBillsPstmt.executeQuery();

                    while (yearlyBillsRset.next()) {
                        ytdRevenueTotalHplk11.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(yearlyBillsRset.getDouble(1)));
                    }
                    yearlyBillsRset.close();
                    yearlyBillsPstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class QuarterlyBills extends Thread {

        public void QuarterlyBills() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
                com.afrisoftech.timeseries.QuarterAgeing quarterlyAgeingSeries = new com.afrisoftech.timeseries.QuarterAgeing(1, endDatePicker.getDate());
                java.lang.Object[][] rangeDates = quarterlyAgeingSeries.getAgeingDateSeries();
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement yearlyCashCollectionPstmt = connectDB.prepareStatement("SELECT sum(debit-credit) FROM hp_patient_card WHERE transaction_type not ilike 'Receipt%' AND date between ? AND ?");
                    try {
                        yearlyCashCollectionPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(rangeDates[0][0].toString().trim())));
                        yearlyCashCollectionPstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(endDatePicker.getDate().toString())));
                    } catch (ParseException ex) {
                        Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    java.sql.ResultSet yearlyCashCollectionRset = yearlyCashCollectionPstmt.executeQuery();

                    while (yearlyCashCollectionRset.next()) {
                        qtdRevenueTotalHplk12.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(yearlyCashCollectionRset.getDouble(1)));
                    }
                    yearlyCashCollectionRset.close();
                    yearlyCashCollectionPstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class MonthlyBills extends Thread {

        public void MonthlyBills() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
                com.afrisoftech.timeseries.DailyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.DailyAgeing(30, endDatePicker.getDate());
                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement yearlyCashCollectionPstmt = connectDB.prepareStatement("SELECT sum(debit-credit) FROM hp_patient_card WHERE transaction_type not ilike 'Receipt%' AND date between ? AND ?");
                    try {
                        yearlyCashCollectionPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(rangeDates[0][0].toString().trim())));
                        yearlyCashCollectionPstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(endDatePicker.getDate().toString())));
                    } catch (ParseException ex) {
                        Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    java.sql.ResultSet yearlyCashCollectionRset = yearlyCashCollectionPstmt.executeQuery();

                    while (yearlyCashCollectionRset.next()) {
                        mtdRevenueTotalHplk13.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(yearlyCashCollectionRset.getDouble(1)));
                    }
                    yearlyCashCollectionRset.close();
                    yearlyCashCollectionPstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class DebtorsBalance extends Thread {

        public void DebtorsBalance() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement yearlyCashCollectionPstmt = connectDB.prepareStatement("SELECT sum(debit-credit) FROM ac_debtors WHERE  date between ? AND ?");
                    try {
                        yearlyCashCollectionPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(rangeDates[0][0].toString().trim())));
                        yearlyCashCollectionPstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(endDatePicker.getDate().toString())));
                    } catch (ParseException ex) {
                        Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    java.sql.ResultSet yearlyCashCollectionRset = yearlyCashCollectionPstmt.executeQuery();

                    while (yearlyCashCollectionRset.next()) {
                        ytdDebtorsTotalHplk10.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(yearlyCashCollectionRset.getDouble(1)));
                    }
                    yearlyCashCollectionRset.close();
                    yearlyCashCollectionPstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class CreditorsBalance extends Thread {

        public void CreditorsBalance() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement yearlyCashCollectionPstmt = connectDB.prepareStatement("SELECT sum(credit-debit) FROM ac_accounts_payable WHERE  date between ? AND ?");
                    try {
                        yearlyCashCollectionPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(rangeDates[0][0].toString().trim())));
                        yearlyCashCollectionPstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(endDatePicker.getDate().toString())));
                    } catch (ParseException ex) {
                        Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    java.sql.ResultSet yearlyCashCollectionRset = yearlyCashCollectionPstmt.executeQuery();

                    while (yearlyCashCollectionRset.next()) {
                        ytdCreditorsTotalHplk9.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(yearlyCashCollectionRset.getDouble(1)));
                    }
                    yearlyCashCollectionRset.close();
                    yearlyCashCollectionPstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class PatientDepositsBalance extends Thread {

        public void PatientDepositsBalance() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement yearlyCashCollectionPstmt = connectDB.prepareStatement("SELECT sum(credit-debit) FROM ac_ledger WHERE transaction_type not ilike 'Unutilized patient deposit' AND date between ? AND ?");
                    try {
                        yearlyCashCollectionPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(rangeDates[0][0].toString().trim())));
                        yearlyCashCollectionPstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(endDatePicker.getDate().toString())));
                    } catch (ParseException ex) {
                        Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    java.sql.ResultSet yearlyCashCollectionRset = yearlyCashCollectionPstmt.executeQuery();

                    while (yearlyCashCollectionRset.next()) {
                        ytdCashTotalHplk.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(yearlyCashCollectionRset.getDouble(1)));
                    }
                    yearlyCashCollectionRset.close();
                    yearlyCashCollectionPstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class TotalGrants extends Thread {

        public void TotalGrants() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement yearlyCashCollectionPstmt = connectDB.prepareStatement("SELECT sum(debit-credit) FROM ac_cash_collection WHERE transaction_type not ilike 'Banking' AND date between ? AND ?");
                    try {
                        yearlyCashCollectionPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(rangeDates[0][0].toString().trim())));
                        yearlyCashCollectionPstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(endDatePicker.getDate().toString())));
                    } catch (ParseException ex) {
                        Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    java.sql.ResultSet yearlyCashCollectionRset = yearlyCashCollectionPstmt.executeQuery();

                    while (yearlyCashCollectionRset.next()) {
                        ytdCashTotalHplk.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(yearlyCashCollectionRset.getDouble(1)));
                    }
                    yearlyCashCollectionRset.close();
                    yearlyCashCollectionPstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class InventoryBalance extends Thread {

        public void InventoryBalance() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement yearlyCashCollectionPstmt = connectDB.prepareStatement("SELECT sum(debit-credit) FROM st_stock_cardex WHERE store in (SELECT distinct store FROM st_stock_cardex INTERSECT SELECT DISTINCT store_name FROM st_stores WHERE patient_store = true  UNION SELECT DISTINCT store_name FROM st_main_stores) AND date between ? AND ?");
                    try {
                        yearlyCashCollectionPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(beginDatePicker.getDate().toString())));
                        yearlyCashCollectionPstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(endDatePicker.getDate().toString())));
                    } catch (ParseException ex) {
                        Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    java.sql.ResultSet yearlyCashCollectionRset = yearlyCashCollectionPstmt.executeQuery();

                    while (yearlyCashCollectionRset.next()) {
                        ytdInventoryTotalHplk3.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(yearlyCashCollectionRset.getDouble(1)));
                    }
                    yearlyCashCollectionRset.close();
                    yearlyCashCollectionPstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class TotalLiabilities extends Thread {

        public void TotalLiabilities() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement yearlyCashCollectionPstmt = connectDB.prepareStatement("SELECT sum(debit-credit) FROM ac_cash_collection WHERE transaction_type not ilike 'Banking' AND date between ? AND ?");
                    try {
                        yearlyCashCollectionPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(rangeDates[0][0].toString().trim())));
                        yearlyCashCollectionPstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(endDatePicker.getDate().toString())));
                    } catch (ParseException ex) {
                        Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    java.sql.ResultSet yearlyCashCollectionRset = yearlyCashCollectionPstmt.executeQuery();

                    while (yearlyCashCollectionRset.next()) {
                        ytdCashTotalHplk.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(yearlyCashCollectionRset.getDouble(1)));
                    }
                    yearlyCashCollectionRset.close();
                    yearlyCashCollectionPstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class PatientControlAccount extends Thread {

        public void YearlyCashCollection() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement yearlyCashCollectionPstmt = connectDB.prepareStatement("SELECT sum(debit-credit) FROM ac_cash_collection WHERE transaction_type not ilike 'Banking' AND date between ? AND ?");
                    try {
                        yearlyCashCollectionPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(rangeDates[0][0].toString().trim())));
                        yearlyCashCollectionPstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(endDatePicker.getDate().toString())));
                    } catch (ParseException ex) {
                        Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    java.sql.ResultSet yearlyCashCollectionRset = yearlyCashCollectionPstmt.executeQuery();

                    while (yearlyCashCollectionRset.next()) {
                        ytdCashTotalHplk.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(yearlyCashCollectionRset.getDouble(1)));
                    }
                    yearlyCashCollectionRset.close();
                    yearlyCashCollectionPstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class GRNAccountBalance extends Thread {

        public void GRNAccountBalance() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement yearlyCashCollectionPstmt = connectDB.prepareStatement("SELECT sum(credit-debit) FROM ac_ledger WHERE  description ilike 'grn%' AND date <= ?");
                    try {
                        //    yearlyCashCollectionPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(beginDatePicker.getDate().toString())));
                        yearlyCashCollectionPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(endDatePicker.getDate().toString())));
                    } catch (ParseException ex) {
                        Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    java.sql.ResultSet yearlyCashCollectionRset = yearlyCashCollectionPstmt.executeQuery();

                    while (yearlyCashCollectionRset.next()) {
                        ytdGRNTotalHplk.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(yearlyCashCollectionRset.getDouble(1)));
                    }
                    yearlyCashCollectionRset.close();
                    yearlyCashCollectionPstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class FixedAssets extends Thread {

        public void FixedAssets() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement yearlyCashCollectionPstmt = connectDB.prepareStatement("SELECT sum(debit-credit) FROM ac_cash_collection WHERE transaction_type not ilike 'Banking' AND date between ? AND ?");
                    try {
                        yearlyCashCollectionPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(rangeDates[0][0].toString().trim())));
                        yearlyCashCollectionPstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(endDatePicker.getDate().toString())));
                    } catch (ParseException ex) {
                        Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    java.sql.ResultSet yearlyCashCollectionRset = yearlyCashCollectionPstmt.executeQuery();

                    while (yearlyCashCollectionRset.next()) {
                        ytdCashTotalHplk.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(yearlyCashCollectionRset.getDouble(1)));
                    }
                    yearlyCashCollectionRset.close();
                    yearlyCashCollectionPstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class CurrentAssets extends Thread {

        public void CurrentAssets() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement yearlyCashCollectionPstmt = connectDB.prepareStatement("SELECT sum(debit-credit) FROM ac_cash_collection WHERE transaction_type not ilike 'Banking' AND date between ? AND ?");
                    try {
                        yearlyCashCollectionPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(rangeDates[0][0].toString().trim())));
                        yearlyCashCollectionPstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(endDatePicker.getDate().toString())));
                    } catch (ParseException ex) {
                        Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    java.sql.ResultSet yearlyCashCollectionRset = yearlyCashCollectionPstmt.executeQuery();

                    while (yearlyCashCollectionRset.next()) {
                        ytdCashTotalHplk.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(yearlyCashCollectionRset.getDouble(1)));
                    }
                    yearlyCashCollectionRset.close();
                    yearlyCashCollectionPstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class CashBookBalance extends Thread {

        public void CashBookBalance() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement cashBookBalancePstmt = connectDB.prepareStatement("SELECT sum(debit-credit) FROM ac_cash_book WHERE date <= ?");
                    try {
                        // cashBookBalancePstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(rangeDates[0][0].toString().trim())));
                        cashBookBalancePstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(endDatePicker.getDate().toString())));
                    } catch (ParseException ex) {
                        Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    java.sql.ResultSet cashBookBalanceRset = cashBookBalancePstmt.executeQuery();

                    while (cashBookBalanceRset.next()) {
                        ytdCashBookTotalHplk4.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(cashBookBalanceRset.getDouble(1)));
                    }
                    cashBookBalanceRset.close();
                    cashBookBalancePstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class CashAtHandBalance extends Thread {

        public void CashAtHandBalance() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement cashAtHandBalancePstmt = connectDB.prepareStatement("SELECT sum(debit-credit) FROM ac_cash_collection WHERE date between ? AND ?");
                    try {
                        cashAtHandBalancePstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(rangeDates[0][0].toString().trim())));
                        cashAtHandBalancePstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(endDatePicker.getDate().toString())));
                    } catch (ParseException ex) {
                        Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    java.sql.ResultSet cashAtHandBalanceRset = cashAtHandBalancePstmt.executeQuery();

                    while (cashAtHandBalanceRset.next()) {
                        ytdCashTotalHplk.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(cashAtHandBalanceRset.getDouble(1)));
                    }
                    cashAtHandBalanceRset.close();
                    cashAtHandBalancePstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class PatientCardBalance extends Thread {

        public void PatientCardBalance() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement cashAtHandBalancePstmt = connectDB.prepareStatement("SELECT sum(debit-credit) FROM hp_patient_card WHERE date between ? AND ?");
                    try {
                        cashAtHandBalancePstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(rangeDates[0][0].toString().trim())));
                        cashAtHandBalancePstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(endDatePicker.getDate().toString())));
                    } catch (ParseException ex) {
                        Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    java.sql.ResultSet cashAtHandBalanceRset = cashAtHandBalancePstmt.executeQuery();

                    while (cashAtHandBalanceRset.next()) {
                        ytdPCardTotalHplk2.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(cashAtHandBalanceRset.getDouble(1)));
                    }
                    cashAtHandBalanceRset.close();
                    cashAtHandBalancePstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class TotalExpenses extends Thread {

        public void TotalExpenses() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement cashAtHandBalancePstmt = connectDB.prepareStatement("SELECT sum(debit-credit) FROM ac_ledger WHERE activity_code IN (SELECT code FROM pb_activity WHERE upper(category_class) = upper('pled')) AND date between ? AND ?");
                    try {
                        cashAtHandBalancePstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(beginDatePicker.getDate().toString())));
                        cashAtHandBalancePstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(endDatePicker.getDate().toString())));
                    } catch (ParseException ex) {
                        Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    java.sql.ResultSet cashAtHandBalanceRset = cashAtHandBalancePstmt.executeQuery();

                    while (cashAtHandBalanceRset.next()) {
                        ytdExpensesTotalHplk5.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(cashAtHandBalanceRset.getDouble(1)));
                    }
                    cashAtHandBalanceRset.close();
                    cashAtHandBalancePstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class TotalIncome extends Thread {

        public void TotalIncome() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement cashAtHandBalancePstmt = connectDB.prepareStatement("SELECT sum(credit-debit) FROM ac_ledger WHERE activity_code IN (SELECT code FROM pb_activity WHERE activity_category ILIKE 'I') AND date between ? AND ?");
                    try {
                        cashAtHandBalancePstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(beginDatePicker.getDate().toString())));
                        cashAtHandBalancePstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateFormat.parse(endDatePicker.getDate().toString())));
                    } catch (ParseException ex) {
                        Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    java.sql.ResultSet cashAtHandBalanceRset = cashAtHandBalancePstmt.executeQuery();

                    while (cashAtHandBalanceRset.next()) {
                        ytdRevenueTotalHplk6.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(cashAtHandBalanceRset.getDouble(1)));
                    }
                    cashAtHandBalanceRset.close();
                    cashAtHandBalancePstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class AverageOPDREAttendance extends Thread {

        public void AverageOPDREAttendance() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
//                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
//                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
//                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement averageOPDReAttendancePstmt = connectDB.prepareStatement("SELECT (count(patient_no)/90)::numeric(10,0) FROM hp_patient_visit WHERE upper(comments) = upper('old') AND date between ?::date - 90 AND ?::date");

                    averageOPDReAttendancePstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(endDatePicker.getDate()));
                    averageOPDReAttendancePstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(endDatePicker.getDate()));

                    java.sql.ResultSet averageOPDReAttendanceRset = averageOPDReAttendancePstmt.executeQuery();

                    while (averageOPDReAttendanceRset.next()) {
                        averageDailyRevisitsTxt.setText(String.valueOf(averageOPDReAttendanceRset.getInt(1)));
                    }
                    averageOPDReAttendanceRset.close();
                    averageOPDReAttendancePstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class AverageOPDAttendance extends Thread {

        public void AverageOPDAttendance() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
//                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
//                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
//                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement averageOPDAttendancePstmt = connectDB.prepareStatement("SELECT (count(patient_no)/90)::numeric(15,0) FROM hp_patient_visit WHERE  date between ?::date - 90 AND ?::date");

                    averageOPDAttendancePstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(endDatePicker.getDate()));
                    averageOPDAttendancePstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(endDatePicker.getDate()));

                    java.sql.ResultSet averageOPDAttendanceRset = averageOPDAttendancePstmt.executeQuery();

                    while (averageOPDAttendanceRset.next()) {
                        averageDailyAttendanceTxt.setText(String.valueOf(averageOPDAttendanceRset.getInt(1)));
                    }
                    averageOPDAttendanceRset.close();
                    averageOPDAttendancePstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class AverageDailyAdmissions extends Thread {

        public void AverageDailyAdmissions() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
//                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
//                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
//                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement averageDailyAdmissionsPstmt = connectDB.prepareStatement("SELECT (count(patient_no)/90)::numeric(15,0) FROM hp_admission WHERE  date_admitted between ?::date - 90 AND ?::date");

                    averageDailyAdmissionsPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(endDatePicker.getDate()));
                    averageDailyAdmissionsPstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(endDatePicker.getDate()));

                    java.sql.ResultSet averageDailyAdmissionsRset = averageDailyAdmissionsPstmt.executeQuery();

                    while (averageDailyAdmissionsRset.next()) {
                        averageDailyAdmissionsTxt.setText(String.valueOf(averageDailyAdmissionsRset.getInt(1)));
                    }
                    averageDailyAdmissionsRset.close();
                    averageDailyAdmissionsPstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class AverageDailyREAdmissions extends Thread {

        public void AverageDailyREAdmissions() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
//                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
//                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
//                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement averageDailyREAdmissionsPstmt = connectDB.prepareStatement("SELECT (count(patient_no)/90)::numeric(15,0) FROM hp_admission WHERE adm_type ILIKE 're%' AND date_admitted between ?::date - 90 AND ?::date");

                    averageDailyREAdmissionsPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(endDatePicker.getDate()));
                    averageDailyREAdmissionsPstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(endDatePicker.getDate()));

                    java.sql.ResultSet averageDailyREAdmissionsRset = averageDailyREAdmissionsPstmt.executeQuery();

                    while (averageDailyREAdmissionsRset.next()) {
                        averageDailyReadmissionsTxt.setText(String.valueOf(averageDailyREAdmissionsRset.getInt(1)));
                    }
                    averageDailyREAdmissionsRset.close();
                    averageDailyREAdmissionsPstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class Liabilities extends Thread {

        public void Liabilities() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
//                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
//                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
//                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement liabilitiesPstmt = connectDB.prepareStatement("SELECT sum(credit-debit) FROM ac_ledger WHERE activity_code IN (SELECT code FROM pb_activity WHERE upper(category_class) = upper('bl')) AND date <= ?::date");

                    //liabilitiesPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(endDatePicker.getDate()));
                    liabilitiesPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(endDatePicker.getDate()));

                    java.sql.ResultSet liabilitiesRset = liabilitiesPstmt.executeQuery();

                    while (liabilitiesRset.next()) {
                        ytdLiabilitiesTotalHplk7.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(liabilitiesRset.getDouble(1)));
                    }
                    liabilitiesRset.close();
                    liabilitiesPstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    class GrantsAndEquity extends Thread {

        public void GrantsAndEquity() {
        }

        @Override
        public synchronized void run() {
            while (true) {
                // if (endDatePicker.getDate() != null) {
//                com.afrisoftech.timeseries.YearyAgeing yearlyAgeingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, endDatePicker.getDate());
//                java.lang.Object[][] rangeDates = yearlyAgeingSeries.getAgeingDateSeries();
//                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");

                try {
                    java.sql.PreparedStatement grantsAndEquityPstmt = connectDB.prepareStatement("SELECT sum(credit-debit) FROM ac_ledger WHERE activity_code IN (SELECT code FROM pb_activity WHERE upper(category_class) = upper('bli')) AND date <= ?::date");

                    //liabilitiesPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(endDatePicker.getDate()));
                    grantsAndEquityPstmt.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(endDatePicker.getDate()));

                    java.sql.ResultSet grantsAndEquityRset = grantsAndEquityPstmt.executeQuery();

                    while (grantsAndEquityRset.next()) {
                        ytdEquityFundingTotalHplk8.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(grantsAndEquityRset.getDouble(1)));
                    }
                    grantsAndEquityRset.close();
                    grantsAndEquityPstmt.close();

                    // yearlyCashCollectionRset = null;
                    // yearlyCashCollectionPstmt = null;
                } catch (SQLException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    // javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), ex.toString());
                }
                try {
                    Thread.sleep(statisticsSnoozeTime);
                } catch (InterruptedException ex) {
                    Logger.getLogger(AccountsStatsIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
                // }

            }
        }
    }

    private void startThreads() {

        statisticsSnoozeTime = Integer.parseInt(System.getProperty("statistics.snooze.time", "5000"));

        DailyCashCollection dailyCashCollected = new DailyCashCollection();

        dailyCashCollected.start();

        DailyOpdTotal dailyOpd = new DailyOpdTotal();

        dailyOpd.start();

        DailyOpdNew dailyOpdNew = new DailyOpdNew();

        dailyOpdNew.start();

        DailyOpdOld dailyOpdOld = new DailyOpdOld();

        dailyOpdOld.start();

        DailyOpdStaff dailyOpdStaff = new DailyOpdStaff();

        dailyOpdStaff.start();

        PreviousPatients pAdm = new PreviousPatients();

        pAdm.start();

        DailyAdmission dailyAdm = new DailyAdmission();

        dailyAdm.start();

        ReAdmission reAdm = new ReAdmission();

        reAdm.start();

        TotalAdmission TotalAdm = new TotalAdmission();

        TotalAdm.start();

        TotalDischarges TotalDischarges = new TotalDischarges();

        TotalDischarges.start();

        TotalInPatients TotalIp = new TotalInPatients();

        TotalIp.start();

        YearlyAdmissions ytdAdm = new YearlyAdmissions();

        ytdAdm.start();

        YearlyOpd ytdOpd = new YearlyOpd();

        ytdOpd.start();

        MonthlyOpd mtdOpd = new MonthlyOpd();

        mtdOpd.start();

        MonthlyCashCollection monthlyCashCollected = new MonthlyCashCollection();

        monthlyCashCollected.start();

        QuaterlyCashCollection quaterlyCashCollected = new QuaterlyCashCollection();

        quaterlyCashCollected.start();

        YearlyCashCollection yearlyCashCollected = new YearlyCashCollection();

        yearlyCashCollected.start();

        YearlyBills yearlyBills = new YearlyBills();

        yearlyBills.start();

        MonthlyBills monthlyBills = new MonthlyBills();

        monthlyBills.start();

        QuarterlyBills quarterlyBills = new QuarterlyBills();

        quarterlyBills.start();

        DebtorsBalance debtorsBalance = new DebtorsBalance();

        debtorsBalance.start();

        CreditorsBalance creditorsBalance = new CreditorsBalance();

        creditorsBalance.start();

        PatientCardBalance patientCardBalance = new PatientCardBalance();

        patientCardBalance.start();

        GRNAccountBalance grnAccountBalance = new GRNAccountBalance();

        grnAccountBalance.start();

        InventoryBalance inventoryBalance = new InventoryBalance();

        inventoryBalance.start();

        TotalLiabilities totalLiabilities = new TotalLiabilities();

        totalLiabilities.start();

        TotalIncome totalIncome = new TotalIncome();

        totalIncome.start();

        TotalExpenses totalExpenses = new TotalExpenses();

        totalExpenses.start();

        AverageOPDAttendance averageOPDAttendance = new AverageOPDAttendance();

        averageOPDAttendance.start();

        AverageOPDREAttendance averageOPDREAttendance = new AverageOPDREAttendance();

        averageOPDREAttendance.start();

        AverageDailyAdmissions averageDailyAdmissions = new AverageDailyAdmissions();

        averageDailyAdmissions.start();

        AverageDailyREAdmissions averageDailyREAdmissions = new AverageDailyREAdmissions();

        averageDailyREAdmissions.start();

        CashBookBalance cashBookBalance = new CashBookBalance();

        cashBookBalance.start();

        Liabilities liabilities = new Liabilities();

        liabilities.start();

        GrantsAndEquity grantsAndEquity = new GrantsAndEquity();

        grantsAndEquity.start();

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel OPAttendanceIndicatorsPanel;
    private javax.swing.JTable accountDetailsPanel;
    private javax.swing.JPanel accountDetaledPanel;
    private javax.swing.JLabel averageDailyAdmissionsLbl;
    private javax.swing.JTextField averageDailyAdmissionsTxt;
    private javax.swing.JTextField averageDailyAttendanceTxt;
    private javax.swing.JTextField averageDailyReadmissionsTxt;
    private javax.swing.JLabel averageDailyRevisitsLbl;
    private javax.swing.JTextField averageDailyRevisitsTxt;
    private javax.swing.JLabel averageOPDAttendanceLbl;
    private javax.swing.JLabel averangeDailyReadmissionsLbl;
    private com.afrisoftech.lib.DatePicker beginDatePicker;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton closeBtn;
    private org.jdesktop.swingx.JXHyperlink dailyCashCollectionHplk;
    private javax.swing.JTextField dailyDischargesTxt;
    private javax.swing.JScrollPane detailsScrollPane;
    private com.afrisoftech.lib.DatePicker endDatePicker;
    private javax.swing.JTabbedPane facilityIndicatorsTabbedPane;
    private javax.swing.JButton helpBtn;
    private javax.swing.JTextField inPatientTxt;
    private javax.swing.JLabel ipdAdmissionsTotalLbl;
    private javax.swing.JLabel ipdReadmissionsLbl;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel ledgerBalancesPanel;
    private javax.swing.JLabel monthlyAdmissionsLbl;
    private javax.swing.JLabel mtdAdmissionsLbl;
    private org.jdesktop.swingx.JXHyperlink mtdCashTotalHplk;
    private org.jdesktop.swingx.JXLabel mtdCashTotalLbl;
    private javax.swing.JLabel mtdOPDAttendanceLbl;
    private javax.swing.JTextField mtdOPDAttendanceTxt;
    private org.jdesktop.swingx.JXHyperlink mtdRevenueTotalHplk13;
    private javax.swing.JTextField newlyRegisteredPatientTxt;
    private javax.swing.JLabel newlyRegisteredPatientsLbl;
    private javax.swing.JTextField previousPatientsTxt;
    private javax.swing.JLabel previouspatientsLbl;
    private org.jdesktop.swingx.JXHyperlink qtdCashTotalHplk;
    private org.jdesktop.swingx.JXLabel qtdCashTotalLbl;
    private org.jdesktop.swingx.JXHyperlink qtdRevenueTotalHplk12;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JTextField revisitingOPDPatientsTxt;
    private javax.swing.JLabel revisitingPatientsTodayLbl;
    private javax.swing.JLabel staffOPDAttendanceLbl;
    private javax.swing.JTextField staffOPDAttendanceTxt;
    private javax.swing.JPanel summaryPanel;
    private javax.swing.JLabel totalCashCollectedLbl;
    private javax.swing.JTextField totalDailyAdmissionsTxt;
    private javax.swing.JTextField totalDailyReadmissionsTxt;
    private javax.swing.JLabel totalOPDAttendanceLbl;
    private javax.swing.JTextField totalOPDAttendanceTxt;
    private javax.swing.JPanel trendAnalysisPanel;
    private javax.swing.JLabel weeklyAdmissionsLbl;
    private javax.swing.JTextField weeklyAdmissionsTxt;
    private javax.swing.JTextField ytdAdmissionsTxt;
    private org.jdesktop.swingx.JXHyperlink ytdCashBookTotalHplk4;
    private org.jdesktop.swingx.JXHyperlink ytdCashTotalHplk;
    private org.jdesktop.swingx.JXLabel ytdCashTotalLbl;
    private org.jdesktop.swingx.JXHyperlink ytdCreditorsTotalHplk9;
    private org.jdesktop.swingx.JXHyperlink ytdDebtorsTotalHplk10;
    private org.jdesktop.swingx.JXHyperlink ytdEquityFundingTotalHplk8;
    private org.jdesktop.swingx.JXHyperlink ytdExpensesTotalHplk5;
    private org.jdesktop.swingx.JXHyperlink ytdGRNTotalHplk;
    private javax.swing.JLabel ytdIPAdmissionsLbl;
    private org.jdesktop.swingx.JXHyperlink ytdInventoryTotalHplk3;
    private org.jdesktop.swingx.JXHyperlink ytdLiabilitiesTotalHplk7;
    private javax.swing.JTextField ytdOPDAtendanceTxt;
    private javax.swing.JLabel ytdOPDAttendanceLbl;
    private org.jdesktop.swingx.JXHyperlink ytdPCardTotalHplk2;
    private org.jdesktop.swingx.JXHyperlink ytdRevenueTotalHplk11;
    private org.jdesktop.swingx.JXHyperlink ytdRevenueTotalHplk6;
    // End of variables declaration//GEN-END:variables
}
