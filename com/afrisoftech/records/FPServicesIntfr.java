/*
 * FPServicesIntfr.java
 *
 * Created on March 29, 2003, 3:35 PM
 */
package com.afrisoftech.records;

import java.sql.Date;

/**
 *
 * @author  Charles W. Waweru <cwaweru@systempartners.biz>
 */
public class FPServicesIntfr extends javax.swing.JInternalFrame {

    java.sql.Connection connectDB = null;
    private javax.swing.JComboBox cmbox;
    private javax.swing.JComboBox cmbox1;

    /**
     * Creates new form FPServicesIntfr
     */
    public FPServicesIntfr(java.sql.Connection connDb) {

        connectDB = connDb;

        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pnButtonGroup = new javax.swing.ButtonGroup();
        pnTypeofVisit = new javax.swing.ButtonGroup();
        ntBreastFeedingbuttonGroup = new javax.swing.ButtonGroup();
        ccGrowthIndicatorsPanel = new javax.swing.ButtonGroup();
        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        clientSearchTxt = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        clientSearchTable = new com.afrisoftech.dbadmin.JTable();
        dispose = new javax.swing.JButton();
        treatmentPlanBtngrp = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        buttonGroup7 = new javax.swing.ButtonGroup();
        diseaseSearchDialog = new javax.swing.JDialog();
        diseaseSearchPanel = new javax.swing.JPanel();
        diseaseSearchTxt = new javax.swing.JTextField();
        diseaseSearchScrollPane = new javax.swing.JScrollPane();
        diseaseSearchTable = new com.afrisoftech.dbadmin.JTable();
        diseaseDisposeBtn = new javax.swing.JButton();
        familyCareTabbedPane = new javax.swing.JTabbedPane();
        filePane = new javax.swing.JPanel();
        bioDataPanel = new javax.swing.JPanel();
        serialNoLbl = new javax.swing.JLabel();
        serialNoTxt = new javax.swing.JTextField();
        firstVisitdateLbl = new javax.swing.JLabel();
        firstVisitDatePicker = new com.afrisoftech.lib.DatePicker();
        provinceLbl = new javax.swing.JLabel();
        provinceCmbx = new javax.swing.JComboBox();
        villageLbl = new javax.swing.JLabel();
        villageTxt = new javax.swing.JTextField();
        healthCentreLbl = new javax.swing.JLabel();
        dobLbl = new javax.swing.JLabel();
        dobDatePicker = new com.afrisoftech.lib.DatePicker();
        healthCentreBranchCmbx = new javax.swing.JComboBox();
        fileBloodGroupLbl = new javax.swing.JLabel();
        fileBloodGroupCmbx = new javax.swing.JComboBox();
        fileRhesusFactorsLbl = new javax.swing.JLabel();
        fileRhesusfactorCmbx = new javax.swing.JComboBox();
        regSaveDataBtn = new javax.swing.JButton();
        familyInfoPanel = new javax.swing.JPanel();
        familyInfoTabbedPane = new javax.swing.JTabbedPane();
        fatherInfoPanel = new javax.swing.JPanel();
        husbandLbl = new javax.swing.JLabel();
        husbandNameTxt = new javax.swing.JTextField();
        husbandOccupationLabl = new javax.swing.JLabel();
        husbanddateofBirthdatePicker = new com.afrisoftech.lib.DatePicker();
        husbandtelNoLbl = new javax.swing.JLabel();
        husbandTelNoTxt = new javax.swing.JTextField();
        husbandBloodGroupLbl = new javax.swing.JLabel();
        postHusbandInfoBtn = new javax.swing.JButton();
        jTextField9 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        motherInfoPanel = new javax.swing.JPanel();
        religionLbl = new javax.swing.JLabel();
        religionCmbx = new javax.swing.JComboBox();
        ageLbl = new javax.swing.JLabel();
        motherLbl = new javax.swing.JLabel();
        firstNameTxt = new javax.swing.JTextField();
        lastNameLbl = new javax.swing.JLabel();
        lastnameTxt = new javax.swing.JTextField();
        middleNameLbl = new javax.swing.JLabel();
        middleNameTxt = new javax.swing.JTextField();
        occupationLbl = new javax.swing.JLabel();
        occupationCmbx = new javax.swing.JComboBox();
        educationLevelLbl = new javax.swing.JLabel();
        educationLevelCmbx = new javax.swing.JComboBox();
        edddatePicker = new com.afrisoftech.lib.DatePicker();
        reasonForVisitLbl = new javax.swing.JLabel();
        addressTxt = new javax.swing.JTextField();
        howclientKnewcentreLbl = new javax.swing.JLabel();
        yearsOfNextPregLbl = new javax.swing.JLabel();
        nextAddTxt = new javax.swing.JTextField();
        expectedNoofPregLbl = new javax.swing.JLabel();
        telephoneTxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        heightTxt = new javax.swing.JTextField();
        agetxt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        gravidaTxt = new javax.swing.JTextField();
        parityTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        nextTxt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        nameOfInst = new javax.swing.JTextField();
        lmpDatePicker = new com.afrisoftech.lib.DatePicker();
        jLabel13 = new javax.swing.JLabel();
        ancTxt = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        buttonPanel = new javax.swing.JPanel();
        regEditdataBtn = new javax.swing.JButton();
        regClearFormBtn = new javax.swing.JButton();
        regCloseFormBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        saveMotherInfoBtn = new javax.swing.JButton();
        otherInfoPanel = new javax.swing.JPanel();
        familyMembersLbl = new javax.swing.JLabel();
        surgicalTxt = new javax.swing.JTextField();
        roomsLbl = new javax.swing.JLabel();
        diabTxt = new javax.swing.JTextField();
        physicalAddressLbl = new javax.swing.JLabel();
        hyperTxt = new javax.swing.JTextField();
        noSharingHseLbl = new javax.swing.JLabel();
        bloodTransmTxt = new javax.swing.JTextField();
        familyIncomeLbl = new javax.swing.JLabel();
        familyHistTxt = new javax.swing.JTextField();
        streetLbl = new javax.swing.JLabel();
        tuberTxt = new javax.swing.JTextField();
        postFamilyInfoBtn = new javax.swing.JButton();
        previousHistoryPanel = new javax.swing.JPanel();
        previousPregHistPanel = new javax.swing.JPanel();
        pregHistoryTableJscl = new javax.swing.JScrollPane();
        previousPregHistTbl = new javax.swing.JTable();
        previousPregOtherInfoPanel = new javax.swing.JPanel();
        commandpanel = new javax.swing.JPanel();
        spacerLbl = new javax.swing.JLabel();
        histSaveDataBtn = new javax.swing.JButton();
        histEditDataBtn = new javax.swing.JButton();
        histClearEntriesBtn = new javax.swing.JButton();
        histCloseFormBtn = new javax.swing.JButton();
        otherInfoPanel1 = new javax.swing.JPanel();
        familyMembersLbl1 = new javax.swing.JLabel();
        surgicalTxt1 = new javax.swing.JTextField();
        roomsLbl1 = new javax.swing.JLabel();
        diabTxt1 = new javax.swing.JTextField();
        physicalAddressLbl1 = new javax.swing.JLabel();
        hyperTxt1 = new javax.swing.JTextField();
        noSharingHseLbl1 = new javax.swing.JLabel();
        bloodTransmTxt1 = new javax.swing.JTextField();
        familyIncomeLbl1 = new javax.swing.JLabel();
        familyHistTxt1 = new javax.swing.JTextField();
        streetLbl1 = new javax.swing.JLabel();
        tuberTxt1 = new javax.swing.JTextField();
        postFamilyInfoBtn1 = new javax.swing.JButton();
        streetLbl2 = new javax.swing.JLabel();
        tuberTxt2 = new javax.swing.JTextField();
        anteNatalDiagnosticsPane = new javax.swing.JPanel();
        anMotherFollowupTp = new javax.swing.JTabbedPane();
        anRoutineExamsPanel = new javax.swing.JPanel();
        routineBtn = new javax.swing.JButton();
        pregHistoryTableJscl1 = new javax.swing.JScrollPane();
        previousPregHistTbl1 = new javax.swing.JTable();
        anComplaintsNUltrasoundPanel = new javax.swing.JPanel();
        ultraSoundBtn = new javax.swing.JButton();
        familyMembersLbl2 = new javax.swing.JLabel();
        noSharingHseLbl2 = new javax.swing.JLabel();
        streetLbl3 = new javax.swing.JLabel();
        surgicalTxt2 = new javax.swing.JTextField();
        roomsLbl2 = new javax.swing.JLabel();
        physicalAddressLbl2 = new javax.swing.JLabel();
        diabTxt2 = new javax.swing.JTextField();
        hyperTxt2 = new javax.swing.JTextField();
        familyHistTxt2 = new javax.swing.JTextField();
        familyIncomeLbl2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        healthCentreBranchCmbx1 = new javax.swing.JComboBox();
        fileRhesusfactorCmbx1 = new javax.swing.JComboBox();
        jPanel5 = new javax.swing.JPanel();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox9 = new javax.swing.JCheckBox();
        jCheckBox11 = new javax.swing.JCheckBox();
        jCheckBox12 = new javax.swing.JCheckBox();
        postNatalCare = new javax.swing.JPanel();
        pnMotherExamPanel = new javax.swing.JPanel();
        pnReferralLbl = new javax.swing.JLabel();
        pnReferralTxt = new javax.swing.JTextField();
        pnReferralReasonLbl = new javax.swing.JLabel();
        pnReferralReasonTxt = new javax.swing.JTextField();
        pnFollowupJscrl = new javax.swing.JScrollPane();
        pnFollowUpTable = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        pnButtonsPanel = new javax.swing.JPanel();
        pnSaveDataBtn = new javax.swing.JButton();
        pnEditDataBtn = new javax.swing.JButton();
        pnCloseFormBtn = new javax.swing.JButton();
        pnClearEntriesBtn = new javax.swing.JButton();
        pnButtonSpacerLbl = new javax.swing.JLabel();
        childCarePane = new javax.swing.JPanel();
        ccMoreInfoTp = new javax.swing.JTabbedPane();
        ccBioDataPanel = new javax.swing.JPanel();
        ccSerialNoLbl = new javax.swing.JLabel();
        ccSerialNoTxt = new javax.swing.JTextField();
        ccChildNameLbl = new javax.swing.JLabel();
        ccChildNameTxt = new javax.swing.JTextField();
        ccChildGenderLbl = new javax.swing.JLabel();
        ccChildGenderCmbx = new javax.swing.JComboBox();
        ccBCNoLbl = new javax.swing.JLabel();
        ccBCNoTxt = new javax.swing.JTextField();
        ccFirstVisitLbl = new javax.swing.JLabel();
        ccFirstVisitDatePicker = new com.afrisoftech.lib.DatePicker();
        ccChildDOBLbl = new javax.swing.JLabel();
        ccChildDOBDatePicker = new com.afrisoftech.lib.DatePicker();
        ccAgeYoungerRelLbl = new javax.swing.JLabel();
        ccAgeElderRelLbl = new javax.swing.JLabel();
        ccAgeYoungerRelTxt = new javax.swing.JTextField();
        ccAgeElderRelTxt = new javax.swing.JTextField();
        ccFemalesAliveLbl = new javax.swing.JLabel();
        ccMalesAliveLbl = new javax.swing.JLabel();
        noSistersAliveTxt = new javax.swing.JTextField();
        noBrothersAliveTxt = new javax.swing.JTextField();
        childFileBtn = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jCheckBox14 = new javax.swing.JCheckBox();
        jCheckBox13 = new javax.swing.JCheckBox();
        jTextField1 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        districtCmbx = new javax.swing.JComboBox();
        jLabel31 = new javax.swing.JLabel();
        jTextField23 = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        jTextField24 = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        districtCmbx1 = new javax.swing.JComboBox();
        jLabel33 = new javax.swing.JLabel();
        jTextField25 = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        jTextField26 = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        jTextField27 = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jTextField28 = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        jTextField29 = new javax.swing.JTextField();
        jTextField30 = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        ccChildClinicsPanel = new javax.swing.JPanel();
        ccButtonsPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        ccNutritionPanel = new javax.swing.JPanel();
        ccMilestonesPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        childClinicsTable = new javax.swing.JTable();
        childUpdateFileBtn = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        ntBreastFeedingChkbx = new javax.swing.JCheckBox();
        ntNotBreastFeedingChkbx = new javax.swing.JCheckBox();
        ntTypeofMilkLbl = new javax.swing.JLabel();
        ntTimeofAdditionalFoodLbl = new javax.swing.JLabel();
        growthIndicatorLbl = new javax.swing.JLabel();
        ntNoofMonthsBFLbl = new javax.swing.JLabel();
        ntNotBreastfeedingReasonLbl = new javax.swing.JLabel();
        ntTypeofMilkCmbx = new javax.swing.JComboBox();
        ntTimeofAdditionalFoodTxt = new javax.swing.JTextField();
        growthIndicatorCmbx = new javax.swing.JComboBox();
        ntNoofMonthsBFTxt = new javax.swing.JTextField();
        ntNotBreastfeedingReasonTxt = new javax.swing.JTextField();
        ntMethodFeedingLbl = new javax.swing.JLabel();
        ntTypeofAddFoodLbl = new javax.swing.JLabel();
        indicatorAgeLbl = new javax.swing.JLabel();
        ntStillBFChkbx = new javax.swing.JCheckBox();
        ntAdditionalFood = new javax.swing.JCheckBox();
        ntMethodFeedingCmbx = new javax.swing.JComboBox();
        ntTypeofAddFoodTxt = new javax.swing.JTextField();
        indicatorAgeTxt = new javax.swing.JTextField();
        nutritionGrowthBtn = new javax.swing.JButton();
        labBodyPanel = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        labRemarksTxt = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        counsellingTabbedPane = new javax.swing.JPanel();
        discussionsPanel = new javax.swing.JPanel();
        counsellingJscrl = new javax.swing.JScrollPane();
        counsellingTable = new javax.swing.JTable();
        fpCounsellingServicesBtn = new javax.swing.JButton();
        historyPanel = new javax.swing.JPanel();
        counsDateofLastDelLbl = new javax.swing.JLabel();
        counsDateofLatDeliveryDatePicker = new com.afrisoftech.lib.DatePicker();
        counsSexLbl = new javax.swing.JLabel();
        counsSexCmbx = new javax.swing.JComboBox();
        counsTypeofdeliveryLbl = new javax.swing.JLabel();
        counsTypeofDeliveryCmbx = new javax.swing.JComboBox();
        counsNoofDeliveriesLbl = new javax.swing.JLabel();
        counsNoofDeliveriesTxt = new javax.swing.JTextField();
        counsNoofAliveLbl = new javax.swing.JLabel();
        counsNoofAliveTxt = new javax.swing.JTextField();
        counsNoofDeadLbl = new javax.swing.JLabel();
        counsNoofDeadTxt = new javax.swing.JTextField();
        counsAbortTreatedLbl = new javax.swing.JLabel();
        counsAbortTreatedTxt = new javax.swing.JTextField();
        counsAbortNormalTxt = new javax.swing.JTextField();
        counsAbortNormalLbl = new javax.swing.JLabel();
        counsNoofChildAliveMaleLbl = new javax.swing.JLabel();
        counsNoofChildAliveFemaleLbl = new javax.swing.JLabel();
        counsNoofChildAliveMaleTxt = new javax.swing.JTextField();
        counsNoofChildAliveFemaleTxt = new javax.swing.JTextField();
        counsDateofLastPeriodLbl = new javax.swing.JLabel();
        counsDateofLastPeriodDatePicker = new com.afrisoftech.lib.DatePicker();
        counsDateofFirstPregLbl = new javax.swing.JLabel();
        counsDateofFirstPregDatePicker = new com.afrisoftech.lib.DatePicker();
        counsDateofFirstDeliveryLbl = new javax.swing.JLabel();
        counsDateofFirstDeliveryDatePicker = new com.afrisoftech.lib.DatePicker();
        counsSexofFirstChildLbl = new javax.swing.JLabel();
        counsSexofFirstDeliveryCmbx = new javax.swing.JComboBox();
        counsFisrtChildDeliveryTypeLbl = new javax.swing.JLabel();
        counsFisrtChildDeliveryTypeCmbx = new javax.swing.JComboBox();
        counsReasonForPlanningLbl = new javax.swing.JLabel();
        counsReasonForPlanningCmbx = new javax.swing.JComboBox();
        miscarriagesLbl = new javax.swing.JLabel();
        miscarriagesTxt = new javax.swing.JTextField();
        consellingButtonspanel = new javax.swing.JPanel();
        counsBtnSpacerLbl = new javax.swing.JLabel();
        counsSaveDataBtn = new javax.swing.JButton();
        counsEditDataBtn = new javax.swing.JButton();
        counsClearEntriesBtn = new javax.swing.JButton();
        counsCloseFormBtn = new javax.swing.JButton();
        generalExamServices = new javax.swing.JPanel();
        peBioDataPanel = new javax.swing.JPanel();
        peVisitDateLbl = new javax.swing.JLabel();
        visitDatePicker = new com.afrisoftech.lib.DatePicker();
        peSerialNumberLbl = new javax.swing.JLabel();
        peSerialNumberTxt = new javax.swing.JTextField();
        peName = new javax.swing.JLabel();
        peNameTxt = new javax.swing.JTextField();
        peEthnicLbl = new javax.swing.JLabel();
        peEthnicTxt = new javax.swing.JTextField();
        peMaritalStatusLbl = new javax.swing.JLabel();
        peMaritalStatusCmbx = new javax.swing.JComboBox();
        peDOBLbl = new javax.swing.JLabel();
        peDOBDatePicker = new com.afrisoftech.lib.DatePicker();
        pePresentMHLbl = new javax.swing.JLabel();
        pePresentMHTxt = new javax.swing.JTextField();
        pePastMHLbl = new javax.swing.JLabel();
        pePastMHTxt = new javax.swing.JTextField();
        peFamilyMHLbl = new javax.swing.JLabel();
        peFamilyMHTxt = new javax.swing.JTextField();
        geSaveBioDataBtn = new javax.swing.JButton();
        pePhycicalAppearancePanel = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        geExamsTable = new javax.swing.JTable();
        peInvestigationsPanel = new javax.swing.JPanel();
        Fit = new javax.swing.JLabel();
        peQualificationTxt = new javax.swing.JTextField();
        peQualificationLbl = new javax.swing.JLabel();
        peInvestigationsJscrl = new javax.swing.JScrollPane();
        peInvestigationsTable = new javax.swing.JTable();
        fitnessLevelCmbx = new javax.swing.JComboBox();
        peCommentsLbl = new javax.swing.JLabel();
        peCommentsJscrl = new javax.swing.JScrollPane();
        peCommentsTxt = new javax.swing.JTextArea();
        peButtonsPanel = new javax.swing.JPanel();
        peButtonSpacerLbl = new javax.swing.JLabel();
        peSaveDataBtn = new javax.swing.JButton();
        peEditDataBtn = new javax.swing.JButton();
        peClearDataBtn = new javax.swing.JButton();
        peExitFormBtn = new javax.swing.JButton();
        labServicesPanel = new javax.swing.JPanel();
        labHeaderPanel = new javax.swing.JPanel();
        labTestDatePickerLbl = new javax.swing.JLabel();
        labTestDatePicker = new com.afrisoftech.lib.DatePicker();
        labExamLbl = new javax.swing.JLabel();
        labExamTaken = new javax.swing.JComboBox();
        labButtonPanel = new javax.swing.JPanel();
        labButtonSpacerBtn = new javax.swing.JLabel();
        recordLaboratoryInfoBtn = new javax.swing.JButton();
        labCloseBtn = new javax.swing.JButton();
        familyPlanningPane = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        fpMedicalHistJscrl = new javax.swing.JScrollPane();
        fpMedicalHistTable = new javax.swing.JTable();
        fpExamsPanel = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        fpPhysicalExamPanel = new javax.swing.JPanel();
        fpBPLbl = new javax.swing.JLabel();
        fpBPTxt = new javax.swing.JTextField();
        fpWeightLbl = new javax.swing.JLabel();
        fpWeightTxt = new javax.swing.JTextField();
        fpTempLbl = new javax.swing.JLabel();
        fpTempTxt = new javax.swing.JTextField();
        fpHeartConditionLbl = new javax.swing.JLabel();
        fpHeartConditionCmbx = new javax.swing.JComboBox();
        fpBreastConditionLbl = new javax.swing.JLabel();
        fpBreastConditionCmbx = new javax.swing.JComboBox();
        fpCommentsLbl = new javax.swing.JLabel();
        fpCommentsJscrl = new javax.swing.JScrollPane();
        fpCommentsTxt = new javax.swing.JTextArea();
        fpBMILbl = new javax.swing.JLabel();
        fpBMITxt = new javax.swing.JTextField();
        fpSaveMedExamsBtn = new javax.swing.JButton();
        fpHeightLbl = new javax.swing.JLabel();
        fpHeightTxt = new javax.swing.JTextField();
        fpPelvicExamPanel = new javax.swing.JPanel();
        pelvicTableJscrl = new javax.swing.JScrollPane();
        pelvicTable = new javax.swing.JTable();
        pelvicExamBtn = new javax.swing.JButton();
        fpMenstrualGaenaPanel = new javax.swing.JPanel();
        fpDateofLMP = new javax.swing.JLabel();
        fpDateofLMPdatePicker = new com.afrisoftech.lib.DatePicker();
        fpLMPRegularLbl = new javax.swing.JLabel();
        fpLMPRegularCmbx = new javax.swing.JComboBox();
        fpBeginDateLMPDatePickerLbl = new javax.swing.JLabel();
        fpBeginDateLMPdatePicker = new com.afrisoftech.lib.DatePicker();
        fpEndDateLMPLbl = new javax.swing.JLabel();
        fpEndDateLMPDatePicker = new com.afrisoftech.lib.DatePicker();
        fpQtyofLMPLbl = new javax.swing.JLabel();
        fpQtyofLMPCmbx = new javax.swing.JComboBox();
        jScrollPane6 = new javax.swing.JScrollPane();
        lmpTable = new javax.swing.JTable();
        gaenaDataBtn = new javax.swing.JButton();
        fpLmpCommentsLbl = new javax.swing.JLabel();
        fpLmpCommentsTxt = new javax.swing.JTextField();
        fpMedicalHistoryPanel = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        obstetricalTable = new javax.swing.JTable();
        saveObstetricalDataBtn = new javax.swing.JButton();
        fpOtherInfoPanel = new javax.swing.JPanel();
        fpMaritalStatusLbl = new javax.swing.JLabel();
        fpMaritalStatusCmbx = new javax.swing.JComboBox();
        fpReceivedFPServicesLbl = new javax.swing.JLabel();
        fpReceivedFPServicesCmbx = new javax.swing.JComboBox();
        fpRHSDiscontinuationLbl = new javax.swing.JLabel();
        fpReasonforDiscFPContracTxt = new javax.swing.JTextField();
        fpContraceptivesRemarksLbl = new javax.swing.JLabel();
        fpContraceptivesRemarksJscrl = new javax.swing.JScrollPane();
        fpContraceptivesRemarksTxt = new javax.swing.JTextArea();
        updateFPInfoBtn = new javax.swing.JButton();
        fpServiceManagementPanel = new javax.swing.JPanel();
        fpServiceManagementPanelTabbedPane = new javax.swing.JTabbedPane();
        fpServicesIUDPanel = new javax.swing.JPanel();
        fpIUDInsertedLbl = new javax.swing.JLabel();
        fpIUDInsertedCmbx = new javax.swing.JComboBox();
        fpTypeofIUDLbl = new javax.swing.JLabel();
        fptypeofIUDCmbx = new javax.swing.JComboBox();
        fpReasonfornotInsertingIUDLbl = new javax.swing.JLabel();
        fpReasonforNotInsertingIUDTxt = new javax.swing.JTextField();
        fpTreatmentLbl = new javax.swing.JLabel();
        fpTreatmentTxt = new javax.swing.JTextField();
        fpIUDRecommedationLbl = new javax.swing.JLabel();
        fpIUDReferralLbl = new javax.swing.JLabel();
        fpIUDReferralTxt = new javax.swing.JTextField();
        fpIUDRemarksTxt = new javax.swing.JTextField();
        fpIUDFollowupDateLbl = new javax.swing.JLabel();
        fpIUDFollowupDatePicker = new com.afrisoftech.lib.DatePicker();
        saveIUDServicesBtn = new javax.swing.JButton();
        fpServicesIUDFollowupPanel = new javax.swing.JPanel();
        fpFUPDateofLMPLbl = new javax.swing.JLabel();
        fpFUPDateofLMPdatePicker = new com.afrisoftech.lib.DatePicker();
        fpFUPLMPRegularLbl = new javax.swing.JLabel();
        fpFUPLMPRegularCmbx = new javax.swing.JComboBox();
        fpFUPBeginDateLMPDatePickerLbl = new javax.swing.JLabel();
        fpFUPBeginDateLMPdatePicker = new com.afrisoftech.lib.DatePicker();
        fpFUPEndDateLMPLbl = new javax.swing.JLabel();
        fpFUPEndDateLMPDatePicker = new com.afrisoftech.lib.DatePicker();
        fpFUPQtyofLMPLbl = new javax.swing.JLabel();
        fpFUPQtyofLMPCmbx = new javax.swing.JComboBox();
        fpServiceFUPJscrl = new javax.swing.JScrollPane();
        fpServiceFUPTable = new javax.swing.JTable();
        fpSaveIUDFollowupBtn = new javax.swing.JButton();
        fpServicesContraceptivesPanel = new javax.swing.JPanel();
        fpContraTreatmentLbl = new javax.swing.JLabel();
        fpContraTreatmentTxt = new javax.swing.JTextField();
        fpContraceptivesTableJscrl = new javax.swing.JScrollPane();
        fpContraceptivesTable = new javax.swing.JTable();
        fpFUPContrareferralLbl = new javax.swing.JLabel();
        fpFUPContraLbl = new javax.swing.JLabel();
        fpFUPContraDatePicker = new com.afrisoftech.lib.DatePicker();
        fpFUPContrareferralTxt = new javax.swing.JTextField();
        fpSaveContraceptivesBtn = new javax.swing.JButton();
        fpServicesGynaeSTDPanel = new javax.swing.JPanel();
        fpGynaDischargeLbl = new javax.swing.JLabel();
        fpGynaDischargeCmbx = new javax.swing.JComboBox();
        fpDischargeDurationLbl = new javax.swing.JLabel();
        fpDischargeDurationTxt = new javax.swing.JTextField();
        fpDischargeQtyLbl = new javax.swing.JLabel();
        fpDischargeQtyTxt = new javax.swing.JTextField();
        fpAbdominalPainLbl = new javax.swing.JLabel();
        fpAbdominalPainCmbx = new javax.swing.JComboBox();
        fpAbdominalPainDurationLbl = new javax.swing.JLabel();
        fpAbdominalPainDurationTxt = new javax.swing.JTextField();
        fpAbdominalPainCharacterLbl = new javax.swing.JLabel();
        fpAbdominalPainCharacterTxt = new javax.swing.JTextField();
        fpHusbandSTPComplainLbl = new javax.swing.JLabel();
        fpHusbandSTPComplainTxt = new javax.swing.JTextField();
        fpSTDRelationtoSexLbl = new javax.swing.JLabel();
        fpSTDRelationtoSexCmbx = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        fpSTDMgmntLbl = new javax.swing.JLabel();
        fpSTDMgmntCmbx = new javax.swing.JComboBox();
        fpSTDConditionLbl = new javax.swing.JLabel();
        fpSTDConditionCmbx = new javax.swing.JComboBox();
        fpSTDOthersLbl = new javax.swing.JLabel();
        fpSTDOthersTxt = new javax.swing.JTextField();
        fpSTDTreatmentLbl = new javax.swing.JLabel();
        fpSTDTreatmentJscrl = new javax.swing.JScrollPane();
        fpSTDTreatmentTxt = new javax.swing.JTextPane();
        fpSTDReferralLbl = new javax.swing.JLabel();
        fpSTDReferralTxt = new javax.swing.JTextField();
        fpSTDFollowupDateLbl = new javax.swing.JLabel();
        fpSTDFollowupDatePicker = new com.afrisoftech.lib.DatePicker();
        fpSaveUltrasoundDataBtn = new javax.swing.JButton();
        fpSaveGynaeDataBtn = new javax.swing.JButton();
        fpButtonsPanel = new javax.swing.JPanel();
        fpSaveDataBtn = new javax.swing.JButton();
        fpEditDataBtn = new javax.swing.JButton();
        fpClearEntriesBtn = new javax.swing.JButton();
        fpCloseFormPanel = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        mammographyPanel = new javax.swing.JPanel();
        mmGenDataPanel = new javax.swing.JPanel();
        mmPrevSurgeryLbl = new javax.swing.JLabel();
        mmPrevSurgeryCmbx = new javax.swing.JComboBox();
        mmPlaceofPrevMammogramLbl = new javax.swing.JLabel();
        mmPrevMammogramChkbx = new javax.swing.JCheckBox();
        mmPlaceofPrevMammogramTxt = new javax.swing.JTextField();
        mmNoofPregLbl = new javax.swing.JLabel();
        mmNoofPregTxt = new javax.swing.JTextField();
        mmNoofchildLbl = new javax.swing.JLabel();
        mmNoofChildTxt = new javax.swing.JTextField();
        mmNoofAbortionsLbl = new javax.swing.JLabel();
        mmNoofAbortionsTxt = new javax.swing.JTextField();
        mmClientDOBLbl = new javax.swing.JLabel();
        mmDOBdatePicker = new com.afrisoftech.lib.DatePicker();
        mmHormonalTherapyChkbx = new javax.swing.JCheckBox();
        mmFamilyAffectedChkbx = new javax.swing.JCheckBox();
        mmOccupationLbl = new javax.swing.JLabel();
        mmOccupationCmbx = new javax.swing.JComboBox();
        mmMaritalStatus = new javax.swing.JCheckBox();
        mmRemarksJscrl = new javax.swing.JScrollPane();
        mmRemarksTxt = new javax.swing.JTextArea();
        mmRemarksLbl = new javax.swing.JLabel();
        mmExamPanel = new javax.swing.JPanel();
        mmExamsJscrl = new javax.swing.JScrollPane();
        mmExamsTable = new javax.swing.JTable();
        mmButtonPanel = new javax.swing.JPanel();
        mmEditDataBtn = new javax.swing.JButton();
        mmSpacerLbl = new javax.swing.JLabel();
        mmSaveDataBtn = new javax.swing.JButton();
        mmClearEntriesBtn = new javax.swing.JButton();
        mmCloseFormBtn = new javax.swing.JButton();
        recordDiseasesPanel = new javax.swing.JPanel();
        diseaseName = new javax.swing.JLabel();
        otherSpecificationsLbl = new javax.swing.JLabel();
        secondaryInfectionLbl = new javax.swing.JLabel();
        needsTreatMentPlanLbl = new javax.swing.JLabel();
        treatMentPlanYesChkbx = new javax.swing.JCheckBox();
        treatMentPlanNoChkbx = new javax.swing.JCheckBox();
        precsribedTreatMentLbl = new javax.swing.JLabel();
        reviewDateLbl = new javax.swing.JLabel();
        remarksLbl = new javax.swing.JLabel();
        doctorCmbx = new javax.swing.JComboBox();
        reviewDatePicker = new com.afrisoftech.lib.DatePicker();
        prescribedTreatmentJscrl = new javax.swing.JScrollPane();
        precsribedTreatmentTxt = new javax.swing.JTextArea();
        otherSpecificationsJscrl = new javax.swing.JScrollPane();
        otherSpecificationsTxt = new javax.swing.JTextArea();
        remarksCommentJscrl = new javax.swing.JScrollPane();
        recommedationsTxt = new javax.swing.JTextArea();
        reviewDatePickerLbl = new javax.swing.JLabel();
        secondaryInfectionTxt = new javax.swing.JTextField();
        labtestLbl = new javax.swing.JLabel();
        labtestCmbx = new javax.swing.JComboBox();
        treatmentReferralLbl = new javax.swing.JLabel();
        referralTreatmentLbl = new javax.swing.JLabel();
        referralJscrl = new javax.swing.JScrollPane();
        reasonforReferralTxt = new javax.swing.JTextArea();
        treatmentButtonPanel = new javax.swing.JPanel();
        saveTreatmentdataBtn = new javax.swing.JButton();
        closeFormBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        searchField1 = new javax.swing.JButton();
        diseaseNameTxt = new javax.swing.JTextField();
        referralFacilityCmbx = new javax.swing.JComboBox();
        rhCreateFilePanel = new javax.swing.JPanel();
        rhVisitdatePanel = new javax.swing.JLabel();
        rhVisitDatePicker = new com.afrisoftech.lib.DatePicker();
        rhClientName = new javax.swing.JLabel();
        rhClientCardNoLbl = new javax.swing.JLabel();
        rhClientCardNoTxt = new javax.swing.JTextField();
        patientFilePanel = new javax.swing.JPanel();
        searchField = new javax.swing.JButton();
        retrievedNoTxt = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel422 = new javax.swing.JPanel();
        searchButton22 = new javax.swing.JButton();
        jTextField82 = new javax.swing.JTextField();

        jSearchDialog.setUndecorated(true);
        jSearchDialog.setResizable(false);
        jSearchDialog.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                jSearchDialogComponentHidden(evt);
            }
        });
        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        clientSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                clientSearchTxtCaretUpdate(evt);
            }
        });
        clientSearchTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                clientSearchTxtFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel.add(clientSearchTxt, gridBagConstraints);

        clientSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
        clientSearchTable.setShowHorizontalLines(false);
        /*int rowsNo = 0;
        //try {

            crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

            crset1.setConnectionSource(pConnDB);

            // try {
                //crset1.execute();

                // crset2.setExecuteOnLoad(true);
                clientSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                    new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                    new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

                }));

                tableModel = clientSearchTable.getModel();

                jSearchScrollPane.setViewportView(clientSearchTable);

                /*   }catch(java.sql.SQLException sqlex){
                javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                System.out.println(sqlex.getMessage());

            }

            javax.swing.table.TableColumn column = null;

            for (int i = 0; i < 4; i++) {

                column = clientSearchTable.getColumnModel().getColumn(i);

                if (i == 1) {

                    column.setPreferredWidth(400);
                    //sport column is bigger
                } else {

                    column.setPreferredWidth(200);

                }
            }*/
            clientSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    clientSearchTableMouseClicked(evt);
                }
            });
            jSearchScrollPane.setViewportView(clientSearchTable);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

            dispose.setText("Dispose");
            dispose.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    disposeActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel.add(dispose, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

            diseaseSearchDialog.setUndecorated(true);
            diseaseSearchDialog.setResizable(false);
            diseaseSearchDialog.addComponentListener(new java.awt.event.ComponentAdapter() {
                public void componentHidden(java.awt.event.ComponentEvent evt) {
                    diseaseSearchDialogComponentHidden(evt);
                }
            });
            diseaseSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

            diseaseSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            diseaseSearchPanel.setLayout(new java.awt.GridBagLayout());

            diseaseSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    diseaseSearchTxtCaretUpdate(evt);
                }
            });
            diseaseSearchTxt.addFocusListener(new java.awt.event.FocusAdapter() {
                public void focusLost(java.awt.event.FocusEvent evt) {
                    diseaseSearchTxtFocusLost(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 300.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
            diseaseSearchPanel.add(diseaseSearchTxt, gridBagConstraints);

            diseaseSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
            diseaseSearchTable.setShowHorizontalLines(false);
            /*int rowsNo = 0;
            //try {

                crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

                crset1.setConnectionSource(pConnDB);

                // try {
                    //crset1.execute();

                    // crset2.setExecuteOnLoad(true);
                    clientSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                        new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                        new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                        new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                        new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

                    }));

                    tableModel = clientSearchTable.getModel();

                    jSearchScrollPane.setViewportView(clientSearchTable);

                    /*   }catch(java.sql.SQLException sqlex){
                    javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                    System.out.println(sqlex.getMessage());

                }

                javax.swing.table.TableColumn column = null;

                for (int i = 0; i < 4; i++) {

                    column = clientSearchTable.getColumnModel().getColumn(i);

                    if (i == 1) {

                        column.setPreferredWidth(400);
                        //sport column is bigger
                    } else {

                        column.setPreferredWidth(200);

                    }
                }*/
                diseaseSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        diseaseSearchTableMouseClicked(evt);
                    }
                });
                diseaseSearchScrollPane.setViewportView(diseaseSearchTable);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 20.0;
                diseaseSearchPanel.add(diseaseSearchScrollPane, gridBagConstraints);

                diseaseDisposeBtn.setText("Dispose");
                diseaseDisposeBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        diseaseDisposeBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                diseaseSearchPanel.add(diseaseDisposeBtn, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                diseaseSearchDialog.getContentPane().add(diseaseSearchPanel, gridBagConstraints);

                setClosable(true);
                setIconifiable(true);
                setMaximizable(true);
                setResizable(true);
                setTitle("Reproductive Health Centre - Ante-Natal, Post Natal and Family Planning Services");
                setDoubleBuffered(true);
                try {
                    setSelected(true);
                } catch (java.beans.PropertyVetoException e1) {
                    e1.printStackTrace();
                }
                setVisible(true);
                getContentPane().setLayout(new java.awt.GridBagLayout());

                familyCareTabbedPane.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

                filePane.setBorder(javax.swing.BorderFactory.createTitledBorder("File Information"));
                filePane.setLayout(new java.awt.GridBagLayout());

                bioDataPanel.setLayout(new java.awt.GridBagLayout());

                serialNoLbl.setText("Serial Number");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                bioDataPanel.add(serialNoLbl, gridBagConstraints);

                serialNoTxt.setEditable(false);
                serialNoTxt.setMinimumSize(new java.awt.Dimension(40, 20));
                serialNoTxt.setPreferredSize(new java.awt.Dimension(150, 20));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                bioDataPanel.add(serialNoTxt, gridBagConstraints);

                firstVisitdateLbl.setText("Date of first visit");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                bioDataPanel.add(firstVisitdateLbl, gridBagConstraints);

                firstVisitDatePicker.setPreferredSize(new java.awt.Dimension(150, 20));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                bioDataPanel.add(firstVisitDatePicker, gridBagConstraints);

                provinceLbl.setText("Province/County");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                bioDataPanel.add(provinceLbl, gridBagConstraints);

                provinceCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT DISTINCT province_name FROM pb_province UNION select DISTINCT county_name FROM pb_county ORDER BY 1"));
                provinceCmbx.setPreferredSize(new java.awt.Dimension(150, 20));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                bioDataPanel.add(provinceCmbx, gridBagConstraints);

                villageLbl.setText("Village");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                bioDataPanel.add(villageLbl, gridBagConstraints);

                villageTxt.setMinimumSize(new java.awt.Dimension(100, 20));
                villageTxt.setPreferredSize(new java.awt.Dimension(150, 20));
                villageTxt.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        villageTxtActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                bioDataPanel.add(villageTxt, gridBagConstraints);

                healthCentreLbl.setText("Health Care Branch");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                bioDataPanel.add(healthCentreLbl, gridBagConstraints);

                dobLbl.setText("Date of birth");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                bioDataPanel.add(dobLbl, gridBagConstraints);

                dobDatePicker.setPreferredSize(new java.awt.Dimension(150, 20));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                bioDataPanel.add(dobDatePicker, gridBagConstraints);

                healthCentreBranchCmbx.setEditable(true);
                healthCentreBranchCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT hc_branch_name  FROM hc_branches ORDER BY hc_branch_name"));
                healthCentreBranchCmbx.setMinimumSize(new java.awt.Dimension(100, 24));
                healthCentreBranchCmbx.setPreferredSize(new java.awt.Dimension(150, 24));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                bioDataPanel.add(healthCentreBranchCmbx, gridBagConstraints);

                fileBloodGroupLbl.setText("Blood group");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                bioDataPanel.add(fileBloodGroupLbl, gridBagConstraints);

                fileBloodGroupCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT blood_group FROM blood_group ORDER BY blood_group"));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                bioDataPanel.add(fileBloodGroupCmbx, gridBagConstraints);

                fileRhesusFactorsLbl.setText("Rhesus Factors");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                bioDataPanel.add(fileRhesusFactorsLbl, gridBagConstraints);

                fileRhesusfactorCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT rhesus_factor FROM rhesus_factor ORDER BY rhesus_factor"));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                bioDataPanel.add(fileRhesusfactorCmbx, gridBagConstraints);

                regSaveDataBtn.setText("Save file data");
                regSaveDataBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        regSaveDataBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                bioDataPanel.add(regSaveDataBtn, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 10.0;
                filePane.add(bioDataPanel, gridBagConstraints);

                familyInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Family Information"));
                familyInfoPanel.setLayout(new java.awt.GridBagLayout());

                familyInfoTabbedPane.setBackground(new java.awt.Color(255, 204, 204));
                familyInfoTabbedPane.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N

                fatherInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Child Information"));
                fatherInfoPanel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
                fatherInfoPanel.setLayout(new java.awt.GridBagLayout());

                husbandLbl.setText("Issued On:");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fatherInfoPanel.add(husbandLbl, gridBagConstraints);

                husbandNameTxt.setMinimumSize(new java.awt.Dimension(100, 20));
                husbandNameTxt.setPreferredSize(new java.awt.Dimension(300, 25));
                husbandNameTxt.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        husbandNameTxtActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                fatherInfoPanel.add(husbandNameTxt, gridBagConstraints);

                husbandOccupationLabl.setText("Name Of Client:");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fatherInfoPanel.add(husbandOccupationLabl, gridBagConstraints);

                husbanddateofBirthdatePicker.setPreferredSize(new java.awt.Dimension(300, 25));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fatherInfoPanel.add(husbanddateofBirthdatePicker, gridBagConstraints);

                husbandtelNoLbl.setText("Birth Notification No:");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fatherInfoPanel.add(husbandtelNoLbl, gridBagConstraints);

                husbandTelNoTxt.setMinimumSize(new java.awt.Dimension(100, 19));
                husbandTelNoTxt.setPreferredSize(new java.awt.Dimension(300, 25));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fatherInfoPanel.add(husbandTelNoTxt, gridBagConstraints);

                husbandBloodGroupLbl.setText("Name Of Child:");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fatherInfoPanel.add(husbandBloodGroupLbl, gridBagConstraints);

                postHusbandInfoBtn.setText("Post childs info");
                postHusbandInfoBtn.setToolTipText("Inserts Data to Database");
                postHusbandInfoBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        postHusbandInfoBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fatherInfoPanel.add(postHusbandInfoBtn, gridBagConstraints);

                jTextField9.setPreferredSize(new java.awt.Dimension(300, 25));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                fatherInfoPanel.add(jTextField9, gridBagConstraints);

                jLabel15.setText("Certificate of Birth Registration No:(after acquiring a certificate)");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                fatherInfoPanel.add(jLabel15, gridBagConstraints);

                jTextField10.setPreferredSize(new java.awt.Dimension(300, 30));
                jTextField10.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jTextField10ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                fatherInfoPanel.add(jTextField10, gridBagConstraints);

                familyInfoTabbedPane.addTab("Child's Information", fatherInfoPanel);
                fatherInfoPanel.getAccessibleContext().setAccessibleName("Child's Information");

                motherInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Mother Information"));
                motherInfoPanel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
                motherInfoPanel.setLayout(new java.awt.GridBagLayout());

                religionLbl.setText("Religion");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                motherInfoPanel.add(religionLbl, gridBagConstraints);

                religionCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT religion_name FROM pb_religion ORDER BY religion_name"));
                religionCmbx.setPreferredSize(new java.awt.Dimension(150, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                motherInfoPanel.add(religionCmbx, gridBagConstraints);

                ageLbl.setText("Age (yrs)");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                motherInfoPanel.add(ageLbl, gridBagConstraints);

                motherLbl.setText("First Name");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                motherInfoPanel.add(motherLbl, gridBagConstraints);

                firstNameTxt.setMinimumSize(new java.awt.Dimension(100, 20));
                firstNameTxt.setPreferredSize(new java.awt.Dimension(150, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                motherInfoPanel.add(firstNameTxt, gridBagConstraints);

                lastNameLbl.setText("Last/Sur Name");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                motherInfoPanel.add(lastNameLbl, gridBagConstraints);

                lastnameTxt.setMinimumSize(new java.awt.Dimension(100, 19));
                lastnameTxt.setPreferredSize(new java.awt.Dimension(150, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                motherInfoPanel.add(lastnameTxt, gridBagConstraints);

                middleNameLbl.setText("Middle Name");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                motherInfoPanel.add(middleNameLbl, gridBagConstraints);

                middleNameTxt.setMinimumSize(new java.awt.Dimension(100, 20));
                middleNameTxt.setPreferredSize(new java.awt.Dimension(150, 20));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                motherInfoPanel.add(middleNameTxt, gridBagConstraints);

                occupationLbl.setText("Occupation");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                motherInfoPanel.add(occupationLbl, gridBagConstraints);

                occupationCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT occupations FROM pb_occupation ORDER BY occupations"));
                occupationCmbx.setMinimumSize(new java.awt.Dimension(100, 18));
                occupationCmbx.setPreferredSize(new java.awt.Dimension(150, 20));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                motherInfoPanel.add(occupationCmbx, gridBagConstraints);

                educationLevelLbl.setText("Education Level");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                motherInfoPanel.add(educationLevelLbl, gridBagConstraints);

                educationLevelCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT edu_name FROM pb_education ORDER BY edu_name"));
                educationLevelCmbx.setPreferredSize(new java.awt.Dimension(150, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                motherInfoPanel.add(educationLevelCmbx, gridBagConstraints);

                edddatePicker.setPreferredSize(new java.awt.Dimension(150, 20));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 8;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                motherInfoPanel.add(edddatePicker, gridBagConstraints);

                reasonForVisitLbl.setText("Address");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                motherInfoPanel.add(reasonForVisitLbl, gridBagConstraints);

                addressTxt.setMinimumSize(new java.awt.Dimension(100, 19));
                addressTxt.setPreferredSize(new java.awt.Dimension(150, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                motherInfoPanel.add(addressTxt, gridBagConstraints);

                howclientKnewcentreLbl.setText("Next of Kin");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                motherInfoPanel.add(howclientKnewcentreLbl, gridBagConstraints);

                yearsOfNextPregLbl.setText("Next of Kin  Address");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                motherInfoPanel.add(yearsOfNextPregLbl, gridBagConstraints);

                nextAddTxt.setMinimumSize(new java.awt.Dimension(40, 19));
                nextAddTxt.setPreferredSize(new java.awt.Dimension(150, 20));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                motherInfoPanel.add(nextAddTxt, gridBagConstraints);

                expectedNoofPregLbl.setText("Telephone\\Mobile No:");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                motherInfoPanel.add(expectedNoofPregLbl, gridBagConstraints);

                telephoneTxt.setMinimumSize(new java.awt.Dimension(40, 19));
                telephoneTxt.setPreferredSize(new java.awt.Dimension(150, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                motherInfoPanel.add(telephoneTxt, gridBagConstraints);

                jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
                jLabel7.setText("L.m.p:");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 8;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                motherInfoPanel.add(jLabel7, gridBagConstraints);

                heightTxt.setMinimumSize(new java.awt.Dimension(40, 30));
                heightTxt.setPreferredSize(new java.awt.Dimension(150, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.ipadx = 1;
                gridBagConstraints.ipady = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weighty = 2.0;
                motherInfoPanel.add(heightTxt, gridBagConstraints);

                agetxt.setPreferredSize(new java.awt.Dimension(150, 20));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                motherInfoPanel.add(agetxt, gridBagConstraints);

                jLabel9.setText("Height");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                motherInfoPanel.add(jLabel9, gridBagConstraints);

                jLabel10.setText("Gravida");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                motherInfoPanel.add(jLabel10, gridBagConstraints);

                gravidaTxt.setPreferredSize(new java.awt.Dimension(150, 20));
                gravidaTxt.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        gravidaTxtActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                motherInfoPanel.add(gravidaTxt, gridBagConstraints);

                parityTxt.setPreferredSize(new java.awt.Dimension(150, 20));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                motherInfoPanel.add(parityTxt, gridBagConstraints);

                jLabel11.setText("Parity");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                motherInfoPanel.add(jLabel11, gridBagConstraints);

                nextTxt.setPreferredSize(new java.awt.Dimension(150, 20));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                motherInfoPanel.add(nextTxt, gridBagConstraints);

                jLabel12.setText("Name Of Institution");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                motherInfoPanel.add(jLabel12, gridBagConstraints);

                nameOfInst.setPreferredSize(new java.awt.Dimension(150, 20));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                motherInfoPanel.add(nameOfInst, gridBagConstraints);

                lmpDatePicker.setPreferredSize(new java.awt.Dimension(150, 20));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 8;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                motherInfoPanel.add(lmpDatePicker, gridBagConstraints);

                jLabel13.setText("ANC No:");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                motherInfoPanel.add(jLabel13, gridBagConstraints);

                ancTxt.setPreferredSize(new java.awt.Dimension(150, 20));
                ancTxt.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        ancTxtActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                motherInfoPanel.add(ancTxt, gridBagConstraints);

                jLabel14.setText("Expected Date Of Delivery(EDD)");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 8;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                motherInfoPanel.add(jLabel14, gridBagConstraints);

                buttonPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                buttonPanel.setPreferredSize(new java.awt.Dimension(224, 20));
                buttonPanel.setLayout(new java.awt.GridBagLayout());

                regEditdataBtn.setText("Edit file data");
                regEditdataBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        regEditdataBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                buttonPanel.add(regEditdataBtn, gridBagConstraints);

                regClearFormBtn.setText("Clear entries");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                buttonPanel.add(regClearFormBtn, gridBagConstraints);

                regCloseFormBtn.setText("Close form");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                buttonPanel.add(regCloseFormBtn, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 30.0;
                gridBagConstraints.weighty = 1.0;
                buttonPanel.add(jLabel1, gridBagConstraints);

                saveMotherInfoBtn.setText("Save data for mother");
                saveMotherInfoBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        saveMotherInfoBtnActionPerformed(evt);
                    }
                });
                buttonPanel.add(saveMotherInfoBtn, new java.awt.GridBagConstraints());

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 9;
                gridBagConstraints.gridwidth = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                motherInfoPanel.add(buttonPanel, gridBagConstraints);

                familyInfoTabbedPane.addTab("Maternal Profile", motherInfoPanel);

                otherInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Other Information"));
                otherInfoPanel.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
                otherInfoPanel.setLayout(new java.awt.GridBagLayout());

                familyMembersLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
                familyMembersLbl.setText("Surgical Operation:");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                otherInfoPanel.add(familyMembersLbl, gridBagConstraints);

                surgicalTxt.setMinimumSize(new java.awt.Dimension(100, 19));
                surgicalTxt.setPreferredSize(new java.awt.Dimension(150, 25));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                otherInfoPanel.add(surgicalTxt, gridBagConstraints);

                roomsLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
                roomsLbl.setText("Diabetes:");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                otherInfoPanel.add(roomsLbl, gridBagConstraints);

                diabTxt.setMinimumSize(new java.awt.Dimension(100, 19));
                diabTxt.setPreferredSize(new java.awt.Dimension(150, 25));
                diabTxt.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        diabTxtActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                otherInfoPanel.add(diabTxt, gridBagConstraints);

                physicalAddressLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
                physicalAddressLbl.setText("Hypertension:");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                otherInfoPanel.add(physicalAddressLbl, gridBagConstraints);

                hyperTxt.setMinimumSize(new java.awt.Dimension(100, 19));
                hyperTxt.setPreferredSize(new java.awt.Dimension(150, 25));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                otherInfoPanel.add(hyperTxt, gridBagConstraints);

                noSharingHseLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
                noSharingHseLbl.setText("Blood Transfusion:");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                otherInfoPanel.add(noSharingHseLbl, gridBagConstraints);

                bloodTransmTxt.setMinimumSize(new java.awt.Dimension(150, 25));
                bloodTransmTxt.setPreferredSize(new java.awt.Dimension(150, 25));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                otherInfoPanel.add(bloodTransmTxt, gridBagConstraints);

                familyIncomeLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
                familyIncomeLbl.setText("Family History: Twins");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                otherInfoPanel.add(familyIncomeLbl, gridBagConstraints);

                familyHistTxt.setMinimumSize(new java.awt.Dimension(70, 19));
                familyHistTxt.setPreferredSize(new java.awt.Dimension(150, 25));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                otherInfoPanel.add(familyHistTxt, gridBagConstraints);

                streetLbl.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
                streetLbl.setText("Tuberculosis:");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                otherInfoPanel.add(streetLbl, gridBagConstraints);

                tuberTxt.setMinimumSize(new java.awt.Dimension(100, 19));
                tuberTxt.setPreferredSize(new java.awt.Dimension(150, 25));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                otherInfoPanel.add(tuberTxt, gridBagConstraints);

                postFamilyInfoBtn.setText("Post History");
                postFamilyInfoBtn.setToolTipText("Button for inserting Medical and surgical history");
                postFamilyInfoBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        postFamilyInfoBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                otherInfoPanel.add(postFamilyInfoBtn, gridBagConstraints);

                familyInfoTabbedPane.addTab("Medical And Surgical History", otherInfoPanel);

                previousHistoryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("History of previous pregnancies"));
                previousHistoryPanel.setLayout(new java.awt.GridBagLayout());

                previousPregHistPanel.setLayout(new java.awt.GridBagLayout());

                previousPregHistTbl.setAutoCreateRowSorter(true);
                previousPregHistTbl.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null}
                    },
                    new String [] {
                        "Pregnancy Order", "Year", "ANC times", "Place of delivery", "Maturity", "Duration of labour", "Type of delivery", "Birth weight", "Sex", "Outcome", "peurperium"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }
                });
                //javax.swing.JComboBox cmbox = new javax.swing.JComboBox();
                //javax.swing.table.TableColumn genderColumn = previousPregHistTbl.getColumnModel().getColumn(3);
                //genderColumn.setCellEditor(new javax.swing.DefaultCellEditor(new javax.swing.JComboBox(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT gender_desc from gender ORDER BY gender_desc"))));

                //javax.swing.table.TableColumn deliveryStatusColumn = previousPregHistTbl.getColumnModel().getColumn(2);
                //deliveryStatusColumn.setCellEditor(new javax.swing.DefaultCellEditor(new javax.swing.JComboBox(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT delivery_status_desc from rh.delivery_status ORDER BY delivery_status_desc"))));

                javax.swing.table.TableColumn dateEditor = previousPregHistTbl.getColumnModel().getColumn(1);
                com.afrisoftech.lib.DateCellEditor dateCellEditor = new com.afrisoftech.lib.DateCellEditor(new com.afrisoftech.lib.DatePicker(), previousPregHistTbl);
                dateEditor.setCellEditor(dateCellEditor);
                //jTable1.setRowHeight(30);
                javax.swing.table.DefaultTableCellRenderer cellRenderer = new javax.swing.table.DefaultTableCellRenderer();
                cellRenderer.setHorizontalAlignment(cellRenderer.TRAILING);
                dateEditor.setCellRenderer(cellRenderer);

                java.lang.Object[] strCmb2 = {"First", "Second", "Third", "Fourth", "Fifth", "Sixth", "Seventh", "Eighth", "Ninth", "Tenth", "eleventh"};

                javax.swing.JComboBox cmBox2 = new javax.swing.JComboBox(strCmb2);

                javax.swing.table.TableColumn teditor2 = this.previousPregHistTbl.getColumn("Pregnancy Order");

                teditor2.setCellEditor(new javax.swing.DefaultCellEditor(cmBox2));

                java.lang.Object[] strCmb3 ={1,2,3,4,5,6,7,8};

                javax.swing.JComboBox cmBox3 = new javax.swing.JComboBox(strCmb3);

                javax.swing.table.TableColumn teditor3 = this.previousPregHistTbl.getColumn("ANC times");

                teditor3.setCellEditor(new javax.swing.DefaultCellEditor(cmBox3));

                java.lang.Object[] strCmb4 ={"SVD","Breech","Assisted delivery","Ceaserian","Tubal","Others"};

                javax.swing.JComboBox cmBox4 = new javax.swing.JComboBox(strCmb4);

                javax.swing.table.TableColumn teditor4 = this.previousPregHistTbl.getColumn("Type of delivery");

                teditor4.setCellEditor(new javax.swing.DefaultCellEditor(cmBox4));

                java.lang.Object[] strCmb5 ={"Male","Fmale"};

                javax.swing.JComboBox cmBox5 = new javax.swing.JComboBox(strCmb5);

                javax.swing.table.TableColumn teditor5 = this.previousPregHistTbl.getColumn("Sex");

                teditor5.setCellEditor(new javax.swing.DefaultCellEditor(cmBox5));

                java.lang.Object[] strCmb6 ={"Alive","Dead"};

                javax.swing.JComboBox cmBox6 = new javax.swing.JComboBox(strCmb6);

                javax.swing.table.TableColumn teditor6 = this.previousPregHistTbl.getColumn("Outcome");

                teditor6.setCellEditor(new javax.swing.DefaultCellEditor(cmBox6));

                java.lang.Object[] strCmb7 ={"Normal","PPH","Burst abdomen","Breast Eng.","DVT","Eclampsia"};

                javax.swing.JComboBox cmBox7 = new javax.swing.JComboBox(strCmb7);

                javax.swing.table.TableColumn teditor7 = this.previousPregHistTbl.getColumn("peurperium");

                teditor7.setCellEditor(new javax.swing.DefaultCellEditor(cmBox7));
                pregHistoryTableJscl.setViewportView(previousPregHistTbl);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                previousPregHistPanel.add(pregHistoryTableJscl, gridBagConstraints);

                previousPregOtherInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("History of previous diseases"));
                previousPregOtherInfoPanel.setLayout(new java.awt.GridBagLayout());
                previousPregHistPanel.add(previousPregOtherInfoPanel, new java.awt.GridBagConstraints());

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 20.0;
                previousHistoryPanel.add(previousPregHistPanel, gridBagConstraints);

                commandpanel.setLayout(new java.awt.GridBagLayout());
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 100.0;
                gridBagConstraints.weighty = 1.0;
                commandpanel.add(spacerLbl, gridBagConstraints);

                histSaveDataBtn.setText("Save data");
                histSaveDataBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        histSaveDataBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                commandpanel.add(histSaveDataBtn, gridBagConstraints);

                histEditDataBtn.setText("Edit data");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                commandpanel.add(histEditDataBtn, gridBagConstraints);

                histClearEntriesBtn.setText("Clear entries");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                commandpanel.add(histClearEntriesBtn, gridBagConstraints);

                histCloseFormBtn.setText("Close form");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                commandpanel.add(histCloseFormBtn, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                previousHistoryPanel.add(commandpanel, gridBagConstraints);

                familyInfoTabbedPane.addTab("History of previous pregnancies", previousHistoryPanel);

                otherInfoPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Other Information"));
                otherInfoPanel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
                otherInfoPanel1.setLayout(new java.awt.GridBagLayout());

                familyMembersLbl1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
                familyMembersLbl1.setText("General");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                otherInfoPanel1.add(familyMembersLbl1, gridBagConstraints);

                surgicalTxt1.setMinimumSize(new java.awt.Dimension(100, 19));
                surgicalTxt1.setPreferredSize(new java.awt.Dimension(150, 25));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridwidth = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                otherInfoPanel1.add(surgicalTxt1, gridBagConstraints);

                roomsLbl1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
                roomsLbl1.setText("Resp.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                otherInfoPanel1.add(roomsLbl1, gridBagConstraints);

                diabTxt1.setMinimumSize(new java.awt.Dimension(100, 19));
                diabTxt1.setPreferredSize(new java.awt.Dimension(150, 25));
                diabTxt1.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        diabTxt1ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                otherInfoPanel1.add(diabTxt1, gridBagConstraints);

                physicalAddressLbl1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
                physicalAddressLbl1.setText("Abdomen");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                otherInfoPanel1.add(physicalAddressLbl1, gridBagConstraints);

                hyperTxt1.setMinimumSize(new java.awt.Dimension(100, 19));
                hyperTxt1.setPreferredSize(new java.awt.Dimension(150, 25));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                otherInfoPanel1.add(hyperTxt1, gridBagConstraints);

                noSharingHseLbl1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
                noSharingHseLbl1.setText("CVS");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                otherInfoPanel1.add(noSharingHseLbl1, gridBagConstraints);

                bloodTransmTxt1.setMinimumSize(new java.awt.Dimension(150, 25));
                bloodTransmTxt1.setPreferredSize(new java.awt.Dimension(150, 25));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 2.0;
                gridBagConstraints.weighty = 1.0;
                otherInfoPanel1.add(bloodTransmTxt1, gridBagConstraints);

                familyIncomeLbl1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
                familyIncomeLbl1.setText("Discharge/GUD");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                otherInfoPanel1.add(familyIncomeLbl1, gridBagConstraints);

                familyHistTxt1.setMinimumSize(new java.awt.Dimension(70, 19));
                familyHistTxt1.setPreferredSize(new java.awt.Dimension(150, 25));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                otherInfoPanel1.add(familyHistTxt1, gridBagConstraints);

                streetLbl1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
                streetLbl1.setText("Breasts");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                otherInfoPanel1.add(streetLbl1, gridBagConstraints);

                tuberTxt1.setMinimumSize(new java.awt.Dimension(100, 19));
                tuberTxt1.setPreferredSize(new java.awt.Dimension(150, 25));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                otherInfoPanel1.add(tuberTxt1, gridBagConstraints);

                postFamilyInfoBtn1.setText("Post Physical Examination");
                postFamilyInfoBtn1.setToolTipText("Button for inserting Medical and surgical history");
                postFamilyInfoBtn1.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        postFamilyInfoBtn1ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                otherInfoPanel1.add(postFamilyInfoBtn1, gridBagConstraints);

                streetLbl2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
                streetLbl2.setText("Vaginal Examination");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                otherInfoPanel1.add(streetLbl2, gridBagConstraints);

                tuberTxt2.setMinimumSize(new java.awt.Dimension(100, 19));
                tuberTxt2.setPreferredSize(new java.awt.Dimension(150, 25));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                otherInfoPanel1.add(tuberTxt2, gridBagConstraints);

                familyInfoTabbedPane.addTab("Physical Examination (first visit)", otherInfoPanel1);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                familyInfoPanel.add(familyInfoTabbedPane, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 10.0;
                filePane.add(familyInfoPanel, gridBagConstraints);

                familyCareTabbedPane.addTab("File Registration for Mother", filePane);

                anteNatalDiagnosticsPane.setLayout(new java.awt.GridBagLayout());

                anMotherFollowupTp.setBorder(javax.swing.BorderFactory.createTitledBorder("Examinations on mother"));
                anMotherFollowupTp.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

                anRoutineExamsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Follow-up on condition of mother (Routine Examinations)"));
                anRoutineExamsPanel.setLayout(new java.awt.GridBagLayout());

                routineBtn.setText("Update routine exams file");
                routineBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        routineBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                anRoutineExamsPanel.add(routineBtn, gridBagConstraints);

                previousPregHistTbl1.setAutoCreateRowSorter(true);
                previousPregHistTbl1.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null, null, null}
                    },
                    new String [] {
                        "Urine", "Weight", "B.P", "H.B.", "Pallor", "Maturity", "Fundal height", "Presentation", "Lie", "Foetal heart", "Foetal Movt", "Oedema"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }
                });
                pregHistoryTableJscl1.setViewportView(previousPregHistTbl1);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 10.0;
                gridBagConstraints.weighty = 1.0;
                anRoutineExamsPanel.add(pregHistoryTableJscl1, gridBagConstraints);

                anMotherFollowupTp.addTab("Present Pregnancy", anRoutineExamsPanel);

                jPanel2.setVisible(false);
                anComplaintsNUltrasoundPanel.setLayout(new java.awt.GridBagLayout());

                ultraSoundBtn.setText("Save Antenatal file");
                ultraSoundBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        ultraSoundBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                anComplaintsNUltrasoundPanel.add(ultraSoundBtn, gridBagConstraints);

                familyMembersLbl2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
                familyMembersLbl2.setText("HB");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                anComplaintsNUltrasoundPanel.add(familyMembersLbl2, gridBagConstraints);

                noSharingHseLbl2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
                noSharingHseLbl2.setText("Blood Group");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                anComplaintsNUltrasoundPanel.add(noSharingHseLbl2, gridBagConstraints);

                streetLbl3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
                streetLbl3.setText("Rhesus");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                anComplaintsNUltrasoundPanel.add(streetLbl3, gridBagConstraints);

                surgicalTxt2.setMinimumSize(new java.awt.Dimension(100, 19));
                surgicalTxt2.setPreferredSize(new java.awt.Dimension(150, 25));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                anComplaintsNUltrasoundPanel.add(surgicalTxt2, gridBagConstraints);

                roomsLbl2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
                roomsLbl2.setText("Serology");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                anComplaintsNUltrasoundPanel.add(roomsLbl2, gridBagConstraints);

                physicalAddressLbl2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
                physicalAddressLbl2.setText("Urinalysis");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                anComplaintsNUltrasoundPanel.add(physicalAddressLbl2, gridBagConstraints);

                diabTxt2.setMinimumSize(new java.awt.Dimension(100, 19));
                diabTxt2.setPreferredSize(new java.awt.Dimension(150, 25));
                diabTxt2.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        diabTxt2ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                anComplaintsNUltrasoundPanel.add(diabTxt2, gridBagConstraints);

                hyperTxt2.setMinimumSize(new java.awt.Dimension(100, 19));
                hyperTxt2.setPreferredSize(new java.awt.Dimension(150, 25));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                anComplaintsNUltrasoundPanel.add(hyperTxt2, gridBagConstraints);

                familyHistTxt2.setMinimumSize(new java.awt.Dimension(70, 19));
                familyHistTxt2.setPreferredSize(new java.awt.Dimension(150, 25));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                anComplaintsNUltrasoundPanel.add(familyHistTxt2, gridBagConstraints);

                familyIncomeLbl2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
                familyIncomeLbl2.setText("BS for MPS");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                anComplaintsNUltrasoundPanel.add(familyIncomeLbl2, gridBagConstraints);

                jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("HIV:"));
                jPanel3.setLayout(new java.awt.GridBagLayout());

                buttonGroup1.add(jCheckBox1);
                jCheckBox1.setText("Reactive");
                jCheckBox1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jCheckBox1ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel3.add(jCheckBox1, gridBagConstraints);

                buttonGroup1.add(jCheckBox2);
                jCheckBox2.setText("Non Reactive");
                jCheckBox2.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jCheckBox2ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel3.add(jCheckBox2, gridBagConstraints);

                buttonGroup1.add(jCheckBox3);
                jCheckBox3.setText("Not Tested");
                jCheckBox3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                jCheckBox3.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jCheckBox3ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                gridBagConstraints.weighty = 1.0;
                jPanel3.add(jCheckBox3, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridheight = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                anComplaintsNUltrasoundPanel.add(jPanel3, gridBagConstraints);

                healthCentreBranchCmbx1.setEditable(true);
                healthCentreBranchCmbx1.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT blood_group FROM blood_group ORDER BY blood_group"));
                healthCentreBranchCmbx1.setMinimumSize(new java.awt.Dimension(100, 24));
                healthCentreBranchCmbx1.setPreferredSize(new java.awt.Dimension(150, 24));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                anComplaintsNUltrasoundPanel.add(healthCentreBranchCmbx1, gridBagConstraints);

                fileRhesusfactorCmbx1.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT rhesus_factor FROM rhesus_factor ORDER BY rhesus_factor"));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                anComplaintsNUltrasoundPanel.add(fileRhesusfactorCmbx1, gridBagConstraints);

                jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("TB Screening"));
                jPanel5.setLayout(new java.awt.GridBagLayout());

                buttonGroup2.add(jRadioButton2);
                jRadioButton2.setText("Yes");
                jPanel5.add(jRadioButton2, new java.awt.GridBagConstraints());

                buttonGroup2.add(jRadioButton1);
                jRadioButton1.setText("No");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                jPanel5.add(jRadioButton1, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                anComplaintsNUltrasoundPanel.add(jPanel5, gridBagConstraints);

                jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Infant Feeding", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 3, 11))); // NOI18N
                jPanel2.setLayout(new java.awt.GridBagLayout());

                jLabel18.setText("Infant feeding counseling done (all Mothers)");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel2.add(jLabel18, gridBagConstraints);

                jLabel17.setText("Counseling on exclusive breastfeeding done");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel2.add(jLabel17, gridBagConstraints);

                jLabel16.setText("Infant feeding options for HIV infected discussed");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel2.add(jLabel16, gridBagConstraints);

                jLabel8.setText("If yes, Mother's Decision");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel2.add(jLabel8, gridBagConstraints);

                buttonGroup3.add(jCheckBox4);
                jCheckBox4.setText("Yes");
                jCheckBox4.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                jPanel2.add(jCheckBox4, gridBagConstraints);

                buttonGroup3.add(jCheckBox5);
                jCheckBox5.setText("No");
                jCheckBox5.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                jPanel2.add(jCheckBox5, gridBagConstraints);

                buttonGroup4.add(jCheckBox6);
                jCheckBox6.setText("Yes");
                jCheckBox6.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                jPanel2.add(jCheckBox6, gridBagConstraints);

                buttonGroup4.add(jCheckBox7);
                jCheckBox7.setText("No");
                jCheckBox7.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.ipadx = 1;
                jPanel2.add(jCheckBox7, gridBagConstraints);

                buttonGroup5.add(jCheckBox10);
                jCheckBox10.setText("Yes");
                jCheckBox10.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.ipadx = 1;
                jPanel2.add(jCheckBox10, gridBagConstraints);

                buttonGroup5.add(jCheckBox8);
                jCheckBox8.setText("No");
                jCheckBox8.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.ipadx = 1;
                jPanel2.add(jCheckBox8, gridBagConstraints);

                buttonGroup6.add(jCheckBox9);
                jCheckBox9.setText("Exclusive breastfeeding");
                jCheckBox9.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.ipadx = 1;
                jPanel2.add(jCheckBox9, gridBagConstraints);

                buttonGroup6.add(jCheckBox11);
                jCheckBox11.setText("Replacement Feeding");
                jCheckBox11.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.ipadx = 1;
                jPanel2.add(jCheckBox11, gridBagConstraints);

                buttonGroup6.add(jCheckBox12);
                jCheckBox12.setText("Not Decided");
                jCheckBox12.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.weightx = 1.0;
                jPanel2.add(jCheckBox12, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.gridwidth = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                anComplaintsNUltrasoundPanel.add(jPanel2, gridBagConstraints);

                anMotherFollowupTp.addTab("Antenatal Profile", anComplaintsNUltrasoundPanel);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 2.0;
                anteNatalDiagnosticsPane.add(anMotherFollowupTp, gridBagConstraints);

                familyCareTabbedPane.addTab("Ante Natal  Profile", anteNatalDiagnosticsPane);

                postNatalCare.setLayout(new java.awt.GridBagLayout());

                pnMotherExamPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Post Natal Visit - Examination of Mother"));
                pnMotherExamPanel.setLayout(new java.awt.GridBagLayout());

                pnReferralLbl.setText("Referral (Name of facility referred to)");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                pnMotherExamPanel.add(pnReferralLbl, gridBagConstraints);

                pnReferralTxt.setMinimumSize(new java.awt.Dimension(100, 19));
                pnReferralTxt.setPreferredSize(new java.awt.Dimension(100, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                pnMotherExamPanel.add(pnReferralTxt, gridBagConstraints);

                pnReferralReasonLbl.setText("Reason for referral");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                pnMotherExamPanel.add(pnReferralReasonLbl, gridBagConstraints);

                pnReferralReasonTxt.setMinimumSize(new java.awt.Dimension(300, 19));
                pnReferralReasonTxt.setPreferredSize(new java.awt.Dimension(300, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                pnMotherExamPanel.add(pnReferralReasonTxt, gridBagConstraints);

                pnFollowUpTable.setAutoCreateRowSorter(true);
                pnFollowUpTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {"Blood Pressure", null},
                        {"Temp", null},
                        {"Pulse", null},
                        {"Respiratory Rate", null},
                        {"General Condition", null},
                        {"Breast", null},
                        {"C/S Scar", null},
                        {"Involution of Uterus", null},
                        {"Condition of Episiotomy", null},
                        {"Lochia", null},
                        {"Pelvic Exam", null},
                        {"Haemoglobin", null},
                        {"Mothers HIV status", null},
                        {"Baby's Condition", null},
                        {"Baby's Feeding Method", null},
                        {"Umbilical Cord", null},
                        {"Baby Immunization started(yes,no)", null},
                        {"Mother given vit A (Yes, No)", null},
                        {"Mother given ARV prophylaxis (Yes,No,N/A)", null},
                        {"Mother on HAART (Yes,No,N/A)", null},
                        {"Mother Cotrimoxazole prophylaxis initiated (Yes,No,N/A)", null},
                        {"Infant given ARV prophylaxis (Yes,No,N/A)", null},
                        {"Infant Cotrimoxazole prophylaxis initiated(Yes,No,N/A)", null},
                        {"Counseling on family planning", null}
                    },
                    new String [] {
                        "Description", "Findings"
                    }
                ) {
                    boolean[] canEdit = new boolean [] {
                        false, true
                    };

                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit [columnIndex];
                    }
                });
                javax.swing.table.TableColumn column = null;
                for (int i = 0; i < 2; i++) {
                    column = pnFollowUpTable.getColumnModel().getColumn(i);
                    if (i == 0) {

                        column.setPreferredWidth(400); //sport column is bigger
                    } else {
                        if(i == 1){
                            column.setPreferredWidth(100);
                        }
                    }
                }
                pnFollowupJscrl.setViewportView(pnFollowUpTable);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridwidth = 6;
                gridBagConstraints.gridheight = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 15.0;
                gridBagConstraints.weighty = 10.0;
                pnMotherExamPanel.add(pnFollowupJscrl, gridBagConstraints);

                jLabel19.setText("Date/Visit");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                pnMotherExamPanel.add(jLabel19, gridBagConstraints);

                jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "48 hours", "1 - 2 weeks", "4 - 6 weeks", "3 targeted visits" }));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                pnMotherExamPanel.add(jComboBox1, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 10.0;
                postNatalCare.add(pnMotherExamPanel, gridBagConstraints);

                pnButtonsPanel.setLayout(new java.awt.GridBagLayout());

                pnSaveDataBtn.setText("Save Post Natal visit data");
                pnSaveDataBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        pnSaveDataBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                pnButtonsPanel.add(pnSaveDataBtn, gridBagConstraints);

                pnEditDataBtn.setText("Edit data");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                pnButtonsPanel.add(pnEditDataBtn, gridBagConstraints);

                pnCloseFormBtn.setText("Close form");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                pnButtonsPanel.add(pnCloseFormBtn, gridBagConstraints);

                pnClearEntriesBtn.setText("Clear entries");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                pnButtonsPanel.add(pnClearEntriesBtn, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 200.0;
                gridBagConstraints.weighty = 1.0;
                pnButtonsPanel.add(pnButtonSpacerLbl, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                postNatalCare.add(pnButtonsPanel, gridBagConstraints);

                familyCareTabbedPane.addTab("Post Natal Services", postNatalCare);

                childCarePane.setLayout(new java.awt.GridBagLayout());

                ccBioDataPanel.setLayout(new java.awt.GridBagLayout());

                ccSerialNoLbl.setText("Child Serial No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                ccBioDataPanel.add(ccSerialNoLbl, gridBagConstraints);

                ccSerialNoTxt.setMinimumSize(new java.awt.Dimension(60, 19));
                ccSerialNoTxt.setPreferredSize(new java.awt.Dimension(100, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                ccBioDataPanel.add(ccSerialNoTxt, gridBagConstraints);

                ccChildNameLbl.setText("Child Name");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                ccBioDataPanel.add(ccChildNameLbl, gridBagConstraints);

                ccChildNameTxt.setMinimumSize(new java.awt.Dimension(150, 19));
                ccChildNameTxt.setPreferredSize(new java.awt.Dimension(150, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                ccBioDataPanel.add(ccChildNameTxt, gridBagConstraints);

                ccChildGenderLbl.setText("Child Gender");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                ccBioDataPanel.add(ccChildGenderLbl, gridBagConstraints);

                ccChildGenderCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT gender_desc FROM gender ORDER BY gender_desc"));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                ccBioDataPanel.add(ccChildGenderCmbx, gridBagConstraints);

                ccBCNoLbl.setText("Birth Cert. No.( if available)");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                ccBioDataPanel.add(ccBCNoLbl, gridBagConstraints);

                ccBCNoTxt.setMinimumSize(new java.awt.Dimension(40, 19));
                ccBCNoTxt.setPreferredSize(new java.awt.Dimension(50, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                ccBioDataPanel.add(ccBCNoTxt, gridBagConstraints);

                ccFirstVisitLbl.setText("Date of first visit");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                ccBioDataPanel.add(ccFirstVisitLbl, gridBagConstraints);

                ccFirstVisitDatePicker.setPreferredSize(new java.awt.Dimension(110, 20));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                ccBioDataPanel.add(ccFirstVisitDatePicker, gridBagConstraints);

                ccChildDOBLbl.setText("Date of birth");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                ccBioDataPanel.add(ccChildDOBLbl, gridBagConstraints);

                ccChildDOBDatePicker.setPreferredSize(new java.awt.Dimension(110, 20));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                ccBioDataPanel.add(ccChildDOBDatePicker, gridBagConstraints);

                ccAgeYoungerRelLbl.setText("Gestation at birth(weeks)");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                ccBioDataPanel.add(ccAgeYoungerRelLbl, gridBagConstraints);

                ccAgeElderRelLbl.setText("Father's Name");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                ccBioDataPanel.add(ccAgeElderRelLbl, gridBagConstraints);

                ccAgeYoungerRelTxt.setMinimumSize(new java.awt.Dimension(40, 19));
                ccAgeYoungerRelTxt.setPreferredSize(new java.awt.Dimension(50, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                ccBioDataPanel.add(ccAgeYoungerRelTxt, gridBagConstraints);

                ccAgeElderRelTxt.setMinimumSize(new java.awt.Dimension(70, 19));
                ccAgeElderRelTxt.setPreferredSize(new java.awt.Dimension(70, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                ccBioDataPanel.add(ccAgeElderRelTxt, gridBagConstraints);

                ccFemalesAliveLbl.setText("Birth Weight");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                ccBioDataPanel.add(ccFemalesAliveLbl, gridBagConstraints);

                ccMalesAliveLbl.setText("Mother's Name");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                ccBioDataPanel.add(ccMalesAliveLbl, gridBagConstraints);

                noSistersAliveTxt.setMinimumSize(new java.awt.Dimension(40, 19));
                noSistersAliveTxt.setPreferredSize(new java.awt.Dimension(50, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                ccBioDataPanel.add(noSistersAliveTxt, gridBagConstraints);

                noBrothersAliveTxt.setMinimumSize(new java.awt.Dimension(40, 19));
                noBrothersAliveTxt.setPreferredSize(new java.awt.Dimension(40, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                ccBioDataPanel.add(noBrothersAliveTxt, gridBagConstraints);

                childFileBtn.setText("Update child file");
                childFileBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        childFileBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 13;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                ccBioDataPanel.add(childFileBtn, gridBagConstraints);

                jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Place of birth", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 2, 11))); // NOI18N
                jPanel6.setLayout(new java.awt.GridBagLayout());

                buttonGroup7.add(jCheckBox14);
                jCheckBox14.setText("Health facility");
                jCheckBox14.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel6.add(jCheckBox14, gridBagConstraints);

                buttonGroup7.add(jCheckBox13);
                jCheckBox13.setText("Home");
                jCheckBox13.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                jPanel6.add(jCheckBox13, gridBagConstraints);

                jTextField1.addCaretListener(new javax.swing.event.CaretListener() {
                    public void caretUpdate(javax.swing.event.CaretEvent evt) {
                        jTextField1CaretUpdate(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 6;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 2.0;
                jPanel6.add(jTextField1, gridBagConstraints);

                jLabel21.setText("Other");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                jPanel6.add(jLabel21, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.gridwidth = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                ccBioDataPanel.add(jPanel6, gridBagConstraints);

                jLabel22.setText("County of Residence");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                ccBioDataPanel.add(jLabel22, gridBagConstraints);

                districtCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT county_name FROM pb_county ORDER BY 1"));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                ccBioDataPanel.add(districtCmbx, gridBagConstraints);

                jLabel31.setText("Division");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 9;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                ccBioDataPanel.add(jLabel31, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 9;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                ccBioDataPanel.add(jTextField23, gridBagConstraints);

                jLabel32.setText("Email");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 10;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                ccBioDataPanel.add(jLabel32, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 10;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                ccBioDataPanel.add(jTextField24, gridBagConstraints);

                jLabel23.setText("District/Sub County");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 8;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                ccBioDataPanel.add(jLabel23, gridBagConstraints);

                districtCmbx1.setEditable(true);
                districtCmbx1.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT district_name FROM pb_district ORDER BY district_name"));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 8;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                ccBioDataPanel.add(districtCmbx1, gridBagConstraints);

                jLabel33.setText("Location");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 10;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                ccBioDataPanel.add(jLabel33, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 10;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                ccBioDataPanel.add(jTextField25, gridBagConstraints);

                jLabel34.setText("Village/Estate");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 11;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                ccBioDataPanel.add(jLabel34, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 11;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                ccBioDataPanel.add(jTextField26, gridBagConstraints);

                jLabel35.setText("Town");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 8;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                ccBioDataPanel.add(jLabel35, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 8;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                ccBioDataPanel.add(jTextField27, gridBagConstraints);

                jLabel36.setText("P.O. Box");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                ccBioDataPanel.add(jLabel36, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                ccBioDataPanel.add(jTextField28, gridBagConstraints);

                jLabel37.setText("P.O. Box");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                ccBioDataPanel.add(jLabel37, gridBagConstraints);

                jTextField29.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                ccBioDataPanel.add(jTextField29, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 9;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                ccBioDataPanel.add(jTextField30, gridBagConstraints);

                jLabel38.setText("Telephone/Cell");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 9;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                ccBioDataPanel.add(jLabel38, gridBagConstraints);

                ccMoreInfoTp.addTab("Child Care Card", ccBioDataPanel);

                ccChildClinicsPanel.setLayout(new java.awt.GridBagLayout());
                ccMoreInfoTp.addTab("Follow-up on child clinics", ccChildClinicsPanel);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 20.0;
                childCarePane.add(ccMoreInfoTp, gridBagConstraints);

                ccButtonsPanel.setLayout(new java.awt.GridBagLayout());
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 100.0;
                ccButtonsPanel.add(jLabel4, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                childCarePane.add(ccButtonsPanel, gridBagConstraints);

                familyCareTabbedPane.addTab("Child Care", childCarePane);

                ccNutritionPanel.setLayout(new java.awt.GridBagLayout());

                ccMilestonesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Growth Indicators"));
                ccMilestonesPanel.setLayout(new java.awt.GridBagLayout());

                childClinicsTable.setAutoCreateRowSorter(true);
                childClinicsTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null}
                    },
                    new String [] {
                        "Age (Months)", "Weight (KGs)", "Height (cm)", "Temp (Deg Centig.)", "Remarks"
                    }
                ));
                childClinicsTable.setRowHeight(20);

                javax.swing.table.TableColumn ccDateEditor = childClinicsTable.getColumnModel().getColumn(0);
                com.afrisoftech.lib.DateCellEditor ccDateCellEditor = new com.afrisoftech.lib.DateCellEditor(new com.afrisoftech.lib.DatePicker(), childClinicsTable);
                ccDateEditor.setCellEditor(ccDateCellEditor);
                //jTable1.setRowHeight(30);
                javax.swing.table.DefaultTableCellRenderer ccCellRenderer = new javax.swing.table.DefaultTableCellRenderer();
                ccCellRenderer.setHorizontalAlignment(ccCellRenderer.TRAILING);
                ccDateEditor.setCellRenderer(ccCellRenderer);
                jScrollPane2.setViewportView(childClinicsTable);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 3.0;
                gridBagConstraints.weighty = 3.0;
                ccMilestonesPanel.add(jScrollPane2, gridBagConstraints);

                childUpdateFileBtn.setText("Update child care follow-up file");
                childUpdateFileBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        childUpdateFileBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                ccMilestonesPanel.add(childUpdateFileBtn, gridBagConstraints);

                jPanel7.setLayout(new java.awt.GridBagLayout());

                ntBreastFeedingbuttonGroup.add(ntBreastFeedingChkbx);
                ntBreastFeedingChkbx.setText("Breast feeding");
                ntBreastFeedingChkbx.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                ntBreastFeedingChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                ntBreastFeedingChkbx.setMargin(new java.awt.Insets(0, 0, 0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel7.add(ntBreastFeedingChkbx, gridBagConstraints);

                ntBreastFeedingbuttonGroup.add(ntNotBreastFeedingChkbx);
                ntNotBreastFeedingChkbx.setText("Not Breast feeding");
                ntNotBreastFeedingChkbx.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                ntNotBreastFeedingChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                ntNotBreastFeedingChkbx.setMargin(new java.awt.Insets(0, 0, 0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel7.add(ntNotBreastFeedingChkbx, gridBagConstraints);

                ntTypeofMilkLbl.setText("Type of milk");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel7.add(ntTypeofMilkLbl, gridBagConstraints);

                ntTimeofAdditionalFoodLbl.setText("Age(Month(s)) when baby starts feeding on additional food");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 8;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel7.add(ntTimeofAdditionalFoodLbl, gridBagConstraints);

                growthIndicatorLbl.setText("Gowth Indicator");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 9;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel7.add(growthIndicatorLbl, gridBagConstraints);

                ntNoofMonthsBFLbl.setText("Number of months breast feeding");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel7.add(ntNoofMonthsBFLbl, gridBagConstraints);

                ntNotBreastfeedingReasonLbl.setText("Reason for not breast feeding");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel7.add(ntNotBreastfeedingReasonLbl, gridBagConstraints);

                ntTypeofMilkCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT type_of_milk_desc FROM rh.type_of_milk ORDER BY type_of_milk_desc"));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(ntTypeofMilkCmbx, gridBagConstraints);

                ntTimeofAdditionalFoodTxt.setMinimumSize(new java.awt.Dimension(40, 19));
                ntTimeofAdditionalFoodTxt.setPreferredSize(new java.awt.Dimension(40, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 8;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(ntTimeofAdditionalFoodTxt, gridBagConstraints);

                growthIndicatorCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Has Teeth", "Can Talk", "Can Move", "Can sit without help", "Can stand without help", "Creeping" }));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 9;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(growthIndicatorCmbx, gridBagConstraints);

                ntNoofMonthsBFTxt.setMinimumSize(new java.awt.Dimension(40, 19));
                ntNoofMonthsBFTxt.setPreferredSize(new java.awt.Dimension(40, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(ntNoofMonthsBFTxt, gridBagConstraints);

                ntNotBreastfeedingReasonTxt.setMinimumSize(new java.awt.Dimension(150, 19));
                ntNotBreastfeedingReasonTxt.setPreferredSize(new java.awt.Dimension(150, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(ntNotBreastfeedingReasonTxt, gridBagConstraints);

                ntMethodFeedingLbl.setText("Method of feeding milk");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel7.add(ntMethodFeedingLbl, gridBagConstraints);

                ntTypeofAddFoodLbl.setText("Type of additional food");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel7.add(ntTypeofAddFoodLbl, gridBagConstraints);

                indicatorAgeLbl.setText("Indicate age for growth indicator");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 10;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel7.add(indicatorAgeLbl, gridBagConstraints);

                ntStillBFChkbx.setText("Still Breast feeding");
                ntStillBFChkbx.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                ntStillBFChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                ntStillBFChkbx.setMargin(new java.awt.Insets(0, 0, 0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(ntStillBFChkbx, gridBagConstraints);

                ntAdditionalFood.setText("Additional food");
                ntAdditionalFood.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                ntAdditionalFood.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                ntAdditionalFood.setMargin(new java.awt.Insets(0, 0, 0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(ntAdditionalFood, gridBagConstraints);

                ntMethodFeedingCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT feeding_methods_desc FROM rh.feeding_methods ORDER BY feeding_methods_desc"));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(ntMethodFeedingCmbx, gridBagConstraints);

                ntTypeofAddFoodTxt.setMinimumSize(new java.awt.Dimension(150, 19));
                ntTypeofAddFoodTxt.setPreferredSize(new java.awt.Dimension(150, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(ntTypeofAddFoodTxt, gridBagConstraints);

                indicatorAgeTxt.setMinimumSize(new java.awt.Dimension(70, 19));
                indicatorAgeTxt.setPreferredSize(new java.awt.Dimension(70, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 10;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(indicatorAgeTxt, gridBagConstraints);

                nutritionGrowthBtn.setText("Update child nutrition follow-up file");
                nutritionGrowthBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        nutritionGrowthBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 11;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                jPanel7.add(nutritionGrowthBtn, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridheight = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 3.0;
                ccMilestonesPanel.add(jPanel7, gridBagConstraints);

                labBodyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Laboratory Test/Examination Results"));
                labBodyPanel.setLayout(new java.awt.GridBagLayout());

                jScrollPane9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Clinical Notes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 2, 11))); // NOI18N

                labRemarksTxt.setColumns(20);
                labRemarksTxt.setRows(5);
                jScrollPane9.setViewportView(labRemarksTxt);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 3.0;
                labBodyPanel.add(jScrollPane9, gridBagConstraints);

                jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null}
                    },
                    new String [] {
                        "Vaccine", "Dose", "Next Visit"
                    }
                ));
                jTable1.setRowHeight(20);
                cmbox = new javax.swing.JComboBox();

                cmbox.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT vaccine FROM rh.vaccines_types"));
                javax.swing.table.TableColumn s = this.jTable1.getColumn("Vaccine");
                s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
                cmbox.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        cmboxActionPerformed(evt);
                    }
                });

                javax.swing.table.TableColumn ccDateEditorw = jTable1.getColumnModel().getColumn(2);
                com.afrisoftech.lib.DateCellEditor ccDateCellEditorw = new com.afrisoftech.lib.DateCellEditor(new com.afrisoftech.lib.DatePicker(), jTable1);
                ccDateEditorw.setCellEditor(ccDateCellEditorw);
                //jTable1.setRowHeight(30);
                javax.swing.table.DefaultTableCellRenderer ccCellRendererw = new javax.swing.table.DefaultTableCellRenderer();
                ccCellRendererw.setHorizontalAlignment(ccCellRendererw.TRAILING);
                ccDateEditorw.setCellRenderer(ccCellRendererw);
                jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        jTable1MouseClicked(evt);
                    }
                });
                jScrollPane1.setViewportView(jTable1);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridwidth = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 2.0;
                labBodyPanel.add(jScrollPane1, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 3.0;
                gridBagConstraints.weighty = 10.0;
                ccMilestonesPanel.add(labBodyPanel, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.gridwidth = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 5.0;
                ccNutritionPanel.add(ccMilestonesPanel, gridBagConstraints);

                familyCareTabbedPane.addTab("Nutrition", ccNutritionPanel);

                counsellingTabbedPane.setLayout(new java.awt.GridBagLayout());

                discussionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Post natal examination"));
                discussionsPanel.setLayout(new java.awt.GridBagLayout());

                counsellingTable.setAutoCreateRowSorter(true);
                counsellingTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                    },
                    new String [] {
                        "Examination", "48 hours", "2 weeks", "4 weeks"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }
                });
                javax.swing.table.TableColumn counsellingColumn = counsellingTable.getColumnModel().getColumn(0);
                counsellingColumn.setCellEditor(new javax.swing.DefaultCellEditor(new javax.swing.JComboBox(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT fp_service from fp_services ORDER BY fp_service"))));
                counsellingJscrl.setViewportView(counsellingTable);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 200.0;
                discussionsPanel.add(counsellingJscrl, gridBagConstraints);

                fpCounsellingServicesBtn.setText("Save");
                fpCounsellingServicesBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        fpCounsellingServicesBtnActionPerformed1(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
                gridBagConstraints.weightx = 1.0;
                discussionsPanel.add(fpCounsellingServicesBtn, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 10.0;
                counsellingTabbedPane.add(discussionsPanel, gridBagConstraints);

                historyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Delivery"));
                historyPanel.setLayout(new java.awt.GridBagLayout());

                counsDateofLastDelLbl.setText("Date of last delivery");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsDateofLastDelLbl, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsDateofLatDeliveryDatePicker, gridBagConstraints);

                counsSexLbl.setText("Baby");
                historyPanel.add(counsSexLbl, new java.awt.GridBagConstraints());

                counsSexCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT gender_desc  FROM gender ORDER BY gender_desc"));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsSexCmbx, gridBagConstraints);

                counsTypeofdeliveryLbl.setText("Mode of delivery");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsTypeofdeliveryLbl, gridBagConstraints);

                counsTypeofDeliveryCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT delivery_type_desc  FROM rh.delivery_type ORDER BY delivery_type_desc"));
                counsTypeofDeliveryCmbx.setMinimumSize(new java.awt.Dimension(100, 24));
                counsTypeofDeliveryCmbx.setPreferredSize(new java.awt.Dimension(100, 24));
                counsTypeofDeliveryCmbx.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        counsTypeofDeliveryCmbxActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsTypeofDeliveryCmbx, gridBagConstraints);

                counsNoofDeliveriesLbl.setText("Vitamin A");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsNoofDeliveriesLbl, gridBagConstraints);

                counsNoofDeliveriesTxt.setMinimumSize(new java.awt.Dimension(100, 19));
                counsNoofDeliveriesTxt.setPreferredSize(new java.awt.Dimension(100, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsNoofDeliveriesTxt, gridBagConstraints);

                counsNoofAliveLbl.setText("Blood loss(light/Medium/Heavy");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsNoofAliveLbl, gridBagConstraints);

                counsNoofAliveTxt.setMinimumSize(new java.awt.Dimension(100, 19));
                counsNoofAliveTxt.setPreferredSize(new java.awt.Dimension(100, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsNoofAliveTxt, gridBagConstraints);

                counsNoofDeadLbl.setText("AZT+");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsNoofDeadLbl, gridBagConstraints);

                counsNoofDeadTxt.setMinimumSize(new java.awt.Dimension(100, 19));
                counsNoofDeadTxt.setPreferredSize(new java.awt.Dimension(100, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsNoofDeadTxt, gridBagConstraints);

                counsAbortTreatedLbl.setText("Condition of mother");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsAbortTreatedLbl, gridBagConstraints);

                counsAbortTreatedTxt.setMinimumSize(new java.awt.Dimension(50, 19));
                counsAbortTreatedTxt.setPreferredSize(new java.awt.Dimension(50, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsAbortTreatedTxt, gridBagConstraints);

                counsAbortNormalTxt.setMinimumSize(new java.awt.Dimension(50, 19));
                counsAbortNormalTxt.setPreferredSize(new java.awt.Dimension(50, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsAbortNormalTxt, gridBagConstraints);

                counsAbortNormalLbl.setText("NVP+");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsAbortNormalLbl, gridBagConstraints);

                counsNoofChildAliveMaleLbl.setText("Home");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsNoofChildAliveMaleLbl, gridBagConstraints);

                counsNoofChildAliveFemaleLbl.setText("NVP");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsNoofChildAliveFemaleLbl, gridBagConstraints);

                counsNoofChildAliveMaleTxt.setMinimumSize(new java.awt.Dimension(40, 19));
                counsNoofChildAliveMaleTxt.setPreferredSize(new java.awt.Dimension(40, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsNoofChildAliveMaleTxt, gridBagConstraints);

                counsNoofChildAliveFemaleTxt.setMinimumSize(new java.awt.Dimension(40, 19));
                counsNoofChildAliveFemaleTxt.setPreferredSize(new java.awt.Dimension(40, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsNoofChildAliveFemaleTxt, gridBagConstraints);

                counsDateofLastPeriodLbl.setText("Place of Delivery");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsDateofLastPeriodLbl, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsDateofLastPeriodDatePicker, gridBagConstraints);

                counsDateofFirstPregLbl.setText("TEO");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsDateofFirstPregLbl, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsDateofFirstPregDatePicker, gridBagConstraints);

                counsDateofFirstDeliveryLbl.setText("Conducted by:Nurse");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsDateofFirstDeliveryLbl, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsDateofFirstDeliveryDatePicker, gridBagConstraints);

                counsSexofFirstChildLbl.setText("Mother");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsSexofFirstChildLbl, gridBagConstraints);

                counsSexofFirstDeliveryCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT gender_desc  FROM gender ORDER BY gender_desc"));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsSexofFirstDeliveryCmbx, gridBagConstraints);

                counsFisrtChildDeliveryTypeLbl.setText("clinical officer");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsFisrtChildDeliveryTypeLbl, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsFisrtChildDeliveryTypeCmbx, gridBagConstraints);

                counsReasonForPlanningLbl.setText("Oxytocin/Ergometrine");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsReasonForPlanningLbl, gridBagConstraints);

                counsReasonForPlanningCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT reason_desc  FROM rh.fp_services_reason ORDER BY reason_desc"));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(counsReasonForPlanningCmbx, gridBagConstraints);

                miscarriagesLbl.setText("Doctor");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 8;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(miscarriagesLbl, gridBagConstraints);

                miscarriagesTxt.setPreferredSize(new java.awt.Dimension(20, 20));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 8;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                historyPanel.add(miscarriagesTxt, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 10.0;
                counsellingTabbedPane.add(historyPanel, gridBagConstraints);

                consellingButtonspanel.setLayout(new java.awt.GridBagLayout());
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 30.0;
                gridBagConstraints.weighty = 1.0;
                consellingButtonspanel.add(counsBtnSpacerLbl, gridBagConstraints);

                counsSaveDataBtn.setText("Save delivery data");
                counsSaveDataBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        counsSaveDataBtnActionPerformed(evt);
                    }
                });
                consellingButtonspanel.add(counsSaveDataBtn, new java.awt.GridBagConstraints());

                counsEditDataBtn.setText("Edit data");
                counsEditDataBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        counsEditDataBtnActionPerformed(evt);
                    }
                });
                consellingButtonspanel.add(counsEditDataBtn, new java.awt.GridBagConstraints());

                counsClearEntriesBtn.setText("Clear entries");
                consellingButtonspanel.add(counsClearEntriesBtn, new java.awt.GridBagConstraints());

                counsCloseFormBtn.setText("Close form");
                consellingButtonspanel.add(counsCloseFormBtn, new java.awt.GridBagConstraints());

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                counsellingTabbedPane.add(consellingButtonspanel, gridBagConstraints);

                familyCareTabbedPane.addTab("Post Natal Examination", counsellingTabbedPane);

                generalExamServices.setLayout(new java.awt.GridBagLayout());

                peBioDataPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
                peBioDataPanel.setForeground(new java.awt.Color(240, 240, 240));
                peBioDataPanel.setEnabled(false);
                peBioDataPanel.setLayout(new java.awt.GridBagLayout());

                peVisitDateLbl.setText("Visit Date");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                peBioDataPanel.add(peVisitDateLbl, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                peBioDataPanel.add(visitDatePicker, gridBagConstraints);

                peSerialNumberLbl.setText("Serial No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                peBioDataPanel.add(peSerialNumberLbl, gridBagConstraints);

                peSerialNumberTxt.setMinimumSize(new java.awt.Dimension(70, 19));
                peSerialNumberTxt.setPreferredSize(new java.awt.Dimension(70, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                peBioDataPanel.add(peSerialNumberTxt, gridBagConstraints);

                peName.setText("Name");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                peBioDataPanel.add(peName, gridBagConstraints);

                peNameTxt.setMinimumSize(new java.awt.Dimension(150, 19));
                peNameTxt.setPreferredSize(new java.awt.Dimension(150, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                peBioDataPanel.add(peNameTxt, gridBagConstraints);

                peEthnicLbl.setText("Ethnic Background");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                peBioDataPanel.add(peEthnicLbl, gridBagConstraints);

                peEthnicTxt.setMinimumSize(new java.awt.Dimension(100, 19));
                peEthnicTxt.setPreferredSize(new java.awt.Dimension(100, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                peBioDataPanel.add(peEthnicTxt, gridBagConstraints);

                peMaritalStatusLbl.setText("Marital Status");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                peBioDataPanel.add(peMaritalStatusLbl, gridBagConstraints);

                peMaritalStatusCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT marital_status_desc  FROM rh.marital_status ORDER BY marital_status_desc"));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                peBioDataPanel.add(peMaritalStatusCmbx, gridBagConstraints);

                peDOBLbl.setText("Date of Birth");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                peBioDataPanel.add(peDOBLbl, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                peBioDataPanel.add(peDOBDatePicker, gridBagConstraints);

                pePresentMHLbl.setText("Present Medical History");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                peBioDataPanel.add(pePresentMHLbl, gridBagConstraints);

                pePresentMHTxt.setMinimumSize(new java.awt.Dimension(150, 19));
                pePresentMHTxt.setPreferredSize(new java.awt.Dimension(150, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                peBioDataPanel.add(pePresentMHTxt, gridBagConstraints);

                pePastMHLbl.setText("Past medical History");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                peBioDataPanel.add(pePastMHLbl, gridBagConstraints);

                pePastMHTxt.setMinimumSize(new java.awt.Dimension(150, 19));
                pePastMHTxt.setPreferredSize(new java.awt.Dimension(150, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                peBioDataPanel.add(pePastMHTxt, gridBagConstraints);

                peFamilyMHLbl.setText("Family Medical History");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 3;
                peBioDataPanel.add(peFamilyMHLbl, gridBagConstraints);

                peFamilyMHTxt.setMinimumSize(new java.awt.Dimension(150, 19));
                peFamilyMHTxt.setPreferredSize(new java.awt.Dimension(150, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                peBioDataPanel.add(peFamilyMHTxt, gridBagConstraints);

                geSaveBioDataBtn.setText("Save Bio Data");
                geSaveBioDataBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        geSaveBioDataBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
                gridBagConstraints.weightx = 1.0;
                peBioDataPanel.add(geSaveBioDataBtn, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 20.0;
                generalExamServices.add(peBioDataPanel, gridBagConstraints);

                pePhycicalAppearancePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Examination/General Physical Appearance"));
                pePhycicalAppearancePanel.setLayout(new java.awt.GridBagLayout());

                geExamsTable.setAutoCreateRowSorter(true);
                geExamsTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                    },
                    new String [] {
                        "Examination", "Specify", "Result", "Remarks"
                    }
                ));
                javax.swing.table.TableColumn geConditionsColumn = geExamsTable.getColumnModel().getColumn(0);
                geConditionsColumn.setCellEditor(new javax.swing.DefaultCellEditor(new javax.swing.JComboBox(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT test_desc from rh.ante_routine_tests ORDER BY test_desc"))));
                jScrollPane8.setViewportView(geExamsTable);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                pePhycicalAppearancePanel.add(jScrollPane8, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 20.0;
                generalExamServices.add(pePhycicalAppearancePanel, gridBagConstraints);

                peInvestigationsPanel.setBackground(new java.awt.Color(255, 153, 153));
                peInvestigationsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Investigations"));
                peInvestigationsPanel.setLayout(new java.awt.GridBagLayout());

                Fit.setText("Fitness Level");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                peInvestigationsPanel.add(Fit, gridBagConstraints);

                peQualificationTxt.setMinimumSize(new java.awt.Dimension(150, 19));
                peQualificationTxt.setPreferredSize(new java.awt.Dimension(150, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                peInvestigationsPanel.add(peQualificationTxt, gridBagConstraints);

                peQualificationLbl.setText("Name/Qualification");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                peInvestigationsPanel.add(peQualificationLbl, gridBagConstraints);

                peInvestigationsTable.setAutoCreateRowSorter(true);
                peInvestigationsTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                    },
                    new String [] {
                        "Investigation", "Specific Info.", "Result", "Remarks"
                    }
                ));
                javax.swing.table.TableColumn peConditionsColumn = peInvestigationsTable.getColumnModel().getColumn(0);
                peConditionsColumn.setCellEditor(new javax.swing.DefaultCellEditor(new javax.swing.JComboBox(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT test_desc from rh.ante_routine_tests ORDER BY test_desc"))));
                peInvestigationsJscrl.setViewportView(peInvestigationsTable);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridwidth = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 10.0;
                peInvestigationsPanel.add(peInvestigationsJscrl, gridBagConstraints);

                fitnessLevelCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT fitness_level_desc FROM rh.fitness_level ORDER BY fitness_level_desc"));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                peInvestigationsPanel.add(fitnessLevelCmbx, gridBagConstraints);

                peCommentsLbl.setText("Comments/Remarks");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                peInvestigationsPanel.add(peCommentsLbl, gridBagConstraints);

                peCommentsTxt.setColumns(20);
                peCommentsTxt.setRows(5);
                peCommentsJscrl.setViewportView(peCommentsTxt);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.gridwidth = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 5.0;
                peInvestigationsPanel.add(peCommentsJscrl, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 20.0;
                generalExamServices.add(peInvestigationsPanel, gridBagConstraints);

                peButtonsPanel.setLayout(new java.awt.GridBagLayout());
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 50.0;
                gridBagConstraints.weighty = 1.0;
                peButtonsPanel.add(peButtonSpacerLbl, gridBagConstraints);

                peSaveDataBtn.setText("Save Examination/Investigations data");
                peSaveDataBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        peSaveDataBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                peButtonsPanel.add(peSaveDataBtn, gridBagConstraints);

                peEditDataBtn.setText("Edit data");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                peButtonsPanel.add(peEditDataBtn, gridBagConstraints);

                peClearDataBtn.setText("Clear entries");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                peButtonsPanel.add(peClearDataBtn, gridBagConstraints);

                peExitFormBtn.setText("Close form");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                peButtonsPanel.add(peExitFormBtn, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                generalExamServices.add(peButtonsPanel, gridBagConstraints);

                familyCareTabbedPane.addTab("General Examination services", generalExamServices);

                labServicesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Laboratory & Immunization Procedures"));
                labServicesPanel.setLayout(new java.awt.GridBagLayout());

                labHeaderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Laboratory Tests/Examination"));
                labHeaderPanel.setLayout(new java.awt.GridBagLayout());

                labTestDatePickerLbl.setText("Date of laboratory test/exam");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                labHeaderPanel.add(labTestDatePickerLbl, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                labHeaderPanel.add(labTestDatePicker, gridBagConstraints);

                labExamLbl.setText("Name of laboratory test/examination");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                labHeaderPanel.add(labExamLbl, gridBagConstraints);

                labExamTaken.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT service_type  FROM pb_operating_parameters WHERE main_service ilike 'laboratory'"));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                labHeaderPanel.add(labExamTaken, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 200.0;
                labServicesPanel.add(labHeaderPanel, gridBagConstraints);

                labButtonPanel.setLayout(new java.awt.GridBagLayout());
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 200.0;
                gridBagConstraints.weighty = 1.0;
                labButtonPanel.add(labButtonSpacerBtn, gridBagConstraints);

                recordLaboratoryInfoBtn.setText("Record laboratory information");
                recordLaboratoryInfoBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        recordLaboratoryInfoBtnActionPerformed(evt);
                    }
                });
                labButtonPanel.add(recordLaboratoryInfoBtn, new java.awt.GridBagConstraints());

                labCloseBtn.setText("Close form");
                labCloseBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        labCloseBtnActionPerformed(evt);
                    }
                });
                labButtonPanel.add(labCloseBtn, new java.awt.GridBagConstraints());

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                labServicesPanel.add(labButtonPanel, gridBagConstraints);

                familyCareTabbedPane.addTab("Clinic Services & Immunization", labServicesPanel);

                familyPlanningPane.setLayout(new java.awt.GridBagLayout());

                jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Medical History"));
                jPanel4.setLayout(new java.awt.GridBagLayout());

                fpMedicalHistTable.setAutoCreateRowSorter(true);
                fpMedicalHistTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                    },
                    new String [] {
                        "Condition", "Client Affected", "Family Affected", "Comments"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.Object.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Object.class
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }
                });
                javax.swing.table.TableColumn fpConditionsColumn = fpMedicalHistTable.getColumnModel().getColumn(0);
                fpConditionsColumn.setCellEditor(new javax.swing.DefaultCellEditor(new javax.swing.JComboBox(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT test_desc from rh.ante_routine_tests ORDER BY test_desc"))));
                fpMedicalHistJscrl.setViewportView(fpMedicalHistTable);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel4.add(fpMedicalHistJscrl, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 10.0;
                familyPlanningPane.add(jPanel4, gridBagConstraints);

                fpExamsPanel.setLayout(new java.awt.GridBagLayout());

                jTabbedPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Family Planning details"));
                jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

                fpPhysicalExamPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Physical Examination"));
                fpPhysicalExamPanel.setLayout(new java.awt.GridBagLayout());

                fpBPLbl.setText("Blood Pressure");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpPhysicalExamPanel.add(fpBPLbl, gridBagConstraints);

                fpBPTxt.setMinimumSize(new java.awt.Dimension(40, 19));
                fpBPTxt.setPreferredSize(new java.awt.Dimension(40, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpPhysicalExamPanel.add(fpBPTxt, gridBagConstraints);

                fpWeightLbl.setText("Weight (Kg)");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpPhysicalExamPanel.add(fpWeightLbl, gridBagConstraints);

                fpWeightTxt.setMinimumSize(new java.awt.Dimension(40, 19));
                fpWeightTxt.setPreferredSize(new java.awt.Dimension(40, 19));
                fpWeightTxt.addCaretListener(new javax.swing.event.CaretListener() {
                    public void caretUpdate(javax.swing.event.CaretEvent evt) {
                        fpWeightTxtCaretUpdate(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpPhysicalExamPanel.add(fpWeightTxt, gridBagConstraints);

                fpTempLbl.setText("Temperature (Degrees Centg.)");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpPhysicalExamPanel.add(fpTempLbl, gridBagConstraints);

                fpTempTxt.setMinimumSize(new java.awt.Dimension(40, 19));
                fpTempTxt.setPreferredSize(new java.awt.Dimension(40, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpPhysicalExamPanel.add(fpTempTxt, gridBagConstraints);

                fpHeartConditionLbl.setText("Heart condition");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                fpPhysicalExamPanel.add(fpHeartConditionLbl, gridBagConstraints);

                fpHeartConditionCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Normal", "Abnormal" }));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                fpPhysicalExamPanel.add(fpHeartConditionCmbx, gridBagConstraints);

                fpBreastConditionLbl.setText("Breast Condition");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpPhysicalExamPanel.add(fpBreastConditionLbl, gridBagConstraints);

                fpBreastConditionCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Normal", "Abnormal" }));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpPhysicalExamPanel.add(fpBreastConditionCmbx, gridBagConstraints);

                fpCommentsLbl.setText("Comments/Remarks");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                fpPhysicalExamPanel.add(fpCommentsLbl, gridBagConstraints);

                fpCommentsTxt.setColumns(20);
                fpCommentsTxt.setRows(5);
                fpCommentsJscrl.setViewportView(fpCommentsTxt);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.gridheight = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpPhysicalExamPanel.add(fpCommentsJscrl, gridBagConstraints);

                fpBMILbl.setText("Calculated BMI");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpPhysicalExamPanel.add(fpBMILbl, gridBagConstraints);

                fpBMITxt.setEditable(false);
                fpBMITxt.setMinimumSize(new java.awt.Dimension(40, 19));
                fpBMITxt.setPreferredSize(new java.awt.Dimension(40, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpPhysicalExamPanel.add(fpBMITxt, gridBagConstraints);

                fpSaveMedExamsBtn.setText("Save Physical Exams data");
                fpSaveMedExamsBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        fpSaveMedExamsBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpPhysicalExamPanel.add(fpSaveMedExamsBtn, gridBagConstraints);

                fpHeightLbl.setText("Height(Meters)");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpPhysicalExamPanel.add(fpHeightLbl, gridBagConstraints);

                fpHeightTxt.setPreferredSize(new java.awt.Dimension(40, 20));
                fpHeightTxt.addCaretListener(new javax.swing.event.CaretListener() {
                    public void caretUpdate(javax.swing.event.CaretEvent evt) {
                        fpHeightTxtCaretUpdate(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpPhysicalExamPanel.add(fpHeightTxt, gridBagConstraints);

                jTabbedPane1.addTab("Physical Examination", fpPhysicalExamPanel);

                fpPelvicExamPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Pelvic Examination"));
                fpPelvicExamPanel.setLayout(new java.awt.GridBagLayout());

                pelvicTable.setAutoCreateRowSorter(true);
                pelvicTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                    },
                    new String [] {
                        "Examination Item", "Condition", "Specific Information", "Comment/Remark"
                    }
                ));
                pelvicTableJscrl.setViewportView(pelvicTable);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 100.0;
                fpPelvicExamPanel.add(pelvicTableJscrl, gridBagConstraints);

                pelvicExamBtn.setText("Save Pelvic Exam data");
                pelvicExamBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        pelvicExamBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                gridBagConstraints.weightx = 1.0;
                fpPelvicExamPanel.add(pelvicExamBtn, gridBagConstraints);

                jTabbedPane1.addTab("Pelvic Examination", fpPelvicExamPanel);

                fpMenstrualGaenaPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Menstrual/Gaenacological History"));
                fpMenstrualGaenaPanel.setLayout(new java.awt.GridBagLayout());

                fpDateofLMP.setText("Date of LMP");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpMenstrualGaenaPanel.add(fpDateofLMP, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpMenstrualGaenaPanel.add(fpDateofLMPdatePicker, gridBagConstraints);

                fpLMPRegularLbl.setText("Was LMP Regular?");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpMenstrualGaenaPanel.add(fpLMPRegularLbl, gridBagConstraints);

                fpLMPRegularCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "True", "False" }));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpMenstrualGaenaPanel.add(fpLMPRegularCmbx, gridBagConstraints);

                fpBeginDateLMPDatePickerLbl.setText("Begin Date of LMP");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpMenstrualGaenaPanel.add(fpBeginDateLMPDatePickerLbl, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpMenstrualGaenaPanel.add(fpBeginDateLMPdatePicker, gridBagConstraints);

                fpEndDateLMPLbl.setText("End Date of LMP");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpMenstrualGaenaPanel.add(fpEndDateLMPLbl, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpMenstrualGaenaPanel.add(fpEndDateLMPDatePicker, gridBagConstraints);

                fpQtyofLMPLbl.setText("Quantity of LMP");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpMenstrualGaenaPanel.add(fpQtyofLMPLbl, gridBagConstraints);

                fpQtyofLMPCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT lmp_qty_desc  FROM rh.lmp_qty ORDER BY lmp_qty_desc"));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpMenstrualGaenaPanel.add(fpQtyofLMPCmbx, gridBagConstraints);

                lmpTable.setAutoCreateRowSorter(true);
                lmpTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                    },
                    new String [] {
                        "Item/Condition", "Client Affected", "Specify", "Remarks"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }
                });
                jScrollPane6.setViewportView(lmpTable);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.gridwidth = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 100.0;
                fpMenstrualGaenaPanel.add(jScrollPane6, gridBagConstraints);

                gaenaDataBtn.setText("Update Gaenacological data");
                gaenaDataBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        gaenaDataBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                gridBagConstraints.weightx = 1.0;
                fpMenstrualGaenaPanel.add(gaenaDataBtn, gridBagConstraints);

                fpLmpCommentsLbl.setText("Comments");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpMenstrualGaenaPanel.add(fpLmpCommentsLbl, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpMenstrualGaenaPanel.add(fpLmpCommentsTxt, gridBagConstraints);

                jTabbedPane1.addTab("Menstrual/Gynaecological history", fpMenstrualGaenaPanel);

                fpMedicalHistoryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Midical History - Obstetrical"));
                fpMedicalHistoryPanel.setLayout(new java.awt.GridBagLayout());

                obstetricalTable.setAutoCreateRowSorter(true);
                obstetricalTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                    },
                    new String [] {
                        "Investigation", "Status", "Specific info.", "Remarks"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }
                });
                jScrollPane7.setViewportView(obstetricalTable);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 100.0;
                fpMedicalHistoryPanel.add(jScrollPane7, gridBagConstraints);

                saveObstetricalDataBtn.setText("Save Obstetrical data");
                saveObstetricalDataBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        saveObstetricalDataBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                gridBagConstraints.weightx = 1.0;
                fpMedicalHistoryPanel.add(saveObstetricalDataBtn, gridBagConstraints);

                jTabbedPane1.addTab("Obstetrical history", fpMedicalHistoryPanel);

                fpOtherInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("FP - Other Information"));
                fpOtherInfoPanel.setLayout(new java.awt.GridBagLayout());

                fpMaritalStatusLbl.setText("Marital Status");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpOtherInfoPanel.add(fpMaritalStatusLbl, gridBagConstraints);

                fpMaritalStatusCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT marital_status_desc  FROM rh.marital_status ORDER BY marital_status_desc"));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpOtherInfoPanel.add(fpMaritalStatusCmbx, gridBagConstraints);

                fpReceivedFPServicesLbl.setText("Received FP Services before?");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpOtherInfoPanel.add(fpReceivedFPServicesLbl, gridBagConstraints);

                fpReceivedFPServicesCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "True", "False" }));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpOtherInfoPanel.add(fpReceivedFPServicesCmbx, gridBagConstraints);

                fpRHSDiscontinuationLbl.setText("Reason for discontinuing use of contraceptives ");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpOtherInfoPanel.add(fpRHSDiscontinuationLbl, gridBagConstraints);

                fpReasonforDiscFPContracTxt.setMinimumSize(new java.awt.Dimension(70, 19));
                fpReasonforDiscFPContracTxt.setPreferredSize(new java.awt.Dimension(70, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpOtherInfoPanel.add(fpReasonforDiscFPContracTxt, gridBagConstraints);

                fpContraceptivesRemarksLbl.setText("Remarks");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                fpOtherInfoPanel.add(fpContraceptivesRemarksLbl, gridBagConstraints);

                fpContraceptivesRemarksTxt.setColumns(20);
                fpContraceptivesRemarksTxt.setRows(5);
                fpContraceptivesRemarksJscrl.setViewportView(fpContraceptivesRemarksTxt);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridheight = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 10.0;
                gridBagConstraints.weighty = 1.0;
                fpOtherInfoPanel.add(fpContraceptivesRemarksJscrl, gridBagConstraints);

                updateFPInfoBtn.setText("Update FP information");
                updateFPInfoBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        updateFPInfoBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                gridBagConstraints.weightx = 1.0;
                fpOtherInfoPanel.add(updateFPInfoBtn, gridBagConstraints);

                jTabbedPane1.addTab("Other FP information", fpOtherInfoPanel);

                fpServiceManagementPanel.setLayout(new java.awt.GridBagLayout());

                fpServiceManagementPanelTabbedPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Family Planning - Services Management"));
                fpServiceManagementPanelTabbedPane.setTabPlacement(javax.swing.JTabbedPane.LEFT);

                fpServicesIUDPanel.setLayout(new java.awt.GridBagLayout());

                fpIUDInsertedLbl.setText("IUD Inserted");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesIUDPanel.add(fpIUDInsertedLbl, gridBagConstraints);

                fpIUDInsertedCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "True", "False" }));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesIUDPanel.add(fpIUDInsertedCmbx, gridBagConstraints);

                fpTypeofIUDLbl.setText("Type of IUD Inserted");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesIUDPanel.add(fpTypeofIUDLbl, gridBagConstraints);

                fptypeofIUDCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT iud_type_desc  FROM rh.iud_types ORDER BY iud_type_desc"));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesIUDPanel.add(fptypeofIUDCmbx, gridBagConstraints);

                fpReasonfornotInsertingIUDLbl.setText("Reason for not inserting IUD");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesIUDPanel.add(fpReasonfornotInsertingIUDLbl, gridBagConstraints);

                fpReasonforNotInsertingIUDTxt.setMinimumSize(new java.awt.Dimension(100, 19));
                fpReasonforNotInsertingIUDTxt.setPreferredSize(new java.awt.Dimension(100, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesIUDPanel.add(fpReasonforNotInsertingIUDTxt, gridBagConstraints);

                fpTreatmentLbl.setText("Treatment if recommended");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesIUDPanel.add(fpTreatmentLbl, gridBagConstraints);

                fpTreatmentTxt.setMinimumSize(new java.awt.Dimension(100, 19));
                fpTreatmentTxt.setPreferredSize(new java.awt.Dimension(100, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesIUDPanel.add(fpTreatmentTxt, gridBagConstraints);

                fpIUDRecommedationLbl.setText("Remarks");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesIUDPanel.add(fpIUDRecommedationLbl, gridBagConstraints);

                fpIUDReferralLbl.setText("Referral");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesIUDPanel.add(fpIUDReferralLbl, gridBagConstraints);

                fpIUDReferralTxt.setMinimumSize(new java.awt.Dimension(100, 19));
                fpIUDReferralTxt.setPreferredSize(new java.awt.Dimension(100, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesIUDPanel.add(fpIUDReferralTxt, gridBagConstraints);

                fpIUDRemarksTxt.setMinimumSize(new java.awt.Dimension(100, 19));
                fpIUDRemarksTxt.setPreferredSize(new java.awt.Dimension(100, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesIUDPanel.add(fpIUDRemarksTxt, gridBagConstraints);

                fpIUDFollowupDateLbl.setText("IUD Followup date");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesIUDPanel.add(fpIUDFollowupDateLbl, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesIUDPanel.add(fpIUDFollowupDatePicker, gridBagConstraints);

                saveIUDServicesBtn.setText("Save IUD Services data");
                saveIUDServicesBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        saveIUDServicesBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                gridBagConstraints.weightx = 1.0;
                fpServicesIUDPanel.add(saveIUDServicesBtn, gridBagConstraints);

                fpServiceManagementPanelTabbedPane.addTab("IUD Services", fpServicesIUDPanel);

                fpServicesIUDFollowupPanel.setLayout(new java.awt.GridBagLayout());

                fpFUPDateofLMPLbl.setText("Date of LMP");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesIUDFollowupPanel.add(fpFUPDateofLMPLbl, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesIUDFollowupPanel.add(fpFUPDateofLMPdatePicker, gridBagConstraints);

                fpFUPLMPRegularLbl.setText("Was LMP Regular?");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesIUDFollowupPanel.add(fpFUPLMPRegularLbl, gridBagConstraints);

                fpFUPLMPRegularCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "True", "False" }));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesIUDFollowupPanel.add(fpFUPLMPRegularCmbx, gridBagConstraints);

                fpFUPBeginDateLMPDatePickerLbl.setText("Begin Date of LMP");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesIUDFollowupPanel.add(fpFUPBeginDateLMPDatePickerLbl, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesIUDFollowupPanel.add(fpFUPBeginDateLMPdatePicker, gridBagConstraints);

                fpFUPEndDateLMPLbl.setText("End Date of LMP");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesIUDFollowupPanel.add(fpFUPEndDateLMPLbl, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesIUDFollowupPanel.add(fpFUPEndDateLMPDatePicker, gridBagConstraints);

                fpFUPQtyofLMPLbl.setText("Quantity of LMP");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesIUDFollowupPanel.add(fpFUPQtyofLMPLbl, gridBagConstraints);

                fpFUPQtyofLMPCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT lmp_qty_desc  FROM rh.lmp_qty ORDER BY lmp_qty_desc"));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesIUDFollowupPanel.add(fpFUPQtyofLMPCmbx, gridBagConstraints);

                fpServiceFUPTable.setAutoCreateRowSorter(true);
                fpServiceFUPTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                    },
                    new String [] {
                        "Item/Exam", "Status", "Specify", "Remarks"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }
                });
                fpServiceFUPJscrl.setViewportView(fpServiceFUPTable);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.gridwidth = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 40.0;
                fpServicesIUDFollowupPanel.add(fpServiceFUPJscrl, gridBagConstraints);

                fpSaveIUDFollowupBtn.setText("Save IUD Followup data");
                fpSaveIUDFollowupBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        fpSaveIUDFollowupBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
                gridBagConstraints.weightx = 1.0;
                fpServicesIUDFollowupPanel.add(fpSaveIUDFollowupBtn, gridBagConstraints);

                fpServiceManagementPanelTabbedPane.addTab("IUD Follow-up Services", fpServicesIUDFollowupPanel);

                fpServicesContraceptivesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Contraceptives Given"));
                fpServicesContraceptivesPanel.setLayout(new java.awt.GridBagLayout());

                fpContraTreatmentLbl.setText("Recommended Treatment");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesContraceptivesPanel.add(fpContraTreatmentLbl, gridBagConstraints);

                fpContraTreatmentTxt.setMinimumSize(new java.awt.Dimension(100, 19));
                fpContraTreatmentTxt.setPreferredSize(new java.awt.Dimension(100, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesContraceptivesPanel.add(fpContraTreatmentTxt, gridBagConstraints);

                fpContraceptivesTable.setAutoCreateRowSorter(true);
                fpContraceptivesTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null}
                    },
                    new String [] {
                        "Type of Contraceptive", "Generic Name", "Brand", "Qty", "Admin Mode"
                    }
                ));
                fpContraceptivesTableJscrl.setViewportView(fpContraceptivesTable);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 10.0;
                fpServicesContraceptivesPanel.add(fpContraceptivesTableJscrl, gridBagConstraints);

                fpFUPContrareferralLbl.setText("Referral");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesContraceptivesPanel.add(fpFUPContrareferralLbl, gridBagConstraints);

                fpFUPContraLbl.setText("Follow-up date");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesContraceptivesPanel.add(fpFUPContraLbl, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesContraceptivesPanel.add(fpFUPContraDatePicker, gridBagConstraints);

                fpFUPContrareferralTxt.setMinimumSize(new java.awt.Dimension(100, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesContraceptivesPanel.add(fpFUPContrareferralTxt, gridBagConstraints);

                fpSaveContraceptivesBtn.setText("Save contraceptives data");
                fpSaveContraceptivesBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        fpSaveContraceptivesBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
                gridBagConstraints.weightx = 1.0;
                fpServicesContraceptivesPanel.add(fpSaveContraceptivesBtn, gridBagConstraints);

                fpServiceManagementPanelTabbedPane.addTab("Hormonal contraceptives", fpServicesContraceptivesPanel);

                fpServicesGynaeSTDPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Gynae & STD Services"));
                fpServicesGynaeSTDPanel.setLayout(new java.awt.GridBagLayout());

                fpGynaDischargeLbl.setText("Is there Discharge?");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesGynaeSTDPanel.add(fpGynaDischargeLbl, gridBagConstraints);

                fpGynaDischargeCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "True", "False" }));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesGynaeSTDPanel.add(fpGynaDischargeCmbx, gridBagConstraints);

                fpDischargeDurationLbl.setText("Duration");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesGynaeSTDPanel.add(fpDischargeDurationLbl, gridBagConstraints);

                fpDischargeDurationTxt.setMinimumSize(new java.awt.Dimension(40, 19));
                fpDischargeDurationTxt.setPreferredSize(new java.awt.Dimension(40, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesGynaeSTDPanel.add(fpDischargeDurationTxt, gridBagConstraints);

                fpDischargeQtyLbl.setText("Quantity");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesGynaeSTDPanel.add(fpDischargeQtyLbl, gridBagConstraints);

                fpDischargeQtyTxt.setMinimumSize(new java.awt.Dimension(40, 19));
                fpDischargeQtyTxt.setPreferredSize(new java.awt.Dimension(40, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesGynaeSTDPanel.add(fpDischargeQtyTxt, gridBagConstraints);

                fpAbdominalPainLbl.setText("Abdominal pain");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesGynaeSTDPanel.add(fpAbdominalPainLbl, gridBagConstraints);

                fpAbdominalPainCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "True", "False" }));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesGynaeSTDPanel.add(fpAbdominalPainCmbx, gridBagConstraints);

                fpAbdominalPainDurationLbl.setText("Duration");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesGynaeSTDPanel.add(fpAbdominalPainDurationLbl, gridBagConstraints);

                fpAbdominalPainDurationTxt.setMinimumSize(new java.awt.Dimension(40, 19));
                fpAbdominalPainDurationTxt.setPreferredSize(new java.awt.Dimension(40, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesGynaeSTDPanel.add(fpAbdominalPainDurationTxt, gridBagConstraints);

                fpAbdominalPainCharacterLbl.setText("Character");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesGynaeSTDPanel.add(fpAbdominalPainCharacterLbl, gridBagConstraints);

                fpAbdominalPainCharacterTxt.setMinimumSize(new java.awt.Dimension(40, 19));
                fpAbdominalPainCharacterTxt.setPreferredSize(new java.awt.Dimension(40, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesGynaeSTDPanel.add(fpAbdominalPainCharacterTxt, gridBagConstraints);

                fpHusbandSTPComplainLbl.setText("Husband Complain");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesGynaeSTDPanel.add(fpHusbandSTPComplainLbl, gridBagConstraints);

                fpHusbandSTPComplainTxt.setMinimumSize(new java.awt.Dimension(150, 19));
                fpHusbandSTPComplainTxt.setPreferredSize(new java.awt.Dimension(150, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesGynaeSTDPanel.add(fpHusbandSTPComplainTxt, gridBagConstraints);

                fpSTDRelationtoSexLbl.setText("Relation to Intercourse");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesGynaeSTDPanel.add(fpSTDRelationtoSexLbl, gridBagConstraints);

                fpSTDRelationtoSexCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "True", "False" }));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServicesGynaeSTDPanel.add(fpSTDRelationtoSexCmbx, gridBagConstraints);

                jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Ultra Sound Findings"));
                jPanel1.setLayout(new java.awt.GridBagLayout());

                fpSTDMgmntLbl.setText("Ultra Sound exam");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel1.add(fpSTDMgmntLbl, gridBagConstraints);

                fpSTDMgmntCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT service_type FROM pb_operating_parameters WHERE main_service ilike 'U S Scan'"));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel1.add(fpSTDMgmntCmbx, gridBagConstraints);

                fpSTDConditionLbl.setText("STD specify");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel1.add(fpSTDConditionLbl, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel1.add(fpSTDConditionCmbx, gridBagConstraints);

                fpSTDOthersLbl.setText("Others(Specify)");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel1.add(fpSTDOthersLbl, gridBagConstraints);

                fpSTDOthersTxt.setMinimumSize(new java.awt.Dimension(100, 19));
                fpSTDOthersTxt.setPreferredSize(new java.awt.Dimension(100, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel1.add(fpSTDOthersTxt, gridBagConstraints);

                fpSTDTreatmentLbl.setText("Recommended Treatment");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 2;
                jPanel1.add(fpSTDTreatmentLbl, gridBagConstraints);

                fpSTDTreatmentJscrl.setViewportView(fpSTDTreatmentTxt);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.gridheight = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 5.0;
                jPanel1.add(fpSTDTreatmentJscrl, gridBagConstraints);

                fpSTDReferralLbl.setText("Referral");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                jPanel1.add(fpSTDReferralLbl, gridBagConstraints);

                fpSTDReferralTxt.setMinimumSize(new java.awt.Dimension(100, 19));
                fpSTDReferralTxt.setPreferredSize(new java.awt.Dimension(100, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                jPanel1.add(fpSTDReferralTxt, gridBagConstraints);

                fpSTDFollowupDateLbl.setText("Follow - Up date");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel1.add(fpSTDFollowupDateLbl, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel1.add(fpSTDFollowupDatePicker, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.gridwidth = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 30.0;
                fpServicesGynaeSTDPanel.add(jPanel1, gridBagConstraints);

                fpSaveUltrasoundDataBtn.setText("Save Gaenaecology data");
                fpSaveUltrasoundDataBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        fpSaveUltrasoundDataBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.gridwidth = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
                gridBagConstraints.weightx = 1.0;
                fpServicesGynaeSTDPanel.add(fpSaveUltrasoundDataBtn, gridBagConstraints);

                fpSaveGynaeDataBtn.setText("Save Gynae & STD data");
                fpSaveGynaeDataBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        fpSaveGynaeDataBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.gridwidth = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
                gridBagConstraints.weightx = 1.0;
                fpServicesGynaeSTDPanel.add(fpSaveGynaeDataBtn, gridBagConstraints);

                fpServiceManagementPanelTabbedPane.addTab("FP Gynaecology/STD services", fpServicesGynaeSTDPanel);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpServiceManagementPanel.add(fpServiceManagementPanelTabbedPane, gridBagConstraints);

                jTabbedPane1.addTab("FP Management/Service", fpServiceManagementPanel);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpExamsPanel.add(jTabbedPane1, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 10.0;
                familyPlanningPane.add(fpExamsPanel, gridBagConstraints);

                fpButtonsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                fpButtonsPanel.setLayout(new java.awt.GridBagLayout());

                fpSaveDataBtn.setText("Save medical history data");
                fpSaveDataBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        fpSaveDataBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpButtonsPanel.add(fpSaveDataBtn, gridBagConstraints);

                fpEditDataBtn.setText("Edit data");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpButtonsPanel.add(fpEditDataBtn, gridBagConstraints);

                fpClearEntriesBtn.setText("Clear entries");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpButtonsPanel.add(fpClearEntriesBtn, gridBagConstraints);

                fpCloseFormPanel.setText("Close form");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                fpButtonsPanel.add(fpCloseFormPanel, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 100.0;
                gridBagConstraints.weighty = 1.0;
                fpButtonsPanel.add(jLabel3, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                familyPlanningPane.add(fpButtonsPanel, gridBagConstraints);

                familyCareTabbedPane.addTab("Family Planning Services", familyPlanningPane);

                mammographyPanel.setLayout(new java.awt.GridBagLayout());

                mmGenDataPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("General data"));
                mmGenDataPanel.setLayout(new java.awt.GridBagLayout());

                mmPrevSurgeryLbl.setText("Previous Surgery");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmGenDataPanel.add(mmPrevSurgeryLbl, gridBagConstraints);

                mmPrevSurgeryCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "True", "False" }));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmGenDataPanel.add(mmPrevSurgeryCmbx, gridBagConstraints);

                mmPlaceofPrevMammogramLbl.setText("Place of previous mammogram");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmGenDataPanel.add(mmPlaceofPrevMammogramLbl, gridBagConstraints);

                mmPrevMammogramChkbx.setText("Had previous mamogram");
                mmPrevMammogramChkbx.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                mmPrevMammogramChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                mmPrevMammogramChkbx.setMargin(new java.awt.Insets(0, 0, 0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmGenDataPanel.add(mmPrevMammogramChkbx, gridBagConstraints);

                mmPlaceofPrevMammogramTxt.setMinimumSize(new java.awt.Dimension(100, 19));
                mmPlaceofPrevMammogramTxt.setPreferredSize(new java.awt.Dimension(100, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmGenDataPanel.add(mmPlaceofPrevMammogramTxt, gridBagConstraints);

                mmNoofPregLbl.setText("No. of pregnancies");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmGenDataPanel.add(mmNoofPregLbl, gridBagConstraints);

                mmNoofPregTxt.setMinimumSize(new java.awt.Dimension(40, 19));
                mmNoofPregTxt.setPreferredSize(new java.awt.Dimension(40, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmGenDataPanel.add(mmNoofPregTxt, gridBagConstraints);

                mmNoofchildLbl.setText("No. of children");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmGenDataPanel.add(mmNoofchildLbl, gridBagConstraints);

                mmNoofChildTxt.setMinimumSize(new java.awt.Dimension(40, 19));
                mmNoofChildTxt.setPreferredSize(new java.awt.Dimension(40, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmGenDataPanel.add(mmNoofChildTxt, gridBagConstraints);

                mmNoofAbortionsLbl.setText("No. of Abortions");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmGenDataPanel.add(mmNoofAbortionsLbl, gridBagConstraints);

                mmNoofAbortionsTxt.setMinimumSize(new java.awt.Dimension(40, 19));
                mmNoofAbortionsTxt.setPreferredSize(new java.awt.Dimension(40, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmGenDataPanel.add(mmNoofAbortionsTxt, gridBagConstraints);

                mmClientDOBLbl.setText("Date of birth");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmGenDataPanel.add(mmClientDOBLbl, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmGenDataPanel.add(mmDOBdatePicker, gridBagConstraints);

                mmHormonalTherapyChkbx.setText("Hormonal Therapy");
                mmHormonalTherapyChkbx.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                mmHormonalTherapyChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                mmHormonalTherapyChkbx.setMargin(new java.awt.Insets(0, 0, 0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmGenDataPanel.add(mmHormonalTherapyChkbx, gridBagConstraints);

                mmFamilyAffectedChkbx.setText("Family has history of breast ailment");
                mmFamilyAffectedChkbx.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                mmFamilyAffectedChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                mmFamilyAffectedChkbx.setMargin(new java.awt.Insets(0, 0, 0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmGenDataPanel.add(mmFamilyAffectedChkbx, gridBagConstraints);

                mmOccupationLbl.setText("Occupation");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmGenDataPanel.add(mmOccupationLbl, gridBagConstraints);

                mmOccupationCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT occupations  FROM pb_occupation ORDER BY occupations"));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmGenDataPanel.add(mmOccupationCmbx, gridBagConstraints);

                mmMaritalStatus.setText("Married");
                mmMaritalStatus.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                mmMaritalStatus.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                mmMaritalStatus.setMargin(new java.awt.Insets(0, 0, 0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmGenDataPanel.add(mmMaritalStatus, gridBagConstraints);

                mmRemarksTxt.setColumns(20);
                mmRemarksTxt.setRows(5);
                mmRemarksJscrl.setViewportView(mmRemarksTxt);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.gridheight = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmGenDataPanel.add(mmRemarksJscrl, gridBagConstraints);

                mmRemarksLbl.setText("General Remarks");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmGenDataPanel.add(mmRemarksLbl, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 10.0;
                gridBagConstraints.weighty = 1.0;
                mammographyPanel.add(mmGenDataPanel, gridBagConstraints);

                mmExamPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Mammography examinations"));
                mmExamPanel.setLayout(new java.awt.GridBagLayout());

                mmExamsTable.setAutoCreateRowSorter(true);
                mmExamsTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null}
                    },
                    new String [] {
                        "Date of Mammogram", "Mammogram Exam", "Result of exam", "Location of mass (if any)", "Remarks/Recommendations"
                    }
                ));
                mmExamsJscrl.setViewportView(mmExamsTable);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmExamPanel.add(mmExamsJscrl, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 20.0;
                mammographyPanel.add(mmExamPanel, gridBagConstraints);

                mmButtonPanel.setLayout(new java.awt.GridBagLayout());

                mmEditDataBtn.setText("Edit data");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmButtonPanel.add(mmEditDataBtn, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 100.0;
                gridBagConstraints.weighty = 1.0;
                mmButtonPanel.add(mmSpacerLbl, gridBagConstraints);

                mmSaveDataBtn.setText("Save data");
                mmSaveDataBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        mmSaveDataBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmButtonPanel.add(mmSaveDataBtn, gridBagConstraints);

                mmClearEntriesBtn.setText("Clear entries");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmButtonPanel.add(mmClearEntriesBtn, gridBagConstraints);

                mmCloseFormBtn.setText("Close form");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mmButtonPanel.add(mmCloseFormBtn, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                mammographyPanel.add(mmButtonPanel, gridBagConstraints);

                familyCareTabbedPane.addTab("Mammography", mammographyPanel);

                recordDiseasesPanel.setLayout(new java.awt.GridBagLayout());

                diseaseName.setText("Name of disease/ailment");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                recordDiseasesPanel.add(diseaseName, gridBagConstraints);

                otherSpecificationsLbl.setText("Other Specifications/Observations");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                recordDiseasesPanel.add(otherSpecificationsLbl, gridBagConstraints);

                secondaryInfectionLbl.setText("Seconday Disease/Infection");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                recordDiseasesPanel.add(secondaryInfectionLbl, gridBagConstraints);

                needsTreatMentPlanLbl.setText("Needs Treatment/Plan/Follow-up");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                recordDiseasesPanel.add(needsTreatMentPlanLbl, gridBagConstraints);

                treatmentPlanBtngrp.add(treatMentPlanYesChkbx);
                treatMentPlanYesChkbx.setText("Yes");
                treatMentPlanYesChkbx.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                treatMentPlanYesChkbx.setMargin(new java.awt.Insets(0, 0, 0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                recordDiseasesPanel.add(treatMentPlanYesChkbx, gridBagConstraints);

                treatmentPlanBtngrp.add(treatMentPlanNoChkbx);
                treatMentPlanNoChkbx.setText("No");
                treatMentPlanNoChkbx.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                treatMentPlanNoChkbx.setMargin(new java.awt.Insets(0, 0, 0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                recordDiseasesPanel.add(treatMentPlanNoChkbx, gridBagConstraints);

                precsribedTreatMentLbl.setText("Prescribed Treatment by Clinical Officer or attendant");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                recordDiseasesPanel.add(precsribedTreatMentLbl, gridBagConstraints);

                reviewDateLbl.setText("Medical Assistant/Doctor");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                recordDiseasesPanel.add(reviewDateLbl, gridBagConstraints);

                remarksLbl.setText("Remarks/Comments");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                recordDiseasesPanel.add(remarksLbl, gridBagConstraints);

                doctorCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT first_name ||' '|| middle_name ||' '|| last_name FROM pb_doctors_list"));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                recordDiseasesPanel.add(doctorCmbx, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                recordDiseasesPanel.add(reviewDatePicker, gridBagConstraints);

                precsribedTreatmentTxt.setColumns(20);
                precsribedTreatmentTxt.setRows(5);
                prescribedTreatmentJscrl.setViewportView(precsribedTreatmentTxt);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 2.0;
                recordDiseasesPanel.add(prescribedTreatmentJscrl, gridBagConstraints);

                otherSpecificationsTxt.setColumns(20);
                otherSpecificationsTxt.setRows(5);
                otherSpecificationsJscrl.setViewportView(otherSpecificationsTxt);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 2.0;
                recordDiseasesPanel.add(otherSpecificationsJscrl, gridBagConstraints);

                recommedationsTxt.setColumns(20);
                recommedationsTxt.setRows(5);
                remarksCommentJscrl.setViewportView(recommedationsTxt);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 2.0;
                recordDiseasesPanel.add(remarksCommentJscrl, gridBagConstraints);

                reviewDatePickerLbl.setText("Review date");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                recordDiseasesPanel.add(reviewDatePickerLbl, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 2.0;
                recordDiseasesPanel.add(secondaryInfectionTxt, gridBagConstraints);

                labtestLbl.setText("Prescribed Diagnostic Test/Exam");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 4;
                recordDiseasesPanel.add(labtestLbl, gridBagConstraints);

                labtestCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT service_type FROM pb_operating_parameters ORDER BY 1"));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                recordDiseasesPanel.add(labtestCmbx, gridBagConstraints);

                treatmentReferralLbl.setText("Referral facility");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 5;
                recordDiseasesPanel.add(treatmentReferralLbl, gridBagConstraints);

                referralTreatmentLbl.setText("Reason for referral");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                recordDiseasesPanel.add(referralTreatmentLbl, gridBagConstraints);

                reasonforReferralTxt.setColumns(20);
                reasonforReferralTxt.setRows(5);
                referralJscrl.setViewportView(reasonforReferralTxt);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 2.0;
                recordDiseasesPanel.add(referralJscrl, gridBagConstraints);

                treatmentButtonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
                treatmentButtonPanel.setLayout(new java.awt.GridBagLayout());

                saveTreatmentdataBtn.setText("Save treatment information");
                saveTreatmentdataBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        saveTreatmentdataBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                treatmentButtonPanel.add(saveTreatmentdataBtn, gridBagConstraints);

                closeFormBtn.setText("Close form");
                closeFormBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        closeFormBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                treatmentButtonPanel.add(closeFormBtn, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 500.0;
                treatmentButtonPanel.add(jLabel2, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.gridwidth = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                recordDiseasesPanel.add(treatmentButtonPanel, gridBagConstraints);

                jPanel8.setLayout(new java.awt.GridBagLayout());

                searchField1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
                searchField1.setToolTipText("Search");
                searchField1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                searchField1.setMaximumSize(new java.awt.Dimension(40, 20));
                searchField1.setMinimumSize(new java.awt.Dimension(40, 20));
                searchField1.setPreferredSize(new java.awt.Dimension(40, 20));
                searchField1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                searchField1.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        searchField1ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel8.add(searchField1, gridBagConstraints);

                diseaseNameTxt.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 100.0;
                gridBagConstraints.weighty = 1.0;
                jPanel8.add(diseaseNameTxt, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 50.0;
                gridBagConstraints.weighty = 1.0;
                recordDiseasesPanel.add(jPanel8, gridBagConstraints);

                referralFacilityCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "County Hospital", "Health Center(Outside Nairobi)", "Health Center(Within Nairobi)", "Private Facility or Doctor", "NGO Facility", "Outside country", "Casualty dept at KNH", "Other dept at KNH", "Not Refered/Unknown Status" }));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                recordDiseasesPanel.add(referralFacilityCmbx, gridBagConstraints);

                familyCareTabbedPane.addTab("Record Diseases/Treatment", recordDiseasesPanel);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 10.0;
                getContentPane().add(familyCareTabbedPane, gridBagConstraints);
                familyCareTabbedPane.getAccessibleContext().setAccessibleName("File Registration for Mother");

                rhCreateFilePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                rhCreateFilePanel.setLayout(new java.awt.GridBagLayout());

                rhVisitdatePanel.setText("Date of visit");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 10;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                rhCreateFilePanel.add(rhVisitdatePanel, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 11;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                rhCreateFilePanel.add(rhVisitDatePicker, gridBagConstraints);

                rhClientName.setText("Name of client");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                rhCreateFilePanel.add(rhClientName, gridBagConstraints);

                rhClientCardNoLbl.setText("Card No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                rhCreateFilePanel.add(rhClientCardNoLbl, gridBagConstraints);

                rhClientCardNoTxt.setEditable(false);
                rhClientCardNoTxt.setMinimumSize(new java.awt.Dimension(70, 19));
                rhClientCardNoTxt.setPreferredSize(new java.awt.Dimension(70, 19));
                rhClientCardNoTxt.addFocusListener(new java.awt.event.FocusAdapter() {
                    public void focusLost(java.awt.event.FocusEvent evt) {
                        rhClientCardNoTxtFocusLost(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                rhCreateFilePanel.add(rhClientCardNoTxt, gridBagConstraints);

                patientFilePanel.setLayout(new java.awt.GridBagLayout());

                searchField.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
                searchField.setToolTipText("Search");
                searchField.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                searchField.setMaximumSize(new java.awt.Dimension(40, 20));
                searchField.setMinimumSize(new java.awt.Dimension(40, 20));
                searchField.setPreferredSize(new java.awt.Dimension(40, 20));
                searchField.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                searchField.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        searchFieldActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                patientFilePanel.add(searchField, gridBagConstraints);

                retrievedNoTxt.setEditable(false);
                retrievedNoTxt.setMinimumSize(new java.awt.Dimension(100, 19));
                retrievedNoTxt.setPreferredSize(new java.awt.Dimension(100, 19));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 100.0;
                gridBagConstraints.weighty = 1.0;
                patientFilePanel.add(retrievedNoTxt, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 20.0;
                gridBagConstraints.weighty = 1.0;
                rhCreateFilePanel.add(patientFilePanel, gridBagConstraints);

                jButton1.setText("New File");
                jButton1.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton1ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                rhCreateFilePanel.add(jButton1, gridBagConstraints);

                jPanel422.setLayout(new java.awt.GridBagLayout());

                searchButton22.setToolTipText("Search");
                searchButton22.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                searchButton22.setMaximumSize(new java.awt.Dimension(74, 53));
                searchButton22.setMinimumSize(new java.awt.Dimension(74, 53));
                searchButton22.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                searchButton22.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        searchButton22ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 2;
                jPanel422.add(searchButton22, gridBagConstraints);

                jTextField82.setEditable(false);
                try {

                    java.sql.Statement stmt1 = connectDB.createStatement();
                    java.sql.ResultSet rset1 = stmt1.executeQuery("select DISTINCT f_name||' '||l_name as name FROM secure_menu_access WHERE login_name = current_user");
                    while (rset1.next()) {
                        jTextField82.setText(rset1.getObject(1).toString());

                    }

                } catch (java.sql.SQLException sqe) {
                    sqe.printStackTrace();
                    //  System.out.println("Insert not successful");
                }
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel422.add(jTextField82, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 8;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 3.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                rhCreateFilePanel.add(jPanel422, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridwidth = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                getContentPane().add(rhCreateFilePanel, gridBagConstraints);

                pack();
            }// </editor-fold>//GEN-END:initComponents

    private void cmboxActionPerformed(java.awt.event.ActionEvent evt) {
        if (jTable1.isEditing()) {
            jTable1.getCellEditor().stopCellEditing();
        }
        cmbox1 = new javax.swing.JComboBox();

        cmbox1.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT dosage FROM rh.vaccines_types WHERE vaccine = '" + jTable1.getValueAt(jTable1.getSelectedRow(), 0) + "'"));
        javax.swing.table.TableColumn s = this.jTable1.getColumn("Dose");
        s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox1));
    }
    private void fpWeightTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_fpWeightTxtCaretUpdate
        if (fpWeightTxt.getText().toCharArray().length > 0 && fpHeightTxt.getText().toCharArray().length > 0) {
            fpBMITxt.setText(java.lang.Double.toString(java.lang.Math.round(java.lang.Double.parseDouble(fpWeightTxt.getText()) * java.lang.Math.pow(java.lang.Double.parseDouble(fpHeightTxt.getText()), 2.0))));
        } else {
            fpBMITxt.setText(java.lang.Double.toString(0.00));
        }
// TODO add your handling code here:
    }//GEN-LAST:event_fpWeightTxtCaretUpdate

    private void fpHeightTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_fpHeightTxtCaretUpdate
        if (fpWeightTxt.getText().toCharArray().length > 0 && fpHeightTxt.getText().toCharArray().length > 0) {
            fpBMITxt.setText(java.lang.Double.toString(java.lang.Math.round(java.lang.Double.parseDouble(fpWeightTxt.getText()) * java.lang.Math.pow(java.lang.Double.parseDouble(fpHeightTxt.getText()), 2.0))));
        } else {
            fpBMITxt.setText(java.lang.Double.toString(0.00));
        }
// TODO add your handling code here:
    }//GEN-LAST:event_fpHeightTxtCaretUpdate

    private void saveTreatmentdataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTreatmentdataBtnActionPerformed

        try {

            java.sql.PreparedStatement pstmtTreatmentData = connectDB.prepareStatement(
                    "INSERT INTO rh.treatment("
                    + "mother_serial_no, service_date, disease, secondary_infection,"
                    + "review_date, need_follow_up, other_observation, prescription,"
                    + "remarks, doctor, prescribed_test, referral_facility, referral_reason,"
                    + "hc_centre)"
                    + "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

            pstmtTreatmentData.setObject(2, visitDatePicker.getDate());
            pstmtTreatmentData.setObject(3, diseaseNameTxt.getText());
            pstmtTreatmentData.setObject(4, secondaryInfectionTxt.getText());
            pstmtTreatmentData.setObject(5, reviewDatePicker.getDate());
            if (treatMentPlanYesChkbx.isSelected()) {
                pstmtTreatmentData.setObject(6, true);
            } else {
                pstmtTreatmentData.setObject(6, false);
            }
            pstmtTreatmentData.setObject(7, precsribedTreatmentTxt.getText());
            pstmtTreatmentData.setObject(8, otherSpecificationsTxt.getText());
            pstmtTreatmentData.setObject(9, recommedationsTxt.getText());
            pstmtTreatmentData.setObject(10, doctorCmbx.getSelectedItem());
            pstmtTreatmentData.setObject(11, labtestCmbx.getSelectedItem());
            pstmtTreatmentData.setObject(14, System.getProperty("hc_centre"));
            pstmtTreatmentData.setObject(12, referralFacilityCmbx.getSelectedItem());
            pstmtTreatmentData.setObject(13, reasonforReferralTxt.getText());
            pstmtTreatmentData.setObject(1, rhClientCardNoTxt.getText());
            pstmtTreatmentData.execute();

            results();
        } catch (java.sql.SQLException sqlEx) {
            sqlEx.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
        }



// TODO add your handling code here:
    }//GEN-LAST:event_saveTreatmentdataBtnActionPerformed

    private void closeFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFormBtnActionPerformed

        this.dispose();
// TODO add your handling code here:
    }//GEN-LAST:event_closeFormBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        com.afrisoftech.hospital.HospitalMain.patientregstmnit.doClick();

// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void fpCounsellingServicesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fpCounsellingServicesBtnActionPerformed

        try {

            java.sql.PreparedStatement pstmtCounselling = connectDB.prepareStatement(
                    "INSERT INTO rh.counselling_dicussions("
                    + "discussed_services, pamphlets, comments, mother_serial_no,"
                    + "service_date, hc_centre)"
                    + "VALUES(?, ?, ?, ?, ?, ?)");

            for (int j = 0; j < counsellingTable.getRowCount(); j++) {
                if (counsellingTable.getValueAt(j, 0) != null) {
                    pstmtCounselling.setObject(4, rhClientCardNoTxt.getText());
                    pstmtCounselling.setObject(5, rhVisitDatePicker.getDate());
                    pstmtCounselling.setObject(1, counsellingTable.getValueAt(j, 0));
                    pstmtCounselling.setObject(2, counsellingTable.getValueAt(j, 1));
                    pstmtCounselling.setObject(3, counsellingTable.getValueAt(j, 2));
                    //  pstmtObstetricalExams.setObject(5,obstetricalTable.getValueAt(j,3));
                    pstmtCounselling.setObject(6, System.getProperty("hc_centre"));
                    pstmtCounselling.execute();
                }
            }

            results();

        } catch (java.sql.SQLException sqlEx) {
            sqlEx.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
        }

// TODO add your handling code here:
    }//GEN-LAST:event_fpCounsellingServicesBtnActionPerformed

    private void fpSaveGynaeDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fpSaveGynaeDataBtnActionPerformed

        try {

            java.sql.PreparedStatement pstmtGynae = connectDB.prepareStatement(
                    "INSERT INTO rh.gynae_std("
                    + "mother_serial_no, discharge, duration_of_discharge, discharge_qty,"
                    + "abdorminal_pain, duration_of_pain, characteristic, husband_complaints,"
                    + "related_to_intercourse, remarks, hc_centre, service_date)"
                    + "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

            pstmtGynae.setObject(2, fpGynaDischargeCmbx.getSelectedItem());
            pstmtGynae.setObject(3, fpDischargeDurationTxt.getText());
            pstmtGynae.setObject(4, fpDischargeQtyTxt.getText());
            pstmtGynae.setObject(5, fpAbdominalPainCmbx.getSelectedItem());
            pstmtGynae.setObject(6, fpAbdominalPainDurationTxt.getText());
            pstmtGynae.setObject(7, fpAbdominalPainCharacterTxt.getText());
            pstmtGynae.setObject(8, fpHusbandSTPComplainTxt.getText());
            pstmtGynae.setObject(9, fpSTDRelationtoSexCmbx.getSelectedItem());
            pstmtGynae.setObject(10, null);
            pstmtGynae.setObject(11, System.getProperty("hc_centre"));
            pstmtGynae.setObject(12, rhVisitDatePicker.getDate());
            pstmtGynae.setObject(1, rhClientCardNoTxt.getText());
            pstmtGynae.execute();

            results();
        } catch (java.sql.SQLException sqlEx) {
            sqlEx.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_fpSaveGynaeDataBtnActionPerformed

    private void fpSaveUltrasoundDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fpSaveUltrasoundDataBtnActionPerformed

        try {

            java.sql.PreparedStatement pstmtFPUltrasound = connectDB.prepareStatement(
                    "INSERT INTO rh.fp_ultra_sound_exam("
                    + "mother_serial_no, ultrasound_exam, service_date, std_case, specific_info,"
                    + "referral, recommendations, follow_up_date, hc_centre"
                    + ")"
                    + "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)");

            pstmtFPUltrasound.setObject(2, fpSTDMgmntCmbx.getSelectedItem());
            pstmtFPUltrasound.setObject(4, fpReceivedFPServicesCmbx.getSelectedItem());
            pstmtFPUltrasound.setObject(5, fpSTDOthersTxt.getText());
            pstmtFPUltrasound.setObject(6, fpSTDReferralTxt.getText());
            pstmtFPUltrasound.setObject(7, fpSTDTreatmentTxt.getText());
            pstmtFPUltrasound.setObject(8, fpSTDFollowupDatePicker.getDate());
            pstmtFPUltrasound.setObject(9, System.getProperty("hc_centre"));
            pstmtFPUltrasound.setObject(3, rhVisitDatePicker.getDate());
            pstmtFPUltrasound.setObject(1, rhClientCardNoTxt.getText());
            pstmtFPUltrasound.execute();

            results();
        } catch (java.sql.SQLException sqlEx) {
            sqlEx.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
        }


// TODO add your handling code here:
    }//GEN-LAST:event_fpSaveUltrasoundDataBtnActionPerformed

    private void fpSaveContraceptivesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fpSaveContraceptivesBtnActionPerformed

        try {

            java.sql.PreparedStatement pstmtFpContraceptives = connectDB.prepareStatement(
                    "INSERT INTO rh.fp_contraceptives("
                    + "mother_serial_no, service_date, treatment, referral, follow_up_date,"
                    + "hc_centre)"
                    + "VALUES(?, ?, ?, ?, ?, ?)");

            pstmtFpContraceptives.setObject(3, fpContraTreatmentTxt.getText());
            pstmtFpContraceptives.setObject(4, fpFUPContrareferralTxt.getText());
            pstmtFpContraceptives.setObject(5, fpFUPContraDatePicker.getDate());
            pstmtFpContraceptives.setObject(6, System.getProperty("hc_centre"));
            pstmtFpContraceptives.setObject(2, rhVisitDatePicker.getDate());
            pstmtFpContraceptives.setObject(1, rhClientCardNoTxt.getText());
            pstmtFpContraceptives.execute();


//            try{

            java.sql.PreparedStatement pstmtContraceptives = connectDB.prepareStatement("INSERT INTO rh.fp_contraceptives_admin("
                    + "mother_serial_no, service_date,"
                    + "contraceptive_type, contraceptive_brand, contraceptive_name,"
                    + "contraceptive_generic_name, contraceptive_qty, remarks,"
                    + "hc_centre, contraceptive_admin_mode)"
                    + "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

            for (int j = 0; j < fpContraceptivesTable.getRowCount(); j++) {
                if (fpContraceptivesTable.getValueAt(j, 0) != null) {
                    pstmtContraceptives.setObject(1, rhClientCardNoTxt.getText());
                    pstmtContraceptives.setObject(2, rhVisitDatePicker.getDate());
                    pstmtContraceptives.setObject(3, fpContraceptivesTable.getValueAt(j, 0));
                    pstmtContraceptives.setObject(6, fpContraceptivesTable.getValueAt(j, 1));
                    pstmtContraceptives.setObject(4, fpContraceptivesTable.getValueAt(j, 2));
                    pstmtContraceptives.setObject(7, fpContraceptivesTable.getValueAt(j, 3));
                    pstmtContraceptives.setObject(5, fpContraceptivesTable.getValueAt(j, 2));
                    pstmtContraceptives.setObject(8, null);
                    pstmtContraceptives.setObject(9, System.getProperty("hc_centre"));
                    pstmtContraceptives.setObject(10, fpContraceptivesTable.getValueAt(j, 4));
                    pstmtContraceptives.execute();
                }
            }


            results();
        } catch (java.sql.SQLException sqlEx) {
            sqlEx.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
        }

// TODO add your handling code here:
    }//GEN-LAST:event_fpSaveContraceptivesBtnActionPerformed

    private void fpSaveIUDFollowupBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fpSaveIUDFollowupBtnActionPerformed

        try {

            java.sql.PreparedStatement pstmtFpIUDFollowup = connectDB.prepareStatement(
                    "INSERT INTO rh.fp_iud_follow_up("
                    + "mother_serial_no, lmp_date, lmp_regular, lmp_begin_date, lmp_end_date,"
                    + "lmp_qty, hc_centre, service_date)"
                    + "VALUES(?, ?, ?, ?, ?, ?, ?, ?)");

            pstmtFpIUDFollowup.setObject(2, fpFUPDateofLMPdatePicker.getDate());
//            pstmtFpGaenae.setObject(3,);
            pstmtFpIUDFollowup.setObject(3, fpFUPLMPRegularCmbx.getSelectedItem());
            pstmtFpIUDFollowup.setObject(4, fpFUPBeginDateLMPdatePicker.getDate());
            pstmtFpIUDFollowup.setObject(5, fpFUPEndDateLMPDatePicker.getDate());
            pstmtFpIUDFollowup.setObject(6, fpFUPQtyofLMPCmbx.getSelectedItem());
            pstmtFpIUDFollowup.setObject(7, System.getProperty("hc_centre"));
            //  pstmtFpIUDFollowup.setObject(8,fpLmpCommentsTxt.getText());

            //  pstmtPostNatal.setObject(16,);
            pstmtFpIUDFollowup.setObject(8, rhVisitDatePicker.getDate());
            //    pstmtMamography.setObject(15,rhVisitDatePicker.getDate());
            pstmtFpIUDFollowup.setObject(1, rhClientCardNoTxt.getText());
            pstmtFpIUDFollowup.execute();


//            try{

            java.sql.PreparedStatement pstmtIUDExams = connectDB.prepareStatement("INSERT INTO rh.fp_iud_exams("
                    + "mother_serial_no, service_date, iud_exam, results,"
                    + "specification, remarks)"
                    + "VALUES(?, ?, ?, ?, ?, ?)");

            for (int j = 0; j < fpServiceFUPTable.getRowCount(); j++) {
                if (fpServiceFUPTable.getValueAt(j, 0) != null) {
                    pstmtIUDExams.setObject(1, rhClientCardNoTxt.getText());
                    pstmtIUDExams.setObject(2, rhVisitDatePicker.getDate());
                    pstmtIUDExams.setObject(3, fpServiceFUPTable.getValueAt(j, 0));
                    pstmtIUDExams.setObject(4, fpServiceFUPTable.getValueAt(j, 1));
                    pstmtIUDExams.setObject(5, fpServiceFUPTable.getValueAt(j, 2));
                    pstmtIUDExams.setObject(6, fpServiceFUPTable.getValueAt(j, 3));
                    pstmtIUDExams.execute();
                }
            }


            results();
        } catch (java.sql.SQLException sqlEx) {
            sqlEx.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
        }


// TODO add your handling code here:
    }//GEN-LAST:event_fpSaveIUDFollowupBtnActionPerformed

    private void saveIUDServicesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveIUDServicesBtnActionPerformed

        try {

            java.sql.PreparedStatement pstmtFPIUDServices = connectDB.prepareStatement(
                    "INSERT INTO rh.iud_services("
                    + "mother_serial_no, uid_inserted, iud_type, reason_for_iud, recommeded_treatment,"
                    + "remarks, referral, follow_up_date, hc_centre, service_date)"
                    + "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

            pstmtFPIUDServices.setObject(2, fpIUDInsertedCmbx.getSelectedItem());
            pstmtFPIUDServices.setObject(3, fptypeofIUDCmbx.getSelectedItem());
            pstmtFPIUDServices.setObject(4, fpReasonforNotInsertingIUDTxt.getText());
            pstmtFPIUDServices.setObject(5, fpTreatmentTxt.getText());
            pstmtFPIUDServices.setObject(6, fpIUDRemarksTxt.getText());
            pstmtFPIUDServices.setObject(7, fpIUDReferralTxt.getText());
            pstmtFPIUDServices.setObject(8, fpIUDFollowupDatePicker.getDate());
            pstmtFPIUDServices.setObject(9, System.getProperty("hc_centre"));
            pstmtFPIUDServices.setObject(10, rhVisitDatePicker.getDate());
            pstmtFPIUDServices.setObject(1, rhClientCardNoTxt.getText());
            pstmtFPIUDServices.execute();

            results();

        } catch (java.sql.SQLException sqlEx) {
            sqlEx.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
        }

// TODO add your handling code here:
    }//GEN-LAST:event_saveIUDServicesBtnActionPerformed

    private void updateFPInfoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateFPInfoBtnActionPerformed

        try {

            java.sql.PreparedStatement pstmtFPInfo = connectDB.prepareStatement(
                    "INSERT INTO rh.fp_other_info("
                    + "mother_serial_no, marital_status, received_fp_before, reason_for_discontinuation,"
                    + "remarks, hc_centre, service_date)"
                    + "VALUES(?, ?, ?, ?, ?, ?, ?)");

            pstmtFPInfo.setObject(2, fpMaritalStatusCmbx.getSelectedItem());
            pstmtFPInfo.setObject(3, fpReceivedFPServicesCmbx.getSelectedItem());
            pstmtFPInfo.setObject(4, fpReasonforDiscFPContracTxt.getText());
            pstmtFPInfo.setObject(5, fpContraceptivesRemarksTxt.getText());
            pstmtFPInfo.setObject(6, System.getProperty("hc_centre"));
            pstmtFPInfo.setObject(7, rhVisitDatePicker.getDate());
            pstmtFPInfo.setObject(1, rhClientCardNoTxt.getText());
            pstmtFPInfo.execute();

            results();
        } catch (java.sql.SQLException sqlEx) {
            sqlEx.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
        }


// TODO add your handling code here:
    }//GEN-LAST:event_updateFPInfoBtnActionPerformed

    private void saveObstetricalDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveObstetricalDataBtnActionPerformed

        try {

            java.sql.PreparedStatement pstmtObstetricalExams = connectDB.prepareStatement("INSERT INTO rh.fp_obstetrical("
                    + "mother_serial_no, investigation, specific_info, remarks, service_date,"
                    + "hc_centre)"
                    + "VALUES(?, ?, ?, ?, ?, ?)");

            for (int j = 0; j < obstetricalTable.getRowCount(); j++) {
                if (obstetricalTable.getValueAt(j, 0) != null) {
                    pstmtObstetricalExams.setObject(1, rhClientCardNoTxt.getText());
                    pstmtObstetricalExams.setObject(5, rhVisitDatePicker.getDate());
                    pstmtObstetricalExams.setObject(2, obstetricalTable.getValueAt(j, 0));
                    pstmtObstetricalExams.setObject(3, obstetricalTable.getValueAt(j, 2));
                    pstmtObstetricalExams.setObject(4, obstetricalTable.getValueAt(j, 3));
                    //  pstmtObstetricalExams.setObject(5,obstetricalTable.getValueAt(j,3));
                    pstmtObstetricalExams.setObject(6, System.getProperty("hc_centre"));
                    pstmtObstetricalExams.execute();
                }
            }

            results();

        } catch (java.sql.SQLException sqlEx) {
            sqlEx.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
        }
// TODO add your handling code here:
    }//GEN-LAST:event_saveObstetricalDataBtnActionPerformed

    private void gaenaDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gaenaDataBtnActionPerformed

        try {

            java.sql.PreparedStatement pstmtFpGaenae = connectDB.prepareStatement(
                    "INSERT INTO rh.fp_gynae_history("
                    + "mother_serial_no, lmp_date, service_date, lmp_regular, lmp_begin_date,"
                    + "lmp_end_date, lmp_quantity, comments,"
                    + "hc_centre)VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)");

            pstmtFpGaenae.setObject(2, fpDateofLMPdatePicker.getDate());
//            pstmtFpGaenae.setObject(3,);
            pstmtFpGaenae.setObject(4, fpLMPRegularCmbx.getSelectedItem());
            pstmtFpGaenae.setObject(5, fpBeginDateLMPdatePicker.getDate());
            pstmtFpGaenae.setObject(6, fpEndDateLMPDatePicker.getDate());
            pstmtFpGaenae.setObject(7, fpQtyofLMPCmbx.getSelectedItem());
            pstmtFpGaenae.setObject(9, System.getProperty("hc_centre"));
            pstmtFpGaenae.setObject(8, fpLmpCommentsTxt.getText());

            //  pstmtPostNatal.setObject(16,);
            pstmtFpGaenae.setObject(3, rhVisitDatePicker.getDate());
            //    pstmtMamography.setObject(15,rhVisitDatePicker.getDate());
            pstmtFpGaenae.setObject(1, rhClientCardNoTxt.getText());
            pstmtFpGaenae.execute();


//            try{

            java.sql.PreparedStatement pstmtGaenaExams = connectDB.prepareStatement("INSERT INTO rh.fp_other_menstrual_conditions("
                    + "mother_serial_no, condition, service_date,"
                    + "remarks, affected, specific_info)"
                    + "VALUES(?, ?, ?, ?, ?, ?)");

            for (int j = 0; j < lmpTable.getRowCount(); j++) {
                if (lmpTable.getValueAt(j, 0) != null) {
                    pstmtGaenaExams.setObject(1, rhClientCardNoTxt.getText());
                    pstmtGaenaExams.setObject(3, rhVisitDatePicker.getDate());
                    pstmtGaenaExams.setObject(2, lmpTable.getValueAt(j, 0));
                    pstmtGaenaExams.setObject(4, lmpTable.getValueAt(j, 3));
                    pstmtGaenaExams.setObject(5, lmpTable.getValueAt(j, 1));
                    pstmtGaenaExams.setObject(6, lmpTable.getValueAt(j, 2));
                    pstmtGaenaExams.execute();
                }
            }


            results();
        } catch (java.sql.SQLException sqlEx) {
            sqlEx.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
        }


// TODO add your handling code here:
    }//GEN-LAST:event_gaenaDataBtnActionPerformed

    private void pelvicExamBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pelvicExamBtnActionPerformed

        try {

            java.sql.PreparedStatement pstmtFPelvicExams = connectDB.prepareStatement("INSERT INTO rh.fp_pelvic_exam("
                    + "mother_serial_no, examination, result, specific_info, comments,"
                    + "hc_centre, service_date)"
                    + "VALUES(?, ?, ?, ?, ?, ?, ?)");

            for (int j = 0; j < pelvicTable.getRowCount(); j++) {
                if (pelvicTable.getValueAt(j, 0) != null) {
                    pstmtFPelvicExams.setObject(1, rhClientCardNoTxt.getText());
                    pstmtFPelvicExams.setObject(7, rhVisitDatePicker.getDate());
                    pstmtFPelvicExams.setObject(2, pelvicTable.getValueAt(j, 0));
                    pstmtFPelvicExams.setObject(3, pelvicTable.getValueAt(j, 1));
                    pstmtFPelvicExams.setObject(4, pelvicTable.getValueAt(j, 2));
                    pstmtFPelvicExams.setObject(5, pelvicTable.getValueAt(j, 3));
                    pstmtFPelvicExams.setObject(6, System.getProperty("hc_centre"));
                    pstmtFPelvicExams.execute();
                }
            }

            results();

        } catch (java.sql.SQLException sqlEx) {
            sqlEx.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
        }

// TODO add your handling code here:
    }//GEN-LAST:event_pelvicExamBtnActionPerformed

    private void fpSaveMedExamsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fpSaveMedExamsBtnActionPerformed

        try {

            java.sql.PreparedStatement pstmtFPhysicalExams = connectDB.prepareStatement(
                    "INSERT INTO rh.fp_physical_exam("
                    + "mother_serial_no, blood_pressure, weight, temperature, heart_condition,"
                    + "breast_condition, bmi, comments, hc_centre, service_date"
                    + ", height)"
                    + "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

            pstmtFPhysicalExams.setObject(2, fpBMITxt.getText());
            pstmtFPhysicalExams.setObject(3, fpWeightTxt.getText());
            pstmtFPhysicalExams.setObject(4, fpTempTxt.getText());
            pstmtFPhysicalExams.setObject(5, fpHeartConditionCmbx.getSelectedItem());
            pstmtFPhysicalExams.setObject(6, fpBreastConditionCmbx.getSelectedItem());
            pstmtFPhysicalExams.setObject(7, fpBMITxt.getText());
            pstmtFPhysicalExams.setObject(9, System.getProperty("hc_centre"));
            pstmtFPhysicalExams.setObject(8, fpCommentsTxt.getText());
            pstmtFPhysicalExams.setObject(11, fpHeightTxt.getText());


            //  pstmtPostNatal.setObject(16,);
            pstmtFPhysicalExams.setObject(10, rhVisitDatePicker.getDate());
            //    pstmtMamography.setObject(15,rhVisitDatePicker.getDate());
            pstmtFPhysicalExams.setObject(1, rhClientCardNoTxt.getText());
            pstmtFPhysicalExams.execute();

            results();
        } catch (java.sql.SQLException sqlEx) {
            sqlEx.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
        }



// TODO add your handling code here:
    }//GEN-LAST:event_fpSaveMedExamsBtnActionPerformed

    private void counsSaveDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_counsSaveDataBtnActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_counsSaveDataBtnActionPerformed

    private void fpSaveDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fpSaveDataBtnActionPerformed

        try {

            java.sql.PreparedStatement pstmtFpMedicalHistory = connectDB.prepareStatement("INSERT INTO rh.fp_medical_history("
                    + "mother_serial_no, medical_condition, client_affected, family_affected,"
                    + "comments, hc_centre, service_date)"
                    + "VALUES(?, ?, ?, ?, ?, ?, ?)");

            for (int j = 0; j < fpMedicalHistTable.getRowCount(); j++) {
                if (fpMedicalHistTable.getValueAt(j, 0) != null) {
                    pstmtFpMedicalHistory.setObject(1, rhClientCardNoTxt.getText());
                    pstmtFpMedicalHistory.setObject(7, rhVisitDatePicker.getDate());
                    pstmtFpMedicalHistory.setObject(2, fpMedicalHistTable.getValueAt(j, 0));
                    pstmtFpMedicalHistory.setObject(3, fpMedicalHistTable.getValueAt(j, 1));
                    pstmtFpMedicalHistory.setObject(4, fpMedicalHistTable.getValueAt(j, 2));
                    pstmtFpMedicalHistory.setObject(5, fpMedicalHistTable.getValueAt(j, 3));
                    pstmtFpMedicalHistory.setObject(6, System.getProperty("hc_centre"));
                    pstmtFpMedicalHistory.execute();
                }
            }

            results();

        } catch (java.sql.SQLException sqlEx) {
            sqlEx.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
        }

// TODO add your handling code here:
    }//GEN-LAST:event_fpSaveDataBtnActionPerformed

    private void peSaveDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_peSaveDataBtnActionPerformed

        try {

            java.sql.PreparedStatement pstmtGeneralExams = connectDB.prepareStatement(
                    "INSERT INTO rh.physical_exam("
                    + "serial_no, examination, service_date, result, remarks,logon_user ,date_of_data,"
                    + "specifics, hc_centre)"
                    + "VALUES(?, ?, ?, ?, ?, ?, ?, ? ,?)");

            for (int j = 0; j < geExamsTable.getRowCount(); j++) {
                if (geExamsTable.getValueAt(j, 0) != null) {
                    pstmtGeneralExams.setObject(2, geExamsTable.getValueAt(j, 0).toString());
                    pstmtGeneralExams.setObject(4, geExamsTable.getValueAt(j, 2).toString());
                    pstmtGeneralExams.setObject(5, geExamsTable.getValueAt(j, 3).toString());
                    pstmtGeneralExams.setObject(6, geExamsTable.getValueAt(j, 1).toString());
                    pstmtGeneralExams.setObject(9, System.getProperty("hc_centre"));
                    pstmtGeneralExams.setDate(3, com.afrisoftech.lib.SQLDateFormat.getSQLDate(rhVisitDatePicker.getDate()));
                    pstmtGeneralExams.setDate(7, com.afrisoftech.lib.SQLDateFormat.getSQLDate(peDOBDatePicker.getDate()));
                    pstmtGeneralExams.setObject(8, geExamsTable.getValueAt(j, 0).toString());
                    pstmtGeneralExams.setObject(1, rhClientCardNoTxt.getText());
                    pstmtGeneralExams.execute();
                    //         results();
                }

            }

            java.sql.PreparedStatement pstmtInvestigations = connectDB.prepareStatement(
                    "INSERT INTO rh.physical_investigations("
                    + "examination, service_date, result, remarks, specifics, date_of_data,"
                    + "logon_user,fitness ,qualifications, comments,hc_centre )"
                    + "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

            for (int j = 0; j < peInvestigationsTable.getRowCount(); j++) {
                if (peInvestigationsTable.getValueAt(j, 0) != null) {
                    pstmtInvestigations.setObject(1, peInvestigationsTable.getValueAt(j, 0).toString());
                    pstmtInvestigations.setObject(3, peInvestigationsTable.getValueAt(j, 2).toString());
                    pstmtInvestigations.setObject(4, peInvestigationsTable.getValueAt(j, 3).toString());
                    pstmtInvestigations.setObject(7, "");

                    pstmtInvestigations.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(rhVisitDatePicker.getDate()));
                    pstmtInvestigations.setDate(6, com.afrisoftech.lib.SQLDateFormat.getSQLDate(rhVisitDatePicker.getDate()));
                    pstmtInvestigations.setObject(5, peInvestigationsTable.getValueAt(j, 1).toString());
                    pstmtInvestigations.setObject(8, fitnessLevelCmbx.getSelectedItem());
                    pstmtInvestigations.setObject(9, peQualificationTxt.getText());
                    pstmtInvestigations.setObject(10, peCommentsTxt.getText());
                    pstmtInvestigations.setObject(11, System.getProperty("hc_centre"));
                    pstmtInvestigations.execute();

                }

            }

            results();
        } catch (java.sql.SQLException sqlEx) {
            sqlEx.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
        }


// TODO add your handling code here:
    }//GEN-LAST:event_peSaveDataBtnActionPerformed

    private void mmSaveDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mmSaveDataBtnActionPerformed

        try {

            java.sql.PreparedStatement pstmtMamography = connectDB.prepareStatement(
                    "INSERT INTO rh.mammography("
                    + "mother_serial_no, service_date, previous_surgery, place_of_surgery,"
                    + "no_of_children, date_of_birth, occupation, no_pregnancies, no_abortions,"
                    + "married, had_previous_mammogram, family_suffered_breast_disease,"
                    + "has_received_hormonal_therapy, remarks)"
                    + "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

            pstmtMamography.setObject(3, mmPrevSurgeryCmbx.getSelectedItem());
            pstmtMamography.setObject(4, mmPlaceofPrevMammogramTxt.getText());
            pstmtMamography.setObject(5, mmNoofChildTxt.getText());
            pstmtMamography.setObject(6, mmDOBdatePicker.getDate());
            pstmtMamography.setObject(7, mmOccupationCmbx.getSelectedItem());
            pstmtMamography.setObject(8, mmNoofPregTxt.getText());
            pstmtMamography.setObject(9, mmNoofAbortionsTxt.getText());
            pstmtMamography.setObject(10, mmMaritalStatus.isSelected());
            pstmtMamography.setObject(11, mmPrevMammogramChkbx.isSelected());
            pstmtMamography.setObject(12, mmFamilyAffectedChkbx.isSelected());
            pstmtMamography.setObject(13, mmHormonalTherapyChkbx.isSelected());
            pstmtMamography.setObject(14, mmRemarksTxt.getText());

            //  pstmtPostNatal.setObject(16,);
            pstmtMamography.setObject(2, rhVisitDatePicker.getDate());
            //    pstmtMamography.setObject(15,rhVisitDatePicker.getDate());
            pstmtMamography.setObject(1, rhClientCardNoTxt.getText());
            pstmtMamography.execute();


            java.sql.PreparedStatement pstmtMammoExams = connectDB.prepareStatement("INSERT INTO rh.mommogram_exams("
                    + "mother_serial_no, date_of_service, mammogram_exam, result_of_exam,"
                    + "location_of_mass, remarks)"
                    + "VALUES(?, ?, ?, ?, ?, ?)");

            for (int j = 0; j < mmExamsTable.getRowCount(); j++) {
                if (mmExamsTable.getValueAt(j, 0) != null) {
                    pstmtMammoExams.setObject(1, rhClientCardNoTxt.getText());
                    pstmtMammoExams.setObject(2, rhVisitDatePicker.getDate());
                    pstmtMammoExams.setObject(3, mmExamsTable.getValueAt(j, 1));
                    pstmtMammoExams.setObject(4, mmExamsTable.getValueAt(j, 2));
                    pstmtMammoExams.setObject(5, mmExamsTable.getValueAt(j, 3));
                    pstmtMammoExams.setObject(6, mmExamsTable.getValueAt(j, 4));
                    pstmtMammoExams.execute();
                }
            }
            results();
        } catch (java.sql.SQLException sqlEx) {
            sqlEx.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
        }


// TODO add your handling code here:
    }//GEN-LAST:event_mmSaveDataBtnActionPerformed

    private void pnSaveDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pnSaveDataBtnActionPerformed

        /*   try {

        java.sql.PreparedStatement pstmtPostNatal = connectDB.prepareStatement(
        "INSERT INTO rh.post_natal_services (mother_serial_no,"
        + "place_of_delivery,type_of_mid_wife,delivery_method,"
        + "type_of_hospital,state_of_infant_at_birth,other_assitance_spec,"
        + "birth_complications,baby_weight,baby_gender,follow_up_normal_delivery,"
        + "patholgy,pathology_details,referral,reason_for_referral,"
        + "service_date) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");


        //            if(pnButtonGroup.getSelection().getActionCommand().equalsIgnoreCase(pnOtherChbx.getActionCommand())){
        //                pstmtPostNatal.setObject(3,pnOtherAssSpecifyTxt.getText());
        //            } else {
        pstmtPostNatal.setObject(3, pnButtonGroup.getSelection().getActionCommand());
        //           }
        pstmtPostNatal.setObject(4, pnTypeofDeliveryCmbx.getSelectedItem());
        pstmtPostNatal.setObject(5, pnTypeofHospitalCmbx.getSelectedItem());
        pstmtPostNatal.setObject(6, pnStateofInfantCmbx.getSelectedItem());
        pstmtPostNatal.setObject(7, pnOtherAssSpecifyTxt.getText());
        pstmtPostNatal.setObject(8, pnSpecifyComplicationsTxt.getText());
        pstmtPostNatal.setObject(9, pnWeightofBabyTxt.getText());
        pstmtPostNatal.setObject(10, pnSexofBabyCmbx.getSelectedItem());
        pstmtPostNatal.setObject(11, pnFollowupOfNormaldeliveryChkbx.isSelected());
        pstmtPostNatal.setObject(12, pnPathologyChkbx.isSelected());
        pstmtPostNatal.setObject(13, pnPatholgyDetailsTxt.getText());
        pstmtPostNatal.setObject(14, pnReferralTxt.getText());
        pstmtPostNatal.setObject(15, pnReferralReasonTxt.getText());
        //  pstmtPostNatal.setObject(16,);
        pstmtPostNatal.setObject(2, placeofLastDeliveryTxt.getText());
        pstmtPostNatal.setObject(16, rhVisitDatePicker.getDate());
        pstmtPostNatal.setObject(1, rhClientCardNoTxt.getText());
        pstmtPostNatal.execute();


        java.sql.PreparedStatement pstmtPostNatalFollowup = connectDB.prepareStatement("INSERT INTO rh.post_natal_exams("
        + "mother_serial_no, service_date, examination, result, remarks)"
        + "VALUES (?, ?, ?, ?, ?)");

        for (int j = 0; j < pnFollowUpTable.getRowCount(); j++) {
        if (pnFollowUpTable.getValueAt(j, 0) != null) {
        pstmtPostNatalFollowup.setObject(1, rhClientCardNoTxt.getText());
        pstmtPostNatalFollowup.setObject(2, rhVisitDatePicker.getDate());
        pstmtPostNatalFollowup.setObject(3, pnFollowUpTable.getValueAt(j, 0));
        pstmtPostNatalFollowup.setObject(4, pnFollowUpTable.getValueAt(j, 2));
        pstmtPostNatalFollowup.setObject(5, pnFollowUpTable.getValueAt(j, 3));
        pstmtPostNatalFollowup.execute();
        // pstmtPostNatalFollowup.setObject(6,);

        }
        }
        results();
        } catch (java.sql.SQLException sqlEx) {
        sqlEx.printStackTrace();
        javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
        }
         */
// TODO add your handling code here:
    }//GEN-LAST:event_pnSaveDataBtnActionPerformed

    private void childUpdateFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_childUpdateFileBtnActionPerformed

        try {

            java.sql.PreparedStatement pstmtChildHealth = connectDB.prepareStatement(
                    "INSERT INTO rh.child_health_follow_up (child_serial_no,service_date,"
                    + "place_of_service,child_age,weight,height,temperature,attendant,"
                    + "remarks,hc_centre"
                    + ") VALUES(?,?,?,?,?,?,?,?,?,?)");

            for (int j = 0; j < childClinicsTable.getRowCount(); j++) {
                if (childClinicsTable.getValueAt(j, 0) != null) {
                    pstmtChildHealth.setObject(3, childClinicsTable.getValueAt(j, 1).toString());
                    pstmtChildHealth.setObject(4, childClinicsTable.getValueAt(j, 2).toString());
                    pstmtChildHealth.setObject(5, childClinicsTable.getValueAt(j, 3).toString());
                    pstmtChildHealth.setObject(6, childClinicsTable.getValueAt(j, 4).toString());
                    pstmtChildHealth.setObject(7, childClinicsTable.getValueAt(j, 5).toString());
                    pstmtChildHealth.setObject(8, childClinicsTable.getValueAt(j, 6).toString());
                    pstmtChildHealth.setObject(9, childClinicsTable.getValueAt(j, 7).toString());
                    pstmtChildHealth.setObject(2, rhVisitDatePicker.getDate());
                    pstmtChildHealth.setObject(1, ccSerialNoTxt.getText());
                    pstmtChildHealth.setObject(10, System.getProperty("hc_centre"));
                    pstmtChildHealth.execute();
                    results();
                }

            }

        } catch (java.sql.SQLException sqlEx) {
            sqlEx.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getMessage());
        }

// TODO add your handling code here:
    }//GEN-LAST:event_childUpdateFileBtnActionPerformed

    private void nutritionGrowthBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nutritionGrowthBtnActionPerformed
        try {

            java.sql.PreparedStatement pstmtChildNutrition = connectDB.prepareStatement(
                    "INSERT INTO rh.child_nutrition (child_serial_no,breast_fed,"
                    + "service_date,no_of_months_breastfeeding,still_breastfeeding,"
                    + "type_of_milk,additional_food,age_of_intro_food,growth_indicator"
                    + "reason_for_not_breastfeeding,type_of_additional_food,"
                    + "age_of_growth_indicator,method_feeding_milk) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)");

            pstmtChildNutrition.setObject(1, ccSerialNoTxt.getText());
            pstmtChildNutrition.setObject(2, ntBreastFeedingChkbx.isSelected());
            pstmtChildNutrition.setObject(3, rhVisitDatePicker.getDate());
            pstmtChildNutrition.setObject(4, ntNoofMonthsBFTxt.getText());
            pstmtChildNutrition.setObject(5, ntStillBFChkbx.isSelected());
            pstmtChildNutrition.setObject(6, ntTypeofMilkCmbx.getSelectedItem());
            pstmtChildNutrition.setObject(7, ntAdditionalFood.isSelected());
            pstmtChildNutrition.setObject(8, ntTimeofAdditionalFoodTxt.getText());
            pstmtChildNutrition.setObject(9, growthIndicatorCmbx.getSelectedItem());
            pstmtChildNutrition.setObject(10, ntNotBreastfeedingReasonTxt.getText());
            pstmtChildNutrition.setObject(11, ntTypeofAddFoodTxt.getText());
            pstmtChildNutrition.setObject(12, indicatorAgeTxt.getText());
            pstmtChildNutrition.setObject(13, ntMethodFeedingCmbx.getSelectedItem());
            pstmtChildNutrition.execute();
            results();


        } catch (java.sql.SQLException sqlEx) {
            sqlEx.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
        }
// TODO add your handling code here:
    }//GEN-LAST:event_nutritionGrowthBtnActionPerformed

    private void childFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_childFileBtnActionPerformed
        try {

            java.sql.PreparedStatement pstmtChildFile = connectDB.prepareStatement(
                    "INSERT INTO rh.child_care("
                    + "child_serial_no, mother_serial_no, service_date, child_name,"
                    + "child_gender, child_date_of_birth, "
                    + "birth_cert_no, date_of_first_visit, gestation, weight, birth_place,"
                    + "father, mother, province, district, division, locations, village, "
                    + "boxs, town, tel, emailadd) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"
                    + "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
            pstmtChildFile.setObject(1, ccSerialNoTxt.getText());
            pstmtChildFile.setDate(3, com.afrisoftech.lib.SQLDateFormat.getSQLDate(rhVisitDatePicker.getDate()));
            pstmtChildFile.setObject(2, rhClientCardNoTxt.getText());
            pstmtChildFile.setObject(4, ccChildNameTxt.getText());
            pstmtChildFile.setObject(5, ccChildGenderCmbx.getSelectedItem());
            pstmtChildFile.setDate(6, com.afrisoftech.lib.SQLDateFormat.getSQLDate(ccChildDOBDatePicker.getDate()));
            pstmtChildFile.setObject(7, ccBCNoTxt.getText());
            pstmtChildFile.setDate(8, com.afrisoftech.lib.SQLDateFormat.getSQLDate(ccFirstVisitDatePicker.getDate()));
            pstmtChildFile.setInt(9, java.lang.Integer.valueOf(ccAgeYoungerRelTxt.getText()));
            pstmtChildFile.setDouble(10, java.lang.Double.valueOf(noSistersAliveTxt.getText()));
            if (jCheckBox14.isSelected()) {
                pstmtChildFile.setObject(11, "Health Facility");
            } else {
                if (jCheckBox13.isSelected()) {
                    pstmtChildFile.setObject(11, "Home");
                } else {
                    pstmtChildFile.setObject(11, jTextField1.getText());
                }
            }
            pstmtChildFile.setObject(12, ccAgeElderRelTxt.getText());
            pstmtChildFile.setObject(13, noBrothersAliveTxt.getText());
            pstmtChildFile.setObject(14, districtCmbx.getSelectedItem());
            pstmtChildFile.setObject(15, districtCmbx1.getSelectedItem());
            pstmtChildFile.setObject(16, jTextField23.getText());
            pstmtChildFile.setObject(17, jTextField25.getText());
            pstmtChildFile.setObject(18, jTextField26.getText());
            pstmtChildFile.setObject(19, jTextField28.getText());
            pstmtChildFile.setObject(20, jTextField27.getText());
            pstmtChildFile.setObject(21, jTextField30.getText());
            pstmtChildFile.setObject(22, jTextField24.getText());
            pstmtChildFile.execute();
            results();


        } catch (java.sql.SQLException sqlEx) {
            sqlEx.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
        }
// TODO add your handling code here:
    }//GEN-LAST:event_childFileBtnActionPerformed

    private void ultraSoundBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ultraSoundBtnActionPerformed
        if (rhClientCardNoTxt.getText().isEmpty()) {
            emptyNo();
        } else {

            try {
                connectDB.setAutoCommit(false);
                java.sql.PreparedStatement pstmtAnteNatalRoutine = connectDB.prepareStatement(""
                        + "INSERT INTO rh.antenatal_profile("
                        + "hb, blood_group, rhesus, tb, serology, urinalysis, bs, hiv, serial_no,"
                        + "mother_name, counseling_done, exclusive_counseling,"
                        + "infant_feeding, mothers_decision) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

                pstmtAnteNatalRoutine.setDouble(1, Double.parseDouble(surgicalTxt2.getText()));
                pstmtAnteNatalRoutine.setObject(2, healthCentreBranchCmbx1.getSelectedItem().toString());
                pstmtAnteNatalRoutine.setObject(3, fileRhesusfactorCmbx1.getSelectedItem().toString());
                if (jRadioButton2.isSelected()) {
                    pstmtAnteNatalRoutine.setObject(4, "Yes");
                } else {
                    pstmtAnteNatalRoutine.setObject(4, "No");
                }
                pstmtAnteNatalRoutine.setObject(5, diabTxt2.getText());
                pstmtAnteNatalRoutine.setObject(6, hyperTxt2.getText());
                pstmtAnteNatalRoutine.setObject(7, familyHistTxt2.getText());
                if (jCheckBox1.isSelected()) {
                    pstmtAnteNatalRoutine.setObject(8, "Reactive");
                } else {
                    if (jCheckBox2.isSelected()) {
                        pstmtAnteNatalRoutine.setObject(8, "Non Reactive");
                    } else {
                        pstmtAnteNatalRoutine.setObject(8, "Not Tested");
                    }
                }

                pstmtAnteNatalRoutine.setObject(9, rhClientCardNoTxt.getText());
                pstmtAnteNatalRoutine.setObject(10, retrievedNoTxt.getText());
                if (jCheckBox4.isSelected()) {
                    pstmtAnteNatalRoutine.setObject(11, "Yes");
                } else {
                    pstmtAnteNatalRoutine.setObject(11, "No");
                }
                if (jCheckBox6.isSelected()) {
                    pstmtAnteNatalRoutine.setObject(12, "Yes");
                } else {
                    pstmtAnteNatalRoutine.setObject(12, "No");
                }

                if (jCheckBox10.isSelected()) {
                    pstmtAnteNatalRoutine.setObject(13, "Yes");
                } else {
                    pstmtAnteNatalRoutine.setObject(13, "No");
                }
                if (jCheckBox9.isSelected()) {
                    pstmtAnteNatalRoutine.setObject(14, "Exclusive Breastfeeding");
                } else {
                    if (jCheckBox11.isSelected()) {
                        pstmtAnteNatalRoutine.setObject(14, "Replacement Feeding");
                    } else {
                        pstmtAnteNatalRoutine.setObject(14, "Not Decided");
                    }
                }
                pstmtAnteNatalRoutine.execute();
                results();

                connectDB.commit();
                connectDB.setAutoCommit(true);

            } catch (java.sql.SQLException sqlEx) {
                sqlEx.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
            }
        }
// TODO add your handling code here:
    }//GEN-LAST:event_ultraSoundBtnActionPerformed

    private void routineBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_routineBtnActionPerformed
        if (rhClientCardNoTxt.getText().isEmpty()) {
            emptyNo();
        } else {

            try {

                java.sql.PreparedStatement pstmtAnteNatalRoutine = connectDB.prepareStatement(
                        "INSERT INTO rh.present_pregnancy("
                        + "input_date, urine, weight, bp, hb, pallor, maturity, fheight, "
                        + "presentation, lie, fheart, fmovt, oedema, serial_no, mother_name) "
                        + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

                for (int j = 0; j < previousPregHistTbl1.getRowCount(); j++) {
                    if (previousPregHistTbl1.getValueAt(j, 0) != null) {
                        pstmtAnteNatalRoutine.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(rhVisitDatePicker.getDate()));
                        pstmtAnteNatalRoutine.setObject(2, previousPregHistTbl1.getValueAt(j, 0).toString());
                        pstmtAnteNatalRoutine.setObject(3, previousPregHistTbl1.getValueAt(j, 1).toString());
                        pstmtAnteNatalRoutine.setObject(4, previousPregHistTbl1.getValueAt(j, 2).toString());
                        pstmtAnteNatalRoutine.setObject(5, previousPregHistTbl1.getValueAt(j, 3).toString());
                        pstmtAnteNatalRoutine.setObject(6, previousPregHistTbl1.getValueAt(j, 4).toString());
                        pstmtAnteNatalRoutine.setObject(7, previousPregHistTbl1.getValueAt(j, 5).toString());
                        pstmtAnteNatalRoutine.setObject(8, previousPregHistTbl1.getValueAt(j, 6).toString());
                        pstmtAnteNatalRoutine.setObject(9, previousPregHistTbl1.getValueAt(j, 7).toString());
                        pstmtAnteNatalRoutine.setObject(10, previousPregHistTbl1.getValueAt(j, 8).toString());
                        pstmtAnteNatalRoutine.setObject(11, previousPregHistTbl1.getValueAt(j, 9).toString());
                        pstmtAnteNatalRoutine.setObject(12, previousPregHistTbl1.getValueAt(j, 10).toString());
                        pstmtAnteNatalRoutine.setObject(13, previousPregHistTbl1.getValueAt(j, 11).toString());

                        pstmtAnteNatalRoutine.setObject(14, rhClientCardNoTxt.getText());
                        pstmtAnteNatalRoutine.setObject(15, retrievedNoTxt.getText());
                        pstmtAnteNatalRoutine.execute();

                    }

                }
                results();
                pstmtAnteNatalRoutine.close();
            } catch (java.sql.SQLException sqlEx) {
                sqlEx.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
            }

        }

        // TODO add your handling code here
    }//GEN-LAST:event_routineBtnActionPerformed

    private void rhClientCardNoTxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rhClientCardNoTxtFocusLost

        serialNoTxt.setText(rhClientCardNoTxt.getText());

// TODO add your handling code here:
    }//GEN-LAST:event_rhClientCardNoTxtFocusLost

    private void histSaveDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_histSaveDataBtnActionPerformed
        if (rhClientCardNoTxt.getText().isEmpty()) {
            emptyNo();
        } else {
            try {
                connectDB.setAutoCommit(false);
                java.sql.PreparedStatement pstmtPregHist = connectDB.prepareStatement(
                        "INSERT INTO rh.hist_prev_preg (preg_order,anc_times,maturity,"
                        + " duration_of_labour,preg_year,place_delivery,type_of_delivery,"
                        + "birth_weight,sex,outcome,peurperium,serial_no) VALUES(?,?,?,?,?,?,?,?,?,?,?,?)");

                for (int j = 0; j < previousPregHistTbl.getRowCount(); j++) {
                    if (previousPregHistTbl.getValueAt(j, 0) != null) {
                        //pstmtPregHist.setString(1,rhClientCardNoTxt.getText());
                        pstmtPregHist.setObject(1, previousPregHistTbl.getValueAt(j, 0).toString());
                        pstmtPregHist.setInt(2, java.lang.Integer.parseInt(previousPregHistTbl.getValueAt(j, 2).toString()));
                        pstmtPregHist.setString(3, previousPregHistTbl.getValueAt(j, 4).toString());
                        pstmtPregHist.setInt(4, java.lang.Integer.parseInt(previousPregHistTbl.getValueAt(j, 5).toString()));
                        pstmtPregHist.setDate(5, com.afrisoftech.lib.SQLDateFormat.getSQLDate(rhVisitDatePicker.getDate()));
                        pstmtPregHist.setObject(6, previousPregHistTbl.getValueAt(j, 3).toString());
                        pstmtPregHist.setObject(7, previousPregHistTbl.getValueAt(j, 6).toString());
                        pstmtPregHist.setDouble(8, Double.parseDouble(previousPregHistTbl.getValueAt(j, 7).toString()));
                        pstmtPregHist.setObject(9, previousPregHistTbl.getValueAt(j, 8).toString());
                        pstmtPregHist.setObject(10, previousPregHistTbl.getValueAt(j, 9).toString());
                        pstmtPregHist.setObject(11, previousPregHistTbl.getValueAt(j, 10).toString());
                        pstmtPregHist.setObject(12, rhClientCardNoTxt.getText());
                        pstmtPregHist.execute();

                        //pstmtPregHist.setDouble(11, java.lang.Double.parseDouble(previousPregHistTbl.getValueAt(j, 2).toString()));
                    }

                }

                connectDB.commit();
                connectDB.setAutoCommit(true);
                results();
            } catch (java.sql.SQLException sqlEx) {
                sqlEx.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
            }

            // try{
         /*   java.sql.PreparedStatement pstmtDisMother = connectDB.prepareStatement(
            "INSERT INTO rh.mother_prev_ailments (serial_no_mother,disease,specific_info," +
            "remarks,service_date) VALUES(?,?,?,?,?)");

            for(int j = 0; j < previousPregOtherInfoTable.getRowCount(); j++){
            if(previousPregOtherInfoTable.getValueAt(j,0) != null){
            pstmtDisMother.setString(1,rhClientCardNoTxt.getText());
            pstmtDisMother.setString(2,previousPregOtherInfoTable.getValueAt(j,0).toString());
            pstmtDisMother.setString(3,previousPregOtherInfoTable.getValueAt(j,1).toString());
            pstmtDisMother.setString(4,previousPregOtherInfoTable.getValueAt(j,2).toString());
            pstmtDisMother.setObject(5,rhVisitDatePicker.getDate());
            pstmtDisMother.execute();
            results();
            }

            }


            } catch(java.sql.SQLException sqlEx){
            sqlEx.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this,sqlEx.getLocalizedMessage());
            }
             */
        }
// TODO add your handling code here:
    }//GEN-LAST:event_histSaveDataBtnActionPerformed

    private void postFamilyInfoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postFamilyInfoBtnActionPerformed
        if (rhClientCardNoTxt.getText().isEmpty()) {
            emptyNo();
        } else {
            try {
                connectDB.setAutoCommit(false);
                java.sql.PreparedStatement pstmtFamilyInfo = connectDB.prepareStatement(
                        "INSERT INTO rh.family_history  (surgical_operation,blood_transfusion,"
                        + "family_history,diabetes,hypertension,tuberculosis,serial_no, mother_name) VALUES(?,?,?,?,?,?,?,?)");

                pstmtFamilyInfo.setString(1, surgicalTxt.getText());
                pstmtFamilyInfo.setString(2, bloodTransmTxt.getText());
                pstmtFamilyInfo.setString(3, familyHistTxt.getText());
                pstmtFamilyInfo.setString(4, diabTxt.getText());
                pstmtFamilyInfo.setString(5, hyperTxt.getText());
                pstmtFamilyInfo.setString(6, tuberTxt.getText());
                pstmtFamilyInfo.setString(7, rhClientCardNoTxt.getText());
                pstmtFamilyInfo.setString(8, retrievedNoTxt.getText());
                pstmtFamilyInfo.execute();
                results();
                connectDB.commit();
                connectDB.setAutoCommit(true);
            } catch (java.sql.SQLException sqlEx) {
                sqlEx.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
            }
        }
// TODO add your handling code here:
    }//GEN-LAST:event_postFamilyInfoBtnActionPerformed

    private void postHusbandInfoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postHusbandInfoBtnActionPerformed
        if (rhClientCardNoTxt.getText().isEmpty()) {
            emptyNo();
        } else {
            try {
                connectDB.setAutoCommit(false);
                java.sql.PreparedStatement pstmtMotherInfo = connectDB.prepareStatement(
                        "INSERT INTO rh.child_info(issued_on, client_name, child_name, birth_notification_no, birth_certificate, "
                        + "mother_no) VALUES (?, ?, ?, ?, ?, ?)");
                pstmtMotherInfo.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(husbanddateofBirthdatePicker.getDate()));
                pstmtMotherInfo.setString(2, husbandNameTxt.getText());
                pstmtMotherInfo.setString(3, husbandTelNoTxt.getText());
                pstmtMotherInfo.setString(4, jTextField9.getText());
                pstmtMotherInfo.setString(5, jTextField10.getText());
                pstmtMotherInfo.setString(6, rhClientCardNoTxt.getText());

                pstmtMotherInfo.executeUpdate();

                results();

                connectDB.commit();
                connectDB.setAutoCommit(true);
                pstmtMotherInfo.close();

            } catch (java.sql.SQLException sqlEx) {
                sqlEx.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
            }
        }
// TODO add your handling code here:
    }//GEN-LAST:event_postHusbandInfoBtnActionPerformed

    private void saveMotherInfoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMotherInfoBtnActionPerformed
        if (rhClientCardNoTxt.getText().isEmpty()) {
            emptyNo();
        } else {
            try {
                connectDB.setAutoCommit(false);
                java.sql.PreparedStatement pstmtMotherInfo = connectDB.prepareStatement(
                        "INSERT INTO rh.mother_details (anc,name_of_hosp,"
                        + "middle_name,last_name,educationalcmbx,address,"
                        + "religion,telephone,lmp,first_name,occupation,"
                        + "age,next_of_kin,next_of_kin_addr,gravida,parity,"
                        + "height,edd, serial_no) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,? ,?)");
                // pstmtFamilyInfo.setInt(3,java.lang.Integer.parseInt(diabTxt.getText()));
                pstmtMotherInfo.setString(1, ancTxt.getText());
                pstmtMotherInfo.setString(2, nameOfInst.getText());
                pstmtMotherInfo.setString(3, lastnameTxt.getText());
                pstmtMotherInfo.setString(4, middleNameTxt.getText());
                pstmtMotherInfo.setObject(5, educationLevelCmbx.getSelectedItem());
                pstmtMotherInfo.setString(6, addressTxt.getText());
                pstmtMotherInfo.setObject(7, religionCmbx.getSelectedItem());
                pstmtMotherInfo.setObject(8, telephoneTxt.getText());
                pstmtMotherInfo.setDate(9, com.afrisoftech.lib.SQLDateFormat.getSQLDate(lmpDatePicker.getDate()));
                //pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                pstmtMotherInfo.setString(10, lastnameTxt.getText());
                pstmtMotherInfo.setObject(11, occupationCmbx.getSelectedItem());
                pstmtMotherInfo.setInt(12, java.lang.Integer.parseInt(agetxt.getText()));
                pstmtMotherInfo.setString(13, nextTxt.getText());
                pstmtMotherInfo.setString(14, nextAddTxt.getText());
                pstmtMotherInfo.setInt(15, java.lang.Integer.parseInt(gravidaTxt.getText()));
                pstmtMotherInfo.setString(16, parityTxt.getText());
                pstmtMotherInfo.setDouble(17, java.lang.Double.parseDouble(heightTxt.getText()));
                pstmtMotherInfo.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(edddatePicker.getDate()));
                pstmtMotherInfo.setString(19, rhClientCardNoTxt.getText());
                pstmtMotherInfo.execute();
                results();
                connectDB.commit();
                connectDB.setAutoCommit(true);
            } catch (java.sql.SQLException sqlEx) {
                sqlEx.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
            }
        }
// TODO add your handling code here:
    }//GEN-LAST:event_saveMotherInfoBtnActionPerformed

    private void regSaveDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regSaveDataBtnActionPerformed
        if (rhClientCardNoTxt.getText().isEmpty()) {
            emptyNo();
        } else {
            try {
                java.sql.PreparedStatement pstmtFileInfo = connectDB.prepareStatement("INSERT INTO rh.file_info (date,province,blood_group,hc_centre,date_of_first_visit,village,rhesus_factor,date_of_birth,serial_no) VALUES(?,?,?,?,?,?,?,?,?)");
                pstmtFileInfo.setDate(1, new java.sql.Date(rhVisitDatePicker.getDate().getTime()));
                pstmtFileInfo.setString(2, provinceCmbx.getSelectedItem().toString());
                pstmtFileInfo.setString(3, fileBloodGroupCmbx.getSelectedItem().toString());
                pstmtFileInfo.setString(4, System.getProperty("hc_centre"));
                pstmtFileInfo.setDate(5, new java.sql.Date(firstVisitDatePicker.getDate().getTime()));
                pstmtFileInfo.setString(6, villageTxt.getText());
                pstmtFileInfo.setString(7, fileRhesusfactorCmbx.getSelectedItem().toString());
                pstmtFileInfo.setDate(8, new java.sql.Date(dobDatePicker.getDate().getTime()));
                pstmtFileInfo.setString(9, serialNoTxt.getText());
                pstmtFileInfo.executeUpdate();
                results();
            } catch (java.sql.SQLException sqlEx) {
                sqlEx.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
            }
        }
// TODO add your handling code here:
    }//GEN-LAST:event_regSaveDataBtnActionPerformed

    private void jSearchDialogComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jSearchDialogComponentHidden
//        jSearchDialog.dispose();
// TODO add your handling code here:
    }//GEN-LAST:event_jSearchDialogComponentHidden

    private void disposeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disposeActionPerformed
        jSearchDialog.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_disposeActionPerformed

    private void clientSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clientSearchTableMouseClicked
//  jComboBox2.setSelectedItem(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0));
        this.serialNoTxt.setText(clientSearchTable.getValueAt(clientSearchTable.getSelectedRow(), 0).toString());

        this.rhClientCardNoTxt.setText(clientSearchTable.getValueAt(clientSearchTable.getSelectedRow(), 0).toString());
        retrievedNoTxt.setText(clientSearchTable.getValueAt(clientSearchTable.getSelectedRow(), 1).toString() + " " + clientSearchTable.getValueAt(clientSearchTable.getSelectedRow(), 2).toString());
        husbandNameTxt.setText(clientSearchTable.getValueAt(clientSearchTable.getSelectedRow(), 1).toString() + " " + clientSearchTable.getValueAt(clientSearchTable.getSelectedRow(), 2).toString());
        middleNameTxt.setText(clientSearchTable.getValueAt(clientSearchTable.getSelectedRow(), 1).toString());
        firstNameTxt.setText(clientSearchTable.getValueAt(clientSearchTable.getSelectedRow(), 2).toString());
        //        jTextField21.setText(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 2).toString());
        jSearchDialog.dispose();

        // Add your handling code here:
    }//GEN-LAST:event_clientSearchTableMouseClicked

    private void clientSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_clientSearchTxtCaretUpdate

        if (clientSearchTxt.getCaretPosition() < 3) {

            System.out.println("Nothing");
        } else {
            clientSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, upper(second_name) as other_names, upper(first_name) as surname, year_of_birth, residence from hp_patient_register where sex ilike 'female' AND (second_name||' '||first_name ILIKE '%" + clientSearchTxt.getText() + "%' or patient_no ilike '%" + clientSearchTxt.getText() + "%') order by second_name"));
            clientSearchTable.setShowHorizontalLines(false);
            jSearchScrollPane.setViewportView(clientSearchTable);

        }
// Add your handling code here:
    }//GEN-LAST:event_clientSearchTxtCaretUpdate

    private void clientSearchTxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_clientSearchTxtFocusLost
//      jSearchDialog.dispose();
// TODO add your handling code here:
    }//GEN-LAST:event_clientSearchTxtFocusLost

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed

        searchButtonClicked();
        jCheckBox1.setSelected(false);
        jCheckBox10.setSelected(false);
        jCheckBox11.setSelected(false);
        jCheckBox12.setSelected(false);
        jCheckBox2.setSelected(false);
        jCheckBox3.setSelected(false);
        jCheckBox4.setSelected(false);
        jCheckBox5.setSelected(false);
        jCheckBox6.setSelected(false);
        jCheckBox7.setSelected(false);
        jCheckBox8.setSelected(false);
        jCheckBox9.setSelected(false);
        // Add your handling code here:
    }//GEN-LAST:event_searchFieldActionPerformed

    private void searchButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton4ActionPerformed

        searchButtonClicked();
        // Add your handling code here:
    }//GEN-LAST:event_searchButton4ActionPerformed

    private void searchButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton3ActionPerformed

        searchButtonClicked();
        // Add your handling code here:
    }//GEN-LAST:event_searchButton3ActionPerformed

    private void searchButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton2ActionPerformed

        searchButtonClicked();
        // Add your handling code here:
    }//GEN-LAST:event_searchButton2ActionPerformed

    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed

        searchButtonClicked();
        // Add your handling code here:
    }//GEN-LAST:event_searchButton1ActionPerformed

    private void diabTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diabTxtActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_diabTxtActionPerformed

    private void villageTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_villageTxtActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_villageTxtActionPerformed

    private void gravidaTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gravidaTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gravidaTxtActionPerformed

    private void ancTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ancTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ancTxtActionPerformed

    private void jTextField10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField10ActionPerformed

    private void regEditdataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regEditdataBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_regEditdataBtnActionPerformed

    private void geSaveBioDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geSaveBioDataBtnActionPerformed
        if (rhClientCardNoTxt.getText().isEmpty()) {
            emptyNo();
        } else {
            try {

                java.sql.PreparedStatement pstmtBioData = connectDB.prepareStatement(
                        "INSERT INTO rh.general_services("
                        + "mother_serial_no, name, marital_status, present_medical_history,"
                        + "past_medical_history, ethnic_background, service_date, date_of_birth,"
                        + "family_medical_history, fitness_level, hc_centre,exam_qualification, remarks"
                        + ")"
                        + "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

                pstmtBioData.setObject(2, retrievedNoTxt.getText());
                pstmtBioData.setObject(3, peMaritalStatusCmbx.getSelectedItem());
                pstmtBioData.setObject(4, pePresentMHTxt.getText());
                pstmtBioData.setObject(5, pePastMHTxt.getText());
                pstmtBioData.setObject(6, peEthnicTxt.getText());
                pstmtBioData.setDate(7, com.afrisoftech.lib.SQLDateFormat.getSQLDate(visitDatePicker.getDate()));
                pstmtBioData.setDate(8, com.afrisoftech.lib.SQLDateFormat.getSQLDate(peDOBDatePicker.getDate()));
                pstmtBioData.setObject(9, peFamilyMHTxt.getText());
                pstmtBioData.setObject(10, fitnessLevelCmbx.getSelectedItem());
                pstmtBioData.setObject(11, System.getProperty("hc_centre"));
                pstmtBioData.setObject(12, peQualificationTxt.getText());
                pstmtBioData.setObject(13, peCommentsTxt.getText());
                pstmtBioData.setObject(1, rhClientCardNoTxt.getText());
                pstmtBioData.execute();

                results();
            } catch (java.sql.SQLException sqlEx) {
                sqlEx.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
            }
        }
        // TODO add your handling code here:
}//GEN-LAST:event_geSaveBioDataBtnActionPerformed

    private void counsTypeofDeliveryCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_counsTypeofDeliveryCmbxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_counsTypeofDeliveryCmbxActionPerformed

    private void fpCounsellingServicesBtnActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fpCounsellingServicesBtnActionPerformed1
        // TODO add your handling code here:
    }//GEN-LAST:event_fpCounsellingServicesBtnActionPerformed1

    private void counsEditDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_counsEditDataBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_counsEditDataBtnActionPerformed

    private void searchButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton22ActionPerformed
//        searchButtonClicked211s(); // Add your handling code here:
}//GEN-LAST:event_searchButton22ActionPerformed

    private void husbandNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_husbandNameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_husbandNameTxtActionPerformed

    private void diabTxt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diabTxt1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_diabTxt1ActionPerformed

    private void postFamilyInfoBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postFamilyInfoBtn1ActionPerformed
        if (rhClientCardNoTxt.getText().isEmpty()) {
            emptyNo();
        } else {
            try {
                connectDB.setAutoCommit(false);
                java.sql.PreparedStatement pstmtFamilyInfo = connectDB.prepareStatement("INSERT INTO rh.first_phy_exam("
                        + "general_comment, cvs, resp, breasts, abdomen, ve,"
                        + " gud, serial_no,mother_name)"
                        + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)");
                pstmtFamilyInfo.setString(1, surgicalTxt1.getText());
                pstmtFamilyInfo.setString(2, bloodTransmTxt1.getText());
                pstmtFamilyInfo.setString(3, diabTxt1.getText());
                pstmtFamilyInfo.setString(4, tuberTxt1.getText());
                pstmtFamilyInfo.setString(5, hyperTxt1.getText());
                pstmtFamilyInfo.setString(6, tuberTxt2.getText());
                pstmtFamilyInfo.setString(7, familyHistTxt1.getText());
                pstmtFamilyInfo.setString(8, rhClientCardNoTxt.getText());
                pstmtFamilyInfo.setString(9, retrievedNoTxt.getText());
                pstmtFamilyInfo.execute();
                results();
                connectDB.commit();
                connectDB.setAutoCommit(true);
                pstmtFamilyInfo.close();
            } catch (java.sql.SQLException sqlEx) {
                sqlEx.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_postFamilyInfoBtn1ActionPerformed

    private void diabTxt2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diabTxt2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_diabTxt2ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        jPanel2.setVisible(true);
// TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        jPanel2.setVisible(false);
        // jPanel2.se
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        jPanel2.setVisible(false);        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jTextField1CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1CaretUpdate
        jCheckBox13.setSelected(false);
        jCheckBox14.setSelected(false);

// TODO add your handling code here:
    }//GEN-LAST:event_jTextField1CaretUpdate

    private void labCloseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_labCloseBtnActionPerformed

        this.dispose();

        // TODO add your handling code here:
}//GEN-LAST:event_labCloseBtnActionPerformed

    private void recordLaboratoryInfoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordLaboratoryInfoBtnActionPerformed

        try {
            java.sql.PreparedStatement pstmtLabData = connectDB.prepareStatement(
                    "INSERT INTO rh.lab_tests("
                    + "mother_serial_no, service_date, lab_test, immunization_procedure,"
                    + "child_serial, lab_result, remarks, review_date,"
                    + "hc_centre)"
                    + "VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)");

            pstmtLabData.setObject(2, visitDatePicker.getDate());
            pstmtLabData.setObject(3, labExamTaken.getSelectedItem());
//            pstmtLabData.setObject(4, immunizationProcedure.getSelectedItem());
            //     pstmtLabData.setObject(5, childSerial.getText());
            //    pstmtLabData.setObject(6, labResultsTxt.getText());
            pstmtLabData.setObject(7, labRemarksTxt.getText());
            //     pstmtLabData.setObject(8, labReviewDatePicker.getDate());
            pstmtLabData.setObject(9, System.getProperty("hc_centre"));
            pstmtLabData.setObject(1, rhClientCardNoTxt.getText());
            pstmtLabData.execute();

            results();
        } catch (java.sql.SQLException sqlEx) {
            sqlEx.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getLocalizedMessage());
        }
        // TODO add your handling code here:
}//GEN-LAST:event_recordLaboratoryInfoBtnActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
//cmboxActionPerformed(evt);
        cmbox.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxActionPerformed(evt);
            }
        });        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    private void diseaseSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_diseaseSearchTxtCaretUpdate
        if(diseaseSearchTxt.getText().length() > 3) {
        diseaseSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT code, disease_name FROM hp_diseases WHERE disease_name ilike '%"+diseaseSearchTxt.getText()+"%' ORDER BY 2"));
        }// TODO add your handling code here:
    }//GEN-LAST:event_diseaseSearchTxtCaretUpdate

    private void diseaseSearchTxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_diseaseSearchTxtFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_diseaseSearchTxtFocusLost

    private void diseaseSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_diseaseSearchTableMouseClicked

        diseaseNameTxt.setText(diseaseSearchTable.getValueAt(diseaseSearchTable.getSelectedRow(), 1).toString());
        
        diseaseSearchDialog.dispose();
        
        // TODO add your handling code here:
    }//GEN-LAST:event_diseaseSearchTableMouseClicked

    private void diseaseDisposeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diseaseDisposeBtnActionPerformed

        diseaseSearchDialog.dispose();
        
        // TODO add your handling code here:
    }//GEN-LAST:event_diseaseDisposeBtnActionPerformed

    private void diseaseSearchDialogComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_diseaseSearchDialogComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_diseaseSearchDialogComponentHidden

    private void searchField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchField1ActionPerformed

        System.out.println("Showing dialog");

        java.awt.Point point = this.diseaseNameTxt.getLocationOnScreen();

        diseaseSearchDialog.setSize(600, 200);

        diseaseSearchDialog.setLocation(point);

        diseaseSearchDialog.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_searchField1ActionPerformed
    private void searchButtonClicked() {

        System.out.println("Showing dialog");

        java.awt.Point point = this.retrievedNoTxt.getLocationOnScreen();

        jSearchDialog.setSize(600, 200);

        jSearchDialog.setLocation(point);

        jSearchDialog.setVisible(true);

    }

    public void results() {
        javax.swing.JOptionPane.showMessageDialog(this, "Data posted to database successfully. ");

    }

    public void emptyNo() {
        javax.swing.JOptionPane.showMessageDialog(this, "You cannot save without registered patient no");

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Fit;
    private javax.swing.JTextField addressTxt;
    private javax.swing.JLabel ageLbl;
    private javax.swing.JTextField agetxt;
    private javax.swing.JPanel anComplaintsNUltrasoundPanel;
    private javax.swing.JTabbedPane anMotherFollowupTp;
    private javax.swing.JPanel anRoutineExamsPanel;
    private javax.swing.JTextField ancTxt;
    private javax.swing.JPanel anteNatalDiagnosticsPane;
    private javax.swing.JPanel bioDataPanel;
    private javax.swing.JTextField bloodTransmTxt;
    private javax.swing.JTextField bloodTransmTxt1;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.ButtonGroup buttonGroup7;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JLabel ccAgeElderRelLbl;
    private javax.swing.JTextField ccAgeElderRelTxt;
    private javax.swing.JLabel ccAgeYoungerRelLbl;
    private javax.swing.JTextField ccAgeYoungerRelTxt;
    private javax.swing.JLabel ccBCNoLbl;
    private javax.swing.JTextField ccBCNoTxt;
    private javax.swing.JPanel ccBioDataPanel;
    private javax.swing.JPanel ccButtonsPanel;
    private javax.swing.JPanel ccChildClinicsPanel;
    private com.afrisoftech.lib.DatePicker ccChildDOBDatePicker;
    private javax.swing.JLabel ccChildDOBLbl;
    private javax.swing.JComboBox ccChildGenderCmbx;
    private javax.swing.JLabel ccChildGenderLbl;
    private javax.swing.JLabel ccChildNameLbl;
    private javax.swing.JTextField ccChildNameTxt;
    private javax.swing.JLabel ccFemalesAliveLbl;
    private com.afrisoftech.lib.DatePicker ccFirstVisitDatePicker;
    private javax.swing.JLabel ccFirstVisitLbl;
    private javax.swing.ButtonGroup ccGrowthIndicatorsPanel;
    private javax.swing.JLabel ccMalesAliveLbl;
    private javax.swing.JPanel ccMilestonesPanel;
    private javax.swing.JTabbedPane ccMoreInfoTp;
    private javax.swing.JPanel ccNutritionPanel;
    private javax.swing.JLabel ccSerialNoLbl;
    private javax.swing.JTextField ccSerialNoTxt;
    private javax.swing.JPanel childCarePane;
    private javax.swing.JTable childClinicsTable;
    private javax.swing.JButton childFileBtn;
    private javax.swing.JButton childUpdateFileBtn;
    private javax.swing.JTable clientSearchTable;
    private javax.swing.JTextField clientSearchTxt;
    private javax.swing.JButton closeFormBtn;
    private javax.swing.JPanel commandpanel;
    private javax.swing.JPanel consellingButtonspanel;
    private javax.swing.JLabel counsAbortNormalLbl;
    private javax.swing.JTextField counsAbortNormalTxt;
    private javax.swing.JLabel counsAbortTreatedLbl;
    private javax.swing.JTextField counsAbortTreatedTxt;
    private javax.swing.JLabel counsBtnSpacerLbl;
    private javax.swing.JButton counsClearEntriesBtn;
    private javax.swing.JButton counsCloseFormBtn;
    private com.afrisoftech.lib.DatePicker counsDateofFirstDeliveryDatePicker;
    private javax.swing.JLabel counsDateofFirstDeliveryLbl;
    private com.afrisoftech.lib.DatePicker counsDateofFirstPregDatePicker;
    private javax.swing.JLabel counsDateofFirstPregLbl;
    private javax.swing.JLabel counsDateofLastDelLbl;
    private com.afrisoftech.lib.DatePicker counsDateofLastPeriodDatePicker;
    private javax.swing.JLabel counsDateofLastPeriodLbl;
    private com.afrisoftech.lib.DatePicker counsDateofLatDeliveryDatePicker;
    private javax.swing.JButton counsEditDataBtn;
    private javax.swing.JComboBox counsFisrtChildDeliveryTypeCmbx;
    private javax.swing.JLabel counsFisrtChildDeliveryTypeLbl;
    private javax.swing.JLabel counsNoofAliveLbl;
    private javax.swing.JTextField counsNoofAliveTxt;
    private javax.swing.JLabel counsNoofChildAliveFemaleLbl;
    private javax.swing.JTextField counsNoofChildAliveFemaleTxt;
    private javax.swing.JLabel counsNoofChildAliveMaleLbl;
    private javax.swing.JTextField counsNoofChildAliveMaleTxt;
    private javax.swing.JLabel counsNoofDeadLbl;
    private javax.swing.JTextField counsNoofDeadTxt;
    private javax.swing.JLabel counsNoofDeliveriesLbl;
    private javax.swing.JTextField counsNoofDeliveriesTxt;
    private javax.swing.JComboBox counsReasonForPlanningCmbx;
    private javax.swing.JLabel counsReasonForPlanningLbl;
    private javax.swing.JButton counsSaveDataBtn;
    private javax.swing.JComboBox counsSexCmbx;
    private javax.swing.JLabel counsSexLbl;
    private javax.swing.JLabel counsSexofFirstChildLbl;
    private javax.swing.JComboBox counsSexofFirstDeliveryCmbx;
    private javax.swing.JComboBox counsTypeofDeliveryCmbx;
    private javax.swing.JLabel counsTypeofdeliveryLbl;
    private javax.swing.JScrollPane counsellingJscrl;
    private javax.swing.JPanel counsellingTabbedPane;
    private javax.swing.JTable counsellingTable;
    private javax.swing.JTextField diabTxt;
    private javax.swing.JTextField diabTxt1;
    private javax.swing.JTextField diabTxt2;
    private javax.swing.JPanel discussionsPanel;
    private javax.swing.JButton diseaseDisposeBtn;
    private javax.swing.JLabel diseaseName;
    private javax.swing.JTextField diseaseNameTxt;
    private javax.swing.JDialog diseaseSearchDialog;
    private javax.swing.JPanel diseaseSearchPanel;
    private javax.swing.JScrollPane diseaseSearchScrollPane;
    private javax.swing.JTable diseaseSearchTable;
    private javax.swing.JTextField diseaseSearchTxt;
    private javax.swing.JButton dispose;
    private javax.swing.JComboBox districtCmbx;
    private javax.swing.JComboBox districtCmbx1;
    private com.afrisoftech.lib.DatePicker dobDatePicker;
    private javax.swing.JLabel dobLbl;
    private javax.swing.JComboBox doctorCmbx;
    private com.afrisoftech.lib.DatePicker edddatePicker;
    private javax.swing.JComboBox educationLevelCmbx;
    private javax.swing.JLabel educationLevelLbl;
    private javax.swing.JLabel expectedNoofPregLbl;
    private javax.swing.JTabbedPane familyCareTabbedPane;
    private javax.swing.JTextField familyHistTxt;
    private javax.swing.JTextField familyHistTxt1;
    private javax.swing.JTextField familyHistTxt2;
    private javax.swing.JLabel familyIncomeLbl;
    private javax.swing.JLabel familyIncomeLbl1;
    private javax.swing.JLabel familyIncomeLbl2;
    private javax.swing.JPanel familyInfoPanel;
    private javax.swing.JTabbedPane familyInfoTabbedPane;
    private javax.swing.JLabel familyMembersLbl;
    private javax.swing.JLabel familyMembersLbl1;
    private javax.swing.JLabel familyMembersLbl2;
    private javax.swing.JPanel familyPlanningPane;
    private javax.swing.JPanel fatherInfoPanel;
    private javax.swing.JComboBox fileBloodGroupCmbx;
    private javax.swing.JLabel fileBloodGroupLbl;
    private javax.swing.JPanel filePane;
    private javax.swing.JLabel fileRhesusFactorsLbl;
    private javax.swing.JComboBox fileRhesusfactorCmbx;
    private javax.swing.JComboBox fileRhesusfactorCmbx1;
    private javax.swing.JTextField firstNameTxt;
    private com.afrisoftech.lib.DatePicker firstVisitDatePicker;
    private javax.swing.JLabel firstVisitdateLbl;
    private javax.swing.JComboBox fitnessLevelCmbx;
    private javax.swing.JLabel fpAbdominalPainCharacterLbl;
    private javax.swing.JTextField fpAbdominalPainCharacterTxt;
    private javax.swing.JComboBox fpAbdominalPainCmbx;
    private javax.swing.JLabel fpAbdominalPainDurationLbl;
    private javax.swing.JTextField fpAbdominalPainDurationTxt;
    private javax.swing.JLabel fpAbdominalPainLbl;
    private javax.swing.JLabel fpBMILbl;
    private javax.swing.JTextField fpBMITxt;
    private javax.swing.JLabel fpBPLbl;
    private javax.swing.JTextField fpBPTxt;
    private javax.swing.JLabel fpBeginDateLMPDatePickerLbl;
    private com.afrisoftech.lib.DatePicker fpBeginDateLMPdatePicker;
    private javax.swing.JComboBox fpBreastConditionCmbx;
    private javax.swing.JLabel fpBreastConditionLbl;
    private javax.swing.JPanel fpButtonsPanel;
    private javax.swing.JButton fpClearEntriesBtn;
    private javax.swing.JButton fpCloseFormPanel;
    private javax.swing.JScrollPane fpCommentsJscrl;
    private javax.swing.JLabel fpCommentsLbl;
    private javax.swing.JTextArea fpCommentsTxt;
    private javax.swing.JLabel fpContraTreatmentLbl;
    private javax.swing.JTextField fpContraTreatmentTxt;
    private javax.swing.JScrollPane fpContraceptivesRemarksJscrl;
    private javax.swing.JLabel fpContraceptivesRemarksLbl;
    private javax.swing.JTextArea fpContraceptivesRemarksTxt;
    private javax.swing.JTable fpContraceptivesTable;
    private javax.swing.JScrollPane fpContraceptivesTableJscrl;
    private javax.swing.JButton fpCounsellingServicesBtn;
    private javax.swing.JLabel fpDateofLMP;
    private com.afrisoftech.lib.DatePicker fpDateofLMPdatePicker;
    private javax.swing.JLabel fpDischargeDurationLbl;
    private javax.swing.JTextField fpDischargeDurationTxt;
    private javax.swing.JLabel fpDischargeQtyLbl;
    private javax.swing.JTextField fpDischargeQtyTxt;
    private javax.swing.JButton fpEditDataBtn;
    private com.afrisoftech.lib.DatePicker fpEndDateLMPDatePicker;
    private javax.swing.JLabel fpEndDateLMPLbl;
    private javax.swing.JPanel fpExamsPanel;
    private javax.swing.JLabel fpFUPBeginDateLMPDatePickerLbl;
    private com.afrisoftech.lib.DatePicker fpFUPBeginDateLMPdatePicker;
    private com.afrisoftech.lib.DatePicker fpFUPContraDatePicker;
    private javax.swing.JLabel fpFUPContraLbl;
    private javax.swing.JLabel fpFUPContrareferralLbl;
    private javax.swing.JTextField fpFUPContrareferralTxt;
    private javax.swing.JLabel fpFUPDateofLMPLbl;
    private com.afrisoftech.lib.DatePicker fpFUPDateofLMPdatePicker;
    private com.afrisoftech.lib.DatePicker fpFUPEndDateLMPDatePicker;
    private javax.swing.JLabel fpFUPEndDateLMPLbl;
    private javax.swing.JComboBox fpFUPLMPRegularCmbx;
    private javax.swing.JLabel fpFUPLMPRegularLbl;
    private javax.swing.JComboBox fpFUPQtyofLMPCmbx;
    private javax.swing.JLabel fpFUPQtyofLMPLbl;
    private javax.swing.JComboBox fpGynaDischargeCmbx;
    private javax.swing.JLabel fpGynaDischargeLbl;
    private javax.swing.JComboBox fpHeartConditionCmbx;
    private javax.swing.JLabel fpHeartConditionLbl;
    private javax.swing.JLabel fpHeightLbl;
    private javax.swing.JTextField fpHeightTxt;
    private javax.swing.JLabel fpHusbandSTPComplainLbl;
    private javax.swing.JTextField fpHusbandSTPComplainTxt;
    private javax.swing.JLabel fpIUDFollowupDateLbl;
    private com.afrisoftech.lib.DatePicker fpIUDFollowupDatePicker;
    private javax.swing.JComboBox fpIUDInsertedCmbx;
    private javax.swing.JLabel fpIUDInsertedLbl;
    private javax.swing.JLabel fpIUDRecommedationLbl;
    private javax.swing.JLabel fpIUDReferralLbl;
    private javax.swing.JTextField fpIUDReferralTxt;
    private javax.swing.JTextField fpIUDRemarksTxt;
    private javax.swing.JComboBox fpLMPRegularCmbx;
    private javax.swing.JLabel fpLMPRegularLbl;
    private javax.swing.JLabel fpLmpCommentsLbl;
    private javax.swing.JTextField fpLmpCommentsTxt;
    private javax.swing.JComboBox fpMaritalStatusCmbx;
    private javax.swing.JLabel fpMaritalStatusLbl;
    private javax.swing.JScrollPane fpMedicalHistJscrl;
    private javax.swing.JTable fpMedicalHistTable;
    private javax.swing.JPanel fpMedicalHistoryPanel;
    private javax.swing.JPanel fpMenstrualGaenaPanel;
    private javax.swing.JPanel fpOtherInfoPanel;
    private javax.swing.JPanel fpPelvicExamPanel;
    private javax.swing.JPanel fpPhysicalExamPanel;
    private javax.swing.JComboBox fpQtyofLMPCmbx;
    private javax.swing.JLabel fpQtyofLMPLbl;
    private javax.swing.JLabel fpRHSDiscontinuationLbl;
    private javax.swing.JTextField fpReasonforDiscFPContracTxt;
    private javax.swing.JTextField fpReasonforNotInsertingIUDTxt;
    private javax.swing.JLabel fpReasonfornotInsertingIUDLbl;
    private javax.swing.JComboBox fpReceivedFPServicesCmbx;
    private javax.swing.JLabel fpReceivedFPServicesLbl;
    private javax.swing.JComboBox fpSTDConditionCmbx;
    private javax.swing.JLabel fpSTDConditionLbl;
    private javax.swing.JLabel fpSTDFollowupDateLbl;
    private com.afrisoftech.lib.DatePicker fpSTDFollowupDatePicker;
    private javax.swing.JComboBox fpSTDMgmntCmbx;
    private javax.swing.JLabel fpSTDMgmntLbl;
    private javax.swing.JLabel fpSTDOthersLbl;
    private javax.swing.JTextField fpSTDOthersTxt;
    private javax.swing.JLabel fpSTDReferralLbl;
    private javax.swing.JTextField fpSTDReferralTxt;
    private javax.swing.JComboBox fpSTDRelationtoSexCmbx;
    private javax.swing.JLabel fpSTDRelationtoSexLbl;
    private javax.swing.JScrollPane fpSTDTreatmentJscrl;
    private javax.swing.JLabel fpSTDTreatmentLbl;
    private javax.swing.JTextPane fpSTDTreatmentTxt;
    private javax.swing.JButton fpSaveContraceptivesBtn;
    private javax.swing.JButton fpSaveDataBtn;
    private javax.swing.JButton fpSaveGynaeDataBtn;
    private javax.swing.JButton fpSaveIUDFollowupBtn;
    private javax.swing.JButton fpSaveMedExamsBtn;
    private javax.swing.JButton fpSaveUltrasoundDataBtn;
    private javax.swing.JScrollPane fpServiceFUPJscrl;
    private javax.swing.JTable fpServiceFUPTable;
    private javax.swing.JPanel fpServiceManagementPanel;
    private javax.swing.JTabbedPane fpServiceManagementPanelTabbedPane;
    private javax.swing.JPanel fpServicesContraceptivesPanel;
    private javax.swing.JPanel fpServicesGynaeSTDPanel;
    private javax.swing.JPanel fpServicesIUDFollowupPanel;
    private javax.swing.JPanel fpServicesIUDPanel;
    private javax.swing.JLabel fpTempLbl;
    private javax.swing.JTextField fpTempTxt;
    private javax.swing.JLabel fpTreatmentLbl;
    private javax.swing.JTextField fpTreatmentTxt;
    private javax.swing.JLabel fpTypeofIUDLbl;
    private javax.swing.JLabel fpWeightLbl;
    private javax.swing.JTextField fpWeightTxt;
    private javax.swing.JComboBox fptypeofIUDCmbx;
    private javax.swing.JButton gaenaDataBtn;
    private javax.swing.JTable geExamsTable;
    private javax.swing.JButton geSaveBioDataBtn;
    private javax.swing.JPanel generalExamServices;
    private javax.swing.JTextField gravidaTxt;
    private javax.swing.JComboBox growthIndicatorCmbx;
    private javax.swing.JLabel growthIndicatorLbl;
    private javax.swing.JComboBox healthCentreBranchCmbx;
    private javax.swing.JComboBox healthCentreBranchCmbx1;
    private javax.swing.JLabel healthCentreLbl;
    private javax.swing.JTextField heightTxt;
    private javax.swing.JButton histClearEntriesBtn;
    private javax.swing.JButton histCloseFormBtn;
    private javax.swing.JButton histEditDataBtn;
    private javax.swing.JButton histSaveDataBtn;
    private javax.swing.JPanel historyPanel;
    private javax.swing.JLabel howclientKnewcentreLbl;
    private javax.swing.JLabel husbandBloodGroupLbl;
    private javax.swing.JLabel husbandLbl;
    private javax.swing.JTextField husbandNameTxt;
    private javax.swing.JLabel husbandOccupationLabl;
    private javax.swing.JTextField husbandTelNoTxt;
    private com.afrisoftech.lib.DatePicker husbanddateofBirthdatePicker;
    private javax.swing.JLabel husbandtelNoLbl;
    private javax.swing.JTextField hyperTxt;
    private javax.swing.JTextField hyperTxt1;
    private javax.swing.JTextField hyperTxt2;
    private javax.swing.JLabel indicatorAgeLbl;
    private javax.swing.JTextField indicatorAgeTxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox12;
    private javax.swing.JCheckBox jCheckBox13;
    private javax.swing.JCheckBox jCheckBox14;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel422;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField23;
    private javax.swing.JTextField jTextField24;
    private javax.swing.JTextField jTextField25;
    private javax.swing.JTextField jTextField26;
    private javax.swing.JTextField jTextField27;
    private javax.swing.JTextField jTextField28;
    private javax.swing.JTextField jTextField29;
    private javax.swing.JTextField jTextField30;
    private javax.swing.JTextField jTextField82;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JPanel labBodyPanel;
    private javax.swing.JPanel labButtonPanel;
    private javax.swing.JLabel labButtonSpacerBtn;
    private javax.swing.JButton labCloseBtn;
    private javax.swing.JLabel labExamLbl;
    private javax.swing.JComboBox labExamTaken;
    private javax.swing.JPanel labHeaderPanel;
    private javax.swing.JTextArea labRemarksTxt;
    private javax.swing.JPanel labServicesPanel;
    private com.afrisoftech.lib.DatePicker labTestDatePicker;
    private javax.swing.JLabel labTestDatePickerLbl;
    private javax.swing.JComboBox labtestCmbx;
    private javax.swing.JLabel labtestLbl;
    private javax.swing.JLabel lastNameLbl;
    private javax.swing.JTextField lastnameTxt;
    private com.afrisoftech.lib.DatePicker lmpDatePicker;
    private javax.swing.JTable lmpTable;
    private javax.swing.JPanel mammographyPanel;
    private javax.swing.JLabel middleNameLbl;
    private javax.swing.JTextField middleNameTxt;
    private javax.swing.JLabel miscarriagesLbl;
    private javax.swing.JTextField miscarriagesTxt;
    private javax.swing.JPanel mmButtonPanel;
    private javax.swing.JButton mmClearEntriesBtn;
    private javax.swing.JLabel mmClientDOBLbl;
    private javax.swing.JButton mmCloseFormBtn;
    private com.afrisoftech.lib.DatePicker mmDOBdatePicker;
    private javax.swing.JButton mmEditDataBtn;
    private javax.swing.JPanel mmExamPanel;
    private javax.swing.JScrollPane mmExamsJscrl;
    private javax.swing.JTable mmExamsTable;
    private javax.swing.JCheckBox mmFamilyAffectedChkbx;
    private javax.swing.JPanel mmGenDataPanel;
    private javax.swing.JCheckBox mmHormonalTherapyChkbx;
    private javax.swing.JCheckBox mmMaritalStatus;
    private javax.swing.JLabel mmNoofAbortionsLbl;
    private javax.swing.JTextField mmNoofAbortionsTxt;
    private javax.swing.JTextField mmNoofChildTxt;
    private javax.swing.JLabel mmNoofPregLbl;
    private javax.swing.JTextField mmNoofPregTxt;
    private javax.swing.JLabel mmNoofchildLbl;
    private javax.swing.JComboBox mmOccupationCmbx;
    private javax.swing.JLabel mmOccupationLbl;
    private javax.swing.JLabel mmPlaceofPrevMammogramLbl;
    private javax.swing.JTextField mmPlaceofPrevMammogramTxt;
    private javax.swing.JCheckBox mmPrevMammogramChkbx;
    private javax.swing.JComboBox mmPrevSurgeryCmbx;
    private javax.swing.JLabel mmPrevSurgeryLbl;
    private javax.swing.JScrollPane mmRemarksJscrl;
    private javax.swing.JLabel mmRemarksLbl;
    private javax.swing.JTextArea mmRemarksTxt;
    private javax.swing.JButton mmSaveDataBtn;
    private javax.swing.JLabel mmSpacerLbl;
    private javax.swing.JPanel motherInfoPanel;
    private javax.swing.JLabel motherLbl;
    private javax.swing.JTextField nameOfInst;
    private javax.swing.JLabel needsTreatMentPlanLbl;
    private javax.swing.JTextField nextAddTxt;
    private javax.swing.JTextField nextTxt;
    private javax.swing.JTextField noBrothersAliveTxt;
    private javax.swing.JLabel noSharingHseLbl;
    private javax.swing.JLabel noSharingHseLbl1;
    private javax.swing.JLabel noSharingHseLbl2;
    private javax.swing.JTextField noSistersAliveTxt;
    private javax.swing.JCheckBox ntAdditionalFood;
    private javax.swing.JCheckBox ntBreastFeedingChkbx;
    private javax.swing.ButtonGroup ntBreastFeedingbuttonGroup;
    private javax.swing.JComboBox ntMethodFeedingCmbx;
    private javax.swing.JLabel ntMethodFeedingLbl;
    private javax.swing.JLabel ntNoofMonthsBFLbl;
    private javax.swing.JTextField ntNoofMonthsBFTxt;
    private javax.swing.JCheckBox ntNotBreastFeedingChkbx;
    private javax.swing.JLabel ntNotBreastfeedingReasonLbl;
    private javax.swing.JTextField ntNotBreastfeedingReasonTxt;
    private javax.swing.JCheckBox ntStillBFChkbx;
    private javax.swing.JLabel ntTimeofAdditionalFoodLbl;
    private javax.swing.JTextField ntTimeofAdditionalFoodTxt;
    private javax.swing.JLabel ntTypeofAddFoodLbl;
    private javax.swing.JTextField ntTypeofAddFoodTxt;
    private javax.swing.JComboBox ntTypeofMilkCmbx;
    private javax.swing.JLabel ntTypeofMilkLbl;
    private javax.swing.JButton nutritionGrowthBtn;
    private javax.swing.JTable obstetricalTable;
    private javax.swing.JComboBox occupationCmbx;
    private javax.swing.JLabel occupationLbl;
    private javax.swing.JPanel otherInfoPanel;
    private javax.swing.JPanel otherInfoPanel1;
    private javax.swing.JScrollPane otherSpecificationsJscrl;
    private javax.swing.JLabel otherSpecificationsLbl;
    private javax.swing.JTextArea otherSpecificationsTxt;
    private javax.swing.JTextField parityTxt;
    private javax.swing.JPanel patientFilePanel;
    private javax.swing.JPanel peBioDataPanel;
    private javax.swing.JLabel peButtonSpacerLbl;
    private javax.swing.JPanel peButtonsPanel;
    private javax.swing.JButton peClearDataBtn;
    private javax.swing.JScrollPane peCommentsJscrl;
    private javax.swing.JLabel peCommentsLbl;
    private javax.swing.JTextArea peCommentsTxt;
    private com.afrisoftech.lib.DatePicker peDOBDatePicker;
    private javax.swing.JLabel peDOBLbl;
    private javax.swing.JButton peEditDataBtn;
    private javax.swing.JLabel peEthnicLbl;
    private javax.swing.JTextField peEthnicTxt;
    private javax.swing.JButton peExitFormBtn;
    private javax.swing.JLabel peFamilyMHLbl;
    private javax.swing.JTextField peFamilyMHTxt;
    private javax.swing.JScrollPane peInvestigationsJscrl;
    private javax.swing.JPanel peInvestigationsPanel;
    private javax.swing.JTable peInvestigationsTable;
    private javax.swing.JComboBox peMaritalStatusCmbx;
    private javax.swing.JLabel peMaritalStatusLbl;
    private javax.swing.JLabel peName;
    private javax.swing.JTextField peNameTxt;
    private javax.swing.JLabel pePastMHLbl;
    private javax.swing.JTextField pePastMHTxt;
    private javax.swing.JPanel pePhycicalAppearancePanel;
    private javax.swing.JLabel pePresentMHLbl;
    private javax.swing.JTextField pePresentMHTxt;
    private javax.swing.JLabel peQualificationLbl;
    private javax.swing.JTextField peQualificationTxt;
    private javax.swing.JButton peSaveDataBtn;
    private javax.swing.JLabel peSerialNumberLbl;
    private javax.swing.JTextField peSerialNumberTxt;
    private javax.swing.JLabel peVisitDateLbl;
    private javax.swing.JButton pelvicExamBtn;
    private javax.swing.JTable pelvicTable;
    private javax.swing.JScrollPane pelvicTableJscrl;
    private javax.swing.JLabel physicalAddressLbl;
    private javax.swing.JLabel physicalAddressLbl1;
    private javax.swing.JLabel physicalAddressLbl2;
    private javax.swing.ButtonGroup pnButtonGroup;
    private javax.swing.JLabel pnButtonSpacerLbl;
    private javax.swing.JPanel pnButtonsPanel;
    private javax.swing.JButton pnClearEntriesBtn;
    private javax.swing.JButton pnCloseFormBtn;
    private javax.swing.JButton pnEditDataBtn;
    private javax.swing.JTable pnFollowUpTable;
    private javax.swing.JScrollPane pnFollowupJscrl;
    private javax.swing.JPanel pnMotherExamPanel;
    private javax.swing.JLabel pnReferralLbl;
    private javax.swing.JLabel pnReferralReasonLbl;
    private javax.swing.JTextField pnReferralReasonTxt;
    private javax.swing.JTextField pnReferralTxt;
    private javax.swing.JButton pnSaveDataBtn;
    private javax.swing.ButtonGroup pnTypeofVisit;
    private javax.swing.JButton postFamilyInfoBtn;
    private javax.swing.JButton postFamilyInfoBtn1;
    private javax.swing.JButton postHusbandInfoBtn;
    private javax.swing.JPanel postNatalCare;
    private javax.swing.JLabel precsribedTreatMentLbl;
    private javax.swing.JTextArea precsribedTreatmentTxt;
    private javax.swing.JScrollPane pregHistoryTableJscl;
    private javax.swing.JScrollPane pregHistoryTableJscl1;
    private javax.swing.JScrollPane prescribedTreatmentJscrl;
    private javax.swing.JPanel previousHistoryPanel;
    private javax.swing.JPanel previousPregHistPanel;
    private javax.swing.JTable previousPregHistTbl;
    private javax.swing.JTable previousPregHistTbl1;
    private javax.swing.JPanel previousPregOtherInfoPanel;
    private javax.swing.JComboBox provinceCmbx;
    private javax.swing.JLabel provinceLbl;
    private javax.swing.JLabel reasonForVisitLbl;
    private javax.swing.JTextArea reasonforReferralTxt;
    private javax.swing.JTextArea recommedationsTxt;
    private javax.swing.JPanel recordDiseasesPanel;
    private javax.swing.JButton recordLaboratoryInfoBtn;
    private javax.swing.JComboBox referralFacilityCmbx;
    private javax.swing.JScrollPane referralJscrl;
    private javax.swing.JLabel referralTreatmentLbl;
    private javax.swing.JButton regClearFormBtn;
    private javax.swing.JButton regCloseFormBtn;
    private javax.swing.JButton regEditdataBtn;
    private javax.swing.JButton regSaveDataBtn;
    private javax.swing.JComboBox religionCmbx;
    private javax.swing.JLabel religionLbl;
    private javax.swing.JScrollPane remarksCommentJscrl;
    private javax.swing.JLabel remarksLbl;
    private javax.swing.JTextField retrievedNoTxt;
    private javax.swing.JLabel reviewDateLbl;
    private com.afrisoftech.lib.DatePicker reviewDatePicker;
    private javax.swing.JLabel reviewDatePickerLbl;
    private javax.swing.JLabel rhClientCardNoLbl;
    private javax.swing.JTextField rhClientCardNoTxt;
    private javax.swing.JLabel rhClientName;
    private javax.swing.JPanel rhCreateFilePanel;
    private com.afrisoftech.lib.DatePicker rhVisitDatePicker;
    private javax.swing.JLabel rhVisitdatePanel;
    private javax.swing.JLabel roomsLbl;
    private javax.swing.JLabel roomsLbl1;
    private javax.swing.JLabel roomsLbl2;
    private javax.swing.JButton routineBtn;
    private javax.swing.JButton saveIUDServicesBtn;
    private javax.swing.JButton saveMotherInfoBtn;
    private javax.swing.JButton saveObstetricalDataBtn;
    private javax.swing.JButton saveTreatmentdataBtn;
    private javax.swing.JButton searchButton22;
    private javax.swing.JButton searchField;
    private javax.swing.JButton searchField1;
    private javax.swing.JLabel secondaryInfectionLbl;
    private javax.swing.JTextField secondaryInfectionTxt;
    private javax.swing.JLabel serialNoLbl;
    private javax.swing.JTextField serialNoTxt;
    private javax.swing.JLabel spacerLbl;
    private javax.swing.JLabel streetLbl;
    private javax.swing.JLabel streetLbl1;
    private javax.swing.JLabel streetLbl2;
    private javax.swing.JLabel streetLbl3;
    private javax.swing.JTextField surgicalTxt;
    private javax.swing.JTextField surgicalTxt1;
    private javax.swing.JTextField surgicalTxt2;
    private javax.swing.JTextField telephoneTxt;
    private javax.swing.JCheckBox treatMentPlanNoChkbx;
    private javax.swing.JCheckBox treatMentPlanYesChkbx;
    private javax.swing.JPanel treatmentButtonPanel;
    private javax.swing.ButtonGroup treatmentPlanBtngrp;
    private javax.swing.JLabel treatmentReferralLbl;
    private javax.swing.JTextField tuberTxt;
    private javax.swing.JTextField tuberTxt1;
    private javax.swing.JTextField tuberTxt2;
    private javax.swing.JButton ultraSoundBtn;
    private javax.swing.JButton updateFPInfoBtn;
    private javax.swing.JLabel villageLbl;
    private javax.swing.JTextField villageTxt;
    private com.afrisoftech.lib.DatePicker visitDatePicker;
    private javax.swing.JLabel yearsOfNextPregLbl;
    // End of variables declaration//GEN-END:variables
}
