/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */
package com.afrisoftech.records;

import com.afrisoftech.hospital.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author  root
 */
public class InpatientNurseStationIntfr extends javax.swing.JInternalFrame {

    private javax.swing.JComboBox cmbox;
    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;

    public InpatientNurseStationIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();

//        WaitingPatientsThread waitingPatientsThread = new WaitingPatientsThread();

        //  waitingPatientsThread.start();

        this.setSize(com.afrisoftech.hospital.HospitalMain.saccopn.getSize());

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        try {
            crset1 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            crset4 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jSearchDialog2 = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        jTextField113 = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        jSearchTable2 = new javax.swing.JTable();
        jButton52 = new javax.swing.JButton();
        try {
            searchRowSet2 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField112 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton92 = new javax.swing.JButton();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        recordSignsBtn = new javax.swing.JButton();
        clearEntriesBtn = new javax.swing.JButton();
        closeFormBtn = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        helpBtn = new javax.swing.JButton();
        spacerLbl = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        patientListPn = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientListTbl = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        mainPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        patientNameTxt = new javax.swing.JTextField();
        temparatureLbl = new javax.swing.JLabel();
        genderLbl = new javax.swing.JLabel();
        systolicBPTxt = new javax.swing.JTextField();
        systolicBPLbl = new javax.swing.JLabel();
        diastolicBPLbl = new javax.swing.JLabel();
        diastolicBPTxt = new javax.swing.JTextField();
        temperatureTxt = new javax.swing.JTextField();
        patientNoSearchPanel = new javax.swing.JPanel();
        patientNumberTxt = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        ipopSelectorPanel = new javax.swing.JPanel();
        jCheckBox11 = new javax.swing.JCheckBox();
        jCheckBox21 = new javax.swing.JCheckBox();
        respiratoryRateTxt = new javax.swing.JTextField();
        pulseRateLbl = new javax.swing.JLabel();
        pulseRateTxt = new javax.swing.JTextField();
        respiratoryRateLbl = new javax.swing.JLabel();
        searchalgorithmPanel = new javax.swing.JPanel();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        genderPanel = new javax.swing.JPanel();
        maleRbtn = new javax.swing.JRadioButton();
        femaleBtn = new javax.swing.JRadioButton();
        remarksJscrl = new javax.swing.JScrollPane();
        remarksTxt = new javax.swing.JTextPane();
        jCheckBox1 = new javax.swing.JCheckBox();
        datePickerData = new com.afrisoftech.lib.DatePicker();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        patientListTbl1 = new javax.swing.JTable();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        recordSignsBtn1 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        crset1.setConnectionSource(pConnDB);

        crset4.setConnectionSource(pConnDB);

        jSearchDialog2.setModal(true);
        jSearchDialog2.setUndecorated(true);
        jSearchDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        jTextField113.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField113CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel2.add(jTextField113, gridBagConstraints);

        jSearchTable2.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable2.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable2MouseClicked(evt);
            }
        });
        jSearchScrollPane2.setViewportView(jSearchTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

        jButton52.setText("Cancel");
        jButton52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton52, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog2.getContentPane().add(jSearchPanel2, gridBagConstraints);

        searchRowSet2.setConnectionSource(pConnDB);

        jSearchDialog.setMinimumSize(new java.awt.Dimension(600, 200));
        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jTextField112.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField112CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(jTextField112, gridBagConstraints);

        jSearchScrollPane.setDoubleBuffered(true);

        jSearchTable.setDoubleBuffered(true);
        jSearchTable.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton92.setText("Cancel");
        jButton92.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton92ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton92, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Nurses Station Records");
        setToolTipText("Vital Signs");
        setFrameIcon(null);
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        recordSignsBtn.setMnemonic('O');
        recordSignsBtn.setText("Save Request(s)");
        recordSignsBtn.setToolTipText("Click here enter data");
        recordSignsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordSignsBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(recordSignsBtn, gridBagConstraints);

        clearEntriesBtn.setMnemonic('l');
        clearEntriesBtn.setText("Clear entries");
        clearEntriesBtn.setToolTipText("Click here to clear textfields");
        clearEntriesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearEntriesBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(clearEntriesBtn, gridBagConstraints);

        closeFormBtn.setMnemonic('C');
        closeFormBtn.setText("Close form");
        closeFormBtn.setToolTipText("Click here to close window");
        closeFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(closeFormBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jSeparator1, gridBagConstraints);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jLabel7, gridBagConstraints);

        jTextField6.setEditable(false);
        jTextField6.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField6.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jTextField6, gridBagConstraints);

        helpBtn.setMnemonic('h');
        helpBtn.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(helpBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 500.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(spacerLbl, gridBagConstraints);

        jSplitPane1.setDividerLocation(200);

        patientListPn.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        patientListTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Patient No.", "Patient Name"
            }
        ));
        patientListTbl.getTableHeader().setReorderingAllowed(false);
        patientListTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientListTblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(patientListTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientListPn.add(jScrollPane1, gridBagConstraints);

        jSplitPane1.setLeftComponent(patientListPn);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select patient here", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 0, 255))); // NOI18N
        jPanel1.setLayout(new java.awt.GridBagLayout());

        mainPanel.setLayout(new java.awt.GridBagLayout());

        jLabel9.setText("Patient Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        mainPanel.add(jLabel9, gridBagConstraints);

        jLabel1.setText("Patient Names");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        mainPanel.add(jLabel1, gridBagConstraints);

        patientNameTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        mainPanel.add(patientNameTxt, gridBagConstraints);

        temparatureLbl.setText("Temperature(deg. C.)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        mainPanel.add(temparatureLbl, gridBagConstraints);

        genderLbl.setText("Gender");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        mainPanel.add(genderLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        mainPanel.add(systolicBPTxt, gridBagConstraints);

        systolicBPLbl.setText("Systolic B.P.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        mainPanel.add(systolicBPLbl, gridBagConstraints);

        diastolicBPLbl.setText("Diastolic B.P.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        mainPanel.add(diastolicBPLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        mainPanel.add(diastolicBPTxt, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        mainPanel.add(temperatureTxt, gridBagConstraints);

        patientNoSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        patientNoSearchPanel.setMaximumSize(new java.awt.Dimension(80, 25));
        patientNoSearchPanel.setMinimumSize(new java.awt.Dimension(120, 24));
        patientNoSearchPanel.setPreferredSize(new java.awt.Dimension(120, 24));
        patientNoSearchPanel.setLayout(new java.awt.GridBagLayout());

        patientNumberTxt.setEditable(false);
        patientNumberTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientNumberTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientNoSearchPanel.add(patientNumberTxt, gridBagConstraints);

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton.setToolTipText("Search");
        searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton.setPreferredSize(new java.awt.Dimension(34, 20));
        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        patientNoSearchPanel.add(searchButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(patientNoSearchPanel, gridBagConstraints);

        ipopSelectorPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ipopSelectorPanel.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(jCheckBox11);
        jCheckBox11.setForeground(new java.awt.Color(51, 51, 255));
        jCheckBox11.setMnemonic('o');
        jCheckBox11.setText("Out Patients");
        jCheckBox11.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ipopSelectorPanel.add(jCheckBox11, gridBagConstraints);

        buttonGroup1.add(jCheckBox21);
        jCheckBox21.setForeground(new java.awt.Color(255, 0, 51));
        jCheckBox21.setMnemonic('i');
        jCheckBox21.setSelected(true);
        jCheckBox21.setText("InPatients");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ipopSelectorPanel.add(jCheckBox21, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        mainPanel.add(ipopSelectorPanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        mainPanel.add(respiratoryRateTxt, gridBagConstraints);

        pulseRateLbl.setText("Pulse Rate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        mainPanel.add(pulseRateLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        mainPanel.add(pulseRateTxt, gridBagConstraints);

        respiratoryRateLbl.setText("Respiratory Rate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        mainPanel.add(respiratoryRateLbl, gridBagConstraints);

        searchalgorithmPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        searchalgorithmPanel.setLayout(new java.awt.GridBagLayout());

        buttonGroup2.add(jCheckBox3);
        jCheckBox3.setSelected(true);
        jCheckBox3.setText("Search By  No.");
        searchalgorithmPanel.add(jCheckBox3, new java.awt.GridBagConstraints());

        buttonGroup2.add(jCheckBox4);
        jCheckBox4.setText("Search By Name");
        searchalgorithmPanel.add(jCheckBox4, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        mainPanel.add(searchalgorithmPanel, gridBagConstraints);

        buttonGroup5.add(maleRbtn);
        maleRbtn.setText("Male");
        maleRbtn.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        maleRbtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        genderPanel.add(maleRbtn);

        buttonGroup5.add(femaleBtn);
        femaleBtn.setText("Female");
        femaleBtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        genderPanel.add(femaleBtn);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(genderPanel, gridBagConstraints);

        remarksJscrl.setBorder(javax.swing.BorderFactory.createTitledBorder("Cardex/Notes"));
        remarksJscrl.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        remarksJscrl.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        remarksTxt.setToolTipText("Type comments and remarks here.");
        remarksJscrl.setViewportView(remarksTxt);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 100.0;
        mainPanel.add(remarksJscrl, gridBagConstraints);

        jCheckBox1.setForeground(new java.awt.Color(255, 0, 102));
        jCheckBox1.setText("Tick if emergency treatment required");
        jCheckBox1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        mainPanel.add(jCheckBox1, gridBagConstraints);

        datePickerData.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Set date of record", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 102, 102))); // NOI18N
        datePickerData.setMinimumSize(new java.awt.Dimension(120, 47));
        datePickerData.setPreferredSize(new java.awt.Dimension(120, 47));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(datePickerData, gridBagConstraints);

        jLabel2.setText("Visit Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        mainPanel.add(jLabel2, gridBagConstraints);

        jTextField1.setEditable(false);
        jTextField1.setMinimumSize(new java.awt.Dimension(60, 20));
        jTextField1.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.ABOVE_BASELINE_LEADING;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(jTextField1, gridBagConstraints);

        jLabel3.setText("Age");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        mainPanel.add(jLabel3, gridBagConstraints);

        jTextField2.setEditable(false);
        jTextField2.setMinimumSize(new java.awt.Dimension(60, 20));
        jTextField2.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        mainPanel.add(jTextField2, gridBagConstraints);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        patientListTbl1.setAutoCreateRowSorter(true);
        patientListTbl1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Service Requested", "Qty", "Amt", "Done ?", "GL Code"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        patientListTbl1.getTableHeader().setReorderingAllowed(false);
        patientListTbl1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientListTbl1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(patientListTbl1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(jScrollPane2, gridBagConstraints);

        recordSignsBtn1.setMnemonic('O');
        recordSignsBtn1.setText("Record vital signs");
        recordSignsBtn1.setToolTipText("Click here enter data");
        recordSignsBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordSignsBtn1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(recordSignsBtn1, gridBagConstraints);

        jButton1.setText("Patient File/Notes");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(jButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(mainPanel, gridBagConstraints);

        jSplitPane1.setRightComponent(jPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 100.0;
        getContentPane().add(jSplitPane1, gridBagConstraints);

        setBounds(0, 0, 843, 506);
    }// </editor-fold>//GEN-END:initComponents

    private void jSearchTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2MouseClicked

        for (int k = 0; k < patientListTbl1.getRowCount(); k++) {
            for (int r = 0; r < patientListTbl1.getColumnCount(); r++) {
                patientListTbl1.setValueAt(null, k, r);
            }
        }
        patientNameTxt.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
        patientNumberTxt.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0).toString());
        if (jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 2).toString().startsWith("M")) {
            maleRbtn.setSelected(true);
        } else {
            femaleBtn.setSelected(true);
        }
        jTextField2.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 3).toString());
        jTextField1.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 4).toString());

        try {
            int p = 0;
            java.sql.Statement stmtTable1r = connectDB.createStatement();

            java.sql.ResultSet rsetTable1r = stmtTable1r.executeQuery("SELECT "
                    + "service,quantity,amount,null::boolean as done, gl_code "
                    + "FROM hp_patient_billing WHERE patient_no = '" + patientNumberTxt.getText() + "'"
                    + "AND collected = false AND (revenue_code NOT ILIKE 'Lab%' OR revenue_code NOT ILIKE 'XR%') ORDER BY 1");


            while (rsetTable1r.next()) {

                patientListTbl1.setValueAt(rsetTable1r.getObject(1), p, 0);
                patientListTbl1.setValueAt(rsetTable1r.getObject(2), p, 1);
                patientListTbl1.setValueAt(rsetTable1r.getObject(3), p, 2);
                patientListTbl1.setValueAt(rsetTable1r.getObject(5), p, 4);
                // patientListTbl1.setValueAt(rsetTable1r.getObject(4), p, 3);
                // patientListTbl1.setValueAt(rsetTable1r.getObject(5), p, 4);

                p++;

            }
        } catch (java.sql.SQLException ex) {
            ex.printStackTrace();
        }

        jSearchDialog2.dispose(); // Add your handling code here:
    }//GEN-LAST:event_jSearchTable2MouseClicked

    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed
        this.jSearchDialog2.dispose();  // Add your handling code here:
    }//GEN-LAST:event_jButton52ActionPerformed

    private void jTextField113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField113CaretUpdate
        if (this.jCheckBox11.isSelected() && this.jCheckBox3.isSelected()) {

            if (jTextField113.getCaretPosition() < 3) {
                System.out.println("Nothing");
            } else {
                jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, year_of_birth, residence, sex from hp_patient_register where patient_no ILIKE '%" + jTextField113.getText() + "%' and last_visit > current_date - 2 ORDER BY second_name"));// and last_visit > current_date - 5 order by second_name"));

                jSearchTable2.setShowHorizontalLines(false);
                jSearchScrollPane2.setViewportView(jSearchTable2);

            }
        } else {
            if (this.jCheckBox11.isSelected() && this.jCheckBox4.isSelected()) {
                if (jTextField113.getCaretPosition() < 3) {
                    System.out.println("Nothing");
                } else {
                    jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, year_of_birth, residence, sex from hp_patient_register where second_name||' '||first_name||' '||last_name ILIKE '%" + jTextField113.getText() + "%' and last_visit > current_date - 2 order by second_name"));

                    jSearchTable2.setShowHorizontalLines(false);
                    jSearchScrollPane2.setViewportView(jSearchTable2);

                }
            }
        }
        // }else{
        if (this.jCheckBox21.isSelected() && this.jCheckBox3.isSelected()) {

            // if(this.jCheckBox21.isSelected()){
            //   if( jTextField113.getCaretPosition() > 3){f

            if (jTextField113.getCaretPosition() < 3) {
                System.out.println("Nothing");
            } else {
                jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, patient_name, gender,pat_age,visit_id FROM hp_admission WHERE patient_no ILIKE '%" + jTextField113.getText() + "%' AND check_out = false ORDER BY 1,5"));

                jSearchTable2.setShowHorizontalLines(false);
                jSearchScrollPane2.setViewportView(jSearchTable2);


            }
        } else {
            if (jTextField113.getCaretPosition() < 3) {
                System.out.println("Nothing");
            } else {
                if (this.jCheckBox21.isSelected() && this.jCheckBox4.isSelected()) {
                    jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, patient_name, gender,pat_age,visit_id FROM hp_admission WHERE patient_name ILIKE '%" + jTextField113.getText() + "%' AND check_out = false ORDER BY 2,5"));

                    jSearchTable2.setShowHorizontalLines(false);
                    jSearchScrollPane2.setViewportView(jSearchTable2);

                }
            }
        }




        // Add your handling code here:
    }//GEN-LAST:event_jTextField113CaretUpdate

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchButtonClicked2();        // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed
    private void searchButtonClicked2() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.patientNameTxt.getLocationOnScreen();

        jSearchDialog2.setSize(400, 200);

        jSearchDialog2.setLocation(point);

        jSearchDialog2.setVisible(true);



    }
    private void closeFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFormBtnActionPerformed
        this.setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_closeFormBtnActionPerformed
    private void cmboxActionPerformed(java.awt.event.ActionEvent evt) {
    }

    private void clearEntriesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearEntriesBtnActionPerformed

        this.refreshFields();

// Add your handling code here:
    }//GEN-LAST:event_clearEntriesBtnActionPerformed

    private void recordSignsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordSignsBtnActionPerformed

        java.util.Calendar calendar = java.util.Calendar.getInstance();

        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

        System.out.println(datenowSql1.toString());

        java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

        System.out.println(datenowSql.toString());

        java.lang.String tempRecordNo = com.afrisoftech.lib.DateLables.getDateLabel();

        String user = null;
        String pmtct = null;
        String Categ = null;
        String patCount = null;
        String Grp = null;
        String Rhs = null;
        String Gend = null;
        String transNo = null;
        String User = null;
        String patientAcc = null;
        String cardNo = null;
        String AccDesc = null;
        String scheme = null;
        String cardName = null;
        String isurer = null;
        String expDate = null;
        String code = null;
        String glAcc = null;
        //String Categ = null;
        String Sex = null;
        String payMode = null;
        String staffNo = null;
        String actCode = null;
        String glacc = null;
        double amount = 0.00;
        java.util.Date admDate = null;
        String visitid = "-";


        if (this.jCheckBox11.isSelected()) {
            Categ = jCheckBox11.getText();
        } else {
            Categ = jCheckBox21.getText();
        }
        /*
        if (this.jCheckBox5.isSelected()) {
        pmtct = jCheckBox5.getText();
        } else {
        pmtct = jCheckBox5.getText();
        }*/

        if (this.maleRbtn.isSelected()) {
            Gend = maleRbtn.getText();
        } else {
            Gend = femaleBtn.getText();
        }

        /*  if (this.bloodGroupARbtn.isSelected()) {
        Grp = bloodGroupARbtn.getText();
        } else {
        if (this.bloodGroupBRbtn.isSelected()) {
        Grp = bloodGroupBRbtn.getText();
        } else {
        if (this.bloodGroupORbtn.isSelected()) {
        Grp = bloodGroupARbtn.getText();
        } else {
        if (this.bloodGroupABRbtn.isSelected()) {
        Grp = bloodGroupABRbtn.getText();
        } else {
        Grp = bloodGroupUnknownRbtn.getText();
        }
        }
        }
        }
        
        if (this.rhesusPositiveRbtn.isSelected()) {
        Rhs = rhesusPositiveRbtn.getText();
        } else {
        if (this.rhesusNegativeRbtn.isSelected()) {
        Rhs = rhesusNegativeRbtn.getText();
        } else {
        Rhs = rhesusUnknownRbtn.getText();
        }
        }*/
        double wght = 0;
        double heights = 0;
        double rbs = 0;
        /*   if (this.weightTxt.getText().equalsIgnoreCase("")) {
        
        wght = 1;
        } else {
        wght = java.lang.Double.parseDouble(this.weightTxt.getText());
        }
        if (this.heightTxt.getText().equalsIgnoreCase("")) {
        heights = 1;
        
        } else {
        heights = java.lang.Double.parseDouble(this.heightTxt.getText());
        }
        
        if (this.rbsTxt.getText().equalsIgnoreCase("")) {
        rbs = 1;
        
        } else {
        rbs = java.lang.Double.parseDouble(this.rbsTxt.getText());
        }
         */
        java.sql.Savepoint registerSavePoint = null;
        try {
            connectDB.setAutoCommit(false);




            registerSavePoint = connectDB.setSavepoint("registration");

            java.sql.Statement stm12t = connectDB.createStatement();

            java.sql.Statement stm12 = connectDB.createStatement();
            // java.sql.Statement stm121 = connectDB.createStatement();
            java.sql.Statement stm1211 = connectDB.createStatement();
            java.sql.Statement stm122 = connectDB.createStatement();
            java.sql.Statement stm122x = connectDB.createStatement();
            java.sql.Statement stm1 = connectDB.createStatement();

            java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");


            while (rse12.next()) {

                patientAcc = rse12.getObject(1).toString();
                AccDesc = rse12.getObject(2).toString();
            }
            java.sql.Statement stm121q = connectDB.createStatement();
            for (int i = 0; i < patientListTbl1.getRowCount(); i++) {

                if (patientListTbl1.getModel().getValueAt(i, 3) != null) {

                    if (Boolean.valueOf(patientListTbl1.getModel().getValueAt(i, 3).toString()) == java.lang.Boolean.TRUE) {


                        java.sql.ResultSet rse121X = stm122.executeQuery("SELECT DISTINCT "
                                + "'" + patientListTbl1.getValueAt(i, 4) + "',"
                                + "main_service,'" + patientListTbl1.getValueAt(i, 2) + "' "
                                + "FROM pb_operating_parameters WHERE gl_account ilike "
                                + "'" + patientListTbl1.getValueAt(i, 4) + "'");

                        while (rse121X.next()) {

                            actCode = rse121X.getObject(1).toString();
                            glAcc = rse121X.getObject(2).toString();
                            amount = rse121X.getDouble(3);
                        }
                        /* java.sql.PreparedStatement updPstmt = connectDB.prepareStatement("UPDATE hp_patient_register set waiting_patient = false WHERE patient_no = ?");
                        updPstmt.setString(1, patientNumberTxt.getText());
                        updPstmt.executeUpdate();*/
                        java.sql.Statement pst = connectDB.createStatement();
                        java.sql.ResultSet rstt = pst.executeQuery("select nextval('transaction_no_seq'),current_user");

                        while (rstt.next()) {
                            rstt.getObject(1).toString();
                            transNo = rstt.getObject(1).toString();
                            user = rstt.getObject(2).toString();
                        }
                        java.sql.Statement stm12n = connectDB.createStatement();
                        java.sql.ResultSet rse12n = stm12n.executeQuery("SELECT date_admitted,mode_of_payment FROM hp_admission WHERE visit_id ='" + jTextField1.getText() + "'");
                        while (rse12n.next()) {
                            admDate = rse12n.getDate(1);
                            payMode = rse12n.getString(2);
                        }
                        java.sql.Statement ps11w1 = connectDB.createStatement();
                        java.sql.ResultSet rst11w1 = ps11w1.executeQuery("select visit_id from hp_admission where  visit_id ='" + jTextField1.getText() + "'");
                        while (rst11w1.next()) {

                            visitid = rst11w1.getObject(1).toString();
                        }


                        java.sql.PreparedStatement pstmtpc = connectDB.prepareStatement("INSERT INTO hp_patient_card("
                                + "patient_no, service, patient_category, payment_mode, reference, "
                                + "card_no, scheme, card_name, isurer, expiry_date, doctor, debit, "
                                + "credit, date, activity_code, main_service, dosage, scheme_staff_no,"
                                + "paid, transaction_type, collected, description, invoice_no, user_name,"
                                + "cash_point, ip_no, billing_time, visit_id)"
                                + "VALUES (?, ?, ?, ?, ?, "
                                + "?, ?, ?, ?, ?, ?, ?, "
                                + "?, ?, ?, ?, ?, ?, "
                                + "?, ?, ?, ?, ?, ?, "
                                + "?, ?, ?, ?)");

                        pstmtpc.setString(1, patientNumberTxt.getText());
                        pstmtpc.setObject(2, patientListTbl1.getValueAt(i, 0).toString());
                        pstmtpc.setString(3, "General");
                        pstmtpc.setString(4, payMode);
                        pstmtpc.setString(5, transNo);
                        pstmtpc.setString(7, scheme);
                        pstmtpc.setString(6, cardNo);
                        pstmtpc.setString(8, cardName);
                        pstmtpc.setString(9, isurer);
                        pstmtpc.setDate(10, null);
                        pstmtpc.setString(11, "");
                        pstmtpc.setDouble(12, amount);
                        pstmtpc.setDouble(13, 0.00);
                        pstmtpc.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePickerData.getDate()));
                        pstmtpc.setObject(15, patientAcc);
                        pstmtpc.setString(16, glAcc);
                        pstmtpc.setDouble(17, 1);
                        pstmtpc.setObject(18, staffNo);
                        pstmtpc.setBoolean(19, false);
                        pstmtpc.setString(20, "Billing");
                        pstmtpc.setBoolean(21, false);
                        pstmtpc.setString(22, AccDesc);
                        pstmtpc.setString(23, jTextField1.getText());
                        pstmtpc.setString(24, user);
                        pstmtpc.setString(25, transNo);
                        pstmtpc.setString(26, "IP");
                        pstmtpc.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                        pstmtpc.setString(28, visitid);
                        pstmtpc.executeUpdate();


                        java.sql.PreparedStatement pstmtld = connectDB.prepareStatement("INSERT INTO ac_ledger("
                                + "activity_code, description, patient_no, dealer, reason, voucher_no, "
                                + "payee, drawer, drawer_bank, gl_code, cheque_no, receipt_no, journal_no,"
                                + "service_type, transaction_type, debit, credit, date, transaction_no, "
                                + "closed, reconciled, withdrawn, user_name)"
                                + "VALUES (?, ?, ?, ?, ?, ?, "
                                + "?, ?, ?, ?, ?, ?, ?, "
                                + "?, ?, ?, ?, ?, ?, "
                                + "?, ?, ?, ?)");


                        pstmtld.setObject(1, actCode);
                        pstmtld.setString(2, glAcc);
                        pstmtld.setString(3, patientNumberTxt.getText());
                        pstmtld.setString(4, jTextField1.getText());
                        pstmtld.setString(5, "");
                        pstmtld.setString(6, cardNo);
                        pstmtld.setString(7, cardName);
                        pstmtld.setString(8, "IP");
                        pstmtld.setString(9, jTextField1.getText());
                        pstmtld.setString(10, payMode);
                        pstmtld.setString(11, "");
                        pstmtld.setString(12, "");
                        pstmtld.setString(13, "");
                        pstmtld.setString(14, patientListTbl1.getValueAt(i, 0).toString());
                        pstmtld.setString(15, "Revenue");
                        pstmtld.setDouble(16, 0.00);
                        pstmtld.setDouble(17, amount);
                        pstmtld.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePickerData.getDate()));
                        pstmtld.setString(19, transNo);
                        pstmtld.setBoolean(20, false);
                        pstmtld.setBoolean(21, false);
                        pstmtld.setBoolean(22, false);
                        pstmtld.setString(23, user);
                        pstmtld.executeUpdate();
                    }
                }
            }

            connectDB.commit();
            connectDB.setAutoCommit(true);
            javax.swing.JOptionPane.showMessageDialog(this, "Patient clinical record saved successfully", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            ////       com.afrisoftech.txtreports.RecordTxt policy = new com.afrisoftech.txtreports.RecordTxt(connectDB, Patcount);

            // this.refreshFields();
            //  jComboBox2.setSelectedItem(null);
        } catch (java.lang.Exception sq) {
            sq.printStackTrace();
            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }   // Add your handling code here:
    }//GEN-LAST:event_recordSignsBtnActionPerformed

    private void patientListTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientListTblMouseClicked

        patientNumberTxt.setText(patientListTbl.getValueAt(patientListTbl.getSelectedRow(), 0).toString());
        patientNameTxt.setText(patientListTbl.getValueAt(patientListTbl.getSelectedRow(), 1).toString());



        // TODO add your handling code here:
    }//GEN-LAST:event_patientListTblMouseClicked

private void patientListTbl1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientListTbl1MouseClicked
    if (patientListTbl1.getSelectedColumn() == 0) {

        this.cmboxMouseClicked();
    }// TODO add your handling code here:
}//GEN-LAST:event_patientListTbl1MouseClicked
    private void cmboxMouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = this.jScrollPane2.getLocationOnScreen();
        jSearchDialog.setSize(600, 200);
        jSearchDialog.setLocation(point);
        jSearchDialog.setVisible(true);
    }
private void patientNumberTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientNumberTxtActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_patientNumberTxtActionPerformed

private void jTextField112CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField112CaretUpdate
    if (jTextField112.getCaretPosition() < 2) {

        System.out.println("Nothing");
    } else {
        jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select service_type,rate as price,gl_account as gl_code FROM pb_operating_parameters WHERE service_type ILIKE '%" + jTextField112.getText() + "%' AND (main_service NOT ILIKE 'x%' OR main_service NOT ILIKE 'L%') ORDER BY service_type LIMIT 30"));

        jSearchScrollPane.setViewportView(jSearchTable);


    }


    // Add your handling code here:
}//GEN-LAST:event_jTextField112CaretUpdate

private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
    patientListTbl1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0), patientListTbl1.getSelectedRow(), 0);
    patientListTbl1.setValueAt(1, patientListTbl1.getSelectedRow(), 1);
    patientListTbl1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1), patientListTbl1.getSelectedRow(), 2);
    patientListTbl1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 2), patientListTbl1.getSelectedRow(), 4);

    double floatCol2 = java.lang.Double.parseDouble(patientListTbl1.getValueAt(patientListTbl1.getSelectedRow(), 1).toString());

    double floatCol3 = java.lang.Double.parseDouble(patientListTbl1.getValueAt(patientListTbl1.getSelectedRow(), 2).toString());

    double resVal = floatCol2 * floatCol3;


    //patientListTbl1.setValueAt(new java.lang.Float(resVal), patientListTbl1.getSelectedRow(), 3);
    double resFloat = 0.00;


    /*for (int i = 0; i < patientListTbl1.getRowCount(); i++) {
    
    if (patientListTbl1.getValueAt(i, 0) != null) {//toString().compareToIgnoreCase(null) {
    
    resFloat = resFloat + Double.parseDouble(patientListTbl1.getValueAt(i, 3).toString());
    
    
    jTextField3.setText(java.lang.String.valueOf(resFloat));
    
    }
    }*/


    // resFloat = resVal+resFloat + Double.parseDouble(jTable1.getValueAt( jTable1.getSelectedRow(), 3).toString());



    jSearchDialog.dispose();   // Add your handling code here:
}//GEN-LAST:event_jSearchTableMouseClicked

private void jButton92ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton92ActionPerformed
    jSearchDialog.dispose(); // Add your handling code here:
}//GEN-LAST:event_jButton92ActionPerformed

private void recordSignsBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordSignsBtn1ActionPerformed

    java.util.Calendar calendar = java.util.Calendar.getInstance();

    long dateNow = calendar.getTimeInMillis();

    java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

    System.out.println(datenowSql1.toString());

    java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

    System.out.println(datenowSql.toString());

    java.lang.String tempRecordNo = com.afrisoftech.lib.DateLables.getDateLabel();

    String user = null;
    String pmtct = null;
    String Categ = null;
    String patCount = null;
    String Grp = "";
    String Rhs = "";
    String Gend = null;
    String transNo = null;
    String User = null;
    String patientAcc = null;
    String cardNo = null;
    String AccDesc = null;
    String scheme = null;
    String cardName = null;
    String isurer = null;
    String expDate = null;
    String code = null;
    String glAcc = null;
    //String Categ = null;
    String Sex = null;
    String payMode = null;
    String staffNo = null;
    String actCode = null;
    String glacc = null;
    double amount = 0.00;
    java.util.Date admDate = null;
    String visitid = "-";


    if (this.jCheckBox11.isSelected()) {
        Categ = jCheckBox11.getText();
    } else {
        Categ = jCheckBox21.getText();
    }
    /*
    if (this.jCheckBox5.isSelected()) {
    pmtct = jCheckBox5.getText();
    } else {
    pmtct = jCheckBox5.getText();
    }*/

    if (this.maleRbtn.isSelected()) {
        Gend = maleRbtn.getText();
    } else {
        Gend = femaleBtn.getText();
    }

    /*  if (this.bloodGroupARbtn.isSelected()) {
    Grp = bloodGroupARbtn.getText();
    } else {
    if (this.bloodGroupBRbtn.isSelected()) {
    Grp = bloodGroupBRbtn.getText();
    } else {
    if (this.bloodGroupORbtn.isSelected()) {
    Grp = bloodGroupARbtn.getText();
    } else {
    if (this.bloodGroupABRbtn.isSelected()) {
    Grp = bloodGroupABRbtn.getText();
    } else {
    Grp = bloodGroupUnknownRbtn.getText();
    }
    }
    }
    }
    
    if (this.rhesusPositiveRbtn.isSelected()) {
    Rhs = rhesusPositiveRbtn.getText();
    } else {
    if (this.rhesusNegativeRbtn.isSelected()) {
    Rhs = rhesusNegativeRbtn.getText();
    } else {
    Rhs = rhesusUnknownRbtn.getText();
    }
    }*/
    double wght = 0;
    double heights = 0;
    double rbs = 0;
    /*   if (this.weightTxt.getText().equalsIgnoreCase("")) {
    
    wght = 1;
    } else {
    wght = java.lang.Double.parseDouble(this.weightTxt.getText());
    }
    if (this.heightTxt.getText().equalsIgnoreCase("")) {
    heights = 1;
    
    } else {
    heights = java.lang.Double.parseDouble(this.heightTxt.getText());
    }
    
    if (this.rbsTxt.getText().equalsIgnoreCase("")) {
    rbs = 1;
    
    } else {
    rbs = java.lang.Double.parseDouble(this.rbsTxt.getText());
    }
     */
    java.sql.Savepoint registerSavePoint = null;
    try {
        connectDB.setAutoCommit(false);


        java.sql.Statement stm12t = connectDB.createStatement();

        java.sql.Statement stm12 = connectDB.createStatement();
        // java.sql.Statement stm121 = connectDB.createStatement();
        java.sql.Statement stm1211 = connectDB.createStatement();
        java.sql.Statement stm122 = connectDB.createStatement();
        java.sql.Statement stm122x = connectDB.createStatement();
        java.sql.Statement stm1 = connectDB.createStatement();

        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO hp_signs_record("
                + "patient_no, patient_name, gender, weight, height, diastolic, "
                + "pulse, systolic, date, temp, resp,"
                + "rbs, blood_group, rhesus, bmi,comments,record_id)"
                + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

        pstmt.setString(1, patientNumberTxt.getText());
        pstmt.setString(2, patientNameTxt.getText());
        if (maleRbtn.isSelected()) {
            pstmt.setString(3, "Male");
        } else {
            pstmt.setString(3, "Female");
        }
        pstmt.setDouble(4, wght);
        pstmt.setDouble(5, heights);
        pstmt.setDouble(6, java.lang.Double.parseDouble(this.diastolicBPTxt.getText()));
        pstmt.setDouble(7, java.lang.Double.parseDouble(this.pulseRateTxt.getText()));
        pstmt.setDouble(8, java.lang.Double.parseDouble(this.systolicBPTxt.getText()));
        pstmt.setDate(9, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePickerData.getDate()));
        pstmt.setDouble(10, java.lang.Double.parseDouble(this.temperatureTxt.getText()));
        pstmt.setDouble(11, java.lang.Double.parseDouble(this.respiratoryRateTxt.getText()));
        pstmt.setDouble(12, rbs);
        pstmt.setString(13, Grp);
        pstmt.setString(14, Rhs);
        pstmt.setDouble(15, 0);
        pstmt.setString(16, remarksTxt.getText());
        pstmt.setString(17, tempRecordNo);
        //pstmt.setString(18, pmtct);
        pstmt.executeUpdate();


        java.sql.Statement ps = connectDB.createStatement();
        java.sql.ResultSet rst = ps.executeQuery("select lpad(nextval('rec_no_seq')::text, 9, 0::text)");
        while (rst.next()) {
            rst.getObject(1).toString();

            patCount = rst.getObject(1).toString();
        }

        java.sql.PreparedStatement updatePstmt = connectDB.prepareStatement("UPDATE hp_signs_record SET record_id = ? WHERE patient_no = ? AND date = ?");

        updatePstmt.setString(1, patCount);
        updatePstmt.setString(2, this.patientNumberTxt.getText());
        updatePstmt.setDate(3, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePickerData.getDate()));

        updatePstmt.executeUpdate();

        connectDB.commit();
        connectDB.setAutoCommit(true);
        javax.swing.JOptionPane.showMessageDialog(this, "Data Saved Successfully", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

    } catch (java.lang.Exception sq) {
        sq.printStackTrace();
        try {
            connectDB.rollback();
        } catch (java.sql.SQLException sql) {
            javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
    // TODO add your handling code here:
}//GEN-LAST:event_recordSignsBtn1ActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    com.afrisoftech.laboratory.InPatientFilePdf policy = new com.afrisoftech.laboratory.InPatientFilePdf();

    policy.InPatientFilePdf(connectDB, datePickerData.getDate(), datePickerData.getDate(), patientNumberTxt.getText());

    // Add your handling code here:
}//GEN-LAST:event_jButton1ActionPerformed

    private void refreshFields() {
        jTextField1.setText("");
        patientNumberTxt.setText("");
        patientNameTxt.setText("");
        jTextField2.setText("");
        //rbsTxt.setText("");
        diastolicBPTxt.setText("");
        systolicBPTxt.setText("");
        respiratoryRateTxt.setText("");
        temperatureTxt.setText("");
        pulseRateTxt.setText("");
        patientListTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, first_name ||' '||second_name||' '||last_name AS patient_name FROM hp_patient_register WHERE waiting_patient = true AND last_visit = current_date"));
    }

    /*class WaitingPatientsThread extends Thread {
    
    public WaitingPatientsThread() {
    }
    
    public void run() {
    while (true) {
    patientListTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, first_name ||' '||second_name||' '||last_name AS patient_name FROM hp_patient_register WHERE waiting_patient = true and last_visit = current_date"));
    try {
    Thread.sleep(5000);
    } catch (InterruptedException ex) {
    Logger.getLogger(VitalSignRecIntfr.class.getName()).log(Level.SEVERE, null, ex);
    }
    }
    }
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.JButton clearEntriesBtn;
    private javax.swing.JButton closeFormBtn;
    private org.netbeans.lib.sql.NBCachedRowSet crset1;
    private org.netbeans.lib.sql.NBCachedRowSet crset4;
    private com.afrisoftech.lib.DatePicker datePickerData;
    private javax.swing.JLabel diastolicBPLbl;
    private javax.swing.JTextField diastolicBPTxt;
    private javax.swing.JRadioButton femaleBtn;
    private javax.swing.JLabel genderLbl;
    private javax.swing.JPanel genderPanel;
    private javax.swing.JButton helpBtn;
    private javax.swing.JPanel ipopSelectorPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton52;
    private javax.swing.JButton jButton92;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox21;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JDialog jSearchDialog2;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTable jSearchTable2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField112;
    private javax.swing.JTextField jTextField113;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JRadioButton maleRbtn;
    private javax.swing.JPanel patientListPn;
    private javax.swing.JTable patientListTbl;
    private javax.swing.JTable patientListTbl1;
    private javax.swing.JTextField patientNameTxt;
    private javax.swing.JPanel patientNoSearchPanel;
    private javax.swing.JTextField patientNumberTxt;
    private javax.swing.JLabel pulseRateLbl;
    private javax.swing.JTextField pulseRateTxt;
    private javax.swing.JButton recordSignsBtn;
    private javax.swing.JButton recordSignsBtn1;
    private javax.swing.JScrollPane remarksJscrl;
    private javax.swing.JTextPane remarksTxt;
    private javax.swing.JLabel respiratoryRateLbl;
    private javax.swing.JTextField respiratoryRateTxt;
    private javax.swing.JButton searchButton;
    private org.netbeans.lib.sql.NBCachedRowSet searchRowSet2;
    private javax.swing.JPanel searchalgorithmPanel;
    private javax.swing.JLabel spacerLbl;
    private javax.swing.JLabel systolicBPLbl;
    private javax.swing.JTextField systolicBPTxt;
    private javax.swing.JLabel temparatureLbl;
    private javax.swing.JTextField temperatureTxt;
    // End of variables declaration//GEN-END:variables
}
