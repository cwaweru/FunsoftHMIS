/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.afrisoftech.hospinventory;

import com.afrisoftech.lib.GetItemInfo;
import com.afrisoftech.lib.SQLDateFormat;
import java.awt.Color;
import java.sql.Date;
import java.sql.SQLException;
import org.jdesktop.swingx.decorator.ColorHighlighter;
//import org.openide.util.Exceptions;

/**
 *
 * @author Charles Waweru <cwaweru@systempartners.biz>
 */
public class StoresDashboardReportsIntfr extends javax.swing.JInternalFrame {

    java.sql.Connection connectDB = null;

    /**
     * Creates new form StoresLedgerReportsIntfr
     */
    public StoresDashboardReportsIntfr(java.sql.Connection connDB) {
        connectDB = connDB;
        initComponents();

        java.util.Vector<org.jdesktop.swingx.decorator.Highlighter> tableHighlighters = new java.util.Vector<org.jdesktop.swingx.decorator.Highlighter>(1, 1);
        //org.jdesktop.swingx.decorator.Highlighter tableHighlighterArray[] ;// = new org.jdesktop.swingx.decorator.Highlighter()[];
        com.afrisoftech.dbadmin.JXTable predicateTable = (com.afrisoftech.dbadmin.JXTable) abcAnalysisTable;
        org.jdesktop.swingx.decorator.PatternPredicate patternPredicate2 = new org.jdesktop.swingx.decorator.PatternPredicate("C", 2);
        ColorHighlighter cyan = new ColorHighlighter(patternPredicate2, Color.CYAN, null, Color.CYAN, null);
        tableHighlighters.add(cyan);
        org.jdesktop.swingx.decorator.PatternPredicate patternPredicate3 = new org.jdesktop.swingx.decorator.PatternPredicate("B", 2);
        ColorHighlighter orange = new ColorHighlighter(patternPredicate3, Color.ORANGE, null, Color.ORANGE, null);
        tableHighlighters.add(orange);
        org.jdesktop.swingx.decorator.PatternPredicate patternPredicate4 = new org.jdesktop.swingx.decorator.PatternPredicate("A", 2);
        ColorHighlighter green = new ColorHighlighter(patternPredicate4, Color.GREEN, null, Color.GREEN, null);
        tableHighlighters.add(green);
        ColorHighlighter tableHighlightersArray[] = new ColorHighlighter[]{cyan, green, orange};
        predicateTable.setHighlighterPipeline(predicateTable, tableHighlightersArray);

        java.util.Vector<org.jdesktop.swingx.decorator.Highlighter> tableHighlighters1 = new java.util.Vector<org.jdesktop.swingx.decorator.Highlighter>(1, 1);
        //org.jdesktop.swingx.decorator.Highlighter tableHighlighterArray[] ;// = new org.jdesktop.swingx.decorator.Highlighter()[];
        com.afrisoftech.dbadmin.JXTable predicateTable1 = (com.afrisoftech.dbadmin.JXTable) movementAnalysisTable;
        org.jdesktop.swingx.decorator.PatternPredicate patternPredicate21 = new org.jdesktop.swingx.decorator.PatternPredicate("C", 2);
        ColorHighlighter cyan1 = new ColorHighlighter(patternPredicate21, Color.CYAN, null, Color.CYAN, null);
        tableHighlighters.add(cyan1);
        org.jdesktop.swingx.decorator.PatternPredicate patternPredicate31 = new org.jdesktop.swingx.decorator.PatternPredicate("B", 2);
        ColorHighlighter orange1 = new ColorHighlighter(patternPredicate31, Color.ORANGE, null, Color.ORANGE, null);
        tableHighlighters.add(orange1);
        org.jdesktop.swingx.decorator.PatternPredicate patternPredicate41 = new org.jdesktop.swingx.decorator.PatternPredicate("A", 2);
        ColorHighlighter green1 = new ColorHighlighter(patternPredicate41, Color.GREEN, null, Color.GREEN, null);
        tableHighlighters.add(green1);
        ColorHighlighter tableHighlightersArray1[] = new ColorHighlighter[]{cyan1, green1, orange1};
        predicateTable1.setHighlighterPipeline(predicateTable, tableHighlightersArray1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        itemsSearchDialog = new javax.swing.JDialog();
        itemSearchPanel = new javax.swing.JPanel();
        itemSearchTxt = new javax.swing.JTextField();
        itemSearchScrollPane = new javax.swing.JScrollPane();
        itemSearchTable = new com.afrisoftech.dbadmin.JTable();
        itemSearchCloseBtn = new javax.swing.JButton();
        itemsSearchDialog1 = new javax.swing.JDialog();
        itemSearchPanel1 = new javax.swing.JPanel();
        itemSearchTxt1 = new javax.swing.JTextField();
        itemSearchScrollPane1 = new javax.swing.JScrollPane();
        itemSearchTable1 = new com.afrisoftech.dbadmin.JTable();
        itemSearchCloseBtn1 = new javax.swing.JButton();
        headerPanel = new javax.swing.JPanel();
        storeTypeCmbx = new javax.swing.JComboBox();
        startDatePicker = new com.afrisoftech.lib.DatePicker();
        endDatePicker = new com.afrisoftech.lib.DatePicker();
        jLabel18 = new javax.swing.JLabel();
        procurementMethodCmbx = new javax.swing.JComboBox<String>();
        bodyPanel = new javax.swing.JPanel();
        storeDashboardTabbedPane = new javax.swing.JTabbedPane();
        StoreBalancesPanel = new javax.swing.JPanel();
        stockValuationScrollPane = new javax.swing.JScrollPane();
        stockValuationTable = new com.afrisoftech.dbadmin.JXTable();
        jLabel3 = new javax.swing.JLabel();
        storesBalancesTxt = new javax.swing.JTextField();
        storeDetailedBalancesPanel = new javax.swing.JPanel();
        storeDetailedBalancesScrollPane = new javax.swing.JScrollPane();
        storeDetailedBalancesTable = new com.afrisoftech.dbadmin.JXTable();
        storeNameCmbx = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        detailedStoreMonetaryValueTxt = new javax.swing.JTextField();
        stockAuditTrailPanel = new javax.swing.JPanel();
        storesAuditScrollPane = new javax.swing.JScrollPane();
        storesAuditTrailTable = new com.afrisoftech.dbadmin.JXTable();
        jPanel62 = new javax.swing.JPanel();
        itemCode1Txt = new javax.swing.JTextField();
        searchButton2 = new javax.swing.JButton();
        itemDescriptionTxt1 = new javax.swing.JTextField();
        itemTrailStoreCmbx = new javax.swing.JComboBox();
        itemBalancesPanel = new javax.swing.JPanel();
        itemBalancesScrollPane = new javax.swing.JScrollPane();
        itemBalancesTable = new com.afrisoftech.dbadmin.JXTable();
        jPanel61 = new javax.swing.JPanel();
        itemCodeTxt = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        itemDescriptionTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        storeItemBalanceTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        itemQuantityBalanceTxt = new javax.swing.JTextField();
        abcAnalysisPanel = new javax.swing.JPanel();
        abcAnalysisJscrl = new javax.swing.JScrollPane();
        abcAnalysisTable = new com.afrisoftech.dbadmin.JXTable();
        abcPanel = new javax.swing.JPanel();
        aThresholdTxt = new javax.swing.JFormattedTextField();
        bThresholdTxt = new javax.swing.JFormattedTextField();
        cThresholdTxt = new javax.swing.JFormattedTextField();
        reorderLevelPanel = new javax.swing.JPanel();
        reorderLevelJscrl = new javax.swing.JScrollPane();
        reorderLevelTable = new com.afrisoftech.dbadmin.JXTable();
        storesNameReorderLbl = new javax.swing.JLabel();
        storesReorderCmbx = new javax.swing.JComboBox();
        movementAnalysisPanel = new javax.swing.JPanel();
        movementAnalysisJscrl = new javax.swing.JScrollPane();
        movementAnalysisTable = new com.afrisoftech.dbadmin.JXTable();
        abcPanel1 = new javax.swing.JPanel();
        aThresholdTxt1 = new javax.swing.JFormattedTextField();
        bThresholdTxt1 = new javax.swing.JFormattedTextField();
        cThresholdTxt1 = new javax.swing.JFormattedTextField();
        stockAdjustmentsAuditTrailPanel = new javax.swing.JPanel();
        storesAdjustmentsAuditScrollPane = new javax.swing.JScrollPane();
        storesAdjustmentsAuditTrailTable = new com.afrisoftech.dbadmin.JXTable();
        staffAccountCmbx = new javax.swing.JComboBox();
        staffAccountLbl = new javax.swing.JLabel();
        storesCmbx = new javax.swing.JComboBox();
        storesNameLbl = new javax.swing.JLabel();
        grnPanel = new javax.swing.JPanel();
        supplierNameCmbx = new javax.swing.JComboBox();
        grnScrollPane = new javax.swing.JScrollPane();
        grnReportTable = new com.afrisoftech.dbadmin.JXTable();
        totalDeliveriesLbl = new javax.swing.JLabel();
        grnTotalsTxt = new javax.swing.JTextField();
        grnStoreNameCmbx = new javax.swing.JComboBox();
        expiryReportPanel = new javax.swing.JPanel();
        expiryScrollPane = new javax.swing.JScrollPane();
        expiryTable = new com.afrisoftech.dbadmin.JXTable();
        consumptionPanel = new javax.swing.JPanel();
        consumptionScrollPane = new javax.swing.JScrollPane();
        consumptionTable = new com.afrisoftech.dbadmin.JXTable();
        consumptionStoreNameCmbx = new javax.swing.JComboBox();
        buttonPanel = new javax.swing.JPanel();
        generateReportBtn = new javax.swing.JButton();
        refreshReportBtn = new javax.swing.JButton();
        closeFormBtn = new javax.swing.JButton();
        spacerLabel = new javax.swing.JLabel();

        itemsSearchDialog.setUndecorated(true);
        itemsSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        itemSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        itemSearchPanel.setLayout(new java.awt.GridBagLayout());

        itemSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                itemSearchTxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        itemSearchPanel.add(itemSearchTxt, gridBagConstraints);

        itemSearchTable.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        itemSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemSearchTableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                itemSearchTableMouseEntered(evt);
            }
        });
        itemSearchScrollPane.setViewportView(itemSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        itemSearchPanel.add(itemSearchScrollPane, gridBagConstraints);

        itemSearchCloseBtn.setText("Dispose");
        itemSearchCloseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSearchCloseBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        itemSearchPanel.add(itemSearchCloseBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        itemsSearchDialog.getContentPane().add(itemSearchPanel, gridBagConstraints);

        itemsSearchDialog1.setUndecorated(true);
        itemsSearchDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        itemSearchPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        itemSearchPanel1.setLayout(new java.awt.GridBagLayout());

        itemSearchTxt1.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                itemSearchTxt1CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        itemSearchPanel1.add(itemSearchTxt1, gridBagConstraints);

        itemSearchTable1.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        itemSearchTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                itemSearchTable1MouseEntered(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemSearchTable1MouseClicked(evt);
            }
        });
        itemSearchScrollPane1.setViewportView(itemSearchTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        itemSearchPanel1.add(itemSearchScrollPane1, gridBagConstraints);

        itemSearchCloseBtn1.setText("Dispose");
        itemSearchCloseBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSearchCloseBtn1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        itemSearchPanel1.add(itemSearchCloseBtn1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        itemsSearchDialog1.getContentPane().add(itemSearchPanel1, gridBagConstraints);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Supply Chain Management Dashboard - Stores/Inventory Ledger Reports V2.0");
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        headerPanel.setLayout(new java.awt.GridBagLayout());

        storeTypeCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '--ALL--' UNION SELECT DISTINCT store_type_description FROM st_stores_type ORDER BY 1"));
        storeTypeCmbx.setBorder(javax.swing.BorderFactory.createTitledBorder("Select type of store"));
        storeTypeCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeTypeCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(storeTypeCmbx, gridBagConstraints);

        startDatePicker.setBorder(javax.swing.BorderFactory.createTitledBorder("Start Date"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(startDatePicker, gridBagConstraints);

        endDatePicker.setBorder(javax.swing.BorderFactory.createTitledBorder("End Date"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(endDatePicker, gridBagConstraints);

        jLabel18.setForeground(new java.awt.Color(255, 51, 51));
        jLabel18.setText("Procurement Method");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        headerPanel.add(jLabel18, gridBagConstraints);

        procurementMethodCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT method_desc FROM public.st_procurement_method ORDER BY 1")
        );
        procurementMethodCmbx.setSelectedItem("Tender");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        headerPanel.add(procurementMethodCmbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(headerPanel, gridBagConstraints);

        bodyPanel.setLayout(new java.awt.GridBagLayout());

        StoreBalancesPanel.setLayout(new java.awt.GridBagLayout());

        stockValuationTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stockValuationTableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                stockValuationTableMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                stockValuationTableMouseExited(evt);
            }
        });
        stockValuationScrollPane.setViewportView(stockValuationTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        StoreBalancesPanel.add(stockValuationScrollPane, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("Stores Ledger Total");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        StoreBalancesPanel.add(jLabel3, gridBagConstraints);

        storesBalancesTxt.setEditable(false);
        storesBalancesTxt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        storesBalancesTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        StoreBalancesPanel.add(storesBalancesTxt, gridBagConstraints);

        storeDashboardTabbedPane.addTab("Stores Ledger Balance Report", new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/Document.png")), StoreBalancesPanel); // NOI18N

        storeDetailedBalancesPanel.setLayout(new java.awt.GridBagLayout());

        storeDetailedBalancesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        storeDetailedBalancesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                storeDetailedBalancesTableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                storeDetailedBalancesTableMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                storeDetailedBalancesTableMouseExited(evt);
            }
        });
        storeDetailedBalancesScrollPane.setViewportView(storeDetailedBalancesTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        storeDetailedBalancesPanel.add(storeDetailedBalancesScrollPane, gridBagConstraints);

        storeNameCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true ORDER BY 1")
        );
        storeNameCmbx.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Store"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        storeDetailedBalancesPanel.add(storeNameCmbx, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("Total Store Balance in Monetary Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        storeDetailedBalancesPanel.add(jLabel1, gridBagConstraints);

        detailedStoreMonetaryValueTxt.setEditable(false);
        detailedStoreMonetaryValueTxt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        detailedStoreMonetaryValueTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        storeDetailedBalancesPanel.add(detailedStoreMonetaryValueTxt, gridBagConstraints);

        storeDashboardTabbedPane.addTab("Detailed Store Balances Report", new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/Compose Email.png")), storeDetailedBalancesPanel); // NOI18N

        stockAuditTrailPanel.setLayout(new java.awt.GridBagLayout());

        storesAuditTrailTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                storesAuditTrailTableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                storesAuditTrailTableMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                storesAuditTrailTableMouseExited(evt);
            }
        });
        storesAuditScrollPane.setViewportView(storesAuditTrailTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        stockAuditTrailPanel.add(storesAuditScrollPane, gridBagConstraints);

        jPanel62.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel62.setMinimumSize(new java.awt.Dimension(82, 37));
        jPanel62.setLayout(new java.awt.GridBagLayout());

        itemCode1Txt.setEditable(false);
        itemCode1Txt.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        itemCode1Txt.setForeground(new java.awt.Color(102, 102, 102));
        itemCode1Txt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                itemCode1TxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel62.add(itemCode1Txt, gridBagConstraints);

        searchButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton2.setToolTipText("Search");
        searchButton2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton2.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton2.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel62.add(searchButton2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        stockAuditTrailPanel.add(jPanel62, gridBagConstraints);

        itemDescriptionTxt1.setEditable(false);
        itemDescriptionTxt1.setBorder(javax.swing.BorderFactory.createTitledBorder("Item Description"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        stockAuditTrailPanel.add(itemDescriptionTxt1, gridBagConstraints);

        itemTrailStoreCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '--ALL--' UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true ORDER BY 1"));
        itemTrailStoreCmbx.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Store Name"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        stockAuditTrailPanel.add(itemTrailStoreCmbx, gridBagConstraints);

        storeDashboardTabbedPane.addTab("Stock Movement Audit Trail", new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/Document Blank.png")), stockAuditTrailPanel); // NOI18N

        itemBalancesPanel.setLayout(new java.awt.GridBagLayout());

        itemBalancesScrollPane.setViewportView(itemBalancesTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        itemBalancesPanel.add(itemBalancesScrollPane, gridBagConstraints);

        jPanel61.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel61.setMinimumSize(new java.awt.Dimension(82, 37));
        jPanel61.setLayout(new java.awt.GridBagLayout());

        itemCodeTxt.setEditable(false);
        itemCodeTxt.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        itemCodeTxt.setForeground(new java.awt.Color(102, 102, 102));
        itemCodeTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                itemCodeTxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel61.add(itemCodeTxt, gridBagConstraints);

        searchButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton1.setToolTipText("Search");
        searchButton1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton1.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton1.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel61.add(searchButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        itemBalancesPanel.add(jPanel61, gridBagConstraints);

        itemDescriptionTxt.setEditable(false);
        itemDescriptionTxt.setBorder(javax.swing.BorderFactory.createTitledBorder("Item Description"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        itemBalancesPanel.add(itemDescriptionTxt, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("Stores Item Balance in Monetary Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        itemBalancesPanel.add(jLabel2, gridBagConstraints);

        storeItemBalanceTxt.setEditable(false);
        storeItemBalanceTxt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        storeItemBalanceTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        itemBalancesPanel.add(storeItemBalanceTxt, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("Item Quanity Balance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        itemBalancesPanel.add(jLabel4, gridBagConstraints);

        itemQuantityBalanceTxt.setEditable(false);
        itemQuantityBalanceTxt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        itemQuantityBalanceTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        itemBalancesPanel.add(itemQuantityBalanceTxt, gridBagConstraints);

        storeDashboardTabbedPane.addTab("Stock Item Balances Per Store Report", new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/FOOOD's Icons.png")), itemBalancesPanel); // NOI18N

        abcAnalysisPanel.setLayout(new java.awt.GridBagLayout());

        abcAnalysisTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        abcAnalysisJscrl.setViewportView(abcAnalysisTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        abcAnalysisPanel.add(abcAnalysisJscrl, gridBagConstraints);

        abcPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "The A  and C - Threshold figures MUST be set before the generating the report ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 51, 51))); // NOI18N
        abcPanel.setLayout(new java.awt.GridBagLayout());

        aThresholdTxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "A Threshold", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 0, 51))); // NOI18N
        aThresholdTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###.00"))));
        aThresholdTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        abcPanel.add(aThresholdTxt, gridBagConstraints);

        bThresholdTxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "B Threshold", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 255))); // NOI18N
        bThresholdTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###.00"))));
        bThresholdTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        abcPanel.add(bThresholdTxt, gridBagConstraints);

        cThresholdTxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "C Threshold", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 255, 0))); // NOI18N
        cThresholdTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###.00"))));
        cThresholdTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        abcPanel.add(cThresholdTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        abcAnalysisPanel.add(abcPanel, gridBagConstraints);

        storeDashboardTabbedPane.addTab("Inventory ABC Analysis", new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/Pics 2.png")), abcAnalysisPanel); // NOI18N

        reorderLevelPanel.setLayout(new java.awt.GridBagLayout());

        reorderLevelTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        reorderLevelJscrl.setViewportView(reorderLevelTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        reorderLevelPanel.add(reorderLevelJscrl, gridBagConstraints);

        storesNameReorderLbl.setText("Store Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        reorderLevelPanel.add(storesNameReorderLbl, gridBagConstraints);

        storesReorderCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '--ALL--' UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true ORDER BY 1"));
        storesReorderCmbx.setBorder(javax.swing.BorderFactory.createTitledBorder("Select the store to examine"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        reorderLevelPanel.add(storesReorderCmbx, gridBagConstraints);

        storeDashboardTabbedPane.addTab("Items Below Re-Order Level", new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/Download.png")), reorderLevelPanel); // NOI18N

        movementAnalysisPanel.setLayout(new java.awt.GridBagLayout());

        movementAnalysisTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        movementAnalysisJscrl.setViewportView(movementAnalysisTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 300.0;
        movementAnalysisPanel.add(movementAnalysisJscrl, gridBagConstraints);

        abcPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "The A  and C - Threshold figures MUST be set before the generating the report ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 51, 51))); // NOI18N
        abcPanel1.setLayout(new java.awt.GridBagLayout());

        aThresholdTxt1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "A Threshold", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 0, 51))); // NOI18N
        aThresholdTxt1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###.00"))));
        aThresholdTxt1.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        abcPanel1.add(aThresholdTxt1, gridBagConstraints);

        bThresholdTxt1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "B Threshold", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 255))); // NOI18N
        bThresholdTxt1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###.00"))));
        bThresholdTxt1.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        abcPanel1.add(bThresholdTxt1, gridBagConstraints);

        cThresholdTxt1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "C Threshold", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 255, 0))); // NOI18N
        cThresholdTxt1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###.00"))));
        cThresholdTxt1.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        abcPanel1.add(cThresholdTxt1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        movementAnalysisPanel.add(abcPanel1, gridBagConstraints);

        storeDashboardTabbedPane.addTab("Inventory Movement Analysis", new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/Desktop.png")), movementAnalysisPanel); // NOI18N

        stockAdjustmentsAuditTrailPanel.setLayout(new java.awt.GridBagLayout());

        storesAdjustmentsAuditScrollPane.setViewportView(storesAdjustmentsAuditTrailTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        stockAdjustmentsAuditTrailPanel.add(storesAdjustmentsAuditScrollPane, gridBagConstraints);

        staffAccountCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '--ALL--' UNION SELECT DISTINCT upper(login_name) FROM secure_menu_access ORDER BY 1"));
        staffAccountCmbx.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Staff Account to Display Stock Adjustment Report"));
        staffAccountCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffAccountCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 20.0;
        gridBagConstraints.weighty = 1.0;
        stockAdjustmentsAuditTrailPanel.add(staffAccountCmbx, gridBagConstraints);

        staffAccountLbl.setText("Staff Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        stockAdjustmentsAuditTrailPanel.add(staffAccountLbl, gridBagConstraints);

        storesCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '--ALL--' UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true ORDER BY 1"));
        storesCmbx.setBorder(javax.swing.BorderFactory.createTitledBorder("Select the store to examine"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        stockAdjustmentsAuditTrailPanel.add(storesCmbx, gridBagConstraints);

        storesNameLbl.setText("Store Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        stockAdjustmentsAuditTrailPanel.add(storesNameLbl, gridBagConstraints);

        storeDashboardTabbedPane.addTab("Stock Adjustment Audit Trail", new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/Internet Security 2.png")), stockAdjustmentsAuditTrailPanel); // NOI18N

        grnPanel.setLayout(new java.awt.GridBagLayout());

        supplierNameCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '--ALL--' UNION SELECT DISTINCT initcap(supplier_name) FROM st_suppliers ORDER BY 1"));
        supplierNameCmbx.setBorder(javax.swing.BorderFactory.createTitledBorder("Select supplier here"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        grnPanel.add(supplierNameCmbx, gridBagConstraints);

        grnReportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        grnScrollPane.setViewportView(grnReportTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        grnPanel.add(grnScrollPane, gridBagConstraints);

        totalDeliveriesLbl.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        totalDeliveriesLbl.setText("Total value of deliveries");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        grnPanel.add(totalDeliveriesLbl, gridBagConstraints);

        grnTotalsTxt.setEditable(false);
        grnTotalsTxt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        grnTotalsTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        grnPanel.add(grnTotalsTxt, gridBagConstraints);

        grnStoreNameCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true ORDER BY 1"));
        grnStoreNameCmbx.setBorder(javax.swing.BorderFactory.createTitledBorder("Select store here"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        grnPanel.add(grnStoreNameCmbx, gridBagConstraints);

        storeDashboardTabbedPane.addTab("GRN Reports", new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/Stuff 1.png")), grnPanel); // NOI18N

        expiryReportPanel.setLayout(new java.awt.GridBagLayout());

        expiryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        expiryScrollPane.setViewportView(expiryTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        expiryReportPanel.add(expiryScrollPane, gridBagConstraints);

        storeDashboardTabbedPane.addTab("Expiring Items Report", new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/Clock.png")), expiryReportPanel); // NOI18N

        consumptionPanel.setLayout(new java.awt.GridBagLayout());

        consumptionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        consumptionScrollPane.setViewportView(consumptionTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        consumptionPanel.add(consumptionScrollPane, gridBagConstraints);

        consumptionStoreNameCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true ORDER BY 1")
        );
        consumptionStoreNameCmbx.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Store"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        consumptionPanel.add(consumptionStoreNameCmbx, gridBagConstraints);

        storeDashboardTabbedPane.addTab("Inventory Consumption Analysis", consumptionPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        bodyPanel.add(storeDashboardTabbedPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 500.0;
        getContentPane().add(bodyPanel, gridBagConstraints);

        buttonPanel.setLayout(new java.awt.GridBagLayout());

        generateReportBtn.setBackground(new java.awt.Color(204, 255, 255));
        generateReportBtn.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        generateReportBtn.setText("Generate Report");
        generateReportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateReportBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(generateReportBtn, gridBagConstraints);

        refreshReportBtn.setBackground(new java.awt.Color(204, 255, 255));
        refreshReportBtn.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        refreshReportBtn.setText("Refresh Report");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(refreshReportBtn, gridBagConstraints);

        closeFormBtn.setBackground(new java.awt.Color(204, 255, 255));
        closeFormBtn.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        closeFormBtn.setText("Close form");
        closeFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(closeFormBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(spacerLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(buttonPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFormBtnActionPerformed

        this.dispose();

// TODO add your handling code here:
    }//GEN-LAST:event_closeFormBtnActionPerformed

    private void generateReportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateReportBtnActionPerformed
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        if (storeDashboardTabbedPane.getSelectedIndex() == 1) {
            
            System.err.println("Detailed balances...");
            if (storeNameCmbx.getSelectedItem().toString().contains("--ALL--")) {
                storeDetailedBalancesTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT item_code, initcap(trim((SELECT DISTINCT description FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code ORDER BY 1 LIMIT 1))) as item_name, initcap(trim((SELECT DISTINCT strength FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code ORDER BY 1 LIMIT 1))) as strength, sum(receiving - issuing) as qty_balance, (sum(receiving - issuing) * (SELECT (buying_price/packaging)::numeric(15,0) FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code LIMIT 1))::numeric(15,0) as monetary_value, (SELECT expiry_date::date as expiry_date  FROM st_stock_cardex WHERE st_stock_cardex.item_code = st_sub_stores.item_code AND order_no is not null AND expiry_date is not null ORDER BY expiry_date DESC LIMIT 1) as expiry_date FROM st_sub_stores WHERE initcap(store_name) IN (SELECT DISTINCT initcap(store_name) FROM st_main_stores WHERE upper(store_name) IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true AND upper(store_name) IN (SELECT upper(store_name) FROM st_stores WHERE st_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) ORDER BY 1) AND  trans_date::date <= '" + endDatePicker.getDate() + "' AND upper(store_name) in (SELECT distinct upper(store_name) FROM st_sub_stores INTERSECT SELECT DISTINCT upper(store_name) FROM st_stores WHERE patient_store = true) AND initcap(trim((SELECT DISTINCT description FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code ORDER BY 1 LIMIT 1))) is not null GROUP BY 1,2  ORDER BY 2"));
                //Changed to accomodate store_balance 2.0
                //storeDetailedBalancesTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT item_code, initcap(trim((SELECT DISTINCT description FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code ORDER BY 1 LIMIT 1))) as item_name, initcap(trim((SELECT DISTINCT strength FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code ORDER BY 1 LIMIT 1))) as strength, 0.0 as qty_balance, 0.0 as monetary_value, '' as expiry_date FROM st_sub_stores WHERE initcap(store_name) IN (SELECT DISTINCT initcap(store_name) FROM st_main_stores WHERE upper(store_name) IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true AND upper(store_name) IN (SELECT upper(store_name) FROM st_stores WHERE st_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) ORDER BY 1) AND  trans_date::date <= '" + endDatePicker.getDate() + "' AND upper(store_name) in (SELECT distinct upper(store_name) FROM st_sub_stores INTERSECT SELECT DISTINCT upper(store_name) FROM st_stores WHERE patient_store = true) AND initcap(trim((SELECT DISTINCT description FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code ORDER BY 1 LIMIT 1))) is not null GROUP BY 1,2  ORDER BY 2"));
            } else {
                storeDetailedBalancesTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT item_code, initcap(trim((SELECT DISTINCT description FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code ORDER BY 1 LIMIT 1))) as item_name, initcap(trim((SELECT DISTINCT strength FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code ORDER BY 1 LIMIT 1))) as strength, sum(receiving - issuing) as qty_balance, (sum(receiving - issuing) * (SELECT (buying_price/packaging)::numeric(15,0) FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code LIMIT 1))::numeric(15,0) as monetary_value, (SELECT expiry_date::date as expiry_date  FROM st_stock_cardex WHERE st_stock_cardex.item_code = st_sub_stores.item_code AND order_no is not null AND expiry_date is not null ORDER BY expiry_date DESC LIMIT 1) as expiry_date FROM st_sub_stores WHERE initcap(store_name) IN (SELECT DISTINCT initcap(store_name) FROM st_main_stores WHERE upper(store_name) IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true AND upper(store_name) IN (SELECT upper(store_name) FROM st_stores WHERE st_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) ORDER BY 1) AND  upper(store_name) = '" + storeNameCmbx.getSelectedItem().toString().toUpperCase() + "' AND trans_date::date <= '" + endDatePicker.getDate() + "' AND upper(store_name) in (SELECT distinct upper(store_name) FROM st_sub_stores INTERSECT SELECT DISTINCT upper(store_name) FROM st_stores WHERE patient_store = true) AND initcap(trim((SELECT DISTINCT description FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code ORDER BY 1 LIMIT 1))) is not null GROUP BY 1,2  ORDER BY 2"));
                //Changed the store balances 2.0
                //storeDetailedBalancesTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT item_code, initcap(trim((SELECT DISTINCT description FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code ORDER BY 1 LIMIT 1))) as item_name, initcap(trim((SELECT DISTINCT strength FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code ORDER BY 1 LIMIT 1))) as strength, 0.0 as qty_balance, 0.0 as monetary_value, '' as expiry_date FROM st_sub_stores WHERE initcap(store_name) IN (SELECT DISTINCT initcap(store_name) FROM st_main_stores WHERE upper(store_name) IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true AND upper(store_name) IN (SELECT upper(store_name) FROM st_stores WHERE st_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) ORDER BY 1) AND  upper(store_name) = '" + storeNameCmbx.getSelectedItem().toString().toUpperCase() + "' AND trans_date::date <= '" + endDatePicker.getDate() + "' AND upper(store_name) in (SELECT distinct upper(store_name) FROM st_sub_stores INTERSECT SELECT DISTINCT upper(store_name) FROM st_stores WHERE patient_store = true) AND initcap(trim((SELECT DISTINCT description FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code ORDER BY 1 LIMIT 1))) is not null GROUP BY 1,2  ORDER BY 2"));
            }
            detailedStoreMonetaryValueTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(storeDetailedBalancesTable, 4)));

//            for (int i = 0; i < storeDetailedBalancesTable.getRowCount(); i++) {
//
//                String code = storeDetailedBalancesTable.getValueAt(i, 0).toString();
//                String store = storeNameCmbx.getSelectedItem().toString();
//                Date date = SQLDateFormat.getSQLDate(endDatePicker.getDate());
//
//                Double bal = GetItemInfo.itemBalance(connectDB, code, store, date);
//                Double price = GetItemInfo.itemPrice(connectDB, code);
//                String expiry = GetItemInfo.getExpiryByCode(code, connectDB);
//                
//                storeDetailedBalancesTable.setValueAt(bal, i, 3);
//                storeDetailedBalancesTable.setValueAt(bal * price, i, 4);                
//                storeDetailedBalancesTable.setValueAt(expiry, i, 5);                
//                System.err.println(code+" "+price);
//            }
            
            
            

//            storeDetailedBalancesTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT item_code, initcap(trim((SELECT DISTINCT description FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code ORDER BY 1 LIMIT 1))) as item_name, sum(receiving - issuing) as qty_balance, (sum(receiving - issuing) * (SELECT (buying_price/packaging)::numeric(15,0) FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code LIMIT 1))::numeric(15,0) as monetary_value FROM st_sub_stores WHERE upper(store_name) = '" + storeNameCmbx.getSelectedItem().toString().toUpperCase() + "' AND trans_date::date <= '" + endDatePicker.getDate() + "' AND upper(store_name) in (SELECT distinct upper(store_name) FROM st_sub_stores INTERSECT SELECT DISTINCT upper(store_name) FROM st_stores WHERE patient_store = true) AND initcap(trim((SELECT DISTINCT description FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code ORDER BY 1 LIMIT 1))) is not null GROUP BY 1,2  ORDER BY 2")); 
        } else if (storeDashboardTabbedPane.getSelectedIndex() == 2) {
            if (storeTypeCmbx.getSelectedItem().toString().contains("--ALL--")) {
                storesAuditTrailTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT  trans_date::date, initcap(store_name) as store_name, initcap(trim((SELECT DISTINCT description FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code ORDER BY 1 LIMIT 1))) as item_name, receiving as received_qty,  (receiving * (SELECT (buying_price/packaging)::numeric(15,0) FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code LIMIT 1))::numeric(15,0) as value_received, issuing as issued_qty, (issuing * (SELECT (buying_price/packaging)::numeric(15,0) FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code LIMIT 1))::numeric(15,0) as value_issued, issiued_to as supplier_or_client, user_name FROM st_sub_stores WHERE item_code = '" + itemCode1Txt.getText() + "' AND trans_date::date between '" + startDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' AND initcap(trim((SELECT DISTINCT description FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code ORDER BY 1 LIMIT 1))) is not null ORDER BY trans_date::date"));
            } else {
                storesAuditTrailTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT  trans_date::date, initcap(store_name) as store_name, initcap(trim((SELECT DISTINCT description FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code ORDER BY 1 LIMIT 1))) as item_name, receiving as received_qty,  (receiving * (SELECT (buying_price/packaging)::numeric(15,0) FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code LIMIT 1))::numeric(15,0) as value_received, issuing as issued_qty, (issuing * (SELECT (buying_price/packaging)::numeric(15,0) FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code LIMIT 1))::numeric(15,0) as value_issued, issiued_to as supplier_or_client, user_name FROM st_sub_stores WHERE upper(store_name) = '" + itemTrailStoreCmbx.getSelectedItem().toString().toUpperCase() + "' AND item_code = '" + itemCode1Txt.getText() + "' AND trans_date::date between '" + startDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' AND initcap(trim((SELECT DISTINCT description FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code ORDER BY 1 LIMIT 1))) is not null ORDER BY trans_date::date"));
            }
        } else if (storeDashboardTabbedPane.getSelectedIndex() == 3) {
            itemBalancesTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT initcap(trim(store_name)) as store_name, sum(receiving - issuing) as qty_balance, (sum(receiving - issuing) * (SELECT (buying_price/packaging)::numeric(15,0) FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code LIMIT 1))::numeric(15,2) as monetary_value FROM st_sub_stores WHERE item_code = '" + itemCodeTxt.getText() + "' AND store_name is not null GROUP BY 1, st_sub_stores.item_code ORDER BY 1"));
            storeItemBalanceTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(itemBalancesTable, 2)));
            itemQuantityBalanceTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(itemBalancesTable, 1)));

        } else if (storeDashboardTabbedPane.getSelectedIndex() == 0) {
            if (storeTypeCmbx.getSelectedItem().toString().contains("--ALL--")) {

                stockValuationTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT store_name, sum(monetary_value) as monetary_value FROM (SELECT initcap(store_name) as store_name,  (sum(receiving - issuing) * (SELECT (buying_price/packaging)::numeric(15,0) FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code LIMIT 1))::numeric(15,0) as monetary_value FROM st_sub_stores WHERE trans_date::date <= now()::date AND upper(store_name) in (SELECT distinct upper(store_name) FROM st_sub_stores INTERSECT SELECT DISTINCT upper(store_name) FROM st_stores WHERE patient_store = true) AND initcap(trim((SELECT DISTINCT description FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code ORDER BY 1 LIMIT 1))) is not null GROUP BY 1, st_sub_stores.item_code  ORDER BY 1 )as foo group by 1 ORDER BY 1"));

            } else {

                stockValuationTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT store_name, sum(monetary_value) as monetary_value FROM (SELECT initcap(store_name) as store_name,  (sum(receiving - issuing) * (SELECT (buying_price/packaging)::numeric(15,0) FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code LIMIT 1))::numeric(15,0) as monetary_value FROM st_sub_stores WHERE initcap(store_name) IN (SELECT DISTINCT initcap(store_name) FROM st_main_stores WHERE upper(store_name) IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true AND upper(store_name) IN (SELECT upper(store_name) FROM st_stores WHERE st_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) ORDER BY 1) AND  trans_date::date <= now()::date AND upper(store_name) in (SELECT distinct upper(store_name) FROM st_sub_stores INTERSECT SELECT DISTINCT upper(store_name) FROM st_stores WHERE patient_store = true) AND initcap(trim((SELECT DISTINCT description FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item_code ORDER BY 1 LIMIT 1))) is not null GROUP BY 1, st_sub_stores.item_code  ORDER BY 1 )as foo group by 1 ORDER BY 1"));

            }
//            stockValuationTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT * FROM funsoft_stock_valuation('" + endDatePicker.getDate() + "') ORDER BY 1"));
            storesBalancesTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(stockValuationTable, 1)));

        } else if (storeDashboardTabbedPane.getSelectedIndex() == 4) {
            abcAnalysisTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT"
                    + " initcap(trim((SELECT DISTINCT description FROM st_stock_item WHERE "
                    + "st_stock_item.item_code = st_sub_stores.item_code ORDER BY 1 LIMIT 1))) as item_name, "
                    + " (sum(receiving - issuing)* (SELECT (buying_price/packaging)::numeric(15,0) FROM"
                    + " st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item))::numeric(15,0)"
                    + " as store_balance, (CASE WHEN sum(receiving - issuing)* avg(buying_price)::numeric(15,0) > "
                    + "" + Double.parseDouble(aThresholdTxt.getText().replace(",", "")) + " THEN 'A' ELSE"
                    + " (CASE WHEN sum(receiving - issuing)* avg(buying_price)::numeric(15,0)"
                    + " < " + Double.parseDouble(cThresholdTxt.getText().replace(",", "")) + " THEN 'C' ELSE 'B' END) END) as abc_category"
                    + " FROM st_sub_stores WHERE  trans_date <= '" + endDatePicker.getDate() + "' "
                    + "AND initcap(store_name) in (SELECT distinct initcap(store_name) FROM st_sub_stores"
                    + " INTERSECT SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true)"
                    + " AND store_name IN (SELECT DISTINCT initcap(store_name) FROM st_main_stores WHERE upper(store_name)"
                    + " IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = "
                    + "(SELECT classification FROM st_stores_type  WHERE store_type_description ilike"
                    + " '%" + storeTypeCmbx.getSelectedItem() + "%')) UNION SELECT DISTINCT initcap(store_name)"
                    + " FROM st_stores WHERE patient_store = true AND upper(store_name) IN (SELECT upper(store_name)"
                    + " FROM st_stores WHERE st_stores.classification = (SELECT classification FROM st_stores_type"
                    + "  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) ORDER BY 1)"
                    + " GROUP BY 1, st_sub_stores.item HAVING (sum(receiving - issuing)* (SELECT (buying_price/packaging)::numeric(15,0)"
                    + " FROM st_stock_item WHERE st_stock_item.item_code = st_sub_stores.item LIMIT 1))::numeric(15,0) <> 0  ORDER BY 2 DESC"));
        } else if (storeDashboardTabbedPane.getSelectedIndex() == 7) {
            if (storesCmbx.getSelectedItem().toString().contains("--ALL--")) {
                if (staffAccountCmbx.getSelectedItem().toString().contains("--ALL--")) {
                    this.storesAdjustmentsAuditTrailTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT trans_date::date, store_name, item_code, item as item_name, receiving as adjustment_upwards, issuing as adjustment_downwards, buying_price as cost_of_sale, total as adjusted_stock_value, issiued_to as transaction_type,  user_name as staff_account  FROM st_sub_stores WHERE (issiued_to = 'Stock Count' or issiued_to = 'Stock Difference') AND trans_date::date BETWEEN  '" + startDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' ORDER BY 1,2,3,4"));
                } else {
                    this.storesAdjustmentsAuditTrailTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT trans_date::date, store_name, item_code, item as item_name, receiving as adjustment_upwards, issuing as adjustment_downwards, buying_price as cost_of_sale,  total as adjusted_stock_value,  issiued_to as transaction_type, user_name as staff_account  FROM st_sub_stores WHERE (issiued_to = 'Stock Count' or issiued_to = 'Stock Difference') AND trans_date::date BETWEEN  '" + startDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' AND user_name ilike '" + staffAccountCmbx.getSelectedItem() + "' ORDER BY 1,2,3,4"));
                }
            } else if (staffAccountCmbx.getSelectedItem().toString().contains("--ALL--")) {
                this.storesAdjustmentsAuditTrailTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT trans_date::date, store_name, item_code, item as item_name, receiving as adjustment_upwards, issuing as adjustment_downwards, buying_price as cost_of_sale,  total as adjusted_stock_value, issiued_to as transaction_type,  user_name as staff_account  FROM st_sub_stores WHERE (issiued_to = 'Stock Count' or issiued_to = 'Stock Difference') AND store_name ilike '" + storesCmbx.getSelectedItem() + "' AND trans_date::date BETWEEN  '" + startDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' ORDER BY 1,2,3,4"));
            } else {
                this.storesAdjustmentsAuditTrailTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT trans_date::date, store_name, item_code, item as item_name, receiving as adjustment_upwards, issuing as adjustment_downwards, buying_price as cost_of_sale,  total as adjusted_stock_value,  issiued_to as transaction_type, user_name as staff_account  FROM st_sub_stores WHERE (issiued_to = 'Stock Count' or issiued_to = 'Stock Difference') AND store_name ilike '" + storesCmbx.getSelectedItem() + "' AND trans_date::date BETWEEN  '" + startDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' AND user_name ilike '" + staffAccountCmbx.getSelectedItem() + "' ORDER BY 1,2,3,4"));
            }
        } else if (storeDashboardTabbedPane.getSelectedIndex() == 5) {
            if (storesReorderCmbx.getSelectedItem().toString().contains("ALL")) {
                reorderLevelTable.setModel(getReorderTableModel());
            } else {
                reorderLevelTable.setModel(getReorderTableModel(storesReorderCmbx.getSelectedItem().toString()));
            }
            // reorderLevelTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT initcap(description) as items_below_re_order_level, item_code, "+InventoryLevels.getStockLevel("item_code")+" as item_balance_qty, "+InventoryLevels.getReorderStatus("item_code")+" as below_reorder_level, "+InventoryLevels.getConsumptionNumbers("item_code")+" as quantity_required FROM st_stock_item ORDER BY 1"));
        } else if (storeDashboardTabbedPane.getSelectedIndex() == 8) {
            if (supplierNameCmbx.getSelectedItem().toString().contains("ALL")) {
                if (grnStoreNameCmbx.getSelectedItem().toString().contains("ALL")) {
                    this.grnReportTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT date::date, order_no, grn_no, delivery_note_no, item_code, item as item_name, initcap(supplier) as supplier, upper(store) as receiving_store, units as packaging, quantity_received, price_per_item as unit_price, debit as stock_value FROM st_stock_cardex WHERE date::date between '" + startDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' AND order_no is not null AND initcap(store) IN (SELECT DISTINCT initcap(store_name) FROM st_main_stores WHERE upper(store_name) IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true AND upper(store_name) IN (SELECT upper(store_name) FROM st_stores WHERE st_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) ORDER BY 1) ORDER BY 1"));
                } else {
                    this.grnReportTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT date::date, order_no, grn_no, delivery_note_no, item_code, item as item_name, initcap(supplier) as supplier, upper(store) as receiving_store, units as packaging, quantity_received, price_per_item as unit_price, debit as stock_value FROM st_stock_cardex WHERE date::date between '" + startDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' AND order_no is not null AND initcap(store) IN (SELECT DISTINCT initcap(store_name) FROM st_main_stores WHERE upper(store_name) IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true AND upper(store_name) IN (SELECT upper(store_name) FROM st_stores WHERE st_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) ORDER BY 1) AND  upper(store) = '" + grnStoreNameCmbx.getSelectedItem().toString().toUpperCase() + "' ORDER BY 1"));
                }
            } else if (grnStoreNameCmbx.getSelectedItem().toString().contains("ALL")) {
                this.grnReportTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT date::date, order_no, grn_no, delivery_note_no, item_code, item as item_name, initcap(supplier) as supplier, upper(store) as receiving_store, units as packaging, quantity_received, price_per_item as unit_price, debit as stock_value FROM st_stock_cardex WHERE upper(supplier) = '" + supplierNameCmbx.getSelectedItem().toString().toUpperCase() + "' AND date::date between '" + startDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' AND order_no is not null AND initcap(store) IN (SELECT DISTINCT initcap(store_name) FROM st_main_stores WHERE upper(store_name) IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true AND upper(store_name) IN (SELECT upper(store_name) FROM st_stores WHERE st_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) ORDER BY 1) AND  upper(supplier) = '" + supplierNameCmbx.getSelectedItem().toString().toUpperCase() + "' ORDER BY 1"));
            } else {
                this.grnReportTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT date::date, order_no, grn_no, delivery_note_no, item_code, item as item_name, initcap(supplier) as supplier, upper(store) as receiving_store, units as packaging, quantity_received, price_per_item as unit_price, debit as stock_value FROM st_stock_cardex WHERE upper(supplier) = '" + supplierNameCmbx.getSelectedItem().toString().toUpperCase() + "' AND date::date between '" + startDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' AND order_no is not null AND initcap(store) IN (SELECT DISTINCT initcap(store_name) FROM st_main_stores WHERE upper(store_name) IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true AND upper(store_name) IN (SELECT upper(store_name) FROM st_stores WHERE st_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) ORDER BY 1) AND  upper(store) = '" + grnStoreNameCmbx.getSelectedItem().toString().toUpperCase() + "' AND  upper(supplier) = '" + supplierNameCmbx.getSelectedItem().toString().toUpperCase() + "' ORDER BY 1"));
            }
            grnTotalsTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(grnReportTable, 11)));
        } else if (storeDashboardTabbedPane.getSelectedIndex() == 9) {
            expiryTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT date::date, order_no, grn_no, delivery_note_no, item_code, item as item_name, supplier, store as receiving_store, units as packaging, quantity_received, price_per_item as unit_price, debit as stock_value, batch_no, expiry_date::date as expiry_date  FROM st_stock_cardex WHERE expiry_date::date BETWEEN '" + startDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' AND order_no is not null AND initcap(store) IN (SELECT DISTINCT initcap(store_name) FROM st_main_stores WHERE upper(store_name) IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true AND upper(store_name) IN (SELECT upper(store_name) FROM st_stores WHERE st_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) ORDER BY 1) ORDER BY 1"));
        } else if (storeDashboardTabbedPane.getSelectedIndex() == 10) {
            int interval = 1;
            java.sql.PreparedStatement pstmt;
            try {
                pstmt = connectDB.prepareStatement("SELECT '" + this.endDatePicker.getDate() + "'::date - '" + this.startDatePicker.getDate() + "'::date");
                java.sql.ResultSet rset = pstmt.executeQuery();
                while (rset.next()) {
                    if (rset.getInt(1) > 0) {
                        interval = rset.getInt(1);
                    }
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
            }
            if (consumptionStoreNameCmbx.getSelectedItem().toString().contains("ALL")) {
                consumptionTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT  initcap(item) as item_name, item_code, (SELECT DISTINCT strength FROM st_stock_item WHERE st_sub_stores.item_code = st_stock_item.item_code LIMIT 1) as strength, sum(receiving)::numeric(15,0) as received_quantity, sum(issuing)::numeric(15,0) as consumption, (sum(issuing)/" + interval + ")::numeric(15,0) as daily_consumption_average,(sum(issuing)*30/" + interval + ")::numeric(15,0) as monthly_consumption_average, (sum(issuing)::numeric(15,0)*(SELECT buying_price/packaging FROM st_stock_item WHERE st_sub_stores.item_code = st_stock_item.item_code LIMIT 1))::numeric(15,0) as consumption_monetary_value FROM st_sub_stores WHERE upper(store_name) IN (SELECT DISTINCT upper(store_name) FROM st_main_stores WHERE upper(store_name) IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) UNION SELECT DISTINCT upper(store_name) FROM st_stores WHERE patient_store = true AND upper(store_name) IN (SELECT upper(store_name) FROM st_stores WHERE st_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) ORDER BY 1) AND trans_date::date BETWEEN '" + this.startDatePicker.getDate() + "'::date AND '" + this.endDatePicker.getDate() + "'::date AND issiued_to not ilike 'stock%' AND item_code is not null GROUP BY 1,2,3 ORDER BY 1"));
            } else {
                consumptionTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT  initcap(item) as item_name, item_code, (SELECT DISTINCT strength FROM st_stock_item WHERE st_sub_stores.item_code = st_stock_item.item_code LIMIT 1) as strength, sum(receiving)::numeric(15,0) as received_quantity, sum(issuing)::numeric(15,0) as consumption, (sum(issuing)/" + interval + ")::numeric(15,0) as daily_consumption_average,(sum(issuing)*30/" + interval + ")::numeric(15,0) as monthly_consumption_average, (sum(issuing)::numeric(15,0)*(SELECT buying_price/packaging FROM st_stock_item WHERE st_sub_stores.item_code = st_stock_item.item_code LIMIT 1))::numeric(15,0) as consumption_monetary_value FROM st_sub_stores WHERE upper(store_name) = '" + consumptionStoreNameCmbx.getSelectedItem().toString().toUpperCase() + "' AND trans_date::date BETWEEN '" + this.startDatePicker.getDate() + "'::date AND '" + this.endDatePicker.getDate() + "'::date AND issiued_to not ilike 'stock%' AND item_code is not null GROUP BY 1,2,3 ORDER BY 1"));
            }
        } else {
            movementAnalysisTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT "
                    + " initcap(trim((SELECT DISTINCT st_stock_item.description FROM st_stock_item WHERE "
                    + "st_stock_item.item_code = st_stock_cardex.item_code ORDER BY 1 LIMIT 1))) as item_name,"
                    + " sum(debit - quantity_ordered)::numeric(15,0) as movement, (CASE WHEN sum(debit-quantity_ordered) >"
                    + " " + Double.parseDouble(aThresholdTxt1.getText().replace(",", "")) + " THEN 'A' ELSE"
                    + " (CASE WHEN sum(debit-quantity_ordered) < " + Double.parseDouble(cThresholdTxt1.getText().replace(",", "")) + ""
                    + " THEN 'C' ELSE 'B' END) END) as abc_category FROM st_stock_cardex WHERE date::date between "
                    + "'" + startDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "'  AND initcap(store) "
                    + "in (SELECT distinct initcap(store) FROM st_stock_cardex INTERSECT SELECT DISTINCT initcap(store_name)"
                    + " FROM st_stores WHERE patient_store = true) "
                    + " AND store IN (SELECT DISTINCT initcap(store_name) FROM st_main_stores WHERE upper(store_name)"
                    + " IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification ="
                    + " (SELECT classification FROM st_stores_type  WHERE store_type_description ilike"
                    + " '%" + storeTypeCmbx.getSelectedItem() + "%')) UNION SELECT DISTINCT initcap(store_name)"
                    + " FROM st_stores WHERE patient_store = true AND upper(store_name) IN (SELECT upper(store_name)"
                    + " FROM st_stores WHERE st_stores.classification = (SELECT classification FROM st_stores_type"
                    + "  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) ORDER BY 1)"
                    + " GROUP BY 1 HAVING sum(debit-quantity_ordered) <> 0 ORDER BY 2 DESC"));;
        }

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
// TODO add your handling code here:
    }//GEN-LAST:event_generateReportBtnActionPerformed

    private void staffAccountCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staffAccountCmbxActionPerformed
//        if (staffAccountCmbx.getSelectedItem().toString().contains("--ALL--")) {
//            this.storesAdjustmentsAuditTrailTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT trans_date::date, store_name, item_code, item as item_name, receiving as adjustment_upwards, issuing as adjustment_downwards, total as adjusted_stock_value, issiued_to as transaction_type, user_name as staff_account FROM st_sub_stores WHERE (issiued_to = 'Stock Count' or issiued_to = 'Stock Difference') AND trans_date::date BETWEEN  '" + startDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "'"));
//        } else {
//            this.storesAdjustmentsAuditTrailTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT trans_date::date, store_name, item_code, item as item_name, receiving as adjustment_upwards, issuing as adjustment_downwards, total as adjusted_stock_value, issiued_to as transaction_type,  user_name as staff_account FROM st_sub_stores WHERE (issiued_to = 'Stock Count' or issiued_to = 'Stock Difference') AND trans_date::date BETWEEN  '" + startDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "' AND user_name ilike '" + staffAccountCmbx.getSelectedItem() + "'"));
//        }
        // TODO add your handling code here:
    }//GEN-LAST:event_staffAccountCmbxActionPerformed

    private void storeTypeCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storeTypeCmbxActionPerformed
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        if (storeTypeCmbx.getSelectedItem().toString().contains("--ALL--")) {
            // stockItemNameCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT initcap(description) FROM st_stock_item  ORDER BY 1"));
            // itemDescriptionCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT initcap(description) FROM st_stock_item  ORDER BY 1"));
            storeNameCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '--ALL--' UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true ORDER BY 1"));
            storesCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '--ALL--' UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true ORDER BY 1"));
            storesReorderCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '--ALL--' UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true ORDER BY 1"));
            grnStoreNameCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '--ALL--' UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true ORDER BY 1"));
            consumptionStoreNameCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '--ALL--' UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true ORDER BY 1"));
            supplierNameCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '--ALL--' UNION SELECT DISTINCT initcap(supplier) FROM st_stock_cardex WHERE order_no is not null ORDER BY 1"));
            staffAccountCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '--ALL--' UNION SELECT DISTINCT user_name FROM st_stock_cardex ORDER BY 1"));
        } else {
            //   stockItemNameCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT initcap(description) FROM st_stock_item WHERE upper(department) IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) ORDER BY 1"));
            //   itemDescriptionCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT initcap(description) FROM st_stock_item WHERE upper(department) IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) ORDER BY 1"));
            consumptionStoreNameCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '--ALL--' UNION SELECT DISTINCT initcap(store_name) FROM st_main_stores WHERE upper(store_name) IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true AND upper(store_name) IN (SELECT upper(store_name) FROM st_stores WHERE st_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) ORDER BY 1"));
            storeNameCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '--ALL--' UNION SELECT DISTINCT initcap(store_name) FROM st_main_stores WHERE upper(store_name) IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true AND upper(store_name) IN (SELECT upper(store_name) FROM st_stores WHERE st_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) ORDER BY 1"));
            storesReorderCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '--ALL--' UNION SELECT DISTINCT initcap(store_name) FROM st_main_stores WHERE upper(store_name) IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true AND upper(store_name) IN (SELECT upper(store_name) FROM st_stores WHERE st_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) ORDER BY 1"));
            grnStoreNameCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '--ALL--' UNION SELECT DISTINCT initcap(store_name) FROM st_main_stores WHERE upper(store_name) IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true AND upper(store_name) IN (SELECT upper(store_name) FROM st_stores WHERE st_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) ORDER BY 1"));
            storesCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '--ALL--' UNION SELECT DISTINCT initcap(store_name) FROM st_main_stores WHERE upper(store_name) IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true AND upper(store_name) IN (SELECT upper(store_name) FROM st_stores WHERE st_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) ORDER BY 1"));
            supplierNameCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '--ALL--' UNION SELECT DISTINCT initcap(supplier) FROM st_stock_cardex WHERE order_no is not null AND initcap(store) IN (SELECT DISTINCT initcap(store_name) FROM st_main_stores WHERE upper(store_name)IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true AND upper(store_name) IN (SELECT upper(store_name) FROM st_stores WHERE st_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%'))) ORDER BY 1"));
            staffAccountCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '--ALL--' UNION SELECT DISTINCT user_name FROM st_stock_cardex WHERE initcap(store) IN (SELECT DISTINCT initcap(store_name) FROM st_main_stores WHERE upper(store_name) IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true AND upper(store_name) IN (SELECT upper(store_name) FROM st_stores WHERE st_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%'))) ORDER BY 1"));
        }
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        // TODO add your handling code here:
    }//GEN-LAST:event_storeTypeCmbxActionPerformed

    private void itemSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_itemSearchTxtCaretUpdate
        if (itemSearchTxt.getCaretPosition() > 2) {

            itemSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select description||' '||strength AS product, item_code as product_id from st_stock_item WHERE (description ilike '%" + itemSearchTxt.getText() + "%' OR item_code ILIKE '%" + itemSearchTxt.getText() + "%') AND initcap(department) in (SELECT DISTINCT initcap(store_name) FROM st_main_stores WHERE upper(store_name) IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true AND upper(store_name) IN (SELECT upper(store_name) FROM st_stores WHERE st_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%'))) ORDER BY 1"));

            itemSearchScrollPane.setViewportView(itemSearchTable);

            //   System.out.println("Cannot sort out");
        }// Add your handling code here:
    }//GEN-LAST:event_itemSearchTxtCaretUpdate

    private void itemSearchTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemSearchTableMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_itemSearchTableMouseEntered

    private void itemSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemSearchTableMouseClicked
        this.itemSearchTxt.setText("");
        String itemCode = itemSearchTable.getValueAt(itemSearchTable.getSelectedRow(), 1).toString();
        itemCodeTxt.setText(itemSearchTable.getValueAt(itemSearchTable.getSelectedRow(), 1).toString());
//        stockItemNameCmbx.setSelectedItem(itemSearchTable.getValueAt(itemSearchTable.getSelectedRow(), 0).toString());
        itemDescriptionTxt.setText(itemSearchTable.getValueAt(itemSearchTable.getSelectedRow(), 0).toString());
        itemsSearchDialog.dispose();   // Add your handling code here:
    }//GEN-LAST:event_itemSearchTableMouseClicked

    private void itemSearchCloseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSearchCloseBtnActionPerformed
        this.itemsSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_itemSearchCloseBtnActionPerformed

    private void itemSearchTxt1CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_itemSearchTxt1CaretUpdate
        if (itemSearchTxt1.getCaretPosition() > 2) {

            itemSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select description||' '||strength AS product, item_code as product_id from st_stock_item WHERE (description ilike '%" + itemSearchTxt1.getText() + "%' OR item_code ILIKE '%" + itemSearchTxt1.getText() + "%') AND initcap(department) in (SELECT DISTINCT initcap(store_name) FROM st_main_stores WHERE upper(store_name) IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) UNION SELECT DISTINCT initcap(store_name) FROM st_stores WHERE patient_store = true AND upper(store_name) IN (SELECT upper(store_name) FROM st_stores WHERE st_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%'))) ORDER BY 1"));

            itemSearchScrollPane1.setViewportView(itemSearchTable1);

            System.out.println("Cannot sort out");

        }// Add your handling code here:
    }//GEN-LAST:event_itemSearchTxt1CaretUpdate

    private void itemSearchTable1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemSearchTable1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_itemSearchTable1MouseEntered

    private void itemSearchTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemSearchTable1MouseClicked
        // String itemCode1Txt = itemSearchTable1.getValueAt(itemSearchTable1.getSelectedRow(), 1).toString();
        itemCode1Txt.setText(itemSearchTable1.getValueAt(itemSearchTable1.getSelectedRow(), 1).toString());
//        itemDescriptionCmbx.setSelectedItem(itemSearchTable1.getValueAt(itemSearchTable1.getSelectedRow(), 0).toString());
        itemDescriptionTxt1.setText(itemSearchTable1.getValueAt(itemSearchTable1.getSelectedRow(), 0).toString());
        itemsSearchDialog1.dispose();   // Add your handling code here:
    }//GEN-LAST:event_itemSearchTable1MouseClicked

    private void itemSearchCloseBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSearchCloseBtn1ActionPerformed
        this.itemsSearchDialog1.dispose();        // Add your handling code here:
    }//GEN-LAST:event_itemSearchCloseBtn1ActionPerformed

    private void itemCodeTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_itemCodeTxtCaretUpdate

    }//GEN-LAST:event_itemCodeTxtCaretUpdate

    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        System.out.println("Showing dialog");
        java.awt.Point point = itemCodeTxt.getLocationOnScreen();
        itemsSearchDialog.setSize(700, 200);
        itemsSearchDialog.setLocation(point);
        itemsSearchDialog.setVisible(true);

        // Add your handling code here:
    }//GEN-LAST:event_searchButton1ActionPerformed

    private void itemCode1TxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_itemCode1TxtCaretUpdate

    }//GEN-LAST:event_itemCode1TxtCaretUpdate

    private void searchButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton2ActionPerformed

        System.out.println("Showing dialog");
        java.awt.Point point = itemCode1Txt.getLocationOnScreen();
        itemsSearchDialog1.setSize(700, 200);
        itemsSearchDialog1.setLocation(point);
        itemsSearchDialog1.setVisible(true);

        // Add your handling code here:
    }//GEN-LAST:event_searchButton2ActionPerformed

    private void stockValuationTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stockValuationTableMouseClicked

        storeNameCmbx.setSelectedItem(stockValuationTable.getValueAt(stockValuationTable.getSelectedRow(), 0));

        storeDashboardTabbedPane.setSelectedComponent(storeDetailedBalancesPanel);

        generateReportBtn.doClick();
        // TODO add your handling code here:
    }//GEN-LAST:event_stockValuationTableMouseClicked

    private void stockValuationTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stockValuationTableMouseEntered

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        // TODO add your handling code here:
    }//GEN-LAST:event_stockValuationTableMouseEntered

    private void stockValuationTableMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stockValuationTableMouseExited
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));        // TODO add your handling code here:
    }//GEN-LAST:event_stockValuationTableMouseExited

    private void storeDetailedBalancesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_storeDetailedBalancesTableMouseClicked

        storeDashboardTabbedPane.setSelectedComponent(stockAuditTrailPanel);

        itemTrailStoreCmbx.setSelectedItem(storeNameCmbx.getSelectedItem());

        itemCode1Txt.setText(storeDetailedBalancesTable.getValueAt(storeDetailedBalancesTable.getSelectedRow(), 0).toString());

        itemDescriptionTxt1.setText(storeDetailedBalancesTable.getValueAt(storeDetailedBalancesTable.getSelectedRow(), 1).toString());

        generateReportBtn.doClick();

        // TODO add your handling code here:
    }//GEN-LAST:event_storeDetailedBalancesTableMouseClicked

    private void storeDetailedBalancesTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_storeDetailedBalancesTableMouseEntered
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));        // TODO add your handling code here:
    }//GEN-LAST:event_storeDetailedBalancesTableMouseEntered

    private void storeDetailedBalancesTableMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_storeDetailedBalancesTableMouseExited
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));           // TODO add your handling code here:
    }//GEN-LAST:event_storeDetailedBalancesTableMouseExited

    private void storesAuditTrailTableMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_storesAuditTrailTableMouseExited
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));         // TODO add your handling code here:
    }//GEN-LAST:event_storesAuditTrailTableMouseExited

    private void storesAuditTrailTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_storesAuditTrailTableMouseEntered
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));          // TODO add your handling code here:
    }//GEN-LAST:event_storesAuditTrailTableMouseEntered

    private void storesAuditTrailTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_storesAuditTrailTableMouseClicked
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        com.afrisoftech.hospinventory.StockLedgerStockControlCardNew policy = new com.afrisoftech.hospinventory.StockLedgerStockControlCardNew();

        policy.StockLedgerStockControlCardNew(connectDB, this.startDatePicker.getDate(), this.endDatePicker.getDate(), itemCode1Txt.getText(), this.itemTrailStoreCmbx.getSelectedItem().toString(), itemDescriptionTxt1.getText()); //, procurementMethodCmbx.getSelectedItem()
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        // TODO add your handling code here:
    }//GEN-LAST:event_storesAuditTrailTableMouseClicked

    private javax.swing.table.TableModel getReorderTableModel() {
        java.util.Vector rowDataVector = new java.util.Vector(1, 1);

        java.util.Vector columnNamesVector = new java.util.Vector(1, 1);
        columnNamesVector.addElement("Item Name");
        columnNamesVector.addElement("Item Code");
        columnNamesVector.addElement("Consumption Quantity");
        columnNamesVector.addElement("Consumption Average");
        columnNamesVector.addElement("Current Stock Level");
        columnNamesVector.addElement("Optimum Stock Level");
        columnNamesVector.addElement("Below Re-Order Level");
        columnNamesVector.addElement("Quantity To Order");
        try {
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT DISTINCT item_code, description FROM st_stock_item WHERE  upper(department) IN (SELECT DISTINCT upper(store_name) FROM st_main_stores WHERE upper(store_name) IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) UNION SELECT DISTINCT upper(store_name) FROM st_stores WHERE patient_store = true AND upper(store_name) IN (SELECT upper(store_name) FROM st_stores WHERE st_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) ORDER BY 1) ORDER BY 1");

            java.sql.ResultSet rset = pstmt.executeQuery();

            while (rset.next()) {
                java.util.Vector columnDataVector = new java.util.Vector(1, 1);
                System.out.println("Row : [" + rset.getString(1) + "]");
                columnDataVector.addElement(rset.getString(2));
                columnDataVector.addElement(rset.getString(1));
                columnDataVector.addElement(InventoryLevels.getConsumptionNumbers(rset.getString(1)));
                columnDataVector.addElement(InventoryLevels.getAverageConsumption(rset.getString(1)));
                columnDataVector.addElement(InventoryLevels.getStockLevel(rset.getString(1)));
                columnDataVector.addElement(InventoryLevels.getOptimumStockLevel(rset.getString(1)));
                columnDataVector.addElement(InventoryLevels.getReorderStatus(rset.getString(1)));
                columnDataVector.addElement(InventoryLevels.getReOrderQuantity(rset.getString(1)));
                rowDataVector.addElement(columnDataVector);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        return new javax.swing.table.DefaultTableModel(rowDataVector, columnNamesVector);
    }

    private javax.swing.table.TableModel getReorderTableModel(String storeName) {
        java.util.Vector rowDataVector = new java.util.Vector(1, 1);

        java.util.Vector columnNamesVector = new java.util.Vector(1, 1);
        columnNamesVector.addElement("Item Name");
        columnNamesVector.addElement("Item Code");
        columnNamesVector.addElement("Consumption Quantity");
        columnNamesVector.addElement("Consumption Average");
        columnNamesVector.addElement("Current Stock Level");
        columnNamesVector.addElement("Optimum Stock Level");
        columnNamesVector.addElement("Below Re-Order Level");
        columnNamesVector.addElement("Quantity To Order");
        try {
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT DISTINCT item_code, description FROM st_stock_item WHERE  upper(department) IN (SELECT DISTINCT upper(store_name) FROM st_main_stores WHERE upper(store_name) IN (SELECT upper(store_name) FROM st_main_stores WHERE st_main_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) UNION SELECT DISTINCT upper(store_name) FROM st_stores WHERE patient_store = true AND upper(store_name) IN (SELECT upper(store_name) FROM st_stores WHERE st_stores.classification = (SELECT classification FROM st_stores_type  WHERE store_type_description ilike '%" + storeTypeCmbx.getSelectedItem() + "%')) ORDER BY 1) ORDER BY 1");

            java.sql.ResultSet rset = pstmt.executeQuery();

            while (rset.next()) {
                java.util.Vector columnDataVector = new java.util.Vector(1, 1);
                System.out.println("Row : [" + rset.getString(1) + "]");
                columnDataVector.addElement(rset.getString(2));
                columnDataVector.addElement(rset.getString(1));
                columnDataVector.addElement(InventoryLevels.getStoreConsumptionNumbers(storeName, rset.getString(1)));
                columnDataVector.addElement(InventoryLevels.getStoreAverageConsumption(storeName, rset.getString(1)));
                columnDataVector.addElement(InventoryLevels.getStoreStockLevel(storeName, rset.getString(1)));
                columnDataVector.addElement(InventoryLevels.getStoreOptimumStockLevel(storeName, rset.getString(1)));
                columnDataVector.addElement(InventoryLevels.getStoreReorderStatus(storeName, rset.getString(1)));
                columnDataVector.addElement(InventoryLevels.getStoreReOrderQuantity(storeName, rset.getString(1)));
                rowDataVector.addElement(columnDataVector);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        return new javax.swing.table.DefaultTableModel(rowDataVector, columnNamesVector);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel StoreBalancesPanel;
    private javax.swing.JFormattedTextField aThresholdTxt;
    private javax.swing.JFormattedTextField aThresholdTxt1;
    private javax.swing.JScrollPane abcAnalysisJscrl;
    private javax.swing.JPanel abcAnalysisPanel;
    private javax.swing.JTable abcAnalysisTable;
    private javax.swing.JPanel abcPanel;
    private javax.swing.JPanel abcPanel1;
    private javax.swing.JFormattedTextField bThresholdTxt;
    private javax.swing.JFormattedTextField bThresholdTxt1;
    private javax.swing.JPanel bodyPanel;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JFormattedTextField cThresholdTxt;
    private javax.swing.JFormattedTextField cThresholdTxt1;
    private javax.swing.JButton closeFormBtn;
    private javax.swing.JPanel consumptionPanel;
    private javax.swing.JScrollPane consumptionScrollPane;
    private javax.swing.JComboBox consumptionStoreNameCmbx;
    private javax.swing.JTable consumptionTable;
    private javax.swing.JTextField detailedStoreMonetaryValueTxt;
    private com.afrisoftech.lib.DatePicker endDatePicker;
    private javax.swing.JPanel expiryReportPanel;
    private javax.swing.JScrollPane expiryScrollPane;
    private javax.swing.JTable expiryTable;
    private javax.swing.JButton generateReportBtn;
    private javax.swing.JPanel grnPanel;
    private javax.swing.JTable grnReportTable;
    private javax.swing.JScrollPane grnScrollPane;
    private javax.swing.JComboBox grnStoreNameCmbx;
    private javax.swing.JTextField grnTotalsTxt;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JPanel itemBalancesPanel;
    private javax.swing.JScrollPane itemBalancesScrollPane;
    private javax.swing.JTable itemBalancesTable;
    private javax.swing.JTextField itemCode1Txt;
    private javax.swing.JTextField itemCodeTxt;
    private javax.swing.JTextField itemDescriptionTxt;
    private javax.swing.JTextField itemDescriptionTxt1;
    private javax.swing.JTextField itemQuantityBalanceTxt;
    private javax.swing.JButton itemSearchCloseBtn;
    private javax.swing.JButton itemSearchCloseBtn1;
    private javax.swing.JPanel itemSearchPanel;
    private javax.swing.JPanel itemSearchPanel1;
    private javax.swing.JScrollPane itemSearchScrollPane;
    private javax.swing.JScrollPane itemSearchScrollPane1;
    private javax.swing.JTable itemSearchTable;
    private javax.swing.JTable itemSearchTable1;
    private javax.swing.JTextField itemSearchTxt;
    private javax.swing.JTextField itemSearchTxt1;
    private javax.swing.JComboBox itemTrailStoreCmbx;
    private javax.swing.JDialog itemsSearchDialog;
    private javax.swing.JDialog itemsSearchDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel61;
    private javax.swing.JPanel jPanel62;
    private javax.swing.JScrollPane movementAnalysisJscrl;
    private javax.swing.JPanel movementAnalysisPanel;
    private javax.swing.JTable movementAnalysisTable;
    private javax.swing.JComboBox<String> procurementMethodCmbx;
    private javax.swing.JButton refreshReportBtn;
    private javax.swing.JScrollPane reorderLevelJscrl;
    private javax.swing.JPanel reorderLevelPanel;
    private javax.swing.JTable reorderLevelTable;
    private javax.swing.JButton searchButton1;
    private javax.swing.JButton searchButton2;
    private javax.swing.JLabel spacerLabel;
    private javax.swing.JComboBox staffAccountCmbx;
    private javax.swing.JLabel staffAccountLbl;
    private com.afrisoftech.lib.DatePicker startDatePicker;
    private javax.swing.JPanel stockAdjustmentsAuditTrailPanel;
    private javax.swing.JPanel stockAuditTrailPanel;
    private javax.swing.JScrollPane stockValuationScrollPane;
    private javax.swing.JTable stockValuationTable;
    private javax.swing.JTabbedPane storeDashboardTabbedPane;
    private javax.swing.JPanel storeDetailedBalancesPanel;
    private javax.swing.JScrollPane storeDetailedBalancesScrollPane;
    private javax.swing.JTable storeDetailedBalancesTable;
    private javax.swing.JTextField storeItemBalanceTxt;
    private javax.swing.JComboBox storeNameCmbx;
    private javax.swing.JComboBox storeTypeCmbx;
    private javax.swing.JScrollPane storesAdjustmentsAuditScrollPane;
    private javax.swing.JTable storesAdjustmentsAuditTrailTable;
    private javax.swing.JScrollPane storesAuditScrollPane;
    private javax.swing.JTable storesAuditTrailTable;
    private javax.swing.JTextField storesBalancesTxt;
    private javax.swing.JComboBox storesCmbx;
    private javax.swing.JLabel storesNameLbl;
    private javax.swing.JLabel storesNameReorderLbl;
    private javax.swing.JComboBox storesReorderCmbx;
    private javax.swing.JComboBox supplierNameCmbx;
    private javax.swing.JLabel totalDeliveriesLbl;
    // End of variables declaration//GEN-END:variables
}
