/*
 * Requisitions.java
 *
 * Created on April 22, 2003, 5:12 PM
 */

package com.afrisoftech.hospinventory;

/**
 *
 * @author  root
 */
public class Items2OrderIntfr extends javax.swing.JInternalFrame implements java.lang.Runnable {
    javax.swing.JComboBox cmbox2 =null;
    javax.swing.JComboBox cmbox3 =null;
    javax.swing.JComboBox cmbox4 =null;
    
    javax.swing.JSpinner dateSpinner = null;
    javax.swing.JSpinner dateSpinner1 = null;
    
    
    java.lang.Thread getListThread;
    
    java.sql.Connection connectDB = null;
    
    boolean getList;
    
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    
    
    public Items2OrderIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {
        
        
        
        connectDB = connDb;
        
        pConnDB = pconnDB;
        
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        postbtn = new javax.swing.JButton();
        resetbtn = new javax.swing.JButton();
        cancelbtn = new javax.swing.JButton();
        exitbtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new com.afrisoftech.dbadmin.JTable();
        jPanel1 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Items that have reached re-order level");
        setVisible(true);
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        postbtn.setMnemonic('s');
        postbtn.setText("Save items to order");
        postbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postbtnActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(postbtn, gridBagConstraints);

        resetbtn.setText("Reset");
        resetbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetbtnActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(resetbtn, gridBagConstraints);

        cancelbtn.setMnemonic('l');
        cancelbtn.setText("Clear");
        cancelbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelbtnActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(cancelbtn, gridBagConstraints);

        exitbtn.setMnemonic('c');
        exitbtn.setText("Close");
        exitbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitbtnActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(exitbtn, gridBagConstraints);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel3.add(jLabel5, gridBagConstraints);

        jButton1.setMnemonic('P');
        jButton1.setText("Print items to order");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton1, gridBagConstraints);

        jButton2.setText("Remove Row");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel4.add(jPanel3, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Total analysis of requisitions received"));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Desc.", "Units", "Qty In Stock", "Min Stock", "Reorder Level", "Max Stock", "Min. Order", "Qty. To Order"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(204, 204, 255));
        /*    try {

            crset2.setCommand("select description,units,stock,reorder_level,quantity,min_order AS quantity,reorder_level-stock as min_order,reorder_level-stock as min_order from analysed_requisation where reorder_level-stock > 0 order by description");
            //  crset2.setCommand("select description,units,sum(quantity_in_stock) as quantity_in_stock,reorder_level,sum(quantity) as quantity,sum(reorder_level-quantity_in_stock) as min_order,sum(min_order) AS min_order from ungroup_analyse_requisation group by description,units,reorder_level");

            crset2.setConnectionSource(pConnDB);

            crset2.execute();
            jTable1.setModel(new org.netbeans.lib.sql.models.TableModel(crset2, new org.netbeans.lib.sql.models.TableModel.Column[] {

                new org.netbeans.lib.sql.models.TableModel.Column("description", "Item", false),
                new org.netbeans.lib.sql.models.TableModel.Column("units", "Units", false),
                new org.netbeans.lib.sql.models.TableModel.Column("stock", "Qty In Stock", false),
                new org.netbeans.lib.sql.models.TableModel.Column("reorder_level", "Reorder Level", false),
                new org.netbeans.lib.sql.models.TableModel.Column("quantity", "Qty Ordered", false),
                new org.netbeans.lib.sql.models.TableModel.Column("min_order", "Min.Order", false),
                new org.netbeans.lib.sql.models.TableModel.Column("min_order", "Qty to Order", true)

            }));

            jScrollPane1.setViewportView(jTable1);
        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());

        }

        javax.swing.table.TableColumn column = null;
        for (int i = 0; i < 7; i++) {
            column = jTable1.getColumnModel().getColumn(i);
            if (i == 0) {

                column.setPreferredWidth(250); //sport column is bigger
            } else {
                if (i == 1) {
                    column.setPreferredWidth(100);
                } else {
                    //if (i == 2) {
                        column.setPreferredWidth(100);
                        // }  else
                    //column.setPreferredWidth(50);

                }
            }
        }
        */
        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel4.add(jPanel2, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(jCheckBox1);
        jCheckBox1.setText("View Requisations");
        jCheckBox1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jCheckBox1, gridBagConstraints);

        buttonGroup1.add(jCheckBox2);
        jCheckBox2.setText("Refresh");
        jCheckBox2.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jCheckBox2, gridBagConstraints);

        jLabel1.setText("Store Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        jComboBox1.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select distinct store_name from st_stores order by store_name"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jComboBox1, gridBagConstraints);

        buttonGroup2.add(jRadioButton1);
        jRadioButton1.setText("Analysis based on preset reorder level");
        jRadioButton1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel1.add(jRadioButton1, gridBagConstraints);

        buttonGroup2.add(jRadioButton2);
        jRadioButton2.setText("Analysis based on consumption average");
        jRadioButton2.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jRadioButton2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel4, gridBagConstraints);

        setBounds(0, 0, 740, 400);
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int rows2Delete = jTable1.getSelectedRowCount();
        
        int[] selectedRows = jTable1.getSelectedRows();
        
        if (rows2Delete < 1) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            
            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");
            
        } else {
            
            if (rows2Delete > 1) {
                
                for (int i = 0; i < selectedRows.length; i++) {
                    
                    
                    
                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable1.getModel();
                    
                    defTableModel.removeRow(selectedRows[i]);
                    
                }
                
                
                
            } else {
                
                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable1.getModel();
                
                defTableModel.removeRow(jTable1.getSelectedRow());
            }
        }        // Add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        AnalyseReqPdf policy = new AnalyseReqPdf();
        policy.AnalyseReqPdf(connectDB,jTable1);
        // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        for (int k = 0; k < jTable1.getRowCount(); k++ ) {
            for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                jTable1.getModel().setValueAt(null,k,r);
            }
        }        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed
    
    public java.lang.Object[] getListofActivities() {
        
        java.lang.Object[] listofActivities = null;
        
        java.util.Vector listActVector = new java.util.Vector(1,1);
        
        
        try {
            
            
            java.sql.Statement stmt1 = connectDB.createStatement();
            //  java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT item FROM stock_analysis EXCEPT select DISTINCT description from st_stock_item  where quantity_toorder > 0 order by item");// where trans_date BETWEEN (date('now') - '"+average+"'::int) AND date('now') and issuing > 0 order by item");
            
            // java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT item FROM stock_analysis EXCEPT select DISTINCT description from st_stock_item  where quantity_toorder > 0 order by item");// where trans_date BETWEEN (date('now') - '"+average+"'::int) AND date('now') and issuing > 0 order by item");
            if(jRadioButton2.isSelected()){
                java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT item FROM stock_analysis WHERE store_name ilike '"+jComboBox1.getSelectedItem().toString()+"%' order by item");
                
                while (rSet1.next()) {
                    listActVector.addElement(rSet1.getObject(1).toString());
                
                
                System.out.println("description"+rSet1.getObject(1).toString());
                }
            }else{
                
                if(jRadioButton1.isSelected()){
                    // java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT sb.description FROM stock_balance sb,st_stock_item st WHERE sb.department ilike '"+jComboBox1.getSelectedItem().toString()+"%' and sb.description = st.description and sb.qty <= st.reorder_level order by sb.description");
                    java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT sb.description FROM stockbalances sb ORDER BY sb.description");
                    
                    while (rSet1.next()) {
                        listActVector.addElement(rSet1.getObject(1).toString());
                    //}
                    
                    System.out.println("description"+rSet1.getObject(1).toString());
                    }
                }
            }
        }catch (java.sql.SQLException sqlExec) {
            
            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());
            
        }
        
        listofActivities = listActVector.toArray();
        System.out.println("Done list of activities ...");
        return listofActivities;
        
    }
    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        
        getList = true;
        
        getListThread = new java.lang.Thread(this, "get_list_Thread");
        
        getListThread.start();
        
        postbtn.setEnabled(true);
        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed
    
    private void exitbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitbtnActionPerformed
        this.dispose();        // Add your handling code here:
    }//GEN-LAST:event_exitbtnActionPerformed
    
    private void resetbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetbtnActionPerformed
        
        postbtn.setEnabled(false);
        //    this.getContentPane().removeAll();
        //    this.initComponents();
        // Add your handling code here:
    }//GEN-LAST:event_resetbtnActionPerformed
    
    private void cancelbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelbtnActionPerformed
        for (int k = 0; k < jTable1.getRowCount(); k++ ) {
            for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                jTable1.getModel().setValueAt(null,k,r);
            }
        }
        
        // Add your handling code here:
    }//GEN-LAST:event_cancelbtnActionPerformed
    
    private void postbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postbtnActionPerformed
        java.util.Calendar calendar = java.util.Calendar.getInstance();
        String req_no = null;
        long dateNow = calendar.getTimeInMillis();
        
        java.sql.Date datenowSql= new java.sql.Date(dateNow);
        
        System.out.println(datenowSql.toString());
        
        try {
            connectDB.setAutoCommit(false);
            java.sql.Statement pstmt1 = connectDB.createStatement();
            java.sql.ResultSet rs1 = pstmt1.executeQuery("select date_part('year',now())|| lpad(nextval('req_no_seq')::text,7,0::text),date('now')"); //from orders where supplier ='"+jTable1.getValueAt(i,4).toString()+"'");
            
            while (rs1.next()){
                req_no = rs1.getObject(1).toString();
            }
            
            //       java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_orders values(?, ?,?,round(?),?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            for (int i = 0; i < jTable1.getRowCount(); i++){
                if (jTable1.getModel().getValueAt(i,6) != null){
                 /*   pstmt.setObject(1,"-");
                    if (jTable1.getModel().getValueAt(i,1) == null){
                        pstmt.setString(3,"-");
                    }else{
                        pstmt.setObject(3,jTable1.getValueAt(i,1).toString());
                    }
                    pstmt.setObject(2,jTable1.getValueAt(i,0).toString());
                    pstmt.setObject(4,jTable1.getValueAt(i,6).toString());
                    pstmt.setString(5,"0.00");
                    pstmt.setObject(6,"0.00");
                    pstmt.setObject(7,"0.00");
                    pstmt.setString(8,"0.00");
                    pstmt.setObject(9,"0.00");
                    pstmt.setObject(10,"0.00");
                    pstmt.setObject(11,"false");
                    pstmt.setString(12,"0.00");
                    pstmt.setObject(13,"-");
                    pstmt.setObject(14,null);
                    pstmt.setObject(15,null);
                    pstmt.setString(16,"false");
                    pstmt.setObject(17,"-");
                    pstmt.setObject(18,"-");
                    pstmt.executeUpdate();
                  */
                    java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("UPDATE st_receive_requisation SET analysed ='true' WHERE item_description = '"+jTable1.getValueAt(i,0).toString()+"'");
                    pstmt2.executeUpdate();
                    
                    java.sql.PreparedStatement pstmt21 = connectDB.prepareStatement("UPDATE st_stock_item SET quantity_toorder = '"+new java.lang.Double(jTable1.getValueAt(i,7).toString())+"' WHERE description = '"+jTable1.getValueAt(i,0).toString()+"'");
                    pstmt21.executeUpdate();
                    
                }
            }
            
            
            connectDB.commit();
            
            connectDB.setAutoCommit(true);
            
            postbtn.setEnabled(false);
            jLabel5.setForeground(java.awt.Color.blue);
            jLabel5.setText("Insert successful");
        }   catch(java.sql.SQLException sq){
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());
            try {
                connectDB.rollback();
            }catch (java.sql.SQLException sql){
                javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_postbtnActionPerformed
    private void cmbox2ActionPerformed(java.awt.event.ActionEvent evt){
    /*  int i = jTable1.getSelectedRow();
      java.lang.Object res_cmbox2 = cmbox2.getSelectedItem();
     
      try {
             java.sql.Statement pstmt = connectDB.createStatement();
          java.sql.ResultSet rs = pstmt.executeQuery("select units from stock_item where description = '"+cmbox2.getSelectedItem()+"'");
          while (rs.next())
            jTable1.setValueAt(rs.getObject(1),i,2);
     
      } catch(java.sql.SQLException sqlex){
        System.out.println(sqlex.getMessage());
 }
     */
    }
    
    
    public void run() {
        
        while(getList) {
            
            runGetListThread();
            
            try {
                
                Thread.currentThread().sleep(100);
                
            } catch(java.lang.InterruptedException IntExec){
                
                javax.swing.JOptionPane.showMessageDialog(this, IntExec.getMessage(), "Interruption Error!", javax.swing.JOptionPane.ERROR_MESSAGE);
                
            }
            
            getList = false;
            
        }
        
    }
    
    public void runGetListThread() {
        for (int k = 0; k < jTable1.getRowCount(); k++ ) {
            for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                jTable1.getModel().setValueAt(null,k,r);
            }
        }
        int j = 0;
        //    int i = 0;
        int n = 0;
        float leadtime = 0;
        float averagese = 0;
        float quantityToOrder = 0;
        float ReoderLevel = 0;
        float sumQty = 0;
        int avgr = 0;
        float reorders = 0;
        float qtyInstock = 0;
        float balance = 0;
        float qtyReq = 0;
        float sumQty1 = 0;
        float requ = 0;
        float rlevel = 0;
        float rtime = 0;
        float orders = 0;
        float averageCons = 0;
        
     /*   try {
      
            java.sql.Statement stmtTab = connectDB.createStatement();
      
            java.sql.ResultSet rsetTab = stmtTab.executeQuery("select average_day::int,read_time,reorder_level from st_ordering_constants");
      
            while (rsetTab.next()) {
      
                averagese = rsetTab.getFloat(1);
                leadtime = rsetTab.getFloat(2);
                avgr = rsetTab.getInt(1);
                reorders = rsetTab.getFloat(3);
            }
      
            //  for (int y = 0; y < listofAct.length; y++) {
            //        java.lang.Object listofDays[] = this.getListofActivities(listofAct[y]);
      
            java.lang.Object listofDays[] = this.getListofActivities();
            for (int l = 0; l < listofDays.length; l++) {
                if(jRadioButton2.isSelected()){
                    java.sql.Statement stmtTable1 = connectDB.createStatement();
                    //     java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select item,units,sum(issuing) from st_sub_stores where item = '"+listofDays[l]+"' and trans_date::date BETWEEN (date('now') - '"+avgr+"'::int) AND date('now') and issuing>0 group by item,units");
      
                    java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select item,units,sum(round(quantity)),sum(round(reorder_level)),sum(round(read_time)) from stock_analysis where item = '"+listofDays[l]+"' AND store_name ilike '"+jComboBox1.getSelectedItem().toString()+"%' GROUP BY item,units");
      
                    //  java.sql.Statement stmtTableq = connectDB.createStatement();
                    //  java.sql.ResultSet rsetTable4 = stmtTableq.executeQuery("select count(item) from stock_analysis where item = '"+listofDays[l]+"'");
      
                    java.sql.Statement stmtTable11 = connectDB.createStatement();
                    java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("select sum(qty) from stock_balance_qty where description ilike '"+listofDays[l]+"' AND department ilike '"+jComboBox1.getSelectedItem().toString()+"%'");
      
                    java.sql.Statement stmtTable111 = connectDB.createStatement();
      
                    while (rsetTable1.next()) {
      
                        requ = rsetTable1.getFloat(3);
                        rlevel = rsetTable1.getFloat(4);
                        rtime = rsetTable1.getFloat(5);
      
      
                        orders = (rlevel)+(rtime);
                        while (rsetTable11.next()) {
      
                            qtyInstock = rsetTable11.getFloat(1);
                            if (orders > qtyInstock){
      
                                jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                                jTable1.setValueAt(rsetTable1.getObject(2), i, 1);
                                jTable1.setValueAt(rsetTable1.getObject(3), i, 2);
                                jTable1.setValueAt(rsetTable1.getObject(4), i, 3);
      
                                if (qtyInstock > 0){
                                    jTable1.setValueAt(new java.lang.Float(java.lang.String.valueOf(java.lang.Math.round(qtyInstock))), i, 4);
                                    qtyInstock = qtyInstock;
                                    //     java.sql.Statement stmtTable11A = connectDB.createStatement();
      
                                }else{
                                    jTable1.setValueAt(new java.lang.Float(java.lang.String.valueOf(java.lang.Math.round(0))), i, 4);
                                    qtyInstock = 0;
                                }
      
      
      
                                qtyReq = rsetTable1.getFloat(3);
                                averageCons = rsetTable1.getFloat(3)/averagese;
      
                                System.out.println(java.lang.Math.round(averageCons));
                                System.out.println("Lead time is ["+leadtime+"]");
                                quantityToOrder = java.lang.Math.round(averageCons*leadtime);
                                System.out.println("These are the items to order " +quantityToOrder);
                                //    jTable1.setValueAt(new java.lang.Float(java.lang.String.valueOf(java.lang.Math.round(averageCons*reorders))), i, 3);
      
      
                                if (jTable1.getValueAt(i, 3) !=null){
                                    // double reOrderLevel1 = java.lang.Double.parseDouble(jTable1.getValueAt(i, 3).toString());
                                    // if ((averageCons*reorders + quantityToOrder) > qtyInstock){
                                    if (orders > qtyInstock){
                                        // sumQty1 = java.lang.Math.round(averageCons*leadtime/reorders) - qtyInstock + quantityToOrder;
                                        sumQty1 = java.lang.Math.round(orders - qtyInstock);
                                        //sumQty1 = java.lang.Math.round(averageCons*reorders) - qtyInstock + quantityToOrder;
      
                                    }else{
                                        sumQty1 = 0;
                                    }
      
                                    if (sumQty1 > 0){
                                        jTable1.setValueAt(new java.lang.Float(sumQty1), i, 5);
                                        jTable1.setValueAt(new java.lang.Float(sumQty1), i, 6);
                                    }else{
      
                                        jTable1.setValueAt(new java.lang.Float(sumQty1*-1), i, 5);
                                        jTable1.setValueAt(new java.lang.Float(sumQty1*-1), i, 6);
      
                                    }
                                }
                                i++;
      
                            }
      
                        }
                    }
                }else{*/
        java.lang.Object listofDays[] = this.getListofActivities();
        float maxStock = 0;
        float minStock = 0;
        qtyInstock = 0;
        if(jRadioButton1.isSelected()){
            
            
            //  java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT description,'',sum(round(qty)) from stockbalances WHERE description ilike '"+listofDays[l]+"' AND department ilike '"+jComboBox1.getSelectedItem().toString()+"%' AND dates <= CURRENT_DATE GROUP BY description");
            //  java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT description,'',sum(round(qty)) from stockbalances WHERE description ilike '"+listofDays[l]+"' GROUP BY description");
/*            jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT sb.description,st.units AS unit_pack,CASE WHEN (sum(round(sb.qty)) < 1) THEN 0 ELSE sum(round(sb.qty)) END AS stock_balance," +
                    "'"+minStock+"'::numeric as min_stock,'"+ReoderLevel+"'::numeric as reorder_level,'"+maxStock+"'::numeric as max_stock,'"+requ+"'::numeric as min_order, " +
                    "'"+requ+"'::numeric as qty_to_order FROM stockbalances sb,stockitem st WHERE  sb.description = st.description" +
                    " AND st.department = '"+jComboBox1.getSelectedItem()+"' AND sb.store_name = '"+jComboBox1.getSelectedItem()+"' GROUP BY sb.description,st.units HAVING sum(round(sb.qty)) < sum(st.reorder_level-st.quantity_toorder)"));
*/
            jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT st.department as cost_centre,sb.store_name AS store_name, sb.description,st.units AS unit_pack,CASE WHEN (sum(round(sb.qty)) < 1) THEN 0 ELSE sum(round(sb.qty)) END AS stock_balance," +
                    "'"+minStock+"'::numeric as min_stock,'"+ReoderLevel+"'::numeric as reorder_level,'"+maxStock+"'::numeric as max_stock,'"+requ+"'::numeric as min_order, " +
                    "'"+requ+"'::numeric as qty_to_order FROM stockbalances sb,stockitem st WHERE  sb.description = st.description" +
                    "  GROUP BY st.department,sb.store_name, sb.description,st.units HAVING sum(round(sb.qty)) < sum(st.reorder_level-st.quantity_toorder)"));
            
            if(jTable1.getRowCount() > 0){
                        try {
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO funsoft_messages("+
                    "message_recipient, message_detail) VALUES (?, ?)");
            pstmt.setString(1,"Admin");
            pstmt.setString(2,"There are "+jTable1.getRowCount()+" stock items to order!");
            pstmt.execute();
           // javax.swing.JOptionPane.showMessageDialog(this, "Message sent to user : ["+messageRecipientCmbx.getSelectedItem().toString().toUpperCase()+"].");
        } catch (Exception ex) {
            ex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this,ex.getMessage());
        }
        
            }
            
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true
            };
            javax.swing.table.TableColumn column = null;
            for (int s = 0; s < 7; s++) {
                column = jTable1.getColumnModel().getColumn(s);
                if (s == 0) {
                    
                    column.setPreferredWidth(350); //sport column is bigger
                    // } else {
                    //     if (s == 1) {
                    //         column.setPreferredWidth(100);
                } else {
                    //if (i == 2) {
                    column.setPreferredWidth(100);
                    // }  else
                    //column.setPreferredWidth(50);
                    
                    //  }
                }
            }
            
            
            try{
                for (int i = 0; i < jTable1.getRowCount(); i++){
                    java.sql.Statement stmtTable111 = connectDB.createStatement();
                    java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT reorder_level,max_stock,min_stock from stockitem WHERE description ilike '"+jTable1.getValueAt(i, 0)+"'");// AND department ilike '"+jComboBox1.getSelectedItem().toString()+"%'");
                    
                    while (rsetTable111.next()) {
                        rlevel = rsetTable111.getFloat(1);
                        maxStock = rsetTable111.getFloat(2);
                        minStock = rsetTable111.getFloat(3);
                        qtyInstock = Float.parseFloat(jTable1.getValueAt(i,2).toString());
                        
                        jTable1.setSelectionBackground(java.awt.Color.PINK);
                        jTable1.setValueAt(rsetTable111.getObject(3), i, 3);
                        jTable1.setValueAt(rsetTable111.getObject(1), i, 4);
                        jTable1.setValueAt(rsetTable111.getObject(2), i, 5);
                        
                        if(qtyInstock > 0){
                            jTable1.setValueAt(new java.lang.Float(rlevel-qtyInstock), i, 6);
                            if(maxStock > 0){
                                jTable1.setValueAt(new java.lang.Float(maxStock-qtyInstock), i, 7);
                            }else{
                                jTable1.setValueAt(new java.lang.Float(rlevel), i, 7);
                            }
                        }else{
                            jTable1.setValueAt(new java.lang.Float(rlevel), i, 6);
                            if(maxStock > 0){
                                jTable1.setValueAt(new java.lang.Float(maxStock), i, 7);
                            }else{
                                jTable1.setValueAt(new java.lang.Float(rlevel), i, 7);
                            }
                        }
                    }
                }
                
            } catch(java.sql.SQLException sqlExec) {
                
                sqlExec.printStackTrace();
                
                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
                
            }
            
        }            //  }
    }
    
    
  /*  javax.swing.table.TableColumn column = null;
    for (int s = 0; s < 7; s++) {
        column = jTable1.getColumnModel().getColumn(s);
        if (s == 0) {
   
            column.setPreferredWidth(300); //sport column is bigger
            // } else {
            //     if (s == 1) {
            //         column.setPreferredWidth(100);
        } else {
            //if (i == 2) {
            column.setPreferredWidth(100);
            // }  else
            //column.setPreferredWidth(50);
   
            //  }
        }
    }
   */
    
    //        jScrollPane1.setViewportView(jTable1);
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton cancelbtn;
    private javax.swing.JButton exitbtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    public static javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    public static javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    public static javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    public static javax.swing.JButton postbtn;
    private javax.swing.JButton resetbtn;
    // End of variables declaration//GEN-END:variables
    
}
