/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * BarCodeGeneratorIntfr.java
 *
 * Created on Sep 5, 2011, 11:18:17 AM
 */
package com.afrisoftech.hospinventory;

import javax.swing.*;
import net.sourceforge.barbecue.BarcodeFactory;
import net.sourceforge.barbecue.Barcode;
import net.sourceforge.barbecue.BarcodeException;
import net.sourceforge.barbecue.BarcodeImageHandler;
import net.sourceforge.barbecue.output.OutputException;


import java.awt.image.BufferedImage;
import java.awt.*;
import java.io.*;

import net.sourceforge.barbecue.BarcodeImageHandler;
import net.sourceforge.barbecue.formatter.SVGFormatter;
import net.sourceforge.barbecue.formatter.FormattingException;

import javax.swing.event.DocumentListener;
import javax.swing.event.DocumentEvent;
import javax.swing.*;
import java.io.File;
import java.io.FileWriter;
import java.io.OutputStream;
import java.lang.reflect.Method;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.print.PrinterJob;

/**
 *
 * @author Mustaphatwo
 */
public class BarCodeGeneratorIntfr extends javax.swing.JInternalFrame {

    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    java.awt.GridBagConstraints gridBagConstraints1;
    private static final String[] barcodeData = {
        "Code128", "Creates a Code 128 barcode that dynamically switches between character sets to "
        + "give the smallest possible encoding. This will encode  all numeric characters, "
        + "upper and lower case alpha characters and control characters  from the standard "
        + "ASCII character set. The size of the barcode created will be the  smallest possible "
        + "for the given data, and use of this \"optimal\" encoding will  generally give smaller "
        + "barcodes than any of the other 3 \"vanilla\" encodings.",
        "Code128A", "Creates a Code 128 barcode using the A character set. This will encode  all numeric characters, upper case alpha characters and control characters  from the standard ASCII character set. The Code 128 barcode supports on-the-fly  character set changes using the appropriate code change symbol. The type A barcode  also supports a one character 'shift' to set B.",
        "Code128B", "Creates a Code 128 barcode using the B character set. This will encode  all numeric characters and upper and lower case alpha characters  from the standard ASCII character set. The Code 128 barcode supports on-the-fly  character set changes using the appropriate code change symbol. The type B barcode  also supports a one character 'shift' to set A.",
        "Code128C", "Creates a Code 128 barcode using the C character set. This will encode  only numeric characters in a double density format (e.g. 1 digit in the barcode  encodes two digits in the data). The Code 128 barcode supports on-the-fly  character set changes using the appropriate code change symbol. No shifts are  possible with the type C barcode.",
        "EAN128", "Creates an EAN128 barcode",
        "GlobalTradeItemNumber", "Creates a Global Treade Item Number (GTIN) based on the UCC/EAN 128 symbology.",
        "SCC14ShippingCode", "Creates an SCC-14 shipping code number based on the UCC/EAN 128 symbology.",
        "ShipmentIdentificationNumber", "Creates a shipment identification number based on the UCC/EAN 128 symbology.",
        "SSCC18", "Creates an SSCC-18 number based on the UCC/EAN 128 symbology.",
        "UCC128", "Creates a UCC 128 barcode. This will encode numeric characters and must  include the correct application identifier for the application domain in which  you wish to use the barcode.",
        "USPS", "Creates a US Postal Service barcode based on the UCC/EAN 128 symbology.",
        /*"Code39", "Creates a Code 39 barcode.",
        "Codabar", "Creates a Codabar barcode.",*/
        "PDF417", "Creates a PDF417 (2 dimensional) barcode."
    };
    Barcode barcode = null;

    /** Creates new form BarCodeGeneratorIntfr */
    public BarCodeGeneratorIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;



        initComponents();

        //   this.usingBarbecueAsSwingComponent();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        barcodeTypeCmbx = new JComboBox(getBarcodeTypes());
        stockItemCmbx = new javax.swing.JComboBox();
        stockItemLbl = new javax.swing.JLabel();
        barcodeTypeLbl = new javax.swing.JLabel();
        barCodePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        buttonPanel = new javax.swing.JPanel();
        printBarCodeBtn = new javax.swing.JButton();
        closeFormBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Barcode Generator");
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        mainPanel.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Item Description and Bar-Code type"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        barcodeTypeCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barcodeTypeCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(barcodeTypeCmbx, gridBagConstraints);

        stockItemCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT tag_no from asset_registration ORDER BY tag_no"));
        stockItemCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockItemCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(stockItemCmbx, gridBagConstraints);

        stockItemLbl.setText("Stock/Inventory/Asset Item");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(stockItemLbl, gridBagConstraints);

        barcodeTypeLbl.setText("Barcode Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(barcodeTypeLbl, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        mainPanel.add(jPanel1, gridBagConstraints);

        barCodePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Display Panel for bar-codes"));
        barCodePanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        barCodePanel.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 50.0;
        mainPanel.add(barCodePanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 100.0;
        getContentPane().add(mainPanel, gridBagConstraints);

        buttonPanel.setLayout(new java.awt.GridBagLayout());

        printBarCodeBtn.setText("Print Bar-Code");
        printBarCodeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printBarCodeBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(printBarCodeBtn, gridBagConstraints);

        closeFormBtn.setText("Close");
        closeFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(closeFormBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(buttonPanel, gridBagConstraints);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-756)/2, (screenSize.height-364)/2, 756, 364);
    }// </editor-fold>//GEN-END:initComponents

    private void printBarCodeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printBarCodeBtnActionPerformed
        barcodeSelected();
        try {
            // Barcode b = BarcodeFactory.createCode128("Hello");
            PrinterJob job = PrinterJob.getPrinterJob();
            System.out.print(barcode);
            job.setPrintable(barcode);
            if (job.printDialog()) {
               //javax.print.attribute.PrintRequestAttributeSet attributeSet = job.
                job.print();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_printBarCodeBtnActionPerformed

    private void closeFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFormBtnActionPerformed

        this.dispose();

        // TODO add your handling code here:
    }//GEN-LAST:event_closeFormBtnActionPerformed

    private void stockItemCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockItemCmbxActionPerformed
        barcodeSelected();
        //  this.usingBarbecueAsSwingComponent();

        // TODO add your handling code here:
    }//GEN-LAST:event_stockItemCmbxActionPerformed

    private void barcodeTypeCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barcodeTypeCmbxActionPerformed

        barcodeSelected();
        // TODO add your handling code here:
    }//GEN-LAST:event_barcodeTypeCmbxActionPerformed

    public void usingBarbecueAsSwingComponent() {
        JPanel panel = new JPanel();

        // Always get a Barcode from the BarcodeFactory

        try {
            barcode = BarcodeFactory.createCode128B(this.stockItemCmbx.getSelectedItem().toString());
        } catch (BarcodeException e) {
            // Error handling
        }

        /* Because Barcode extends Component, you can use it just like any other
         * Swing component. In this case, we can add it straight into a panel
         * and it will be drawn and layed out according to the layout of the panel.
         */

        //  jScrollPane1.setViewportView(barcode);


    }

    public void drawingBarcodeDirectToGraphics() throws BarcodeException, OutputException {
        // Always get a Barcode from the BarcodeFactory
        barcode = BarcodeFactory.createCode128B("My Barcode");

        // We are created an image from scratch here, but for printing in Java, your
        // print renderer should have a Graphics internally anyway
        BufferedImage image = new BufferedImage(100, 100, BufferedImage.TYPE_BYTE_GRAY);
        
        //image.
        // We need to cast the Graphics from the Image to a Graphics2D - this is OK
        Graphics2D g = (Graphics2D) image.getGraphics();
        
       

        // Barcode supports a direct draw method to Graphics2D that lets you position the
        // barcode on the canvas
        barcode.invalidate();
        barcode.draw(g, 5, 10);
        barcode.setBarHeight(50);
        barcode.setBarWidth(50);
        barcode.validate();
    }

    public void outputtingBarcodeAsPNG() throws BarcodeException {
        // get a Barcode from the BarcodeFactory
        barcode = BarcodeFactory.createCode128B("My Barcode");

        try {
            File f = new File("mybarcode.png");

            // Let the barcode image handler do the hard work
            BarcodeImageHandler.savePNG(barcode, f);
        } catch (Exception e) {
            // Error handling here
        }
    }

    private String[] getBarcodeTypes() {
        String[] result = new String[barcodeData.length / 2];
        for (int i = 0; i < barcodeData.length; i += 2) {
            result[i / 2] = barcodeData[i];
        }
        return result;
    }

    private void barcodeSelected() {
        try {
            syncBarcode();
        } catch (BarcodeException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    private void setBarcode(final Barcode bar) {


        /*
        if(barcodePanel.getComponentCount() > 0) {
        Rectangle existingBounds = ((Barcode) barcodePanel.getComponent(0)).getBounds();
        barcodePanel.removeAll();
        barcodePanel.add(bar);
        Rectangle newBounds = ((Barcode) bar).getBounds();
        existingBounds.add(newBounds);
        barcodePanel.repaint(existingBounds);
        } else {
        barcodePanel.add(bar);
        barcodePanel.revalidate();
        }
         *
         */
        jScrollPane1.setViewportView(bar);
    }

    private void syncBarcode() throws BarcodeException {
        String currentValue = barcodeTypeCmbx.getSelectedItem().toString();//(String) barcodeSelection.getSelectedItem();
        String barcodeText = stockItemCmbx.getSelectedItem().toString(); //dataField.getText();

        if ((barcodeText == null) || (barcodeText.length() == 0)) {
            barcodeText = " ";
        }

        /* boolean appIDVisible= currentValue.equals("UCC128");
        if(appIDVisible != appIDTextField.isVisible()) {
        appIDTextField.setVisible(appIDVisible);
        appIDLabel.setVisible(appIDVisible);
        }
         */
        if (currentValue.equals("UCC128")) {
            barcode = BarcodeFactory.createUCC128(currentValue/*appIDTextField.getText()*/, barcodeText);
            setBarcode(barcode);
        } else if (currentValue.equals("Code39")) {
            barcode = BarcodeFactory.createCode39(barcodeText, true);
            setBarcode(barcode);
        } else {
            try {
                Class factory = net.sourceforge.barbecue.BarcodeFactory.class;
                Method createMethod = factory.getMethod("create" + currentValue, new Class[]{"".getClass()});
                System.out.print("Method Generated : "+createMethod.toString());
                Object result = createMethod.invoke(null, new Object[]{barcodeText});
                 System.out.print("Barcode Generated : "+result.toString());
                 barcode = (Barcode)result;
                setBarcode(barcode);
                //barcode.
            } catch (NoSuchMethodException e) {
                throw new RuntimeException(e.getMessage());
            } catch (IllegalAccessException e) {
                throw new RuntimeException(e.getMessage());
            } catch (java.lang.reflect.InvocationTargetException e) {
                throw new RuntimeException(e.getMessage());
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel barCodePanel;
    private javax.swing.JComboBox barcodeTypeCmbx;
    private javax.swing.JLabel barcodeTypeLbl;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton closeFormBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton printBarCodeBtn;
    private javax.swing.JComboBox stockItemCmbx;
    private javax.swing.JLabel stockItemLbl;
    // End of variables declaration//GEN-END:variables
}
