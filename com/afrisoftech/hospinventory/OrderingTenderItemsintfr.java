/*
 * Requisitions.java
 *
 * Created on April 22, 2003, 5:12 PM
 */
package com.afrisoftech.hospinventory;

import com.afrisoftech.dbadmin.TableModel;
import com.afrisoftech.dbadmin.setFixedColumns;
import com.afrisoftech.lib.ClearTable;
import com.afrisoftech.lib.ComboBoxModel;
import com.afrisoftech.lib.DBObject;
import com.afrisoftech.lib.GetItemInfo;
import com.afrisoftech.lib.TableColumnTotal;
import com.afrisoftech.lib.UserName;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
//import org.openide.util.Exceptions;
//ACABAS DE DECIR QUE NO ENTIENDE
//BIEN. PERO NECCESITAS APRENDER ESPANOL HERMANO

/**
 *
 * @author root
 */
public class OrderingTenderItemsintfr extends javax.swing.JInternalFrame {

    javax.swing.JComboBox cmbox = null;
    javax.swing.JSpinner dateSpinner = null;
    double resVal1 = 0.00;
    double resVal11 = 0.00;
    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    javax.swing.table.TableModel tableModel;
    javax.swing.JComboBox cmbox5 = new javax.swing.JComboBox();
    private double order_balance;
    private Double balance_ord;
    private double totalLPOamount;
    private String remark;

    public OrderingTenderItemsintfr(java.sql.Connection connDb) {

        connectDB = connDb;

        //  pConnDB = pconnDB;
        initComponents();
        setFixedColumns.DisallowReordering(itemsTbl);
        jTabbedPane1.setSelectedIndex(1);

        dateDuepckr.setDate(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton9 = new javax.swing.JButton();
        searchButton2 = new javax.swing.JButton();
        jSearchDialog1 = new javax.swing.JDialog();
        jSearchPanel1 = new javax.swing.JPanel();
        jTextField1111 = new javax.swing.JTextField();
        jSearchScrollPane1 = new javax.swing.JScrollPane();
        jSearchTable1 = new com.afrisoftech.dbadmin.JTable();
        jButton51 = new javax.swing.JButton();
        itemsOnReqDialog = new javax.swing.JDialog();
        jSearchPanel11 = new javax.swing.JPanel();
        prqSearchTxt = new javax.swing.JTextField();
        jSearchScrollPane11 = new javax.swing.JScrollPane();
        prqSearchtbl = new com.afrisoftech.dbadmin.JTable();
        jButton511 = new javax.swing.JButton();
        SearchTenderLpo = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        searchtlpo = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        awardedtenderNostbl = new com.afrisoftech.dbadmin.JTable();
        jButton10 = new javax.swing.JButton();
        searchVote = new javax.swing.JDialog();
        jSearchPanel3 = new javax.swing.JPanel();
        searchtlpo1 = new javax.swing.JTextField();
        jSearchScrollPane3 = new javax.swing.JScrollPane();
        votesTbl = new com.afrisoftech.dbadmin.JTable();
        jButton11 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        waitingPRs = new javax.swing.JTable();
        refreshbtn = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        supplierscmbx = new javax.swing.JComboBox();
        orderDatepckr = new com.afrisoftech.lib.DatePicker();
        jLabel4 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        dateDuepckr = new com.afrisoftech.lib.DatePicker();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel1311 = new javax.swing.JLabel();
        jPanel61 = new javax.swing.JPanel();
        prqTxt = new javax.swing.JTextField();
        irqBtnSearch = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        storenametxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel62 = new javax.swing.JPanel();
        TenderNoTxt = new javax.swing.JTextField();
        tenderSearchbtn = new javax.swing.JButton();
        jComboBox3 = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        doctypecmbx = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        orderNotxt = new javax.swing.JTextField();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jPanel63 = new javax.swing.JPanel();
        TenderNoTxt1 = new javax.swing.JTextField();
        tenderSearchbtn1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        postbtn = new javax.swing.JButton();
        cancelbtn = new javax.swing.JButton();
        exitbtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        itemsTbl = new com.afrisoftech.dbadmin.JTable(){

            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Boolean.class,java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, true, false, true, true, false, true, true,true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        jLabel1 = new javax.swing.JLabel();
        totalSumtxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        discountTxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        vatTxt = new javax.swing.JTextField();

        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(jTextField111, gridBagConstraints);

        jSearchTable.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton9.setText("Dispose");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        searchButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton2.setToolTipText("Search");
        searchButton2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton2.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton2.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton2ActionPerformed(evt);
            }
        });

        jSearchDialog1.setModal(true);
        jSearchDialog1.setUndecorated(true);
        jSearchDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel1.setLayout(new java.awt.GridBagLayout());

        jTextField1111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel1.add(jTextField1111, gridBagConstraints);

        jSearchTable1.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable1.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable1MouseClicked(evt);
            }
        });
        jSearchScrollPane1.setViewportView(jSearchTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel1.add(jSearchScrollPane1, gridBagConstraints);

        jButton51.setText("Close");
        jButton51.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton51ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel1.add(jButton51, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog1.getContentPane().add(jSearchPanel1, gridBagConstraints);

        itemsOnReqDialog.setModal(true);
        itemsOnReqDialog.setUndecorated(true);
        itemsOnReqDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel11.setLayout(new java.awt.GridBagLayout());

        prqSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                prqSearchTxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel11.add(prqSearchTxt, gridBagConstraints);

        prqSearchtbl.setToolTipText("Click on the target row to select the patient from the search.");
        prqSearchtbl.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        prqSearchtbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                prqSearchtblMouseClicked(evt);
            }
        });
        jSearchScrollPane11.setViewportView(prqSearchtbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel11.add(jSearchScrollPane11, gridBagConstraints);

        jButton511.setText("Close");
        jButton511.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton511ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel11.add(jButton511, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        itemsOnReqDialog.getContentPane().add(jSearchPanel11, gridBagConstraints);

        SearchTenderLpo.setModal(true);
        SearchTenderLpo.setUndecorated(true);
        SearchTenderLpo.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        searchtlpo.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchtlpoCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(searchtlpo, gridBagConstraints);

        awardedtenderNostbl.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        awardedtenderNostbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                awardedtenderNostblMouseClicked(evt);
            }
        });
        jSearchScrollPane2.setViewportView(awardedtenderNostbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

        jButton10.setText("Dispose");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton10, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        SearchTenderLpo.getContentPane().add(jSearchPanel2, gridBagConstraints);

        searchVote.setModal(true);
        searchVote.setUndecorated(true);
        searchVote.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel3.setLayout(new java.awt.GridBagLayout());

        searchtlpo1.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchtlpo1CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel3.add(searchtlpo1, gridBagConstraints);

        votesTbl.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        votesTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                votesTblMouseClicked(evt);
            }
        });
        jSearchScrollPane3.setViewportView(votesTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel3.add(jSearchScrollPane3, gridBagConstraints);

        jButton11.setText("Dispose");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel3.add(jButton11, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        searchVote.getContentPane().add(jSearchPanel3, gridBagConstraints);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Ordering for tendered items/services");
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pending PRQs allocated to "+com.afrisoftech.lib.UserName.getLoginName(connectDB)
            , javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(255, 0, 51))); // NOI18N
    jPanel5.setLayout(new java.awt.GridBagLayout());

    waitingPRs.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "PR No", "Store Name", "Tender No", "Raised by", "Date raised", "CSO remarks"
        }
    ) {
        boolean[] canEdit = new boolean [] {
            false, false, true, true, true, false
        };

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    waitingPRs.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            waitingPRsMouseClicked(evt);
        }
    });
    jScrollPane1.setViewportView(waitingPRs);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel5.add(jScrollPane1, gridBagConstraints);

    refreshbtn.setText("Refresh PRs");
    refreshbtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            refreshbtnActionPerformed(evt);
        }
    });
    jPanel5.add(refreshbtn, new java.awt.GridBagConstraints());

    jTabbedPane1.addTab("PRs AWaiting action ", jPanel5);

    jPanel4.setLayout(new java.awt.GridBagLayout());

    /*        javax.swing.SpinnerDateModel spinerDate = new javax.swing.SpinnerDateModel();
    dateSpinner = new javax.swing.JSpinner(spinerDate);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
    jPanel1.add(dateSpinner, gridBagConstraints);
    */
    jPanel1.setBackground(new java.awt.Color(204, 255, 255));
    jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jPanel1.setLayout(new java.awt.GridBagLayout());

    jLabel9.setText("Supplier");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
    jPanel1.add(jLabel9, gridBagConstraints);

    jLabel12.setText("Ordered By");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
    jPanel1.add(jLabel12, gridBagConstraints);

    jTextField9.setEditable(false);
    jTextField9.setText(com.afrisoftech.lib.UserName.getLoginName(connectDB).toLowerCase());
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
    jPanel1.add(jTextField9, gridBagConstraints);

    jLabel13.setText("OrderNo");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
    jPanel1.add(jLabel13, gridBagConstraints);

    supplierscmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT distinct initcap(supplier_name) FROM st_suppliers order by 1"));
    supplierscmbx.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            supplierscmbxItemStateChanged(evt);
        }
    });
    supplierscmbx.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            supplierscmbxActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
    jPanel1.add(supplierscmbx, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel1.add(orderDatepckr, gridBagConstraints);

    jLabel4.setText("Order Date");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
    jPanel1.add(jLabel4, gridBagConstraints);

    jLabel41.setText("Date Due");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
    jPanel1.add(jLabel41, gridBagConstraints);

    dateDuepckr.setDate(null);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel1.add(dateDuepckr, gridBagConstraints);

    jCheckBox1.setText("View Items To Order");
    jCheckBox1.setEnabled(false);
    jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jCheckBox1ActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
    jPanel1.add(jCheckBox1, gridBagConstraints);

    jCheckBox2.setForeground(new java.awt.Color(255, 0, 0));
    jCheckBox2.setText("View Pending PRQs");
    jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jCheckBox2ActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    jPanel1.add(jCheckBox2, gridBagConstraints);

    jLabel1311.setText("Internal PRQ No.");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
    jPanel1.add(jLabel1311, gridBagConstraints);

    jPanel61.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jPanel61.setMinimumSize(new java.awt.Dimension(82, 37));
    jPanel61.setLayout(new java.awt.GridBagLayout());

    prqTxt.setEditable(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel61.add(prqTxt, gridBagConstraints);

    irqBtnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
    irqBtnSearch.setToolTipText("Search");
    irqBtnSearch.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    irqBtnSearch.setMaximumSize(new java.awt.Dimension(74, 53));
    irqBtnSearch.setMinimumSize(new java.awt.Dimension(74, 53));
    irqBtnSearch.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    irqBtnSearch.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            irqBtnSearchActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    jPanel61.add(irqBtnSearch, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel1.add(jPanel61, gridBagConstraints);

    jLabel14.setText("Store Name");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 7;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
    jPanel1.add(jLabel14, gridBagConstraints);

    storenametxt.setEditable(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 7;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel1.add(storenametxt, gridBagConstraints);

    jLabel2.setForeground(new java.awt.Color(255, 51, 102));
    jLabel2.setText("Tender/Quotation Number");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
    jPanel1.add(jLabel2, gridBagConstraints);

    jPanel62.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jPanel62.setMinimumSize(new java.awt.Dimension(82, 37));
    jPanel62.setLayout(new java.awt.GridBagLayout());

    TenderNoTxt.setEditable(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel62.add(TenderNoTxt, gridBagConstraints);

    tenderSearchbtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
    tenderSearchbtn.setToolTipText("Search");
    tenderSearchbtn.setEnabled(false);
    tenderSearchbtn.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    tenderSearchbtn.setMaximumSize(new java.awt.Dimension(74, 53));
    tenderSearchbtn.setMinimumSize(new java.awt.Dimension(74, 53));
    tenderSearchbtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    tenderSearchbtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            tenderSearchbtnActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    jPanel62.add(tenderSearchbtn, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
    jPanel1.add(jPanel62, gridBagConstraints);

    jComboBox3.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT  buyer_name  FROM st_buyers_register where buyer_designation='SSO'"));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel1.add(jComboBox3, gridBagConstraints);

    jLabel8.setText("User Department");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
    jPanel1.add(jLabel8, gridBagConstraints);

    doctypecmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "LPO", "LSO" }));
    doctypecmbx.setSelectedIndex(1);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
    jPanel1.add(doctypecmbx, gridBagConstraints);

    jLabel10.setText("Document Type");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
    jPanel1.add(jLabel10, gridBagConstraints);

    orderNotxt.setEditable(false);
    orderNotxt.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
    orderNotxt.setForeground(new java.awt.Color(255, 51, 51));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    jPanel1.add(orderNotxt, gridBagConstraints);

    jCheckBox3.setForeground(new java.awt.Color(0, 51, 255));
    jCheckBox3.setText("View Balances");
    jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jCheckBox3ActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 10;
    jPanel1.add(jCheckBox3, gridBagConstraints);

    jCheckBox4.setForeground(new java.awt.Color(0, 51, 255));
    jCheckBox4.setText("Refresh Table Items");
    jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jCheckBox4ActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 10;
    jPanel1.add(jCheckBox4, gridBagConstraints);

    jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Votebook Details(compulsory)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), java.awt.Color.red)); // NOI18N
    jPanel6.setLayout(new java.awt.GridBagLayout());

    jLabel16.setText("Vote name");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 8;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
    jPanel6.add(jLabel16, gridBagConstraints);

    jPanel63.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jPanel63.setMinimumSize(new java.awt.Dimension(82, 37));
    jPanel63.setLayout(new java.awt.GridBagLayout());

    TenderNoTxt1.setEditable(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel63.add(TenderNoTxt1, gridBagConstraints);

    tenderSearchbtn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
    tenderSearchbtn1.setToolTipText("Search");
    tenderSearchbtn1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    tenderSearchbtn1.setMaximumSize(new java.awt.Dimension(74, 53));
    tenderSearchbtn1.setMinimumSize(new java.awt.Dimension(74, 53));
    tenderSearchbtn1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    tenderSearchbtn1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            tenderSearchbtn1ActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    jPanel63.add(tenderSearchbtn1, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 8;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    jPanel6.add(jPanel63, gridBagConstraints);

    jTextField1.setEditable(false);
    jTextField1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
    jTextField1.setForeground(new java.awt.Color(0, 0, 255));
    jTextField1.addCaretListener(new javax.swing.event.CaretListener() {
        public void caretUpdate(javax.swing.event.CaretEvent evt) {
            jTextField1CaretUpdate(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 8;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
    jPanel6.add(jTextField1, gridBagConstraints);

    jLabel11.setText("  -  ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 8;
    gridBagConstraints.weighty = 1.0;
    jPanel6.add(jLabel11, gridBagConstraints);

    jTextField2.setEditable(false);
    jTextField2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
    jTextField2.setForeground(new java.awt.Color(0, 0, 255));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 8;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel6.add(jTextField2, gridBagConstraints);

    jLabel15.setForeground(new java.awt.Color(255, 51, 51));
    jLabel15.setText("{ Format: [head]-[subhead]  e.g 101-6240 }");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 9;
    jPanel6.add(jLabel15, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 11;
    gridBagConstraints.gridwidth = 6;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel1.add(jPanel6, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 4.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    jPanel4.add(jPanel1, gridBagConstraints);

    jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jPanel3.setLayout(new java.awt.GridBagLayout());

    postbtn.setBackground(new java.awt.Color(0, 204, 153));
    postbtn.setMnemonic('o');
    postbtn.setText("Send LPO/LSO for Approvals");
    postbtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            postbtnActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel3.add(postbtn, gridBagConstraints);

    cancelbtn.setBackground(new java.awt.Color(0, 204, 153));
    cancelbtn.setMnemonic('l');
    cancelbtn.setText("         Clear         ");
    cancelbtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cancelbtnActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel3.add(cancelbtn, gridBagConstraints);

    exitbtn.setBackground(new java.awt.Color(0, 204, 153));
    exitbtn.setMnemonic('c');
    exitbtn.setText("Close  Form");
    exitbtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            exitbtnActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel3.add(exitbtn, gridBagConstraints);

    jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel3.add(jLabel5, gridBagConstraints);

    jButton1.setBackground(new java.awt.Color(0, 204, 153));
    jButton1.setMnemonic('r');
    jButton1.setText("Remove Row");
    jButton1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel3.add(jButton1, gridBagConstraints);

    jButton2.setBackground(new java.awt.Color(0, 204, 153));
    jButton2.setMnemonic('h');
    jButton2.setText("        Help         ");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel3.add(jButton2, gridBagConstraints);

    jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 6;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    jPanel3.add(jLabel3, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 10);
    jPanel4.add(jPanel3, gridBagConstraints);

    jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Please verify the unit price before you Send LPO for Commitment", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(255, 0, 0))); // NOI18N
    jPanel2.setLayout(new java.awt.GridBagLayout());

    itemsTbl.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
            {null, null, null, null, null, null, null, null, null, null, null, null, null, null}
        },
        new String [] {
            "Stock Code", "Item", "Strength", "St.Balance", "Unit Pack", "Qty", "Unit price", "Gross Value", "Discount(%)", "Discount Val", "VAT", "Net Val", "Order", "Balance"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class, java.lang.Double.class
        };
        boolean[] canEdit = new boolean [] {
            false, false, false, false, true, true, false, false, true, true, true, true, true, true
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    itemsTbl.setGridColor(new java.awt.Color(204, 204, 255));
    cmbox = new javax.swing.JComboBox();

    javax.swing.table.TableColumn column = null;
    for (int i = 0; i < 9; i++) {
        column = itemsTbl.getColumnModel().getColumn(i);
        if (i == 1) {

            column.setPreferredWidth(300); //sport column is bigger
        } else {
            //if (i == 2) {
                column.setPreferredWidth(100);
                // }  else
            //column.setPreferredWidth(50);

        }
    }
    itemsTbl.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            itemsTblMouseClicked(evt);
        }
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            itemsTblMouseEntered(evt);
        }
    });
    itemsTbl.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            itemsTblKeyReleased(evt);
        }
    });
    jScrollPane2.setViewportView(itemsTbl);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.gridwidth = 6;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipady = 10;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 10.0;
    jPanel2.add(jScrollPane2, gridBagConstraints);

    jLabel1.setText("Total KShs");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel2.add(jLabel1, gridBagConstraints);

    totalSumtxt.setEditable(false);
    totalSumtxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    totalSumtxt.setText("0.00");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 5;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
    jPanel2.add(totalSumtxt, gridBagConstraints);

    jLabel6.setText("Total Discount");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
    jPanel2.add(jLabel6, gridBagConstraints);

    discountTxt.setEditable(false);
    discountTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    discountTxt.setText("0.00");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel2.add(discountTxt, gridBagConstraints);

    jLabel7.setText("VAT Amount");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel2.add(jLabel7, gridBagConstraints);

    vatTxt.setEditable(false);
    vatTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
    vatTxt.setText("0.00");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel2.add(vatTxt, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 20.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
    jPanel4.add(jPanel2, gridBagConstraints);

    jTabbedPane1.addTab("Raise Order", jPanel4);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(jTabbedPane1, gridBagConstraints);

    setBounds(0, 0, 1260, 575);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton511ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton511ActionPerformed
        itemsOnReqDialog.dispose();    // Add your handling code here:
    }//GEN-LAST:event_jButton511ActionPerformed

    private void prqSearchtblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_prqSearchtblMouseClicked
        prqTxt.setText(prqSearchtbl.getValueAt(prqSearchtbl.getSelectedRow(), 0).toString());
        //    jTextField361.setText(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 1).toString());
        itemsOnReqDialog.dispose();

        ClearTable.clearthisTable(itemsTbl);

        int k = 0;

        this.postbtn.setEnabled(true);
        this.populateTable11(this.prqTxt.getText());  // Add your handling code here:


    }//GEN-LAST:event_prqSearchtblMouseClicked
    private void populateTable11(java.lang.String patient_no) {
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        int i = 0;

        try {
            java.sql.PreparedStatement stmtTable = connectDB.prepareStatement("SELECT item_code,"
                    + "item_description,strength,balance,units,quantity,price,"
                    + "(quantity*price)::numeric(15,2),cost_center,old_req_no FROM st_receive_requisation "
                    + "WHERE requisition_no ilike '" + prqTxt.getText() + "' and terms ilike '-'"
                    + "ORDER BY item_description");

            java.sql.ResultSet rsetTable = stmtTable.executeQuery();

            //  DBObject
            java.sql.Statement balance = connectDB.createStatement();
            while (rsetTable.next()) {

                itemsTbl.setValueAt(rsetTable.getObject(1), i, 0);
                itemsTbl.setValueAt(rsetTable.getObject(2), i, 1);
                itemsTbl.setValueAt(rsetTable.getObject(3), i, 2);
                itemsTbl.setValueAt(rsetTable.getObject(4), i, 3);
                itemsTbl.setValueAt(rsetTable.getObject(5), i, 4);
                itemsTbl.setValueAt(rsetTable.getObject(6), i, 5);
                itemsTbl.setValueAt(rsetTable.getDouble(7), i, 6);

                TenderNoTxt.setText(rsetTable.getObject(10).toString());

                //deptCmbx.setText(rsetTable.getObject(9).toString());
                itemsTbl.setValueAt(0.00, i, 8);
                itemsTbl.setValueAt(0.00, i, 9);
                itemsTbl.setValueAt(0.00, i, 10);
                itemsTbl.setValueAt(0.00, i, 13);

                i++;

            }

            if (i > 0) {

                // supplierscmbx.setModel(ComboBoxModel.ComboBoxModel(connectDB, "select DISTINCT supplier from st_orders where quotation_no ='"+TenderNoTxt.getText()+"' and supplier in(SELECT DISTINCT supplier FROM st_contract_mgt WHERE tender_no ='"+TenderNoTxt.getText()+"' and contract_end::date>current_date) order by 1"));
                supplierscmbx.setModel(ComboBoxModel.ComboBoxModel(connectDB, "select DISTINCT trim(initcap(supplier)) from st_orders where quotation_no ='" + TenderNoTxt.getText() + "'  order by 1"));
                jCheckBox3.doClick();

                java.sql.Statement stmtTablez = connectDB.createStatement();

                java.sql.ResultSet rsetTablez = stmtTablez.executeQuery("SELECT DISTINCT cost_center FROM st_receive_requisation WHERE requisition_no ilike '" + prqTxt.getText() + "'");
                while (rsetTablez.next()) {
                    storenametxt.setText(rsetTablez.getObject(1).toString());
                }

                for (int k = 0; k < itemsTbl.getRowCount(); k++) {
                    if (itemsTbl.getValueAt(i, 1) != null) {
                        itemsTbl.setValueAt(getBidderUnitPrice(supplierscmbx.getSelectedItem().toString(), TenderNoTxt.getText(), itemsTbl.getValueAt(k, 1).toString()), k, 5);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "Sorry, All Items in the PR are already ordered", "Re-Select PR", JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (java.sql.SQLException sqlExec) {

            sqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }

    private double getBidderUnitPrice(String supplier, String tender, String item) {

        Double price = 0.00;
        try {
            java.sql.Statement stmtSuppCost = connectDB.createStatement();

            java.sql.ResultSet rsetSuppCost = stmtSuppCost.executeQuery("SELECT DISTINCT unit_price FROM st_orders WHERE trim(initcap(supplier)) ilike  '" + supplier + "' and quotation_no='" + tender + "' and trim(code) ilike '" + item + "' and order_no is null limit 1");
            //System.err.println("SELECT DISTINCT unit_price FROM st_orders WHERE supplier= '"+supplier+"' and quotation_no='"+tender+"' and item ilike '"+item+"' and order_no is null limit 1");
            while (rsetSuppCost.next()) {
                price = rsetSuppCost.getDouble(1);

            }

        } catch (SQLException ex) {
            Logger.getLogger(OrderingTenderItemsintfr.class.getName()).log(Level.SEVERE, null, ex);
        }
        return price;

    }
    private void prqSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_prqSearchTxtCaretUpdate
        if (prqSearchTxt.getCaretPosition() > 5) {
            prqSearchtbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct requisition_no  as Req_No from st_receive_requisation WHERE requisition_no ilike 'PRQ%' AND processed = true AND requisition_no ILIKE '" + prqSearchTxt.getText().toString() + "%' AND type_of_pr ilike 'Internal%' and cost_center ilike '" + jComboBox3.getSelectedItem() + "' ORDER BY requisition_no"));

            prqSearchtbl.setShowHorizontalLines(false);
            jSearchScrollPane11.setViewportView(prqSearchtbl);
        }  // Add your handling code here:
    }//GEN-LAST:event_prqSearchTxtCaretUpdate

    private void jButton51ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton51ActionPerformed
        jSearchDialog1.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton51ActionPerformed

    private void jSearchTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable1MouseClicked
//        jTextField36.setText(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 0).toString());
//        //    jTextField361.setText(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 1).toString());
//        jSearchDialog1.dispose();
//        for (int k = 0; k < jTable13.getRowCount(); k++) {
//            for (int r = 0; r < jTable13.getColumnCount(); r++) {
//                jTable13.getModel().setValueAt(null, k, r);
//            }
//        }
//
//        int k = 0;
//
//        this.postbtn.setEnabled(true);
//        this.populateTable1(this.jTextField36.getText());  // Add your handling code here:
    }//GEN-LAST:event_jSearchTable1MouseClicked
    private void populateTable1(java.lang.String patient_no) {
        int i = 0;
        try {

            //   for (int i = 0; i < jTable1.getRowCount(); i++ ) {
            //       if (jTable1.getModel().getValueAt(i,0) != null){
            java.sql.Statement stmtTable = connectDB.createStatement();

            java.sql.ResultSet rsetTable = stmtTable.executeQuery("SELECT item,units,quantity,unit_price,net_value FROM st_orders WHERE order_no ilike '' order by item");
            //  java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT sum(receiving-issuing) FROM st_sub_stores WHERE store_name = '"+jTextField1.getText().equalsIgnoreCase(jTextField1.getText())+"' and item = '"+jTable1.getValueAt(k,0).toString()+"'");

            while (rsetTable.next()) {

                itemsTbl.setValueAt(rsetTable.getObject(1), i, 0);
                itemsTbl.setValueAt(rsetTable.getObject(2), i, 1);
                itemsTbl.setValueAt("0.00", i, 2);
                itemsTbl.setValueAt(rsetTable.getObject(3), i, 3);
                itemsTbl.setValueAt(rsetTable.getObject(4), i, 4);
                itemsTbl.setValueAt("0.00", i, 4);
                itemsTbl.setValueAt(rsetTable.getObject(5), i, 6);
                //   jTable1.setValueAt(rsetTable1.getObject(6), i, 6);

                i++;

            }
            //   }
            // }
        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

    }
    private void jTextField1111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1111CaretUpdate
        jSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct order_no as Order_No,(supplier) as Supplier from st_orders where order_no ILIKE '" + jTextField1111.getText().toString() + "%' ORDER BY order_no"));

        /*
         * try { searchRowSet1.execute("select distinct order_no as
         * scheme,(supplier) as name from st_orders where order_no ILIKE
         * '"+jTextField1111.getText().toString()+"%' ORDER BY order_no");
         *
         * jSearchTable1.setModel(new
         * org.netbeans.lib.sql.models.TableModel(searchRowSet1, new
         * org.netbeans.lib.sql.models.TableModel.Column[] { new
         * org.netbeans.lib.sql.models.TableModel.Column("scheme", "Order No.",
         * false), new org.netbeans.lib.sql.models.TableModel.Column("name",
         * "Supplier", false), // new
         * org.netbeans.lib.sql.models.TableModel.Column("account_no", "Acc
         * No.", false) }));
         */
        jSearchTable1.setShowHorizontalLines(false);
        jSearchScrollPane1.setViewportView(jSearchTable1);     // Add your handling code here:
    }//GEN-LAST:event_jTextField1111CaretUpdate

    private void searchButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton2ActionPerformed
        //  searchButton11Clicked();                      // Add your handling code here:
    }//GEN-LAST:event_searchButton2ActionPerformed

    private void irqBtnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_irqBtnSearchActionPerformed
        searchButton111Clicked();      // Add your handling code here:
    }//GEN-LAST:event_irqBtnSearchActionPerformed
    private void searchButton111Clicked() {

        System.out.println("Showing dialog");

        itemsOnReqDialog.dispose();
        java.awt.Point point = this.prqTxt.getLocationOnScreen();

        itemsOnReqDialog.setSize(400, 200);

        itemsOnReqDialog.setLocation(point);
        itemsOnReqDialog.setVisible(true);

    }
    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // Add your handling code here:
        //    orderNotxt.setEnabled(true);
        jTabbedPane1.setSelectedIndex(0);
        refreshbtn.doClick();
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        int i = 0;
        for (int k = 0; k < itemsTbl.getRowCount(); k++) {
            for (int r = 0; r < itemsTbl.getColumnCount(); r++) {
                itemsTbl.getModel().setValueAt(null, k, r);
            }
        }
        double quantityToOrder = 0.00;
        double ReoderLevel = 0.00;
        double sumQty = 0.00;
        double balance = 0.00;
        double discount = 0.00;
        double bPrice = 0.00;
        double Total = 0.00;
        double pkge = 0;

        try {
            //  java.lang.Object[] listofAct = this.getListofActivities();
            // for (int i = 0; i < listofAct.length; i++){
            java.sql.Statement stmtTable11 = connectDB.createStatement();
            java.sql.Statement stmtTable11x = connectDB.createStatement();
            java.sql.Statement st32 = connectDB.createStatement();
            java.sql.ResultSet rset11 = st32.executeQuery("select item_code,description,strength,round(quantity_toorder),units,buying_price from stockitem WHERE  quantity_toorder > 0");
            while (rset11.next()) {

                bPrice = rset11.getDouble(6);
                quantityToOrder = rset11.getDouble(4);
                //   System.out.println("Working at table row "+i);
                itemsTbl.setValueAt(rset11.getObject(1), i, 0);
                itemsTbl.setValueAt(rset11.getObject(2), i, 1);
                itemsTbl.setValueAt(rset11.getObject(3), i, 2);
                itemsTbl.setValueAt(rset11.getObject(5), i, 4);
                if (java.util.regex.Pattern.matches("[0-9]*", itemsTbl.getValueAt(i, 4).toString())) {
                    pkge = Double.parseDouble(itemsTbl.getValueAt(i, 4).toString());
                } else {
                    pkge = 1;
                }

                double roundAmt = 0.00;
                java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("select ROUND('" + quantityToOrder / pkge + "')");
                while (rsetTable11.next()) {
                    roundAmt = rsetTable11.getDouble(1);
                }
                // double rndAmt = java.math.RoundingMode.CEILING.valueOf(java.lang.String.valueOf(quantityToOrder/pkge));
                itemsTbl.setValueAt(new java.lang.Double(roundAmt), i, 5);
                itemsTbl.setValueAt(new java.lang.Double(bPrice), i, 6);
                itemsTbl.setValueAt(new java.lang.Double(bPrice * roundAmt), i, 7);
                itemsTbl.setValueAt(new java.lang.Double(discount), i, 8);
                itemsTbl.setValueAt(new java.lang.Double(discount / 100 * bPrice * quantityToOrder), i, 9);
                itemsTbl.setValueAt(new java.lang.Double((quantityToOrder * bPrice) - ((quantityToOrder * bPrice) * discount / 100)), i, 10);

                java.sql.ResultSet rsetTable11x = stmtTable11x.executeQuery("select sum(qty) from stock_balance where description ilike '" + rset11.getObject(1) + "' AND department ilike '" + storenametxt.getText().toString() + "%'");
                while (rsetTable11x.next()) {
                    balance = rsetTable11x.getDouble(1);
                    itemsTbl.setValueAt(new java.lang.Double(balance), i, 3);

                    i++;
                }
            }

            double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(itemsTbl, 10);
            totalSumtxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));

        } catch (java.sql.SQLException sqlex) {
            System.out.println(sqlex.getMessage());
        }             // Add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed
    private String getSupp(String tender, String code) {
        String supp = "-";
        try {

            java.sql.Statement stmtTablez = connectDB.createStatement();

            java.sql.ResultSet rsetTablez = stmtTablez.executeQuery("SELECT DISTINCT trim(initcap(supplier)) FROM st_orders WHERE quotation_no ilike '" + TenderNoTxt.getText() + "' and trim(code) ilike '" + code + "' AND (order_no IS  NULL OR order_no = '' ) order by 1");
            System.out.println("SELECT DISTINCT initcap(supplier) FROM st_orders WHERE quotation_no ilike '" + TenderNoTxt.getText() + "' and trim(code) ilike '" + code + "' order by 1");
            while (rsetTablez.next()) {
                supp = rsetTablez.getObject(1).toString();
            }
        } catch (SQLException ex) {
                        ex.printStackTrace();             //Exceptions.printStackTrace(ex);
        }
        return supp;
    }
    private void itemsTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemsTblMouseClicked
        if (itemsTbl.getValueAt(itemsTbl.getSelectedRow(), 0) != null) {
            supplierscmbx.setSelectedItem(getSupp(TenderNoTxt.getText(), itemsTbl.getValueAt(itemsTbl.getSelectedRow(), 0).toString()));

            System.out.println(getSupp(TenderNoTxt.getText(), itemsTbl.getValueAt(itemsTbl.getSelectedRow(), 0).toString()));
            jCheckBox3.doClick();

            Double val = Double.valueOf(itemsTbl.getValueAt(itemsTbl.getSelectedRow(), 5).toString());
            if (itemsTbl.getValueAt(itemsTbl.getSelectedRow(), 12) == Boolean.TRUE) {

                System.out.println(itemsTbl.getSelectedColumn());

                if (Double.valueOf(itemsTbl.getValueAt(itemsTbl.getSelectedRow(), 5).toString()) > Double.valueOf(itemsTbl.getValueAt(itemsTbl.getSelectedRow(), 13).toString())) {

                    JOptionPane.showMessageDialog(this, "Item Quantity On Requisition is Exceeding\n"
                            + "Quantity Remaining on Tender", "Adjust Quantity", JOptionPane.ERROR_MESSAGE);

                    itemsTbl.setValueAt(0.00, itemsTbl.getSelectedRow(), 5);

                }

            }
        }
    }//GEN-LAST:event_itemsTblMouseClicked
    private void cmboxMouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane2.getLocationOnScreen();
        jSearchDialog.setSize(400, 200);
        jSearchDialog.setLocation(point);
        jSearchDialog.setVisible(true);
    }

    private void cmbox5ActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            java.sql.PreparedStatement pstmtTenderSupplier = connectDB.prepareStatement("SELECT supplier,price "
                    + " FROM st_product_list WHERE item_code = ? "
                    + " AND financial_year = ? AND supplier ILIKE '" + cmbox5.getSelectedItem() + "' ORDER BY price LIMIT 1 ");
            pstmtTenderSupplier.setString(1, itemsTbl.getValueAt(itemsTbl.getSelectedColumnCount(), 0).toString());
            pstmtTenderSupplier.setString(2, com.afrisoftech.lib.FinancialYear.getActiveFinancialYear(connectDB));

            java.sql.ResultSet rsetTenderSupplier = pstmtTenderSupplier.executeQuery();
            while (rsetTenderSupplier.next()) {
                //  jTable1.setValueAt(rsetTenderSupplier.getObject(1), jTable1.getSelectedColumnCount(), 12);
                itemsTbl.setValueAt(rsetTenderSupplier.getObject(2), itemsTbl.getSelectedColumnCount(), 6);
                double price = rsetTenderSupplier.getDouble(2);
                double qty = java.lang.Double.parseDouble(itemsTbl.getValueAt(itemsTbl.getSelectedColumnCount(), 5).toString());
                itemsTbl.setValueAt(price * qty, itemsTbl.getSelectedColumnCount(), 7);
                itemsTbl.setValueAt(price * qty, itemsTbl.getSelectedColumnCount(), 10);

            }

        } catch (java.sql.SQLException sq) {

            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());
        }
    }
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        jSearchDialog.dispose();         // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate
        if (this.jTextField111.getCaretPosition() < 1) {
            System.out.print("Nothing");
        } else {
            jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select item_code,description,strength,units,buying_price as price FROM st_stock_item WHERE description ILIKE '" + jTextField111.getText() + "%' AND department ilike '" + storenametxt.getText().toString() + "%' ORDER BY description"));

            jSearchScrollPane.setViewportView(jSearchTable);
            System.out.println("Cannot sort out");

        }
        // Add your handling code here:
    }//GEN-LAST:event_jTextField111CaretUpdate

    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        double balance = 0.00;

        itemsTbl.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0), itemsTbl.getSelectedRow(), 0);
        itemsTbl.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1), itemsTbl.getSelectedRow(), 1);
        itemsTbl.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 2), itemsTbl.getSelectedRow(), 2);
        itemsTbl.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 3), itemsTbl.getSelectedRow(), 4);
        itemsTbl.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 4), itemsTbl.getSelectedRow(), 6);
        itemsTbl.setValueAt(0.00, itemsTbl.getSelectedRow(), 8);

        try {
            java.sql.PreparedStatement pstmtTenderSupplier = connectDB.prepareStatement("SELECT supplier "
                    + " FROM st_product_list WHERE item_code = ? AND financial_year = ? ORDER BY price LIMIT 1 ");
            pstmtTenderSupplier.setString(1, itemsTbl.getValueAt(itemsTbl.getSelectedRow(), 0).toString());

            java.sql.ResultSet rsetTenderSupplier = pstmtTenderSupplier.executeQuery();
            while (rsetTenderSupplier.next()) {
                itemsTbl.setValueAt(rsetTenderSupplier.getObject(1), itemsTbl.getSelectedRow(), 12);
            }
            java.sql.Statement stmtTable11 = connectDB.createStatement();
            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("select sum(qty) from stock_balance where description ilike '" + itemsTbl.getValueAt(itemsTbl.getSelectedRow(), 0) + "' AND department ilike '" + storenametxt.getText().toString() + "%'");
            while (rsetTable11.next()) {
                balance = rsetTable11.getDouble(1);
                itemsTbl.setValueAt(new java.lang.Double(balance), itemsTbl.getSelectedRow(), 3);

            }
        } catch (java.sql.SQLException sqlex) {
            System.out.println(sqlex.getMessage());
        }
        /*
         * jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),1),jTable1.getSelectedRow(),
         * 1);
         * jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),2),jTable1.getSelectedRow(),
         * 4); jTable1.setValueAt(0.00,jTable1.getSelectedRow(), 5); double
         * totalSum =
         * com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable1, 6);
         * jTextField2.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
         */

        int j = 0;


        /*
         * try { java.sql.Statement pstmt = connectDB.createStatement();
         * java.sql.Statement pstmt1 = connectDB.createStatement();
         *
         * java.sql.ResultSet rs1 = pstmt1.executeQuery("select
         * count(description) from st_product_list where description =
         * '"+jSearchTable.getValueAt(jSearchTable.getSelectedRow(),0)+"' and
         * supplier = '"+this.jComboBox1.getSelectedItem()+"'"); while
         * (rs1.next()) j = rs1.getInt(1); if (j > 0){
         *
         * java.sql.ResultSet rs = pstmt.executeQuery("select
         * sum(price)::numeric from st_product_list where description =
         * '"+jSearchTable.getValueAt(jSearchTable.getSelectedRow(),0)+"' and
         * supplier = '"+this.jComboBox1.getSelectedItem()+"'"); while
         * (rs.next()){
         *
         * // jTable1.setValueAt(,jTable1.getSelectedRow(), 6);
         * jTable1.setValueAt(rs.getObject(1),jTable1.getSelectedRow(),3);
         *
         * }
         * } else { jTable1.setValueAt("0.00",jTable1.getSelectedRow(),2); }
         * java.sql.Statement pstmt11 = connectDB.createStatement();
         * java.sql.ResultSet rs11 = pstmt1.executeQuery("select
         * count(description) from st_product_list where description =
         * '"+jSearchTable.getValueAt(jSearchTable.getSelectedRow(),0)+"' and
         * supplier = '"+this.jComboBox1.getSelectedItem()+"'"); while
         * (rs11.next()) j = rs11.getInt(1); if (j > 0){
         *
         * java.sql.ResultSet rs = pstmt.executeQuery("select sum(discount_rate)
         * from st_product_list where description =
         * '"+jSearchTable.getValueAt(jSearchTable.getSelectedRow(),0)+"' and
         * supplier = '"+this.jComboBox1.getSelectedItem()+"'"); while
         * (rs.next()){
         *
         * // jTable1.setValueAt(,jTable1.getSelectedRow(), 6);
         *
         * jTable1.setValueAt(rs.getObject(1),jTable1.getSelectedRow(),4);
         *
         * }
         * } else { jTable1.setValueAt("0.00",jTable1.getSelectedRow(),4); }
         * java.sql.Statement pstmt111 = connectDB.createStatement();
         * java.sql.ResultSet rs111 = pstmt111.executeQuery("select
         * count(description) from st_product_list where description =
         * '"+jSearchTable.getValueAt(jSearchTable.getSelectedRow(),0)+"' and
         * supplier = '"+this.jComboBox1.getSelectedItem()+"'"); while
         * (rs111.next()) j = rs111.getInt(1); if (j > 0){
         *
         * java.sql.ResultSet rs = pstmt.executeQuery("select sum(vat) from
         * st_product_list where description =
         * '"+jSearchTable.getValueAt(jSearchTable.getSelectedRow(),0)+"' and
         * supplier = '"+this.jComboBox1.getSelectedItem()+"'"); while
         * (rs.next()){
         *
         * // jTable1.setValueAt(,jTable1.getSelectedRow(), 6);
         *
         * jTable1.setValueAt(rs.getObject(1),jTable1.getSelectedRow(),6); } }
         * else { jTable1.setValueAt("0.00",jTable1.getSelectedRow(),6); } }
         * catch(java.sql.SQLException sqlex){
         * System.out.println(sqlex.getMessage()); }
         */
        jSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked

    private void supplierscmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierscmbxActionPerformed
        this.postbtn.setEnabled(true);
//        for(int i=0;i<itemsTbl.getRowCount();i++){
//            if(itemsTbl.getValueAt(i, 1)!=null){
//        itemsTbl.setValueAt(getBidderUnitPrice(supplierscmbx.getSelectedItem().toString(), TenderNoTxt.getText(), itemsTbl.getValueAt(i, 1).toString()), i, 6);
//        
//            }
//            
//        }      
    }//GEN-LAST:event_supplierscmbxActionPerformed
    public java.lang.Object[] getListofActivities() {

        java.lang.Object[] listofActivities = null;

        java.util.Vector listActVector = new java.util.Vector(1, 1);

        try {

            //    java.sql.Connection connDB = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako","postgres","pilsiner");
            java.sql.Statement stmt1 = connectDB.createStatement();

            java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT description FROM st_product_list WHERE supplier = '" + supplierscmbx.getSelectedItem().toString() + "'");
            //pSet1.setString(1,"Raise Invoice");
            //java.sql.ResultSet rSet1 = pSet1.executeQuery()
            while (rSet1.next()) {
                //if (rSet1.getFloat(1) > 0){
                listActVector.addElement(rSet1.getObject(1).toString());
                //}
            }
            System.out.println("description" + rSet1.getObject(1).toString());
        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());

        }

        listofActivities = listActVector.toArray();
        System.out.println("Done list of activities ...");
        return listofActivities;
    }
    private void itemsTblKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemsTblKeyReleased
        if (itemsTbl.getModel().getValueAt(itemsTbl.getSelectedRow(), 5) != null) {
            if (itemsTbl.getSelectedColumn() == itemsTbl.getSelectedColumn()) {
                double qty = java.lang.Float.parseFloat(itemsTbl.getValueAt(itemsTbl.getSelectedRow(), 5).toString());
                double price = java.lang.Float.parseFloat(itemsTbl.getValueAt(itemsTbl.getSelectedRow(), 6).toString());
                double discount = java.lang.Float.parseFloat(itemsTbl.getValueAt(itemsTbl.getSelectedRow(), 8).toString());
                double vat = java.lang.Float.parseFloat(itemsTbl.getValueAt(itemsTbl.getSelectedRow(), 10).toString());
                double gross = qty * price;
                double total = qty * price - (qty * price * discount / 100) - (vat);
                double disc = qty * price * discount / 100;
                itemsTbl.setValueAt(gross, itemsTbl.getSelectedRow(), 7);
                itemsTbl.setValueAt(disc, itemsTbl.getSelectedRow(), 9);
                itemsTbl.setValueAt(total, itemsTbl.getSelectedRow(), 11);
                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(itemsTbl, 11);
                totalSumtxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                double totalDisc = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(itemsTbl, 9);
                discountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalDisc));
                double totalvat = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(itemsTbl, 10);
                vatTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalvat));
                double bal_rem = java.lang.Float.parseFloat(itemsTbl.getValueAt(itemsTbl.getSelectedRow(), 13).toString());
                if (qty > bal_rem) {
                    JOptionPane.showMessageDialog(this, "Item Quantity On Requisition is Exceeding \n Quantity Remaining on Tender", "Adjust Quantity For \n" + itemsTbl.getValueAt(itemsTbl.getSelectedRow(), 5), JOptionPane.ERROR_MESSAGE);
                    itemsTbl.setValueAt(0.00, itemsTbl.getSelectedRow(), 5);

                }

            }

        }

        // Add your handling code here:
    }//GEN-LAST:event_itemsTblKeyReleased

    private void exitbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitbtnActionPerformed
        this.setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_exitbtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int rows2Delete = itemsTbl.getSelectedRowCount();

        int[] selectedRows = itemsTbl.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) itemsTbl.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) itemsTbl.getModel();

                defTableModel.removeRow(itemsTbl.getSelectedRow());
            }
        }
        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(itemsTbl, 10);
        totalSumtxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));

        // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cancelbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelbtnActionPerformed
        //        jTextField6.setText("");
        //   jTextField3.setText("");
        //   jTextField7.setText("");
        jTextField9.setText("");
        for (int k = 0; k < itemsTbl.getRowCount(); k++) {
            for (int r = 0; r < itemsTbl.getColumnCount(); r++) {
                itemsTbl.getModel().setValueAt(null, k, r);
            }
        }

        totalSumtxt.setText("0.00");
        TenderNoTxt1.setText(null);
        jTextField1.setText(null);
        jTextField2.setText(null);
        // Add your handling code here:
    }//GEN-LAST:event_cancelbtnActionPerformed
    private void cmboxActionPerformed(java.awt.event.ActionEvent evt) {
        java.lang.Object selectedGuaran = cmbox.getSelectedItem();
        int i = itemsTbl.getSelectedRow();

        if (selectedGuaran != null) {

            try {
                //java.sql.Connection con = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/hospital","postgres","pilsiner");
                java.sql.Statement pstmt = connectDB.createStatement();
                // java.sql.ResultSet rs = pstmt.executeQuery("select rate,gl_account from pb_operating_parameters where service_type = '"+selectedGuaran+"'");

                java.sql.ResultSet rs = pstmt.executeQuery("select units from st_stock_item where description = '" + selectedGuaran + "'");
                while (rs.next()) {

                    itemsTbl.setValueAt(rs.getObject(1), i, 1);

                }
            } catch (java.sql.SQLException sqlex) {
                System.out.println(sqlex.getMessage());
            }

        }

    }

    private void postbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postbtnActionPerformed
        if (jTextField1.getText().length() > 0) {
            int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "You Are About To Generate A Purchase Order To " + supplierscmbx.getSelectedItem() + ".\nVotebook details: " + jTextField1.getText() + "-" + jTextField2.getText() + " \nYes To Continue", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

            if (exitOption == javax.swing.JOptionPane.YES_OPTION) {

                if (dateDuepckr.getDate() != null) {

                    String seq = null;

                    java.util.Date periodFrom = null;
                    java.util.Date periodTo = null;

                    try {

                        java.sql.Statement stmtf = connectDB.createStatement();
                        java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + orderDatepckr.getDate() + "' BETWEEN period_from AND period_to");
                        while (rsetf.next()) {
                            periodFrom = rsetf.getDate(1);
                            periodTo = rsetf.getDate(2);
                        }

                        if (orderDatepckr.getDate().before(periodFrom) || orderDatepckr.getDate().after(periodTo)) {
                            javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                        } else {
                            if (itemsTbl.isEditing()) {
                                itemsTbl.getCellEditor().stopCellEditing();
                            }

                            double quantity = 0.00;

                            java.util.Calendar calendar = java.util.Calendar.getInstance();

                            long dateNow = calendar.getTimeInMillis();

                            java.sql.Date datenowSql = new java.sql.Date(dateNow);

                            System.out.println(datenowSql.toString());

                            java.sql.Savepoint registerSavePoint = null;

                            connectDB.setAutoCommit(false);
                            registerSavePoint = connectDB.setSavepoint("registration");

                            java.lang.Boolean checker = true;
                            String unallocateditems = " ";

                            if (!doctypecmbx.getSelectedItem().toString().equals("-")) {
                                java.sql.Statement pstmt1s = connectDB.createStatement();
                                java.sql.ResultSet rs1s = pstmt1s.executeQuery("select '" + TenderNoTxt.getText() + "' || nextval('order_trans_seq'),CURRENT_DATE"); //from orders where supplier ='"+jTable1.getValueAt(i,4).toString()+"'");

                                while (rs1s.next()) {
                                    seq = rs1s.getObject(1).toString();

                                }

                                for (int h = 0; h < itemsTbl.getRowCount(); h++) {

                                    if (itemsTbl.getModel().getValueAt(h, 12) == null) {
                                        System.err.println("Hahahahahahaha this is null");
                                    } else {
                                        System.err.println("Value at row " + h + " boolean col = " + itemsTbl.getModel().getValueAt(h, 12).toString());
                                    }

                                    if (itemsTbl.getValueAt(h, 1) != null && itemsTbl.getModel().getValueAt(h, 12) == Boolean.TRUE) {

                                        System.out.println(h);
                                        // itemsTbl.setValueAt(false, itemsTbl.getSelectedRow(), 12);

                                        balance_ord = Double.valueOf(Double.valueOf(itemsTbl.getValueAt(itemsTbl.getSelectedRow(), 5).toString()) - Double.valueOf(itemsTbl.getValueAt(itemsTbl.getSelectedRow(), 13).toString()));
                                        System.out.println(balance_ord);

                                        java.sql.PreparedStatement savelpo = connectDB.prepareStatement("INSERT INTO st_item_to_quote( buyer_details,  item_code, item_description,units,  time_saved, item_number, item_serial, tender_no, sub_item_desc, department, irq_no, quantity_ordered)\n"
                                                + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");

                                        savelpo.setObject(1, "INTERNAL");
                                        savelpo.setObject(2, itemsTbl.getValueAt(h, 0));
                                        savelpo.setObject(3, itemsTbl.getValueAt(h, 1));
                                        savelpo.setObject(4, itemsTbl.getValueAt(h, 4));
                                        savelpo.setObject(5, com.afrisoftech.lib.ServerTime.getSQLTimeStamp(connectDB));
                                        savelpo.setObject(6, h);
                                        savelpo.setObject(7, h);
                                        //select units, item_code from stockitem where description ='AMOXICILLIN 250MG CAPSULES'
                                        savelpo.setObject(8, TenderNoTxt.getText().toString());

                                        savelpo.setString(9, GetItemInfo.getITemCategory(itemsTbl.getValueAt(h, 1).toString(), connectDB));
                                        savelpo.setString(10, storenametxt.getText().toString());
                                        savelpo.setObject(11, prqTxt.getText() + "-" + TenderNoTxt.getText());
                                        savelpo.setObject(12, Double.valueOf(itemsTbl.getValueAt(h, 5).toString()));

                                        savelpo.executeUpdate();

                                        java.sql.PreparedStatement savelpo1 = connectDB.prepareStatement("INSERT INTO st_recommendation(supplier, quotation_no,supplier_code , discount_rate, item_code,description, unit, price, vat, date,\n"
                                                + "  user_name, financial_year,ordered_qty)\n"
                                                + "    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? );");

                                        savelpo1.setObject(1, supplierscmbx.getSelectedItem().toString().toUpperCase());
                                        savelpo1.setObject(2, TenderNoTxt.getText());
                                        savelpo1.setObject(3, h);
                                        savelpo1.setObject(4, Double.valueOf(itemsTbl.getValueAt(h, 8).toString()));
                                        savelpo1.setObject(5, itemsTbl.getValueAt(h, 0));
                                        savelpo1.setObject(6, itemsTbl.getValueAt(h, 1));
                                        savelpo1.setObject(7, itemsTbl.getValueAt(h, 4));
                                        savelpo1.setObject(8, itemsTbl.getValueAt(h, 6));
                                        savelpo1.setObject(9, Double.valueOf(itemsTbl.getValueAt(h, 10).toString()));
                                        savelpo1.setObject(10, com.afrisoftech.lib.ServerTime.getSQLTimeStamp(connectDB));
                                        savelpo1.setObject(11, com.afrisoftech.lib.UserName.getLoginName(connectDB).toLowerCase());
                                        savelpo1.setObject(12, com.afrisoftech.lib.FinancialYear.getActiveFinancialYear(connectDB));
                                        //select units, item_code from stockitem where description ='AMOXICILLIN 250MG CAPSULES'
                                        savelpo1.setObject(13, Double.valueOf(itemsTbl.getValueAt(h, 5).toString()));

                                        savelpo1.executeUpdate();

                                        java.sql.PreparedStatement pstmt8121 = connectDB.prepareStatement("INSERT INTO st_orders(order_no,criteria,doc_type,gross_value,net_value,date_due,quotation_no,code ,item,supplier,units,discount_value,vat_amount,quantity,unit_price,remarks,date,discount,ordering_store,head,subhead,main_department) "
                                                + "VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

                                        pstmt8121.setObject(1, seq);
                                        pstmt8121.setObject(2, "Lowest Price");
                                        pstmt8121.setObject(3, doctypecmbx.getSelectedItem());
                                        pstmt8121.setObject(4, java.lang.Double.valueOf(itemsTbl.getValueAt(h, 7).toString()));
                                        pstmt8121.setObject(5, java.lang.Double.valueOf(itemsTbl.getValueAt(h, 11).toString()));
                                        pstmt8121.setObject(6, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateDuepckr.getDate()));
                                        pstmt8121.setObject(7, TenderNoTxt.getText());
                                        pstmt8121.setObject(8, itemsTbl.getValueAt(h, 0).toString());
                                        pstmt8121.setObject(9, itemsTbl.getValueAt(h, 1).toString());
                                        pstmt8121.setObject(10, supplierscmbx.getSelectedItem().toString().toUpperCase());
                                        pstmt8121.setObject(11, itemsTbl.getValueAt(h, 4).toString());
                                        pstmt8121.setObject(12, java.lang.Double.valueOf(itemsTbl.getValueAt(h, 9).toString()));
                                        pstmt8121.setObject(13, java.lang.Double.valueOf(itemsTbl.getValueAt(h, 10).toString()));
                                        pstmt8121.setObject(14, java.lang.Double.valueOf(itemsTbl.getValueAt(h, 5).toString()));
                                        pstmt8121.setObject(15, java.lang.Double.valueOf(itemsTbl.getValueAt(h, 6).toString()));
                                        pstmt8121.setObject(16, seq);
                                        pstmt8121.setObject(17, com.afrisoftech.lib.SQLDateFormat.getSQLDate(orderDatepckr.getDate()));
                                        pstmt8121.setObject(18, java.lang.Double.valueOf(itemsTbl.getValueAt(h, 8).toString()));
                                        pstmt8121.setObject(19, storenametxt.getText());
                                        pstmt8121.setObject(20, jTextField1.getText());
                                        pstmt8121.setObject(21, jTextField2.getText());
                                        pstmt8121.setObject(22, getMaindept(jTextField1.getText()));
                                        pstmt8121.executeUpdate();

                                        checker = true;
                                        //}
                                    }
                                }

                            } else {
                                javax.swing.JOptionPane.showMessageDialog(this, "You need to Select the Document Type  ", "ERROR MESSAGE", JOptionPane.ERROR_MESSAGE);

                            }

                            String oder_no = null;
                            String order_no1 = null;
                            java.sql.Date current_date = null;
                            java.sql.Statement pstmt1s = connectDB.createStatement();
                            java.sql.ResultSet rs1s = pstmt1s.executeQuery("select nextval('order_no_seq'),CURRENT_DATE");
                            while (rs1s.next()) {
                                order_no1 = rs1s.getObject(1).toString();
                                current_date = rs1s.getDate(2);
                            }

                            java.sql.Statement pstmt1 = connectDB.createStatement();

                            java.sql.ResultSet rs1 = pstmt1.executeQuery("select  lpad('" + order_no1 + "',10,'0'),date('now')"); //from orders where supplier ='"+jTable1.getValueAt(i,4).toString()+"'");

                            while (rs1.next()) {
                                oder_no = rs1.getObject(1).toString();
                            }

                            System.out.println("" + oder_no + "");

                            orderNotxt.setText(oder_no);

                            TenderTrack.TrackTablePR(connectDB, "raise_lpo_lso", oder_no + "-" + com.afrisoftech.lib.UserName.getLoginName(connectDB).toLowerCase() + "-" + com.afrisoftech.lib.UserName.getServerDate(connectDB), prqTxt.getText());

                            java.sql.PreparedStatement pr_order = connectDB.prepareStatement("UPDATE st_orders SET order_no='" + oder_no + "' where   quotation_no='" + TenderNoTxt.getText() + "' AND supplier ILIKE '" + supplierscmbx.getSelectedItem().toString() + "'  AND remarks ='" + seq + "' ");
                            pr_order.executeUpdate();

                            System.out.println("UPDATE st_orders SET order_no='" + oder_no + "' where   quotation_no='" + TenderNoTxt.getText() + "' AND supplier ILIKE '" + supplierscmbx.getSelectedItem().toString() + "'  AND remarks ='" + seq + "' ");

                            java.sql.PreparedStatement pr_req = connectDB.prepareStatement("UPDATE st_receive_requisation SET terms='" + oder_no + "',supplier= '" + supplierscmbx.getSelectedItem() + "' where   requisition_no='" + prqTxt.getText() + "' AND item_code IN (SELECT DISTINCT code from st_orders WHERE  remarks ilike '" + seq + "' ) ");
                            pr_req.executeUpdate();
                            System.out.println("UPDATE st_receive_requisation SET terms='" + oder_no + "',supplier= '" + supplierscmbx.getSelectedItem() + "' where   requisition_no='" + prqTxt.getText() + "' AND item_code IN (SELECT DISTINCT code from st_orders WHERE  remarks ilike '" + seq + "' ) ");

                            javax.swing.JOptionPane.showMessageDialog(this, "You have generated an " + doctypecmbx.getSelectedItem() + " (" + oder_no + " ) successfully", "Comfirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                            dateDuepckr.setDate(null);

                            com.afrisoftech.lib.GetItemInfo.updateTrail("Generated Purchase order " + oder_no + " to " + supplierscmbx.getSelectedItem(), connectDB);

                            ClearTable.clearthisTable(itemsTbl);

                            TenderNoTxt1.setText(null);
                            jTextField1.setText(null);
                            jTextField2.setText(null);

                        }

                        connectDB.commit();
                        connectDB.setAutoCommit(true);

                    } catch (java.sql.SQLException sq) {
                        sq.printStackTrace();
                        javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

                        jLabel7.setForeground(java.awt.Color.red);
                        try {
                            connectDB.rollback();
                        } catch (java.sql.SQLException sql) {
                            sql.printStackTrace();
                            javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
                        System.out.println(sq.getMessage());

                    }

                } else {
                    javax.swing.JOptionPane.showMessageDialog(this, "Please set a valid date", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Please fill votebook information first", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
// Add your handling code here:
    }//GEN-LAST:event_postbtnActionPerformed
    private String getMaindept(String code) {
        String dept = "-";
        try {
            PreparedStatement pst = connectDB.prepareStatement("SELECT distinct headname from heads where head ilike '" + code + "'");
            ResultSet rset = pst.executeQuery();
            while (rset.next()) {
                dept = rset.getObject(1).toString();
            }
        } catch (SQLException ex) {
            Logger.getLogger(OrderingTenderItemsintfr.class.getName()).log(Level.SEVERE, null, ex);
        }

        return dept;

    }

    private Double getLimitCSO() {
        Double limit = 0.0;
        try {
            PreparedStatement pst = connectDB.prepareStatement(" SELECT distinct csolimit from st_stock_control");
            ResultSet rset = pst.executeQuery();
            while (rset.next()) {
                limit = rset.getDouble(1);
            }
        } catch (SQLException ex) {
            Logger.getLogger(OrderingTenderItemsintfr.class.getName()).log(Level.SEVERE, null, ex);
        }
        return limit;
    }

    private Double getLimitSAD() {
        Double limit = 0.0;
        try {
            PreparedStatement pst = connectDB.prepareStatement(" SELECT distinct sadlimit from st_stock_control");
            ResultSet rset = pst.executeQuery();
            while (rset.next()) {
                limit = rset.getDouble(1);
            }
        } catch (SQLException ex) {
            Logger.getLogger(OrderingTenderItemsintfr.class.getName()).log(Level.SEVERE, null, ex);
        }
        return limit;
    }
    private void tenderSearchbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tenderSearchbtnActionPerformed
        // TODO add your handling code here:
        // if(prqTxt.getText().length()>0){

        System.out.println("Showing dialog");

        //SearchTenderLpo.dispose();
        java.awt.Point point = this.TenderNoTxt.getLocationOnScreen();

        SearchTenderLpo.setSize(400, 200);

        SearchTenderLpo.setLocation(point);
        SearchTenderLpo.setVisible(true);
//       }
//       else{   JOptionPane.showMessageDialog(this, "To Raise a purchase Order You Need To select a requisition for order");}
    }//GEN-LAST:event_tenderSearchbtnActionPerformed

    private void searchtlpoCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchtlpoCaretUpdate
        // TODO add your handling code here:
        if (searchtlpo.getCaretPosition() > 4) {

            awardedtenderNostbl.setModel(TableModel.createTableVectors(connectDB, "select distinct a.quotation_no Tender_No from st_orders a, st_floated_quotations b WHERE a.quotation_no ilike '%T%' and a.quotation_no=b.quotation_no and a.ordered =false and b.ordered=true  and a.quotation_no ilike '%" + searchtlpo.getText() + "%' "));
            jSearchScrollPane2.setViewportView(awardedtenderNostbl);

        }
    }//GEN-LAST:event_searchtlpoCaretUpdate

    private void awardedtenderNostblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_awardedtenderNostblMouseClicked
        // TODO add your handling code here:

        TenderNoTxt.setText(awardedtenderNostbl.getValueAt(awardedtenderNostbl.getSelectedRow(), 0).toString());
        SearchTenderLpo.dispose();

        supplierscmbx.setModel(ComboBoxModel.ComboBoxModel(connectDB, "select DISTINCT supplier from st_orders where quotation_no ='" + TenderNoTxt.getText() + "' "));
        //break;   
        removingUnwanted();

    }//GEN-LAST:event_awardedtenderNostblMouseClicked
    private void removingUnwanted() {
        int CountItems = 0;
        Object[] selectedRows = null;
        java.util.Vector listActVector = new java.util.Vector(1, 1);
        int count = 0;

        for (int i = 0; i < itemsTbl.getRowCount(); i++) {
            if (itemsTbl.getValueAt(i, 1) != null) {

                String itemSelect = itemsTbl.getValueAt(i, 1).toString();
                String codeSelect = itemsTbl.getValueAt(i, 1).toString();

                try {
                    java.sql.PreparedStatement getItems = connectDB.prepareStatement("Select count (item) from st_orders"
                            + " where (item ilike '" + itemSelect + "' or code ilike '" + codeSelect + "') AND quotation_no ilike '" + TenderNoTxt.getText() + "' "
                            + "AND supplier ilike '" + supplierscmbx.getSelectedItem() + "'  ");

                    System.out.println("Select count (item) from st_orders"
                            + " where (item ilike '" + itemSelect + "' or code ilike '" + codeSelect + "') AND quotation_no ilike '" + TenderNoTxt.getText() + "' "
                            + "AND supplier ilike '" + supplierscmbx.getSelectedItem() + "'  ");

                    ResultSet getingem = getItems.executeQuery();

                    while (getingem.next()) {

                        count = getingem.getInt(1);

                    }
                    if (count == 0) {

                        JOptionPane.showMessageDialog(this, "You Selected The Wrong Tender No.", "Wrong Tender", JOptionPane.ERROR_MESSAGE);

                        ClearTable.clearthisTable(itemsTbl);

                    }

                    // System.out.println("["+itemSelect+"] appears times: "+count+ " in ["+TenderNoTxt.getText()+"] for ["+supplierscmbx.getSelectedItem()+"]\n");
                } catch (SQLException ex) {
                    Logger.getLogger(OrderingTenderItemsintfr.class.getName()).log(Level.SEVERE, null, ex);
                    ex.printStackTrace();
                }
            }

        }

        System.out.println(CountItems);

    }
    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        // TODO add your handling code here:

        //if(jCheckBox3.isSelected()==true){
        for (int i = 0; i < itemsTbl.getRowCount(); i++) {
            if (itemsTbl.getValueAt(i, 0) != null) {
                itemsTbl.setValueAt(GetItemInfo.getOrderedBalance(TenderNoTxt.getText(), itemsTbl.getValueAt(i, 0).toString(), supplierscmbx.getSelectedItem().toString(), connectDB), i, 13);
            }

        }
       // } 


    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        // TODO add your handling code here:

        // if(jCheckBox4.isSelected()==true){
        //for(int i=0;i<itemsTbl.getRowCount();i++){
        if (prqTxt.getText().length() > 0) {
            ClearTable.clearthisTable(itemsTbl);
            TenderNoTxt.setText(null);
            int k = 0;

            postbtn.setEnabled(true);
            populateTable11(prqTxt.getText());  // Add your handling code here:

        } else {

            JOptionPane.showMessageDialog(this, "No PRQ Selected", "Reminder Message", JOptionPane.ERROR_MESSAGE);

        }
        //}
        //  } 
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void itemsTblMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemsTblMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_itemsTblMouseEntered

    private void supplierscmbxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_supplierscmbxItemStateChanged
        // TODO add your handling code here:
        this.postbtn.setEnabled(true);
        for (int i = 0; i < itemsTbl.getRowCount(); i++) {
            if (itemsTbl.getValueAt(i, 1) != null) {
                itemsTbl.setValueAt(getBidderUnitPrice(supplierscmbx.getSelectedItem().toString(), TenderNoTxt.getText(), itemsTbl.getValueAt(i, 0).toString()), i, 6);

                itemsTbl.setValueAt(GetItemInfo.getOrderedBalance(TenderNoTxt.getText(), itemsTbl.getValueAt(i, 0).toString(), supplierscmbx.getSelectedItem().toString(), connectDB), i, 13);

            }
        }
    }//GEN-LAST:event_supplierscmbxItemStateChanged

    private void refreshbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshbtnActionPerformed
        // TODO add your handling code here:
        refreshtbl();
    }//GEN-LAST:event_refreshbtnActionPerformed
 //private String getSection(String user){

    //}
    private void waitingPRsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_waitingPRsMouseClicked
        // TODO add your handling code here:
        String pr = waitingPRs.getValueAt(waitingPRs.getSelectedRow(), 0).toString();
        jTabbedPane1.setSelectedIndex(1);
        prqTxt.setText(pr);
        jCheckBox4.doClick();
        jComboBox3.setSelectedItem(UserName.getUserAllocatedSection(connectDB, jTextField9.getText()).toUpperCase());
        // jCheckBox3.doClick();

    }//GEN-LAST:event_waitingPRsMouseClicked

    private void jTextField1CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1CaretUpdate
        // TODO add your handling code here:
        if (jTextField1.getCaretPosition() == 3) {
            jTextField1.setEditable(false);
        }
    }//GEN-LAST:event_jTextField1CaretUpdate

    private void tenderSearchbtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tenderSearchbtn1ActionPerformed
        // TODO add your handling code here:
        System.out.println("Showing dialog");

        //SearchTenderLpo.dispose();
        java.awt.Point point = this.TenderNoTxt1.getLocationOnScreen();

        searchVote.setSize(500, 200);

        searchVote.setLocation(point);
        searchVote.setVisible(true);
    }//GEN-LAST:event_tenderSearchbtn1ActionPerformed

    private void searchtlpo1CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchtlpo1CaretUpdate
        // TODO add your handling code here:
        votesTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select subheadname,srccode,subhead from subheads where subheadname ilike '%" + searchtlpo1.getText() + "%' or subhead ilike '%" + searchtlpo1.getText() + "%' or srccode ilike '%" + searchtlpo1.getText() + "%'"));

    }//GEN-LAST:event_searchtlpo1CaretUpdate

    private void votesTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_votesTblMouseClicked
        // TODO add your handling code here:
        TenderNoTxt1.setText(votesTbl.getValueAt(votesTbl.getSelectedRow(), 0).toString());
        jTextField1.setText(votesTbl.getValueAt(votesTbl.getSelectedRow(), 1).toString());

        jTextField2.setText(votesTbl.getValueAt(votesTbl.getSelectedRow(), 2).toString());
        jButton11.doClick();

    }//GEN-LAST:event_votesTblMouseClicked

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        this.searchVote.dispose();
    }//GEN-LAST:event_jButton11ActionPerformed
    private void refreshtbl() {
        waitingPRs.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,
                "select distinct requisition_no  as Req_No, store_name, old_req_no as tender_no ,user_name raised_by,date Raised_on,'' cso_remarks "
                + "from st_receive_requisation WHERE requisition_no ilike 'PRQ%' AND processed = true "
                + "AND requisition_no IN (SELECT DISTINCT requisition_no FROM st_authorizations where sso_name ilike current_user) "
                + "AND type_of_pr ilike 'Internal%' and terms ilike '-' ORDER BY requisition_no"));

        for (int i = 0; i < waitingPRs.getRowCount(); i++) {
            String pr = waitingPRs.getValueAt(waitingPRs.getSelectedRow(), 0).toString();

            try {
                PreparedStatement pst = connectDB.prepareStatement("SELECT DISTINCT case when cso_remarks is null OR cso_remarks ='' then '-' else cso_remarks end as remark_ from st_authorizations where requisition_no ilike '" + pr + "'");
                ResultSet rset = pst.executeQuery();
                while (rset.next()) {
                    remark = rset.getString(1);
                }
            } catch (SQLException ex) {
                            ex.printStackTrace();             //Exceptions.printStackTrace(ex);
            }

            waitingPRs.setValueAt(remark, i, 5);
        }

    }

    public void tableModelTableChanged() {
        System.out.println("Calculating totals for table 11 and 2.");
        //        double resFloat = 0.00;
        double resFloat = 0.00;

        for (int i = 0; i < itemsTbl.getRowCount(); i++) {

            // if (jTable1.getModel().getValueAt(i, 0) != null) {
            if (itemsTbl.getSelectedColumn() == 2) {

                resFloat = resFloat + Double.parseDouble(itemsTbl.getModel().getValueAt(i, 4).toString());

            }

            totalSumtxt.setText(java.lang.String.valueOf(java.lang.Math.round(resFloat)));

            //  }
        }

        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    public void tableModelTableChanged(javax.swing.event.TableModelEvent evt) {

        //        double resFloat = 0.00;
        double resFloat = 0.00;

        for (int i = 0; i < itemsTbl.getRowCount(); i++) {

            //  if (jTable1.getModel().getValueAt(i, 0) != null) {
            if (itemsTbl.getSelectedColumn() == 2) {

                resFloat = resFloat + Double.parseDouble(itemsTbl.getModel().getValueAt(i, 4).toString());

            }

            totalSumtxt.setText(java.lang.String.valueOf(java.lang.Math.round(resFloat)));

            // }
        }

        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    public void tableModelTableChanged1() {
        System.out.println("Calculating totals for table 12 and 21.");
        //        double resFloat = 0.00;
        double resFloat1 = 0.00;

        for (int i = 0; i < itemsTbl.getRowCount(); i++) {

            if (itemsTbl.getModel().getValueAt(i, 0) != null) {

                if (itemsTbl.getSelectedColumn() == 2) {

                    resFloat1 = resFloat1 + Double.parseDouble(itemsTbl.getModel().getValueAt(i, 3).toString());

                }

                discountTxt.setText(java.lang.String.valueOf(java.lang.Math.round(resFloat1)));

            }
        }

        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    public void tableModelTableChanged1(javax.swing.event.TableModelEvent evt) {

        //        double resFloat = 0.00;
        double resFloat1 = 0.00;

        for (int i = 0; i < itemsTbl.getRowCount(); i++) {

            if (itemsTbl.getModel().getValueAt(i, 0) != null) {

                if (itemsTbl.getSelectedColumn() == 3) {

                    resFloat1 = resFloat1 + Double.parseDouble(itemsTbl.getModel().getValueAt(i, 4).toString());

                }

                discountTxt.setText(java.lang.String.valueOf(java.lang.Math.round(resFloat1)));

            }
        }

        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    public void tableModelTableChanged2() {
        System.out.println("Calculating totals for table 12 and 21.");
        //        double resFloat = 0.00;
        double resFloat1 = 0.00;

        for (int i = 0; i < itemsTbl.getRowCount(); i++) {

            if (itemsTbl.getModel().getValueAt(i, 0) != null) {

                if (itemsTbl.getSelectedColumn() == 3) {

                    resFloat1 = resFloat1 + Double.parseDouble(itemsTbl.getModel().getValueAt(i, 4).toString());

                }

                vatTxt.setText(java.lang.String.valueOf(java.lang.Math.round(resFloat1)));

            }
        }

        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    public void tableModelTableChanged2(javax.swing.event.TableModelEvent evt) {

        //        double resFloat = 0.00;
        double resFloat1 = 0.00;

        for (int i = 0; i < itemsTbl.getRowCount(); i++) {

            if (itemsTbl.getModel().getValueAt(i, 0) != null) {

                if (itemsTbl.getSelectedColumn() == 3) {

                    resFloat1 = resFloat1 + Double.parseDouble(itemsTbl.getModel().getValueAt(i, 3).toString());

                }

                vatTxt.setText(java.lang.String.valueOf(java.lang.Math.round(resFloat1)));

            }
        }

        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog SearchTenderLpo;
    private javax.swing.JTextField TenderNoTxt;
    private javax.swing.JTextField TenderNoTxt1;
    private javax.swing.JTable awardedtenderNostbl;
    private javax.swing.JButton cancelbtn;
    private com.afrisoftech.lib.DatePicker dateDuepckr;
    private javax.swing.JTextField discountTxt;
    private javax.swing.JComboBox doctypecmbx;
    private javax.swing.JButton exitbtn;
    private javax.swing.JButton irqBtnSearch;
    private javax.swing.JDialog itemsOnReqDialog;
    private javax.swing.JTable itemsTbl;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton51;
    private javax.swing.JButton jButton511;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel1311;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel61;
    private javax.swing.JPanel jPanel62;
    private javax.swing.JPanel jPanel63;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JDialog jSearchDialog1;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jSearchPanel1;
    private javax.swing.JPanel jSearchPanel11;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JPanel jSearchPanel3;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane1;
    private javax.swing.JScrollPane jSearchScrollPane11;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JScrollPane jSearchScrollPane3;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTable jSearchTable1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JTextField jTextField1111;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField9;
    private com.afrisoftech.lib.DatePicker orderDatepckr;
    private javax.swing.JTextField orderNotxt;
    private javax.swing.JButton postbtn;
    private javax.swing.JTextField prqSearchTxt;
    private javax.swing.JTable prqSearchtbl;
    private javax.swing.JTextField prqTxt;
    private javax.swing.JButton refreshbtn;
    private javax.swing.JButton searchButton2;
    private javax.swing.JDialog searchVote;
    private javax.swing.JTextField searchtlpo;
    private javax.swing.JTextField searchtlpo1;
    private javax.swing.JTextField storenametxt;
    private javax.swing.JComboBox supplierscmbx;
    private javax.swing.JButton tenderSearchbtn;
    private javax.swing.JButton tenderSearchbtn1;
    private javax.swing.JTextField totalSumtxt;
    private javax.swing.JTextField vatTxt;
    private javax.swing.JTable votesTbl;
    private javax.swing.JTable waitingPRs;
    // End of variables declaration//GEN-END:variables
}
