/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */
package com.afrisoftech.hospinventory;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author root
 */
public class PharmReturnsIntfr extends javax.swing.JInternalFrame {

    /**
     * Creates new form loanpymntintfr
     */
    private final javax.swing.JTextField comboTextField = new javax.swing.JTextField();
    javax.swing.ComboBoxModel mainComboBoxModel;
    javax.swing.ComboBoxModel oldComboBox1311Model;
    private javax.swing.JComboBox cmbox;
    private javax.swing.JComboBox cmbox2;
    private javax.swing.JComboBox cmbox1;
    java.sql.Connection connectDB = null;
    private boolean refreshStatus;
    private UpdatePatientList updatePatientList;
    com.afrisoftech.lib.DBObject dbObject;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    private boolean DirectRev;
    private Double totalreturn;
    private String activity;

    public PharmReturnsIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        refreshStatus = true;

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();

        dbObject = new com.afrisoftech.lib.DBObject();

        //  startRunning();
    }
    String glAcc2 = null;
    String Stock = null;
    String actCode = null;
    String accountCode = null;
    String userName = null;
    String transNo1 = null;
    String glType = null;
    String glCode = null;
    String units = null;
    String chbox = null;
    double price = 0.00;
    double qty = 0.00;
    double amount = 0.00;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jSearchDialog212 = new javax.swing.JDialog();
        jSearchPanel212 = new javax.swing.JPanel();
        jTextField11312 = new javax.swing.JTextField();
        jSearchScrollPane212 = new javax.swing.JScrollPane();
        jSearchTable212 = new com.afrisoftech.dbadmin.JTable();
        jButton4212 = new javax.swing.JButton();
        jButton5212 = new javax.swing.JButton();
        patientSearchDialog = new javax.swing.JDialog();
        patientSearchPanel = new javax.swing.JPanel();
        patientSearchTxt = new javax.swing.JTextField();
        patientSearchScrollPane = new javax.swing.JScrollPane();
        patientSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton42121 = new javax.swing.JButton();
        jButton52121 = new javax.swing.JButton();
        jSearchDialog3 = new javax.swing.JDialog();
        jSearchPanel3 = new javax.swing.JPanel();
        jTextField114 = new javax.swing.JTextField();
        jSearchScrollPane3 = new javax.swing.JScrollPane();
        jSearchTable3 = new com.afrisoftech.dbadmin.JTable();
        jButton92 = new javax.swing.JButton();
        buttonGroup21 = new javax.swing.ButtonGroup();
        jSearchDialog4 = new javax.swing.JDialog();
        jSearchPanel213 = new javax.swing.JPanel();
        jTextField115 = new javax.swing.JTextField();
        jSearchScrollPane4 = new javax.swing.JScrollPane();
        jSearchTable4 = new com.afrisoftech.dbadmin.JTable();
        jButton93 = new javax.swing.JButton();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jTextField52 = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        outPtChbx = new javax.swing.JCheckBox();
        walkinPtChbx = new javax.swing.JCheckBox();
        inPtChbx = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        SearchNoChbx = new javax.swing.JCheckBox();
        searchnameChbx = new javax.swing.JCheckBox();
        jRadioButton1 = new javax.swing.JRadioButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        pharmReturnDate = new com.afrisoftech.lib.DatePicker();
        jLabel14 = new javax.swing.JLabel();
        jPanel413 = new javax.swing.JPanel();
        prescriptionTxt = new javax.swing.JTextField();
        searchButton4 = new javax.swing.JButton();
        jCheckBox5 = new javax.swing.JCheckBox();
        pharmacyChbx = new javax.swing.JCheckBox();
        jTextField6 = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        //jPanel13.setVisible(false);
        jScrollPane22 = new javax.swing.JScrollPane();
        pharmacyReturnsTbl = new com.afrisoftech.dbadmin.JTable();
        jPanel23 = new javax.swing.JPanel();
        jLabel91 = new javax.swing.JLabel();
        jComboBox1311 = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        patientNameTxt = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        patientCategoryTxt = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jPanel42 = new javax.swing.JPanel();
        patientNumberTxt = new javax.swing.JTextField();
        searchButton2 = new javax.swing.JButton();
        doctorNameCmbx = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        departmentCmbx = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        glCodeTxt = new javax.swing.JTextField();
        transNocmbx = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jSeparator12 = new javax.swing.JSeparator();
        jLabel532 = new javax.swing.JLabel();
        jTextField32 = new javax.swing.JTextField();
        jLabel82 = new javax.swing.JLabel();
        jTextField82 = new javax.swing.JTextField();
        try {
            java.sql.Statement pstmt = connectDB.createStatement();
            java.sql.ResultSet rs = pstmt.executeQuery("select rate from pb_operating_parameters where category = 'PF'");

            while (rs.next()){
                jTextField82.setText(rs.getObject(1).toString());
                // glCodeTxt.setText(rs.getObject(2).toString());

            }
        } catch(java.sql.SQLException sqlex){
            System.out.println(sqlex.getMessage());
        }
        amountTxt = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton12 = new javax.swing.JButton();
        jButton63 = new javax.swing.JButton();
        jButton32 = new javax.swing.JButton();
        jButton41 = new javax.swing.JButton();
        jButton54 = new javax.swing.JButton();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton121 = new javax.swing.JButton();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton122 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();

        jSearchDialog212.setUndecorated(true);
        jSearchDialog212.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel212.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel212.setLayout(new java.awt.GridBagLayout());

        jTextField11312.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField11312CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel212.add(jTextField11312, gridBagConstraints);

        jSearchTable212.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable212.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable212.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable212MouseClicked(evt);
            }
        });
        jSearchScrollPane212.setViewportView(jSearchTable212);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel212.add(jSearchScrollPane212, gridBagConstraints);

        jButton4212.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel212.add(jButton4212, gridBagConstraints);

        jButton5212.setText("Close");
        jButton5212.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5212ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel212.add(jButton5212, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog212.getContentPane().add(jSearchPanel212, gridBagConstraints);

        patientSearchDialog.setUndecorated(true);
        patientSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        patientSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        patientSearchPanel.setLayout(new java.awt.GridBagLayout());

        patientSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                patientSearchTxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        patientSearchPanel.add(patientSearchTxt, gridBagConstraints);

        patientSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
        patientSearchTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        patientSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientSearchTableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                patientSearchTableMouseEntered(evt);
            }
        });
        patientSearchScrollPane.setViewportView(patientSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        patientSearchPanel.add(patientSearchScrollPane, gridBagConstraints);

        jButton42121.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientSearchPanel.add(jButton42121, gridBagConstraints);

        jButton52121.setText("Close");
        jButton52121.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52121ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientSearchPanel.add(jButton52121, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientSearchDialog.getContentPane().add(patientSearchPanel, gridBagConstraints);

        jSearchDialog3.setUndecorated(true);
        jSearchDialog3.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel3.setLayout(new java.awt.GridBagLayout());

        jTextField114.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField114CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel3.add(jTextField114, gridBagConstraints);

        jSearchTable3.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable3MouseClicked(evt);
            }
        });
        jSearchScrollPane3.setViewportView(jSearchTable3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel3.add(jSearchScrollPane3, gridBagConstraints);

        jButton92.setText("Dispose");
        jButton92.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton92ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel3.add(jButton92, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog3.getContentPane().add(jSearchPanel3, gridBagConstraints);

        jSearchDialog4.setUndecorated(true);
        jSearchDialog4.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel213.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel213.setLayout(new java.awt.GridBagLayout());

        jTextField115.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField115CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel213.add(jTextField115, gridBagConstraints);

        jSearchTable4.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable4.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable4MouseClicked(evt);
            }
        });
        jSearchScrollPane4.setViewportView(jSearchTable4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel213.add(jSearchScrollPane4, gridBagConstraints);

        jButton93.setText("Dispose");
        jButton93.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton93ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel213.add(jButton93, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog4.getContentPane().add(jSearchPanel213, gridBagConstraints);

        jTextField52.setEditable(false);
        jTextField52.setDoubleBuffered(true);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Pharmacy Returns");
        setFrameIcon(null);
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel5.setBackground(new java.awt.Color(190, 255, 153));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBackground(new java.awt.Color(204, 255, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Issue to", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel6.setBackground(new java.awt.Color(204, 255, 204));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Patient category"));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(outPtChbx);
        outPtChbx.setText("Out Patient");
        outPtChbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        outPtChbx.setIconTextGap(8);
        outPtChbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outPtChbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(outPtChbx, gridBagConstraints);

        buttonGroup1.add(walkinPtChbx);
        walkinPtChbx.setText("Walk-In Patient");
        walkinPtChbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        walkinPtChbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                walkinPtChbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(walkinPtChbx, gridBagConstraints);

        buttonGroup1.add(inPtChbx);
        inPtChbx.setSelected(true);
        inPtChbx.setText("In Patient");
        inPtChbx.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        inPtChbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        inPtChbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inPtChbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(inPtChbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(jPanel6, gridBagConstraints);

        jPanel7.setBackground(new java.awt.Color(204, 255, 204));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Search By"));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        buttonGroup21.add(SearchNoChbx);
        SearchNoChbx.setSelected(true);
        SearchNoChbx.setText("Search By  No.");
        SearchNoChbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(SearchNoChbx, gridBagConstraints);

        buttonGroup21.add(searchnameChbx);
        searchnameChbx.setText("Search By Name");
        searchnameChbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(searchnameChbx, gridBagConstraints);

        jRadioButton1.setText("Confirm Visit");
        jRadioButton1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(jRadioButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(jPanel7, gridBagConstraints);

        jPanel8.setBackground(new java.awt.Color(204, 255, 204));
        jPanel8.setLayout(new java.awt.GridBagLayout());

        jLabel10.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jLabel10, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(pharmReturnDate, gridBagConstraints);

        jLabel14.setText("Prescription No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel8.add(jLabel14, gridBagConstraints);

        jPanel413.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel413.setLayout(new java.awt.GridBagLayout());

        prescriptionTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel413.add(prescriptionTxt, gridBagConstraints);

        searchButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton4.setToolTipText("Search");
        searchButton4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton4.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton4.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel413.add(searchButton4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jPanel413, gridBagConstraints);

        buttonGroup3.add(jCheckBox5);
        jCheckBox5.setText("Donation");
        jCheckBox5.setEnabled(false);
        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel8.add(jCheckBox5, gridBagConstraints);

        buttonGroup3.add(pharmacyChbx);
        pharmacyChbx.setSelected(true);
        pharmacyChbx.setText("Pharmacy");
        pharmacyChbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pharmacyChbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        jPanel8.add(pharmacyChbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jPanel8, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = -5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel5.add(jPanel3, gridBagConstraints);

        jTextField6.setEditable(false);
        jTextField6.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField6.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jTextField6, gridBagConstraints);

        jPanel13.setBackground(new java.awt.Color(204, 255, 204));
        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Select patient here"));
        jPanel13.setLayout(new java.awt.GridBagLayout());

        jScrollPane22.setPreferredSize(new java.awt.Dimension(700, 403));

        pharmacyReturnsTbl.setEditingColumn(1);
        pharmacyReturnsTbl.setEditingRow(pharmacyReturnsTbl.getSelectedRow());
        pharmacyReturnsTbl.setGridColor(new java.awt.Color(204, 204, 255));
        pharmacyReturnsTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pharmacyReturnsTblMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pharmacyReturnsTblMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                pharmacyReturnsTblMouseReleased(evt);
            }
        });
        pharmacyReturnsTbl.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                pharmacyReturnsTblAncestorMoved(evt);
            }
        });
        pharmacyReturnsTbl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                pharmacyReturnsTblKeyReleased(evt);
            }
        });
        jScrollPane22.setViewportView(pharmacyReturnsTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel13.add(jScrollPane22, gridBagConstraints);

        jPanel23.setBackground(new java.awt.Color(204, 255, 204));
        jPanel23.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Confirm Quantities Before Returning", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(255, 0, 102))); // NOI18N
        jPanel23.setLayout(new java.awt.GridBagLayout());

        jLabel91.setText("Patient No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel23.add(jLabel91, gridBagConstraints);

        jComboBox1311.setDoubleBuffered(true);
        jComboBox1311.setMinimumSize(new java.awt.Dimension(0, 0));
        jComboBox1311.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel23.add(jComboBox1311, gridBagConstraints);

        jLabel13.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel23.add(jLabel13, gridBagConstraints);

        patientNameTxt.setEditable(false);
        patientNameTxt.setDoubleBuffered(true);
        patientNameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientNameTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel23.add(patientNameTxt, gridBagConstraints);

        jLabel22.setForeground(new java.awt.Color(255, 0, 51));
        jLabel22.setText("PHARMACY");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel23.add(jLabel22, gridBagConstraints);

        jLabel32.setText("Patient Category");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel23.add(jLabel32, gridBagConstraints);

        patientCategoryTxt.setEditable(false);
        patientCategoryTxt.setDoubleBuffered(true);
        patientCategoryTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientCategoryTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel23.add(patientCategoryTxt, gridBagConstraints);

        jLabel41.setText("Payment Mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel23.add(jLabel41, gridBagConstraints);

        jLabel61.setText("Doctor");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel23.add(jLabel61, gridBagConstraints);

        jPanel42.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "At least 5 characters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(255, 102, 102))); // NOI18N
        jPanel42.setLayout(new java.awt.GridBagLayout());

        patientNumberTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel42.add(patientNumberTxt, gridBagConstraints);

        searchButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton2.setToolTipText("Search");
        searchButton2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton2.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton2.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel42.add(searchButton2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        jPanel23.add(jPanel42, gridBagConstraints);

        doctorNameCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select first_name||' '||middle_name as name from pb_doctors_list  where status ilike 'acti%' order by name"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel23.add(doctorNameCmbx, gridBagConstraints);

        jLabel1.setText("Visit ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel23.add(jLabel1, gridBagConstraints);

        jTextField1.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel23.add(jTextField1, gridBagConstraints);

        departmentCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select DISTINCT initcap(stores) from store_allocation where type ilike 'bill' and user_name =current_user order by 1"));
        departmentCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departmentCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel23.add(departmentCmbx, gridBagConstraints);

        jLabel3.setForeground(new java.awt.Color(0, 51, 204));
        jLabel3.setText("GL_CODE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        jPanel23.add(jLabel3, gridBagConstraints);

        glCodeTxt.setEditable(false);
        glCodeTxt.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        glCodeTxt.setForeground(new java.awt.Color(255, 0, 0));
        try{
            java.sql.Statement stat=connectDB.createStatement();
            java.sql.ResultSet rSet=stat.executeQuery("SELECT income_account"
                + " FROM pb_departments WHERE department_name ='"+departmentCmbx.getSelectedItem().toString()+"'");

            while(rSet.next()){
                glCodeTxt.setText(rSet.getString(1));
            }

        }
        catch(java.sql.SQLException sqle){
            sqle.printStackTrace();
        }
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel23.add(glCodeTxt, gridBagConstraints);

        transNocmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-" }));
        transNocmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transNocmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel23.add(transNocmbx, gridBagConstraints);

        jLabel4.setBackground(new java.awt.Color(0, 0, 255));
        jLabel4.setForeground(new java.awt.Color(0, 51, 255));
        jLabel4.setText("TRANSACTION NUMBER");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        jPanel23.add(jLabel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel13.add(jPanel23, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        jPanel13.add(jSeparator12, gridBagConstraints);

        jLabel532.setText("Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel13.add(jLabel532, gridBagConstraints);

        jTextField32.setEditable(false);
        jTextField32.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField32.setText("0.00");
        jTextField32.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField32.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel13.add(jTextField32, gridBagConstraints);

        jLabel82.setText("Prescription Fee");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        jPanel13.add(jLabel82, gridBagConstraints);

        jTextField82.setEditable(false);
        jTextField82.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel13.add(jTextField82, gridBagConstraints);

        amountTxt.setEditable(false);
        amountTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        amountTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel13.add(amountTxt, gridBagConstraints);

        jPanel9.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel9.setLayout(new java.awt.GridBagLayout());

        jButton12.setBackground(new java.awt.Color(204, 204, 255));
        jButton12.setMnemonic('s');
        jButton12.setText("Save returned items");
        jButton12.setToolTipText("Click here enter data");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        jPanel9.add(jButton12, gridBagConstraints);

        jButton63.setBackground(new java.awt.Color(204, 204, 255));
        jButton63.setMnemonic('r');
        jButton63.setText("Remove row");
        jButton63.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton63ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        jPanel9.add(jButton63, gridBagConstraints);

        jButton32.setBackground(new java.awt.Color(204, 204, 255));
        jButton32.setMnemonic('l');
        jButton32.setText("Clear form");
        jButton32.setToolTipText("Click here to clear textfields");
        jButton32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton32ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        jPanel9.add(jButton32, gridBagConstraints);

        jButton41.setBackground(new java.awt.Color(204, 204, 255));
        jButton41.setMnemonic('C');
        jButton41.setText("Close");
        jButton41.setToolTipText("Click here to close window");
        jButton41.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton41ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        jPanel9.add(jButton41, gridBagConstraints);

        jButton54.setBackground(new java.awt.Color(204, 204, 255));
        jButton54.setMnemonic('h');
        jButton54.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        jPanel9.add(jButton54, gridBagConstraints);

        jButton121.setBackground(new java.awt.Color(204, 204, 255));
        jButton121.setMnemonic('p');
        jButton121.setText("Save and print returned items");
        jButton121.setToolTipText("Click here enter data");
        jButton121.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton121ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        jPanel9.add(jButton121, gridBagConstraints);

        jButton122.setBackground(new java.awt.Color(204, 204, 255));
        jButton122.setMnemonic('R');
        jButton122.setText("Reprint document");
        jButton122.setToolTipText("Click here enter data");
        jButton122.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton122ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        jPanel9.add(jButton122, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 500.0;
        gridBagConstraints.weighty = 1.0;
        jPanel9.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel13.add(jPanel9, gridBagConstraints);

        jTextField3.setText("0.00");
        jTextField3.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField3.setPreferredSize(new java.awt.Dimension(0, 0));
        jPanel13.add(jTextField3, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel5.add(jPanel13, gridBagConstraints);

        jTabbedPane1.addTab("Patient Returns", jPanel5);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        setBounds(0, 0, 1149, 514);
    }// </editor-fold>//GEN-END:initComponents

    private void pharmacyChbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pharmacyChbxActionPerformed
        //this.jTextField4.setText(this.jCheckBox6.getText());        // Add your handling code here:
    }//GEN-LAST:event_pharmacyChbxActionPerformed

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
        //  jTextField4.setText(this.jCheckBox5.getText());   // Add your handling code here:
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jButton122ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton122ActionPerformed
        double amount1 = 0.00;
        double percentage = 0.00;
        double TotalPrice = 0.00;
        double total = 0.00;
        double quantity = 0.00;
        double Total = 0.00;
        String billNo = null;
        String transNo = null;
        String payMode = null;
        String patientAcc = null;
        String cardNo = null;
        String AccDesc = null;
        String scheme = null;
        String cardName = null;
        String isurer = null;
        String expDate = null;
        String staffNo = null;
        String BillNo = null;
        String glAcc = null;
        // String BillNo = null;
        String code = null;
        String user = null;
        String prescNo = null;
        String glAcc2 = null;
        String chbox = null;
        int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "Do you really want to Save?", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

        if (exitOption == javax.swing.JOptionPane.YES_OPTION) {

            //     double presc = java.lang.Double.parseDouble(jTextField8.getText());
            if (outPtChbx.isSelected()) {
                chbox = "OP";
            } else {
                if (walkinPtChbx.isSelected()) {
                    chbox = "WI";
                } else {
                    if (inPtChbx.isSelected()) {
                        chbox = "IP";
                    }
                }
            }

            try {

                connectDB.setAutoCommit(false);

                java.sql.Statement psq = connectDB.createStatement();
                java.sql.ResultSet rstq = psq.executeQuery("select currval('prescription_no')");
                while (rstq.next()) {
                    rstq.getObject(1).toString();

                    prescNo = rstq.getObject(1).toString();
                }

                connectDB.commit();
                connectDB.setAutoCommit(true);

                com.afrisoftech.txtreports.PrescriptionTxt policy = new com.afrisoftech.txtreports.PrescriptionTxt(connectDB, patientNumberTxt.getText(), patientNameTxt.getText(), prescNo, jTextField52.getText());

                //   BillInvoicePdf policy = new BillInvoicePdf();
                //   policy.BillInvoicePdf(connectDB,jTextField9.getText(), jTextField1.getText(),jTextField3.getText(),prescNo,jTextField5.getText(),jTable1,datePicker1.getDate());
                // }
                //  jComboBox2.setSelectedItem(null);
            } catch (java.sql.SQLException sq) {

                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    sql.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

        }        // Add your handling code here:
    }//GEN-LAST:event_jButton122ActionPerformed

    private void jButton121ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton121ActionPerformed
        double amount1 = 0.00;
        double percentage = 0.00;
        double TotalPrice = 0.00;
        double total = 0.00;
        double quantity = 0.00;
        double Total = 0.00;
        String billNo = null;
        String transNo = null;
        String payMode = null;
        String patientAcc = null;
        String cardNo = null;
        String AccDesc = null;
        String scheme = null;
        String cardName = null;
        String isurer = null;
        String expDate = null;
        String staffNo = null;
        String BillNo = null;
        String glAcc = null;
        // String BillNo = null;
        String code = null;
        String user = null;
        String prescNo = null;
        String glAcc2 = null;
        String chbox = null;
        int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "Do you really want to Save?", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

        if (exitOption == javax.swing.JOptionPane.YES_OPTION) {

            //  double presc = java.lang.Double.parseDouble(jTextField8.getText());
            if (outPtChbx.isSelected()) {
                chbox = "OP";
            } else {
                if (walkinPtChbx.isSelected()) {
                    chbox = "WI";
                } else {
                    if (inPtChbx.isSelected()) {
                        chbox = "IP";
                    }
                }
            }

            try {

                connectDB.setAutoCommit(false);
                jButton12ActionPerformed(evt);

                java.sql.Statement psq = connectDB.createStatement();
                java.sql.ResultSet rstq = psq.executeQuery("select currval('prescription_no')");
                while (rstq.next()) {
                    rstq.getObject(1).toString();

                    prescNo = rstq.getObject(1).toString();
                }

                connectDB.commit();
                connectDB.setAutoCommit(true);

                com.afrisoftech.txtreports.PrescriptionTxt policy = new com.afrisoftech.txtreports.PrescriptionTxt(connectDB, patientNumberTxt.getText(), patientNameTxt.getText(), prescNo, jTextField52.getText());

                for (int k = 0; k < pharmacyReturnsTbl.getRowCount(); k++) {
                    for (int r = 0; r < pharmacyReturnsTbl.getColumnCount(); r++) {
                        pharmacyReturnsTbl.getModel().setValueAt(null, k, r);
                    }
                }

                // }
                //  jComboBox2.setSelectedItem(null);
            } catch (java.sql.SQLException sq) {

                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    sql.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

        }        // Add your handling code here:
    }//GEN-LAST:event_jButton121ActionPerformed

    private void searchButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton4ActionPerformed
        searchButtonClicked4();    // Add your handling code here:
    }//GEN-LAST:event_searchButton4ActionPerformed

    private void jSearchTable4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable4MouseClicked
        prescriptionTxt.setText(jSearchTable4.getValueAt(jSearchTable4.getSelectedRow(), 0).toString());

        int j = 0;

        /*
         * java.lang.Object selectedGuaran = cmbox1.getSelectedItem(); int i =
         * jTable11.getSelectedRow(); if (i > -1){ if (selectedGuaran != null) {
         *
         * try { java.sql.Statement pstmt = connectDB.createStatement();
         * java.sql.ResultSet rs = pstmt.executeQuery("select
         * sp.selling_price::numeric from st_stock_prices sp where product =
         * '"+selectedGuaran+"'"); while (rs.next()){
         * jTable11.getModel().setValueAt(rs.getObject(1),i,3); } }
         * catch(java.sql.SQLException sqlex){
         * System.out.println(sqlex.getMessage()); }
         *
         */
        jSearchDialog4.dispose();  // Add your handling code here:
    }//GEN-LAST:event_jSearchTable4MouseClicked

    private void jTextField115CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField115CaretUpdate
        if (jTextField115.getCaretPosition() > 0) {
            jSearchTable4.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select chq_no FROM pb_documents_register WHERE chq_no ILIKE '%" + jTextField115.getText() + "%' and used = 'false' and doc_name ilike '%pha%' order by chq_no"));

            /*
             * try { searchRowSet4.execute("select chq_no FROM
             * pb_documents_register WHERE chq_no ILIKE
             * '"+jTextField115.getText()+"%' and used = 'false' and doc_name
             * ilike '%pha%' order by chq_no");
             *
             * jSearchTable4.setModel(new
             * org.netbeans.lib.sql.models.TableModel(searchRowSet4, new
             * org.netbeans.lib.sql.models.TableModel.Column[] { new
             * org.netbeans.lib.sql.models.TableModel.Column("chq_no",
             * "Prescription No.", false) // new
             * org.netbeans.lib.sql.models.TableModel.Column("selling_price",
             * "Selling price", false), // new
             * org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl
             * code", false) }));
             */
            jSearchScrollPane4.setViewportView(jSearchTable4);
            System.out.println("Cannot sort out");

        }  // Add your handling code here:
    }//GEN-LAST:event_jTextField115CaretUpdate

    private void jButton93ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton93ActionPerformed
        this.jSearchDialog4.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton93ActionPerformed
    private void searchButtonClicked4() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.prescriptionTxt.getLocationOnScreen();

        jSearchDialog4.setSize(400, 200);

        jSearchDialog4.setLocation(point);

        jSearchDialog4.setVisible(true);

    }
    private void searchButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton3ActionPerformed
        //  searchButtonClicked3();  // Add your handling code here:
    }//GEN-LAST:event_searchButton3ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        javax.swing.JInternalFrame other = new ServiceAccSlipIntfr(connectDB, pConnDB);
        this.getParent().add(other, javax.swing.JLayeredPane.DEFAULT_LAYER);
        try {
            other.setSelected(true);
        } catch (java.beans.PropertyVetoException pvt) {
        }
        other.setVisible(true);            // Add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jButton32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton32ActionPerformed
        patientNameTxt.setText("");
        jTextField32.setText("0.00");
        jTextField52.setText("");
        patientCategoryTxt.setText("");
        patientNumberTxt.setText("");
        amountTxt.setText("0.00");
        // jTextField32.setText("0.00");

        for (int k = 0; k < pharmacyReturnsTbl.getRowCount(); k++) {
            for (int r = 0; r < pharmacyReturnsTbl.getColumnCount(); r++) {
                pharmacyReturnsTbl.getModel().setValueAt(null, k, r);
            }
        }

        //  jTextField3.setText("0.00");// Add your handling code here:
    }//GEN-LAST:event_jButton32ActionPerformed

    private void jButton41ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton41ActionPerformed
        this.setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_jButton41ActionPerformed

    private void jButton63ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton63ActionPerformed

        int rows2Delete = pharmacyReturnsTbl.getSelectedRowCount();

        int[] selectedRows = pharmacyReturnsTbl.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) pharmacyReturnsTbl.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) pharmacyReturnsTbl.getModel();

                defTableModel.removeRow(pharmacyReturnsTbl.getSelectedRow());
            }
        }

        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(pharmacyReturnsTbl, 5);
        amountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));

        // Add your handling code here:
    }//GEN-LAST:event_jButton63ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        java.util.Date periodFrom = null;
        java.util.Date periodTo = null;

        java.util.Date dateToday = new java.util.Date();
        java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

        try {

            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + pharmReturnDate.getDate() + "' BETWEEN period_from AND period_to");
            while (rsetf.next()) {
                periodFrom = rsetf.getDate(1);
                periodTo = rsetf.getDate(2);
            }

        } catch (java.sql.SQLException sq) {
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());

        }

        if (pharmReturnDate.getDate().before(periodFrom) || pharmReturnDate.getDate().after(periodTo)) {
            javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        } else {

            if (pharmacyReturnsTbl.isEditing()) {
                pharmacyReturnsTbl.getCellEditor().stopCellEditing();
            }

            double amount1 = 0.00;
            double percentage = 0.00;
            double TotalPrice = 0.00;
            double total = 0.00;
            double presc = 0.00;
            double Total = 0.00;

            java.util.Calendar calendar = java.util.Calendar.getInstance();

            long dateNow = calendar.getTimeInMillis();

            java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

            System.out.println(datenowSql1.toString());

            java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

            System.out.println(datenowSql.toString());

            String billNo = null;
            String transNo = null;
            String payMode = null;
            String patientAcc = null;
            String cardNo = null;
            String AccDesc = null;
            String scheme = null;
            String cardName = null;
            String isurer = null;
            java.sql.Date expDate = null;
            String staffNo = null;
            String BillNo = null;
            String glAcc = null;
            // String BillNo = null;
            String code = null;
            String user = null;
            String prescNo = null;
            java.util.Date admDate = null;
            String visitid = "-";
            String costofSaleCode = null;
            String stockCode = null;
            String costofSale = null;
            String stock = null;
            String strength = null;
            double sellPrice = 0.00;
            int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "Do you really want to Save?", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

            if (exitOption == javax.swing.JOptionPane.YES_OPTION) {

                // presc = java.lang.Double.parseDouble(jTextField8.getText());
                if (outPtChbx.isSelected()) {
                    chbox = "OP";
                } else {
                    if (walkinPtChbx.isSelected()) {
                        chbox = "WI";
                    } else {
                        if (inPtChbx.isSelected()) {
                            chbox = "IP";
                        }
                    }
                }

                java.sql.Savepoint registerSavePoint = null;
                try {
                    connectDB.setAutoCommit(false);
                    registerSavePoint = connectDB.setSavepoint("registration");

                } catch (java.sql.SQLException ex) {
                    ex.printStackTrace();
                }

                try {

                    java.sql.Statement stm121x = connectDB.createStatement();

                    java.sql.ResultSet rse121x = stm121x.executeQuery("select direct_rev from pb_patient_names");
                    while (rse121x.next()) {

                        DirectRev = rse121x.getBoolean(1);

                    }

                    java.sql.Statement psq = connectDB.createStatement();
                    java.sql.ResultSet rstq = psq.executeQuery("select nextval('prescription_no')");
                    while (rstq.next()) {
                        rstq.getObject(1).toString();

                        prescNo = rstq.getObject(1).toString();
                    }
                    System.out.println(prescNo);
                    java.sql.Statement stmtz = connectDB.createStatement();

                    /*
                     * java.sql.ResultSet rset = stmtz.executeQuery("select
                     * visit_id from hp_admission where patient_no
                     * ='"+jTextField92.getText()+"' and discharge = false");
                     * while (rset.next()){
                     *
                     * visitid = rset.getObject(1).toString(); }
                     */
                    if (inPtChbx.isSelected()) {
                        System.out.println("This is the visit ID " + visitid);
                        if (jTextField52.getText().equals("Scheme")) {
                            java.sql.Statement stm1 = connectDB.createStatement();
                            java.sql.ResultSet rse1 = stm1.executeQuery("select pay_mode,account_no,description,payer,payer,expiry_date,account_no from hp_inpatient_register where patient_no ='" + patientNumberTxt.getText() + "'");
                            while (rse1.next()) {

                                //                payMode = dbObject.getDBObject(rse1.getObject(1), "-");
                                cardNo = dbObject.getDBObject(rse1.getObject(2), "-");
                                scheme = dbObject.getDBObject(rse1.getObject(3), "-");
                                cardName = dbObject.getDBObject(rse1.getObject(4), "-");
                                isurer = dbObject.getDBObject(rse1.getObject(5), "-");
                                expDate = rse1.getDate(6);
                                staffNo = dbObject.getDBObject(rse1.getObject(7), "-");

                            }
                        }
                        System.out.println(staffNo);
                        java.sql.Statement stm12 = connectDB.createStatement();
                        java.sql.ResultSet rse12 = stm12.executeQuery("select adm_date from hp_inpatient_register where patient_no ='" + patientNumberTxt.getText() + "'");
                        while (rse12.next()) {
                            admDate = rse12.getDate(1);
                        }
                        System.out.println(admDate);
                        // if (exp.before(date)){
                        if (this.pharmReturnDate.getDate().before(admDate)) {
                            javax.swing.JOptionPane.showMessageDialog(this, "Admission date is : " + admDate + " CHECK billing date", "Date Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            java.sql.Statement stm126 = connectDB.createStatement();
                            java.sql.ResultSet rse126 = stm126.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                            while (rse126.next()) {

                                patientAcc = rse126.getObject(1).toString();
                                AccDesc = rse126.getObject(2).toString();
                            }
                            System.out.println(AccDesc);

                            java.sql.Statement ps = connectDB.createStatement();
                            java.sql.ResultSet rst = ps.executeQuery("select nextval('transaction_no_seq')");
                            while (rst.next()) {
                                rst.getObject(1).toString();

                                transNo = rst.getObject(1).toString();
                            }
                            System.out.println(transNo);
                            java.sql.Statement ps11 = connectDB.createStatement();
                            java.sql.ResultSet rst11 = ps11.executeQuery("select nextval('billing_no_seq'),current_user");
                            while (rst11.next()) {
                                rst11.getObject(1).toString();

                                billNo = rst11.getObject(1).toString();
                                user = rst11.getObject(2).toString();
                            }
                            System.out.println(user);
                            java.sql.Statement stm122 = connectDB.createStatement();
                            java.sql.ResultSet rse122 = stm122.executeQuery("select code,activity from pb_activity where activity_category ='IP'");
                            while (rse122.next()) {

                                code = rse122.getObject(1).toString();
                                glAcc = rse122.getObject(2).toString();
                            }
                            System.out.println(glAcc);

                            java.sql.Statement pst2 = connectDB.createStatement();
                            java.sql.ResultSet rs = pst2.executeQuery("select current_user");
                            while (rs.next()) {
                                user = rs.getObject(1).toString();
                            }

                            System.out.println(user);

                            java.sql.Statement pst21 = connectDB.createStatement();
                            java.sql.ResultSet rs11 = pst21.executeQuery("select code,activity,current_user from pb_activity where activity_category = 'S'");
                            while (rs11.next()) {
                                actCode = rs11.getObject(1).toString();
                                Stock = rs11.getObject(2).toString();
                                userName = rs11.getObject(3).toString();
                            }
                            System.out.println(userName);
                            java.sql.Statement pst211 = connectDB.createStatement();
                            java.sql.ResultSet rs111 = pst211.executeQuery("select code,activity from pb_activity where activity_category = 'CS'");
                            while (rs111.next()) {
                                glCode = rs111.getObject(1).toString();
                                glType = rs111.getObject(2).toString();
                            }
                            System.out.println(glType);
                            for (int i = 0; i < pharmacyReturnsTbl.getRowCount(); i++) {
                                if (Boolean.parseBoolean(pharmacyReturnsTbl.getModel().getValueAt(i, 2).toString())) {
                                    if (pharmacyReturnsTbl.getModel().getValueAt(i, 0) != null) {
                                        System.out.println("We are Starting To Insert  -- " + pharmacyReturnsTbl.getModel().getValueAt(i, 0));

                                        java.sql.Statement pstz = connectDB.createStatement();
                                        java.sql.ResultSet rsz = pstz.executeQuery("SELECT strength FROM st_stock_item WHERE item_code ilike '" + pharmacyReturnsTbl.getValueAt(i, 7).toString() + "'");
                                        while (rsz.next()) {
                                            strength = rsz.getObject(1).toString();
                                        }
                                        java.sql.Statement pst21c = connectDB.createStatement();
                                        java.sql.ResultSet rs11c = pst21c.executeQuery("select cost_of_sale,stock_code from pb_departments where department_name ilike '" + pharmacyReturnsTbl.getValueAt(i, 6).toString() + "'");
                                        //java.sql.ResultSet rs11c = pst21c.executeQuery("select cost_of_sale,stock_code from pb_departments where department_name ilike '" + com.afrisoftech.lib.GLCodesFactory.getGlCode(connectDB, pharmacyReturnsTbl.getValueAt(i, 6).toString()) + "'");
                                        while (rs11c.next()) {
                                            costofSaleCode = rs11c.getObject(1).toString();
                                            stockCode = rs11c.getObject(2).toString();
                                        }
                                        java.sql.Statement pst211c = connectDB.createStatement();
                                        java.sql.ResultSet rs111c = pst211c.executeQuery("select activity from pb_activity where code = '" + costofSaleCode + "'");
                                        while (rs111c.next()) {
                                            costofSale = rs111c.getObject(1).toString();

                                        }
                                        java.sql.Statement pst2111c = connectDB.createStatement();
                                        java.sql.ResultSet rs1111c = pst2111c.executeQuery("select activity from pb_activity where code = '" + stockCode + "'");
                                        while (rs1111c.next()) {
                                            stock = rs1111c.getObject(1).toString();
                                        }

                                        presc = 0.00;

                                        Total = java.lang.Double.parseDouble(jTextField32.getText());
                                        if (Total > presc) {
                                            amount1 = java.lang.Double.parseDouble(pharmacyReturnsTbl.getValueAt(i, 5).toString());

                                            percentage = (amount1 / Total) * 100;

                                            TotalPrice = ((percentage / 100) * presc) + amount1;
                                        } else {
                                            amount1 = java.lang.Double.parseDouble(pharmacyReturnsTbl.getValueAt(i, 5).toString());

                                            //  percentage = (amount1/Total)*100;
                                            TotalPrice = amount1;
                                        }
                                        java.sql.Statement stm121 = connectDB.createStatement();
                                        java.sql.ResultSet rse121 = stm121.executeQuery("select units from st_stock_item where item_code ='" + pharmacyReturnsTbl.getModel().getValueAt(i, 7).toString() + "'");
                                        while (rse121.next()) {

                                            glAcc2 = rse121.getObject(1).toString();
                                            System.out.println(glAcc2);
                                        }
                                        java.sql.Statement pstB = connectDB.createStatement();
                                        java.sql.ResultSet rsB = pstB.executeQuery("select transfer_price,units from st_stock_prices where product_id = '" + pharmacyReturnsTbl.getModel().getValueAt(i, 7) + "'");

                                        while (rsB.next()) {
                                            price = rsB.getDouble(1);
                                            // units = rsB.getString(2);
                                            qty = java.lang.Double.parseDouble(pharmacyReturnsTbl.getValueAt(i, 1).toString());
                                            sellPrice = java.lang.Double.parseDouble(pharmacyReturnsTbl.getValueAt(i, 3).toString());
                                        }
                                        amount = price * qty;
                                        if (amount > 10000) {
                                            amount = (qty * sellPrice) * 0.67;
                                        } else {

                                            amount = amount;
                                        }

                                        String activityCde = null;

                                        java.sql.Statement stmactivity = connectDB.createStatement();
                                        java.sql.ResultSet rseactivity = stmactivity.executeQuery(""
                                                + "SELECT stock_code FROM pb_departments WHERE department_name ilike '%" + pharmacyReturnsTbl.getModel().getValueAt(i, 6).toString() + "%'");
                                        while (rseactivity.next()) {

                                            activityCde = rseactivity.getObject(1).toString();
                                            System.err.println(activityCde);
                                        }

                                        Statement fee = connectDB.createStatement();
                                        java.sql.ResultSet rseActvty = fee.executeQuery("select distinct activity from pb_activity where code ='" + glCodeTxt.getText() + "' limit 1 ");
                                        while (rseActvty.next()) {

                                            activity = rseActvty.getObject(1).toString();
                                            System.err.println(activity);
                                        }

                                        System.out.println(price);

                                        //1
                                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                        //1 for (int i = 0; i < jTable1.getRowCount(); i++){

                                        pstmt.setString(1, patientNumberTxt.getText());
                                        pstmt.setObject(2, pharmacyReturnsTbl.getValueAt(i, 0).toString());
                                        pstmt.setString(3, patientCategoryTxt.getText());
                                        pstmt.setString(4, jTextField52.getText());
                                        pstmt.setString(5, transNo);
                                        pstmt.setString(7, scheme);
                                        pstmt.setString(6, cardNo);
                                        pstmt.setString(8, cardName);
                                        pstmt.setString(9, isurer);
                                        pstmt.setDate(10, expDate);
                                        pstmt.setObject(11, doctorNameCmbx.getSelectedItem().toString());
                                        // pstmt.setObject(12,jTable13.getValueAt(i,5).toString());
                                        if (TotalPrice > 0) {
                                            pstmt.setDouble(13, TotalPrice);
                                            pstmt.setDouble(12, 0.00);
                                        } else {
                                            pstmt.setDouble(12, TotalPrice * -1);
                                            pstmt.setDouble(13, 0.00);
                                        }
                                        pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(pharmReturnDate.getDate()));
                                        pstmt.setObject(15, patientAcc);
                                        pstmt.setString(16, activity);
                                        pstmt.setDouble(17, java.lang.Double.parseDouble(pharmacyReturnsTbl.getValueAt(i, 1).toString()));
                                        pstmt.setObject(18, staffNo);
                                        pstmt.setBoolean(19, false);
                                        pstmt.setString(20, "Billing");
                                        pstmt.setBoolean(21, false);
                                        pstmt.setString(22, AccDesc);
                                        pstmt.setString(23, visitid);
                                        pstmt.setString(24, user);
                                        pstmt.setString(25, prescNo);
                                        pstmt.setString(26, "IP");
                                        pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                        pstmt.setString(28, jTextField1.getText());
                                        pstmt.executeUpdate();

                                        java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");

                                        pstmt2.setString(1, pharmacyReturnsTbl.getModel().getValueAt(i, 9).toString());
                                        pstmt2.setString(2, pharmacyReturnsTbl.getValueAt(i, 6).toString());
                                        pstmt2.setString(3, patientNumberTxt.getText());
                                        pstmt2.setString(4, patientNameTxt.getText());
                                        pstmt2.setString(5, "");
                                        pstmt2.setString(6, cardNo);
                                        pstmt2.setString(7, cardName);
                                        pstmt2.setString(8, "IP");
                                        pstmt2.setString(9, isurer);
                                        pstmt2.setString(10, jTextField52.getText());
                                        pstmt2.setString(11, "");
                                        pstmt2.setString(12, "");
                                        pstmt2.setString(13, "");
                                        pstmt2.setString(14, pharmacyReturnsTbl.getValueAt(i, 0).toString());
                                        pstmt2.setString(15, "Revenue");

                                        if (TotalPrice > 0) {
                                            pstmt2.setDouble(16, TotalPrice);
                                            pstmt2.setDouble(17, 0.00);
                                        } else {
                                            pstmt2.setDouble(17, TotalPrice * -1);
                                            pstmt2.setDouble(16, 0.00);
                                        }
                                        pstmt2.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(pharmReturnDate.getDate()));
                                        pstmt2.setString(19, transNo);
                                        pstmt2.setBoolean(20, false);
                                        pstmt2.setBoolean(21, false);
                                        pstmt2.setBoolean(22, false);
                                        pstmt2.setString(23, user);

                                        pstmt2.executeUpdate();

                                        java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into hp_pharmacy values( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                        pstmt1.setString(1, patientNumberTxt.getText());
                                        pstmt1.setString(2, patientNameTxt.getText());
                                        pstmt1.setDouble(3, java.lang.Double.parseDouble(pharmacyReturnsTbl.getValueAt(i, 1).toString()) * -1);
                                        pstmt1.setDouble(4, TotalPrice * -1);
                                        //  pstmt1.setObject(4,jTable13.getValueAt(i,5).toString());
                                        pstmt1.setObject(5, pharmacyReturnsTbl.getValueAt(i, 0).toString());
                                        pstmt1.setDouble(7, sellPrice);
                                        pstmt1.setObject(8, pharmacyReturnsTbl.getValueAt(i, 6).toString());
                                        pstmt1.setBoolean(6, true);
                                        pstmt1.setString(9, prescNo);
                                        pstmt1.setObject(10, doctorNameCmbx.getSelectedItem().toString());
                                        pstmt1.setBoolean(11, true);
                                        pstmt1.setString(12, glAcc2);
                                        pstmt1.setDate(13, com.afrisoftech.lib.SQLDateFormat.getSQLDate(pharmReturnDate.getDate()));
                                        pstmt1.setString(14, pharmacyReturnsTbl.getValueAt(i, 6).toString());
                                        pstmt1.setString(15, "IP");
                                        pstmt1.setString(16, jTextField52.getText());
                                        pstmt1.setString(17, "-");
                                        pstmt1.setDouble(18, TotalPrice - amount1);
                                        pstmt1.setString(19, user);
                                        pstmt1.setString(20, prescriptionTxt.getText());
                                        pstmt1.setObject(21, pharmacyReturnsTbl.getValueAt(i, 7).toString());
                                        //  pstmt1.setObject(22, pharmacyReturnsTbl.getValueAt(i, 8).toString());
                                        pstmt1.executeUpdate();

//
                                        java.sql.PreparedStatement pstmt1a = connectDB.prepareStatement("INSERT INTO st_stock_cardex values( ? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                        pstmt1a.setString(1, null);
                                        pstmt1a.setObject(3, pharmacyReturnsTbl.getValueAt(i, 0).toString());
                                        pstmt1a.setString(2, pharmacyReturnsTbl.getValueAt(i, 6).toString());
                                        pstmt1a.setDate(4, null);
                                        pstmt1a.setDouble(21, amount);

                                        pstmt1a.setObject(23, activityCde);
                                        pstmt1a.setDouble(6, 0.00);
                                        pstmt1a.setObject(7, glAcc2);
                                        pstmt1a.setObject(8, "");
                                        pstmt1a.setString(9, null);
                                        pstmt1a.setString(10, null);
                                        pstmt1a.setDouble(11, 0.00);
                                        pstmt1a.setDouble(12, 0.00);
                                        pstmt1a.setDouble(13, 0.00);
                                        if (patientNameTxt.getText().equals("")) {
                                            javax.swing.JOptionPane.showMessageDialog(this, "Enter patient", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                        } else {
                                            pstmt1a.setString(14, patientNameTxt.getText());
                                        }

                                        pstmt1a.setString(15, userName);

                                        pstmt1a.setString(16, "");

                                        pstmt1a.setString(17, null);
                                        pstmt1a.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(pharmReturnDate.getDate()));
                                        pstmt1a.setString(19, departmentCmbx.getSelectedItem().toString());
                                        pstmt1a.setString(20, "Issuing");
                                        pstmt1a.setDouble(22, 0.00);
                                        //  pstmt1a.setString(23, stockCode);
                                        pstmt1a.setDouble(5, 0.00);
                                        pstmt1a.setString(24, "");
                                        pstmt1a.setString(25, stock);
                                        pstmt1a.setString(26, transNo);
                                        pstmt1a.setDouble(27, java.lang.Double.parseDouble(pharmacyReturnsTbl.getValueAt(i, 1).toString()) * -1);
                                        pstmt1a.setString(28, userName);
                                        pstmt1a.setBoolean(29, false);
                                        pstmt1a.setDouble(30, 0.00);
                                        pstmt1a.setDate(31, com.afrisoftech.lib.SQLDateFormat.getSQLDate(pharmReturnDate.getDate()));
                                        pstmt1a.setString(32, pharmacyReturnsTbl.getValueAt(i, 7).toString());
                                        //  pstmt1a.setString(33, pharmacyReturnsTbl.getValueAt(i, 8).toString());
                                        pstmt1a.executeUpdate();

                                        java.sql.PreparedStatement pstmt2a = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                        pstmt2a.setObject(1, costofSaleCode);
                                        pstmt2a.setObject(2, costofSale);
                                        pstmt2a.setString(3, patientNumberTxt.getText());
                                        pstmt2a.setString(4, patientNameTxt.getText());
                                        pstmt2a.setString(5, "");
                                        pstmt2a.setString(6, "");
                                        pstmt2a.setString(7, "");
                                        pstmt2a.setString(8, "");
                                        pstmt2a.setString(9, "");
                                        pstmt2a.setString(10, "");
                                        pstmt2a.setString(11, "");
                                        pstmt2a.setString(12, "");
                                        pstmt2a.setString(13, "");
                                        pstmt2a.setString(14, pharmacyReturnsTbl.getValueAt(i, 0).toString());
                                        pstmt2a.setString(15, "Issuing");
                                        pstmt2a.setDouble(17, amount);
                                        pstmt2a.setDouble(16, 0.00);
                                        pstmt2a.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(pharmReturnDate.getDate()));
                                        pstmt2a.setString(19, transNo);
                                        pstmt2a.setBoolean(20, false);
                                        pstmt2a.setBoolean(21, false);
                                        pstmt2a.setBoolean(22, false);
                                        pstmt2a.setString(23, userName);
                                        pstmt2a.executeUpdate();
                                        // }

                                        java.sql.PreparedStatement pstmt33 = connectDB.prepareStatement("insert into st_sub_stores values( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                        // pstmt33.setObject(1, pharmacyReturnsTbl.getValueAt(i, 6).toString());//initially 28/7/2014
                                        pstmt33.setObject(1, departmentCmbx.getSelectedItem().toString());
                                        pstmt33.setObject(2, pharmacyReturnsTbl.getValueAt(i, 0).toString());
                                        pstmt33.setDouble(3, java.lang.Double.parseDouble(pharmacyReturnsTbl.getValueAt(i, 1).toString()));
                                        pstmt33.setDouble(4, 0.00);
                                        pstmt33.setDouble(6, 0.00);
                                        pstmt33.setDouble(5, sellPrice);
                                        //pstmt33.setString(6,jTable13.getValueAt(i,5).toString());
                                        pstmt33.setDouble(7, TotalPrice);
                                        pstmt33.setTimestamp(10, Timestamp.valueOf(sdf.format(pharmReturnDate.getDate())));
                                        pstmt33.setString(8, transNo);
                                        pstmt33.setObject(9, doctorNameCmbx.getSelectedItem().toString());
                                        //pstmt33.setString(11,code);
                                        pstmt33.setString(11, userName);
                                        pstmt33.setString(12, units);
                                        pstmt33.setString(13, departmentCmbx.getSelectedItem().toString());
                                        pstmt33.setString(14, patientNumberTxt.getText() + " " + patientNameTxt.getText());
                                        pstmt33.setDouble(15, price * qty);
                                        pstmt33.setObject(16, pharmacyReturnsTbl.getValueAt(i, 7).toString());
                                        // pstmt33.setString(17, pharmacyReturnsTbl.getValueAt(i, 8).toString());
                                        pstmt33.executeUpdate();
                                        System.out.println("We are finished To Insert  -- " + pharmacyReturnsTbl.getModel().getValueAt(i, 0));

                                    }
                                }
                                //                  javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                            }
                        }
                    } else {

                        if (this.outPtChbx.isSelected()) {

                            if (jTextField52.getText().equals("Scheme")) {
                                //                               System.out.println("We are started To Insert  -- "+pharmacyReturnsTbl.getModel().getValueAt(i, 0));

                                java.sql.Statement stm1q = connectDB.createStatement();
                                java.sql.ResultSet rse1 = stm1q.executeQuery("select pay_mode,account_no,description,payer,payer,expiry_date,account_no from hp_patient_register where patient_no ='" + patientNumberTxt.getText() + "'");

                                while (rse1.next()) {

                                    payMode = dbObject.getDBObject(rse1.getObject(1), "-");
                                    cardNo = dbObject.getDBObject(rse1.getObject(2), "-");
                                    scheme = dbObject.getDBObject(rse1.getObject(3), "-");
                                    cardName = dbObject.getDBObject(rse1.getObject(4), "-");
                                    isurer = dbObject.getDBObject(rse1.getObject(5), "-");
                                    expDate = rse1.getDate(6);
                                    staffNo = dbObject.getDBObject(rse1.getObject(7), "-");
                                }
                            }
                        } else {
                            if (this.walkinPtChbx.isSelected() && patientNumberTxt.getText() == "") {
                                patientNumberTxt.setText("WK" + prescNo);
                            }
                        }
                        System.out.println(staffNo);

                        java.sql.Statement stm126 = connectDB.createStatement();
                        java.sql.ResultSet rse126 = stm126.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                        while (rse126.next()) {

                            patientAcc = rse126.getObject(1).toString();
                            AccDesc = rse126.getObject(2).toString();
                        }
                        System.out.println(AccDesc);
                        //  connectDB.setAutoCommit(false);
                        java.sql.Statement ps = connectDB.createStatement();
                        java.sql.ResultSet rst = ps.executeQuery("select nextval('transaction_no_seq')");
                        while (rst.next()) {
                            rst.getObject(1).toString();

                            transNo = rst.getObject(1).toString();
                        }
                        System.out.println(transNo);
                        java.sql.Statement ps11 = connectDB.createStatement();
                        java.sql.ResultSet rst11 = ps11.executeQuery("select nextval('billing_no_seq'),current_user");
                        while (rst11.next()) {
                            rst11.getObject(1).toString();

                            billNo = rst11.getObject(1).toString();
                            user = rst11.getObject(2).toString();
                        }
                        System.out.println(user);
                        java.sql.Statement stm122 = connectDB.createStatement();
                        java.sql.ResultSet rse122 = stm122.executeQuery("select code,activity from pb_activity where activity_category ='IP'");
                        while (rse122.next()) {

                            code = rse122.getObject(1).toString();
                            glAcc = rse122.getObject(2).toString();
                        }
                        System.out.println("This " + glAcc);

                        java.sql.Statement pst2 = connectDB.createStatement();
                        java.sql.ResultSet rs = pst2.executeQuery("select current_user");
                        while (rs.next()) {
                            user = rs.getObject(1).toString();
                        }

                        System.out.println(user);

                        java.sql.Statement pst21 = connectDB.createStatement();
                        java.sql.ResultSet rs11 = pst21.executeQuery("select code,activity,current_user from pb_activity where activity_category = 'S'");
                        while (rs11.next()) {
                            actCode = rs11.getObject(1).toString();
                            Stock = rs11.getObject(2).toString();
                            userName = rs11.getObject(3).toString();
                        }
                        System.out.println(userName);
                        java.sql.Statement pst211 = connectDB.createStatement();
                        java.sql.ResultSet rs111 = pst211.executeQuery("select code,activity from pb_activity where activity_category = 'CS'");
                        while (rs111.next()) {
                            glCode = rs111.getObject(1).toString();
                            glType = rs111.getObject(2).toString();
                        }
                        System.out.println(glType);
                        for (int i = 0; i < pharmacyReturnsTbl.getRowCount(); i++) {
                            if (pharmacyReturnsTbl.getModel().getValueAt(i, 0) != null) {
                                if (pharmacyReturnsTbl.getModel().getValueAt(i, 2) == java.lang.Boolean.TRUE) {

                                    String activityCode = null;

                                    try {
                                        java.sql.Statement stmactivity = connectDB.createStatement();
                                        java.sql.ResultSet rseactivity = stmactivity.executeQuery(""
                                                + "SELECT code FROM pb_activity WHERE activity ilike '%" + pharmacyReturnsTbl.getModel().getValueAt(i, 6).toString() + "%'");
                                        while (rseactivity.next()) {

                                            activityCode = rseactivity.getObject(1).toString();
                                            System.err.println(activityCode);
                                        }
                                    } catch (java.sql.SQLException sq) {
                                        System.err.println("the activity code error is " + sq);
                                    }

                                    java.sql.Statement pstz = connectDB.createStatement();
                                    java.sql.ResultSet rsz = pstz.executeQuery("SELECT strength FROM st_stock_item WHERE item_code = '" + pharmacyReturnsTbl.getValueAt(i, 7).toString() + "'");
                                    while (rsz.next()) {
                                        strength = rsz.getObject(1).toString();
                                    }
                                    java.sql.Statement pst21c = connectDB.createStatement();
                                    java.sql.ResultSet rs11c = pst21c.executeQuery("select cost_of_sale,stock_code from pb_departments where income_account = '" + pharmacyReturnsTbl.getValueAt(i, 9).toString() + "'");
                                    while (rs11c.next()) {
                                        costofSaleCode = rs11c.getObject(1).toString();
                                        stockCode = rs11c.getObject(2).toString();
                                    }
                                    java.sql.Statement pst211c = connectDB.createStatement();
                                    java.sql.ResultSet rs111c = pst211c.executeQuery("select activity from pb_activity where code = '" + costofSaleCode + "'");
                                    while (rs111c.next()) {
                                        costofSale = rs111c.getObject(1).toString();

                                    }
                                    java.sql.Statement pst2111c = connectDB.createStatement();
                                    java.sql.ResultSet rs1111c = pst2111c.executeQuery("select activity from pb_activity where code = '" + stockCode + "'");
                                    while (rs1111c.next()) {
                                        stock = rs1111c.getObject(1).toString();
                                    }

                                    presc = 0.00;

                                    Total = java.lang.Double.parseDouble(jTextField32.getText());
                                    if (Total > presc) {
                                        amount1 = java.lang.Double.parseDouble(pharmacyReturnsTbl.getValueAt(i, 5).toString());

                                        percentage = (amount1 / Total) * 100;

                                        TotalPrice = ((percentage / 100) * presc) + amount1;
                                    } else {
                                        amount1 = java.lang.Double.parseDouble(pharmacyReturnsTbl.getValueAt(i, 5).toString());

                                        //  percentage = (amount1/Total)*100;
                                        TotalPrice = amount1;
                                    }
                                    java.sql.Statement stm121 = connectDB.createStatement();
                                    java.sql.ResultSet rse121 = stm121.executeQuery("select units from st_stock_item where item_code ='" + pharmacyReturnsTbl.getModel().getValueAt(i, 7).toString() + "'");
                                    while (rse121.next()) {

                                        glAcc2 = rse121.getObject(1).toString();
                                        System.out.println(glAcc2);
                                    }
                                    java.sql.Statement pstB = connectDB.createStatement();
                                    java.sql.ResultSet rsB = pstB.executeQuery("select transfer_price,units from st_stock_prices where product_id = '" + pharmacyReturnsTbl.getModel().getValueAt(i, 7) + "'");

                                    while (rsB.next()) {
                                        price = rsB.getDouble(1);
                                        // units = rsB.getString(2);
                                        qty = java.lang.Double.parseDouble(pharmacyReturnsTbl.getValueAt(i, 1).toString());
                                        sellPrice = java.lang.Double.parseDouble(pharmacyReturnsTbl.getValueAt(i, 3).toString());
                                    }
                                    amount = price * qty;
                                    if (amount > 10000) {
                                        amount = (qty * sellPrice) * 0.67;
                                    } else {

                                        amount = amount;
                                    }

                                    System.out.println(price);
                                    if (jTextField52.getText().equals("Scheme")) {
                                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                        //1 for (int i = 0; i < jTable1.getRowCount(); i++){

                                        pstmt.setString(1, patientNumberTxt.getText());
                                        pstmt.setObject(2, pharmacyReturnsTbl.getValueAt(i, 0).toString());
                                        pstmt.setString(3, patientCategoryTxt.getText());
                                        pstmt.setString(4, jTextField52.getText());
                                        pstmt.setString(5, transNo);
                                        pstmt.setString(7, scheme);
                                        pstmt.setString(6, cardNo);
                                        pstmt.setString(8, cardName);
                                        pstmt.setString(9, isurer);
                                        pstmt.setDate(10, expDate);
                                        pstmt.setObject(11, doctorNameCmbx.getSelectedItem().toString());
                                        // pstmt.setObject(12,jTable13.getValueAt(i,5).toString());
                                        if (TotalPrice > 0) {
                                            pstmt.setDouble(13, TotalPrice);
                                            pstmt.setDouble(12, 0.00);
                                        } else {
                                            pstmt.setDouble(12, TotalPrice * -1);
                                            pstmt.setDouble(13, 0.00);
                                        }
                                        pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(pharmReturnDate.getDate()));
                                        pstmt.setObject(15, patientAcc);
                                        pstmt.setString(16, activity);
                                        pstmt.setDouble(17, java.lang.Double.parseDouble(pharmacyReturnsTbl.getValueAt(i, 1).toString()) * -1);
                                        pstmt.setObject(18, staffNo);
                                        pstmt.setBoolean(19, false);
                                        pstmt.setString(20, "Billing");
                                        pstmt.setBoolean(21, false);
                                        pstmt.setString(22, AccDesc);
                                        pstmt.setString(23, visitid);
                                        pstmt.setString(24, user);
                                        pstmt.setString(25, prescNo);
                                        pstmt.setString(26, "OP");
                                        pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                        pstmt.setString(28, jTextField1.getText());
                                        pstmt.executeUpdate();

                                        java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
                                        //pstmt2.setString(1, code);
                                        pstmt2.setString(1, pharmacyReturnsTbl.getValueAt(i, 9).toString());
                                        //pstmt2.setString(2, glAcc);
                                        pstmt2.setString(2, com.afrisoftech.lib.GLCodesFactory.getActivityDescription(connectDB, pharmacyReturnsTbl.getValueAt(i, 9).toString()));
                                        pstmt2.setString(3, patientNumberTxt.getText());
                                        pstmt2.setString(4, patientNameTxt.getText());
                                        pstmt2.setString(5, "");
                                        pstmt2.setString(6, cardNo);
                                        pstmt2.setString(7, cardName);
                                        pstmt2.setString(8, "OP");
                                        pstmt2.setString(9, isurer);
                                        pstmt2.setString(10, jTextField52.getText());
                                        pstmt2.setString(11, "");
                                        pstmt2.setString(12, "");
                                        pstmt2.setString(13, "");
                                        pstmt2.setString(14, pharmacyReturnsTbl.getValueAt(i, 0).toString());
                                        pstmt2.setString(15, "Revenue");
                                        if (TotalPrice > 0) {
                                            pstmt2.setDouble(16, TotalPrice);
                                            pstmt2.setDouble(17, 0.00);
                                        } else {
                                            pstmt2.setDouble(17, TotalPrice * -1);
                                            pstmt2.setDouble(16, 0.00);
                                        }
                                        pstmt2.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(pharmReturnDate.getDate()));
                                        pstmt2.setString(19, transNo);
                                        pstmt2.setBoolean(20, false);
                                        pstmt2.setBoolean(21, false);
                                        pstmt2.setBoolean(22, false);
                                        pstmt2.setString(23, user);
                                        pstmt2.executeUpdate();

                                        java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into hp_pharmacy values( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                        pstmt1.setString(1, patientNumberTxt.getText());
                                        pstmt1.setString(2, patientNameTxt.getText());
                                        pstmt1.setDouble(3, java.lang.Double.parseDouble(pharmacyReturnsTbl.getValueAt(i, 1).toString()) * -1);
                                        pstmt1.setDouble(4, TotalPrice * -1);
                                        //  pstmt1.setObject(4,jTable13.getValueAt(i,5).toString());
                                        pstmt1.setObject(5, pharmacyReturnsTbl.getValueAt(i, 0).toString());
                                        pstmt1.setDouble(7, sellPrice);
                                        pstmt1.setObject(8, pharmacyReturnsTbl.getValueAt(i, 6).toString());
                                        pstmt1.setBoolean(6, false);
                                        pstmt1.setString(9, prescNo);
                                        pstmt1.setObject(10, doctorNameCmbx.getSelectedItem().toString());
                                        pstmt1.setBoolean(11, true);
                                        pstmt1.setString(12, glAcc2);
                                        pstmt1.setDate(13, com.afrisoftech.lib.SQLDateFormat.getSQLDate(pharmReturnDate.getDate()));
                                        pstmt1.setString(14, departmentCmbx.getSelectedItem().toString());
                                        pstmt1.setString(15, "OP");
                                        pstmt1.setString(16, jTextField52.getText());
                                        pstmt1.setString(17, "-");
                                        pstmt1.setDouble(18, TotalPrice - amount1);
                                        pstmt1.setString(19, user);
                                        pstmt1.setString(20, prescriptionTxt.getText());
                                        pstmt1.setObject(21, pharmacyReturnsTbl.getValueAt(i, 7).toString());
                                        //  pstmt1.setObject(22, pharmacyReturnsTbl.getValueAt(i, 8).toString());
                                        pstmt1.executeUpdate();
                                    } else {

                                        if (DirectRev) {

                                            java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into hp_pharmacy values( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                            pstmt1.setString(1, patientNumberTxt.getText());
                                            pstmt1.setString(2, patientNameTxt.getText());
                                            pstmt1.setDouble(3, java.lang.Double.parseDouble(pharmacyReturnsTbl.getValueAt(i, 1).toString()) * -1);
                                            pstmt1.setDouble(4, TotalPrice * -1);
                                            //  pstmt1.setObject(4,jTable13.getValueAt(i,5).toString());
                                            pstmt1.setObject(5, pharmacyReturnsTbl.getValueAt(i, 0).toString());
                                            pstmt1.setDouble(7, sellPrice);
                                            pstmt1.setObject(8, pharmacyReturnsTbl.getValueAt(i, 6).toString());
                                            pstmt1.setBoolean(6, true);
                                            pstmt1.setString(9, prescNo);
                                            pstmt1.setObject(10, doctorNameCmbx.getSelectedItem().toString());
                                            pstmt1.setBoolean(11, true);
                                            pstmt1.setString(12, glAcc2);
                                            pstmt1.setDate(13, com.afrisoftech.lib.SQLDateFormat.getSQLDate(pharmReturnDate.getDate()));
                                            pstmt1.setString(14, departmentCmbx.getSelectedItem().toString());
                                            pstmt1.setString(15, "OP");
                                            pstmt1.setString(16, jTextField52.getText());
                                            pstmt1.setString(17, "-");
                                            pstmt1.setDouble(18, TotalPrice - amount1);
                                            pstmt1.setString(19, user);
                                            pstmt1.setString(20, prescriptionTxt.getText());
                                            pstmt1.setObject(21, pharmacyReturnsTbl.getValueAt(i, 7).toString());
                                            //  pstmt1.setObject(22, pharmacyReturnsTbl.getValueAt(i, 8).toString());
                                            pstmt1.executeUpdate();

                                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                            //1 for (int i = 0; i < jTable1.getRowCount(); i++){

                                            pstmt.setString(1, patientNumberTxt.getText());
                                            pstmt.setObject(2, pharmacyReturnsTbl.getValueAt(i, 0).toString());
                                            pstmt.setString(3, patientCategoryTxt.getText());
                                            pstmt.setString(4, jTextField52.getText());
                                            pstmt.setString(5, transNo);
                                            pstmt.setString(7, scheme);
                                            pstmt.setString(6, cardNo);
                                            pstmt.setString(8, cardName);
                                            pstmt.setString(9, isurer);
                                            pstmt.setDate(10, expDate);
                                            pstmt.setObject(11, doctorNameCmbx.getSelectedItem().toString());
                                            // pstmt.setObject(12,jTable13.getValueAt(i,5).toString());
                                            if (TotalPrice > 0) {
                                                pstmt.setDouble(13, TotalPrice);
                                                pstmt.setDouble(12, 0.00);
                                            } else {
                                                pstmt.setDouble(12, TotalPrice * -1);
                                                pstmt.setDouble(13, 0.00);
                                            }
                                            pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(pharmReturnDate.getDate()));
                                            pstmt.setObject(15, patientAcc);
                                            pstmt.setString(16, activity);
                                            pstmt.setDouble(17, java.lang.Double.parseDouble(pharmacyReturnsTbl.getValueAt(i, 1).toString()) * -1);
                                            pstmt.setObject(18, staffNo);
                                            pstmt.setBoolean(19, false);
                                            pstmt.setString(20, "Billing");
                                            pstmt.setBoolean(21, false);
                                            pstmt.setString(22, AccDesc);
                                            pstmt.setString(23, visitid);
                                            pstmt.setString(24, user);
                                            pstmt.setString(25, prescNo);
                                            pstmt.setString(26, "OP");
                                            pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                            pstmt.setString(28, jTextField1.getText());
                                            pstmt.executeUpdate();

                                            java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
//                                            pstmt2.setString(1, activityCode);
//                                            pstmt2.setString(2, glAcc);
                                            pstmt2.setString(1, pharmacyReturnsTbl.getValueAt(i, 9).toString());
                                            pstmt2.setString(2, com.afrisoftech.lib.GLCodesFactory.getActivityDescription(connectDB, pharmacyReturnsTbl.getValueAt(i, 9).toString()));
                                            pstmt2.setString(3, patientNumberTxt.getText());
                                            pstmt2.setString(4, patientNameTxt.getText());
                                            pstmt2.setString(5, "");
                                            pstmt2.setString(6, cardNo);
                                            pstmt2.setString(7, cardName);
                                            pstmt2.setString(8, "OP");
                                            pstmt2.setString(9, isurer);
                                            pstmt2.setString(10, jTextField52.getText());
                                            pstmt2.setString(11, "");
                                            pstmt2.setString(12, "");
                                            pstmt2.setString(13, "");
                                            pstmt2.setString(14, pharmacyReturnsTbl.getValueAt(i, 0).toString());
                                            pstmt2.setString(15, "Revenue");
                                            if (TotalPrice > 0) {
                                                pstmt2.setDouble(16, TotalPrice);
                                                pstmt2.setDouble(17, 0.00);
                                            } else {
                                                pstmt2.setDouble(17, TotalPrice * -1);
                                                pstmt2.setDouble(16, 0.00);
                                            }
                                            // pstmt2.setObject(17,jTable13.getValueAt(i,5).toString());
                                            pstmt2.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(pharmReturnDate.getDate()));
                                            pstmt2.setString(19, transNo);
                                            pstmt2.setBoolean(20, false);
                                            pstmt2.setBoolean(21, false);
                                            pstmt2.setBoolean(22, false);
                                            pstmt2.setString(23, user);
                                            pstmt2.executeUpdate();
                                        } else {
                                            java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into hp_pharmacy values( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                            pstmt1.setString(1, patientNumberTxt.getText());
                                            pstmt1.setString(2, patientNameTxt.getText());
                                            pstmt1.setDouble(3, java.lang.Double.parseDouble(pharmacyReturnsTbl.getValueAt(i, 1).toString()) * -1);
                                            pstmt1.setDouble(4, TotalPrice * -1);
                                            //  pstmt1.setObject(4,jTable13.getValueAt(i,5).toString());
                                            pstmt1.setObject(5, pharmacyReturnsTbl.getValueAt(i, 0).toString());
                                            pstmt1.setDouble(7, sellPrice);
                                            pstmt1.setObject(8, pharmacyReturnsTbl.getValueAt(i, 6).toString());
                                            pstmt1.setBoolean(6, false);
                                            pstmt1.setString(9, prescNo);
                                            pstmt1.setObject(10, doctorNameCmbx.getSelectedItem().toString());
                                            pstmt1.setBoolean(11, true);
                                            pstmt1.setString(12, glAcc2);
                                            pstmt1.setDate(13, com.afrisoftech.lib.SQLDateFormat.getSQLDate(pharmReturnDate.getDate()));
                                            pstmt1.setString(14, departmentCmbx.getSelectedItem().toString());
                                            pstmt1.setString(15, "OP");
                                            pstmt1.setString(16, jTextField52.getText());
                                            pstmt1.setString(17, "-");
                                            pstmt1.setDouble(18, TotalPrice - amount1);
                                            pstmt1.setString(19, user);
                                            pstmt1.setString(20, prescriptionTxt.getText());
                                            pstmt1.setObject(21, pharmacyReturnsTbl.getValueAt(i, 7).toString());
                                            // pstmt1.setObject(22, pharmacyReturnsTbl.getValueAt(i, 8).toString());
                                            pstmt1.executeUpdate();
                                        }

                                    }

                                    java.sql.PreparedStatement pstmt1a = connectDB.prepareStatement("INSERT INTO st_stock_cardex values( ? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

                                    pstmt1a.setString(1, null);
                                    pstmt1a.setObject(3, pharmacyReturnsTbl.getValueAt(i, 0).toString());
                                    pstmt1a.setString(2, departmentCmbx.getSelectedItem().toString());
                                    pstmt1a.setDate(4, null);
                                    pstmt1a.setDouble(21, amount);
                                    pstmt1a.setDouble(6, 0.00);
                                    pstmt1a.setObject(7, glAcc2);
                                    pstmt1a.setObject(8, "");
                                    pstmt1a.setString(9, null);
                                    pstmt1a.setString(10, null);
                                    pstmt1a.setDouble(11, 0.00);
                                    pstmt1a.setDouble(12, 0.00);
                                    pstmt1a.setDouble(13, 0.00);
                                    if (patientNameTxt.getText().equals("")) {
                                        javax.swing.JOptionPane.showMessageDialog(this, "Enter patient", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                    } else {
                                        pstmt1a.setString(14, patientNameTxt.getText());
                                    }

                                    pstmt1a.setString(15, userName);
                                    pstmt1a.setString(16, "");
                                    pstmt1a.setString(17, null);
                                    pstmt1a.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(pharmReturnDate.getDate()));
                                    pstmt1a.setString(19, departmentCmbx.getSelectedItem().toString());
                                    pstmt1a.setString(20, "Issuing");
                                    pstmt1a.setDouble(22, 0.00);
                                    pstmt1a.setString(23, stockCode);
                                    pstmt1a.setDouble(5, 0.00);
                                    pstmt1a.setString(24, "");
                                    pstmt1a.setString(25, stock);
                                    pstmt1a.setString(26, transNo);
                                    pstmt1a.setDouble(27, java.lang.Double.parseDouble(pharmacyReturnsTbl.getValueAt(i, 1).toString()) * -1);
                                    pstmt1a.setString(28, userName);
                                    pstmt1a.setBoolean(29, false);
                                    pstmt1a.setDouble(30, 0.00);
                                    pstmt1a.setDate(31, com.afrisoftech.lib.SQLDateFormat.getSQLDate(pharmReturnDate.getDate()));
                                    pstmt1a.setString(32, pharmacyReturnsTbl.getValueAt(i, 7).toString());
                                    //  pstmt1a.setString(33, pharmacyReturnsTbl.getValueAt(i, 8).toString());
                                    pstmt1a.executeUpdate();

                                    java.sql.PreparedStatement pstmt2a = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                    //pstmt2a.setObject(1, activityCode);
                                    pstmt2a.setObject(1, costofSaleCode);

                                    pstmt2a.setObject(2, com.afrisoftech.lib.GLCodesFactory.getActivityDescription(connectDB, costofSaleCode));
                                    pstmt2a.setString(3, patientNumberTxt.getText());
                                    pstmt2a.setString(4, patientNameTxt.getText());
                                    pstmt2a.setString(5, "");
                                    pstmt2a.setString(6, "");
                                    pstmt2a.setString(7, "");
                                    pstmt2a.setString(8, "");
                                    pstmt2a.setString(9, "");
                                    pstmt2a.setString(10, "");
                                    pstmt2a.setString(11, "");
                                    pstmt2a.setString(12, "");
                                    pstmt2a.setString(13, "");
                                    pstmt2a.setString(14, pharmacyReturnsTbl.getValueAt(i, 0).toString());
                                    pstmt2a.setString(15, "Issuing");
                                    pstmt2a.setDouble(17, amount);
                                    pstmt2a.setDouble(16, 0.00);
                                    pstmt2a.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(pharmReturnDate.getDate()));
                                    pstmt2a.setString(19, transNo);
                                    pstmt2a.setBoolean(20, false);
                                    pstmt2a.setBoolean(21, false);
                                    pstmt2a.setBoolean(22, false);
                                    pstmt2a.setString(23, userName);
                                    pstmt2a.executeUpdate();

                                    java.sql.PreparedStatement pstmt33 = connectDB.prepareStatement("insert into st_sub_stores values( ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                    pstmt33.setObject(2, pharmacyReturnsTbl.getValueAt(i, 0).toString());
                                    pstmt33.setString(12, units);
                                    pstmt33.setDouble(3, java.lang.Double.parseDouble(pharmacyReturnsTbl.getValueAt(i, 1).toString()));
                                    pstmt33.setObject(1, departmentCmbx.getSelectedItem().toString());
                                    pstmt33.setDouble(4, 0.00);
                                    pstmt33.setDouble(6, 0.00);
                                    pstmt33.setDouble(5, sellPrice);
                                    //pstmt33.setString(6,jTable13.getValueAt(i,5).toString());
                                    pstmt33.setDouble(7, TotalPrice);
                                    pstmt33.setTimestamp(10, Timestamp.valueOf(sdf.format(pharmReturnDate.getDate())));
                                    pstmt33.setString(8, transNo);
                                    pstmt33.setObject(9, doctorNameCmbx.getSelectedItem().toString());
                                    //pstmt33.setString(11,code);
                                    pstmt33.setString(13, departmentCmbx.getSelectedItem().toString());
                                    pstmt33.setString(11, userName);
                                    pstmt33.setString(14, patientNumberTxt.getText() + " " + patientNameTxt.getText());
                                    pstmt33.setDouble(15, price * qty);
                                    pstmt33.setObject(16, pharmacyReturnsTbl.getValueAt(i, 7).toString());
                                    // pstmt33.setString(17, pharmacyReturnsTbl.getValueAt(i, 8).toString());
                                    pstmt33.executeUpdate();

                                    // }
                                }

                            }
                            //             javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                        }

                    }
                    connectDB.commit();
                    connectDB.setAutoCommit(true);

                    jTextField32.setText("0.00");
                    amountTxt.setText("0.00");
                    for (int k = 0; k < pharmacyReturnsTbl.getRowCount(); k++) {
                        for (int r = 0; r < pharmacyReturnsTbl.getColumnCount(); r++) {
                            pharmacyReturnsTbl.getModel().setValueAt(null, k, r);
                        }
                    }

                    javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully. " + transNo, "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    //  jComboBox2.setSelectedItem(null);
                } catch (java.sql.SQLException sq) {
                    sq.printStackTrace();
                    try {
                        connectDB.rollback(registerSavePoint);
                    } catch (java.sql.SQLException sql) {
                        sql.printStackTrace();
                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                    System.out.println(sq.getMessage());
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                    //  }
                }

            }

        }
        /*
         * } catch(java.lang.Exception ex) {
         * System.out.println(ex.getMessage());
         * javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR :
         * Please double check your entries.",
         * "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
         *
         *
         * }
         */
        // Add your handling code here:
    }//GEN-LAST:event_jButton12ActionPerformed

    private void pharmacyReturnsTblKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pharmacyReturnsTblKeyReleased

        if (pharmacyReturnsTbl.getModel().getValueAt(pharmacyReturnsTbl.getSelectedRow(), 1) != null) {
            if (pharmacyReturnsTbl.getSelectedColumn() == pharmacyReturnsTbl.getSelectedColumn()) {

                float qty = java.lang.Float.parseFloat(pharmacyReturnsTbl.getValueAt(pharmacyReturnsTbl.getSelectedRow(), 1).toString());
                float price = java.lang.Float.parseFloat(pharmacyReturnsTbl.getValueAt(pharmacyReturnsTbl.getSelectedRow(), 3).toString());
                float total = qty * price;
                pharmacyReturnsTbl.setValueAt(total, pharmacyReturnsTbl.getSelectedRow(), 5);

                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(pharmacyReturnsTbl, 5);

                // amountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
            }

        }
        /*
         * double resFloat = 0.00; if
         * (jTable13.getValueAt(jTable13.getSelectedRow(),
         * jTable13.getSelectedColumn()) != null) {
         *
         * float floatCol2 =
         * java.lang.Float.parseFloat(jTable13.getValueAt(jTable13.getSelectedRow(),
         * 1).toString());
         *
         * float floatCol3 =
         * java.lang.Float.parseFloat(jTable13.getValueAt(jTable13.getSelectedRow(),
         * 3).toString());
         *
         * float resVal = floatCol2 * floatCol3;
         *
         * if (jTable13.getValueAt(jTable13.getSelectedRow(), 4) != null) {
         *
         * float floatCol4 =
         * java.lang.Float.parseFloat(jTable13.getValueAt(jTable13.getSelectedRow(),
         * 4).toString());
         *
         * resVal = (floatCol2 * floatCol3) - floatCol4; // resFloat = resVal;
         *
         * jTable13.setValueAt(new java.lang.Float(resVal),
         * jTable13.getSelectedRow(), 5);
         *
         *
         * for (int i = 0; i < jTable13.getRowCount(); i++) {
         *
         * if (jTable1.getModel().getValueAt(i, 1) != null)
         * {//toString().compareToIgnoreCase(null) {
         *
         * resFloat = resFloat + Double.parseDouble(jTable13.getValueAt(i,
         * 5).toString());
         *
         *
         * // totalSum = floatTotal + resFloat;
         *
         * }
         * }
         *
         * this.tableModelTableChanged();
         *
         * }else
         *
         * jTable13.setValueAt(new java.lang.Float(resVal),
         * jTable13.getSelectedRow(), 5); for (int i = 0; i <
         * jTable13.getRowCount(); i++) {
         *
         * if (jTable13.getModel().getValueAt(i, 0) != null)
         * {//toString().compareToIgnoreCase(null) {
         *
         * resFloat = resFloat + Double.parseDouble(jTable13.getValueAt(i,
         * 5).toString());
         *
         *
         * }
         * }
         *
         * this.tableModel1TableChanged(); }
         *
         */
        // Add your handling code here:
    }//GEN-LAST:event_pharmacyReturnsTblKeyReleased

    private void pharmacyReturnsTblAncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_pharmacyReturnsTblAncestorMoved
        // Add your handling code here:
    }//GEN-LAST:event_pharmacyReturnsTblAncestorMoved

    private void jButton92ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton92ActionPerformed
        this.jSearchDialog3.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton92ActionPerformed

    private void jTextField114CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField114CaretUpdate
        if (jTextField114.getCaretPosition() > 0) {
            //jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT DISTINCT sp.product||' '||sp.strength AS product,sp.selling_price,sp.gl_code,sp.product_id FROM st_stock_prices sp,hp_pharmacy hp WHERE sp.product||' '||sp.strength ILIKE '%"+jTextField114.getText()+"%' AND sp.department =  '"+jComboBox4.getSelectedItem().toString()+"' AND sp.product||' '||sp.strength = hp.description AND hp.patient_no = '"+jTextField92.getText()+"' order by sp.product||' '||sp.strength"));
            //       jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT DISTINCT sp.product||' '||sp.strength AS product,sp.selling_price,sp.gl_code,sp.product_id FROM st_stock_prices sp,hp_pharmacy hp WHERE sp.product||' '||sp.strength ILIKE '%"+jTextField114.getText()+"%' AND sp.department =  '"+jComboBox4.getSelectedItem().toString()+"' ORDER BY sp.product||' '||sp.strength"));
            jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT DISTINCT sp.product AS product,sp.selling_price,sp.gl_code,sp.product_id,sp.strength FROM st_stock_prices sp,hp_pharmacy ph WHERE sp.product ILIKE '%" + jTextField114.getText() + "%' AND trim(sp.product_id) ilike trim(ph.item_code) AND ph.patient_no = '" + patientNumberTxt.getText() + "' AND sp.department ilike  '" + departmentCmbx.getSelectedItem().toString() + "%' ORDER BY sp.product"));

            jSearchScrollPane3.setViewportView(jSearchTable3);
            System.out.println("Cannot sort out");

        }// Add your handling code here:
    }//GEN-LAST:event_jTextField114CaretUpdate

    private void jSearchTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable3MouseClicked
        this.jTextField114.setText("");
        pharmacyReturnsTbl.setValueAt(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 0), pharmacyReturnsTbl.getSelectedRow(), 0);
        pharmacyReturnsTbl.setValueAt(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 1), pharmacyReturnsTbl.getSelectedRow(), 3);
        pharmacyReturnsTbl.setValueAt(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 2), pharmacyReturnsTbl.getSelectedRow(), 6);
        pharmacyReturnsTbl.setValueAt(new java.lang.Double(0), pharmacyReturnsTbl.getSelectedRow(), 4);
        pharmacyReturnsTbl.setValueAt(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 3), pharmacyReturnsTbl.getSelectedRow(), 7);
        pharmacyReturnsTbl.setValueAt(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 4), pharmacyReturnsTbl.getSelectedRow(), 8);

        int j = 0;

        /*
         * java.lang.Object selectedGuaran = cmbox1.getSelectedItem(); int i =
         * jTable11.getSelectedRow(); if (i > -1){ if (selectedGuaran != null) {
         *
         * try { java.sql.Statement pstmt = connectDB.createStatement();
         * java.sql.ResultSet rs = pstmt.executeQuery("select
         * sp.selling_price::numeric from st_stock_prices sp where product =
         * '"+selectedGuaran+"'"); while (rs.next()){
         * jTable11.getModel().setValueAt(rs.getObject(1),i,3); } }
         * catch(java.sql.SQLException sqlex){
         * System.out.println(sqlex.getMessage()); }
         *
         */
        double Qty = 0.00;
        try {
            java.sql.Statement pstmt = connectDB.createStatement();
            java.sql.Statement pstmt1 = connectDB.createStatement();

            java.sql.ResultSet rs1 = pstmt1.executeQuery("select count(product) from st_stock_prices sc where product = '" + jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 0) + "' and department = '" + departmentCmbx.getSelectedItem().toString() + "'");
            while (rs1.next()) {
                j = rs1.getInt(1);
            }
            if (j > 0) {

                java.sql.ResultSet rs = pstmt.executeQuery("select sum(qty) from stock_balance where description = '" + jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 0) + "' and department ilike '" + departmentCmbx.getSelectedItem().toString() + "%'");
                while (rs.next()) {

                    Qty = rs.getDouble(1);
                    //  jTable1.setValueAt(Qty,jTable1.getSelectedRow(),2);
                    pharmacyReturnsTbl.setValueAt(Qty, pharmacyReturnsTbl.getSelectedRow(), 2);

                }
            } else {
                pharmacyReturnsTbl.setValueAt("0.00", pharmacyReturnsTbl.getSelectedRow(), 2);
            }
        } catch (java.sql.SQLException sqlex) {
            System.out.println(sqlex.getMessage());
        }

        jSearchDialog3.dispose();   // Add your handling code here:
    }//GEN-LAST:event_jSearchTable3MouseClicked
    private void cmbox13MouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane22.getLocationOnScreen();
        jSearchDialog3.setSize(400, 200);
        jSearchDialog3.setLocation(point);
        jSearchDialog3.setVisible(true);

    }
    private void pharmacyReturnsTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pharmacyReturnsTblMouseClicked
        if (pharmacyReturnsTbl.getSelectedColumn() == 0) {

            this.cmbox13MouseClicked();
        }

//        else if (pharmacyReturnsTbl.getSelectedColumn() == 2 ) {
//                 if(Boolean.valueOf(pharmacyReturnsTbl.getValueAt(pharmacyReturnsTbl.getSelectedRow(), 2).toString()) == java.lang.Boolean.TRUE){
//                 
//                  System.out.println(pharmacyReturnsTbl.getValueAt(pharmacyReturnsTbl.getSelectedRow(), 2).toString());
//                  
//                 totalreturn = Double.valueOf(amountTxt.getText()) + Double.valueOf(pharmacyReturnsTbl.getModel().getValueAt(pharmacyReturnsTbl.getSelectedRow(), 5).toString()) ;
//                 amountTxt.setText(totalreturn.toString());
//                 
//                   }
//                 
//              else
//                  if(Boolean.valueOf(pharmacyReturnsTbl.getValueAt(pharmacyReturnsTbl.getSelectedRow(), 2).toString()) == java.lang.Boolean.FALSE){
//                 totalreturn = Double.valueOf(amountTxt.getText()) - Double.valueOf(pharmacyReturnsTbl.getModel().getValueAt(pharmacyReturnsTbl.getSelectedRow(), 5).toString()) ;
//                 amountTxt.setText(totalreturn.toString());
//                     }
//                  
//                 
//            
//            }   
        // Add your handling code here:
    }//GEN-LAST:event_pharmacyReturnsTblMouseClicked

    private void jButton52121ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52121ActionPerformed
        this.patientSearchDialog.dispose(); // Add your handling code here:
    }//GEN-LAST:event_jButton52121ActionPerformed

    private void patientSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientSearchTableMouseClicked
        jTextField32.setText("0.00");

        // jTextField32.setText("0.00");
        for (int k = 0; k < pharmacyReturnsTbl.getRowCount(); k++) {
            for (int r = 0; r < pharmacyReturnsTbl.getColumnCount(); r++) {
                pharmacyReturnsTbl.setValueAt(null, k, r);
            }
        }

        patientNumberTxt.setText(patientSearchTable.getValueAt(patientSearchTable.getSelectedRow(), 0).toString());
        patientNameTxt.setText(patientSearchTable.getValueAt(patientSearchTable.getSelectedRow(), 1).toString());

        int j = 0;
        try {

            java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode from hp_inpatient_register where patient_no  = '" + this.patientNumberTxt.getText().toString() + "'");
            while (rset1.next()) {
                patientCategoryTxt.setText(rset1.getObject(1).toString());
                jTextField52.setText(rset1.getObject(2).toString());
            }

            java.sql.Statement stmt1v = connectDB.createStatement();
            java.sql.ResultSet rset1v = stmt1v.executeQuery("select visit_id from hp_admission where patient_no  = '" + this.patientNumberTxt.getText().toString() + "' AND check_out = 'false'");
            while (rset1v.next()) {
                jTextField1.setText(rset1v.getObject(1).toString());
            }

        } catch (java.sql.SQLException sqlex) {
            System.out.println(sqlex.getMessage());
        }

        pharmacyReturnsTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT item AS DESCRIPTION, issuing as QTY, false as RETURN, price as UNITPRICE, 0 AS DISCOUNT, total as TOTAL, store_name as DEPARTMENT,  item_code as ITEM_CODE, '-' as STRENGTH,'" + glCodeTxt.getText() + "' as gl_code FROM st_sub_stores WHERE issiued_to ilike  '%" + patientNumberTxt.getText() + "%'  AND trans_date > (current_date-30) and  item not like '%DISPENSING FEE%'"));

        // transNocmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT transaction_no FROM st_sub_stores WHERE issiued_to ilike  '%" + patientNumberTxt.getText() + "%' and store_name ilike '%"+departmentCmbx.getSelectedItem().toString()+"%' ORDER BY 1 ASC "));
        transNocmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT transaction_no FROM st_sub_stores WHERE issiued_to ilike  '%" + patientNumberTxt.getText() + "%' and trans_date::date>current_date-30 ORDER BY 1 ASC "));
        // pharmacyReturnsTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,
//                "SELECT description AS DESCRIPTION, quantity as QTY, false as RETURN, price as UNITPRICE, 0 AS DISCOUNT, amount as TOTAL, main_service as DEPARTMENT, (select item_code FROM st_stock_item WHERE hp_pharmacy.description=st_stock_item.item_code) as item_code, '-' as STRENGTH, gl_code FROM hp_pharmacy where patient_no = '" + patientNumberTxt.getText() + "'  AND main_service ilike '%pharmacy%'"));
//

        for (int i = 0; i < pharmacyReturnsTbl.getRowCount(); i++) {
            try {

                java.lang.String desc = pharmacyReturnsTbl.getModel().getValueAt(i, 0).toString();
                //java.lang.String dept=
                java.sql.PreparedStatement pst = connectDB.prepareStatement("select item_code,strength FROM st_stock_item  WHERE description = '" + desc + "'");
                ResultSet cde = pst.executeQuery();
                while (cde.next()) {
                    pharmacyReturnsTbl.getModel().setValueAt(cde.getObject(1).toString(), i, 7);
                    pharmacyReturnsTbl.getModel().setValueAt(cde.getObject(2).toString(), i, 8);

                }

            } catch (Exception ex) {
                Logger.getLogger(PharmReturnsIntfr.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
//          pharmacyReturnsTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,
//                "SELECT service AS DESCRIPTION, dosage as QTY, false as RETURN, debit/dosage as UNITPRICE, 0 AS DISCOUNT, debit as TOTAL, main_service as DEPARTMENT, (select item_code FROM st_stock_item WHERE description=hp_patient_card.service) as item_code FROM hp_patient_card where patient_no = '" + patientNumberTxt.getText() + "' AND visit_id = '" + jTextField1.getText() + "' AND main_service ilike '%pharmacy%'"));

        patientSearchDialog.dispose();

// int control=pharmacyReturnsTbl.getRowCount();
//
//
//if (control<1){
//javax.swing.JOptionPane.showMessageDialog(this, "This Patient Might have Received Medication from Another Pharmacy or\n the Return Period has exceeded 1 month ");
//
//
//}
//            try {
//
//              java.sql.Statement stmt1 = connectDB.createStatement();
//            java.sql.ResultSet rset1 = stmt1.executeQuery("SELECT service AS DESCRIPTION, dosage as QTY, false as RETURN, debit/dosage as UNITPRICE, 0 AS DISCOUNT, debit as TOTAL, main_service as DEPARTMENT, (select item_code FROM st_stock_item WHERE description=hp_patient_card.service) as item_code, (select item_code FROM st_stock_item WHERE description=hp_patient_card.service) as stregnth FROM hp_patient_card where patient_no = '" + patientNumberTxt.getText() + "' AND visit_id = '" + jTextField1.getText() + "' AND main_service ilike '%pharmacy%'");
//             java.sql.ResultSetMetaData rmData=rset1.getMetaData();
//             rset1.last();
//                int row =0;
//                        //rset1.getRow();
//                 rset1.first();
//            while (rset1.next()) {
//                  for(int k=0;k<9;k++){
//                pharmacyReturnsTbl.getModel().setValueAt(rset1.getString(k+1), row, k);
//                  }
//                  row=row+1;
//            }
//
//        } catch (java.sql.SQLException sqlex) {
//            System.out.println(sqlex.getMessage());
//        }
        System.err.println("SELECT service AS DESCRIPTION, dosage as QTY, false as RETURN, debit/dosage as UNITPRICE, 0 AS DISCOUNT, debit as TOTAL, main_service as DEPARTMENT, (select item_code FROM st_stock_item WHERE description ilike hp_patient_card.service) as item_code, '-' as strength FROM hp_patient_card where patient_no = '" + patientNumberTxt.getText() + "' AND visit_id = '" + jTextField1.getText() + "' AND main_service ilike '%pharmacy%'");

        try {

            java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode from hp_patient_register where patient_no  = '" + patientNumberTxt.getText() + "'");
            while (rset1.next()) {
                patientCategoryTxt.setText(rset1.getObject(1).toString());
                jTextField52.setText(rset1.getObject(2).toString());
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }

        // gfgfgfgfg
        for (int k = 0; k < pharmacyReturnsTbl.getRowCount(); k++) {
//            pharmacyReturnsTbl.setValueAt(com.afrisoftech.lib.StockItemFactory.getItemCode(connectDB, pharmacyReturnsTbl.getValueAt(k, 0).toString()), k, 7);
        }

        for (int k = 0; k < pharmacyReturnsTbl.getRowCount(); k++) {
            //    pharmacyReturnsTbl.setValueAt(com.afrisoftech.lib.StockItemFactory.getItemStregnth(connectDB, pharmacyReturnsTbl.getValueAt(k, 0).toString()), k, 8);
        }

        try {
            // int j = 0;
            java.sql.Statement stmt = connectDB.createStatement();

            java.sql.ResultSet rset = stmt.executeQuery("SELECT count(patient_no) FROM hp_pharmacy where patient_no  ='" + patientNumberTxt.getText() + "' and paid = false");

            while (rset.next()) {
                j = rset.getInt(1);
            }
            if (j > 0) {
                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select sum(amount) from hp_pharmacy where patient_no  ='" + patientNumberTxt.getText() + "' and paid = false");
                while (rset1.next()) {
                    amountTxt.setText(rset1.getObject(1).toString());
                    //jTextField5.setText(rset1.getObject(2).toString());
                }
            }

        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }
        // This part has been stopped temporaly
        //  this.populateTable1(this.jTextField92.getText());

        patientSearchDialog.dispose();

// Add your handling code here:
    }//GEN-LAST:event_patientSearchTableMouseClicked

    private void patientSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_patientSearchTxtCaretUpdate
        if (this.inPtChbx.isSelected() && this.searchnameChbx.isSelected()) {
            if (patientSearchTxt.getCaretPosition() < 3) {

                System.out.println("Nothing");
            } else {
                patientSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, name from inpatient_list where name ILIKE '%" + patientSearchTxt.getText() + "%' order by name"));

                patientSearchTable.setShowHorizontalLines(false);
                patientSearchScrollPane.setViewportView(patientSearchTable);

            }
        } else {

            if (this.outPtChbx.isSelected() && this.searchnameChbx.isSelected()) {
                if (patientSearchTxt.getCaretPosition() < 3) {

                    System.out.println("Nothing");
                } else {
                    patientSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, name from patient_select where name ILIKE '%" + patientSearchTxt.getText() + "%' order by name"));

                    patientSearchTable.setShowHorizontalLines(false);
                    patientSearchScrollPane.setViewportView(patientSearchTable);

                }

            } else {
                if (this.inPtChbx.isSelected() && this.SearchNoChbx.isSelected()) {
                    if (patientSearchTxt.getCaretPosition() < 6) {

                        System.out.println("Nothing");
                    } else {
                        patientSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, name from inpatient_list where patient_no ILIKE '%" + patientSearchTxt.getText() + "%' OR unit_number ILIKE '%" + patientSearchTxt.getText() + "%' order by patient_no"));

                        patientSearchTable.setShowHorizontalLines(false);
                        patientSearchScrollPane.setViewportView(patientSearchTable);

                    }
                } else {

                    if (this.outPtChbx.isSelected() && this.SearchNoChbx.isSelected()) {
                        if (patientSearchTxt.getCaretPosition() < 6) {

                            System.out.println("Nothing");
                        } else {
                            patientSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, name from patient_select where patient_no ILIKE '%" + patientSearchTxt.getText() + "%' order by patient_no"));

                            patientSearchTable.setShowHorizontalLines(false);
                            patientSearchScrollPane.setViewportView(patientSearchTable);

                        }

                    } else {
                        if (this.walkinPtChbx.isSelected()) {
                            if (patientSearchTxt.getCaretPosition() < 5) {

                                System.out.println("Nothing");
                            } else {
                                //  jSearchTable2121.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT patient_no, name from patient_select where patient_no ILIKE '%"+jTextField113121.getText()+"%' order by patient_no"));
                                patientSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT distinct(patient_no),(patient_name) as name from hp_pharmacy where patient_no ILIKE '%" + patientSearchTxt.getText() + "%' AND (patient_no ilike 'wk%') order by patient_name"));

                                patientSearchTable.setShowHorizontalLines(false);
                                patientSearchScrollPane.setViewportView(patientSearchTable);

                            }
                        }
                    }
                }
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_patientSearchTxtCaretUpdate

    private void searchButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton2ActionPerformed
        searchButton2121Clicked(); // Add your handling code here:

        // Add your handling code here:
    }//GEN-LAST:event_searchButton2ActionPerformed
    private void searchButton2121Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.patientNumberTxt.getLocationOnScreen();

        patientSearchDialog.setSize(400, 200);

        patientSearchDialog.setLocation(point);

        patientSearchDialog.setVisible(true);
    }
    private void inPtChbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inPtChbxActionPerformed
        //jPanel1.setVisible(false);
        jPanel13.setVisible(true);
        // jPanel11.setVisible(false);
        this.patientNameTxt.setEditable(false);
        /*
         * try { java.sql.Statement pstmt = connectDB.createStatement();
         * java.sql.ResultSet rs = pstmt.executeQuery("select store_name from
         * st_stores where store_code = 'IP'");
         *
         * while (rs.next()){ jTextField42.setText(rs.getObject(1).toString());
         * // jTextField2.setText(rs.getObject(2).toString());
         *
         * }
         * } catch(java.sql.SQLException sqlex){
         * System.out.println(sqlex.getMessage()); }
         */
        //jPanel11.setVisible(true)// Add your handling code here:
    }//GEN-LAST:event_inPtChbxActionPerformed

    private void jButton5212ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5212ActionPerformed
        this.jSearchDialog212.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton5212ActionPerformed

    private void jSearchTable212MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable212MouseClicked
        //  jTextField5821.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 1).toString());
/*
         * jTextField912.setText(jSearchTable212.getValueAt(jSearchTable212.getSelectedRow(),
         * 0).toString());
         *
         *
         * int j = 0; try {
         *
         * java.sql.Statement pstmt12 = connectDB.createStatement();
         * java.sql.ResultSet rs12 = pstmt12.executeQuery("select
         * count(patient_name) from hp_pharmacy WHERE patient_name
         * ='"+jSearchTable212.getValueAt(jSearchTable212.getSelectedRow(),0)+"'
         * AND paid = true AND collected = false"); while (rs12.next()){ j =
         * rs12.getInt(1); }
         *
         * if (j > 0) { java.sql.Statement pstmt1 = connectDB.createStatement();
         * java.sql.ResultSet rs1 = pstmt1.executeQuery("select sum(amount) as
         * value from hp_pharmacy WHERE patient_name
         * ='"+jSearchTable212.getValueAt(jSearchTable212.getSelectedRow(),0)+"'
         * AND paid = true AND collected = false");
         *
         *
         * while (rs1.next()){
         * jTextField1111.setText(rs1.getObject(1).toString());
         *
         * }
         *
         * //crset1.setCommand("select service,dosage,units,selling_price,debit
         * as value from drug_collection_view WHERE patient_no
         * ='"+jComboBox11.getSelectedItem().toString()+"'"); /*
         * crset1.setCommand("select description,quantity,units,price,amount as
         * value from hp_pharmacy WHERE patient_name
         * ='"+jSearchTable212.getValueAt(jSearchTable212.getSelectedRow(),0)+"'
         * AND paid = true AND collected = false");
         *
         * crset1.setConnectionSource(pConnDB); try {
         *
         * crset1.execute();
         *
         * // crset2.setExecuteOnLoad(true); jTable111.setModel(new
         * org.netbeans.lib.sql.models.TableModel(crset1, new
         * org.netbeans.lib.sql.models.TableModel.Column[] { new
         * org.netbeans.lib.sql.models.TableModel.Column("description", "Item
         * Desc.", false), new
         * org.netbeans.lib.sql.models.TableModel.Column("units", "Units",
         * false), new org.netbeans.lib.sql.models.TableModel.Column("quantity",
         * "Quantity", false), new
         * org.netbeans.lib.sql.models.TableModel.Column("price", "Price per
         * Item", false), new
         * org.netbeans.lib.sql.models.TableModel.Column("value", "Value KShs",
         * true)
         *
         *
         * })); jScrollPane11.setViewportView(jTable111);
         *
         *
         * }
         * } catch(java.sql.SQLException sqlex){
         * System.out.println(sqlex.getMessage()); }
         * this.populateTable111(this.jTextField912.getText());
         *
         * jSearchDialog212.dispose();
         */
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable212MouseClicked
    /*
     * private void populateTable111(java.lang.String patient_no) { int j = 0;
     * int i = 0;
     *
     * try { java.sql.Statement stmtTable11 = connectDB.createStatement();
     *
     * java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT
     * count(patient_name) FROM hp_pharmacy WHERE patient_name =
     * '"+patient_no+"' AND paid = true AND collected = false");
     *
     * while (rsetTable11.next()) { j = rsetTable11.getInt(1); } if (j > 0) {
     * java.sql.Statement stmtTable1 = connectDB.createStatement();
     *
     * java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select
     * description,units,quantity,price,amount as value,gl_code from hp_pharmacy
     * WHERE patient_name ='"+patient_no+"' AND paid = true AND collected =
     * false and date_prescribed = current_date");
     *
     * while (rsetTable1.next()) {
     *
     * System.out.println("Working at table row "+i);
     * jTable111.setValueAt(rsetTable1.getObject(1), i, 0);
     * jTable111.setValueAt(rsetTable1.getObject(2), i, 1);
     * jTable111.setValueAt(rsetTable1.getObject(3), i, 3);
     * jTable111.setValueAt(rsetTable1.getObject(4), i, 4);
     * jTable111.setValueAt(rsetTable1.getObject(5), i, 5);
     * jTable111.setValueAt(rsetTable1.getObject(6), i, 6);
     *
     * i++;
     *
     * }
     * }
     * } catch(java.sql.SQLException sqlExec) {
     *
     * javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
     *
     * }
     * }
     */
    private void jTextField11312CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11312CaretUpdate

        jSearchTable212.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT distinct(patient_name) as name from hp_pharmacy where patient_name ILIKE '%" + jTextField11312.getText() + "%' AND (patient_no IS NULL OR  patient_no ='') and paid = true and collected = false order by patient_name"));

        /*
         * try {
         *
         * searchRowSet212.execute("SELECT distinct(patient_name) as name from
         * hp_pharmacy where patient_name ILIKE '"+jTextField11312.getText()+"%'
         * AND (patient_no IS NULL OR patient_no ='') and paid = true and
         * collected = false order by patient_name");
         *
         * jSearchTable212.setModel(new
         * org.netbeans.lib.sql.models.TableModel(searchRowSet212, new
         * org.netbeans.lib.sql.models.TableModel.Column[] { new
         * org.netbeans.lib.sql.models.TableModel.Column("name", "Patient name",
         * false) // new org.netbeans.lib.sql.models.TableModel.Column("name",
         * "Name", false) // new
         * org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Year
         * of birth", false), // new
         * org.netbeans.lib.sql.models.TableModel.Column("residence",
         * "Residence", false) }));
         */
        jSearchTable212.setShowHorizontalLines(false);
        jSearchScrollPane212.setViewportView(jSearchTable212);

        // Add your handling code here:
    }//GEN-LAST:event_jTextField11312CaretUpdate
    private void searchButton212Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
/*
         * java.awt.Point point = this.jTextField912.getLocationOnScreen();
         *
         * jSearchDialog212.setSize(400,200);
         *
         * jSearchDialog212.setLocation(point);
         *
         * jSearchDialog212.setVisible(true);
         */
    }

    private void populateTable11(java.lang.String patient_no) {
        /*
         * int j = 0; int i = 0;
         *
         * try { java.sql.Statement stmtTable11 = connectDB.createStatement();
         *
         * java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT
         * count(patient_name) FROM hp_pharmacy WHERE patient_name =
         * '"+patient_no+"' AND paid = false");
         *
         * while (rsetTable11.next()) { j = rsetTable11.getInt(1); } if (j > 0)
         * { java.sql.Statement stmtTable1 = connectDB.createStatement();
         *
         * java.sql.Statement stmtTable111 = connectDB.createStatement();
         *
         * java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT
         * description, quantity,price,(quantity*price)-amount,amount,gl_code
         * FROM hp_pharmacy WHERE patient_name = '"+patient_no+"' AND paid =
         * false");
         *
         * while (rsetTable1.next()) {
         *
         * jTable11.setValueAt(rsetTable1.getObject(1), i, 0);
         * jTable11.setValueAt(rsetTable1.getObject(2), i, 1);
         * jTable11.setValueAt(rsetTable1.getObject(3), i, 3);
         * if(rsetTable1.getDouble(4) >0){
         * jTable11.setValueAt(rsetTable1.getObject(4), i, 4); }else{
         * jTable11.setValueAt(new java.lang.Double(0.00), i, 4); } //
         * jTable11.setValueAt(rsetTable1.getObject(4), i, 4);
         * jTable11.setValueAt(rsetTable1.getObject(5), i, 5);
         * jTable11.setValueAt(rsetTable1.getObject(6), i, 6);
         *
         * java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("select
         * sum(qty) from stock_balance where description =
         * '"+jTable11.getValueAt(i,0).toString()+"' AND department ilike
         * '"+jTextField41.getText()+"%'"); while (rsetTable111.next()) {
         *
         * jTable11.setValueAt(rsetTable111.getObject(1), i, 2);
         *
         * i++;
         *
         * }
         * }
         * }
         *
         * java.sql.Statement pst211 = connectDB.createStatement();
         * java.sql.ResultSet rs111 = pst211.executeQuery("select doctor from
         * hp_pharmacy where paid = true and collected = false and patient_name
         * = '"+jTextField912.getText()+"'"); while (rs111.next()){
         * jTextField121.setText(rs111.getObject(1).toString()); } }
         * catch(java.sql.SQLException sqlExec) {
         *
         * javax.swing.JOptionPane.showMessageDialog(this,
         * sqlExec.getMessage());
         *
         * }
         */
    }

    /*
     * private void populateTable2(java.lang.String patient_no) { int j = 0; int
     * i = 0;
     *
     * try { java.sql.Statement stmtTable11 = connectDB.createStatement();
     *
     * java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT
     * count(patient_name) FROM hp_pharmacy WHERE patient_no = '"+patient_no+"'
     * AND paid = true AND collected = false");
     *
     * while (rsetTable11.next()) { j = rsetTable11.getInt(1); } if (j > 0) {
     * java.sql.Statement stmtTable1 = connectDB.createStatement();
     *
     * java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select
     * description,units,quantity,price,amount as value,gl_code from hp_pharmacy
     * WHERE patient_no ='"+patient_no+"' AND paid = true AND collected =
     * false");
     *
     * while (rsetTable1.next()) {
     *
     * System.out.println("Working at table row "+i);
     * jTable12.setValueAt(rsetTable1.getObject(1), i, 0);
     * jTable12.setValueAt(rsetTable1.getObject(2), i, 1);
     * jTable12.setValueAt(rsetTable1.getObject(3), i, 3);
     * jTable12.setValueAt(rsetTable1.getObject(4), i, 4);
     * jTable12.setValueAt(rsetTable1.getObject(5), i, 5);
     * jTable12.setValueAt(rsetTable1.getObject(6), i, 6);
     *
     * i++;
     *
     * }
     * }
     * } catch(java.sql.SQLException sqlExec) {
     *
     * javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
     *
     * }
     * }
     */ private void searchButton1Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
/*
         * java.awt.Point point = this.jTextField91.getLocationOnScreen();
         *
         * jSearchDialog21.setSize(400,200);
         *
         * jSearchDialog21.setLocation(point);
         *
         * jSearchDialog21.setVisible(true);
         *
         *
         */
    }
    /*
     * private void cmbox2ActionPerformed(java.awt.event.ActionEvent evt){ int j
     * = 0;
     *
     * java.lang.Object selectedGuaran = cmbox2.getSelectedItem(); int i =
     * jTable11.getSelectedRow();
     *
     * if (selectedGuaran != null) {
     *
     * try { java.sql.Statement pstmt = connectDB.createStatement();
     * java.sql.ResultSet rs = pstmt.executeQuery("select
     * sp.selling_price::numeric from st_stock_prices sp where product =
     * '"+selectedGuaran+"'"); while (rs.next()){
     * jTable11.setValueAt(rs.getObject(1),i,4); } } catch(java.sql.SQLException
     * sqlex){ System.out.println(sqlex.getMessage()); }
     *
     *
     * double Qty = 0.00; try { java.sql.Statement pstmt =
     * connectDB.createStatement(); java.sql.Statement pstmt1 =
     * connectDB.createStatement();
     *
     * java.sql.ResultSet rs1 = pstmt1.executeQuery("select count(product) from
     * st_stock_prices sc where item = '"+selectedGuaran+"' and department ilike
     * '"+jTextField41.getText()+"%'"); while (rs1.next()) j = rs1.getInt(1); if
     * (j > 0){
     *
     * java.sql.ResultSet rs = pstmt.executeQuery("select sum(qty) from
     * stock_balance where description = '"+selectedGuaran+"' and department
     * ILIKE '"+jTextField41.getText()+"%'"); while (rs.next()){ Qty =
     * rs.getDouble(1); //jTable1.setValueAt(Qty,jTable1.getSelectedRow(),2);
     *
     * jTable11.setValueAt(Qty,i,2);
     *
     * }
     * } else { jTable11.setValueAt("0.00",i,2); } } catch(java.sql.SQLException
     * sqlex){ System.out.println(sqlex.getMessage()); }
     *
     * try { java.sql.Statement pstmt = connectDB.createStatement();
     *
     * java.sql.ResultSet rs = pstmt.executeQuery("select code from pb_activity
     * where activity ilike '"+jTextField41.getText()+"%'"); while (rs.next()){
     * jTable11.setValueAt(rs.getObject(1),i,6);
     *
     * }
     * } catch(java.sql.SQLException sqlex){
     * System.out.println(sqlex.getMessage()); } }
     *
     * }
     */

    public class ComboTextField extends javax.swing.JTextField implements javax.swing.ComboBoxEditor {

        public ComboTextField() {

            initComponents();

        }

        void initComponents() {

            // oldComboBox1311Model = jComboBox1311.getModel();
            // comboTextField = new javax.swing.JTextField();
            comboTextField.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyTyped(java.awt.event.KeyEvent e) {

                    if (e.getID() == java.awt.event.KeyEvent.VK_BACK_SPACE) {

                        changeComboBoxModel(comboTextField.getText());

                        System.out.println(comboTextField.getText() + " Pressed Key " + e.getKeyText(e.getKeyCode()));
                    }
                }
            });

        }

        public java.awt.Component getEditorComponent() {

            return comboTextField;

        }

        public Object getItem() {

            return comboTextField.getText();

        }

        public void setItem(Object obj) {
            //    comboTextField.setText(jComboBox1311.getSelectedItem().toString());
        }

        public void changeComboBoxModel(java.lang.String typedLetters) {

            javax.swing.DefaultComboBoxModel newComboBox1311Model = new javax.swing.DefaultComboBoxModel();

            System.out.println("ComboBox Item No. " + oldComboBox1311Model.getSize());

            for (int i = 0; i < oldComboBox1311Model.getSize(); i++) {

                if (oldComboBox1311Model.getElementAt(i).toString().startsWith(typedLetters)) {

                    newComboBox1311Model.addElement(oldComboBox1311Model.getElementAt(i));

                    //                    jComboBox1311.setModel(newComboBox1311Model);
                }

            }

        }
        //      }
    }                                               /*
     * private void populateTable11(java.lang.String patient_name) { int j = 0;
     * int i = 0;
     *
     * try { java.sql.Statement stmtTable1 = connectDB.createStatement();
     *
     * java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT
     * count(patient_name) FROM hp_pharmacy WHERE patient_name =
     * '"+patient_name+"' AND paid = false AND collected = false");
     *
     * while (rsetTable1.next()) { j = rsetTable1.getInt(1); } if (j > 0) {
     *
     * java.sql.Statement stmtTable11 = connectDB.createStatement();
     *
     * java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT
     * description, quantity, price, null::numeric(15,2),amount, gl_code FROM
     * hp_pharmacy WHERE patient_name = '"+patient_name+"' AND paid = false AND
     * collected = false");
     *
     * while (rsetTable11.next()) {
     *
     * System.out.println("Working at table row "+i);
     * jTable11.setValueAt(rsetTable11.getObject(1), i, 0);
     * jTable11.setValueAt(rsetTable11.getObject(2), i, 1);
     * jTable11.setValueAt(rsetTable11.getObject(3), i, 3);
     * jTable11.setValueAt(rsetTable11.getObject(4), i, 4);
     * jTable11.setValueAt(rsetTable11.getObject(5), i, 5);
     * jTable11.setValueAt(rsetTable11.getObject(6), i, 6);
     *
     * i++;
     *
     * // i = i + i; // jTable1.setValueAt(rsetTable1.getObject(1), i, 0); } }
     * } catch(java.sql.SQLException sqlExec) {
     *
     * javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
     *
     * }
     * }
     *
     */


    // }
    private void outPtChbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outPtChbxActionPerformed
        this.patientNameTxt.setEditable(false);
        /*
         * jPanel11.setVisible(false); jPanel1.setVisible(true);
         * jPanel13.setVisible(false); try { java.sql.Statement pstmt =
         * connectDB.createStatement(); java.sql.ResultSet rs =
         * pstmt.executeQuery("select store_name from st_stores where store_code
         * = 'OP'");
         *
         * while (rs.next()){ jTextField4.setText(rs.getObject(1).toString());
         * // jTextField2.setText(rs.getObject(2).toString());
         *
         * }
         * } catch(java.sql.SQLException sqlex){
         * System.out.println(sqlex.getMessage()); }
         */
        // Add your handling code here:
    }//GEN-LAST:event_outPtChbxActionPerformed

    private void walkinPtChbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_walkinPtChbxActionPerformed
        /*
         * jPanel1.setVisible(false); jPanel11.setVisible(true);
         * jPanel13.setVisible(false);
         */
        this.patientNameTxt.setEditable(true);
        this.jTextField52.setText("Cash");
        this.patientCategoryTxt.setText("General");

        //compell searching only by wk number because the names used here are never standard
        searchnameChbx.setSelected(false);
        SearchNoChbx.setSelected(true);

        // jPanel11.setVisible(true)// Add your handling code here:
    }//GEN-LAST:event_walkinPtChbxActionPerformed

    private void departmentCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departmentCmbxActionPerformed

        try {
            // TODO add your handling code here:
            java.sql.PreparedStatement glcode = connectDB.prepareStatement("select income_account from pb_departments where upper(department_name) = '" + departmentCmbx.getSelectedItem().toString().toUpperCase() + "'");

            ResultSet rcode = glcode.executeQuery();
            while (rcode.next()) {

                String code = dbObject.getDBObject(rcode.getObject(1).toString(), "-");

                glCodeTxt.setText(code);

            }

        } catch (SQLException ex) {
            Logger.getLogger(PharmReturnsIntfr.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }

        transNocmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT transaction_no FROM st_sub_stores WHERE issiued_to ilike  '%" + patientNumberTxt.getText() + "%' and store_name ilike '%" + departmentCmbx.getSelectedItem().toString() + "%' ORDER BY 1 ASC "));
}//GEN-LAST:event_departmentCmbxActionPerformed

    private void patientCategoryTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientCategoryTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientCategoryTxtActionPerformed

    private void patientNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientNameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientNameTxtActionPerformed

    private void transNocmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transNocmbxActionPerformed
        // TODO add your handling code here:
        if (!transNocmbx.getSelectedItem().toString().equals("-")) {
            //pharmacyReturnsTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT item AS DESCRIPTION, issuing as QTY, false as RETURN, price as UNITPRICE, 0 AS DISCOUNT, total as TOTAL, store_name as DEPARTMENT,  item_code as ITEM_CODE, '-' as STRENGTH,'"+glCodeTxt.getText()+"' as gl_code FROM st_sub_stores WHERE issiued_to ilike  '%" + patientNumberTxt.getText() + "%' and store_name ilike '"+departmentCmbx.getSelectedItem().toString()+"' AND transaction_no= '"+transNocmbx.getSelectedItem().toString()+"' and item not like 'DISPENSING FEE'"));
            pharmacyReturnsTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT item AS DESCRIPTION, issuing as QTY, false as RETURN, price as UNITPRICE, 0 AS DISCOUNT, total as TOTAL, store_name as DEPARTMENT,  item_code as ITEM_CODE, '-' as STRENGTH,'" + glCodeTxt.getText() + "' as gl_code FROM st_sub_stores WHERE issiued_to ilike  '%" + patientNumberTxt.getText() + "%'  AND transaction_no= '" + transNocmbx.getSelectedItem().toString() + "' and item not like 'DISPENSING FEE'"));

        }
        amountTxt.setText("0.00");
    }//GEN-LAST:event_transNocmbxActionPerformed

    private void patientSearchTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientSearchTableMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_patientSearchTableMouseEntered

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
//        System.out.println("PHARMACIES" +departmentCmbx.getItemCount());
//        if(departmentCmbx.getItemCount()<1){
//        
//        javax.swing.JOptionPane.showMessageDialog(this, "You Need To Be Allocated A Pharmacy To Transact");
//        }
    }//GEN-LAST:event_formInternalFrameOpened

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        // TODO add your handling code here:
        // TODO add your handling code here:
        System.out.println("PHARMACIES " + departmentCmbx.getItemCount());
        if (departmentCmbx.getItemCount() < 1) {

            javax.swing.JOptionPane.showMessageDialog(this, "You Need To Be Allocated A Pharmacy Outlet To Transact.\n Please Contact Your Inventory Supervisor");
            jButton41.doClick();

        }
        departmentCmbx.setSelectedIndex(0);
    }//GEN-LAST:event_formInternalFrameActivated

    private void pharmacyReturnsTblMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pharmacyReturnsTblMouseReleased
        // TODO add your handling code here:


    }//GEN-LAST:event_pharmacyReturnsTblMouseReleased

    private void pharmacyReturnsTblMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pharmacyReturnsTblMousePressed
        // TODO add your handling code here:

        //amountTxt.setText("0.00");
        if (pharmacyReturnsTbl.getSelectedColumn() == 2) {
            System.out.println(pharmacyReturnsTbl.getValueAt(pharmacyReturnsTbl.getSelectedRow(), 2).toString());
            if (Boolean.valueOf(pharmacyReturnsTbl.getValueAt(pharmacyReturnsTbl.getSelectedRow(), 2).toString()) == java.lang.Boolean.TRUE) {

                totalreturn = Double.valueOf(com.afrisoftech.lib.CurrencyFormatter.parseFormattedString(amountTxt.getText())) - Double.valueOf(pharmacyReturnsTbl.getModel().getValueAt(pharmacyReturnsTbl.getSelectedRow(), 5).toString());
                // amountTxt.setText(totalreturn.toString());

                amountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalreturn));

            } else if (Boolean.valueOf(pharmacyReturnsTbl.getValueAt(pharmacyReturnsTbl.getSelectedRow(), 2).toString()) == java.lang.Boolean.FALSE) {
                totalreturn = Double.valueOf(com.afrisoftech.lib.CurrencyFormatter.parseFormattedString(amountTxt.getText())) + Double.valueOf(pharmacyReturnsTbl.getModel().getValueAt(pharmacyReturnsTbl.getSelectedRow(), 5).toString());
                amountTxt.setText(totalreturn.toString());

                amountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalreturn));
            }

        }
    }//GEN-LAST:event_pharmacyReturnsTblMousePressed
    private void populateTable1(java.lang.String patient_no) {
        int j = 0;
        int i = 0;
        double Qty = 0.00;
        try {
            java.sql.Statement stmtTable11 = connectDB.createStatement();

            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT count(patient_no)  FROM hp_pharmacy WHERE patient_no = '" + patient_no + "' AND paid = false");

            while (rsetTable11.next()) {
                j = rsetTable11.getInt(1);
            }
            if (j > 0) {
                java.sql.Statement stmtTable1 = connectDB.createStatement();
                java.sql.Statement stmtTable111 = connectDB.createStatement();

                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT description, sum(quantity),price,sum((quantity*price)-amount),sum(amount),gl_code,item_code,strength  FROM hp_pharmacy WHERE patient_no = '" + patient_no + "' AND paid = false AND date_prescribed = '" + pharmReturnDate.getDate().toString() + "' group by description,price,gl_code,item_code,strength ");

                while (rsetTable1.next()) {

                    System.out.println("Working at table row " + i);
                    pharmacyReturnsTbl.setValueAt(rsetTable1.getObject(1), i, 0);
                    pharmacyReturnsTbl.setValueAt(rsetTable1.getObject(2), i, 1);
                    pharmacyReturnsTbl.setValueAt(rsetTable1.getObject(3), i, 3);
                    if (rsetTable1.getDouble(4) > 0) {
                        pharmacyReturnsTbl.setValueAt(rsetTable1.getObject(4), i, 4);
                    } else {
                        pharmacyReturnsTbl.setValueAt(new java.lang.Double(0.00), i, 4);
                    }
                    pharmacyReturnsTbl.setValueAt(rsetTable1.getObject(5), i, 5);
                    pharmacyReturnsTbl.setValueAt(rsetTable1.getObject(6), i, 6);

                    pharmacyReturnsTbl.setValueAt(rsetTable1.getObject(7), i, 7);
                    pharmacyReturnsTbl.setValueAt(rsetTable1.getObject(8), i, 8);

                    java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("select sum(receiving-issuing) from st_sub_stores where item_code = '" + pharmacyReturnsTbl.getValueAt(i, 7).toString() + "' AND store_name ilike '" + departmentCmbx.getSelectedItem().toString() + "%'");
                    while (rsetTable111.next()) {

                        pharmacyReturnsTbl.setValueAt(rsetTable111.getObject(1), i, 2);
                        //jTable1.setValueAt(new java.lang.String(dbObject.getDBObject(rsetTable111.getObject(1), i, 2), "0.00"));

                        i++;

                    }
                }
            }
        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
    }/*
     * private void cmboxActionPerformed(java.awt.event.ActionEvent evt){ int j
     * = 0;
     *
     * java.lang.Object selectedGuaran = cmbox.getSelectedItem(); int i =
     * jTable1.getSelectedRow(); if ( i > -1){ if (selectedGuaran != null) {
     *
     * try { java.sql.Statement pstmt = connectDB.createStatement();
     * java.sql.ResultSet rs = pstmt.executeQuery("select
     * sp.selling_price::numeric from st_stock_prices sp where product =
     * '"+selectedGuaran+"'"); while (rs.next()){
     * jTable1.setValueAt(rs.getObject(1),i,3); } } catch(java.sql.SQLException
     * sqlex){ System.out.println(sqlex.getMessage()); }
     *
     *
     *
     * try { java.sql.Statement pstmt = connectDB.createStatement();
     * java.sql.Statement pstmt1 = connectDB.createStatement();
     *
     * java.sql.ResultSet rs1 = pstmt1.executeQuery("select count(item) from
     * st_stock_cardex sc where item = '"+selectedGuaran+"' and sc.cost_center =
     * 'Pharmacy'"); while (rs1.next()) j = rs1.getInt(1); if (j > 0){
     *
     * java.sql.ResultSet rs = pstmt.executeQuery("select
     * sum(sc.quantity_received - sc.sub_store_issuing)::numeric from
     * st_stock_cardex sc where item = '"+selectedGuaran+"' and sc.store =
     * 'Pharmacy'"); while (rs.next()){
     *
     * jTable1.setValueAt(rs.getObject(1),i,2);
     *
     * }
     * } else { jTable1.setValueAt("0.00",i,2); } } catch(java.sql.SQLException
     * sqlex){ System.out.println(sqlex.getMessage()); }
     *
     * try { java.sql.Statement pstmt = connectDB.createStatement();
     *
     * java.sql.ResultSet rs = pstmt.executeQuery("select code from pb_activity
     * where activity = '"+jTextField4.getText()+"'"); while (rs.next()){
     * jTable1.setValueAt(rs.getObject(1),i,6);
     *
     * }
     * } catch(java.sql.SQLException sqlex){
     * System.out.println(sqlex.getMessage()); } }
     *
     * }
     * }
     */


    private void startRunning() {

        System.out.println("Starting to run Progress Thread");

        if (updatePatientList == null || !updatePatientList.isAlive()) {

            updatePatientList = new UpdatePatientList(this);

            updatePatientList.start();

            System.out.println("Progress Thread started");

        }

    }

    private void stopRunning() {

        System.out.println("Stopping run Progress Thread");

        updatePatientList.setStop(false);

    }

    class UpdatePatientList extends java.lang.Thread {

        java.lang.String selectedItem;
        int refreshWaitTime = 10000;

        public UpdatePatientList(java.awt.Component parent) {
        }

        public void setStop(boolean refreshstatus) {

            refreshStatus = refreshstatus;

        }
        /*
         * public void run() {
         *
         * System.out.println("Loading Patient refresh thread.");
         *
         * while (refreshStatus) {
         *
         * try {
         *
         * selectedItem = jComboBox131.getSelectedItem().toString();
         *
         * crset1.execute();
         *
         * jComboBox131.setSelectedItem(selectedItem);
         *
         * } catch (java.sql.SQLException sqlExec) {
         *
         * javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(),
         * sqlExec.getMessage());
         *
         * }
         *
         * try {
         *
         * java.lang.Thread.sleep(refreshWaitTime);
         *
         * } catch (java.lang.InterruptedException intExec) {
         *
         * javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(),
         * "Interruption Exception!"); }
         *
         * }
         *
         * }
         */
    }
    /*
     * public void tableModel1TableChanged() { System.out.println("Calculating
     * totals for table 13 and 2."); // double resFloat = 0.00; double resFloat
     * = 0.00; double Total =
     * java.lang.Double.parseDouble(jTextField82.getText()); for (int i = 0; i <
     * jTable13.getRowCount(); i++) {
     *
     * if (jTable13.getModel().getValueAt(i, 0) != null) {
     *
     * if (jTable13.getSelectedColumn() == 1) {
     *
     * resFloat = resFloat +
     * Double.parseDouble(jTable13.getModel().getValueAt(i, 5).toString());
     *
     * jTextField32.setText(java.lang.String.valueOf(resFloat)); }else // if
     * (jTable11.getSelectedColumn() == 4) {
     *
     * resFloat = resFloat +
     * Double.parseDouble(jTable13.getModel().getValueAt(i,5).toString()); //9 }
     *
     * jTextField32.setText(java.lang.String.valueOf(resFloat)); //
     * jTextField10.setText(java.lang.String.valueOf(resFloat+Total)); if
     * (resFloat>Total){
     * jTextField10.setText(java.lang.String.valueOf(resFloat+Total)); }else{
     * jTextField10.setText(java.lang.String.valueOf(resFloat)); } } }
     *
     * // jTextField31.setText(java.lang.String.valueOf(resFloat)); } public
     * void tableModel1TableChanged(javax.swing.event.TableModelEvent evt) {
     *
     * // double resFloat = 0.00; double resFloat = 0.00;
     *
     * double Total = java.lang.Double.parseDouble(jTextField82.getText());
     *
     * for (int i = 0; i < jTable13.getRowCount(); i++) {
     *
     * if (jTable11.getModel().getValueAt(i, 0) != null) {
     *
     * if (jTable13.getSelectedColumn() == 1) {
     *
     * resFloat = resFloat +
     * Double.parseDouble(jTable13.getModel().getValueAt(i,5).toString());
     *
     * jTextField32.setText(java.lang.String.valueOf(resFloat));
     * jTextField10.setText(java.lang.String.valueOf(resFloat+Total)); }else //
     * if (jTable11.getSelectedColumn() == 4) {
     *
     * resFloat = resFloat +
     * Double.parseDouble(jTable13.getModel().getValueAt(i,5).toString()); // }
     * jTextField32.setText(java.lang.String.valueOf(resFloat)); //
     * jTextField10.setText(java.lang.String.valueOf(resFloat+Total)); if
     * (resFloat>Total){
     * jTextField10.setText(java.lang.String.valueOf(resFloat+Total)); }else{
     * jTextField10.setText(java.lang.String.valueOf(resFloat)); } } }
     *
     * // jTextField31.setText(java.lang.String.valueOf(resFloat)); }
     *
     *
     * public void tableModelTableChanged2() { System.out.println("Calculating
     * totals for table 11 and 2."); // double resFloat = 0.00; double resFloat
     * = 0.00; double Total =
     * java.lang.Double.parseDouble(jTextField81.getText()); for (int i = 0; i <
     * jTable11.getRowCount(); i++) {
     *
     * if (jTable11.getModel().getValueAt(i, 0) != null) {
     *
     * if (jTable11.getSelectedColumn() == 1) {
     *
     * resFloat = resFloat +
     * Double.parseDouble(jTable11.getModel().getValueAt(i, 5).toString());
     *
     * jTextField31.setText(java.lang.String.valueOf(resFloat));
     * jTextField14.setText(java.lang.String.valueOf(resFloat+Total)); }else //
     * if (jTable11.getSelectedColumn() == 4) {
     *
     * resFloat = resFloat +
     * Double.parseDouble(jTable11.getModel().getValueAt(i,5).toString()); //9 }
     *
     * jTextField31.setText(java.lang.String.valueOf(resFloat)); //
     * jTextField14.setText(java.lang.String.valueOf(resFloat+Total)); if
     * (resFloat>Total){
     * jTextField14.setText(java.lang.String.valueOf(resFloat+Total)); }else{
     * jTextField14.setText(java.lang.String.valueOf(resFloat)); } } }
     *
     * // jTextField31.setText(java.lang.String.valueOf(resFloat)); }
     */
    /*
     * public void tableModelTableChanged() { System.out.println("Calculating
     * totals for table 12 and 21."); // double resFloat = 0.00; double
     * resFloat1 = 0.00; double Total =
     * java.lang.Double.parseDouble(jTextField8.getText()); for (int i = 0; i <
     * jTable1.getRowCount(); i++) {
     *
     * if (jTable1.getModel().getValueAt(i, 0) != null) {
     *
     * if (jTable1.getSelectedColumn() == 1) {
     *
     * resFloat1 = resFloat1 +
     * Double.parseDouble(jTable1.getModel().getValueAt(i, 5).toString());
     *
     * // }
     *
     * jTextField3.setText(java.lang.String.valueOf(resFloat1));
     * jTextField15.setText(java.lang.String.valueOf(resFloat1+Total));
     *
     * }else // if (jTable1.getSelectedColumn() == 4) {
     *
     * resFloat1 = resFloat1 +
     * Double.parseDouble(jTable1.getModel().getValueAt(i,5).toString()); // }
     * jTextField3.setText(java.lang.String.valueOf(resFloat1)); if
     * (resFloat1>Total){
     * jTextField15.setText(java.lang.String.valueOf(resFloat1+Total)); }else{
     * jTextField15.setText(java.lang.String.valueOf(resFloat1)); }
     *
     * }
     * }
     *
     * // jTextField31.setText(java.lang.String.valueOf(resFloat)); } public
     * void tableModelTableChanged(javax.swing.event.TableModelEvent evt) {
     *
     * // double resFloat = 0.00; double resFloat1 = 0.00; double Total =
     * java.lang.Double.parseDouble(jTextField8.getText()); for (int i = 0; i <
     * jTable1.getRowCount(); i++) {
     *
     * if (jTable1.getModel().getValueAt(i, 0) != null) {
     *
     * if (jTable1.getSelectedColumn() == 1) {
     *
     * resFloat1 = resFloat1 +
     * Double.parseDouble(jTable1.getModel().getValueAt(i, 5).toString());
     *
     * // }
     *
     * jTextField3.setText(java.lang.String.valueOf(resFloat1));
     * jTextField15.setText(java.lang.String.valueOf(resFloat1+Total)); }else //
     * if (jTable11.getSelectedColumn() == 4) {
     *
     * resFloat1 = resFloat1 +
     * Double.parseDouble(jTable1.getModel().getValueAt(i,5).toString()); // }
     * jTextField3.setText(java.lang.String.valueOf(resFloat1)); if
     * (resFloat1>Total){
     * jTextField15.setText(java.lang.String.valueOf(resFloat1+Total)); }else{
     * jTextField15.setText(java.lang.String.valueOf(resFloat1)); } } }
     *
     * // jTextField31.setText(java.lang.String.valueOf(resFloat)); }
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox SearchNoChbx;
    private javax.swing.JTextField amountTxt;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup21;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JComboBox departmentCmbx;
    private javax.swing.JComboBox doctorNameCmbx;
    private javax.swing.JTextField glCodeTxt;
    private javax.swing.JCheckBox inPtChbx;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton121;
    private javax.swing.JButton jButton122;
    private javax.swing.JButton jButton32;
    public javax.swing.JButton jButton41;
    private javax.swing.JButton jButton4212;
    private javax.swing.JButton jButton42121;
    private javax.swing.JButton jButton5212;
    private javax.swing.JButton jButton52121;
    private javax.swing.JButton jButton54;
    private javax.swing.JButton jButton63;
    private javax.swing.JButton jButton92;
    private javax.swing.JButton jButton93;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JComboBox jComboBox1311;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel532;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel413;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JDialog jSearchDialog212;
    private javax.swing.JDialog jSearchDialog3;
    private javax.swing.JDialog jSearchDialog4;
    private javax.swing.JPanel jSearchPanel212;
    private javax.swing.JPanel jSearchPanel213;
    private javax.swing.JPanel jSearchPanel3;
    private javax.swing.JScrollPane jSearchScrollPane212;
    private javax.swing.JScrollPane jSearchScrollPane3;
    private javax.swing.JScrollPane jSearchScrollPane4;
    private javax.swing.JTable jSearchTable212;
    private javax.swing.JTable jSearchTable3;
    private javax.swing.JTable jSearchTable4;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField11312;
    private javax.swing.JTextField jTextField114;
    private javax.swing.JTextField jTextField115;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField32;
    private javax.swing.JTextField jTextField52;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField82;
    private javax.swing.JCheckBox outPtChbx;
    private javax.swing.JTextField patientCategoryTxt;
    private javax.swing.JTextField patientNameTxt;
    private javax.swing.JTextField patientNumberTxt;
    private javax.swing.JDialog patientSearchDialog;
    private javax.swing.JPanel patientSearchPanel;
    private javax.swing.JScrollPane patientSearchScrollPane;
    private javax.swing.JTable patientSearchTable;
    private javax.swing.JTextField patientSearchTxt;
    private com.afrisoftech.lib.DatePicker pharmReturnDate;
    private javax.swing.JCheckBox pharmacyChbx;
    private javax.swing.JTable pharmacyReturnsTbl;
    private javax.swing.JTextField prescriptionTxt;
    private javax.swing.JButton searchButton2;
    private javax.swing.JButton searchButton4;
    private javax.swing.JCheckBox searchnameChbx;
    private javax.swing.JComboBox transNocmbx;
    private javax.swing.JCheckBox walkinPtChbx;
    // End of variables declaration//GEN-END:variables
}
