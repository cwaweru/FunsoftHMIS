/*
 * companyprflintfr.java
 *
 * Created on August 13, 2002, 11:36 AM
 */

package com.afrisoftech.hospinventory;

/**
 *
 * @author  root
 */
public class StockCountingAdjintfrkh extends javax.swing.JInternalFrame implements java.lang.Runnable {
    
    private  javax.swing.JComboBox cmbox2 = new javax.swing.JComboBox();
    private  javax.swing.JComboBox cmbox = new javax.swing.JComboBox();
    javax.swing.JSpinner dateSpinner = null;
    javax.swing.JSpinner dateSpinner1 = null;
    
    java.lang.Thread getListThread;
     java.lang.Thread getListThread1;
    
    java.sql.Connection connectDB = null;
        boolean getList1;
    boolean getList;
    com.afrisoftech.lib.DBObject dbObject;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    
    
    public StockCountingAdjintfrkh(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {
        
        dbObject = new com.afrisoftech.lib.DBObject();
        connectDB = connDb;
        
        pConnDB = pconnDB;
        
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton9 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel12 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        jLabel11 = new javax.swing.JLabel();
        jComboBox11 = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jTextField3 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField111CaretUpdate(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(jTextField111, gridBagConstraints);

        jSearchTable.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });

        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton9.setText("Cancel");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setBackground(new java.awt.Color(153, 255, 153));
        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Stock Count Adjustment");
        setToolTipText("Please Enter The Qty Difference You Want To update");
        setVisible(true);
        jLabel12.setFont(new java.awt.Font("Utopia", 3, 18));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        getContentPane().add(jLabel12, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBackground(new java.awt.Color(102, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Sub store here"));
        jLabel1.setText(" Store");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        jComboBox1.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select distinct store_name from st_stores order by store_name"));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 5.0;
        jPanel1.add(jComboBox1, gridBagConstraints);

        jLabel2.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel1.add(datePicker1, gridBagConstraints);

        jLabel11.setText("Category");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel1.add(jLabel11, gridBagConstraints);

        jComboBox11.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select  description as name from st_main_category order by name "));
        jComboBox11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox11ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jComboBox11, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Tick to list items between the preffered range"));
        jLabel3.setText("From");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jLabel3, gridBagConstraints);

        jTextField1.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        jPanel4.add(jTextField1, gridBagConstraints);

        jLabel4.setText("To");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jLabel4, gridBagConstraints);

        jTextField2.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel4.add(jTextField2, gridBagConstraints);

        jCheckBox1.setText("List");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jCheckBox1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel1.add(jPanel4, gridBagConstraints);

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Main Store");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel1.add(jRadioButton2, gridBagConstraints);

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Sub Store");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jRadioButton1, gridBagConstraints);

        jTextField3.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel1.add(jTextField3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter items & their balances"));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Item Description", "Units", "Balance Qty", "Saleable Qty", "Expired Qty", "Damaged Qty", "Expiry date", "BPrice", "Code", "Strength"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(false);
        // java.lang.Object[] strCmb = {"Payable","Receivable","Both"};

        //javax.swing.JComboBox cmBox = new javax.swing.JComboBox(strCmb);

        /*  javax.swing.SpinnerDateModel spinerDate = new javax.swing.SpinnerDateModel();
        dateSpinner = new javax.swing.JSpinner(spinerDate);

        javax.swing.table.TableColumn teditor = this.jTable1.getColumn("Expiry Date");

        teditor.setCellEditor(new javax.swing.DefaultCellEditor(dateSpinner));

        */

        /*
        cmbox2 = new javax.swing.JComboBox();

        try {

            crset1.setConnectionSource(pConnDB);
            crset1.execute("select description from stock_item ORDER BY description");

            cmbox2.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset1, "description", null, null,null));

            javax.swing.table.TableColumn seditor = this.jTable1.getColumn("Item Description");

            seditor.setCellEditor(new javax.swing.DefaultCellEditor(cmbox2));

            /*  cmbox2.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent evt) {

                    cmbox2ActionPerformed(evt);
                }
            });
            *
        } catch(java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
        */

        javax.swing.table.TableColumn column = null;
        for (int i = 0; i < 9; i++) {
            column = jTable1.getColumnModel().getColumn(i);
            if (i == 0) {

                column.setPreferredWidth(400); //sport column is bigger
            } else {
                if (i == 9) {
                    column.setPreferredWidth(400);
                } else {
                    //if (i == 2) {
                        column.setPreferredWidth(100);
                        // }  else
                    //column.setPreferredWidth(50);

                }
            }
        }
        cmbox = new javax.swing.JComboBox();
        javax.swing.table.TableColumn dateEditor = jTable1.getColumnModel().getColumn(6);
        com.afrisoftech.lib.DateCellEditor dateCellEditor = new com.afrisoftech.lib.DateCellEditor(new com.afrisoftech.lib.DatePicker(), jTable1);
        dateEditor.setCellEditor(dateCellEditor);
        //jTable1.setRowHeight(30);
        javax.swing.table.DefaultTableCellRenderer cellRenderer = new javax.swing.table.DefaultTableCellRenderer();
        cellRenderer.setHorizontalAlignment(cellRenderer.TRAILING);
        dateEditor.setCellRenderer(cellRenderer);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTable1KeyTyped(evt);
            }
        });

        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        jPanel2.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        getContentPane().add(jPanel2, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton1.setMnemonic('O');
        jButton1.setText("Ok");
        jButton1.setToolTipText("click to store data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton1, gridBagConstraints);

        jButton5.setMnemonic('r');
        jButton5.setText("Remove Row");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(jButton5, gridBagConstraints);

        jButton3.setMnemonic('l');
        jButton3.setText("Clear");
        jButton3.setToolTipText("click to clear fields");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton3, gridBagConstraints);

        jButton4.setMnemonic('C');
        jButton4.setText("Close");
        jButton4.setToolTipText("Click to close");
        jButton4.setSelected(true);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jPanel3, gridBagConstraints);

        setBounds(0, 0, 750, 459);
    }// </editor-fold>//GEN-END:initComponents
    
    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
 this.jButton1.setEnabled(true);
        jComboBox1.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select store_name from st_stores ORDER BY store_name"));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });     // Add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed
    
    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
 this.jButton1.setEnabled(true);
//  jComboBox1.setM
        jComboBox1.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select  store_name as name from st_main_stores order by name"));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        // Add your handling code here:
    }//GEN-LAST:event_jRadioButton2ActionPerformed
    
    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        if (jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 3) != null) {
            if (jTable1.getSelectedColumn() == jTable1.getSelectedColumn()) {
                jTable1.setValueAt(0, jTable1.getSelectedRow(), 4);
                jTable1.setValueAt(0, jTable1.getSelectedRow(), 5);
            }
            
        }// TODO add your handling code here:
    }//GEN-LAST:event_jTable1KeyReleased
    
    private void jTable1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyTyped
// TODO add your handling code here:
    }//GEN-LAST:event_jTable1KeyTyped
    
    private void jComboBox11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox11ActionPerformed
      
      for (int k = 0; k < jTable1.getRowCount(); k++ ) {
            for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                jTable1.getModel().setValueAt(null,k,r);
            }
        }
        
        //getList1 = true;
        
       // getListThread1 = new java.lang.Thread(this, "get_list_Thread1");
        
        //getListThread1.start();  
        
        
        
        /*if (jCheckBox1.isSelected()){
            for (int k = 0; k < jTable1.getRowCount(); k++ ) {
                for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                    jTable1.getModel().setValueAt(null,k,r);
                }
            }
            int j = 0;
            java.lang.Object[] listofAct = this.getListofActivities();
            for (int i = 0; i < listofAct.length; i++) {
                if(jTextField1.getText().equalsIgnoreCase("-")){
                    if(jRadioButton2.isSelected()){
                        
                        jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select description,units,null as balance,null as saleable, null as damaged, null as expired from st_stock_item WHERE department ilike '"+jComboBox1.getSelectedItem().toString()+"%' AND sub_cat_code ILIKE '"+jComboBox11.getSelectedItem().toString()+"%' AND description = '"+listofAct[i]+"' order by description"));
                        j++;
                    }else{
                        jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select product,units,null as balance,null as saleable, null as damaged, null as expired from st_stock_prices WHERE department ilike '"+jComboBox1.getSelectedItem().toString()+"%' AND category ILIKE '"+jComboBox11.getSelectedItem().toString()+"%'  AND product = '"+listofAct[i]+"' order by product"));
                    }
                }else{
                    if(jRadioButton2.isSelected()){
                        jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select description,units,null as balance,null as saleable, null as damaged, null as expired from st_stock_item WHERE (description ilike '"+jTextField1.getText()+"%' OR description ilike '"+jTextField2.getText()+"%') AND department ilike '"+jComboBox1.getSelectedItem().toString()+"%' AND sub_cat_code ILIKE '"+jComboBox11.getSelectedItem().toString()+"%'  AND description = '"+listofAct[i]+"' order by description"));
                    }else{
                        jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select product,units,null as balance,null as saleable, null as damaged, null as expired from st_stock_prices WHERE (product ilike '"+jTextField1.getText()+"%' OR product ilike '"+jTextField2.getText()+"%') AND department ilike '"+jComboBox1.getSelectedItem().toString()+"%' AND category ILIKE '"+jComboBox11.getSelectedItem().toString()+"%'  AND description = '"+listofAct[i]+"' order by product"));
                        
                    }
                }*/
              /*  try{
                    java.sql.Statement stmt1 = connectDB.createStatement();
                    java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT sum(receiving-issuing) FROM stock_movement_summary  WHERE store_name ilike '"+jComboBox1.getSelectedItem().toString()+"' AND item ilike '"+listofAct[i]+"'");
                    while (rSet1.next()) {
                        jTable1.setValueAt(rSet1.getObject(1), j, 2);
                        j++;
                    }
               
                }catch (java.sql.SQLException sqlExec) {
               
                    javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());
                }
               */
          //  }
        //}
        // Add your handling code here:
    }//GEN-LAST:event_jComboBox11ActionPerformed
    public java.lang.Object[] getListofActivities() {
        
        java.lang.Object[] listofActivities = null;
        
        java.util.Vector listActVector = new java.util.Vector(1,1);
        
        
        try {
            
            //    java.sql.Connection connDB = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako","postgres","pilsiner");
            
            java.sql.Statement stmt1 = connectDB.createStatement();
            if(jRadioButton1.isSelected()){
                java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT product FROM st_stock_prices  WHERE department ilike '"+jComboBox1.getSelectedItem().toString()+"' order by product");
                while (rSet1.next()) {
                    
                    listActVector.addElement(rSet1.getObject(1).toString());
                    //}
                }
                System.out.println("description"+rSet1.getObject(1).toString());
            }else{
                java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT description FROM st_stock_item  WHERE department ilike '"+jComboBox1.getSelectedItem().toString()+"' order by description");
                while (rSet1.next()) {
                    
                    listActVector.addElement(rSet1.getObject(1).toString());
                    //}
                }
                System.out.println("description"+rSet1.getObject(1).toString());
            }
            //java.sql.ResultSet rSet1 = pSet1.executeQuery()
            
        }catch (java.sql.SQLException sqlExec) {
            
            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());
            
        }
        
        listofActivities = listActVector.toArray();
        System.out.println("Done list of activities ...");
        return listofActivities;
    }
    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        getList = true;
        
        getListThread = new java.lang.Thread(this, "get_list_Thread");
        
        getListThread.start();
        
        
        
// Add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed
  
   public void run() {
        
        while(getList) {
            
            runGetListThread();
            
            try {
                
                Thread.currentThread().sleep(100);
                
            } catch(java.lang.InterruptedException IntExec){
                
                javax.swing.JOptionPane.showMessageDialog(this, IntExec.getMessage(), "Interruption Error!", javax.swing.JOptionPane.ERROR_MESSAGE);
                
            }
            
            getList = false;
            
        }
        
        while(getList1) {
            
            runGetListThread1();
            
            try {
                
                Thread.currentThread().sleep(100);
                
            } catch(java.lang.InterruptedException IntExec){
                
                javax.swing.JOptionPane.showMessageDialog(this, IntExec.getMessage(), "Interruption Error!", javax.swing.JOptionPane.ERROR_MESSAGE);
                
            }
            
            getList1 = false;
            
        }
        
    }
    
    public void runGetListThread() {
        if (jCheckBox1.isSelected()){
            for (int k = 0; k < jTable1.getRowCount(); k++ ) {
                for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                    jTable1.getModel().setValueAt(null,k,r);
                }
            }
            // int i = 0;
            if(jTextField1.getText().equalsIgnoreCase("-")){
                if(jRadioButton2.isSelected()){
                    jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select distinct description,units,null as balance,null as saleable, null as damaged, null as expired from st_stock_item WHERE department ilike '"+jComboBox1.getSelectedItem().toString()+"' order by description"));
                }else{
                    
                    jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select distinct product,units,null as balance,null as saleable, null as damaged, null as expired from st_stock_prices WHERE department ilike '"+jComboBox1.getSelectedItem().toString()+"' order by product"));
                    
                }
            }else{
                if(jRadioButton2.isSelected()){
                    jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select distinct description,units,null as balance,null as saleable, null as damaged, null as expired from st_stock_item WHERE (description ILIKE '"+jTextField1.getText()+"%' OR description ILIKE '"+jTextField2.getText()+"%') AND department ilike '"+jComboBox1.getSelectedItem().toString()+"' order by description"));
                }else{
                    jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select distinct product,units,null as balance,null as saleable, null as damaged, null as expired from st_stock_prices WHERE (product ILIKE '"+jTextField1.getText()+"%' OR product ILIKE '"+jTextField2.getText()+"%') AND department ilike '"+jComboBox1.getSelectedItem().toString()+"' order by product"));
                    
                }
            }
            
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, true
            };
            
            
            
            jTable1.setShowHorizontalLines(true);
            
            
            javax.swing.table.TableColumn column = null;
            for (int i = 0; i < 6; i++) {
                column = jTable1.getColumnModel().getColumn(i);
                if (i == 0) {
                    
                    column.setPreferredWidth(300); //sport column is bigger
                } else {
                    if (i == 1) {
                        column.setPreferredWidth(100);
                    } else {
                        //if (i == 2) {
                        column.setPreferredWidth(100);
                        // }  else
                        //column.setPreferredWidth(50);
                        
                    }
                }
            }
            try{
                
                for (int i = 0; i < jTable1.getRowCount(); i++){
                    Object qty = 0.00;
                    //  float qty = 0;
                    java.sql.Statement stmt1 = connectDB.createStatement();
                    java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT sum(qty) FROM stock_balance_qty  WHERE department ilike '"+jComboBox1.getSelectedItem().toString()+"' AND description ilike '"+jTable1.getValueAt(i, 0)+"' AND dates <= '"+datePicker1.getDate()+"'");
                    while (rSet1.next()) {
                        // qty = rSet1.getObject(1);
                        qty = dbObject.getDBObject(rSet1.getObject(1), "0");
                        if(qty.equals("-")){
                            jTable1.setValueAt(0.00, i, 2);
                        }else{
                            jTable1.setValueAt(qty, i, 2);
                        }
                    }
                }
                
            }catch (java.sql.SQLException sqlExec) {
                
                javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());
            }
        }
    }
    
    public void runGetListThread1() {
        // if (jCheckBox1.isSelected()){
        for (int k = 0; k < jTable1.getRowCount(); k++ ) {
            for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                jTable1.getModel().setValueAt(null,k,r);
            }
        }
        if(jTextField1.getText().equalsIgnoreCase("-")){
            if(jRadioButton2.isSelected()){
                jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select distinct description,units,null as balance,null as saleable, null as damaged, null as expired,'now'::date as Exp_date,buying_price,item_code,strength from stockitem WHERE department ilike '"+jComboBox1.getSelectedItem().toString()+"'  AND sub_cat_code ilike '"+jComboBox11.getSelectedItem()+"' order by description"));
            }else{
                
                jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select distinct product,units,null as balance,null as saleable, null as damaged, null as expired,'now'::date as Exp_date,transfer_price as buying_price,product_id,strength from stockprices WHERE department ilike '"+jComboBox1.getSelectedItem().toString()+"' AND category ilike '"+jComboBox11.getSelectedItem()+"' order by product"));
                
            }
        }else{
            if(jRadioButton2.isSelected()){
                jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select distinct description,units,null as balance,null as saleable, null as damaged, null as expired,'now'::date as Exp_date,buying_price,item_code from stockitem WHERE (description ILIKE '"+jTextField1.getText()+"%' OR description ILIKE '"+jTextField2.getText()+"%') AND department ilike '"+jComboBox1.getSelectedItem().toString()+"'  AND sub_cat_code ilike '"+jComboBox11.getSelectedItem()+"'  order by description"));
            }else{
                jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select distinct product,units,null as balance,null as saleable, null as damaged, null as expired,'now'::date as Exp_date,transfer_price as buying_price,product_id,strength from stockprices WHERE (product ILIKE '"+jTextField1.getText()+"%' OR product ILIKE '"+jTextField2.getText()+"%') AND department ilike '"+jComboBox1.getSelectedItem().toString()+"' AND category ilike '"+jComboBox11.getSelectedItem()+"' order by product"));
                
            }
        }
        
        Class[] types = new Class [] {
            java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
        };
        boolean[] canEdit = new boolean [] {
            false, false, false, true, true, true
        };
        
        
        
        jTable1.setShowHorizontalLines(true);
        
        
        javax.swing.table.TableColumn column = null;
        for (int i = 0; i < 6; i++) {
            column = jTable1.getColumnModel().getColumn(i);
            if (i == 0) {
                
                column.setPreferredWidth(300); //sport column is bigger
            } else {
                if (i == 1) {
                    column.setPreferredWidth(100);
                } else {
                    //if (i == 2) {
                    column.setPreferredWidth(100);
                    // }  else
                    //column.setPreferredWidth(50);
                    
                }
            }
        }
        try{
            
            for (int i = 0; i < jTable1.getRowCount(); i++){
                Object qty = 0.00;
                //  float qty = 0;
                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT sum(qty) FROM stock_balance_qty  WHERE department ilike '"+jComboBox1.getSelectedItem().toString()+"' AND description ilike '"+jTable1.getValueAt(i, 0)+"' AND dates <= '"+datePicker1.getDate()+"'");
                while (rSet1.next()) {
                    // qty = rSet1.getObject(1);
                    qty = dbObject.getDBObject(rSet1.getObject(1), "0.00");
                    if(qty.equals("-")){
                        jTable1.setValueAt(0.00, i, 2);
                    }else{
                        jTable1.setValueAt(qty, i, 2);
                    }
                }
            }
            
        }catch (java.sql.SQLException sqlExec) {
            
            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());
        }
        // }
    }
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        this.jSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed
    
    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        // Object qty = 0.00;
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),0),jTable1.getSelectedRow(), 0);
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),1),jTable1.getSelectedRow(), 1);
        /* jTable1.setValueAt(0,jTable1.getSelectedRow(), 2);
        jTable1.setValueAt(0,jTable1.getSelectedRow(), 3);
         jTable1.setValueAt(0,jTable1.getSelectedRow(), 4);
        jTable1.setValueAt(0,jTable1.getSelectedRow(), 5);
         jTable1.setValueAt(0,jTable1.getSelectedRow(), 6);*/
         jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),2),jTable1.getSelectedRow(), 7);
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),3),jTable1.getSelectedRow(), 8);
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),4),jTable1.getSelectedRow(), 9);
      jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),5),jTable1.getSelectedRow(), 6);
     
        this.jSearchDialog.dispose();
        
        try{
           /* int j=0;
               java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT  count(description) FROM stock_balance_qty  WHERE department ilike '"+jComboBox1.getSelectedItem().toString()+"' AND description ilike '"+jTable1.getValueAt(jTable1.getSelectedRow(), 0)+"' AND dates <= '"+datePicker1.getDate()+"'");
       
            if(j<0){
                qty=0.00;
            }else{*/
            //for (int i = 0; i < jTable1.getRowCount(); i++){
         
            //  float qty = 0;
            java.sql.Statement stmt12 = connectDB.createStatement();
            java.sql.ResultSet rSet12 = stmt12.executeQuery("SELECT  sum(qty) FROM stock_balance_qty  WHERE department ilike '"+jComboBox1.getSelectedItem().toString()+"' AND description ilike '"+jTable1.getValueAt(jTable1.getSelectedRow(), 0)+"' AND dates <= '"+datePicker1.getDate()+"'");
            while (rSet12.next()) {
                 Object qty = 0.00;
                // qty = rSet1.getObject(1);
                qty = dbObject.getDBObject(rSet12.getObject(1), "0.00");
                if(qty.equals("-")){
                    jTable1.setValueAt(0.00, jTable1.getSelectedRow(), 2);
                }else{
                    jTable1.setValueAt(qty, jTable1.getSelectedRow(), 2);
                }
                // }
            }
        //}
        }catch (java.sql.SQLException sqlExec) {
            
            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());
        }
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked
    
    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate
//if(jRadioButton2.isSelected()){
        if(jTextField111.getCaretPosition() > 0){
            jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select description,units,buying_price,item_code,strength, 'now'::date as date FROM st_stock_item WHERE description ILIKE '%"+jTextField111.getText()+"%' ORDER BY description"));
            
            jSearchScrollPane.setViewportView(jSearchTable);
            System.out.println("Cannot sort out");
            
        }
/*}else
    if(jRadioButton1.isSelected()){
       if(jTextField111.getCaretPosition() > 0){
          //  jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select product,units,transfer_price,product_id,'Shelf spot check' as remarks  FROM st_stock_prices WHERE product ILIKE '%"+jTextField111.getText()+"%' and department ilike '"+jComboBox1.getSelectedItem().toString()+"'ORDER BY product"));
                  jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select product,units,transfer_price,product_id, strength  FROM st_stock_prices WHERE product ILIKE '%"+jTextField111.getText()+"%' and SUB_CODE = '"+jTextField3.getText()+"'ORDER BY product"));
     
            jSearchScrollPane.setViewportView(jSearchTable);
            System.out.println("Cannot sort out");
            
        } 
}*/
// Add your handling code here:
    }//GEN-LAST:event_jTextField111CaretUpdate
    
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (jTable1.getSelectedColumn() == 0) {
            
            this.cmbox1MouseClicked();
        }         // Add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked
    private void cmbox1MouseClicked() {
        
        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane1.getLocationOnScreen();
        jSearchDialog.setSize(400,200);
        jSearchDialog.setLocation(point);
        jSearchDialog.setVisible(true);
    }
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed
    
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        
        int rows2Delete = jTable1.getSelectedRowCount();
        
        int[] selectedRows = jTable1.getSelectedRows();
        
        if (rows2Delete < 1) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            
            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");
            
        } else {
            
            if (rows2Delete > 1) {
                
                for (int i = 0; i < selectedRows.length; i++) {
                    
                    
                    
                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable1.getModel();
                    
                    defTableModel.removeRow(selectedRows[i]);
                    
                }
                
                
                
            } else {
                
                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable1.getModel();
                
                defTableModel.removeRow(jTable1.getSelectedRow());
                
                
            }
        }        // Add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed
    
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
          try {
                java.sql.Statement pstmt = connectDB.createStatement();
                //  java.sql.ResultSet rs = pstmt.executeQuery("select stock_code from pb_departments  where department_name ilike '"+jComboBox2.getSelectedItem().toString()+"%'");
           
                java.sql.ResultSet rs = pstmt.executeQuery("select SUB_code from st_stores where store_name ilike '"+jComboBox1.getSelectedItem().toString()+"%'");
                while (rs.next()){
                    
                    this.jTextField3.setText(rs.getObject(1).toString());
                }
            } catch(java.sql.SQLException sqlex){
                System.out.println(sqlex.getMessage());
            }
        jButton1.setEnabled(true);
    /*    crset1.setCommand("select distinct item_description FROM receive_requisation WHERE cost_center = '"+jComboBox1.getSelectedItem()+"' AND issiued = false");
         crset1.setConnectionSource(pConnDB);
     
    cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset1, "item_description", null, null, null));
    javax.swing.table.TableColumn s = this.jTable1.getColumn("Item description");
    s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
                cmbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxActionPerformed(evt);
            }
        });
     
     */
        // Add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        for (int k = 0; k < jTable1.getRowCount(); k++ ) {
            for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                jTable1.getModel().setValueAt(null,k,r);
            }
        }
        
        this.jComboBox1.setSelectedItem(null);
        //  jComboBox11.setSelectedItem(null); // Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        java.util.Date periodFrom = null;
        java.util.Date periodTo = null;
        
        try {
            
            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open'");
            while (rsetf.next()){
                periodFrom = rsetf.getDate(1);
                periodTo = rsetf.getDate(2);
            }
            
        }   catch(java.sql.SQLException sq){
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());
            
        }
        
        if(datePicker1.getDate().before(periodFrom) || datePicker1.getDate().after(periodTo)){
            javax.swing.JOptionPane.showMessageDialog(this,"You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(),"Caution Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);
            
        }else{
              if(jComboBox1.getSelectedItem().toString().equalsIgnoreCase("-") | jComboBox1.getSelectedItem().toString().equalsIgnoreCase("")){
            javax.swing.JOptionPane.showMessageDialog(this,"You must select Store name", "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            //CHECK WHETHER ENTRY POINT IS SLECTED
            
        }else{
            if(jTable1.isEditing()){
                jTable1.getCellEditor().stopCellEditing();
            }
            java.util.Calendar calendar = java.util.Calendar.getInstance();
            
            long dateNow = calendar.getTimeInMillis();
            
            java.sql.Date datenowSql= new java.sql.Date(dateNow);
            String user = null;
           // try{
                try {
                    
                    connectDB.setAutoCommit(false);
                    java.sql.Statement pst2 = connectDB.createStatement();
                    java.sql.ResultSet rs = pst2.executeQuery("select current_user");
                    while (rs.next()){
                        user = rs.getObject(1).toString();
                    }
                    for (int i = 0; i< jTable1.getRowCount(); i++) {
                        
                        if (jTable1.getModel().getValueAt(i,3) == null || jTable1.getModel().getValueAt(i,3).toString().equalsIgnoreCase("")){
                            //java.sql.PreparedStatement pstmt = connectDB.prepareStatement("update st_stock_item set quantity_instock = quantity_instock + '"+jTable1.getValueAt(i,2).toString()+"' where department = '"+jComboBox1.getSelectedItem().toString()+"' and description = '"+jTable1.getValueAt(i,0).toString()+"'");
                            
                        } else {
                            double actual = 0.00;
                            double comp = 0.00;
                            double total = 0.00;
                            double price = 0.00;
                            String units = null;
                            double balance = Double.parseDouble(jTable1.getModel().getValueAt(i, 2).toString());
                            double quantity = Double.parseDouble(jTable1.getModel().getValueAt(i, 3).toString());
                            double expired = Double.parseDouble(jTable1.getModel().getValueAt(i, 4).toString());
                            double damaged = Double.parseDouble(jTable1.getModel().getValueAt(i, 5).toString());
                            
                            actual = quantity + expired + damaged;
                            if(jRadioButton1.isSelected()){
                                java.sql.Statement pstmt6 = connectDB.createStatement();
                                java.sql.ResultSet rs6 = pstmt6.executeQuery("select product_id,balance,transfer_price from st_stock_prices where product ilike '"+jTable1.getValueAt(i,0)+"' and department ilike '"+jComboBox1.getSelectedItem().toString()+"'");
                                while (rs6.next()){
                                    units = dbObject.getDBObject(rs6.getObject(1), "-");//;rs6.getObject(1).toString();
                                    comp = rs6.getDouble(2);
                                    price = rs6.getDouble(3);
                                }
                            }else{
                                java.sql.Statement pstmt6 = connectDB.createStatement();
                                java.sql.ResultSet rs6 = pstmt6.executeQuery("select item_code,quantity_instock,buying_price from st_stock_item where description ilike '"+jTable1.getValueAt(i,0)+"'");
                                while (rs6.next()){
                                    units = dbObject.getDBObject(rs6.getObject(1), "-");//rs6.getObject(1).toString();
                                    comp = rs6.getDouble(2);
                                    price = rs6.getDouble(3);
                                    
                                }
                            }
                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_stock_count values(?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?)");
                            pstmt.setObject(1,units);
                            pstmt.setObject(2,jTable1.getValueAt(i,0));
                            pstmt.setDouble(3,balance);
                            pstmt.setString(8,jComboBox1.getSelectedItem().toString());
                        /*if(balance > quantity){
                            pstmt.setDouble(4,-1*(java.lang.Double.valueOf(jTable1.getValueAt(i,3).toString())));
                            pstmt.setDouble(5,-1*(java.lang.Double.valueOf(jTable1.getValueAt(i,4).toString())));
                            pstmt.setDouble(6,-1*(java.lang.Double.valueOf(jTable1.getValueAt(i,5).toString())));
                        }else{
                            if(balance < quantity){*/
                            pstmt.setDouble(4,(java.lang.Double.valueOf(jTable1.getValueAt(i,3).toString())));
                            pstmt.setDouble(5,(java.lang.Double.valueOf(jTable1.getValueAt(i,4).toString())));
                            pstmt.setDouble(6,(java.lang.Double.valueOf(jTable1.getValueAt(i,5).toString())));
                            //}
                            //}
                            
                            if(balance < 0){
                                pstmt.setDouble(7,(quantity+expired+damaged+balance));
                            }else{
                                pstmt.setDouble(7,(quantity+expired+damaged-balance));
                            }
                            pstmt.setString(9,user);
                            pstmt.setDouble(10,0.00);
                            pstmt.setTime(11,new java.sql.Time(java.util.Calendar.getInstance().getTimeInMillis()));
                            pstmt.setTime(12,new java.sql.Time(java.util.Calendar.getInstance().getTimeInMillis()));
                            pstmt.setDouble(13,quantity*price);
                            pstmt.setDouble(14,price);
                            pstmt.setObject(15,jTable1.getValueAt(i,1));
                            pstmt.setDate(16,com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                              pstmt.setString(17,"Stock count Adj");
                            pstmt.executeUpdate();
                            
                            java.sql.PreparedStatement pstmt11 = connectDB.prepareStatement("insert into st_sub_stores values(?,?,?,? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?)");
                            pstmt11.setString(1,jComboBox1.getSelectedItem().toString());
                            pstmt11.setObject(2,jTable1.getValueAt(i,0));
                            if(balance > quantity){
                                // pstmt11.setDouble(4,java.lang.Double.valueOf(jTable1.getValueAt(i,2).toString()));
                                pstmt11.setDouble(4,balance-quantity);
                                pstmt11.setDouble(3,0.00);
                            }else{
                                if(quantity > balance){
                                    if(balance >= 0){
                                        pstmt11.setDouble(3,quantity-balance);
                                        pstmt11.setDouble(4,0.00);
                                    }else{
                                        if(balance < 0){
                                            pstmt11.setDouble(3,quantity+(balance*-1));
                                            pstmt11.setDouble(4,0.00);
                                        }
                                    }
                                }else{
                                    if(balance == quantity){
                                        pstmt11.setDouble(3,0.00);
                                        pstmt11.setDouble(4,0.00);
                                    }
                                }
                            }
                            //pstmt11.setDouble(3,0.00);
                            pstmt11.setDouble(5,price);
                            pstmt11.setDouble(6,quantity*price);
                            pstmt11.setDouble(7,0.00);
                            pstmt11.setObject(8,"Stock Count Adjustment");
                            pstmt11.setObject(9,null);
                            pstmt11.setDate(10,com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                            pstmt11.setString(11,user);
                            pstmt11.setObject(12,jTable1.getValueAt(i,1));
                            pstmt11.setString(13,jComboBox1.getSelectedItem().toString());
                            pstmt11.setObject(14,"Stock Count Adjustment");
                             pstmt11.setDouble(15,java.lang.Double.valueOf(jTable1.getValueAt(i,7).toString()));
                        pstmt11.setObject(16,jTable1.getValueAt(i,8));
                       // pstmt11.setString(17,"-");
                      //  pstmt11.setString(18,jTable1.getValueAt(i,6).toString());
                          pstmt11.setString(17,jTable1.getValueAt(i,9).toString());
                            pstmt11.executeUpdate();
                            
                            //  java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("UPDATE st_stock_prices set balance = balance + "+new java.lang.Double(quantity)+" where department = '"+jComboBox1.getSelectedItem().toString()+"' and product = '"+jTable1.getValueAt(i,0).toString()+"'");
                            //  pstmt31.executeUpdate();
                            
                        }
                    }
                    
                    connectDB.commit();
                    connectDB.setAutoCommit(true);
                     this.jButton1.setEnabled(false);
                     
                    jLabel12.setForeground(java.awt.Color.blue);
                    javax.swing.JOptionPane.showMessageDialog(this, "Data saved successfuly","Information message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                    
                    
                   
                    jTextField1.setText("-");
                    jTextField2.setText("-");
                    // javax.swing.JOptionPane.showMessageDialog(this, "Enter quantity issued","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                    for (int k = 0; k < jTable1.getRowCount(); k++ ) {
                        for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                            jTable1.getModel().setValueAt(null,k,r);
                        }
                    }
                    
                    this.jComboBox1.setSelectedItem(null);
                }   catch(java.sql.SQLException sq){
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                    
                    try {
                        connectDB.rollback();
                    }catch (java.sql.SQLException sql){
                        javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                }
                
            /*} catch(java.lang.Exception ex) {
                System.out.println(ex.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                
                
            }*/
        }
    }
        // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
    
    
    
    
      /* private void cmbox2ActionPerformed(java.awt.event.ActionEvent evt){
      int i = jTable1.getSelectedRow();
       
 }
       */
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox11;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
    
}
