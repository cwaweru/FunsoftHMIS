/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */
package com.afrisoftech.hospinventory;

import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author root
 */
public class DispenseBillingIntfr extends javax.swing.JInternalFrame implements java.lang.Runnable {

    Vector Times, Dates, Amounts, Quantity, Copay_ment, Codes, CodeDesc, CodeType, EncType, Diagnosis, DiagCode, XmlWriter, Standards;
    /**
     * Creates new form loanpymntintfr
     */
    private final javax.swing.JTextField comboTextField = new javax.swing.JTextField();
    javax.swing.ComboBoxModel mainComboBoxModel;
    javax.swing.ComboBoxModel oldComboBox1311Model;
    private javax.swing.JComboBox cmbox;
    private javax.swing.JComboBox cmbox2;
    private javax.swing.JComboBox cmbox1;
    java.sql.Connection connectDB = null;
    private boolean refreshStatus;
    private DispenseBillingIntfr.SearchThread searchThread = null;
    private DispenseBillingIntfr.SearchServicesThread searchServicesThread = null;
    private UpdatePatientList updatePatientList;
    com.afrisoftech.lib.DBObject dbObject;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    java.lang.Thread getListThread;
    boolean getList;

    public DispenseBillingIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        refreshStatus = true;

        connectDB = connDb;

        pConnDB = pconnDB;

        dbObject = new com.afrisoftech.lib.DBObject();

        searchThread = new DispenseBillingIntfr.SearchThread();
        getListThread = new java.lang.Thread(this, "Update_discharge");

        initComponents();

        getList = true;

        getListThread.start();
    }
    String glAcc2 = null;
    String Stock = null;
    String actCode = null;
    String accountCode = null;
    String userName = null;
    String transNo1 = null;
    String glType = null;
    String glCode = null;
    String units = null;
    String chbox = null;
    double price = 0.00;
    double qty = 0.00;
    double amount = 0.00;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField11 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton9 = new javax.swing.JButton();
        jSearchDialog1 = new javax.swing.JDialog();
        jSearchPanel1 = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane1 = new javax.swing.JScrollPane();
        jSearchTable1 = new com.afrisoftech.dbadmin.JTable();
        jButton91 = new javax.swing.JButton();
        jSearchDialog2 = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        jTextField113 = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        jSearchTable2 = new com.afrisoftech.dbadmin.JTable();
        jButton52 = new javax.swing.JButton();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jSearchDialog211 = new javax.swing.JDialog();
        jSearchPanel211 = new javax.swing.JPanel();
        jTextField11311 = new javax.swing.JTextField();
        jSearchScrollPane211 = new javax.swing.JScrollPane();
        jSearchTable211 = new com.afrisoftech.dbadmin.JTable();
        jButton4211 = new javax.swing.JButton();
        jButton5211 = new javax.swing.JButton();
        jSearchDialog212 = new javax.swing.JDialog();
        jSearchPanel212 = new javax.swing.JPanel();
        jTextField11312 = new javax.swing.JTextField();
        jSearchScrollPane212 = new javax.swing.JScrollPane();
        jSearchTable212 = new com.afrisoftech.dbadmin.JTable();
        jButton4212 = new javax.swing.JButton();
        jButton5212 = new javax.swing.JButton();
        jSearchDialog2121 = new javax.swing.JDialog();
        jSearchPanel2121 = new javax.swing.JPanel();
        jTextField113121 = new javax.swing.JTextField();
        jSearchScrollPane2121 = new javax.swing.JScrollPane();
        jSearchTable2121 = new com.afrisoftech.dbadmin.JTable();
        jButton42121 = new javax.swing.JButton();
        jButton52121 = new javax.swing.JButton();
        jSearchDialog3 = new javax.swing.JDialog();
        jSearchPanel3 = new javax.swing.JPanel();
        jTextField114 = new javax.swing.JTextField();
        jSearchScrollPane3 = new javax.swing.JScrollPane();
        jSearchTable3 = new com.afrisoftech.dbadmin.JTable();
        jButton92 = new javax.swing.JButton();
        buttonGroup21 = new javax.swing.ButtonGroup();
        jSearchDialog4 = new javax.swing.JDialog();
        jSearchPanel213 = new javax.swing.JPanel();
        jTextField115 = new javax.swing.JTextField();
        jSearchScrollPane4 = new javax.swing.JScrollPane();
        jSearchTable4 = new com.afrisoftech.dbadmin.JTable();
        jButton93 = new javax.swing.JButton();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jSearchDialog11 = new javax.swing.JDialog();
        jSearchPanel11 = new javax.swing.JPanel();
        jTextField1111 = new javax.swing.JTextField();
        jSearchScrollPane11 = new javax.swing.JScrollPane();
        jSearchTable11 = new com.afrisoftech.dbadmin.JTable();
        jButton511 = new javax.swing.JButton();
        prescriptionsTabbedPane = new javax.swing.JTabbedPane();
        jPanel22 = new javax.swing.JPanel();
        jPanel211 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        doctorPrescriptionListingTable = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class,java.lang.Object.class,java.lang.Object.class,java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false,false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };

        jButton33 = new javax.swing.JButton();
        jButton43 = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        prescriptionsTable = new com.afrisoftech.dbadmin.JTableEdit();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        paymentModeTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jTextField9 = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel61 = new javax.swing.JPanel();
        jTextField36 = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jTextField12 = new javax.swing.JTextField();
        jLabel131 = new javax.swing.JLabel();
        jTextField141 = new javax.swing.JTextField();
        jLabel141 = new javax.swing.JLabel();
        jTextField151 = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jButton6 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel53 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        try {
            java.sql.Statement pstmt2 = connectDB.createStatement();
            java.sql.ResultSet rs2 = pstmt2.executeQuery("select rate from pb_operating_parameters where category = 'PF'");

            while (rs2.next()){
                jTextField8.setText(rs2.getObject(1).toString());
                // jTextField2.setText(rs.getObject(2).toString());

            }
        } catch(java.sql.SQLException sqlex){
            System.out.println(sqlex.getMessage());
        }
        this.setVisible(false);
        jButton21 = new javax.swing.JButton();
        this.setVisible(false);
        jButton211 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jTextField15 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        this.setVisible(false);
        jButton2 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jPanel11.setVisible(false);
        jScrollPane21 = new javax.swing.JScrollPane();
        jTable11 = new com.afrisoftech.dbadmin.JTable();
        jPanel21 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jTextField21 = new javax.swing.JTextField();
        jTextField41 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jPanel411 = new javax.swing.JPanel();
        jTextField911 = new javax.swing.JTextField();
        searchButton11 = new javax.swing.JButton();
        jTextField71 = new javax.swing.JTextField();
        jLabel52 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel531 = new javax.swing.JLabel();
        jTextField31 = new javax.swing.JTextField();
        jSeparator11 = new javax.swing.JSeparator();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton11 = new javax.swing.JButton();
        jButton61 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        jButton51 = new javax.swing.JButton();
        jLabel81 = new javax.swing.JLabel();
        jTextField81 = new javax.swing.JTextField();
        try {
            java.sql.Statement pstmt1 = connectDB.createStatement();
            java.sql.ResultSet rs1 = pstmt1.executeQuery("select rate from pb_operating_parameters where category = 'PF'");

            while (rs1.next()){
                jTextField81.setText(rs1.getObject(1).toString());
                // jTextField2.setText(rs.getObject(2).toString());

            }
        } catch(java.sql.SQLException sqlex){
            System.out.println(sqlex.getMessage());
        }
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton111 = new javax.swing.JButton();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton112 = new javax.swing.JButton();
        jTextField14 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jPanel13.setVisible(false);
        jScrollPane22 = new javax.swing.JScrollPane();
        jTable13 = new com.afrisoftech.dbadmin.JTable();
        jPanel23 = new javax.swing.JPanel();
        jLabel91 = new javax.swing.JLabel();
        jComboBox1311 = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jTextField22 = new javax.swing.JTextField();
        jTextField42 = new javax.swing.JTextField();

        jLabel41 = new javax.swing.JLabel();
        jTextField52 = new javax.swing.JTextField();
        jLabel61 = new javax.swing.JLabel();
        jPanel42 = new javax.swing.JPanel();
        jTextField92 = new javax.swing.JTextField();
        searchButton2 = new javax.swing.JButton();
        jPanel62 = new javax.swing.JPanel();
        jTextField361 = new javax.swing.JTextField();
        searchButton3 = new javax.swing.JButton();
        jSeparator12 = new javax.swing.JSeparator();
        jLabel532 = new javax.swing.JLabel();
        jTextField32 = new javax.swing.JTextField();
        jLabel82 = new javax.swing.JLabel();
        jTextField82 = new javax.swing.JTextField();
        try {
            java.sql.Statement pstmt = connectDB.createStatement();
            java.sql.ResultSet rs = pstmt.executeQuery("select rate from pb_operating_parameters where category = 'PF'");

            while (rs.next()){
                jTextField82.setText(rs.getObject(1).toString());
                // jTextField2.setText(rs.getObject(2).toString());

            }
        } catch(java.sql.SQLException sqlex){
            System.out.println(sqlex.getMessage());
        }
        jTextField10 = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton12 = new javax.swing.JButton();
        jButton63 = new javax.swing.JButton();
        jButton32 = new javax.swing.JButton();
        jButton41 = new javax.swing.JButton();
        jButton54 = new javax.swing.JButton();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton121 = new javax.swing.JButton();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton122 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jCheckBox31 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jPanel8 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        jLabel14 = new javax.swing.JLabel();
        jPanel413 = new javax.swing.JPanel();
        jTextField93 = new javax.swing.JTextField();
        searchButton4 = new javax.swing.JButton();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jPanel221 = new javax.swing.JPanel();
        jPanel2111 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        prescriptionBillingTable = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class,java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false,false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };

        jButton331 = new javax.swing.JButton();
        jButton431 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jCheckBox7 = new javax.swing.JCheckBox();
        jLabel92 = new javax.swing.JLabel();
        jPanel41 = new javax.swing.JPanel();
        jTextField91 = new javax.swing.JTextField();
        searchButton31 = new javax.swing.JButton();
        jLabel121 = new javax.swing.JLabel();
        jTextField121 = new javax.swing.JTextField();

        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jTextField11.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField11CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(jTextField11, gridBagConstraints);

        jSearchTable.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton9.setText("Dispose");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        jSearchDialog1.setModal(true);
        jSearchDialog1.setUndecorated(true);
        jSearchDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel1.setLayout(new java.awt.GridBagLayout());

        jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel1.add(jTextField111, gridBagConstraints);

        jSearchTable1.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable1MouseClicked(evt);
            }
        });
        jSearchScrollPane1.setViewportView(jSearchTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel1.add(jSearchScrollPane1, gridBagConstraints);

        jButton91.setText("Dispose");
        jButton91.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton91ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel1.add(jButton91, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog1.getContentPane().add(jSearchPanel1, gridBagConstraints);

        jSearchDialog2.setModal(true);
        jSearchDialog2.setUndecorated(true);
        jSearchDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        jTextField113.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField113CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel2.add(jTextField113, gridBagConstraints);

        jSearchTable2.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable2.setShowHorizontalLines(false);
        jSearchTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable2MouseClicked(evt);
            }
        });
        jSearchScrollPane2.setViewportView(jSearchTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

        jButton52.setText("Dispose");
        jButton52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton52, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog2.getContentPane().add(jSearchPanel2, gridBagConstraints);

        jSearchDialog211.setModal(true);
        jSearchDialog211.setUndecorated(true);
        jSearchDialog211.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel211.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel211.setLayout(new java.awt.GridBagLayout());

        jTextField11311.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField11311CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel211.add(jTextField11311, gridBagConstraints);

        jSearchTable211.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable211.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable211.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable211MouseClicked(evt);
            }
        });
        jSearchScrollPane211.setViewportView(jSearchTable211);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel211.add(jSearchScrollPane211, gridBagConstraints);

        jButton4211.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel211.add(jButton4211, gridBagConstraints);

        jButton5211.setText("Dispose");
        jButton5211.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5211ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel211.add(jButton5211, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog211.getContentPane().add(jSearchPanel211, gridBagConstraints);

        jSearchDialog212.setModal(true);
        jSearchDialog212.setUndecorated(true);
        jSearchDialog212.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel212.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel212.setLayout(new java.awt.GridBagLayout());

        jTextField11312.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField11312CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel212.add(jTextField11312, gridBagConstraints);

        jSearchTable212.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable212.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable212.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable212MouseClicked(evt);
            }
        });
        jSearchScrollPane212.setViewportView(jSearchTable212);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel212.add(jSearchScrollPane212, gridBagConstraints);

        jButton4212.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel212.add(jButton4212, gridBagConstraints);

        jButton5212.setText("Close");
        jButton5212.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5212ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel212.add(jButton5212, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog212.getContentPane().add(jSearchPanel212, gridBagConstraints);

        jSearchDialog2121.setModal(true);
        jSearchDialog2121.setUndecorated(true);
        jSearchDialog2121.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2121.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2121.setLayout(new java.awt.GridBagLayout());

        jTextField113121.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField113121CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel2121.add(jTextField113121, gridBagConstraints);

        jSearchTable2121.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable2121.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable2121.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable2121MouseClicked(evt);
            }
        });
        jSearchScrollPane2121.setViewportView(jSearchTable2121);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2121.add(jSearchScrollPane2121, gridBagConstraints);

        jButton42121.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2121.add(jButton42121, gridBagConstraints);

        jButton52121.setText("Close");
        jButton52121.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52121ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2121.add(jButton52121, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog2121.getContentPane().add(jSearchPanel2121, gridBagConstraints);

        jSearchDialog3.setModal(true);
        jSearchDialog3.setUndecorated(true);
        jSearchDialog3.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel3.setLayout(new java.awt.GridBagLayout());

        jTextField114.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField114CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel3.add(jTextField114, gridBagConstraints);

        jSearchTable3.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable3MouseClicked(evt);
            }
        });
        jSearchScrollPane3.setViewportView(jSearchTable3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel3.add(jSearchScrollPane3, gridBagConstraints);

        jButton92.setText("Dispose");
        jButton92.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton92ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel3.add(jButton92, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog3.getContentPane().add(jSearchPanel3, gridBagConstraints);

        jSearchDialog4.setModal(true);
        jSearchDialog4.setUndecorated(true);
        jSearchDialog4.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel213.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel213.setLayout(new java.awt.GridBagLayout());

        jTextField115.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField115CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel213.add(jTextField115, gridBagConstraints);

        jSearchTable4.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable4.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable4MouseClicked(evt);
            }
        });
        jSearchScrollPane4.setViewportView(jSearchTable4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel213.add(jSearchScrollPane4, gridBagConstraints);

        jButton93.setText("Dispose");
        jButton93.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton93ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel213.add(jButton93, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog4.getContentPane().add(jSearchPanel213, gridBagConstraints);

        jSearchDialog11.setModal(true);
        jSearchDialog11.setUndecorated(true);
        jSearchDialog11.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel11.setLayout(new java.awt.GridBagLayout());

        jTextField1111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel11.add(jTextField1111, gridBagConstraints);

        jSearchTable11.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable11.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable11MouseClicked(evt);
            }
        });
        jSearchScrollPane11.setViewportView(jSearchTable11);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel11.add(jSearchScrollPane11, gridBagConstraints);

        jButton511.setText("Close");
        jButton511.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton511ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel11.add(jButton511, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog11.getContentPane().add(jSearchPanel11, gridBagConstraints);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Pharmacy Prescriptions");
        setFrameIcon(null);
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        prescriptionsTabbedPane.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        jPanel22.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel22.setLayout(new java.awt.GridBagLayout());

        jPanel211.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setAutoscrolls(true);

        doctorPrescriptionListingTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        doctorPrescriptionListingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Service No.", "Name", "No", "Doctor", "View"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        doctorPrescriptionListingTable.setRowHeight(18);

        doctorPrescriptionListingTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doctorPrescriptionListingTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(doctorPrescriptionListingTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel211.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 400.0;
        jPanel22.add(jPanel211, gridBagConstraints);

        jButton33.setMnemonic('l');
        jButton33.setText("Refresh list");
        jButton33.setToolTipText("Click here to clear textfields");
        jButton33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton33ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel22.add(jButton33, gridBagConstraints);

        jButton43.setMnemonic('C');
        jButton43.setText("Close form");
        jButton43.setToolTipText("Click here to close window");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel22.add(jButton43, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        jPanel22.add(jLabel15, gridBagConstraints);

        prescriptionsTabbedPane.addTab("Waiting Patients", jPanel22);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(102, 255, 102), new java.awt.Color(255, 153, 153)));
        jButton1.setVisible(false);jButton14.setVisible(false);
        jButton13.setVisible(false);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jScrollPane2.setPreferredSize(new java.awt.Dimension(700, 403));

        prescriptionsTable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        prescriptionsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Drugs", "Qty", "Presc No", "Route", "Frequency", "No Of Days", "Dosage", "Paid", "Price", "Total", "Code"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        prescriptionsTable.setEditingColumn(1);
        prescriptionsTable.setEditingRow(prescriptionsTable.getSelectedRow());
        prescriptionsTable.setGridColor(new java.awt.Color(204, 204, 255));
        prescriptionsTable.setRowHeight(20);

        /*  cmbox = new javax.swing.JComboBox();

        crset2.setConnectionSource(pConnDB);
        crset2.setCommand("select distinct product FROM st_stock_prices WHERE department = 'Pharmacy' order by product");

        cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset2, "product", null, null, null));
        javax.swing.table.TableColumn s1 = this.jTable1.getColumn("Drugs");
        s1.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
        cmbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxActionPerformed(evt);
            }
        });
        */

        javax.swing.table.TableColumn column11 = null;
        for (int i = 0; i < 11; i++) {
            column11 = prescriptionsTable.getColumnModel().getColumn(i);
            if (i == 0) {

                column11.setPreferredWidth(350); //sport column is bigger
            } else {
                if (i == 10) {

                    column11.setPreferredWidth(150); //sport column is bigger
                } else {
                    //if (i == 2) {
                        column11.setPreferredWidth(70);
                        // }  else
                    //column.setPreferredWidth(50);

                }
            }
        }

        java.lang.Object[] strCmb2 = {"Oral", "I.M", "I.V", "Intramuscular", "Topical", "Vaginal", "Rectal", "Sublingual", "Subcutaneuos", "Intrathical", "Intradermal"};

        javax.swing.JComboBox cmBox2 = new javax.swing.JComboBox(strCmb2);

        javax.swing.table.TableColumn teditor2 = this.prescriptionsTable.getColumn("Route");

        teditor2.setCellEditor(new javax.swing.DefaultCellEditor(cmBox2));

        java.lang.Object[] strCmb1 = {"OD", "BD", "TID", "QID", "Stat", "Mane", "Nocte", "Prn"};

        javax.swing.JComboBox cmBox1 = new javax.swing.JComboBox(strCmb1);

        javax.swing.table.TableColumn teditor1 = this.prescriptionsTable.getColumn("Frequency");

        teditor1.setCellEditor(new javax.swing.DefaultCellEditor(cmBox1));

        java.lang.Object[] strCmb3 = {"Once", "1", "3", "5", "7", "14", "30", "90"};

        javax.swing.JComboBox cmBox3 = new javax.swing.JComboBox(strCmb3);
        cmBox3.setEditable(true);
        javax.swing.table.TableColumn teditor3 = this.prescriptionsTable.getColumn("No Of Days");

        teditor3.setCellEditor(new javax.swing.DefaultCellEditor(cmBox3));

        java.lang.Object[] strCmb4 = {"1t/c", "2t/c", "3t/c", "4t/c", "2ml", "5ml", "10ml", "15ml", "20"};

        javax.swing.JComboBox cmBox4 = new javax.swing.JComboBox(strCmb4);
        cmBox4.setEditable(true);
        javax.swing.table.TableColumn teditor4 = this.prescriptionsTable.getColumn("Dosage");

        teditor4.setCellEditor(new javax.swing.DefaultCellEditor(cmBox4));
        prescriptionsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                prescriptionsTableMouseClicked(evt);
            }
        });
        prescriptionsTable.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                prescriptionsTableComponentShown(evt);
            }
        });
        prescriptionsTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                prescriptionsTableKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(prescriptionsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 70.0;
        jPanel1.add(jScrollPane2, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel9.setForeground(new java.awt.Color(255, 0, 51));
        jLabel9.setText("Patient No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel2.add(jLabel9, gridBagConstraints);

        jLabel1.setForeground(new java.awt.Color(255, 0, 51));
        jLabel1.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel2.add(jLabel1, gridBagConstraints);

        jTextField1.setEditable(false);
        jTextField1.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(jTextField1, gridBagConstraints);

        jLabel2.setText("Department");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel2.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Category/Residence");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel2.add(jLabel3, gridBagConstraints);

        jTextField2.setEditable(false);
        jTextField2.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(jTextField2, gridBagConstraints);

        jLabel4.setForeground(new java.awt.Color(255, 0, 51));
        jLabel4.setText("Payment Mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel2.add(jLabel4, gridBagConstraints);

        paymentModeTxt.setEditable(false);
        paymentModeTxt.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(paymentModeTxt, gridBagConstraints);

        jLabel6.setText("Doctor");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel2.add(jLabel6, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jTextField9.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jTextField9, gridBagConstraints);

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton.setToolTipText("Search");
        searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel4.add(searchButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel4, gridBagConstraints);

        jComboBox1.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select stores from store_allocation where user_name = current_user"));
        jComboBox1.setSelectedIndex(0);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(jComboBox1, gridBagConstraints);

        jPanel61.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel61.setMinimumSize(new java.awt.Dimension(82, 37));
        jPanel61.setLayout(new java.awt.GridBagLayout());

        jTextField36.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel61.add(jTextField36, gridBagConstraints);

        searchButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton1.setToolTipText("Search Patient's Name");
        searchButton1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton1.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton1.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jPanel61.add(searchButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jPanel61, gridBagConstraints);

        jLabel12.setText("Dispenser");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel2.add(jLabel12, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(jTextField12, gridBagConstraints);

        jLabel131.setText("Age");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        jPanel2.add(jLabel131, gridBagConstraints);

        jTextField141.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jTextField141, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        jPanel2.add(jLabel141, gridBagConstraints);

        jTextField151.setEditable(false);
        jTextField151.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField151.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(jTextField151, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = -20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jSeparator1, gridBagConstraints);

        jButton6.setMnemonic('r');
        jButton6.setText("Remove Row");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jButton6, gridBagConstraints);

        jButton3.setMnemonic('l');
        jButton3.setText("Clear");
        jButton3.setToolTipText("Click here to clear textfields");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jButton3, gridBagConstraints);

        jButton4.setMnemonic('C');
        jButton4.setText("Close");
        jButton4.setToolTipText("Click here to close window");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jButton4, gridBagConstraints);

        jButton5.setMnemonic('h');
        jButton5.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jButton5, gridBagConstraints);

        jLabel53.setText("Amount KShs.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabel53, gridBagConstraints);

        jTextField3.setEditable(false);
        jTextField3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField3.setText("0.00");
        jTextField3.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField3.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 20);
        jPanel1.add(jTextField3, gridBagConstraints);

        jLabel8.setText("Prescription Fee");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        jPanel1.add(jLabel8, gridBagConstraints);

        jTextField8.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField8.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 20);
        jPanel1.add(jTextField8, gridBagConstraints);

        jButton21.setBackground(new java.awt.Color(255, 204, 204));
        jButton21.setMnemonic('D');
        jButton21.setText("Dispense & Print");
        jButton21.setEnabled(false);
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jButton21, gridBagConstraints);

        jButton211.setBackground(new java.awt.Color(255, 204, 204));
        jButton211.setMnemonic('D');
        jButton211.setText("Reprint");
        jButton211.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton211ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jButton211, gridBagConstraints);

        jButton13.setBackground(new java.awt.Color(204, 204, 255));
        jButton13.setMnemonic('r');
        jButton13.setText("Reprint");
        jButton13.setToolTipText("Click here enter data");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jButton13, gridBagConstraints);

        jButton14.setBackground(new java.awt.Color(204, 204, 255));
        jButton14.setMnemonic('O');
        jButton14.setText("Dispense & Print");
        jButton14.setToolTipText("Click here enter data");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jButton14, gridBagConstraints);

        jTextField15.setEditable(false);
        jTextField15.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField15.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
        jPanel1.add(jTextField15, gridBagConstraints);

        jButton1.setBackground(new java.awt.Color(204, 204, 255));
        jButton1.setMnemonic('o');
        jButton1.setText("Send Bill");
        jButton1.setToolTipText("Click here enter data");
        jButton1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButton1FocusGained(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jButton1, gridBagConstraints);

        jButton2.setBackground(new java.awt.Color(255, 204, 204));
        jButton2.setMnemonic('D');
        jButton2.setText("Dispense");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jButton2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 50.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel5.add(jPanel1, gridBagConstraints);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter patient here"));
        jPanel11.setLayout(new java.awt.GridBagLayout());

        jTable11.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Drug", "Qty", "Avl Qty", "Price", "Disc", "Total", "Gl"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, true, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable11.setGridColor(new java.awt.Color(204, 204, 255));
        /*  cmbox1 = new javax.swing.JComboBox();

        crset21.setConnectionSource(pConnDB);
        crset21.setCommand("select distinct product FROM st_stock_prices WHERE department = 'Pharmacy'");

        cmbox1.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset21, "product", null, null, null));
        javax.swing.table.TableColumn s = this.jTable11.getColumn("Drugs");
        s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox1));
        cmbox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbox1ActionPerformed(evt);
            }
        });

        */
        javax.swing.table.TableColumn column1 = null;
        for (int i = 0; i < 7; i++) {
            column1 = jTable11.getColumnModel().getColumn(i);
            if (i == 0) {

                column1.setPreferredWidth(400); //sport column is bigger
            } else {
                //if (i == 2) {
                    column1.setPreferredWidth(200);
                    // }  else
                //column.setPreferredWidth(50);

            }
        }

        jTable11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable11MouseClicked(evt);
            }
        });
        jTable11.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable11KeyReleased(evt);
            }
        });
        jScrollPane21.setViewportView(jTable11);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel11.add(jScrollPane21, gridBagConstraints);

        jPanel21.setLayout(new java.awt.GridBagLayout());

        jLabel11.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel21.add(jLabel11, gridBagConstraints);

        jLabel21.setText("Store Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel21.add(jLabel21, gridBagConstraints);

        jLabel31.setText("Patient Category");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel21.add(jLabel31, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel21.add(jTextField21, gridBagConstraints);

        jTextField41.setEditable(false);
        jTextField41.setText("Pharmacy");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel21.add(jTextField41, gridBagConstraints);

        jLabel5.setText("Doctor");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel21.add(jLabel5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel21.add(jTextField7, gridBagConstraints);

        jPanel411.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel411.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel411.add(jTextField911, gridBagConstraints);

        searchButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton11.setToolTipText("Search");
        searchButton11.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton11.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton11.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton11.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton11ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel411.add(searchButton11, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel21.add(jPanel411, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel21.add(jTextField71, gridBagConstraints);

        jLabel52.setText("Prescription No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel21.add(jLabel52, gridBagConstraints);

        jLabel7.setText("Patient No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        jPanel21.add(jLabel7, gridBagConstraints);

        jTextField4.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel21.add(jTextField4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jPanel21, gridBagConstraints);

        jLabel531.setText("Amount KShs.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jLabel531, gridBagConstraints);

        jTextField31.setEditable(false);
        jTextField31.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField31.setText("0.00");
        jTextField31.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField31.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel11.add(jTextField31, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        jPanel11.add(jSeparator11, gridBagConstraints);

        jButton11.setMnemonic('s');
        jButton11.setText("Save & Print");
        jButton11.setToolTipText("Click here enter data");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jButton11, gridBagConstraints);

        jButton61.setMnemonic('r');
        jButton61.setText("Remove Row");
        jButton61.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton61ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        jPanel11.add(jButton61, gridBagConstraints);

        jButton31.setMnemonic('l');
        jButton31.setText("Clear");
        jButton31.setToolTipText("Click here to clear textfields");
        jButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton31ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jButton31, gridBagConstraints);

        jButton51.setMnemonic('h');
        jButton51.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jButton51, gridBagConstraints);

        jLabel81.setText("Prescription Fee");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        jPanel11.add(jLabel81, gridBagConstraints);

        jTextField81.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel11.add(jTextField81, gridBagConstraints);

        jButton111.setMnemonic('a');
        jButton111.setText("Save");
        jButton111.setToolTipText("Click here enter data");
        jButton111.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton111ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jButton111, gridBagConstraints);

        jButton112.setMnemonic('R');
        jButton112.setText("Reprint");
        jButton112.setToolTipText("Click here enter data");
        jButton112.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton112ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jButton112, gridBagConstraints);

        jTextField14.setEditable(false);
        jTextField14.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField14.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel11.add(jTextField14, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel5.add(jPanel11, gridBagConstraints);

        jTextField6.setEditable(false);
        jTextField6.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField6.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jTextField6, gridBagConstraints);

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Select patient here"));
        jPanel13.setLayout(new java.awt.GridBagLayout());

        jScrollPane22.setPreferredSize(new java.awt.Dimension(700, 403));

        jTable13.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Drug", "Qty", "Avl Qty", "Price", "Disc", "Total", "Gl"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, true, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable13.setEditingColumn(1);
        jTable13.setEditingRow(prescriptionsTable.getSelectedRow());
        jTable13.setGridColor(new java.awt.Color(204, 204, 255));

        /*  cmbox = new javax.swing.JComboBox();

        crset2.setConnectionSource(pConnDB);
        crset2.setCommand("select distinct product FROM st_stock_prices WHERE department = 'Pharmacy' order by product");

        cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset2, "product", null, null, null));
        javax.swing.table.TableColumn s1 = this.jTable1.getColumn("Drugs");
        s1.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
        cmbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxActionPerformed(evt);
            }
        });
        */

        javax.swing.table.TableColumn column111 = null;
        for (int i = 0; i < 7; i++) {
            column111 = jTable13.getColumnModel().getColumn(i);
            if (i == 0) {

                column111.setPreferredWidth(350); //sport column is bigger
            } else {
                //if (i == 2) {
                    column111.setPreferredWidth(200);
                    // }  else
                //column.setPreferredWidth(50);

            }
        }

        jTable13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable13MouseClicked(evt);
            }
        });
        jTable13.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                jTable13AncestorMoved(evt);
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jTable13.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable13KeyReleased(evt);
            }
        });
        jScrollPane22.setViewportView(jTable13);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel13.add(jScrollPane22, gridBagConstraints);

        jPanel23.setLayout(new java.awt.GridBagLayout());

        jLabel91.setText("Patient No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel23.add(jLabel91, gridBagConstraints);

        jComboBox1311.setDoubleBuffered(true);
        jComboBox1311.setMinimumSize(new java.awt.Dimension(0, 0));
        jComboBox1311.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel23.add(jComboBox1311, gridBagConstraints);

        jLabel13.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel23.add(jLabel13, gridBagConstraints);

        jTextField13.setEditable(false);
        jTextField13.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel23.add(jTextField13, gridBagConstraints);

        jLabel22.setText("Department");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel23.add(jLabel22, gridBagConstraints);

        jLabel32.setText("Patient Category");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel23.add(jLabel32, gridBagConstraints);

        jTextField22.setEditable(false);
        jTextField22.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel23.add(jTextField22, gridBagConstraints);

        jTextField42.setEditable(false);
        jTextField42.setText("Pharmacy");
        jTextField42.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel23.add(jTextField42, gridBagConstraints);

        jLabel41.setText("Payment Mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel23.add(jLabel41, gridBagConstraints);

        jTextField52.setEditable(false);
        jTextField52.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel23.add(jTextField52, gridBagConstraints);

        jLabel61.setText("Doctor");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel23.add(jLabel61, gridBagConstraints);

        jPanel42.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel42.setLayout(new java.awt.GridBagLayout());

        jTextField92.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel42.add(jTextField92, gridBagConstraints);

        searchButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton2.setToolTipText("Search");
        searchButton2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton2.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton2.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel42.add(searchButton2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        jPanel23.add(jPanel42, gridBagConstraints);

        jPanel62.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel62.setMinimumSize(new java.awt.Dimension(82, 37));
        jPanel62.setLayout(new java.awt.GridBagLayout());

        jTextField361.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel62.add(jTextField361, gridBagConstraints);

        searchButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton3.setToolTipText("Search Patient's Name");
        searchButton3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton3.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton3.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jPanel62.add(searchButton3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel23.add(jPanel62, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel13.add(jPanel23, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        jPanel13.add(jSeparator12, gridBagConstraints);

        jLabel532.setText("Amount KShs.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel13.add(jLabel532, gridBagConstraints);

        jTextField32.setEditable(false);
        jTextField32.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField32.setText("0.00");
        jTextField32.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField32.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel13.add(jTextField32, gridBagConstraints);

        jLabel82.setText("Prescription Fee");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        jPanel13.add(jLabel82, gridBagConstraints);

        jTextField82.setEditable(false);
        jTextField82.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField82.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel13.add(jTextField82, gridBagConstraints);

        jTextField10.setEditable(false);
        jTextField10.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField10.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel13.add(jTextField10, gridBagConstraints);

        jPanel9.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel9.setLayout(new java.awt.GridBagLayout());

        jButton12.setMnemonic('s');
        jButton12.setText("Save");
        jButton12.setToolTipText("Click here enter data");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel9.add(jButton12, gridBagConstraints);

        jButton63.setMnemonic('r');
        jButton63.setText("Remove Row");
        jButton63.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton63ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        jPanel9.add(jButton63, gridBagConstraints);

        jButton32.setMnemonic('l');
        jButton32.setText("Clear");
        jButton32.setToolTipText("Click here to clear textfields");
        jButton32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton32ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel9.add(jButton32, gridBagConstraints);

        jButton41.setMnemonic('C');
        jButton41.setText("Close");
        jButton41.setToolTipText("Click here to close window");
        jButton41.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton41ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel9.add(jButton41, gridBagConstraints);

        jButton54.setMnemonic('h');
        jButton54.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel9.add(jButton54, gridBagConstraints);

        jButton121.setMnemonic('p');
        jButton121.setText("Save & Print");
        jButton121.setToolTipText("Click here enter data");
        jButton121.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton121ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel9.add(jButton121, gridBagConstraints);

        jButton122.setMnemonic('R');
        jButton122.setText("Reprint");
        jButton122.setToolTipText("Click here enter data");
        jButton122.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton122ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel9.add(jButton122, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel13.add(jPanel9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel5.add(jPanel13, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Issue to", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 255, 153), 2), "Patient category", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 0, 255))); // NOI18N
        jPanel6.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(jCheckBox1);
        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Out Patient");
        jCheckBox1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jCheckBox1, gridBagConstraints);

        buttonGroup1.add(jCheckBox2);
        jCheckBox2.setText("Walk In Patient");
        jCheckBox2.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jCheckBox2, gridBagConstraints);

        buttonGroup1.add(jCheckBox3);
        jCheckBox3.setText("In Patient");
        jCheckBox3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jCheckBox3.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jCheckBox3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(jPanel6, gridBagConstraints);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        buttonGroup21.add(jCheckBox31);
        jCheckBox31.setSelected(true);
        jCheckBox31.setText("Search By  No.");
        jCheckBox31.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel7.add(jCheckBox31, gridBagConstraints);

        buttonGroup21.add(jCheckBox4);
        jCheckBox4.setText("Search By Name");
        jCheckBox4.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel7.add(jCheckBox4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(jPanel7, gridBagConstraints);

        jPanel8.setLayout(new java.awt.GridBagLayout());

        jLabel10.setForeground(new java.awt.Color(255, 0, 51));
        jLabel10.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jLabel10, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(datePicker1, gridBagConstraints);

        jLabel14.setText("Prescription No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel8.add(jLabel14, gridBagConstraints);

        jPanel413.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel413.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel413.add(jTextField93, gridBagConstraints);

        searchButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton4.setToolTipText("Search");
        searchButton4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton4.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton4.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel413.add(searchButton4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jPanel413, gridBagConstraints);

        buttonGroup3.add(jCheckBox5);
        jCheckBox5.setText("Donation");
        jCheckBox5.setEnabled(false);
        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel8.add(jCheckBox5, gridBagConstraints);

        buttonGroup3.add(jCheckBox6);
        jCheckBox6.setSelected(true);
        jCheckBox6.setText("Pharmacy");
        jCheckBox6.setEnabled(false);
        jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        jPanel8.add(jCheckBox6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jPanel8, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipady = -30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel5.add(jPanel3, gridBagConstraints);

        prescriptionsTabbedPane.addTab("Raise Cash Bill", jPanel5);

        jPanel221.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel221.setLayout(new java.awt.GridBagLayout());

        jPanel2111.setLayout(new java.awt.GridBagLayout());

        jScrollPane11.setAutoscrolls(true);

        prescriptionBillingTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        prescriptionBillingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Date", "Presc No", "Doctor", "Billed"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        prescriptionBillingTable.setRowHeight(20);

        prescriptionBillingTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                prescriptionBillingTableMouseClicked(evt);
            }
        });
        jScrollPane11.setViewportView(prescriptionBillingTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel2111.add(jScrollPane11, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        jPanel221.add(jPanel2111, gridBagConstraints);

        jButton331.setMnemonic('l');
        jButton331.setText("Clear");
        jButton331.setToolTipText("Click here to clear textfields");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel221.add(jButton331, gridBagConstraints);

        jButton431.setMnemonic('C');
        jButton431.setText("Close");
        jButton431.setToolTipText("Click here to close window");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel221.add(jButton431, gridBagConstraints);

        jPanel10.setLayout(new java.awt.GridBagLayout());

        jCheckBox7.setText("Click To View");
        jCheckBox7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox7ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel10.add(jCheckBox7, gridBagConstraints);

        jLabel92.setForeground(new java.awt.Color(255, 0, 51));
        jLabel92.setText("Service No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel10.add(jLabel92, gridBagConstraints);

        jPanel41.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel41.setLayout(new java.awt.GridBagLayout());

        jTextField91.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel41.add(jTextField91, gridBagConstraints);

        searchButton31.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton31.setToolTipText("Search");
        searchButton31.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton31.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton31.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton31.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton31ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel41.add(searchButton31, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel10.add(jPanel41, gridBagConstraints);

        jLabel121.setForeground(new java.awt.Color(255, 0, 51));
        jLabel121.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel10.add(jLabel121, gridBagConstraints);

        jTextField121.setEditable(false);
        jTextField121.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel10.add(jTextField121, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel221.add(jPanel10, gridBagConstraints);

        prescriptionsTabbedPane.addTab("Precription By Patient", jPanel221);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(prescriptionsTabbedPane, gridBagConstraints);

        setBounds(0, 0, 826, 447);
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox7ActionPerformed
        int j = 0;
        int i = 0;
        int n = 0;

        try {

            // for (int l = 0; l < listofDays.length; l++) {
            java.sql.Statement stmtTable1 = connectDB.createStatement();

            java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select trans_date ,inv_no,doctor,paid as dispensed from pb_doctors_request where revenue_code ilike 'pharm%'  and patient_no=  '" + this.jTextField91.getText().toString() + "'  group by trans_date,inv_no,doctor,paid ORDER BY inv_no asc");

            while (rsetTable1.next()) {

                prescriptionBillingTable.setValueAt(rsetTable1.getObject(1), i, 0);
                prescriptionBillingTable.setValueAt(rsetTable1.getObject(2), i, 1);
                prescriptionBillingTable.setValueAt(rsetTable1.getObject(3), i, 2);

                prescriptionBillingTable.setValueAt(rsetTable1.getObject(4), i, 3);

                i++;

            }

            //}
        } catch (java.sql.SQLException sqlExec) {

            sqlExec.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox7ActionPerformed

    private void prescriptionBillingTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_prescriptionBillingTableMouseClicked
        String receiptNo = null;
        receiptNo = prescriptionBillingTable.getValueAt(prescriptionBillingTable.getSelectedRow(), 1).toString();

        System.out.print("See receipt No3. : " + receiptNo);

        com.afrisoftech.reports.PrescPdf policy = new com.afrisoftech.reports.PrescPdf();

        policy.PrescPdf(connectDB, receiptNo);

        // Add your handling code here:
    }//GEN-LAST:event_prescriptionBillingTableMouseClicked

    private void searchButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton31ActionPerformed
        for (int k = 0; k < prescriptionBillingTable.getRowCount(); k++) {
            for (int r = 0; r < prescriptionBillingTable.getColumnCount(); r++) {
                prescriptionBillingTable.getModel().setValueAt(null, k, r);
            }
        }
        // this.jTextField113.setText("");
        searchButtonClickedp();
    }//GEN-LAST:event_searchButton31ActionPerformed
    private void searchButtonClickedp() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.jTextField91.getLocationOnScreen();

        jSearchDialog2.setSize(400, 200);

        jSearchDialog2.setLocation(point);

        jSearchDialog2.setVisible(true);

    }
    private void doctorPrescriptionListingTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doctorPrescriptionListingTableMouseClicked
        for (int k = 0; k < jTable13.getRowCount(); k++) {
            for (int r = 0; r < jTable13.getColumnCount(); r++) {
                jTable13.getModel().setValueAt(null, k, r);
            }
        }
        for (int k = 0; k < prescriptionsTable.getRowCount(); k++) {
            for (int r = 0; r < prescriptionsTable.getColumnCount(); r++) {
                prescriptionsTable.getModel().setValueAt(null, k, r);
            }
        }

        java.util.Calendar calendar = java.util.Calendar.getInstance();

        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

        System.out.println(datenowSql1.toString());

        java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

        System.out.println(datenowSql.toString());
        String PrescNo = null;
        String billNo = null;
        String receiptNo = null;
        // System.out.print("See receipt No1. : "+receiptNo);
        System.out.print("See receipt No2. : " + receiptNo);
        //        if (jTable1.getSelectedColumn() == 2) {
        PrescNo = doctorPrescriptionListingTable.getValueAt(doctorPrescriptionListingTable.getSelectedRow(), 3).toString();
        if (PrescNo.startsWith("O")) {
            jPanel11.setVisible(false);
            jPanel1.setVisible(true);
            jPanel13.setVisible(false);
            jTextField9.setText(doctorPrescriptionListingTable.getValueAt(doctorPrescriptionListingTable.getSelectedRow(), 1).toString());
            jTextField1.setText(doctorPrescriptionListingTable.getValueAt(doctorPrescriptionListingTable.getSelectedRow(), 2).toString());
            jTextField36.setText(doctorPrescriptionListingTable.getValueAt(doctorPrescriptionListingTable.getSelectedRow(), 4).toString());
            //  jTextField17.setText(jTable1.getValueAt(jTable1.getSelectedRow(),3).toString());

            try {
                connectDB.setAutoCommit(false);
                java.sql.Statement stmtTable1 = connectDB.createStatement();
                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select distinct category,pay_mode from hp_patient_register where patient_no='" + this.jTextField9.getText().toString() + "' ");
                while (rsetTable1.next()) {
                    this.paymentModeTxt.setText(rsetTable1.getString(2));
                    this.jTextField2.setText(rsetTable1.getString(1));
                    //jTextField141.setText(rsetTable1.toString());
                }

                if (this.paymentModeTxt.getText().toString().equalsIgnoreCase("Scheme")) {
                    try {

                        java.sql.Statement stmt1 = connectDB.createStatement();
                        // java.sql.ResultSet rset1 = stmt1.executeQuery("select slip_no,nr_no from credit_acc_slip where patient_no  ='"+jTextField9.getText()+"' and date =current_date");

                        java.sql.ResultSet rset1 = stmt1.executeQuery("select slip_no from credit_acc_slip where patient_no  ='" + jTextField9.getText() + "'  order by date desc limit 1");
                        while (rset1.next()) {

                            //  jTextField16.setText(dbObject.getDBObject(rset1.getObject(1), "-"));
                            //jTextField151.setText(rset1.getObject(1).toString());
                            jTextField12.setText(dbObject.getDBObject(rset1.getObject(1), "-"));
                        }
                    } catch (java.sql.SQLException sqe) {
                        sqe.printStackTrace();
                        //  System.out.println("Insert not successful");
                    }
                    if (this.jTextField12.getText() == null || jTextField12.getText().equals("")) {

                        javax.swing.JOptionPane.showMessageDialog(this, "Slip Missing Ask for Reactivation from the Reception", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        this.jButton211.setVisible(false);
                        this.jButton21.setVisible(false);
                        this.jButton2.setVisible(false);
                        this.jButton1.setVisible(false);
                        this.jButton13.setVisible(false);
                        this.jButton14.setVisible(false);
                    } else {
                        this.jButton211.setVisible(true);
                        this.jButton21.setVisible(true);
                        this.jButton2.setVisible(true);
                        this.jButton1.setVisible(false);
                        this.jButton13.setVisible(false);
                        this.jButton14.setVisible(false);
                    }
                }

                if (this.paymentModeTxt.getText().equals("Cash")) {
                    this.jButton2.setVisible(false);
                    this.jButton21.setVisible(false);
                    this.jButton211.setVisible(false);
                    this.jButton1.setVisible(true);
                    this.jButton13.setVisible(true);
                    this.jButton14.setVisible(true);

                } else {
                    /*
                     * if(!(this.jTextField5.getText().equals("Cash"))){
                     * this.jButton1.setVisible(false);
                     * this.jButton13.setVisible(false);
                     * this.jButton14.setVisible(false);
                     * this.jButton2.setVisible(true);
                     * this.jButton21.setVisible(true);
                     * this.jButton211.setVisible(true); }
                     */
                }

                int j = 0;
                int i = 0;
                int n = 0;

                try {

                    //for (int i = 0; i < listofDays.length; l++) {
                    java.sql.Statement stmtTable12 = connectDB.createStatement();

                    java.sql.ResultSet rsetTable12 = stmtTable1.executeQuery("select distinct(service) as product,"
                            + "amount,gl_code,0::numeric FROM pb_doctors_request WHERE patient_no ILIKE "
                            + "'%" + jTextField9.getText() + "%' AND revenue_code ilike '%Phar%' and "
                            + "inv_no= '" + doctorPrescriptionListingTable.getValueAt(doctorPrescriptionListingTable.getSelectedRow(), 3).toString() + "' order by service");

                    while (rsetTable12.next()) {

                        prescriptionsTable.setValueAt(rsetTable12.getObject(1), i, 0);
                        //  jTable1.setValueAt(rsetTable12.getObject("0"), i, 1);
                        prescriptionsTable.setValueAt(rsetTable12.getObject(3), i, 6);
                        prescriptionsTable.setValueAt(rsetTable12.getObject(2), i, 3);
                        prescriptionsTable.setValueAt(rsetTable12.getObject(4), i, 4);

                        i++;

                    }
                    int l = 0;
                    Double Qty = 0.00;
                    for (int m = 0; m < prescriptionsTable.getRowCount(); m++) {
                        //for (int i = 0; i< jTable1.getRowCount(); i++) {
                        if (prescriptionsTable.getModel().getValueAt(m, 0) != null) {
                            java.sql.Statement pstmt1 = connectDB.createStatement();

                            java.sql.ResultSet rs1 = pstmt1.executeQuery("select count(description) from stock_balance  where description ilike  '%" + prescriptionsTable.getValueAt(m, 0) + "%' and department ilike '%" + jComboBox1.getSelectedItem().toString() + "%'");
                            while (rs1.next()) {
                                l = rs1.getInt(1);
                            }
                            if (l > 0) {
                                java.sql.Statement pstmt = connectDB.createStatement();
                                java.sql.ResultSet rs = pstmt.executeQuery("select sum(qty) from stock_balance where description  ilike '%" + prescriptionsTable.getValueAt(m, 0) + "%' and department ilike '%" + jComboBox1.getSelectedItem().toString() + "%'");
                                while (rs.next()) {
                                    System.out.println("Passed 1");

                                    Qty = rs.getDouble(1);
                                    prescriptionsTable.setValueAt(Qty, m, 2);

                                }
                            } else {
                                prescriptionsTable.setValueAt("0.00", m, 2);
                            }

                            //m++;
                        }
                    }
                    // }

                    if (Boolean.valueOf(doctorPrescriptionListingTable.getModel().getValueAt(doctorPrescriptionListingTable.getSelectedRow(), 5).toString()) == java.lang.Boolean.TRUE) {
                        receiptNo = doctorPrescriptionListingTable.getValueAt(doctorPrescriptionListingTable.getSelectedRow(), 3).toString();

                        System.out.print("See receipt No3. : " + receiptNo);

                        com.afrisoftech.reports.PrescPdf policy = new com.afrisoftech.reports.PrescPdf();

                        policy.PrescPdf(connectDB, receiptNo);

                        java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request SET paid = true,collected = false where inv_no = '" + doctorPrescriptionListingTable.getValueAt(doctorPrescriptionListingTable.getSelectedRow(), 3).toString() + "'");
                        pstmt46.executeUpdate();
                    }
                } catch (java.sql.SQLException sqlExec) {

                    sqlExec.printStackTrace();

                    javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

                }

                jSearchDialog.dispose();
                connectDB.commit();
                connectDB.setAutoCommit(true);

                for (int k = 0; k < doctorPrescriptionListingTable.getRowCount(); k++) {
                    for (int r = 0; r < doctorPrescriptionListingTable.getColumnCount(); r++) {
                        doctorPrescriptionListingTable.getModel().setValueAt(null, k, r);
                    }
                }

            } catch (java.sql.SQLException sq) {
                sq.printStackTrace();
                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

        } else {
            jPanel1.setVisible(false);
            jPanel13.setVisible(true);
            jPanel11.setVisible(false);

            try {
                java.sql.Statement pstmt = connectDB.createStatement();
                java.sql.ResultSet rs = pstmt.executeQuery("select store_name from st_stores where store_code = 'IP'");

                while (rs.next()) {
                    jTextField42.setText(rs.getObject(1).toString());
                    // jTextField2.setText(rs.getObject(2).toString());

                }
            } catch (java.sql.SQLException sqlex) {
                sqlex.printStackTrace();
                System.out.println(sqlex.getMessage());
            }
            jTextField92.setText(doctorPrescriptionListingTable.getValueAt(doctorPrescriptionListingTable.getSelectedRow(), 1).toString());
            jTextField13.setText(doctorPrescriptionListingTable.getValueAt(doctorPrescriptionListingTable.getSelectedRow(), 2).toString());
            jTextField361.setText(doctorPrescriptionListingTable.getValueAt(doctorPrescriptionListingTable.getSelectedRow(), 4).toString());
            //  jTextField17.setText(jTable1.getValueAt(jTable1.getSelectedRow(),3).toString());

            try {
                connectDB.setAutoCommit(false);
                java.sql.Statement stmtTable1 = connectDB.createStatement();
                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select distinct category,pay_mode from hp_inpatient_register where patient_no='" + this.jTextField92.getText().toString() + "' ");
                while (rsetTable1.next()) {
                    this.jTextField52.setText(rsetTable1.getString(2));
                    this.jTextField22.setText(rsetTable1.getString(1));
                }
                int j = 0;
                int i = 0;
                int n = 0;

                try {

                    //for (int i = 0; i < listofDays.length; l++) {
                    java.sql.Statement stmtTable12 = connectDB.createStatement();

                    java.sql.ResultSet rsetTable12 = stmtTable1.executeQuery("select distinct(service) as product,amount,gl_code,0 FROM pb_doctors_request WHERE patient_no ILIKE '%" + jTextField92.getText() + "%' AND revenue_code ilike '%Phar%' and inv_no= '" + doctorPrescriptionListingTable.getValueAt(doctorPrescriptionListingTable.getSelectedRow(), 3).toString() + "' order by service");

                    while (rsetTable12.next()) {

                        jTable13.setValueAt(rsetTable12.getObject(1), i, 0);
                        //  jTable1.setValueAt(rsetTable12.getObject("0"), i, 1);
                        jTable13.setValueAt(rsetTable12.getObject(3), i, 6);
                        jTable13.setValueAt(rsetTable12.getObject(2), i, 3);

                        jTable13.setValueAt(rsetTable12.getObject(4), i, 4);

                        // jTable1.setValueAt(java.lang.Boolean.valueOf(false), i, 5);
                        i++;

                    }
                    int l = 0;
                    Double Qty = 0.00;
                    for (int m = 0; m < jTable13.getRowCount(); m++) {
                        //for (int i = 0; i< jTable1.getRowCount(); i++) {
                        if (jTable13.getModel().getValueAt(m, 0) != null) {
                            java.sql.Statement pstmt1 = connectDB.createStatement();

                            java.sql.ResultSet rs1 = pstmt1.executeQuery("select count(description) from stock_balance  where description ilike  '%" + jTable13.getValueAt(m, 0) + "%' and department ilike '%" + jComboBox1.getSelectedItem().toString() + "%'");
                            while (rs1.next()) {
                                l = rs1.getInt(1);
                            }
                            if (l > 0) {
                                java.sql.Statement pstmt = connectDB.createStatement();
                                java.sql.ResultSet rs = pstmt.executeQuery("select sum(qty) from stock_balance where description  ilike '%" + jTable13.getValueAt(m, 0) + "%' and department ilike '%" + jComboBox1.getSelectedItem().toString() + "%'");
                                while (rs.next()) {
                                    System.out.println("Passed 1");

                                    //  jTable1.setValueAt(rs.getObject(1), m, 2);
                                    Qty = rs.getDouble(1);
                                    jTable13.setValueAt(Qty, m, 2);

                                }
                            } else {
                                jTable13.setValueAt("0.00", m, 2);
                            }

                            //m++;
                        }
                    }
                    // }

                    if (Boolean.valueOf(doctorPrescriptionListingTable.getModel().getValueAt(doctorPrescriptionListingTable.getSelectedRow(), 5).toString()) == java.lang.Boolean.TRUE) {
                        receiptNo = doctorPrescriptionListingTable.getValueAt(doctorPrescriptionListingTable.getSelectedRow(), 3).toString();

                        System.out.print("See receipt No3. : " + receiptNo);

                        com.afrisoftech.reports.PrescPdf policy = new com.afrisoftech.reports.PrescPdf();

                        policy.PrescPdf(connectDB, receiptNo);

                        java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request SET collected = true where inv_no = '" + doctorPrescriptionListingTable.getValueAt(doctorPrescriptionListingTable.getSelectedRow(), 3).toString() + "'");
                        pstmt46.executeUpdate();

                    }

                } catch (java.sql.SQLException sqlExec) {

                    sqlExec.printStackTrace();

                    javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

                }

                jSearchDialog.dispose();
                connectDB.commit();
                connectDB.setAutoCommit(true);

                for (int k = 0; k < doctorPrescriptionListingTable.getRowCount(); k++) {
                    for (int r = 0; r < doctorPrescriptionListingTable.getColumnCount(); r++) {
                        doctorPrescriptionListingTable.getModel().setValueAt(null, k, r);
                    }
                }

            } catch (java.sql.SQLException sq) {
                sq.printStackTrace();
                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

        }

        this.populateTable1(this.jTextField9.getText());

        prescriptionsTabbedPane.setSelectedIndex(1);
        // Add your handling code here:
    }//GEN-LAST:event_doctorPrescriptionListingTableMouseClicked

    private void jSearchTable11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable11MouseClicked
        jTextField36.setText(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 1).toString());
        jTextField361.setText(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 1).toString());

        jSearchDialog11.dispose();    // Add your handling code here:
    }//GEN-LAST:event_jSearchTable11MouseClicked

    private void jButton511ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton511ActionPerformed
        jSearchDialog11.dispose();      // Add your handling code here:
    }//GEN-LAST:event_jButton511ActionPerformed

    private void jTextField1111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1111CaretUpdate
        jSearchTable11.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select (staff_no) as scheme,(first_name||' '||middle_name) as name from pb_doctors_list where first_name||' '||middle_name ILIKE '%" + jTextField1111.getText().toString() + "%' ORDER BY first_name"));

        jSearchTable11.setShowHorizontalLines(false);
        jSearchScrollPane11.setViewportView(jSearchTable11);   // Add your handling code here:
    }//GEN-LAST:event_jTextField1111CaretUpdate

    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        searchButton11Clicked();     // Add your handling code here:
    }//GEN-LAST:event_searchButton1ActionPerformed
    private void searchButton11Clicked() {

        System.out.println("Showing dialog");

        jSearchDialog11.dispose();
        java.awt.Point point = this.jTextField36.getLocationOnScreen();

        jSearchDialog11.setSize(400, 200);

        jSearchDialog11.setLocation(point);
        jSearchDialog11.setVisible(true);

    }
    private void jButton1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButton1FocusGained
        // Add your handling code here:
    }//GEN-LAST:event_jButton1FocusGained

    private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox6ActionPerformed
        //this.jTextField4.setText(this.jCheckBox6.getText());        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox6ActionPerformed

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
        // jTextField4.setText(this.jCheckBox5.getText());   // Add your handling code here:
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jButton122ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton122ActionPerformed
        double amount1 = 0.00;
        double percentage = 0.00;
        double TotalPrice = 0.00;
        double total = 0.00;
        double quantity = 0.00;
        double Total = 0.00;
        String billNo = null;
        String transNo = null;
        String payMode = null;
        String patientAcc = null;
        String cardNo = null;
        String AccDesc = null;
        String scheme = null;
        String cardName = null;
        String isurer = null;
        String expDate = null;
        String staffNo = null;
        String BillNo = null;
        String glAcc = null;
        // String BillNo = null;
        String code = null;
        String user = null;
        String prescNo = null;
        String glAcc2 = null;
        String chbox = null;
        int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "Do you really want to Save?", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

        if (exitOption == javax.swing.JOptionPane.YES_OPTION) {

            double presc = java.lang.Double.parseDouble(jTextField8.getText());

            if (jCheckBox1.isSelected()) {
                chbox = "OP";
            } else {
                if (jCheckBox2.isSelected()) {
                    chbox = "WI";
                } else {
                    if (jCheckBox3.isSelected()) {
                        chbox = "IP";
                    }
                }
            }

            try {

                connectDB.setAutoCommit(false);

                java.sql.Statement psq = connectDB.createStatement();
                java.sql.ResultSet rstq = psq.executeQuery("select currval('prescription_no')");
                while (rstq.next()) {
                    rstq.getObject(1).toString();

                    prescNo = rstq.getObject(1).toString();
                }

                connectDB.commit();
                connectDB.setAutoCommit(true);

                int paid = 0;
                int notpaid = 0;
                java.sql.Statement ps = connectDB.createStatement();
                java.sql.ResultSet rst = ps.executeQuery("select count(patient_no) from pb_doctors_request where paid = true and revenue_code ilike 'pharm%' and patient_no = '" + jTextField9.getText() + "' and inv_no = '" + prescNo + "'");

                while (rst.next()) {
                    paid = rst.getInt(1);
                }
                java.sql.Statement psb = connectDB.createStatement();
                java.sql.ResultSet rstb = psb.executeQuery("select count(patient_no) from pb_doctors_request where paid = false and revenue_code ilike 'pharm%' and patient_no = '" + jTextField9.getText() + "' and inv_no = '" + prescNo + "'");

                while (rstb.next()) {
                    notpaid = rstb.getInt(1);
                }
                if (paid > 0) {
                    //        com.afrisoftech.txtreports.PrescriptionTakenTxt policy = new com.afrisoftech.txtreports.PrescriptionTakenTxt(connectDB, jTextField9.getText(), jTextField1.getText(), prescNo, jTextField5.getText());
                }
                if (notpaid > 0) {
                    com.afrisoftech.txtreports.PrescriptionTxt policy = new com.afrisoftech.txtreports.PrescriptionTxt(connectDB, jTextField9.getText(), jTextField1.getText(), prescNo, paymentModeTxt.getText());
                }
                //   BillInvoicePdf policy = new BillInvoicePdf();
                //   policy.BillInvoicePdf(connectDB,jTextField9.getText(), jTextField1.getText(),jTextField3.getText(),prescNo,jTextField5.getText(),jTable1,datePicker1.getDate());

                // }
                //  jComboBox2.setSelectedItem(null);
            } catch (java.sql.SQLException sq) {

                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    sql.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

        }        // Add your handling code here:
    }//GEN-LAST:event_jButton122ActionPerformed

    private void jButton121ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton121ActionPerformed
        double amount1 = 0.00;
        double percentage = 0.00;
        double TotalPrice = 0.00;
        double total = 0.00;
        double quantity = 0.00;
        double Total = 0.00;
        String billNo = null;
        String transNo = null;
        String payMode = null;
        String patientAcc = null;
        String cardNo = null;
        String AccDesc = null;
        String scheme = null;
        String cardName = null;
        String isurer = null;
        String expDate = null;
        String staffNo = null;
        String BillNo = null;
        String glAcc = null;
        // String BillNo = null;
        String code = null;
        String user = null;
        String prescNo = null;
        String glAcc2 = null;
        String chbox = null;
        int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "Do you really want to Save?", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

        if (exitOption == javax.swing.JOptionPane.YES_OPTION) {

            double presc = java.lang.Double.parseDouble(jTextField8.getText());

            if (jCheckBox1.isSelected()) {
                chbox = "OP";
            } else {
                if (jCheckBox2.isSelected()) {
                    chbox = "WI";
                } else {
                    if (jCheckBox3.isSelected()) {
                        chbox = "IP";
                    }
                }
            }

            try {

                connectDB.setAutoCommit(false);
                jButton12ActionPerformed(evt);

                java.sql.Statement psq = connectDB.createStatement();
                java.sql.ResultSet rstq = psq.executeQuery("select currval('prescription_no')");
                while (rstq.next()) {
                    rstq.getObject(1).toString();

                    prescNo = rstq.getObject(1).toString();
                }

                connectDB.commit();
                connectDB.setAutoCommit(true);

                int paid = 0;
                int notpaid = 0;
                java.sql.Statement ps = connectDB.createStatement();
                java.sql.ResultSet rst = ps.executeQuery("select count(patient_no) from pb_doctors_request where paid = true and revenue_code ilike 'pharm%' and patient_no = '" + jTextField9.getText() + "' and inv_no = '" + prescNo + "'");

                while (rst.next()) {
                    paid = rst.getInt(1);
                }
                java.sql.Statement psb = connectDB.createStatement();
                java.sql.ResultSet rstb = psb.executeQuery("select count(patient_no) from pb_doctors_request where paid = false and revenue_code ilike 'pharm%' and patient_no = '" + jTextField9.getText() + "' and inv_no = '" + prescNo + "'");

                while (rstb.next()) {
                    notpaid = rstb.getInt(1);
                }
                if (paid > 0) {
                    //       com.afrisoftech.txtreports.PrescriptionTakenTxt policy = new com.afrisoftech.txtreports.PrescriptionTakenTxt(connectDB, jTextField9.getText(), jTextField1.getText(), prescNo, jTextField5.getText());
                }
                if (notpaid > 0) {
                    com.afrisoftech.txtreports.PrescriptionTxt policy = new com.afrisoftech.txtreports.PrescriptionTxt(connectDB, jTextField9.getText(), jTextField1.getText(), prescNo, paymentModeTxt.getText());
                }

                for (int k = 0; k < jTable13.getRowCount(); k++) {
                    for (int r = 0; r < jTable13.getColumnCount(); r++) {
                        jTable13.getModel().setValueAt(null, k, r);
                    }
                }

                // }
                //  jComboBox2.setSelectedItem(null);
            } catch (java.sql.SQLException sq) {

                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    sql.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

        }        // Add your handling code here:
    }//GEN-LAST:event_jButton121ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        jButton211ActionPerformed(evt); // Add your handling code here:
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton211ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton211ActionPerformed
        prescriptionsTable.setEditingRow(-1);

        double quantity = 0.00;
        //  try {
        String billNo = null;
        String transNo = null;
        String payMode = null;
        String patientAcc = null;
        String cardNo = null;
        String AccDesc = null;
        String scheme = null;
        String cardName = null;
        String isurer = null;
        String expDate = null;
        String staffNo = null;
        String BillNo = null;
        String glAcc = null;
        // String BillNo = null;
        String code = null;
        String user = null;
        String prescNo = null;
        String glAcc2 = null;
        String chbox = null;

        double amount1 = 0.00;
        double percentage = 0.00;
        double TotalPrice = 0.00;
        double total = 0.00;
        double Total = 0.00;
        int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "Do you really want to Save?", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

        if (exitOption == javax.swing.JOptionPane.YES_OPTION) {

            double presc = java.lang.Double.parseDouble(jTextField8.getText());

            if (jCheckBox1.isSelected()) {
                chbox = "OP";
            } else {
                if (jCheckBox2.isSelected()) {
                    chbox = "WI";
                } else {
                    if (jCheckBox3.isSelected()) {
                        chbox = "IP";
                    }
                }
            }

            try {

                connectDB.setAutoCommit(false);

                //java.sql.PreparedStatement pstmRemove = connectDB.prepareStatement("DELETE FROM hp_pharmacy WHERE patient_no = '" + jTextField9.getText() + "' AND paid = false");
                // pstmRemove.executeUpdate();

                /*
                 * java.sql.Statement psq = connectDB.createStatement();
                 * java.sql.ResultSet rstq = psq.executeQuery("select
                 * nextval('prescription_no')"); while (rstq.next()) {
                 * rstq.getObject(1).toString();
                 *
                 * prescNo = rstq.getObject(1).toString(); }
                 */
//                prescNo = jTable1.getValueAt(0, 2).toString();
                java.sql.Statement stm12 = connectDB.createStatement();
                java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                while (rse12.next()) {

                    patientAcc = rse12.getObject(1).toString();
                    AccDesc = rse12.getObject(2).toString();
                }

                java.sql.Statement ps11 = connectDB.createStatement();
                java.sql.ResultSet rst11 = ps11.executeQuery("select current_user");
                while (rst11.next()) {
                    rst11.getObject(1).toString();

                    user = rst11.getObject(1).toString();
                }
                java.sql.Statement stm122 = connectDB.createStatement();
                java.sql.ResultSet rse122 = stm122.executeQuery("select code,activity from pb_activity where activity_category ='IP'");
                while (rse122.next()) {

                    code = rse122.getObject(1).toString();
                    glAcc = rse122.getObject(2).toString();
                }
                for (int i = 0; i < prescriptionsTable.getRowCount(); i++) {
                    if (prescriptionsTable.getModel().getValueAt(i, 0) != null) {
                        int rows = prescriptionsTable.getRowCount();
                        System.out.println(rows);
                    }

                    if (prescriptionsTable.getModel().getValueAt(i, 0) != null && prescriptionsTable.getModel().getValueAt(i, 7) != null) {
                        if (Boolean.valueOf(prescriptionsTable.getModel().getValueAt(i, 7).toString()) == java.lang.Boolean.TRUE) {
                            presc = java.lang.Double.parseDouble(jTextField8.getText());

                            /*
                             * Total =
                             * java.lang.Double.parseDouble(jTextField3.getText());
                             *
                             * amount1 =
                             * java.lang.Double.parseDouble(jTable1.getValueAt(i,
                             * 9).toString()); if (Total > presc) { percentage =
                             * (amount1 / Total) * 100;
                             *
                             * TotalPrice = ((percentage / 100) * presc) +
                             * amount1; } else { TotalPrice = amount1; }
                             * java.sql.PreparedStatement pstmtSel =
                             * connectDB.prepareStatement("select units from
                             * st_stock_item where description = ?");
                             *
                             * pstmtSel.setString(1,
                             * jTable1.getModel().getValueAt(i, 0).toString());
                             *
                             * java.sql.ResultSet rse121 =
                             * pstmtSel.executeQuery();
                             *
                             * System.out.println("Done selection for quoted
                             * variables");
                             *
                             * //java.sql.Statement stm121 =
                             * connectDB.createStatement(); //java.sql.ResultSet
                             * rse121 = stm121.executeQuery("select units from
                             * st_stock_item where description
                             * ='"+jTable1.getModel().getValueAt(i,0).toString()+"'");
                             * while (rse121.next()) {
                             *
                             * glAcc2 = rse121.getObject(1).toString(); }
                             * java.sql.PreparedStatement pstmt1 =
                             * connectDB.prepareStatement("insert into
                             * hp_pharmacy
                             * values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                             * pstmt1.setString(1, jTextField9.getText());
                             * pstmt1.setString(2, jTextField1.getText());
                             * pstmt1.setDouble(3,
                             * java.lang.Double.valueOf(jTable1.getValueAt(i,
                             * 1).toString())); //
                             * pstmt1.setObject(4,jTable1.getValueAt(i,5).toString());
                             * pstmt1.setDouble(4, TotalPrice); //
                             * pstmt1.setDouble(4,presc); pstmt1.setObject(5,
                             * jTable1.getValueAt(i, 0).toString());
                             * pstmt1.setDouble(7,
                             * java.lang.Double.valueOf(jTable1.getValueAt(i,
                             * 3).toString())); pstmt1.setObject(8,
                             * jTable1.getValueAt(i, 6).toString());
                             * pstmt1.setBoolean(6, false); pstmt1.setString(9,
                             * prescNo); pstmt1.setObject(10,
                             * jTextField36.getText()); pstmt1.setBoolean(11,
                             * true); pstmt1.setString(12, glAcc2);
                             * pstmt1.setDate(13,
                             * com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                             * pstmt1.setObject(14,
                             * jComboBox1.getSelectedItem());
                             * pstmt1.setObject(15, "OP"); pstmt1.setObject(16,
                             * jTextField5.getText()); pstmt1.setObject(17, "");
                             * pstmt1.setDouble(18, TotalPrice - amount1);
                             * pstmt1.setString(19, user); pstmt1.setObject(20,
                             * jTextField93.getText()); pstmt1.executeUpdate();
                             * /* java.sql.PreparedStatement pstmt33 =
                             * connectDB.prepareStatement("insert into
                             * st_sub_stores
                             * values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                             * pstmt33.setObject(2, jTable1.getValueAt(i,
                             * 0).toString()); pstmt33.setString(12, units);
                             * pstmt33.setDouble(4,
                             * java.lang.Double.valueOf(jTable1.getValueAt(i,
                             * 1).toString())); pstmt33.setObject(1,
                             * jTextField42.getText()); pstmt33.setDouble(3, 0);
                             * pstmt33.setDouble(7, 0); pstmt33.setDouble(5,
                             * java.lang.Double.valueOf(jTable1.getValueAt(i,
                             * 3).toString())); pstmt33.setDouble(6,
                             * java.lang.Double.valueOf(jTable1.getValueAt(i,
                             * 5).toString())); // pstmt33.setString(7,"0");
                             * pstmt33.setDate(10,
                             * com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                             * pstmt33.setString(8, transNo);
                             * pstmt33.setObject(9, jTextField361.getText());
                             * //pstmt33.setString(11,code);
                             * pstmt33.setString(13, jTextField42.getText());
                             * pstmt33.setString(11, userName);
                             * pstmt33.setString(14, jTextField9.getText() + " "
                             * + jTextField1.getText());
                             * pstmt33.executeUpdate();
                             *
                             *
                             * quantity =
                             * Double.parseDouble(jTable1.getModel().getValueAt(i,
                             * 1).toString());
                             */
                            //  java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("UPDATE st_stock_prices SET balance =balance - "+new java.lang.Double(quantity)+" WHERE product = '"+jTable1.getValueAt(i,0).toString()+"' and department ilike '"+jTextField4.getText()+"'");
                            //  pstmt31.executeUpdate();
                            //  java.sql.PreparedStatement pstmt3 = connectDB.prepareStatement("UPDATE st_stock_item SET quantity_instock = quantity_instock - "+new java.lang.Double(quantity)+" WHERE description = '"+jTable1.getValueAt(i,0).toString()+"'");
                            // pstmt3.executeUpdate();

                            /*
                             * java.sql.PreparedStatement pstmt33 =
                             * connectDB.prepareStatement("insert into
                             * st_sub_stores
                             * values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                             * pstmt33.setObject(2, jTable1.getValueAt(i,
                             * 0).toString()); pstmt33.setString(12, units);
                             * pstmt33.setDouble(4,
                             * java.lang.Double.valueOf(jTable1.getValueAt(i,
                             * 1).toString())); pstmt33.setObject(1,
                             * jTextField42.getText()); pstmt33.setDouble(3, 0);
                             * pstmt33.setDouble(7, 0); pstmt33.setDouble(5,
                             * java.lang.Double.valueOf(jTable1.getValueAt(i,
                             * 3).toString())); pstmt33.setDouble(6,
                             * java.lang.Double.valueOf(jTable1.getValueAt(i,
                             * 5).toString())); // pstmt33.setString(7,"0");
                             * pstmt33.setDate(10,
                             * com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                             * pstmt33.setString(8, transNo);
                             * pstmt33.setObject(9, jTextField361.getText());
                             * //pstmt33.setString(11,code);
                             * pstmt33.setString(13, jTextField42.FgetText());
                             * pstmt33.setString(11, userName);
                             * pstmt33.setString(14, jTextField9.getText() + " "
                             * + jTextField1.getText());
                             * pstmt33.executeUpdate();
                             */
                            java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE hp_pharmacy SET collected = true,quantity = '" + prescriptionsTable.getValueAt(i, 1).toString() + "',amount = '" + prescriptionsTable.getValueAt(i, 9).toString() + "' where patient_no = '" + jTextField9.getText() + "' and description = '" + prescriptionsTable.getValueAt(i, 0).toString() + "' and date_prescribed > (current_date - 2)");
                            pstmt46.executeUpdate();

                            java.sql.PreparedStatement pstmt46x = connectDB.prepareStatement("UPDATE pb_doctors_request SET collected = true where patient_no = '" + jTextField9.getText() + "' and service ilike '" + prescriptionsTable.getValueAt(i, 0).toString() + "' and trans_date > current_date - 2");
                            pstmt46x.executeUpdate();
                        }
                    }
                }

                int paid = 0;
                int notpaid = 0;
                java.sql.Statement ps = connectDB.createStatement();
                java.sql.ResultSet rst = ps.executeQuery("select count(patient_no) from pb_doctors_request where paid = true and revenue_code ilike 'pharm%' and patient_no = '" + jTextField9.getText() + "' and inv_no = '" + prescNo + "'");

                while (rst.next()) {
                    paid = rst.getInt(1);
                }
                java.sql.Statement psb = connectDB.createStatement();
                java.sql.ResultSet rstb = psb.executeQuery("select count(patient_no) from pb_doctors_request where paid = false and revenue_code ilike 'pharm%' and patient_no = '" + jTextField9.getText() + "' and inv_no = '" + prescNo + "'");

                while (rstb.next()) {
                    notpaid = rstb.getInt(1);
                }
                if (paid > 0) {
                    //      com.afrisoftech.txtreports.PrescriptionTakenTxt policy = new com.afrisoftech.txtreports.PrescriptionTakenTxt(connectDB, jTextField9.getText(), jTextField1.getText(), prescNo, jTextField5.getText());
                }
                if (notpaid > 0) {
                    com.afrisoftech.txtreports.PrescriptionTxt policy = new com.afrisoftech.txtreports.PrescriptionTxt(connectDB, jTextField9.getText(), jTextField1.getText(), prescNo, paymentModeTxt.getText());
                }
                // java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request SET paid = true,collected = false where patient_no = '" + jTextField9.getText() + "' and revenue_code ilike 'pharm%' and trans_date='" + datePicker1.getDate().toString() + "'");
                // pstmt46.executeUpdate();
                connectDB.commit();
                connectDB.setAutoCommit(true);

                //  BillInvoicePdf policy = new BillInvoicePdf();
                //    policy.BillInvoicePdf(connectDB,jTextField9.getText(), jTextField1.getText(),jTextField3.getText(),prescNo,jTextField5.getText(),jTable1,datePicker1.getDate());
                //   jButton111ActionPerformed(evt);
                //javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully", "Comfirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                // jTextField1.setText("");
                jTextField2.setText("");

                for (int k = 0; k < prescriptionsTable.getRowCount(); k++) {
                    for (int r = 0; r < prescriptionsTable.getColumnCount(); r++) {
                        prescriptionsTable.getModel().setValueAt(null, k, r);
                    }
                }

                jTextField3.setText("0.00");
                jTextField15.setText("0.00");
                // }
                //  jComboBox2.setSelectedItem(null);
            } catch (java.sql.SQLException sq) {

                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    sql.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

        }

        /*
         * } catch(java.lang.Exception ex) {
         * System.out.println(ex.getMessage());
         * javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR :
         * Please double check your entries.",
         * "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
         *
         *
         * }
         */ // Add your handling code here:
    }//GEN-LAST:event_jButton211ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        jButton21ActionPerformed(evt);       // Add your handling code here:
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        prescriptionsTable.setEditingRow(-1);
        if (prescriptionsTable.isEditing()) {
            prescriptionsTable.getCellEditor().stopCellEditing();
        }
        double quantity = 0.00;
        //  try {
        String billNo = null;
        String transNo = null;
        String payMode = null;
        String patientAcc = null;
        String cardNo = null;
        String AccDesc = null;
        String scheme = null;
        String cardName = null;
        String isurer = null;
        String expDate = null;
        String user = null;
        String BillNo = null;
        String glAcc = null;
        // String BillNo = null;
        String code = null;
        String strength = null;
        String prescNo = null;
        String glAcc2 = null;
        String chbox = null;

        double amount1 = 0.00;
        double percentage = 0.00;
        double TotalPrice = 0.00;
        double total = 0.00;
        double Total = 0.00;
        int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "Do you really want to Save?", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

        if (exitOption == javax.swing.JOptionPane.YES_OPTION) {

            double presc = java.lang.Double.parseDouble(jTextField8.getText());

            if (jCheckBox1.isSelected()) {
                chbox = "OP";
            } else {
                if (jCheckBox2.isSelected()) {
                    chbox = "WI";
                } else {
                    if (jCheckBox3.isSelected()) {
                        chbox = "IP";
                    }
                }
            }

            try {

                connectDB.setAutoCommit(false);

                prescNo = prescriptionsTable.getValueAt(0, 2).toString();
                java.sql.Statement stm12 = connectDB.createStatement();
                java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                while (rse12.next()) {

                    patientAcc = rse12.getObject(1).toString();
                    AccDesc = rse12.getObject(2).toString();
                }

                java.sql.Statement ps11 = connectDB.createStatement();
                java.sql.ResultSet rst11 = ps11.executeQuery("select current_user");
                while (rst11.next()) {
                    rst11.getObject(1).toString();

                    user = rst11.getObject(1).toString();
                }
                java.sql.Statement stm122 = connectDB.createStatement();
                java.sql.ResultSet rse122 = stm122.executeQuery("select code,activity from pb_activity where activity_category ='IP'");
                while (rse122.next()) {

                    code = rse122.getObject(1).toString();
                    glAcc = rse122.getObject(2).toString();
                }
                for (int i = 0; i < prescriptionsTable.getRowCount(); i++) {
                    //if (jTable1.getModel().getValueAt(i, 0) != null) {
                    int rows = prescriptionsTable.getRowCount();
                    System.out.println(rows);
                    // }

                    if (prescriptionsTable.getModel().getValueAt(i, 0) != null && prescriptionsTable.getModel().getValueAt(i, 7) != null) {
                        if (Boolean.valueOf(prescriptionsTable.getModel().getValueAt(i, 7).toString()) == java.lang.Boolean.TRUE) {
                            presc = java.lang.Double.parseDouble(jTextField8.getText());

                            Total = java.lang.Double.parseDouble(jTextField3.getText());

                            amount1 = java.lang.Double.parseDouble(prescriptionsTable.getValueAt(i, 9).toString());
                            if (Total > presc) {
                                percentage = (amount1 / Total) * 100;

                                TotalPrice = ((percentage / 100) * presc) + amount1;
                            } else {
                                TotalPrice = amount1;
                            }
                            java.sql.PreparedStatement pstmtSel = connectDB.prepareStatement("select units,product_id,strength,department from st_stock_prices where product_id = ? AND department ILIKE '%pharma%'");

                            pstmtSel.setString(1, prescriptionsTable.getModel().getValueAt(i, 10).toString());

                            java.sql.ResultSet rse121 = pstmtSel.executeQuery();

                            System.out.println("Done selection for quoted variables");

                            //java.sql.Statement stm121 = connectDB.createStatement();
                            //java.sql.ResultSet rse121 = stm121.executeQuery("select units from st_stock_item where description ='"+jTable1.getModel().getValueAt(i,0).toString()+"'");
                            while (rse121.next()) {

                                units = rse121.getObject(1).toString();
                                code = rse121.getObject(2).toString();
                                strength = rse121.getObject(3).toString();
                                jTextField42.setText(rse121.getObject(4).toString());
                            }

                            java.sql.PreparedStatement pstmt33 = connectDB.prepareStatement("insert into st_sub_stores values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                            pstmt33.setObject(1, jTextField42.getText());
                            pstmt33.setObject(2, prescriptionsTable.getValueAt(i, 0).toString());
                            pstmt33.setDouble(3, 0);

                            pstmt33.setDouble(4, java.lang.Double.valueOf(prescriptionsTable.getValueAt(i, 1).toString()));
                            pstmt33.setDouble(5, java.lang.Double.valueOf(prescriptionsTable.getValueAt(i, 8).toString()));
                            pstmt33.setDouble(6, java.lang.Double.valueOf(prescriptionsTable.getValueAt(i, 9).toString()));

                            pstmt33.setDouble(7, 0);
                            pstmt33.setString(8, prescNo);
                            pstmt33.setObject(9, jTextField361.getText());
                            pstmt33.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                            pstmt33.setString(11, user);
                            pstmt33.setString(12, units);
                            pstmt33.setString(13, jTextField42.getText());
                            pstmt33.setString(14, jTextField9.getText() + " " + jTextField1.getText());
                            pstmt33.setDouble(15, amount1 / java.lang.Double.valueOf(prescriptionsTable.getValueAt(i, 1).toString()));
                            pstmt33.setObject(16, code);
                            pstmt33.setString(17, strength);
                            pstmt33.executeUpdate();

                            quantity = Double.parseDouble(prescriptionsTable.getModel().getValueAt(i, 1).toString());

                            java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE hp_pharmacy SET collected = true,quantity = '" + prescriptionsTable.getValueAt(i, 1).toString() + "',amount = '" + prescriptionsTable.getValueAt(i, 9).toString() + "' where patient_no = '" + jTextField9.getText() + "' and description = '" + prescriptionsTable.getValueAt(i, 0).toString() + "' and date_prescribed > (current_date - 2)");
                            pstmt46.executeUpdate();

                            java.sql.PreparedStatement pstmt46x = connectDB.prepareStatement("UPDATE pb_doctors_request SET collected = true where patient_no = '" + jTextField9.getText() + "' and service ilike '" + prescriptionsTable.getValueAt(i, 0).toString() + "' and trans_date > current_date - 2");
                            pstmt46x.executeUpdate();
                        }
                    }
                }
                int paid = 0;
                int notpaid = 0;
                java.sql.Statement ps = connectDB.createStatement();
                java.sql.ResultSet rst = ps.executeQuery("select count(patient_no) from pb_doctors_request where paid = true and revenue_code ilike 'pharm%' and patient_no = '" + jTextField9.getText() + "' and inv_no = '" + prescNo + "'");

                while (rst.next()) {
                    paid = rst.getInt(1);
                }
                java.sql.Statement psb = connectDB.createStatement();
                java.sql.ResultSet rstb = psb.executeQuery("select count(patient_no) from pb_doctors_request where paid = false and revenue_code ilike 'pharm%' and patient_no = '" + jTextField9.getText() + "' and inv_no = '" + prescNo + "'");

                while (rstb.next()) {
                    notpaid = rstb.getInt(1);
                }
                if (paid > 0) {
                    // com.afrisoftech.txtreports.PrescriptionTakenTxt policy = new com.afrisoftech.txtreports.PrescriptionTakenTxt(connectDB, jTextField9.getText(), jTextField1.getText(), prescNo, jTextField5.getText());
                }
                if (notpaid > 0) {
                    com.afrisoftech.txtreports.PrescriptionTxt policy = new com.afrisoftech.txtreports.PrescriptionTxt(connectDB, jTextField9.getText(), jTextField1.getText(), prescNo, paymentModeTxt.getText());
                }
                // java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request SET paid = true,collected = false where patient_no = '" + jTextField9.getText() + "' and revenue_code ilike 'pharm%' and trans_date='" + datePicker1.getDate().toString() + "'");
                // pstmt46.executeUpdate();
                connectDB.commit();
                connectDB.setAutoCommit(true);

                //  BillInvoicePdf policy = new BillInvoicePdf();
                //    policy.BillInvoicePdf(connectDB,jTextField9.getText(), jTextField1.getText(),jTextField3.getText(),prescNo,jTextField5.getText(),jTable1,datePicker1.getDate());
                javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully", "Comfirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                // jTextField1.setText("");
                jTextField2.setText("");

                for (int k = 0; k < prescriptionsTable.getRowCount(); k++) {
                    for (int r = 0; r < prescriptionsTable.getColumnCount(); r++) {
                        prescriptionsTable.getModel().setValueAt(null, k, r);
                    }
                }

                jTextField3.setText("0.00");
                jTextField15.setText("0.00");
                // }
                //  jComboBox2.setSelectedItem(null);
            } catch (java.sql.SQLException sq) {

                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    sql.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

        }

        /*
         * } catch(java.lang.Exception ex) {
         * System.out.println(ex.getMessage());
         * javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR :
         * Please double check your entries.",
         * "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
         *
         *
         * }
         */
        // Add your handling code here:
    }//GEN-LAST:event_jButton21ActionPerformed

    private void jButton112ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton112ActionPerformed
        try {
            double amount = 0.00;
            double percentage = 0.00;
            double TotalPrice = 0.00;
            double total = 0.00;
            double presc = 0.00;
            double Total = 0.00;

            String prescNo = null;
            String glAcc2 = null;
            String code = null;
            String glAcc = null;
            String transNo1 = null;
            String user = null;

            try {
                //   jButton111ActionPerformed(evt);
                int paid = 0;
                java.sql.Statement ps = connectDB.createStatement();
                java.sql.ResultSet rst = ps.executeQuery("select count(patient_no) from pb_doctors_request where paid = true and revenue_code ilike 'pharm%' and patient_no = '" + jTextField9.getText() + "'");
                while (rst.next()) {
                    paid = rst.getInt(1);
                }
                if (paid > 0) {
                    //      com.afrisoftech.txtreports.PrescriptionTakenTxt policy = new com.afrisoftech.txtreports.PrescriptionTakenTxt(connectDB, "WK" + prescNo, jTextField911.getText(), prescNo, "Cash");
                } else {

                    com.afrisoftech.txtreports.PrescriptionTxt policy = new com.afrisoftech.txtreports.PrescriptionTxt(connectDB, "WK" + prescNo, jTextField911.getText(), prescNo, "Cash");
                }
                connectDB.commit();
                connectDB.setAutoCommit(true);

                // BillInvoicePdf policy = new BillInvoicePdf();
                // policy.BillInvoicePdf(connectDB,"-", jTextField911.getText(),jTextField31.getText(),prescNo,"Cash",jTable11,datePicker1.getDate());
                // javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully","Comfirmation Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                //            jTextField11.setText("");
                //  jComboBox2.setSelectedItem(null);
            } catch (java.sql.SQLException sq) {

                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

        } catch (java.lang.Exception ex) {
            System.out.println(ex.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }
        // Add your handling code here:
    }//GEN-LAST:event_jButton112ActionPerformed

    private void jButton111ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton111ActionPerformed
        jTable11.setEditingRow(-1);

        try {
            double amount = 0.00;
            double percentage = 0.00;
            double TotalPrice = 0.00;
            double total = 0.00;
            double presc = 0.00;
            double Total = 0.00;

            String prescNo = null;
            String glAcc2 = null;
            String code = null;
            String glAcc = null;
            String transNo1 = null;
            String user = null;

            try {
                connectDB.setAutoCommit(false);
                java.sql.PreparedStatement pstmRemove = connectDB.prepareStatement("DELETE FROM hp_pharmacy WHERE patient_name ilike '" + jTextField911.getText() + "%' AND date_prescribed = '" + datePicker1.getDate() + "'::date");

                pstmRemove.executeUpdate();
                java.sql.Statement ps = connectDB.createStatement();
                java.sql.ResultSet rst = ps.executeQuery("select nextval('prescription_no')");
                while (rst.next()) {
                    rst.getObject(1).toString();
                    prescNo = rst.getObject(1).toString();
                }
                java.sql.Statement psw = connectDB.createStatement();
                java.sql.ResultSet rstw = psw.executeQuery("select current_user");
                while (rstw.next()) {
                    user = rstw.getObject(1).toString();
                }
                java.sql.Statement stm122 = connectDB.createStatement();
                java.sql.ResultSet rse122 = stm122.executeQuery("select code,activity from pb_activity where activity ILIKE '%" + jTextField41.getText() + "%'");
                while (rse122.next()) {

                    code = rse122.getObject(1).toString();
                    glAcc = rse122.getObject(2).toString();

                }

                java.sql.Statement ps11 = connectDB.createStatement();
                java.sql.ResultSet rst11 = ps11.executeQuery("select 'WI'||nextval('otherop_no_seq')");
                while (rst11.next()) {
                    rst11.getObject(1).toString();

                    this.jTextField4.setText(rst11.getObject(1).toString());
                    // user = rst11.getObject(2).toString();
                }

                java.sql.PreparedStatement pstmt2v = connectDB.prepareStatement("insert into hp_visit_id values(?,?,?,?,?,?)");

                pstmt2v.setString(1, jTextField4.getText());
                pstmt2v.setString(2, jTextField911.getText());
                pstmt2v.setString(3, "Cash");
                pstmt2v.setString(4, prescNo);

                pstmt2v.setString(5, "'now'");
                pstmt2v.setString(6, user);

                pstmt2v.executeUpdate();

                for (int i = 0; i < jTable11.getRowCount(); i++) {
                    if (jTable11.getModel().getValueAt(i, 0) != null) {

                        presc = java.lang.Double.parseDouble(jTextField81.getText());

                        Total = java.lang.Double.parseDouble(jTextField31.getText());

                        amount = java.lang.Double.parseDouble(jTable11.getValueAt(i, 5).toString());

                        if (Total > presc) {

                            //   amount = java.lang.Double.parseDouble(jTable11.getValueAt(i, 5).toString());
                            percentage = (amount / Total) * 100;

                            TotalPrice = ((percentage / 100) * presc) + amount;
                        } else {
                            //  amount = java.lang.Double.parseDouble(jTable11.getValueAt(i, 5).toString());

                            //  percentage = (amount1/Total)*100;
                            TotalPrice = amount;
                        }

                        java.sql.Statement stm121 = connectDB.createStatement();
                        java.sql.Statement ps1 = connectDB.createStatement();
                        java.sql.ResultSet rst1 = ps1.executeQuery("select nextval('visit_no_seq'),current_user");
                        while (rst1.next()) {
                            rst1.getObject(1).toString();
                        }

                        transNo1 = rst1.getObject(1).toString();
                        user = rst1.getObject(2).toString();
                        java.sql.ResultSet rse121 = stm121.executeQuery("select CASE WHEN (units !='' OR units IS NOT NULL) THEN units ELSE '' END AS units from st_stock_item where description ='" + jTable11.getModel().getValueAt(i, 0).toString() + "'");
                        while (rse121.next()) {
                            glAcc2 = rse121.getObject(1).toString();
                        }

                        java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into hp_pharmacy values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                        pstmt1.setString(1, jTextField4.getText());
                        pstmt1.setString(2, jTextField911.getText());
                        pstmt1.setObject(3, jTable11.getValueAt(i, 1).toString());
                        pstmt1.setDouble(4, TotalPrice);
                        //pstmt1.setObject(4,jTable11.getValueAt(i,5).toString());
                        pstmt1.setObject(5, jTable11.getValueAt(i, 0).toString());
                        pstmt1.setString(6, "false");
                        pstmt1.setObject(7, jTable11.getValueAt(i, 3).toString());
                        pstmt1.setObject(8, jTable11.getValueAt(i, 6).toString());
                        pstmt1.setString(9, "WK" + prescNo);
                        pstmt1.setString(10, jTextField7.getText());
                        pstmt1.setString(11, "false");
                        pstmt1.setString(12, glAcc2);
                        pstmt1.setString(13, datePicker1.getDate().toString());
                        pstmt1.setObject(14, "Pharmacy");
                        pstmt1.setObject(15, "OP");
                        pstmt1.setObject(16, "Cash");
                        pstmt1.setObject(17, "-");
                        pstmt1.setDouble(18, TotalPrice - amount);
                        pstmt1.setString(19, user);
                        pstmt1.setObject(20, jTextField71.getText());
                        pstmt1.executeUpdate();

                        java.sql.PreparedStatement pstmt21 = connectDB.prepareStatement("insert into hp_patient_visit values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");

                        pstmt21.setString(1, "-");
                        pstmt21.setString(2, jTextField1.getText());
                        pstmt21.setString(3, "SR");
                        pstmt21.setString(4, "Cash");
                        pstmt21.setString(5, transNo1);
                        //  pstmt2.setString(4,jTextField2.getText());
                        pstmt21.setString(6, jTable11.getValueAt(i, 0).toString());
                        pstmt21.setString(7, jTable11.getValueAt(i, 1).toString());
                        pstmt21.setString(9, jTable11.getValueAt(i, 5).toString());
                        // pstmt2.setObject(8,jTable1.getValueAt(i,4).toString());
                        pstmt21.setString(8, jTextField41.getText());
                        pstmt21.setString(11, datePicker1.getDate().toString());
                        pstmt21.setString(10, jTable11.getValueAt(i, 0).toString());
                        pstmt21.setString(12, "0");
                        pstmt21.setString(13, jTextField7.getText());
                        pstmt21.setString(14, user);
                        pstmt21.setString(15, "'now'");
                        pstmt21.setString(16, "Billing");
                        pstmt21.executeUpdate();

                        java.sql.PreparedStatement pstmt33 = connectDB.prepareStatement("insert into st_sub_stores values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                        pstmt33.setObject(2, jTable11.getValueAt(i, 0).toString());
                        pstmt33.setString(12, units);
                        pstmt33.setString(4, jTable11.getValueAt(i, 1).toString());
                        pstmt33.setObject(1, jTextField42.getText());
                        pstmt33.setString(3, "0");
                        pstmt33.setObject(7, "0");
                        pstmt33.setString(5, jTable11.getValueAt(i, 3).toString());
                        pstmt33.setString(6, jTable11.getValueAt(i, 5).toString());
                        // pstmt33.setString(7,"0");
                        pstmt33.setString(10, datePicker1.getDate().toString());
                        pstmt33.setString(8, transNo1);
                        pstmt33.setObject(9, jTextField361.getText());
                        //pstmt33.setString(11,code);
                        pstmt33.setString(13, jTextField41.getText());
                        pstmt33.setString(11, userName);
                        pstmt33.setString(14, jTextField911.getText());
                        pstmt33.executeUpdate();

                        double quantity = Double.parseDouble(jTable11.getModel().getValueAt(i, 1).toString());

                        java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("UPDATE st_stock_prices SET balance =balance - " + new java.lang.Double(quantity) + " WHERE product ILIKE '" + jTable11.getValueAt(i, 0).toString() + "%' and department ilike '" + jTextField41.getText() + "%'");
                        pstmt31.executeUpdate();
                    }
                }

                connectDB.commit();
                connectDB.setAutoCommit(true);

                //      BillInvoicePdf policy = new BillInvoicePdf();
                //      policy.BillInvoicePdf(connectDB,"-", jTextField911.getText(),jTextField31.getText(),prescNo,"Cash",jTable11,datePicker1.getDate());
                javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully", "Comfirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                //            jTextField11.setText("");
                jTextField21.setText("");
                jTextField31.setText("");
                for (int k = 0; k < jTable11.getRowCount(); k++) {
                    for (int r = 0; r < jTable11.getColumnCount(); r++) {
                        jTable11.getModel().setValueAt(null, k, r);
                    }
                }

                //            this.jComboBox131.setSelectedItem(null);
                jTextField31.setText("0.00");
                jTextField14.setText("0.00");
                //  jComboBox2.setSelectedItem(null);
            } catch (java.sql.SQLException sq) {

                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

        } catch (java.lang.Exception ex) {
            System.out.println(ex.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }
        // Add your handling code here:
    }//GEN-LAST:event_jButton111ActionPerformed

    private void searchButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton4ActionPerformed
        searchButtonClicked4();    // Add your handling code here:
    }//GEN-LAST:event_searchButton4ActionPerformed

    private void jSearchTable4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable4MouseClicked
        jTextField93.setText(jSearchTable4.getValueAt(jSearchTable4.getSelectedRow(), 0).toString());

        int j = 0;

        /*
         * java.lang.Object selectedGuaran = cmbox1.getSelectedItem(); int i =
         * jTable11.getSelectedRow(); if (i > -1){ if (selectedGuaran != null) {
         *
         * try { java.sql.Statement pstmt = connectDB.createStatement();
         * java.sql.ResultSet rs = pstmt.executeQuery("select
         * sp.selling_price::numeric from st_stock_prices sp where product =
         * '"+selectedGuaran+"'"); while (rs.next()){
         * jTable11.getModel().setValueAt(rs.getObject(1),i,3); } }
         * catch(java.sql.SQLException sqlex){
         * System.out.println(sqlex.getMessage()); }
         *
         */
        jSearchDialog4.dispose();  // Add your handling code here:
    }//GEN-LAST:event_jSearchTable4MouseClicked

    private void jTextField115CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField115CaretUpdate
        if (jTextField115.getCaretPosition() > 0) {
            jSearchTable4.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select chq_no FROM pb_documents_register WHERE chq_no ILIKE '%" + jTextField115.getText() + "%' and used = 'false' and doc_name ilike '%pha%' order by chq_no"));

            /*
             * try { searchRowSet4.execute("select chq_no FROM
             * pb_documents_register WHERE chq_no ILIKE
             * '"+jTextField115.getText()+"%' and used = 'false' and doc_name
             * ilike '%pha%' order by chq_no");
             *
             * jSearchTable4.setModel(new
             * org.netbeans.lib.sql.models.TableModel(searchRowSet4, new
             * org.netbeans.lib.sql.models.TableModel.Column[] { new
             * org.netbeans.lib.sql.models.TableModel.Column("chq_no",
             * "Prescription No.", false) // new
             * org.netbeans.lib.sql.models.TableModel.Column("selling_price",
             * "Selling price", false), // new
             * org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl
             * code", false) }));
             */
            jSearchScrollPane4.setViewportView(jSearchTable4);
            System.out.println("Cannot sort out");

        }  // Add your handling code here:
    }//GEN-LAST:event_jTextField115CaretUpdate

    private void jButton93ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton93ActionPerformed
        this.jSearchDialog4.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton93ActionPerformed
    private void searchButtonClicked4() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.jTextField93.getLocationOnScreen();

        jSearchDialog4.setSize(400, 200);

        jSearchDialog4.setLocation(point);

        jSearchDialog4.setVisible(true);

    }
    private void searchButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton3ActionPerformed
        searchButton112Clicked();     //  searchButtonClicked3();  // Add your handling code here:
    }//GEN-LAST:event_searchButton3ActionPerformed
    // Add your handling code here:

    private void searchButton112Clicked() {

        System.out.println("Showing dialog");

        jSearchDialog11.dispose();
        java.awt.Point point = this.jTextField361.getLocationOnScreen();

        jSearchDialog11.setSize(400, 200);

        jSearchDialog11.setLocation(point);
        jSearchDialog11.setVisible(true);

    }
    private void jButton32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton32ActionPerformed
        jTextField13.setText("");
        jTextField32.setText("0.00");
        jTextField52.setText("");
        jTextField22.setText("");
        jTextField92.setText("");
        // jTextField32.setText("0.00");

        for (int k = 0; k < jTable13.getRowCount(); k++) {
            for (int r = 0; r < jTable13.getColumnCount(); r++) {
                jTable13.getModel().setValueAt(null, k, r);
            }
        }

        //  jTextField3.setText("0.00");// Add your handling code here:
    }//GEN-LAST:event_jButton32ActionPerformed

    private void jButton41ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton41ActionPerformed
        this.setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_jButton41ActionPerformed

    private void jButton63ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton63ActionPerformed

        int rows2Delete = jTable13.getSelectedRowCount();

        int[] selectedRows = jTable13.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable13.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable13.getModel();

                defTableModel.removeRow(jTable13.getSelectedRow());
            }
        }

        tableModel1TableChanged();
        // Add your handling code here:
    }//GEN-LAST:event_jButton63ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        prescriptionsTable.setEditingRow(-1);

        //   try {
        double amount1 = 0.00;
        double percentage = 0.00;
        double TotalPrice = 0.00;
        double total = 0.00;
        double Total = 0.00;
        double sellPrice = 0.00;
        String billNo = null;
        String transNo = null;
        String payMode = null;
        String patientAcc = null;
        String cardNo = null;
        String AccDesc = null;
        String scheme = null;
        String cardName = null;
        String isurer = null;
        String expDate = null;
        String staffNo = null;
        String BillNo = null;
        String glAcc = null;
        // String BillNo = null;
        String code = null;
        String userName = null;
        String prescNo = null;
        String units = null;
        String chbox = null;
        String costofSaleCode = null;
        String stockCode = null;
        String costofSale = null;
        String stock = null;
        String opvisitid = null;

        XmlWriter = new Vector();
        Standards = new Vector();
        Copay_ment = new Vector();
        Times = new Vector();
        Dates = new Vector();
        Amounts = new Vector();
        Quantity = new Vector();
        Codes = new Vector();
        CodeDesc = new Vector();
        CodeType = new Vector();
        EncType = new Vector();
        Diagnosis = new Vector();
        DiagCode = new Vector();
        com.afrisoftech.dbadmin.Smart writexml = new com.afrisoftech.dbadmin.Smart();
        java.util.Calendar calendar = java.util.Calendar.getInstance();

        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

        System.out.println(datenowSql1.toString());

        // java.sql.Timestamp datenowSql= new java.sql.Timestamp(dateNow);
        java.sql.Time timeNow = new java.sql.Time(dateNow);
        System.out.println(timeNow.toString());
        System.out.println("DateP " + datePicker1.getDate().toString());

        double presc = java.lang.Double.parseDouble(jTextField8.getText());

        int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "Do you really want to Save?", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

        if (exitOption == javax.swing.JOptionPane.YES_OPTION) {

            if (jCheckBox1.isSelected()) {
                chbox = "OP";
            } else {
                if (jCheckBox2.isSelected()) {
                    chbox = "WI";
                } else {
                    if (jCheckBox3.isSelected()) {
                        chbox = "IP";
                    }
                }
            }

            int Billdays = 0;

            java.util.Date billDate = null;
            java.util.Date admDate = null;
            try {

                java.sql.Statement ps11w1 = connectDB.createStatement();
                java.sql.ResultSet rst11w1 = ps11w1.executeQuery("select distinct slip_no,date from credit_acc_slip where patient_no = '" + jTextField9.getText() + "' order by date desc limit 1");
                while (rst11w1.next()) {

                    opvisitid = rst11w1.getObject(1).toString();
                }

                java.sql.Statement stm12n = connectDB.createStatement();
                java.sql.ResultSet rse12n = stm12n.executeQuery("select adm_date from hp_inpatient_register where patient_no ='" + jTextField9.getText() + "'");
                while (rse12n.next()) {
                    admDate = rse12n.getDate(1);

                }
                /*
                 * java.sql.Statement psd = connectDB.createStatement();
                 * java.sql.ResultSet rsetd = psd.executeQuery("select back_date
                 * from ac_limit_cons");
                 *
                 * while (rsetd.next()) {
                 *
                 * Billdays = rsetd.getInt(1); //billDate1 = rset9.getDate(2); }
                 * java.sql.Statement ps9 = connectDB.createStatement();
                 * java.sql.ResultSet rset9 = ps9.executeQuery("select
                 * (current_date-(" + Billdays + ")),current_date");
                 *
                 * while (rset9.next()) {
                 *
                 * billDate = rset9.getDate(1); billDate1 = rset9.getDate(2); }
                 */

                if (this.datePicker1.getDate().before(admDate)) {
                    javax.swing.JOptionPane.showMessageDialog(this, "Billing date is beyond: " + billDate + " CHECK billing date", "Date Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                } else {

                    connectDB.setAutoCommit(false);

                    // java.sql.PreparedStatement pstmRemove = connectDB.prepareStatement("DELETE FROM hp_pharmacy WHERE patient_no = '"+jTextField9.getText()+"' AND paid = false AND date_prescribed = date('now')");
                    // pstmRemove.executeUpdate();

                    /*
                     * java.sql.Statement psq = connectDB.createStatement();
                     * java.sql.ResultSet rstq = psq.executeQuery("select
                     * nextval('prescription_no')"); while (rstq.next()) {
                     * rstq.getObject(1).toString(); prescNo =
                     * rstq.getObject(1).toString();
                     *
                     * }
                     */
                    java.sql.Statement psqq = connectDB.createStatement();
                    java.sql.ResultSet rstqq = psqq.executeQuery("select nextval('transaction_no_seq')");
                    while (rstqq.next()) {
                        transNo = rstqq.getObject(1).toString();
                    }
                    //  if (!(jTextField5.getText().equals("Cash") ||jTextField5.getText().equals(""))){
                    java.sql.Statement stm1 = connectDB.createStatement();
                    java.sql.ResultSet rse1 = stm1.executeQuery("select pay_mode,account_no,description,payer,expiry_date from hp_patient_register where patient_no ='" + jTextField9.getText() + "'");
                    while (rse1.next()) {
                        cardNo = rse1.getString(2);
                        scheme = rse1.getString(3);
                        cardName = rse1.getString(3);
                        isurer = rse1.getString(4);
                        expDate = rse1.getString(5);
                        staffNo = rse1.getString(2);
                    }
                    java.sql.Statement stm12 = connectDB.createStatement();
                    java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                    while (rse12.next()) {

                        patientAcc = rse12.getObject(1).toString();
                        AccDesc = rse12.getObject(2).toString();
                    }
                    java.sql.Statement ps11 = connectDB.createStatement();
                    java.sql.ResultSet rst11 = ps11.executeQuery("select current_user");
                    while (rst11.next()) {
                        rst11.getObject(1).toString();

                        //billNo = rst11.getObject(1).toString();
                        userName = rst11.getObject(1).toString();

                    }

                    /*
                     * Standards.add(jTextField141.getText().toString());
                     * Standards.add("Demo Hospital"); Standards.add("");
                     * Standards.add(opvisitid);
                     * Standards.add(jTextField1.getText().toString());
                     * Standards.add(jTextField151.getText().toString());
                     * Standards.add("HospitalClaimsFile.xml");
                     *
                     * Copay_ment.add("0"); Copay_ment.add("0");
                     * Copay_ment.add("0"); Copay_ment.add("cash");
                     */
                    for (int i = 0; i < prescriptionsTable.getRowCount(); i++) {

                        if (prescriptionsTable.getModel().getValueAt(i, 0) != null) {
                            String pharmCode = null;
                            String pharmCateg = null;
                            java.sql.Statement pstBa = connectDB.createStatement();
                            java.sql.ResultSet rsBa = pstBa.executeQuery("select gl_code,department from st_stock_prices where product_id = '" + prescriptionsTable.getModel().getValueAt(i, 10).toString() + "'");

                            while (rsBa.next()) {
                                pharmCode = rsBa.getString(1);
                                pharmCateg = rsBa.getString(2);

                            }

                            java.sql.Statement pst21 = connectDB.createStatement();
                            java.sql.ResultSet rs11 = pst21.executeQuery("select cost_of_sale,stock_code from pb_departments where income_account = '" + pharmCode + "'");
                            while (rs11.next()) {
                                costofSaleCode = rs11.getObject(1).toString();
                                stockCode = rs11.getObject(2).toString();
                            }
                            java.sql.Statement pst211 = connectDB.createStatement();
                            java.sql.ResultSet rs111 = pst211.executeQuery("select activity from pb_activity where code = '" + costofSaleCode + "'");
                            while (rs111.next()) {
                                costofSale = rs111.getObject(1).toString();

                            }
                            java.sql.Statement pst2111 = connectDB.createStatement();
                            java.sql.ResultSet rs1111 = pst2111.executeQuery("select activity from pb_activity where code = '" + stockCode + "'");
                            while (rs1111.next()) {
                                stock = rs1111.getObject(1).toString();
                            }

                            presc = java.lang.Double.parseDouble(jTextField8.getText());

                            Total = java.lang.Double.parseDouble(jTextField3.getText());

                            amount1 = java.lang.Double.parseDouble(prescriptionsTable.getValueAt(i, 5).toString());

                            if (Total > presc) {
                                percentage = (amount1 / Total) * 100;

                                TotalPrice = ((percentage / 100) * presc) + amount1;
                            } else {
                                TotalPrice = amount1;
                            }

                            java.sql.Statement stm121 = connectDB.createStatement();
                            java.sql.ResultSet rse121 = stm121.executeQuery("select units from st_stock_item where item_code ='" + prescriptionsTable.getModel().getValueAt(i, 10).toString() + "'");
                            while (rse121.next()) {
                                glAcc2 = rse121.getObject(1).toString();
                            }

                            java.sql.Statement pstB = connectDB.createStatement();
                            java.sql.ResultSet rsB = pstB.executeQuery("select transfer_price,units from st_stock_prices where product_id = '" + prescriptionsTable.getModel().getValueAt(i, 10).toString() + "'");

                            while (rsB.next()) {
                                price = rsB.getDouble(1);
                            }
                            // units = rsB.getString(2);
                            qty = java.lang.Double.parseDouble(prescriptionsTable.getValueAt(i, 1).toString());
                            amount = price * qty;
                            if (amount > 10000) {
                                amount = (qty * sellPrice) * 0.67;
                            } else {

                                amount = amount;
                            }
                            /*
                             * java.sql.Statement ps11w1 =
                             * connectDB.createStatement(); java.sql.ResultSet
                             * rst11w1 = ps11w1.executeQuery("select distinct
                             * slip_no,date from credit_acc_slip where
                             * patient_no = '"+jTextField9.getText()+"' order by
                             * date desc limit 1"); while (rst11w1.next()){
                             *
                             *
                             * opvisitid = rst11w1.getObject(1).toString(); }
                             */
                            java.sql.Statement stm1211 = connectDB.createStatement();
                            java.sql.ResultSet rse1211 = stm1211.executeQuery("select units from st_stock_prices where product_id ='" + prescriptionsTable.getModel().getValueAt(i, 10).toString() + "'");
                            while (rse1211.next()) {
                                units = rse1211.getObject(1).toString();
                            }

                            /*
                             * java.sql.PreparedStatement pstmt1 =
                             * connectDB.prepareStatement("INSERT INTO
                             * hp_pharmacy
                             * values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                             * pstmt1.setString(1, jTextField9.getText());
                             * pstmt1.setString(2, jTextField1.getText());
                             * pstmt1.setDouble(3,
                             * java.lang.Double.valueOf(jTable1.getValueAt(i,
                             * 1).toString())); pstmt1.setDouble(4, TotalPrice);
                             * pstmt1.setObject(5, jTable1.getValueAt(i,
                             * 0).toString()); pstmt1.setDouble(7,
                             * java.lang.Double.valueOf(jTable1.getValueAt(i,
                             * 3).toString())); pstmt1.setObject(8,
                             * jTable1.getValueAt(i, 6).toString());
                             * pstmt1.setBoolean(6, false); pstmt1.setString(9,
                             * prescNo); pstmt1.setObject(10,
                             * jTextField36.getText()); pstmt1.setBoolean(11,
                             * false); pstmt1.setString(12, units);
                             * pstmt1.setDate(13,
                             * com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                             * pstmt1.setObject(14,
                             * jComboBox1.getSelectedItem().toString());
                             * pstmt1.setString(15, "OP"); pstmt1.setString(16,
                             * jTextField5.getText()); pstmt1.setObject(17, "");
                             * pstmt1.setDouble(18, TotalPrice - amount1);
                             * pstmt1.setString(19, userName);
                             * pstmt1.setObject(20, jTextField93.getText());
                             * pstmt1.setObject(21, jTextField12.getText());
                             * pstmt1.executeUpdate();
                             *
                             */
                            java.sql.PreparedStatement pstmt1a = connectDB.prepareStatement("insert into st_stock_cardex values(?,? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?)");
                            pstmt1a.setString(1, null);
                            pstmt1a.setObject(3, stock);
                            pstmt1a.setString(2, jComboBox1.getSelectedItem().toString());
                            pstmt1a.setDate(4, null);
                            pstmt1a.setDouble(5, amount);
                            pstmt1a.setDouble(6, 00);
                            pstmt1a.setObject(7, glAcc2);
                            pstmt1a.setObject(8, "");
                            pstmt1a.setString(9, null);
                            pstmt1a.setString(10, null);
                            pstmt1a.setDouble(11, 00);
                            pstmt1a.setDouble(12, 00);
                            pstmt1a.setDouble(13, 00);
                            pstmt1a.setString(14, jTextField1.getText());
                            pstmt1a.setString(15, userName);
                            pstmt1a.setString(16, "");
                            pstmt1a.setString(17, null);
                            pstmt1a.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                            pstmt1a.setString(19, jComboBox1.getSelectedItem().toString());
                            pstmt1a.setString(20, "Issuing");
                            pstmt1a.setDouble(21, 00);
                            pstmt1a.setString(23, stockCode);
                            pstmt1a.setDouble(22, 00);
                            pstmt1a.setString(24, "");
                            pstmt1a.setString(25, Stock);
                            pstmt1a.setString(26, transNo);
                            pstmt1a.setDouble(27, java.lang.Double.valueOf(prescriptionsTable.getValueAt(i, 1).toString()));
                            pstmt1a.setString(28, userName);
                            pstmt1a.executeUpdate();

                            java.sql.PreparedStatement pstmt2a = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                            pstmt2a.setObject(1, costofSaleCode);
                            pstmt2a.setObject(2, costofSale);
                            pstmt2a.setString(3, jTextField9.getText());
                            pstmt2a.setString(4, jTextField1.getText());
                            pstmt2a.setString(5, "");
                            pstmt2a.setString(6, "");
                            pstmt2a.setString(7, "");
                            pstmt2a.setString(8, chbox);
                            pstmt2a.setString(9, "");
                            pstmt2a.setString(10, paymentModeTxt.getText());
                            pstmt2a.setString(11, "");
                            pstmt2a.setString(12, "");
                            pstmt2a.setString(13, "");
                            pstmt2a.setString(14, prescriptionsTable.getValueAt(i, 0).toString());
                            pstmt2a.setString(15, "Issuing");
                            pstmt2a.setDouble(16, amount);
                            pstmt2a.setDouble(17, 00);
                            pstmt2a.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                            pstmt2a.setString(19, transNo);
                            pstmt2a.setBoolean(20, false);
                            pstmt2a.setBoolean(21, false);
                            pstmt2a.setBoolean(22, false);
                            pstmt2a.setString(23, userName);
                            pstmt2a.executeUpdate();
                            // }

                            java.sql.PreparedStatement pstmt33 = connectDB.prepareStatement("insert into st_sub_stores values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                            pstmt33.setObject(2, prescriptionsTable.getValueAt(i, 0).toString());
                            pstmt33.setString(12, units);
                            pstmt33.setDouble(4, java.lang.Double.valueOf(prescriptionsTable.getValueAt(i, 1).toString()));
                            pstmt33.setObject(1, jComboBox1.getSelectedItem().toString());
                            pstmt33.setDouble(3, 0);
                            pstmt33.setDouble(7, 0);
                            pstmt33.setDouble(5, java.lang.Double.valueOf(prescriptionsTable.getValueAt(i, 8).toString()));
                            pstmt33.setDouble(6, java.lang.Double.valueOf(prescriptionsTable.getValueAt(i, 9).toString()));
                            // pstmt33.setString(7,"0");
                            pstmt33.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                            pstmt33.setString(8, transNo);
                            pstmt33.setObject(9, jTextField361.getText());
                            //pstmt33.setString(11,code);
                            pstmt33.setString(13, jComboBox1.getSelectedItem().toString());
                            pstmt33.setString(11, userName);
                            pstmt33.setString(14, jTextField9.getText() + " " + jTextField1.getText());
                            pstmt33.executeUpdate();

                            double quantity = Double.parseDouble(prescriptionsTable.getModel().getValueAt(i, 1).toString());

                            java.sql.Statement stm121e = connectDB.createStatement();
                            java.sql.ResultSet rse121e = stm121e.executeQuery("select activity from pb_activity where code ='" + prescriptionsTable.getValueAt(i, 6).toString() + "'");
                            while (rse121e.next()) {

                                glAcc = rse121e.getObject(1).toString();
                            }
                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                            //1 for (int i = 0; i < jTable1.getRowCount(); i++){
                            pstmt.setString(1, jTextField9.getText());
                            pstmt.setObject(2, prescriptionsTable.getValueAt(i, 0).toString());
                            pstmt.setString(3, jTextField2.getText());
                            pstmt.setString(4, paymentModeTxt.getText());
                            pstmt.setString(5, transNo);
                            pstmt.setString(7, scheme);
                            pstmt.setString(6, cardNo);
                            pstmt.setString(8, cardName);
                            pstmt.setString(9, isurer);
                            pstmt.setDate(10, null);
                            pstmt.setString(11, "");
                            pstmt.setDouble(12, java.lang.Double.valueOf(prescriptionsTable.getValueAt(i, 9).toString()));
                            pstmt.setDouble(13, 0.00);
                            pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                            pstmt.setObject(15, patientAcc);
                            pstmt.setString(16, pharmCateg);
                            pstmt.setDouble(17, java.lang.Double.valueOf(prescriptionsTable.getValueAt(i, 1).toString()));
                            pstmt.setObject(18, staffNo);
                            pstmt.setBoolean(19, false);
                            pstmt.setString(20, "Billing");
                            pstmt.setBoolean(21, false);
                            pstmt.setString(22, AccDesc);
                            pstmt.setString(23, jTextField12.getText());
                            pstmt.setString(24, userName);
                            pstmt.setString(25, billNo);
                            pstmt.setString(26, "OP");
                            pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                            pstmt.setString(28, jTextField12.getText());
                            pstmt.executeUpdate();

                            java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                            pstmt2.setObject(1, pharmCode);
                            pstmt2.setString(2, pharmCateg);
                            pstmt2.setString(3, jTextField9.getText());
                            pstmt2.setString(4, jTextField1.getText());
                            pstmt2.setString(5, "");
                            pstmt2.setString(6, cardNo);
                            pstmt2.setString(7, cardName);
                            pstmt2.setString(8, "OP");
                            pstmt2.setString(9, jTextField36.getText());
                            pstmt2.setString(10, paymentModeTxt.getText());
                            pstmt2.setString(11, "");
                            pstmt2.setString(12, "");
                            pstmt2.setString(13, "");
                            pstmt2.setString(14, prescriptionsTable.getValueAt(i, 0).toString());
                            pstmt2.setString(15, "Revenue");
                            pstmt2.setDouble(16, 0.00);
                            pstmt2.setDouble(17, java.lang.Double.valueOf(prescriptionsTable.getValueAt(i, 9).toString()));
                            pstmt2.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                            pstmt2.setString(19, transNo);
                            pstmt2.setBoolean(20, false);
                            pstmt2.setBoolean(21, false);
                            pstmt2.setBoolean(22, false);
                            pstmt2.setString(23, userName);
                            pstmt2.executeUpdate();

                            //  String q_ty = jTable1.getValueAt(i,1).toString();
                            //  int Qi = q_ty.indexOf(".");.
                            //String q_t=q_ty;
                            String q_ty = prescriptionsTable.getValueAt(i, 1).toString();

                            String q_t = "";
                            int Qi = q_ty.indexOf(".");
                            System.out.println("QI has a value of" + Qi);
                            //if(Qi>-1){

                            q_t = q_ty.substring(0, Qi);

                            System.out.println("The value of q_t is based as " + q_t.toString());
                            // }else{
                            //   q_t =q_ty;
                            // }
                            // double q_ty =java.lang.Double.parseDouble((jTable1.getValueAt(i,1).toString());

                            /*
                             * Dates.add(datenowSql1.toString());
                             *
                             * Times.add(timeNow.toString());
                             * Amounts.add(jTable1.getValueAt(i, 5).toString());
                             * Quantity.add(q_t); Codes.add("");
                             * CodeDesc.add(jTable1.getValueAt(i,
                             * 0).toString()); CodeType.add(glAcc);
                             * System.out.println("Child data 1");
                             * Diagnosis.add("unknown"); EncType.add("0");
                             * DiagCode.add("0");
                             */
                        }
                    }

                    if (this.jTextField151.getText().equals("0")) {
                        System.out.println("NOT YET 1");
                    } else {
                        XmlWriter.add(Times);
                        XmlWriter.add(Dates);
                        XmlWriter.add(Amounts);
                        XmlWriter.add(Quantity);
                        XmlWriter.add(Codes);
                        XmlWriter.add(CodeDesc);
                        XmlWriter.add(CodeType);
                        XmlWriter.add(EncType);
                        XmlWriter.add(Diagnosis);
                        XmlWriter.add(DiagCode);
                        XmlWriter.add(Standards);
                        XmlWriter.add("");

                        XmlWriter.add("hospitalclaimsfile.xml");
                        writexml.SmartLinkXmlStart(XmlWriter, Copay_ment);
                        System.out.println("PASSED 1");
                    }
                    java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request SET paid = true,collected = false where patient_no = '" + jTextField9.getText() + "' and revenue_code ilike 'pharm%' and trans_date='" + datePicker1.getDate().toString() + "'");
                    pstmt46.executeUpdate();

                    connectDB.commit();
                    connectDB.setAutoCommit(true);

                    //      BillInvoicePdf policy = new BillInvoicePdf();
                    //     policy.BillInvoicePdf(connectDB,jTextField9.getText(), jTextField1.getText(),jTextField3.getText(),prescNo,jTextField5.getText(),jTable1,datePicker1.getDate());
                    javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully", "Comfirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    //jTextField1.setText("");
                    jTextField2.setText("");
                    jTextField3.setText("0.00");
                    jTextField15.setText("0.00");
                    for (int k = 0; k < prescriptionsTable.getRowCount(); k++) {
                        for (int r = 0; r < prescriptionsTable.getColumnCount(); r++) {
                            prescriptionsTable.getModel().setValueAt(null, k, r);
                        }
                    }

                    jTextField3.setText("0.00");

                }
                //  jComboBox2.setSelectedItem(null);
            } catch (java.sql.SQLException sq) {

                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }
        }

        /*
         * } catch(java.lang.Exception ex) {
         * System.out.println(ex.getMessage());
         * javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR :
         * Please double check your entries.",
         * "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
         *
         *
         * }
         */
        // Add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        jTable13.setEditingRow(-1);

        // try {
        double amount1 = 0.00;
        double percentage = 0.00;
        double TotalPrice = 0.00;
        double total = 0.00;
        double presc = 0.00;
        double Total = 0.00;

        java.util.Calendar calendar = java.util.Calendar.getInstance();

        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

        System.out.println(datenowSql1.toString());

        java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

        System.out.println(datenowSql.toString());

        String billNo = null;
        String transNo = null;
        String payMode = null;
        String patientAcc = null;
        String cardNo = null;
        String AccDesc = null;
        String scheme = null;
        String cardName = null;
        String isurer = null;
        String expDate = null;
        String staffNo = null;
        String BillNo = null;
        String glAcc = null;
        String Desc = null;
        String code = null;
        String user = null;
        String prescNo = null;
        java.util.Date admDate = null;
        String visitid = "-";
        String costofSaleCode = null;
        String stockCode = null;
        String costofSale = null;
        String stock = null;

        double sellPrice = 0.00;
        int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "Do you really want to Save?", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

        if (exitOption == javax.swing.JOptionPane.YES_OPTION) {

            presc = java.lang.Double.parseDouble(jTextField8.getText());

            if (jCheckBox1.isSelected()) {
                chbox = "OP";
            } else {
                if (jCheckBox2.isSelected()) {
                    chbox = "WI";
                } else {
                    if (jCheckBox3.isSelected()) {
                        chbox = "IP";
                    }
                }
            }

            try {

                connectDB.setAutoCommit(false);
                java.sql.Statement psq = connectDB.createStatement();
                java.sql.ResultSet rstq = psq.executeQuery("select nextval('prescription_no')");
                while (rstq.next()) {
                    rstq.getObject(1).toString();

                    prescNo = rstq.getObject(1).toString();
                }
                System.out.println(prescNo);
                java.sql.Statement stmtz = connectDB.createStatement();

                java.sql.ResultSet rset = stmtz.executeQuery("select visit_id,date_admitted  from hp_admission where patient_no ='" + jTextField92.getText() + "' and check_out = false  order by date_admitted desc limit 1");
                while (rset.next()) {

                    visitid = rset.getObject(1).toString();
                }

                System.out.println("This is the visit ID " + visitid);
                if (paymentModeTxt.getText().equals("Scheme")) {
                    java.sql.Statement stm1 = connectDB.createStatement();
                    java.sql.ResultSet rse1 = stm1.executeQuery("select payment_mode,card_no,scheme,card_name,isurer,expiry_date,scheme_staff_no from hp_patient_card where patient_no ='" + jTextField92.getText() + "'");
                    while (rse1.next()) {
                        cardNo = rse1.getString(2);
                    }
                    scheme = rse1.getString(3);
                    cardName = rse1.getString(4);
                    isurer = rse1.getString(5);
                    expDate = rse1.getString(6);
                    staffNo = rse1.getString(7);
                }
                System.out.println(staffNo);
                java.sql.Statement stm12 = connectDB.createStatement();
                java.sql.ResultSet rse12 = stm12.executeQuery("select adm_date from hp_inpatient_register where patient_no ='" + jTextField92.getText() + "'");
                while (rse12.next()) {
                    admDate = rse12.getDate(1);
                }
                System.out.println(admDate);
                // if (exp.before(date)){
                if (this.datePicker1.getDate().before(admDate)) {
                    javax.swing.JOptionPane.showMessageDialog(this, "Admission date is : " + admDate + " CHECK billing date", "Date Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                } else {
                    java.sql.Statement stm126 = connectDB.createStatement();
                    java.sql.ResultSet rse126 = stm126.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                    while (rse126.next()) {

                        patientAcc = rse126.getObject(1).toString();
                        AccDesc = rse126.getObject(2).toString();
                    }
                    System.out.println(AccDesc);
                    //  connectDB.setAutoCommit(false);
                    java.sql.Statement ps = connectDB.createStatement();
                    java.sql.ResultSet rst = ps.executeQuery("select nextval('transaction_no_seq')");
                    while (rst.next()) {
                        rst.getObject(1).toString();

                        transNo = rst.getObject(1).toString();
                    }
                    System.out.println(transNo);
                    java.sql.Statement ps11 = connectDB.createStatement();
                    java.sql.ResultSet rst11 = ps11.executeQuery("select nextval('billing_no_seq'),current_user");
                    while (rst11.next()) {
                        rst11.getObject(1).toString();

                        billNo = rst11.getObject(1).toString();
                        user = rst11.getObject(2).toString();
                    }
                    System.out.println(user);
                    java.sql.Statement stm122 = connectDB.createStatement();
                    java.sql.ResultSet rse122 = stm122.executeQuery("select code,activity from pb_activity where activity_category ='IP'");
                    while (rse122.next()) {

                        //code = rse122.getObject(1).toString();
                        glAcc = rse122.getObject(2).toString();
                    }
                    System.out.println(glAcc);

                    java.sql.Statement pst2 = connectDB.createStatement();
                    java.sql.ResultSet rs = pst2.executeQuery("select current_user");
                    while (rs.next()) {
                        user = rs.getObject(1).toString();
                    }

                    System.out.println(user);

                    java.sql.Statement pst21 = connectDB.createStatement();
                    java.sql.ResultSet rs11 = pst21.executeQuery("select code,activity,current_user from pb_activity where activity_category = 'S'");
                    while (rs11.next()) {
                        actCode = rs11.getObject(1).toString();
                        Stock = rs11.getObject(2).toString();
                        userName = rs11.getObject(3).toString();
                    }
                    System.out.println(userName);
                    java.sql.Statement pst211 = connectDB.createStatement();
                    java.sql.ResultSet rs111 = pst211.executeQuery("select code,activity from pb_activity where activity_category = 'CS'");
                    while (rs111.next()) {
                        glCode = rs111.getObject(1).toString();
                        glType = rs111.getObject(2).toString();
                    }
                    System.out.println(glType);
                    for (int i = 0; i < jTable13.getRowCount(); i++) {
                        if (jTable13.getModel().getValueAt(i, 0) != null) {
                            java.sql.Statement pst21c2 = connectDB.createStatement();
                            java.sql.ResultSet rs11c2 = pst21c2.executeQuery("select code,activity from pb_activity where code = '" + jTable13.getValueAt(i, 6).toString() + "'");
                            while (rs11c2.next()) {
                                code = rs11c2.getObject(1).toString();
                                Desc = rs11c2.getObject(2).toString();
                            }
                            java.sql.Statement pst21c = connectDB.createStatement();
                            java.sql.ResultSet rs11c = pst21c.executeQuery("select cost_of_sale,stock_code from pb_departments where income_account = '" + jTable13.getValueAt(i, 6).toString() + "'");
                            while (rs11c.next()) {
                                costofSaleCode = rs11c.getObject(1).toString();
                                stockCode = rs11c.getObject(2).toString();
                            }
                            java.sql.Statement pst211c = connectDB.createStatement();
                            java.sql.ResultSet rs111c = pst211c.executeQuery("select activity from pb_activity where code = '" + costofSaleCode + "'");
                            while (rs111c.next()) {
                                costofSale = rs111c.getObject(1).toString();

                            }
                            java.sql.Statement pst2111c = connectDB.createStatement();
                            java.sql.ResultSet rs1111c = pst2111c.executeQuery("select activity from pb_activity where code = '" + stockCode + "'");
                            while (rs1111c.next()) {
                                stock = rs1111c.getObject(1).toString();
                            }

                            presc = java.lang.Double.parseDouble(jTextField82.getText());

                            Total = java.lang.Double.parseDouble(jTextField32.getText());
                            if (Total > presc) {
                                amount1 = java.lang.Double.parseDouble(jTable13.getValueAt(i, 5).toString());

                                percentage = (amount1 / Total) * 100;

                                TotalPrice = ((percentage / 100) * presc) + amount1;
                            } else {
                                amount1 = java.lang.Double.parseDouble(jTable13.getValueAt(i, 5).toString());

                                //  percentage = (amount1/Total)*100;
                                TotalPrice = amount1;
                            }
                            java.sql.Statement stm121 = connectDB.createStatement();
                            java.sql.ResultSet rse121 = stm121.executeQuery("select units from st_stock_item where description ='" + jTable13.getModel().getValueAt(i, 0).toString() + "'");
                            while (rse121.next()) {
                                glAcc2 = rse121.getObject(1).toString();
                            }
                            System.out.println(glAcc2);
                            java.sql.Statement pstB = connectDB.createStatement();
                            java.sql.ResultSet rsB = pstB.executeQuery("select transfer_price,units from st_stock_prices where product = '" + jTable13.getModel().getValueAt(i, 0) + "'");

                            while (rsB.next()) {
                                price = rsB.getDouble(1);
                            }
                            // units = rsB.getString(2);
                            qty = java.lang.Double.parseDouble(jTable13.getValueAt(i, 1).toString());
                            sellPrice = java.lang.Double.parseDouble(jTable13.getValueAt(i, 3).toString());
                            amount = price * qty;
                            if (amount > 10000) {
                                amount = (qty * sellPrice) * 0.67;
                            } else {

                                amount = amount;
                            }

                            System.out.println(price);
                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO hp_patient_card VALUES(?,?,?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");

                            pstmt.setString(1, jTextField92.getText());
                            pstmt.setObject(2, jTable13.getValueAt(i, 0).toString());
                            pstmt.setString(3, jTextField22.getText());
                            pstmt.setString(4, jTextField52.getText());
                            pstmt.setString(5, transNo);
                            pstmt.setString(7, scheme);
                            pstmt.setString(6, cardNo);
                            pstmt.setString(8, cardName);
                            pstmt.setString(9, isurer);
                            pstmt.setDate(10, null);
                            pstmt.setObject(11, jTextField361.getText());
                            // pstmt.setObject(12,jTable13.getValueAt(i,5).toString());
                            pstmt.setDouble(12, TotalPrice);
                            pstmt.setDouble(13, 0.00);
                            pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                            pstmt.setObject(15, patientAcc);
                            pstmt.setString(16, jTextField42.getText());
                            pstmt.setDouble(17, java.lang.Double.valueOf(jTable13.getValueAt(i, 1).toString()));
                            pstmt.setObject(18, staffNo);
                            pstmt.setBoolean(19, false);
                            pstmt.setString(20, "Billing");
                            pstmt.setBoolean(21, false);
                            pstmt.setString(22, AccDesc);
                            pstmt.setString(23, visitid);
                            pstmt.setString(24, user);
                            pstmt.setString(25, prescNo);
                            pstmt.setString(26, "IP");
                            pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                            pstmt.setString(28, visitid);

                            //  java.sql.PreparedStatement pstmt8112 = connectDB.prepareStatement("UPDATE pb_activity SET ytd_debit = ytd_debit + '" + TotalPrice + "' where code = '" + patientAcc + "'");
                            // pstmt8112.executeUpdate();
                            pstmt.executeUpdate();

                            java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
                            pstmt2.setString(1, code);
                            pstmt2.setString(2, Desc);
                            pstmt2.setString(3, jTextField92.getText());
                            pstmt2.setString(4, jTextField13.getText());
                            pstmt2.setString(5, "");
                            pstmt2.setString(6, cardNo);
                            pstmt2.setString(7, cardName);
                            pstmt2.setString(8, "IP");
                            pstmt2.setString(9, isurer);
                            pstmt2.setString(10, jTextField52.getText());
                            pstmt2.setString(11, "");
                            pstmt2.setString(12, "");
                            pstmt2.setString(13, "");
                            pstmt2.setString(14, jTable13.getValueAt(i, 0).toString());
                            pstmt2.setString(15, "Revenue");
                            pstmt2.setDouble(16, 0.00);
                            pstmt2.setDouble(17, TotalPrice);
                            // pstmt2.setObject(17,jTable13.getValueAt(i,5).toString());
                            pstmt2.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                            pstmt2.setString(19, transNo);
                            pstmt2.setBoolean(20, false);
                            pstmt2.setBoolean(21, false);
                            pstmt2.setBoolean(22, false);
                            pstmt2.setString(23, user);
                            pstmt2.executeUpdate();

                            java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into hp_pharmacy values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                            pstmt1.setString(1, jTextField92.getText());
                            pstmt1.setString(2, jTextField13.getText());
                            pstmt1.setDouble(3, java.lang.Double.valueOf(jTable13.getValueAt(i, 1).toString()));
                            pstmt1.setDouble(4, TotalPrice);
                            //  pstmt1.setObject(4,jTable13.getValueAt(i,5).toString());
                            pstmt1.setObject(5, jTable13.getValueAt(i, 0).toString());
                            pstmt1.setDouble(7, java.lang.Double.valueOf(jTable13.getValueAt(i, 3).toString()));
                            pstmt1.setObject(8, jTable13.getValueAt(i, 6).toString());
                            pstmt1.setBoolean(6, true);
                            pstmt1.setString(9, prescNo);
                            pstmt1.setObject(10, jTextField361.getText());
                            pstmt1.setBoolean(11, true);
                            pstmt1.setString(12, glAcc2);
                            pstmt1.setDate(13, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                            pstmt1.setString(14, jTextField42.getText());
                            pstmt1.setString(15, "IP");
                            pstmt1.setString(16, jTextField52.getText());
                            pstmt1.setString(17, "-");
                            pstmt1.setDouble(18, TotalPrice - amount1);
                            pstmt1.setString(19, user);
                            pstmt1.executeUpdate();


                            /*
                             * java.sql.PreparedStatement pstmt1a =
                             * connectDB.prepareStatement("insert into
                             * st_stock_cardex values(?,? , ?, ?, ?, ?, ?, ?, ?,
                             * ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
                             * ?,?,?,?,?,?,?,?,?)");
                             *
                             *
                             * pstmt1a.setString(1, null); pstmt1a.setObject(3,
                             * stock); pstmt1a.setString(2,
                             * jTextField42.getText()); pstmt1a.setString(4,
                             * null); pstmt1a.setDouble(5, amount);
                             * pstmt1a.setObject(6, "00"); pstmt1a.setObject(7,
                             * glAcc2); pstmt1a.setObject(8, "");
                             * pstmt1a.setString(9, null); pstmt1a.setString(10,
                             * null); pstmt1a.setString(11, "00");
                             * pstmt1a.setString(12, "00");
                             * pstmt1a.setString(13, "00"); if
                             * (jTextField13.getText().equals("")) {
                             * javax.swing.JOptionPane.showMessageDialog(this,
                             * "Enter patient", "Error Message!",
                             * javax.swing.JOptionPane.ERROR_MESSAGE); } else {
                             * pstmt1a.setString(14, jTextField13.getText()); }
                             *
                             * pstmt1a.setString(15, userName);
                             *
                             * pstmt1a.setString(16, "");
                             *
                             * pstmt1a.setString(17, null);
                             * pstmt1a.setString(18,
                             * datePicker1.getDate().toString());
                             * pstmt1a.setString(19, jTextField42.getText());
                             * pstmt1a.setString(20, "Issuing");
                             * pstmt1a.setObject(21, "00");
                             * pstmt1a.setString(23, stockCode);
                             * pstmt1a.setObject(22, "00");
                             * pstmt1a.setString(24, ""); pstmt1a.setString(25,
                             * Stock); pstmt1a.setString(26, transNo);
                             * pstmt1a.setObject(27, jTable13.getValueAt(i, 1));
                             *
                             * pstmt1a.setString(28, user);
                             * pstmt1a.executeUpdate();
                             *
                             * //java.sql.PreparedStatement pstmt8121 =
                             * connectDB.prepareStatement("UPDATE pb_activity
                             * SET ytd_credit = ytd_credit + '" + amount + "'
                             * where code = '" + actCode + "'");
                             * //pstmt8121.executeUpdate();
                             *
                             * java.sql.PreparedStatement pstmt2a =
                             * connectDB.prepareStatement("insert into ac_ledger
                             * values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
                             * ?, ?, ?, ?, ?,?,?,?)"); pstmt2a.setObject(1,
                             * costofSaleCode); pstmt2a.setObject(2,
                             * costofSale); pstmt2a.setString(3,
                             * jTextField92.getText()); pstmt2a.setString(4,
                             * jTextField13.getText()); pstmt2a.setString(5,
                             * ""); pstmt2a.setString(6, "");
                             * pstmt2a.setString(7, ""); pstmt2a.setString(8,
                             * ""); pstmt2a.setString(9, "");
                             * pstmt2a.setString(10, ""); pstmt2a.setString(11,
                             * ""); pstmt2a.setString(12, "");
                             * pstmt2a.setString(13, ""); pstmt2a.setString(14,
                             * jTable13.getValueAt(i, 0).toString());
                             * pstmt2a.setString(15, "Issuing");
                             * pstmt2a.setDouble(16, amount);
                             * pstmt2a.setObject(17, "00");
                             * pstmt2a.setString(18,
                             * datePicker1.getDate().toString());
                             * pstmt2a.setString(19, transNo);
                             * pstmt2a.setBoolean(20, false);
                             * pstmt2a.setBoolean(21, false);
                             * pstmt2a.setBoolean(22, false);
                             * pstmt2a.setString(23, user);
                             * pstmt2a.executeUpdate(); // }
                             * //java.sql.PreparedStatement pstmt811 =
                             * connectDB.prepareStatement("UPDATE pb_activity
                             * SET ytd_debit = ytd_debit + '" + amount + "'
                             * where code = '" + glCode + "'"); //
                             * pstmt811.executeUpdate();
                             *
                             * /* java.sql.PreparedStatement pstmt3 =
                             * connectDB.prepareStatement("insert into
                             * st_analyse_requisation values(
                             * ?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                             * pstmt3.setObject(1, jTable13.getValueAt(i,
                             * 0).toString()); pstmt3.setString(2, units);
                             * pstmt3.setString(3, jTable13.getValueAt(i,
                             * 1).toString()); pstmt3.setObject(4, "0");
                             * pstmt3.setString(5, "0"); pstmt3.setObject(6,
                             * "0"); pstmt3.setString(7, "0");
                             * pstmt3.setString(8,
                             * datePicker1.getDate().toString());
                             * pstmt3.setString(9, transNo);
                             * pstmt3.setObject(10, "false");
                             * pstmt3.setString(11, code); pstmt3.setString(12,
                             * jTextField42.getText()); pstmt3.setString(13,
                             * user); pstmt3.setString(14, "N");
                             * pstmt3.executeUpdate();
                             */
                            /*
                             * java.sql.PreparedStatement pstmt33 =
                             * connectDB.prepareStatement("insert into
                             * st_sub_stores
                             * values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                             * pstmt33.setObject(2, jTable13.getValueAt(i,
                             * 0).toString()); pstmt33.setString(12, units);
                             * pstmt33.setString(4, jTable13.getValueAt(i,
                             * 1).toString()); pstmt33.setObject(1,
                             * jTextField42.getText()); pstmt33.setString(3,
                             * "0"); pstmt33.setObject(7, "0");
                             * pstmt33.setString(5, jTable13.getValueAt(i,
                             * 3).toString());
                             * //pstmt33.setString(6,jTable13.getValueAt(i,5).toString());
                             * pstmt33.setDouble(6, TotalPrice);
                             * pstmt33.setString(10,
                             * datePicker1.getDate().toString());
                             * pstmt33.setString(8, transNo);
                             * pstmt33.setObject(9, jTextField361.getText());
                             * //pstmt33.setString(11,code);
                             * pstmt33.setString(13, jTextField42.getText());
                             * pstmt33.setString(11, user);
                             * pstmt33.setString(14, jTextField92.getText() + "
                             * " + jTextField13.getText());
                             * pstmt33.executeUpdate();
                             *
                             * double quantity =
                             * Double.parseDouble(jTable13.getModel().getValueAt(i,
                             * 1).toString());
                             */
                            //java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("UPDATE st_stock_prices SET balance =balance - " + new java.lang.Double(quantity) + " WHERE product = '" + jTable13.getValueAt(i, 0).toString() + "' and department ilike '" + jTextField42.getText() + "'");
                            //pstmt31.executeUpdate();
                        }
                    }
                    javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                }

                connectDB.commit();
                connectDB.setAutoCommit(true);

                // BillInvoicePdf policy = new BillInvoicePdf();
                //  policy.BillInvoicePdf(connectDB,jTextField92.getText(), jTextField13.getText(),jTextField32.getText(),prescNo,jTextField52.getText(),jTable13,datePicker1.getDate());
                jTextField32.setText("0.00");
                jTextField10.setText("0.00");
                for (int k = 0; k < jTable13.getRowCount(); k++) {
                    for (int r = 0; r < jTable13.getColumnCount(); r++) {
                        jTable13.getModel().setValueAt(null, k, r);
                    }
                }

                //  jComboBox2.setSelectedItem(null);
            } catch (java.sql.SQLException sq) {

                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }
        }
        /*
         * } catch(java.lang.Exception ex) {
         * System.out.println(ex.getMessage());
         * javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR :
         * Please double check your entries.",
         * "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
         *
         *
         * }
         */
        // Add your handling code here:
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jTable13KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable13KeyReleased
        double resFloat = 0.00;
        if (jTable13.getValueAt(jTable13.getSelectedRow(), jTable13.getSelectedColumn()) != null) {

            float floatCol2 = java.lang.Float.parseFloat(jTable13.getValueAt(jTable13.getSelectedRow(), 1).toString());

            float floatCol3 = java.lang.Float.parseFloat(jTable13.getValueAt(jTable13.getSelectedRow(), 3).toString());

            float resVal = floatCol2 * floatCol3;

            if (jTable13.getValueAt(jTable13.getSelectedRow(), 4) != null) {

                float floatCol4 = java.lang.Float.parseFloat(jTable13.getValueAt(jTable13.getSelectedRow(), 4).toString());

                resVal = (floatCol2 * floatCol3) - floatCol4;
                //  resFloat = resVal;

                jTable13.setValueAt(new java.lang.Float(resVal), jTable13.getSelectedRow(), 5);

                for (int i = 0; i < jTable13.getRowCount(); i++) {

                    if (jTable13.getModel().getValueAt(i, 1) != null) {//toString().compareToIgnoreCase(null) {

                        resFloat = resFloat + Double.parseDouble(jTable13.getValueAt(i, 5).toString());

                        // totalSum = floatTotal + resFloat;
                    }
                }

                this.tableModelTableChanged();

            } else {
                jTable13.setValueAt(new java.lang.Float(resVal), jTable13.getSelectedRow(), 5);
            }
            for (int i = 0; i < jTable13.getRowCount(); i++) {

                if (jTable13.getModel().getValueAt(i, 0) != null) {//toString().compareToIgnoreCase(null) {

                    resFloat = resFloat + Double.parseDouble(jTable13.getValueAt(i, 5).toString());

                }
            }

            this.tableModel1TableChanged();
        }        // Add your handling code here:
    }//GEN-LAST:event_jTable13KeyReleased

    private void jTable13AncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTable13AncestorMoved
        // Add your handling code here:
    }//GEN-LAST:event_jTable13AncestorMoved

    private void jButton92ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton92ActionPerformed
        this.jSearchDialog3.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton92ActionPerformed

    private void jTextField114CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField114CaretUpdate
        if (jTextField114.getCaretPosition() > 0) {
            jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select product,selling_price,gl_code FROM st_stock_prices WHERE product ILIKE '%" + jTextField114.getText() + "%' AND department ILIKE  '%pharmacy%' order by product"));

            /*
             * try { searchRowSet3.execute("select product,selling_price,gl_code
             * FROM st_stock_prices WHERE product ILIKE
             * '"+jTextField114.getText()+"%' AND department =
             * '"+jTextField42.getText()+"' order by product");
             *
             * jSearchTable3.setModel(new
             * org.netbeans.lib.sql.models.TableModel(searchRowSet3, new
             * org.netbeans.lib.sql.models.TableModel.Column[] { new
             * org.netbeans.lib.sql.models.TableModel.Column("product",
             * "Product", false), new
             * org.netbeans.lib.sql.models.TableModel.Column("selling_price",
             * "Selling price", false), new
             * org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl
             * code", false) }));
             */
            jSearchScrollPane3.setViewportView(jSearchTable3);
            System.out.println("Cannot sort out");

        }// Add your handling code here:
    }//GEN-LAST:event_jTextField114CaretUpdate

    private void jSearchTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable3MouseClicked
        this.jTextField114.setText("");
        jTable13.setValueAt(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 0), jTable13.getSelectedRow(), 0);
        jTable13.setValueAt(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 1), jTable13.getSelectedRow(), 3);
        jTable13.setValueAt(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 2), jTable13.getSelectedRow(), 6);
        jTable13.setValueAt(new java.lang.Double(0), jTable13.getSelectedRow(), 4);

        int j = 0;

        /*
         * java.lang.Object selectedGuaran = cmbox1.getSelectedItem(); int i =
         * jTable11.getSelectedRow(); if (i > -1){ if (selectedGuaran != null) {
         *
         * try { java.sql.Statement pstmt = connectDB.createStatement();
         * java.sql.ResultSet rs = pstmt.executeQuery("select
         * sp.selling_price::numeric from st_stock_prices sp where product =
         * '"+selectedGuaran+"'"); while (rs.next()){
         * jTable11.getModel().setValueAt(rs.getObject(1),i,3); } }
         * catch(java.sql.SQLException sqlex){
         * System.out.println(sqlex.getMessage()); }
         *
         */
        double Qty = 0.00;
        try {
            java.sql.Statement pstmt = connectDB.createStatement();
            java.sql.Statement pstmt1 = connectDB.createStatement();

            java.sql.ResultSet rs1 = pstmt1.executeQuery("select count(product) from st_stock_prices sc where product = '" + jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 0) + "' and department = '" + jTextField42.getText() + "'");
            while (rs1.next()) {
                j = rs1.getInt(1);
            }
            if (j > 0) {

                java.sql.ResultSet rs = pstmt.executeQuery("select sum(qty) from stock_balance where description = '" + jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 0) + "' and department ilike '" + jTextField42.getText() + "%'");
                while (rs.next()) {

                    Qty = rs.getDouble(1);
                    //  jTable1.setValueAt(Qty,jTable1.getSelectedRow(),2);
                    jTable13.setValueAt(Qty, jTable13.getSelectedRow(), 2);

                }
            } else {
                jTable13.setValueAt("0.00", jTable13.getSelectedRow(), 2);
            }
        } catch (java.sql.SQLException sqlex) {
            System.out.println(sqlex.getMessage());
        }

        jSearchDialog3.dispose();   // Add your handling code here:
    }//GEN-LAST:event_jSearchTable3MouseClicked
    private void cmbox13MouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane22.getLocationOnScreen();
        jSearchDialog3.setSize(400, 200);
        jSearchDialog3.setLocation(point);
        jSearchDialog3.setVisible(true);

    }
    private void jTable13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable13MouseClicked
        if (jTable13.getSelectedColumn() == 0) {

            this.cmbox13MouseClicked();
        }   // Add your handling code here:
    }//GEN-LAST:event_jTable13MouseClicked

    private void jButton52121ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52121ActionPerformed
        this.jSearchDialog2121.dispose(); // Add your handling code here:
    }//GEN-LAST:event_jButton52121ActionPerformed

    private void jSearchTable2121MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2121MouseClicked
        jTextField92.setText(jSearchTable2121.getValueAt(jSearchTable2121.getSelectedRow(), 0).toString());
        jTextField13.setText(jSearchTable2121.getValueAt(jSearchTable2121.getSelectedRow(), 1).toString());

        int j = 0;
        try {

            java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode from hp_inpatient_register where patient_no  = '" + this.jTextField92.getText().toString() + "'");
            while (rset1.next()) {
                jTextField22.setText(rset1.getObject(1).toString());
                jTextField52.setText(rset1.getObject(2).toString());
            }
        } catch (java.sql.SQLException sqlex) {
            System.out.println(sqlex.getMessage());
        }
        jSearchDialog2121.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable2121MouseClicked

    private void jTextField113121CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField113121CaretUpdate
        if (this.jCheckBox3.isSelected() && this.jCheckBox4.isSelected()) {
            if (jTextField113121.getCaretPosition() < 3) {

                System.out.println("Nothing");
            } else {
                jSearchTable2121.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, name from inpatient_list where name ILIKE '%" + jTextField113121.getText() + "%' order by name"));


                /*
                 * try { // searchRowSet2121.execute("SELECT patient_no,
                 * (upper(second_name||' '||first_name||' '||last_name)) as name
                 * from hp_inpatient_register where second_name||'
                 * '||first_name||' '||last_name ILIKE
                 * '"+jTextField113121.getText()+"%' order by second_name");
                 * searchRowSet2121.execute("SELECT patient_no, name from
                 * inpatient_list where name ILIKE
                 * '"+jTextField113121.getText()+"%' order by name");
                 *
                 *
                 * jSearchTable2121.setModel(new
                 * org.netbeans.lib.sql.models.TableModel(searchRowSet2121, new
                 * org.netbeans.lib.sql.models.TableModel.Column[] { new
                 * org.netbeans.lib.sql.models.TableModel.Column("patient_no",
                 * "Patient no", false), new
                 * org.netbeans.lib.sql.models.TableModel.Column("name", "Name",
                 * false) }));
                 */
                jSearchTable2121.setShowHorizontalLines(false);
                jSearchScrollPane2121.setViewportView(jSearchTable2121);

            }
        } else {
            if (this.jCheckBox3.isSelected() && this.jCheckBox31.isSelected()) {
                if (jTextField113121.getCaretPosition() < 3) {

                    System.out.println("Nothing");
                } else {
                    jSearchTable2121.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, name from inpatient_list where patient_no ILIKE '%" + jTextField113121.getText() + "%' order by patient_no"));

                    /*
                     * try { // searchRowSet2121.execute("SELECT patient_no,
                     * (upper(second_name||' '||first_name||' '||last_name)) as
                     * name from hp_inpatient_register where patient_no ILIKE
                     * '"+jTextField113121.getText()+"%' order by second_name");
                     * searchRowSet2121.execute("SELECT patient_no, name from
                     * inpatient_list where patient_no ILIKE
                     * '"+jTextField113121.getText()+"%' order by patient_no");
                     *
                     *
                     * jSearchTable2121.setModel(new
                     * org.netbeans.lib.sql.models.TableModel(searchRowSet2121,
                     * new org.netbeans.lib.sql.models.TableModel.Column[] { new
                     * org.netbeans.lib.sql.models.TableModel.Column("patient_no",
                     * "Patient no", false), new
                     * org.netbeans.lib.sql.models.TableModel.Column("name",
                     * "Name", false) }));
                     */
                    jSearchTable2121.setShowHorizontalLines(false);
                    jSearchScrollPane2121.setViewportView(jSearchTable2121);

                }
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_jTextField113121CaretUpdate

    private void searchButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton2ActionPerformed
        searchButton2121Clicked(); // Add your handling code here:

        // Add your handling code here:
    }//GEN-LAST:event_searchButton2ActionPerformed
    private void searchButton2121Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.jTextField92.getLocationOnScreen();

        jSearchDialog2121.setSize(400, 200);

        jSearchDialog2121.setLocation(point);

        jSearchDialog2121.setVisible(true);
    }
    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        jPanel13.setVisible(false);
        jPanel1.setVisible(true);
        jPanel11.setVisible(false);

        try {
            java.sql.Statement pstmt = connectDB.createStatement();
            java.sql.ResultSet rs = pstmt.executeQuery("select store_name from st_stores where store_code = 'IP'");

            while (rs.next()) {
                jTextField42.setText(rs.getObject(1).toString());
                // jTextField2.setText(rs.getObject(2).toString());

            }
        } catch (java.sql.SQLException sqlex) {
            System.out.println(sqlex.getMessage());
        }
        //jPanel11.setVisible(true)// Add your handling code here:
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jButton5212ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5212ActionPerformed
        this.jSearchDialog212.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton5212ActionPerformed

    private void jSearchTable212MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable212MouseClicked
        //  jTextField5821.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 1).toString());
/*
         * jTextField912.setText(jSearchTable212.getValueAt(jSearchTable212.getSelectedRow(),
         * 0).toString());
         *
         *
         * int j = 0; try {
         *
         * java.sql.Statement pstmt12 = connectDB.createStatement();
         * java.sql.ResultSet rs12 = pstmt12.executeQuery("select
         * count(patient_name) from hp_pharmacy WHERE patient_name
         * ='"+jSearchTable212.getValueAt(jSearchTable212.getSelectedRow(),0)+"'
         * AND paid = true AND collected = false"); while (rs12.next()){ j =
         * rs12.getInt(1); }
         *
         * if (j > 0) { java.sql.Statement pstmt1 = connectDB.createStatement();
         * java.sql.ResultSet rs1 = pstmt1.executeQuery("select sum(amount) as
         * value from hp_pharmacy WHERE patient_name
         * ='"+jSearchTable212.getValueAt(jSearchTable212.getSelectedRow(),0)+"'
         * AND paid = true AND collected = false");
         *
         *
         * while (rs1.next()){
         * jTextField1111.setText(rs1.getObject(1).toString());
         *
         * }
         *
         * //crset1.setCommand("select service,dosage,units,selling_price,debit
         * as value from drug_collection_view WHERE patient_no
         * ='"+jComboBox11.getSelectedItem().toString()+"'"); /*
         * crset1.setCommand("select description,quantity,units,price,amount as
         * value from hp_pharmacy WHERE patient_name
         * ='"+jSearchTable212.getValueAt(jSearchTable212.getSelectedRow(),0)+"'
         * AND paid = true AND collected = false");
         *
         * crset1.setConnectionSource(pConnDB); try {
         *
         * crset1.execute();
         *
         * // crset2.setExecuteOnLoad(true); jTable111.setModel(new
         * org.netbeans.lib.sql.models.TableModel(crset1, new
         * org.netbeans.lib.sql.models.TableModel.Column[] { new
         * org.netbeans.lib.sql.models.TableModel.Column("description", "Item
         * Desc.", false), new
         * org.netbeans.lib.sql.models.TableModel.Column("units", "Units",
         * false), new org.netbeans.lib.sql.models.TableModel.Column("quantity",
         * "Quantity", false), new
         * org.netbeans.lib.sql.models.TableModel.Column("price", "Price per
         * Item", false), new
         * org.netbeans.lib.sql.models.TableModel.Column("value", "Value KShs",
         * true)
         *
         *
         * })); jScrollPane11.setViewportView(jTable111);
         *
         *
         * }
         * } catch(java.sql.SQLException sqlex){
         * System.out.println(sqlex.getMessage()); }
         * this.populateTable111(this.jTextField912.getText());
         *
         * jSearchDialog212.dispose();
         */
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable212MouseClicked
    /*
     * private void populateTable111(java.lang.String patient_no) { int j = 0;
     * int i = 0;
     *
     * try { java.sql.Statement stmtTable11 = connectDB.createStatement();
     *
     * java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT
     * count(patient_name) FROM hp_pharmacy WHERE patient_name =
     * '"+patient_no+"' AND paid = true AND collected = false");
     *
     * while (rsetTable11.next()) { j = rsetTable11.getInt(1); } if (j > 0) {
     * java.sql.Statement stmtTable1 = connectDB.createStatement();
     *
     * java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select
     * description,units,quantity,price,amount as value,gl_code from hp_pharmacy
     * WHERE patient_name ='"+patient_no+"' AND paid = true AND collected =
     * false and date_prescribed = current_date");
     *
     * while (rsetTable1.next()) {
     *
     * System.out.println("Working at table row "+i);
     * jTable111.setValueAt(rsetTable1.getObject(1), i, 0);
     * jTable111.setValueAt(rsetTable1.getObject(2), i, 1);
     * jTable111.setValueAt(rsetTable1.getObject(3), i, 3);
     * jTable111.setValueAt(rsetTable1.getObject(4), i, 4);
     * jTable111.setValueAt(rsetTable1.getObject(5), i, 5);
     * jTable111.setValueAt(rsetTable1.getObject(6), i, 6);
     *
     * i++;
     *
     * }
     * }
     * } catch(java.sql.SQLException sqlExec) {
     *
     * javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
     *
     * }
     * }
     */
    private void jTextField11312CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11312CaretUpdate

        jSearchTable212.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT distinct(patient_name) as name from hp_pharmacy where patient_name ILIKE '%" + jTextField11312.getText() + "%' AND (patient_no IS NULL OR  patient_no ='') and paid = true and collected = false order by patient_name"));

        /*
         * try {
         *
         * searchRowSet212.execute("SELECT distinct(patient_name) as name from
         * hp_pharmacy where patient_name ILIKE '"+jTextField11312.getText()+"%'
         * AND (patient_no IS NULL OR patient_no ='') and paid = true and
         * collected = false order by patient_name");
         *
         * jSearchTable212.setModel(new
         * org.netbeans.lib.sql.models.TableModel(searchRowSet212, new
         * org.netbeans.lib.sql.models.TableModel.Column[] { new
         * org.netbeans.lib.sql.models.TableModel.Column("name", "Patient name",
         * false) // new org.netbeans.lib.sql.models.TableModel.Column("name",
         * "Name", false) // new
         * org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Year
         * of birth", false), // new
         * org.netbeans.lib.sql.models.TableModel.Column("residence",
         * "Residence", false) }));
         */
        jSearchTable212.setShowHorizontalLines(false);
        jSearchScrollPane212.setViewportView(jSearchTable212);

        // Add your handling code here:
    }//GEN-LAST:event_jTextField11312CaretUpdate
    private void searchButton212Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
/*
         * java.awt.Point point = this.jTextField912.getLocationOnScreen();
         *
         * jSearchDialog212.setSize(400,200);
         *
         * jSearchDialog212.setLocation(point);
         *
         * jSearchDialog212.setVisible(true);
         */
    }
    private void jButton5211ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5211ActionPerformed
        jSearchDialog211.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton5211ActionPerformed
    private void populateTable11(java.lang.String patient_no) {
        /*
         * int j = 0; int i = 0;
         *
         * try { java.sql.Statement stmtTable11 = connectDB.createStatement();
         *
         * java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT
         * count(patient_name) FROM hp_pharmacy WHERE patient_name =
         * '"+patient_no+"' AND paid = false");
         *
         * while (rsetTable11.next()) { j = rsetTable11.getInt(1); } if (j > 0)
         * { java.sql.Statement stmtTable1 = connectDB.createStatement();
         *
         * java.sql.Statement stmtTable111 = connectDB.createStatement();
         *
         * java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT
         * description, quantity,price,(quantity*price)-amount,amount,gl_code
         * FROM hp_pharmacy WHERE patient_name = '"+patient_no+"' AND paid =
         * false");
         *
         * while (rsetTable1.next()) {
         *
         * jTable11.setValueAt(rsetTable1.getObject(1), i, 0);
         * jTable11.setValueAt(rsetTable1.getObject(2), i, 1);
         * jTable11.setValueAt(rsetTable1.getObject(3), i, 3);
         * if(rsetTable1.getDouble(4) >0){
         * jTable11.setValueAt(rsetTable1.getObject(4), i, 4); }else{
         * jTable11.setValueAt(new java.lang.Double(0.00), i, 4); } //
         * jTable11.setValueAt(rsetTable1.getObject(4), i, 4);
         * jTable11.setValueAt(rsetTable1.getObject(5), i, 5);
         * jTable11.setValueAt(rsetTable1.getObject(6), i, 6);
         *
         * java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("select
         * sum(qty) from stock_balance where description =
         * '"+jTable11.getValueAt(i,0).toString()+"' AND department ilike
         * '"+jTextField41.getText()+"%'"); while (rsetTable111.next()) {
         *
         * jTable11.setValueAt(rsetTable111.getObject(1), i, 2);
         *
         * i++;
         *
         * }
         * }
         * }
         *
         * java.sql.Statement pst211 = connectDB.createStatement();
         * java.sql.ResultSet rs111 = pst211.executeQuery("select doctor from
         * hp_pharmacy where paid = true and collected = false and patient_name
         * = '"+jTextField912.getText()+"'"); while (rs111.next()){
         * jTextField121.setText(rs111.getObject(1).toString()); } }
         * catch(java.sql.SQLException sqlExec) {
         *
         * javax.swing.JOptionPane.showMessageDialog(this,
         * sqlExec.getMessage());
         *
         * }
         */
    }
    private void jSearchTable211MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable211MouseClicked
        //  this.jComboBox131.setSelectedItem(jSearchTable2.getValueAt(jSearchTable211.getSelectedRow(), 1).toString());

        //  jTextField1.setText(jSearchTable211.getValueAt(jSearchTable211.getSelectedRow(), 1).toString());
        jTextField911.setText(jSearchTable211.getValueAt(jSearchTable211.getSelectedRow(), 0).toString());

        /*
         * try {
         *
         *
         * java.sql.Statement stmt1 = connectDB.createStatement();
         * java.sql.ResultSet rset1 = stmt1.executeQuery("select payment_mode
         * from hp_patient_card where patient_name
         * ='"+jTextField911.getText()+"'"); while (rset1.next()){ //
         * jTextField2.setText(rset1.getObject(1).toString());
         * jTextField21.setText(rset1.getObject(1).toString()); } } catch
         * (java.sql.SQLException sqe) { sqe.printStackTrace(); //
         * System.out.println("Insert not successful"); }
         */
        this.populateTable11(this.jTextField911.getText());
        jSearchDialog211.dispose();

        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable211MouseClicked

    private void jTextField11311CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11311CaretUpdate
        jSearchTable211.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT distinct(patient_name) as name from hp_pharmacy where patient_name ILIKE '" + jTextField11311.getText() + "%' AND (patient_no IS NULL OR  patient_no ='') order by patient_name"));

        jSearchTable211.setShowHorizontalLines(false);
        jSearchScrollPane211.setViewportView(jSearchTable211);
        // Add your handling code here:
    }//GEN-LAST:event_jTextField11311CaretUpdate

    private void searchButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton11ActionPerformed
        searchButton211Clicked();   // Add your handling code here:
    }//GEN-LAST:event_searchButton11ActionPerformed
    private void searchButton211Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.jTextField911.getLocationOnScreen();

        jSearchDialog211.setSize(400, 200);

        jSearchDialog211.setLocation(point);

        jSearchDialog211.setVisible(true);
    }

    /*
     * private void populateTable2(java.lang.String patient_no) { int j = 0; int
     * i = 0;
     *
     * try { java.sql.Statement stmtTable11 = connectDB.createStatement();
     *
     * java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT
     * count(patient_name) FROM hp_pharmacy WHERE patient_no = '"+patient_no+"'
     * AND paid = true AND collected = false");
     *
     * while (rsetTable11.next()) { j = rsetTable11.getInt(1); } if (j > 0) {
     * java.sql.Statement stmtTable1 = connectDB.createStatement();
     *
     * java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select
     * description,units,quantity,price,amount as value,gl_code from hp_pharmacy
     * WHERE patient_no ='"+patient_no+"' AND paid = true AND collected =
     * false");
     *
     * while (rsetTable1.next()) {
     *
     * System.out.println("Working at table row "+i);
     * jTable12.setValueAt(rsetTable1.getObject(1), i, 0);
     * jTable12.setValueAt(rsetTable1.getObject(2), i, 1);
     * jTable12.setValueAt(rsetTable1.getObject(3), i, 3);
     * jTable12.setValueAt(rsetTable1.getObject(4), i, 4);
     * jTable12.setValueAt(rsetTable1.getObject(5), i, 5);
     * jTable12.setValueAt(rsetTable1.getObject(6), i, 6);
     *
     * i++;
     *
     * }
     * }
     * } catch(java.sql.SQLException sqlExec) {
     *
     * javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
     *
     * }
     * }
     */ private void searchButton1Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
/*
         * java.awt.Point point = this.jTextField91.getLocationOnScreen();
         *
         * jSearchDialog21.setSize(400,200);
         *
         * jSearchDialog21.setLocation(point);
         *
         * jSearchDialog21.setVisible(true);
         *
         *
         */
    }

    private void cmbox2ActionPerformed(java.awt.event.ActionEvent evt) {
        int j = 0;

        java.lang.Object selectedGuaran = cmbox2.getSelectedItem();
        int i = jTable11.getSelectedRow();

        if (selectedGuaran != null) {

            try {
                java.sql.Statement pstmt = connectDB.createStatement();
                java.sql.ResultSet rs = pstmt.executeQuery("select sp.selling_price::numeric from st_stock_prices sp where product = '" + selectedGuaran + "'");
                while (rs.next()) {
                    jTable11.setValueAt(rs.getObject(1), i, 4);
                }
            } catch (java.sql.SQLException sqlex) {
                System.out.println(sqlex.getMessage());
            }

            double Qty = 0.00;
            try {
                java.sql.Statement pstmt = connectDB.createStatement();
                java.sql.Statement pstmt1 = connectDB.createStatement();

                java.sql.ResultSet rs1 = pstmt1.executeQuery("select count(product) from st_stock_prices sc where item = '" + selectedGuaran + "' and department ilike '" + jTextField41.getText() + "%'");
                while (rs1.next()) {
                    j = rs1.getInt(1);
                }
                if (j > 0) {

                    java.sql.ResultSet rs = pstmt.executeQuery("select sum(qty) from stock_balance where description = '" + selectedGuaran + "' and department ILIKE '" + jTextField41.getText() + "%'");
                    while (rs.next()) {
                        Qty = rs.getDouble(1);
                        //jTable1.setValueAt(Qty,jTable1.getSelectedRow(),2);

                        jTable11.setValueAt(Qty, i, 2);

                    }
                } else {
                    jTable11.setValueAt("0.00", i, 2);
                }
            } catch (java.sql.SQLException sqlex) {
                System.out.println(sqlex.getMessage());
            }

            try {
                java.sql.Statement pstmt = connectDB.createStatement();

                java.sql.ResultSet rs = pstmt.executeQuery("select code from pb_activity where activity ilike '" + jTextField41.getText() + "%'");
                while (rs.next()) {
                    jTable11.setValueAt(rs.getObject(1), i, 6);

                }
            } catch (java.sql.SQLException sqlex) {
                System.out.println(sqlex.getMessage());
            }
        }

    }
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        for (int k = 0; k < jSearchTable2.getRowCount(); k++) {
            for (int r = 0; r < jSearchTable2.getColumnCount(); r++) {
                jSearchTable2.getModel().setValueAt(null, k, r);
            }
        }
        this.jTextField113.setText("");
        searchButtonClicked();
        // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed
    private void searchButtonClicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.jTextField9.getLocationOnScreen();

        jSearchDialog2.setSize(600, 200);

        jSearchDialog2.setLocation(point);

        jSearchDialog2.setVisible(true);

    }

    public class ComboTextField extends javax.swing.JTextField implements javax.swing.ComboBoxEditor {

        public ComboTextField() {

            initComponents();

        }

        void initComponents() {

            // oldComboBox1311Model = jComboBox1311.getModel();
            // comboTextField = new javax.swing.JTextField();
            comboTextField.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyTyped(java.awt.event.KeyEvent e) {

                    if (e.getID() == java.awt.event.KeyEvent.VK_BACK_SPACE) {

                        changeComboBoxModel(comboTextField.getText());

                        System.out.println(comboTextField.getText() + " Pressed Key " + e.getKeyText(e.getKeyCode()));
                    }
                }
            });

        }

        public java.awt.Component getEditorComponent() {

            return comboTextField;

        }

        public Object getItem() {

            return comboTextField.getText();

        }

        public void setItem(Object obj) {
            //    comboTextField.setText(jComboBox1311.getSelectedItem().toString());
        }

        public void changeComboBoxModel(java.lang.String typedLetters) {

            javax.swing.DefaultComboBoxModel newComboBox1311Model = new javax.swing.DefaultComboBoxModel();

            System.out.println("ComboBox Item No. " + oldComboBox1311Model.getSize());

            for (int i = 0; i < oldComboBox1311Model.getSize(); i++) {

                if (oldComboBox1311Model.getElementAt(i).toString().startsWith(typedLetters)) {

                    newComboBox1311Model.addElement(oldComboBox1311Model.getElementAt(i));

                    //                    jComboBox1311.setModel(newComboBox1311Model);
                }

            }

        }
        //      }
    }
    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed
        this.jSearchDialog2.dispose();           // Add your handling code here:
    }//GEN-LAST:event_jButton52ActionPerformed

    private void jTextField113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField113CaretUpdate

        if (this.jCheckBox1.isSelected() && this.jCheckBox31.isSelected()) {

            if (jTextField113.getCaretPosition() < 3) {
                System.out.println("Nothing");
            } else {
                jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, "
                        + "(upper(second_name||' '||first_name||' '||last_name)) as name, (CURRENT_DATE - year_of_birth::DATE)/365 AS age, residence "
                        + "from hp_patient_register where patient_no ILIKE '" + jTextField113.getText() + "%' AND "
                        + "  last_visit >= (current_date-2) order by patient_no LIMIT 20"));
                jSearchTable2.setShowHorizontalLines(false);
                jSearchScrollPane2.setViewportView(jSearchTable2);

            }
        } else {
            if (this.jCheckBox1.isSelected() && this.jCheckBox4.isSelected()) {
                if (jTextField113.getCaretPosition() < 3) {
                    System.out.println("Nothing");
                } else {
                    jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT "
                            + "patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, (CURRENT_DATE - year_of_birth::DATE)/365 AS age,"
                            + " residence from hp_patient_register where second_name||' '||first_name||' '||last_name ILIKE '%" + jTextField113.getText() + "%' "
                            + " AND  last_visit >= (current_date - 2) order by second_name||' '||first_name||' '||last_name LIMIT 20"));

                    jSearchTable2.setShowHorizontalLines(false);
                    jSearchScrollPane2.setViewportView(jSearchTable2);

                }
            }
        }

//        if (this.jCheckBox3.isSelected() && this.jCheckBox31.isSelected()) {
//
//            if (jTextField113.getCaretPosition() < 3) {
//                System.out.println("Nothing");
//            } else {
//
//                jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, patient_name AS name,"
//                        + "pat_age, ward FROM hp_admission WHERE patient_no ILIKE '%" + jTextField113.getText() + "%' AND discharge = false ORDER BY 1"));
//
//
//                jSearchTable2.setShowHorizontalLines(false);
//                jSearchScrollPane2.setViewportView(jSearchTable2);
//
//            }
//        } else {
//            if (this.jCheckBox3.isSelected() && this.jCheckBox4.isSelected()) {
//                jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, "
//                        + "patient_name AS name,pat_age, ward FROM hp_admission WHERE patient_name "
//                        + "ILIKE '%" + jTextField113.getText() + "%' AND discharge = false ORDER BY 2"));
//
//                jSearchTable2.setShowHorizontalLines(false);
//                jSearchScrollPane2.setViewportView(jSearchTable2);
//
//
//            }
//        }// Add your handling code here:
    }//GEN-LAST:event_jTextField113CaretUpdate

    private void jButton91ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton91ActionPerformed
        jSearchDialog1.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton91ActionPerformed

    private void jTable11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable11MouseClicked

        if (jTable11.getSelectedColumn() == 0) {

            this.cmbox1MouseClicked();
        }        // Add your handling code here:
    }//GEN-LAST:event_jTable11MouseClicked
    private void cmbox1MouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane21.getLocationOnScreen();//jTable11.getLocationOnScreen();
        jSearchDialog1.setSize(400, 200);
        jSearchDialog1.setLocation(point);
        jSearchDialog1.setVisible(true);

    }
    private void jSearchTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable1MouseClicked

        double balance = 0.00;
        jTextField113.setText("");
        jTable11.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 0), jTable11.getSelectedRow(), 0);
        jTable11.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 1), jTable11.getSelectedRow(), 3);
        jTable11.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 2), jTable11.getSelectedRow(), 6);
        jTable11.setValueAt(new java.lang.Double(0), jTable11.getSelectedRow(), 4);

        int j = 0;
        double Qty = 0.00;
        try {
            java.sql.Statement pstmt = connectDB.createStatement();
            java.sql.Statement pstmt1 = connectDB.createStatement();

            java.sql.ResultSet rs1 = pstmt1.executeQuery("select count(product) from st_stock_prices sc where product = '" + jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 0) + "' and department ilike '" + jTextField41.getText() + "'");
            while (rs1.next()) {
                j = rs1.getInt(1);
            }
            if (j > 0) {

                java.sql.ResultSet rs = pstmt.executeQuery("select sum(qty) from stock_balance where description = '" + jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 0) + "' and department ilike '" + jTextField41.getText() + "%'");
                while (rs.next()) {
                    Qty = rs.getDouble(1);
                    // jTable1.setValueAt(Qty,jTable1.getSelectedRow(),2);

                    jTable11.setValueAt(Qty, jTable11.getSelectedRow(), 2);
                    //     balance = rs.getDouble(1);
                }
            } else {
                jTable11.setValueAt("0.00", jTable11.getSelectedRow(), 2);
            }
        } catch (java.sql.SQLException sqlex) {
            System.out.println(sqlex.getMessage());
        }

        jSearchDialog1.dispose();
        jTextField111.setText("");
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable1MouseClicked

    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate
        String Dept = null;
        if (this.jCheckBox5.isSelected()) {
            Dept = jCheckBox5.getText();
        } else {
            Dept = jCheckBox6.getText();
        }
        if (jTextField111.getCaretPosition() > 0) {
            jSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct(product) as product,selling_price,gl_code FROM st_stock_prices WHERE product ILIKE '%" + jTextField111.getText() + "%' AND department ilike '%phar%' order by product"));

            /*
             * try { searchRowSet1.execute("select distinct(product) as
             * product,selling_price,gl_code FROM st_stock_prices WHERE product
             * ILIKE '"+jTextField111.getText()+"%' AND department = 'Pharmacy'
             * order by product");
             *
             * jSearchTable1.setModel(new
             * org.netbeans.lib.sql.models.TableModel(searchRowSet1, new
             * org.netbeans.lib.sql.models.TableModel.Column[] { new
             * org.netbeans.lib.sql.models.TableModel.Column("product",
             * "Product", false), new
             * org.netbeans.lib.sql.models.TableModel.Column("selling_price",
             * "Selling price", false), new
             * org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl
             * code", false) }));
             */
            jSearchScrollPane1.setViewportView(jSearchTable1);
            System.out.println("Cannot sort out");
            /*
             * } catch(java.sql.SQLException sqlExec) {
             *
             * javax.swing.JOptionPane.showMessageDialog(this,
             * sqlExec.getMessage());
             *
             * }
             */
        }// Add your handling code here:
    }//GEN-LAST:event_jTextField111CaretUpdate

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        this.jSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        jTextField11.setText("");
        prescriptionsTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0), prescriptionsTable.getSelectedRow(), 0);
        prescriptionsTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1), prescriptionsTable.getSelectedRow(), 8);
        //jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 2), jTable1.getSelectedRow(), 6);
        //jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(), 4);

        int j = 0;

        /*
         * java.lang.Object selectedGuaran = cmbox1.getSelectedItem(); int i =
         * jTable11.getSelectedRow(); if (i > -1){ if (selectedGuaran != null) {
         *
         * try { java.sql.Statement pstmt = connectDB.createStatement();
         * java.sql.ResultSet rs = pstmt.executeQuery("select
         * sp.selling_price::numeric from st_stock_prices sp where product =
         * '"+selectedGuaran+"'"); while (rs.next()){
         * jTable11.getModel().setValueAt(rs.getObject(1),i,3); } }
         * catch(java.sql.SQLException sqlex){
         * System.out.println(sqlex.getMessage()); }
         *
         */
        Double Qty = 0.00;
        /*
         * try { java.sql.Statement pstmt = connectDB.createStatement();
         * java.sql.Statement pstmt1 = connectDB.createStatement();
         *
         * java.sql.ResultSet rs1 = pstmt1.executeQuery("select count(product)
         * from st_stock_prices sc where product = '" +
         * jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0) + "' and
         * department ilike '" + jComboBox1.getSelectedItem().toString() + "'");
         * while (rs1.next()) { j = rs1.getInt(1); } if (j > 0) {
         *
         * java.sql.ResultSet rs = pstmt.executeQuery("select sum(qty) from
         * stock_balance where description = '" +
         * jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0) + "' and
         * department ilike '" + jComboBox1.getSelectedItem().toString() + "'");
         * while (rs.next()) {
         *
         * // jTable1.setValueAt(,jTable1.getSelectedRow(), 6); //
         * jTable1.setValueAt(rs.getObject(1),jTable1.getSelectedRow(),2); Qty =
         * rs.getDouble(1); jTable1.setValueAt(Qty, jTable1.getSelectedRow(),
         * 2);
         *
         * }
         * } else { jTable1.setValueAt("0.00", jTable1.getSelectedRow(), 2); } }
         * catch (java.sql.SQLException sqlex) {
         * System.out.println(sqlex.getMessage()); }
         */
        jSearchDialog.dispose();         // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked

    private void prescriptionsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_prescriptionsTableMouseClicked

        if (prescriptionsTable.getSelectedColumn() == 0) {

            this.cmboxMouseClicked();
        }        // Add your handling code here:
    }//GEN-LAST:event_prescriptionsTableMouseClicked
    private void cmboxMouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane2.getLocationOnScreen();
        jSearchDialog.setSize(400, 200);
        jSearchDialog.setLocation(point);
        jSearchDialog.setVisible(true);

    }
    private void jTextField11CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11CaretUpdate
        if (jTextField11.getCaretPosition() > 0) {
            jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select product,selling_price,gl_code FROM st_stock_prices WHERE product ILIKE '%" + jTextField11.getText() + "%' AND department ilike '" + jComboBox1.getSelectedItem().toString() + "' order by product"));

            /*
             * try { searchRowSet.execute("select product,selling_price,gl_code
             * FROM st_stock_prices WHERE product ILIKE
             * '"+jTextField11.getText()+"%' AND department ilike
             * '"+jTextField4.getText()+"' order by product");
             *
             * jSearchTable.setModel(new
             * org.netbeans.lib.sql.models.TableModel(searchRowSet, new
             * org.netbeans.lib.sql.models.TableModel.Column[] { new
             * org.netbeans.lib.sql.models.TableModel.Column("product",
             * "Product", false), new
             * org.netbeans.lib.sql.models.TableModel.Column("selling_price",
             * "Selling price", false), new
             * org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl
             * code", false) }));
             */
            jSearchScrollPane.setViewportView(jSearchTable);
            System.out.println("Cannot sort out");
            /*
             * } catch(java.sql.SQLException sqlExec) {
             *
             * javax.swing.JOptionPane.showMessageDialog(this,
             * sqlExec.getMessage());
             *
             * }
             */

        }
        // Add your handling code here:
    }//GEN-LAST:event_jTextField11CaretUpdate
    /*
     * private void populateTable11(java.lang.String patient_name) { int j = 0;
     * int i = 0;
     *
     * try { java.sql.Statement stmtTable1 = connectDB.createStatement();
     *
     * java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT
     * count(patient_name) FROM hp_pharmacy WHERE patient_name =
     * '"+patient_name+"' AND paid = false AND collected = false");
     *
     * while (rsetTable1.next()) { j = rsetTable1.getInt(1); } if (j > 0) {
     *
     * java.sql.Statement stmtTable11 = connectDB.createStatement();
     *
     * java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT
     * description, quantity, price, null::numeric(15,2),amount, gl_code FROM
     * hp_pharmacy WHERE patient_name = '"+patient_name+"' AND paid = false AND
     * collected = false");
     *
     * while (rsetTable11.next()) {
     *
     * System.out.println("Working at table row "+i);
     * jTable11.setValueAt(rsetTable11.getObject(1), i, 0);
     * jTable11.setValueAt(rsetTable11.getObject(2), i, 1);
     * jTable11.setValueAt(rsetTable11.getObject(3), i, 3);
     * jTable11.setValueAt(rsetTable11.getObject(4), i, 4);
     * jTable11.setValueAt(rsetTable11.getObject(5), i, 5);
     * jTable11.setValueAt(rsetTable11.getObject(6), i, 6);
     *
     * i++;
     *
     * // i = i + i; // jTable1.setValueAt(rsetTable1.getObject(1), i, 0); } }
     * } catch(java.sql.SQLException sqlExec) {
     *
     * javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
     *
     * }
     * }
     *
     */

    private void prescriptionsTableComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_prescriptionsTableComponentShown
        /*
         * double resFloat = 0.00; if
         * (jTable1.getValueAt(jTable1.getSelectedRow(), 1) != null) {
         *
         * double floatCol2 =
         * java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(),
         * 1).toString());
         *
         * double floatCol3 =
         * java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(),
         * 3).toString());
         *
         *
         * double resVal = floatCol2 * floatCol3;
         *
         * // resFloat = resVal;
         *
         * jTable1.setValueAt(new java.lang.Double(resVal),
         * jTable1.getSelectedRow(), 4);
         *
         *
         *
         * // double resFloat = 0.00;
         *
         * }
         */       // Add your handling code here:
    }//GEN-LAST:event_prescriptionsTableComponentShown

    private void jTable11KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable11KeyReleased
        double resFloat = 0.00;
        if (jTable11.getValueAt(jTable11.getSelectedRow(), 1) != null) {

            float floatCol2 = java.lang.Float.parseFloat(jTable11.getValueAt(jTable11.getSelectedRow(), 1).toString());

            float floatCol8 = java.lang.Float.parseFloat(jTable11.getValueAt(jTable11.getSelectedRow(), 2).toString());

            float floatCol3 = java.lang.Float.parseFloat(jTable11.getValueAt(jTable11.getSelectedRow(), 3).toString());

            float resVal = floatCol2 * floatCol3;
            //     if (floatCol2 <= floatCol8){
            if (jTable11.getValueAt(jTable11.getSelectedRow(), 4) != null) {
                float floatCol4 = java.lang.Float.parseFloat(jTable11.getValueAt(jTable11.getSelectedRow(), 4).toString());
                resVal = (floatCol2 * floatCol3) - floatCol4;
                //  resFloat = resVal;

                jTable11.setValueAt(new java.lang.Float(resVal), jTable11.getSelectedRow(), 5);

                for (int i = 0; i < jTable11.getRowCount(); i++) {

                    if (jTable11.getModel().getValueAt(i, 1) != null) {//toString().compareToIgnoreCase(null) {

                        resFloat = resFloat + Double.parseDouble(jTable11.getValueAt(i, 5).toString());

                        // totalSum = floatTotal + resFloat;
                    }
                }

                this.tableModelTableChanged2();
            } else {
                jTable11.setValueAt(new java.lang.Float(resVal), jTable11.getSelectedRow(), 5);
            }

            for (int i = 0; i < jTable11.getRowCount(); i++) {

                if (jTable11.getModel().getValueAt(i, 1) != null) {//toString().compareToIgnoreCase(null) {

                    resFloat = resFloat + Double.parseDouble(jTable11.getValueAt(i, 5).toString());

                    // totalSum = floatTotal + resFloat;
                }
            }

            this.tableModelTableChanged2();
            // }else{
            //     javax.swing.JOptionPane.showMessageDialog(this, "You can't dispense more than what is in Stock","Confirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
            // }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jTable11KeyReleased
    private void cmbox1ActionPerformed(java.awt.event.ActionEvent evt) {
        int j = 0;

        java.lang.Object selectedGuaran = cmbox1.getSelectedItem();
        int i = jTable11.getSelectedRow();
        if (i > -1) {
            if (selectedGuaran != null) {

                try {
                    java.sql.Statement pstmt = connectDB.createStatement();
                    java.sql.ResultSet rs = pstmt.executeQuery("select sp.selling_price::numeric from st_stock_prices sp where product = '" + selectedGuaran + "'");
                    while (rs.next()) {
                        jTable11.getModel().setValueAt(rs.getObject(1), i, 3);
                    }
                } catch (java.sql.SQLException sqlex) {
                    System.out.println(sqlex.getMessage());
                }

                try {
                    java.sql.Statement pstmt = connectDB.createStatement();
                    java.sql.Statement pstmt1 = connectDB.createStatement();

                    java.sql.ResultSet rs1 = pstmt1.executeQuery("select count(item) from st_stock_cardex sc where item = '" + selectedGuaran + "' and sc.cost_center = 'Pharmacy'");
                    while (rs1.next()) {
                        j = rs1.getInt(1);
                    }
                    if (j > 0) {

                        java.sql.ResultSet rs = pstmt.executeQuery("select sum(sc.sub_store_receiving) - sum(sc.sub_store_issuing)::numeric from st_stock_cardex sc where item = '" + selectedGuaran + "' and sc.cost_center = 'Pharmacy'");
                        while (rs.next()) {

                            jTable11.setValueAt(rs.getObject(1), i, 2);

                        }
                    } else {
                        jTable11.setValueAt("0.00", i, 2);
                    }
                } catch (java.sql.SQLException sqlex) {
                    System.out.println(sqlex.getMessage());
                }

                try {
                    java.sql.Statement pstmt = connectDB.createStatement();

                    java.sql.ResultSet rs = pstmt.executeQuery("select code from pb_activity where activity = '" + jTextField41.getText() + "'");
                    while (rs.next()) {
                        jTable11.setValueAt(rs.getObject(1), i, 6);

                    }
                } catch (java.sql.SQLException sqlex) {
                    System.out.println(sqlex.getMessage());
                }
            }
        }
    }
    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton31ActionPerformed
        //  jTextField11.setText("");
        jTextField21.setText("");
        for (int k = 0; k < jTable11.getRowCount(); k++) {
            for (int r = 0; r < jTable11.getColumnCount(); r++) {
                jTable11.getModel().setValueAt(null, k, r);
            }
        }

        //        this.jComboBox131.setSelectedItem(null);
        jTextField31.setText("0.00");       // Add your handling code here:
    }//GEN-LAST:event_jButton31ActionPerformed

    private void jButton61ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton61ActionPerformed
        int rows2Delete = jTable11.getSelectedRowCount();

        int[] selectedRows = jTable11.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable11.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable11.getModel();

                defTableModel.removeRow(jTable11.getSelectedRow());
            }
        }

        tableModelTableChanged2();
        // Add your handling code here:
    }//GEN-LAST:event_jButton61ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        jTable11.setEditingRow(-1);

        try {
            double amount = 0.00;
            double percentage = 0.00;
            double TotalPrice = 0.00;
            double total = 0.00;
            double presc = 0.00;
            double Total = 0.00;

            String prescNo = null;
            String glAcc2 = null;
            String code = null;
            String glAcc = null;
            String transNo1 = null;
            String user = null;

            try {
                jButton111ActionPerformed(evt);
                java.sql.Statement ps = connectDB.createStatement();
                java.sql.ResultSet rst = ps.executeQuery("select 'WK'||currval('prescription_no')");
                while (rst.next()) {
                    rst.getObject(1).toString();
                }
                prescNo = rst.getObject(1).toString();

                connectDB.commit();
                connectDB.setAutoCommit(true);

                int paid = 0;
                int notpaid = 0;
                java.sql.Statement psx = connectDB.createStatement();
                java.sql.ResultSet rstx = psx.executeQuery("select count(patient_no) from pb_doctors_request where paid = true and revenue_code ilike 'pharm%' and patient_no = '" + jTextField9.getText() + "' and inv_no = '" + prescNo + "'");

                while (rstx.next()) {
                    paid = rstx.getInt(1);
                }
                java.sql.Statement psb = connectDB.createStatement();
                java.sql.ResultSet rstb = psb.executeQuery("select count(patient_no) from pb_doctors_request where paid = false and revenue_code ilike 'pharm%' and patient_no = '" + jTextField9.getText() + "' and inv_no = '" + prescNo + "'");

                while (rstb.next()) {
                    notpaid = rstb.getInt(1);
                }
                if (paid > 0) {
                    //      com.afrisoftech.txtreports.PrescriptionTakenTxt policy = new com.afrisoftech.txtreports.PrescriptionTakenTxt(connectDB, jTextField9.getText(), jTextField1.getText(), prescNo, jTextField5.getText());
                }
                if (notpaid > 0) {
                    com.afrisoftech.txtreports.PrescriptionTxt policy = new com.afrisoftech.txtreports.PrescriptionTxt(connectDB, jTextField9.getText(), jTextField1.getText(), prescNo, paymentModeTxt.getText());
                }
                // BillInvoicePdf policy = new BillInvoicePdf();
                // policy.BillInvoicePdf(connectDB,"-", jTextField911.getText(),jTextField31.getText(),prescNo,"Cash",jTable11,datePicker1.getDate());

                //  javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully","Comfirmation Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                //            jTextField11.setText("");
                jTextField21.setText("");
                jTextField31.setText("");
                for (int k = 0; k < jTable11.getRowCount(); k++) {
                    for (int r = 0; r < jTable11.getColumnCount(); r++) {
                        jTable11.getModel().setValueAt(null, k, r);
                    }
                }

                //            this.jComboBox131.setSelectedItem(null);
                jTextField31.setText("0.00");
                // jTextField3.setText("0.00");
                jTextField14.setText("0.00");
                //  jComboBox2.setSelectedItem(null);
            } catch (java.sql.SQLException sq) {

                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

        } catch (java.lang.Exception ex) {
            System.out.println(ex.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }
        // Add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        jPanel11.setVisible(false);
        jPanel1.setVisible(true);
        jPanel13.setVisible(false);
        /*
         * try { java.sql.Statement pstmt = connectDB.createStatement();
         * java.sql.ResultSet rs = pstmt.executeQuery("select store_name from
         * st_stores where store_code = 'OP'");
         *
         * while (rs.next()){ jTextField4.setText(rs.getObject(1).toString());
         * // jTextField2.setText(rs.getObject(2).toString());
         *
         * }
         * } catch(java.sql.SQLException sqlex){
         * System.out.println(sqlex.getMessage()); }
         */

        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        jPanel1.setVisible(false);
        jPanel11.setVisible(true);
        jPanel13.setVisible(false);
        // jPanel11.setVisible(true)// Add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        int rows2Delete = prescriptionsTable.getSelectedRowCount();

        int[] selectedRows = prescriptionsTable.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) prescriptionsTable.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) prescriptionsTable.getModel();

                defTableModel.removeRow(prescriptionsTable.getSelectedRow());
            }
        }

        tableModelTableChanged();
        // Add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void prescriptionsTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_prescriptionsTableKeyReleased
        if (prescriptionsTable.getModel().getValueAt(prescriptionsTable.getSelectedRow(), 1) != null) {
            if (prescriptionsTable.getSelectedColumn() == prescriptionsTable.getSelectedColumn()) {
                float qty = java.lang.Float.parseFloat(prescriptionsTable.getValueAt(prescriptionsTable.getSelectedRow(), 1).toString());
                float price = java.lang.Float.parseFloat(prescriptionsTable.getValueAt(prescriptionsTable.getSelectedRow(), 8).toString());
                float total = qty * price;
                prescriptionsTable.setValueAt(total, prescriptionsTable.getSelectedRow(), 9);
                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(prescriptionsTable, 9);
                jTextField15.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                jTextField15.setText(java.lang.String.valueOf(totalSum));
                jTextField15.setText(java.lang.String.valueOf(totalSum));
            }

        }

        // Add your handling code here:
    }//GEN-LAST:event_prescriptionsTableKeyReleased
    private void populateTable1(java.lang.String patient_no) {
        int j = 0;
        int i = 0;
        double Qty = 0.00;
        try {
            java.sql.Statement stmtTable11 = connectDB.createStatement();
            java.sql.Statement stmtTable111x = connectDB.createStatement();
            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT count(patient_no) FROM pb_doctors_request WHERE patient_no = '" + patient_no + "' AND trans_date >= current_date - 2");

            while (rsetTable11.next()) {
                j = rsetTable11.getInt(1);
            }
            if (j > 0) {
                if (paymentModeTxt.getText().contains("Cash")) {
                    java.sql.Statement stmtTable1 = connectDB.createStatement();
                    java.sql.Statement stmtTable111 = connectDB.createStatement();

                    java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT "
                            + "service, quantity,inv_no,requisition_no,"
                            + "bed_no,time_due,dosage,paid::boolean,ROUND(amount/quantity) AS amount,amount "
                            + "FROM pb_doctors_request WHERE patient_no = '" + patient_no + "' "
                            + " AND trans_date > (CURRENT_DATE - 2)"
                            + " AND revenue_code ilike '%pharmacy%'AND paid = false AND collected = false group by service, quantity,inv_no,requisition_no,bed_no,time_due,dosage,paid,amount");

                    while (rsetTable1.next()) {
                        prescriptionsTable.setValueAt(rsetTable1.getObject(1), i, 0);
                        prescriptionsTable.setValueAt(rsetTable1.getObject(2), i, 1);
                        prescriptionsTable.setValueAt(rsetTable1.getObject(3), i, 2);
                        prescriptionsTable.setValueAt(rsetTable1.getObject(4), i, 3);
                        prescriptionsTable.setValueAt(rsetTable1.getObject(5), i, 4);
                        prescriptionsTable.setValueAt(rsetTable1.getObject(6), i, 5);
                        prescriptionsTable.setValueAt(rsetTable1.getObject(7), i, 6);
                        prescriptionsTable.setValueAt(rsetTable1.getBoolean(8), i, 7);
                        prescriptionsTable.setValueAt(rsetTable1.getObject(9), i, 8);
                        prescriptionsTable.setValueAt(rsetTable1.getObject(10), i, 9);

                        prescriptionsTable.setValueAt(getItemCode(rsetTable1.getObject(1).toString()), i, 10);
                        i++;

                    }

                } else {
                    java.sql.Statement stmtTable1 = connectDB.createStatement();
                    java.sql.Statement stmtTable111 = connectDB.createStatement();

                    java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT "
                            + "service, quantity,inv_no,requisition_no,"
                            + "bed_no,time_due,dosage,paid::boolean,ROUND(amount/quantity) AS amount,amount "
                            + "FROM pb_doctors_request WHERE patient_no = '" + patient_no + "' "
                            + " AND trans_date > (CURRENT_DATE - 2)"
                            + " AND revenue_code ilike '%pharmacy%'AND paid = true AND collected = false group by service, quantity,inv_no,requisition_no,bed_no,time_due,dosage,paid,amount");

                    while (rsetTable1.next()) {
                        prescriptionsTable.setValueAt(rsetTable1.getObject(1), i, 0);
                        prescriptionsTable.setValueAt(rsetTable1.getObject(2), i, 1);
                        prescriptionsTable.setValueAt(rsetTable1.getObject(3), i, 2);
                        prescriptionsTable.setValueAt(rsetTable1.getObject(4), i, 3);
                        prescriptionsTable.setValueAt(rsetTable1.getObject(5), i, 4);
                        prescriptionsTable.setValueAt(rsetTable1.getObject(6), i, 5);
                        prescriptionsTable.setValueAt(rsetTable1.getObject(7), i, 6);
                        prescriptionsTable.setValueAt(rsetTable1.getBoolean(8), i, 7);
                        prescriptionsTable.setValueAt(rsetTable1.getObject(9), i, 8);
                        prescriptionsTable.setValueAt(rsetTable1.getObject(10), i, 9);

                        prescriptionsTable.setValueAt(getItemCode(rsetTable1.getObject(1).toString()), i, 10);
                        i++;

                    }
                }
            }
        } catch (java.sql.SQLException sqlExec) {
            sqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
    }
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed


    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        jTextField1.setText("");
        jTextField2.setText("");

        for (int k = 0; k < prescriptionsTable.getRowCount(); k++) {
            for (int r = 0; r < prescriptionsTable.getColumnCount(); r++) {
                prescriptionsTable.getModel().setValueAt(null, k, r);
            }
        }

        jTextField3.setText("0.00");
        // Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //jTable1.setEditingRow(-1);
        if (prescriptionsTable.isEditing()) {
            prescriptionsTable.getCellEditor().stopCellEditing();
        }
        double quantity = 0.00;
        //  try {
        String billNo = null;
        String transNo = null;
        String payMode = null;
        String patientAcc = null;
        String cardNo = null;
        String AccDesc = null;
        String scheme = null;
        String cardName = null;
        String isurer = null;
        String expDate = null;
        String staffNo = null;
        String BillNo = null;
        String glAcc = null;
        // String BillNo = null;
        String code = null;
        String user = null;
        String prescNo = null;
        String glAcc2 = null;
        String chbox = null;

        double amount1 = 0.00;
        double percentage = 0.00;
        double TotalPrice = 0.00;
        double total = 0.00;
        double Total = 0.00;
        int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "Do you really want to Save?", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

        if (exitOption == javax.swing.JOptionPane.YES_OPTION) {

            double presc = java.lang.Double.parseDouble(jTextField8.getText());

            if (jCheckBox1.isSelected()) {
                chbox = "OP";
            } else {
                if (jCheckBox2.isSelected()) {
                    chbox = "WI";
                } else {
                    if (jCheckBox3.isSelected()) {
                        chbox = "IP";
                    }
                }
            }

            try {

                connectDB.setAutoCommit(false);

                //java.sql.PreparedStatement pstmRemove = connectDB.prepareStatement("DELETE FROM hp_pharmacy WHERE patient_no = '" + jTextField9.getText() + "' AND paid = false");
                // pstmRemove.executeUpdate();

                /*
                 * java.sql.Statement psq = connectDB.createStatement();
                 * java.sql.ResultSet rstq = psq.executeQuery("select
                 * nextval('prescription_no')"); while (rstq.next()) {
                 * rstq.getObject(1).toString();
                 *
                 * prescNo = rstq.getObject(1).toString(); }
                 */
                prescNo = prescriptionsTable.getValueAt(0, 2).toString();
                java.sql.Statement stm12 = connectDB.createStatement();
                java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                while (rse12.next()) {

                    patientAcc = rse12.getObject(1).toString();
                    AccDesc = rse12.getObject(2).toString();
                }

                java.sql.Statement ps11 = connectDB.createStatement();
                java.sql.ResultSet rst11 = ps11.executeQuery("select current_user");
                while (rst11.next()) {
                    rst11.getObject(1).toString();

                    user = rst11.getObject(1).toString();
                }

                for (int i = 0; i < prescriptionsTable.getRowCount(); i++) {
                    if (prescriptionsTable.getModel().getValueAt(i, 0) != null) {
                        int rows = prescriptionsTable.getRowCount();
                        System.out.println(rows);
                    }

                    if (prescriptionsTable.getModel().getValueAt(i, 0) != null && prescriptionsTable.getModel().getValueAt(i, 7) != null) {
                        //if (Boolean.valueOf(jTable1.getModel().getValueAt(i, 7).toString()) == java.lang.Boolean.TRUE) {
                        if (prescriptionsTable.getModel().getValueAt(i, 7).toString().equalsIgnoreCase("true")) {

                            java.sql.Statement stm122y = connectDB.createStatement();
                            int pres = 0;
                            java.sql.ResultSet rse122y = stm122y.executeQuery("select COUNT(description) From hp_pharmacy where description = '" + prescriptionsTable.getValueAt(i, 0) + "' AND patient_no = '" + jTextField9.getText() + "' AND date_prescribed = '" + datePicker1.getDate() + "'");
                            while (rse122y.next()) {
                                pres = rse122y.getInt(1);
                            }
                            if (pres > 0) {
                            } else {
                                java.sql.Statement stm122 = connectDB.createStatement();
                                java.sql.ResultSet rse122 = stm122.executeQuery("select gl_code,department from st_stock_prices where product = '" + prescriptionsTable.getValueAt(i, 0) + "'");
                                while (rse122.next()) {

                                    code = rse122.getObject(1).toString();
                                    glAcc = rse122.getObject(2).toString();
                                }
                                presc = java.lang.Double.parseDouble(jTextField8.getText());

                                Total = java.lang.Double.parseDouble(jTextField3.getText());

                                amount1 = java.lang.Double.parseDouble(prescriptionsTable.getValueAt(i, 9).toString());
                                if (Total > presc) {
                                    percentage = (amount1 / Total) * 100;

                                    TotalPrice = ((percentage / 100) * presc) + amount1;
                                } else {
                                    TotalPrice = amount1;
                                }
                                java.sql.PreparedStatement pstmtSel = connectDB.prepareStatement("select units from st_stock_item where description = ?");

                                pstmtSel.setString(1, prescriptionsTable.getModel().getValueAt(i, 0).toString());

                                java.sql.ResultSet rse121 = pstmtSel.executeQuery();

                                System.out.println("Done selection for quoted variables");

//
//                                java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into hp_pharmacy values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
//                                pstmt1.setString(1, jTextField9.getText());
//                                pstmt1.setString(2, jTextField1.getText());
//                                pstmt1.setDouble(3, java.lang.Double.valueOf(jTable1.getValueAt(i, 1).toString()));
//                                // pstmt1.setObject(4,jTable1.getValueAt(i,5).toString());
//                                pstmt1.setDouble(4, TotalPrice);
//                                //   pstmt1.setDouble(4,presc);
//                                pstmt1.setObject(5, jTable1.getValueAt(i, 0).toString());
//                                pstmt1.setDouble(7, java.lang.Double.valueOf(jTable1.getValueAt(i, 8).toString()));
//                                pstmt1.setObject(8, code);
//                                pstmt1.setBoolean(6, false);
//                                pstmt1.setString(9, jTable1.getValueAt(0, 2).toString());
//                                pstmt1.setObject(10, jTextField12.getText());
//                                pstmt1.setBoolean(11, true);
//                                pstmt1.setString(12, "");
//                                pstmt1.setDate(13, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
//                                pstmt1.setObject(14, jComboBox1.getSelectedItem());
//                                pstmt1.setObject(15, "OP");
//                                pstmt1.setObject(16, jTextField5.getText());
//                                pstmt1.setObject(17, "");
//                                pstmt1.setDouble(18, 0);
//                                pstmt1.setString(19, user);
//                                pstmt1.setObject(20, jTable1.getValueAt(0, 2).toString());
//                                pstmt1.executeUpdate();
//
//
//                                java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("INSERT INTO pb_doctors_request VALUES(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,trim(?),?, ?, ?, ?,?,?,?,?,?,?,?)");
//                                pstmt2.setString(1, jTextField9.getText());
//                                if (jTextField12.getText().equals("")) {
//                                    javax.swing.JOptionPane.showMessageDialog(this, "Patient Name missing", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
//                                } else {
//                                    pstmt2.setString(2, jTextField1.getText());
//                                }
//                                // pstmt2.setString(2,jTextField1.getText());
//                                pstmt2.setString(3, jTextField5.getText());
//                                if (jTextField12.getText().equals("")) {
//                                    javax.swing.JOptionPane.showMessageDialog(this, "Dispenser name missing", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
//                                } else {
//
//                                    pstmt2.setString(4, jTextField12.getText());
//                                }
//                                pstmt2.setString(5, jTable1.getValueAt(i, 0).toString());
//                                pstmt2.setDouble(6, java.lang.Double.valueOf(jTable1.getValueAt(i, 1).toString()));
//                                pstmt2.setDouble(7, java.lang.Double.valueOf(jTable1.getValueAt(i, 9).toString()));
//                                pstmt2.setString(8, code);
//                                pstmt2.setDate(9, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
//                                pstmt2.setString(10, jTable1.getValueAt(0, 2).toString());
//                                pstmt2.setString(11, user);
//                                pstmt2.setBoolean(12, false);
//                                pstmt2.setString(13, glAcc);
//                                pstmt2.setString(14, jTable1.getValueAt(0, 2).toString());
//                                pstmt2.setString(15, jTable1.getValueAt(i, 3).toString());
//                                pstmt2.setBoolean(16, true);
//                                pstmt2.setBoolean(17, false);
//                                pstmt2.setObject(18, jTable1.getValueAt(i, 4).toString());
//                                pstmt2.setString(19, jTable1.getValueAt(i, 5).toString());
//                                pstmt2.setTimestamp(20, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
//                                pstmt2.setObject(21, jTable1.getValueAt(i, 6).toString());
//                                pstmt2.setString(22, "Opd");
//                                pstmt2.setString(23, jTextField3.getText().toString());
//                                pstmt2.setString(24, "");
//                                pstmt2.setString(25, jComboBox1.getSelectedItem().toString());
//                                pstmt2.setString(26, "");
//                                pstmt2.executeUpdate();
                            }
                            /*
                             * java.sql.PreparedStatement pstmt33 =
                             * connectDB.prepareStatement("insert into
                             * st_sub_stores
                             * values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                             * pstmt33.setObject(2, jTable1.getValueAt(i,
                             * 0).toString()); pstmt33.setString(12, units);
                             * pstmt33.setDouble(4,
                             * java.lang.Double.valueOf(jTable1.getValueAt(i,
                             * 1).toString())); pstmt33.setObject(1,
                             * jTextField42.getText()); pstmt33.setDouble(3, 0);
                             * pstmt33.setDouble(7, 0); pstmt33.setDouble(5,
                             * java.lang.Double.valueOf(jTable1.getValueAt(i,
                             * 3).toString())); pstmt33.setDouble(6,
                             * java.lang.Double.valueOf(jTable1.getValueAt(i,
                             * 5).toString())); // pstmt33.setString(7,"0");
                             * pstmt33.setDate(10,
                             * com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                             * pstmt33.setString(8, transNo);
                             * pstmt33.setObject(9, jTextField361.getText());
                             * //pstmt33.setString(11,code);
                             * pstmt33.setString(13, jTextField42.getText());
                             * pstmt33.setString(11, userName);
                             * pstmt33.setString(14, jTextField9.getText() + " "
                             * + jTextField1.getText());
                             * pstmt33.executeUpdate();
                             *
                             *
                             * quantity =
                             * Double.parseDouble(jTable1.getModel().getValueAt(i,
                             * 1).toString());
                             */
                            //  java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("UPDATE st_stock_prices SET balance =balance - "+new java.lang.Double(quantity)+" WHERE product = '"+jTable1.getValueAt(i,0).toString()+"' and department ilike '"+jTextField4.getText()+"'");
                            //  pstmt31.executeUpdate();

                            //  java.sql.PreparedStatement pstmt3 = connectDB.prepareStatement("UPDATE st_stock_item SET quantity_instock = quantity_instock - "+new java.lang.Double(quantity)+" WHERE description = '"+jTable1.getValueAt(i,0).toString()+"'");
                            // pstmt3.executeUpdate();

                            /*
                             * java.sql.PreparedStatement pstmt33 =
                             * connectDB.prepareStatement("insert into
                             * st_sub_stores
                             * values(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                             * pstmt33.setObject(2, jTable1.getValueAt(i,
                             * 0).toString()); pstmt33.setString(12, units);
                             * pstmt33.setDouble(4,
                             * java.lang.Double.valueOf(jTable1.getValueAt(i,
                             * 1).toString())); pstmt33.setObject(1,
                             * jTextField42.getText()); pstmt33.setDouble(3, 0);
                             * pstmt33.setDouble(7, 0); pstmt33.setDouble(5,
                             * java.lang.Double.valueOf(jTable1.getValueAt(i,
                             * 3).toString())); pstmt33.setDouble(6,
                             * java.lang.Double.valueOf(jTable1.getValueAt(i,
                             * 5).toString())); // pstmt33.setString(7,"0");
                             * pstmt33.setDate(10,
                             * com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                             * pstmt33.setString(8, transNo);
                             * pstmt33.setObject(9, jTextField361.getText());
                             * //pstmt33.setString(11,code);
                             * pstmt33.setString(13, jTextField42.FgetText());
                             * pstmt33.setString(11, userName);
                             * pstmt33.setString(14, jTextField9.getText() + " "
                             * + jTextField1.getText());
                             * pstmt33.executeUpdate();
                             */
                            java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE hp_pharmacy SET paid = false,  collected = true, quantity = '" + prescriptionsTable.getValueAt(i, 1).toString() + "',amount = '" + prescriptionsTable.getValueAt(i, 9).toString() + "' where patient_no = '" + jTextField9.getText() + "' and description = '" + prescriptionsTable.getValueAt(i, 0).toString() + "' and date_prescribed > (current_date - 2) AND collected = false AND paid = false");
                            pstmt46.executeUpdate();

                            java.sql.PreparedStatement pstmt46x = connectDB.prepareStatement("UPDATE pb_doctors_request SET collected = true where patient_no = '" + jTextField9.getText() + "' and service ilike '" + prescriptionsTable.getValueAt(i, 0).toString() + "' and trans_date > current_date - 2");
                            pstmt46x.executeUpdate();
                        }
                    }
                }
                //    com.afrisoftech.txtreports.PrescriptionTxt policy = new com.afrisoftech.txtreports.PrescriptionTxt(connectDB, jTextField9.getText(), jTextField1.getText(), prescNo, jTextField5.getText());

                // java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request SET paid = true,collected = false where patient_no = '" + jTextField9.getText() + "' and revenue_code ilike 'pharm%' and trans_date='" + datePicker1.getDate().toString() + "'");
                // pstmt46.executeUpdate();
                connectDB.commit();
                connectDB.setAutoCommit(true);

                //  BillInvoicePdf policy = new BillInvoicePdf();
                //    policy.BillInvoicePdf(connectDB,jTextField9.getText(), jTextField1.getText(),jTextField3.getText(),prescNo,jTextField5.getText(),jTable1,datePicker1.getDate());
                javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully", "Comfirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                // jTextField1.setText("");
                jTextField2.setText("");

                for (int k = 0; k < prescriptionsTable.getRowCount(); k++) {
                    for (int r = 0; r < prescriptionsTable.getColumnCount(); r++) {
                        prescriptionsTable.getModel().setValueAt(null, k, r);
                    }
                }

                jTextField3.setText("0.00");
                jTextField15.setText("0.00");
                // }
                //  jComboBox2.setSelectedItem(null);
            } catch (java.sql.SQLException sq) {

                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    sql.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

        }

        /*
         * } catch(java.lang.Exception ex) {
         * System.out.println(ex.getMessage());
         * javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR :
         * Please double check your entries.",
         * "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
         *
         *
         * }
         */
        // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton33ActionPerformed
        int i = 0;
        try {

            // for (int l = 0; l < listofDays.length; l++) {
            java.sql.Statement stmtTable12 = connectDB.createStatement();

            java.sql.ResultSet rsetTable12 = stmtTable12.executeQuery("select distinct trans_date,patient_no,patient_name,inv_no,doctor,paid  from pb_doctors_request where revenue_code ilike '%pharm%' AND trans_date >= current_date - 1 and paid = false group by trans_date,patient_no,patient_name,inv_no,doctor,paid ORDER BY inv_no asc");

            while (rsetTable12.next()) {

                doctorPrescriptionListingTable.setValueAt(rsetTable12.getObject(1), i, 0);
                doctorPrescriptionListingTable.setValueAt(rsetTable12.getObject(2), i, 1);
                doctorPrescriptionListingTable.setValueAt(rsetTable12.getObject(3), i, 2);
                doctorPrescriptionListingTable.setValueAt(rsetTable12.getObject(4), i, 3);
                doctorPrescriptionListingTable.setValueAt(rsetTable12.getObject(5), i, 4);

                doctorPrescriptionListingTable.setValueAt(java.lang.Boolean.valueOf(false), i, 5);

                i++;

            }

        } catch (java.sql.SQLException sqlExec) {

            sqlExec.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton33ActionPerformed

    private void jSearchTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2MouseClicked
        for (int k = 0; k < prescriptionsTable.getRowCount(); k++) {
            for (int r = 0; r < prescriptionsTable.getColumnCount(); r++) {
                prescriptionsTable.getModel().setValueAt(null, k, r);
            }
        }        //        this.jComboBox131.setSelectedItem(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());

        String Paymode = null;

        paymentModeTxt.setText("");
        jTextField12.setText("");
        jTextField141.setText("0");
        jTextField151.setText("");
        jTextField121.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
        jTextField91.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0).toString());

        jTextField1.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
        jTextField9.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0).toString());
        jTextField141.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 2).toString());

        jSearchDialog2.dispose();
        try {

            if (jCheckBox3.isSelected()) {
                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("SELECT wing,mode_of_payment,ward,visit_id FROM hp_admission"
                        + " WHERE patient_no  ='" + jTextField9.getText() + "' AND discharge = false");
                while (rset1.next()) {
                    jTextField2.setText(rset1.getObject(3).toString());
                    paymentModeTxt.setText(rset1.getObject(2).toString());

                }
            } else {
                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("SELECT category,pay_mode,residence FROM hp_patient_register WHERE patient_no  ='" + jTextField9.getText() + "'");
                while (rset1.next()) {
                    jTextField2.setText(rset1.getObject(3).toString());
                    paymentModeTxt.setText(rset1.getObject(2).toString());

                }
            }
            java.sql.Statement stmt1x = connectDB.createStatement();
            java.sql.ResultSet rset1x = stmt1x.executeQuery("SELECT doctor FROM pb_doctors_request WHERE patient_no  ='" + jTextField9.getText() + "' AND trans_date > (current_date - 2)");
            while (rset1x.next()) {
                jTextField36.setText(rset1x.getObject(1).toString());

            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }

        if (this.paymentModeTxt.getText().toString().equalsIgnoreCase("Scheme")) {
            try {

                java.sql.Statement stmt1 = connectDB.createStatement();
                // java.sql.ResultSet rset1 = stmt1.executeQuery("select slip_no,nr_no from credit_acc_slip where patient_no  ='"+jTextField9.getText()+"' and date =current_date");

                java.sql.ResultSet rset1 = stmt1.executeQuery("select slip_no from credit_acc_slip where patient_no  ='" + jTextField9.getText() + "'  order by date desc limit 1");
                while (rset1.next()) {

                    //  jTextField16.setText(dbObject.getDBObject(rset1.getObject(1), "-"));
                    //jTextField151.setText(rset1.getObject(1).toString());
                    jTextField12.setText(dbObject.getDBObject(rset1.getObject(1), "-"));
                }
            } catch (java.sql.SQLException sqe) {
                sqe.printStackTrace();
                //  System.out.println("Insert not successful");
            }
            if (this.jTextField12.getText() == null || jTextField12.getText().equals("")) {

                javax.swing.JOptionPane.showMessageDialog(this, "Slip Missing Ask for Reactivation from the Reception", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

            } else {

            }
        }

        //  if (this.jTextField5.getText().equals("Cash")) {
        if (jCheckBox3.isSelected()) {
            jButton2.setVisible(true);
            this.jButton1.setVisible(false);
        } else {
            jButton2.setVisible(false);
            this.jButton1.setVisible(true);
        }
        //this.jButton2.setVisible(false);
        this.jButton21.setVisible(false);
        this.jButton211.setVisible(false);

        this.jButton13.setVisible(true);
        this.jButton14.setVisible(true);

        this.populateTable1(this.jTextField9.getText());

        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable2MouseClicked
    private void startRunning() {

        System.out.println("Starting to run Progress Thread");

        if (updatePatientList == null || !updatePatientList.isAlive()) {

            updatePatientList = new UpdatePatientList(this);

            updatePatientList.start();

            System.out.println("Progress Thread started");

        }

    }

    private void stopRunning() {

        System.out.println("Stopping run Progress Thread");

        updatePatientList.setStop(false);

    }

    class UpdatePatientList extends java.lang.Thread {

        java.lang.String selectedItem;
        int refreshWaitTime = 10000;

        public UpdatePatientList(java.awt.Component parent) {
        }

        public void setStop(boolean refreshstatus) {

            refreshStatus = refreshstatus;

        }
        /*
         * public void run() {
         *
         * System.out.println("Loading Patient refresh thread.");
         *
         * while (refreshStatus) {
         *
         * try {
         *
         * selectedItem = jComboBox131.getSelectedItem().toString();
         *
         * crset1.execute();
         *
         * jComboBox131.setSelectedItem(selectedItem);
         *
         * } catch (java.sql.SQLException sqlExec) {
         *
         * javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(),
         * sqlExec.getMessage());
         *
         * }
         *
         * try {
         *
         * java.lang.Thread.sleep(refreshWaitTime);
         *
         * } catch (java.lang.InterruptedException intExec) {
         *
         * javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(),
         * "Interruption Exception!"); }
         *
         * }
         *
         * }
         */
    }

    public void tableModel1TableChanged() {
        System.out.println("Calculating totals for table 13 and 2.");
        //        double resFloat = 0.00;
        double resFloat = 0.00;
        double Total = java.lang.Double.parseDouble(jTextField82.getText());
        for (int i = 0; i < jTable13.getRowCount(); i++) {

            if (jTable13.getModel().getValueAt(i, 0) != null) {

                if (jTable13.getSelectedColumn() == 1) {

                    resFloat = resFloat + Double.parseDouble(jTable13.getModel().getValueAt(i, 5).toString());

                    jTextField32.setText(java.lang.String.valueOf(resFloat));
                } else //   if (jTable11.getSelectedColumn() == 4) {
                {
                    resFloat = resFloat + Double.parseDouble(jTable13.getModel().getValueAt(i, 5).toString());
                }
                //9   }

                jTextField32.setText(java.lang.String.valueOf(resFloat));
                //  jTextField10.setText(java.lang.String.valueOf(resFloat+Total));
                if (resFloat > Total) {
                    jTextField10.setText(java.lang.String.valueOf(resFloat + Total));
                } else {
                    jTextField10.setText(java.lang.String.valueOf(resFloat));
                }
            }
        }

        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    public void tableModel1TableChanged(javax.swing.event.TableModelEvent evt) {

        //        double resFloat = 0.00;
        double resFloat = 0.00;

        double Total = java.lang.Double.parseDouble(jTextField82.getText());

        for (int i = 0; i < jTable13.getRowCount(); i++) {

            if (jTable11.getModel().getValueAt(i, 0) != null) {

                if (jTable13.getSelectedColumn() == 1) {

                    resFloat = resFloat + Double.parseDouble(jTable13.getModel().getValueAt(i, 5).toString());

                    jTextField32.setText(java.lang.String.valueOf(resFloat));
                    jTextField10.setText(java.lang.String.valueOf(resFloat + Total));
                } else //    if (jTable11.getSelectedColumn() == 4) {
                {
                    resFloat = resFloat + Double.parseDouble(jTable13.getModel().getValueAt(i, 5).toString());
                }
                //  }
                jTextField32.setText(java.lang.String.valueOf(resFloat));
                // jTextField10.setText(java.lang.String.valueOf(resFloat+Total));
                if (resFloat > Total) {
                    jTextField10.setText(java.lang.String.valueOf(resFloat + Total));
                } else {
                    jTextField10.setText(java.lang.String.valueOf(resFloat));
                }
            }
        }

        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    public void tableModelTableChanged2() {
        System.out.println("Calculating totals for table 11 and 2.");
        //        double resFloat = 0.00;
        double resFloat = 0.00;
        double Total = java.lang.Double.parseDouble(jTextField81.getText());
        for (int i = 0; i < jTable11.getRowCount(); i++) {

            if (jTable11.getModel().getValueAt(i, 0) != null) {

                if (jTable11.getSelectedColumn() == 1) {

                    resFloat = resFloat + Double.parseDouble(jTable11.getModel().getValueAt(i, 5).toString());

                    jTextField31.setText(java.lang.String.valueOf(resFloat));
                    jTextField14.setText(java.lang.String.valueOf(resFloat + Total));
                } else //   if (jTable11.getSelectedColumn() == 4) {
                {
                    resFloat = resFloat + Double.parseDouble(jTable11.getModel().getValueAt(i, 5).toString());
                }
                //9   }

                jTextField31.setText(java.lang.String.valueOf(resFloat));
                // jTextField14.setText(java.lang.String.valueOf(resFloat+Total));
                if (resFloat > Total) {
                    jTextField14.setText(java.lang.String.valueOf(resFloat + Total));
                } else {
                    jTextField14.setText(java.lang.String.valueOf(resFloat));
                }
            }
        }

        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    public void tableModelTableChanged() {
        System.out.println("Calculating totals for table 12 and 21.");
        //        double resFloat = 0.00;
        double resFloat1 = 0.00;
        double Total = java.lang.Double.parseDouble(jTextField8.getText());
        for (int i = 0; i < prescriptionsTable.getRowCount(); i++) {

            if (prescriptionsTable.getModel().getValueAt(i, 0) != null) {

                if (prescriptionsTable.getSelectedColumn() == 1) {

                    resFloat1 = resFloat1 + Double.parseDouble(prescriptionsTable.getModel().getValueAt(i, 5).toString());

                    //   }
                    jTextField3.setText(java.lang.String.valueOf(resFloat1));
                    jTextField15.setText(java.lang.String.valueOf(resFloat1 + Total));

                } else //    if (jTable1.getSelectedColumn() == 4) {
                {
                    resFloat1 = resFloat1 + Double.parseDouble(prescriptionsTable.getModel().getValueAt(i, 5).toString());
                }
                //    }
                jTextField3.setText(java.lang.String.valueOf(resFloat1));
                if (resFloat1 > Total) {
                    jTextField15.setText(java.lang.String.valueOf(resFloat1 + Total));
                } else {
                    jTextField15.setText(java.lang.String.valueOf(resFloat1));
                }

            }
        }

        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    public void tableModelTableChanged(javax.swing.event.TableModelEvent evt) {

        //        double resFloat = 0.00;
        double resFloat1 = 0.00;
        double Total = java.lang.Double.parseDouble(jTextField8.getText());
        for (int i = 0; i < prescriptionsTable.getRowCount(); i++) {

            if (prescriptionsTable.getModel().getValueAt(i, 0) != null) {

                if (prescriptionsTable.getSelectedColumn() == 1) {

                    resFloat1 = resFloat1 + Double.parseDouble(prescriptionsTable.getModel().getValueAt(i, 5).toString());

                    // }
                    jTextField3.setText(java.lang.String.valueOf(resFloat1));
                    jTextField15.setText(java.lang.String.valueOf(resFloat1 + Total));
                } else //  if (jTable11.getSelectedColumn() == 4) {
                {
                    resFloat1 = resFloat1 + Double.parseDouble(prescriptionsTable.getModel().getValueAt(i, 5).toString());
                }
                //  }
                jTextField3.setText(java.lang.String.valueOf(resFloat1));
                if (resFloat1 > Total) {
                    jTextField15.setText(java.lang.String.valueOf(resFloat1 + Total));
                } else {
                    jTextField15.setText(java.lang.String.valueOf(resFloat1));
                }
            }
        }

        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    private class SearchThread extends java.lang.Thread {

        public void SearchThread() {
        }

        public void run() {

            searchNames();

        }
    }

    private class SearchServicesThread extends java.lang.Thread {

        public void SearchServicesThread() {
        }

        public void run() {

            searchServices();

        }
    }

    public void searchNames() {
        int j = 0;
        int i = 0;
    }

    public void tableModelTableChanged1(javax.swing.event.TableModelEvent evt) {
    }

    private void populateTable12(java.lang.String patient_no) {
    }

    public void run() {

        while (getList) {

            runGetListThread();

            try {

                Thread.currentThread().sleep(10000);

            } catch (java.lang.InterruptedException IntExec) {

                javax.swing.JOptionPane.showMessageDialog(this, IntExec.getMessage(), "Interruption Error!", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

            // getList = false;
        }

    }

    public void runGetListThread() {

        int j = 0;
        int i = 0;
        int n = 0;

        try {

            // for (int l = 0; l < listofDays.length; l++) {
            java.sql.Statement stmtTable12 = connectDB.createStatement();

            java.sql.ResultSet rsetTable12 = stmtTable12.executeQuery("select distinct trans_date,patient_no,patient_name,inv_no,doctor,paid  from pb_doctors_request where revenue_code ilike '%pharm%' AND trans_date >= current_date - 2 and paid = false group by trans_date,patient_no,patient_name,inv_no,doctor,paid ORDER BY trans_date,inv_no DESC LIMIT 299");

            while (rsetTable12.next()) {

                doctorPrescriptionListingTable.setValueAt(rsetTable12.getObject(1), i, 0);
                doctorPrescriptionListingTable.setValueAt(rsetTable12.getObject(2), i, 1);
                doctorPrescriptionListingTable.setValueAt(rsetTable12.getObject(3), i, 2);
                doctorPrescriptionListingTable.setValueAt(rsetTable12.getObject(4), i, 3);
                doctorPrescriptionListingTable.setValueAt(rsetTable12.getObject(5), i, 4);

                doctorPrescriptionListingTable.setValueAt(java.lang.Boolean.valueOf(false), i, 5);

                i++;

            }

            //}
        } catch (java.sql.SQLException sqlExec) {

            sqlExec.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
        // }
        //  }


        /*
         * public void run() {
         *
         * while(getList) {
         *
         * runGetListThread();
         *
         * try {
         *
         * Thread.currentThread().sleep(10000);
         *
         * } catch(java.lang.InterruptedException IntExec){
         *
         * javax.swing.JOptionPane.showMessageDialog(this, IntExec.getMessage(),
         * "Interruption Error!", javax.swing.JOptionPane.ERROR_MESSAGE);
         *
         * }
         *
         * // getList = false;
         *
         * }
         *
         * }
         */
        // public void runGetListThread() {
        String labNo = null;
        String patientNo = null;

        int patNo = 0;
        int labNo1 = 0;
        try {
            java.sql.Statement stmtTable113 = connectDB.createStatement();

            java.sql.ResultSet rsetTable113 = stmtTable113.executeQuery("select count(patient_no) from hp_pending_discharge where disc_read = false  ");

            while (rsetTable113.next()) {
                labNo1 = rsetTable113.getInt(1);
                System.out.println("Lab no is " + labNo1);
            }

            if (labNo1 > 0) {
                java.sql.Statement stmtTable112 = connectDB.createStatement();

                java.sql.ResultSet rsetTable112 = stmtTable112.executeQuery("select distinct patient_no,patient_name from hp_pending_discharge where disc_read = false  ");

                while (rsetTable112.next()) {
                    labNo = rsetTable112.getString(1);
                    patientNo = rsetTable112.getString(2);
                    System.out.println("Lab no2 is " + patientNo);
                }
            } else {
            }

        } catch (java.sql.SQLException sqlExec) {

            sqlExec.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        if (labNo1 > 0) {
            java.awt.Toolkit.getDefaultToolkit().beep();
            javax.swing.JOptionPane.showMessageDialog(this, "Patient No. '" + labNo + "' Name '" + patientNo + "' has been Discharged \n Speed up ", "Information Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            try {

                java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE hp_pending_discharge SET disc_read = true where patient_no = '" + labNo + "'");
                pstmt46.executeUpdate();

            } catch (java.sql.SQLException sqlExec) {

                sqlExec.printStackTrace();

                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

            }
        } else {
        }

    }

    public void searchServices() {
    }

    public String getItemCode(String serviceItem) {
        String serviceItemCode = null;
        try {

            java.sql.Statement stmtTable1 = connectDB.createStatement();

            java.sql.ResultSet rset = stmtTable1.executeQuery("SELECT code FROM pricelist WHERE service_type ILIKE '" + serviceItem + "%'");

            //java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT code FROM pricelist WHERE service_type ILIKE '?'");
            // pstmt.setString(1, serviceItem);
            //java.sql.ResultSet rset = pstmt.executeQuery();
            while (rset.next()) {
                serviceItemCode = rset.getString(1);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(DispenseBillingIntfr.class.getName()).log(Level.SEVERE, null, ex);
        }

        return serviceItemCode;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup21;
    private javax.swing.ButtonGroup buttonGroup3;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private javax.swing.JTable doctorPrescriptionListingTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton111;
    private javax.swing.JButton jButton112;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton121;
    private javax.swing.JButton jButton122;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton211;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton jButton32;
    private javax.swing.JButton jButton33;
    private javax.swing.JButton jButton331;
    public javax.swing.JButton jButton4;
    private javax.swing.JButton jButton41;
    private javax.swing.JButton jButton4211;
    private javax.swing.JButton jButton4212;
    private javax.swing.JButton jButton42121;
    private javax.swing.JButton jButton43;
    private javax.swing.JButton jButton431;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton51;
    private javax.swing.JButton jButton511;
    private javax.swing.JButton jButton52;
    private javax.swing.JButton jButton5211;
    private javax.swing.JButton jButton5212;
    private javax.swing.JButton jButton52121;
    private javax.swing.JButton jButton54;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton61;
    private javax.swing.JButton jButton63;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButton91;
    private javax.swing.JButton jButton92;
    private javax.swing.JButton jButton93;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox31;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox1311;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel121;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel131;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel141;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel531;
    private javax.swing.JLabel jLabel532;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JLabel jLabel92;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel211;
    private javax.swing.JPanel jPanel2111;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel221;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel411;
    private javax.swing.JPanel jPanel413;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel61;
    private javax.swing.JPanel jPanel62;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JDialog jSearchDialog1;
    private javax.swing.JDialog jSearchDialog11;
    private javax.swing.JDialog jSearchDialog2;
    private javax.swing.JDialog jSearchDialog211;
    private javax.swing.JDialog jSearchDialog212;
    private javax.swing.JDialog jSearchDialog2121;
    private javax.swing.JDialog jSearchDialog3;
    private javax.swing.JDialog jSearchDialog4;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jSearchPanel1;
    private javax.swing.JPanel jSearchPanel11;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JPanel jSearchPanel211;
    private javax.swing.JPanel jSearchPanel212;
    private javax.swing.JPanel jSearchPanel2121;
    private javax.swing.JPanel jSearchPanel213;
    private javax.swing.JPanel jSearchPanel3;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane1;
    private javax.swing.JScrollPane jSearchScrollPane11;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JScrollPane jSearchScrollPane211;
    private javax.swing.JScrollPane jSearchScrollPane212;
    private javax.swing.JScrollPane jSearchScrollPane2121;
    private javax.swing.JScrollPane jSearchScrollPane3;
    private javax.swing.JScrollPane jSearchScrollPane4;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTable jSearchTable1;
    private javax.swing.JTable jSearchTable11;
    private javax.swing.JTable jSearchTable2;
    private javax.swing.JTable jSearchTable211;
    private javax.swing.JTable jSearchTable212;
    private javax.swing.JTable jSearchTable2121;
    private javax.swing.JTable jSearchTable3;
    private javax.swing.JTable jSearchTable4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JTable jTable11;
    private javax.swing.JTable jTable13;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JTextField jTextField1111;
    private javax.swing.JTextField jTextField113;
    private javax.swing.JTextField jTextField11311;
    private javax.swing.JTextField jTextField11312;
    private javax.swing.JTextField jTextField113121;
    private javax.swing.JTextField jTextField114;
    private javax.swing.JTextField jTextField115;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField121;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField141;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField151;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField21;
    private javax.swing.JTextField jTextField22;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField31;
    private javax.swing.JTextField jTextField32;
    private javax.swing.JTextField jTextField36;
    private javax.swing.JTextField jTextField361;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField41;
    private javax.swing.JTextField jTextField42;
    private javax.swing.JTextField jTextField52;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField71;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField81;
    private javax.swing.JTextField jTextField82;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JTextField jTextField91;
    private javax.swing.JTextField jTextField911;
    private javax.swing.JTextField jTextField92;
    private javax.swing.JTextField jTextField93;
    private javax.swing.JTextField paymentModeTxt;
    private javax.swing.JTable prescriptionBillingTable;
    private javax.swing.JTabbedPane prescriptionsTabbedPane;
    private javax.swing.JTable prescriptionsTable;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchButton1;
    private javax.swing.JButton searchButton11;
    private javax.swing.JButton searchButton2;
    private javax.swing.JButton searchButton3;
    private javax.swing.JButton searchButton31;
    private javax.swing.JButton searchButton4;
    // End of variables declaration//GEN-END:variables
}
