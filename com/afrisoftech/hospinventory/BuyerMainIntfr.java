/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.afrisoftech.hospinventory;

/**
 *
 * @author sytem partners
 */
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsDevice;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;
import static java.awt.GraphicsDevice.WindowTranslucency.*;
import java.awt.GraphicsEnvironment;
import java.awt.Paint;
import javax.swing.JOptionPane;



public class BuyerMainIntfr extends javax.swing.JInternalFrame {
    
 public   String selectedPR=null;
    
     java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;

    /**
     * Creates new form BuyerMainIntfr
     */
    public BuyerMainIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {
       connectDB = connDb;
       

        pConnDB = pconnDB;
        
        initComponents();

        /////setting the mode of purchase to be indetaminate
        QuotationCbx.setSelected(false);
        OpenTenderCbx.setSelected(false);
         /////refreshing the Approval table
            BuyersPrTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT   requisition_no as \"PR N0:\",    \n" +
                "       sum(price*quantity) as \"Total Price\"  FROM st_receive_requisation WHERE requisition_no ILIKE '%PRQ%' and approval_status=TRUE \n" +
                "       GROUP BY requisition_no,cost_center,date_due"));

        setColumnAlignmentCenter(BuyersPrTbl,1);
        
        ///setting the time 
        try{
        java.sql.Statement stmtnow=connectDB.createStatement();
        java.sql.ResultSet restt=stmtnow.executeQuery("SELECT cast(CURRENT_TIMESTAMP AS time)");
        
        while(restt.next()){
        timeTxt.setText(restt.getString(1));
        }
        
        }
        catch(Exception ess){
        
        
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel3 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        BuyersPrTbl = new com.afrisoftech.dbadmin.JTable();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        processbtn = new javax.swing.JButton();
        resetbtn = new javax.swing.JButton();
        cancelbtn = new javax.swing.JButton();
        exitbtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        PurchaseItemsTbl = new com.afrisoftech.dbadmin.JTable();
        jPanel41 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel111 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        reqDateTxt = new javax.swing.JTextField();
        reqDeptTxt = new javax.swing.JTextField();
        proDeptTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        timeTxt = new javax.swing.JTextField();
        datePicker2 = new com.afrisoftech.lib.DatePicker();
        jPanel6 = new javax.swing.JPanel();
        QuotationCbx = new javax.swing.JCheckBox();
        OpenTenderCbx = new javax.swing.JCheckBox();
        jScrollPane22 = new javax.swing.JScrollPane();
        ReasonPurchaseTxtPane1 = new javax.swing.JTextPane();

        jLabel3.setText("jLabel3");

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32x32/My Icons.png"))); // NOI18N
        setMinimumSize(new java.awt.Dimension(1000, 500));
        setPreferredSize(new java.awt.Dimension(1000, 500));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select PR here", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanel7.setMinimumSize(new java.awt.Dimension(100, 250));
        jPanel7.setPreferredSize(new java.awt.Dimension(100, 250));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        jScrollPane3.setMinimumSize(new java.awt.Dimension(250, 100));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(250, 100));

        BuyersPrTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "PR_No", "Sub Item Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        BuyersPrTbl.setMinimumSize(new java.awt.Dimension(90, 34));
        BuyersPrTbl.setPreferredSize(new java.awt.Dimension(90, 750));
        BuyersPrTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BuyersPrTblMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(BuyersPrTbl);
        if (BuyersPrTbl.getColumnModel().getColumnCount() > 0) {
            BuyersPrTbl.getColumnModel().getColumn(0).setResizable(false);
            BuyersPrTbl.getColumnModel().getColumn(1).setResizable(false);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(jScrollPane3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel7, gridBagConstraints);

        jPanel4.setMinimumSize(new java.awt.Dimension(250, 250));
        jPanel4.setPreferredSize(new java.awt.Dimension(250, 250));
        jPanel4.setRequestFocusEnabled(false);
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setMinimumSize(new java.awt.Dimension(250, 27));
        jPanel3.setPreferredSize(new java.awt.Dimension(250, 27));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        processbtn.setMnemonic('s');
        processbtn.setText("Process PR");
        processbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(processbtn, gridBagConstraints);

        resetbtn.setText("Add Item(s)");
        resetbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(resetbtn, gridBagConstraints);

        cancelbtn.setMnemonic('l');
        cancelbtn.setText("Clear");
        cancelbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(cancelbtn, gridBagConstraints);

        exitbtn.setMnemonic('c');
        exitbtn.setText("Zoom Table");
        exitbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(exitbtn, gridBagConstraints);

        jButton1.setMnemonic('r');
        jButton1.setText("Delete Item");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jPanel3, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        PurchaseItemsTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Item Description", "Units", "Quantity", "Price", "Balance", "Code", "Remark"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        /*java.lang.Object[] strCmb = {"Normal","Urgent",""};

        javax.swing.JComboBox cmBox = new javax.swing.JComboBox(strCmb);

        javax.swing.table.TableColumn teditor = this.jTable1.getColumn("Status");

        teditor.setCellEditor(new javax.swing.DefaultCellEditor(cmBox));
        */

        javax.swing.table.TableColumn column = null;
        for (int i = 0; i < 4; i++) {
            column = PurchaseItemsTbl.getColumnModel().getColumn(i);
            if (i == 0) {

                column.setPreferredWidth(300); //sport column is bigger
            } else {
                if (i == 1) {
                    column.setPreferredWidth(200);
                } else {
                    //if (i == 2) {
                        column.setPreferredWidth(200);
                        // }  else
                    //column.setPreferredWidth(50);

                }
            }
        }

        PurchaseItemsTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PurchaseItemsTblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(PurchaseItemsTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        jPanel2.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 7.0;
        jPanel4.add(jPanel2, gridBagConstraints);

        jPanel41.setLayout(new java.awt.GridBagLayout());

        /*        javax.swing.SpinnerDateModel spinerDate = new javax.swing.SpinnerDateModel();
        dateSpinner = new javax.swing.JSpinner(spinerDate);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jPanel1.add(dateSpinner, gridBagConstraints);

        */
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel4.setText("Transaction Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        jLabel111.setText("Buyer Category");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jLabel111, gridBagConstraints);

        jLabel5.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jLabel5, gridBagConstraints);

        jLabel22.setText("Requisitioning Department");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jLabel22, gridBagConstraints);

        reqDateTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(reqDateTxt, gridBagConstraints);

        reqDeptTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(reqDeptTxt, gridBagConstraints);

        proDeptTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(proDeptTxt, gridBagConstraints);

        jLabel1.setText("Time");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabel1, gridBagConstraints);

        timeTxt.setEditable(false);
        timeTxt.setForeground(new java.awt.Color(0, 204, 204));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 80);
        jPanel1.add(timeTxt, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 80);
        jPanel1.add(datePicker2, gridBagConstraints);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Mode Of Purchase", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 204)));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(QuotationCbx);
        QuotationCbx.setSelected(true);
        QuotationCbx.setText("Quotation");
        QuotationCbx.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(QuotationCbx, gridBagConstraints);

        buttonGroup1.add(OpenTenderCbx);
        OpenTenderCbx.setText("Open Tender");
        OpenTenderCbx.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(OpenTenderCbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel41.add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 11;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        jPanel4.add(jPanel41, gridBagConstraints);

        jScrollPane22.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        ReasonPurchaseTxtPane1.setEditable(false);
        ReasonPurchaseTxtPane1.setBackground(new java.awt.Color(240, 240, 240));
        ReasonPurchaseTxtPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "PR Main Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, java.awt.Color.blue));
        ReasonPurchaseTxtPane1.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        ReasonPurchaseTxtPane1.setForeground(new java.awt.Color(255, 0, 0));
        jScrollPane22.setViewportView(ReasonPurchaseTxtPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 11;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        jPanel4.add(jScrollPane22, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel4, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BuyersPrTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BuyersPrTblMouseClicked
        ////clearing the products table
        for (int k = 0; k < PurchaseItemsTbl.getRowCount(); k++) {
            for (int r = 0; r < PurchaseItemsTbl.getColumnCount(); r++) {
                PurchaseItemsTbl.getModel().setValueAt(null, k, r);
                
            }
        }

        ////clear the JTextPane
        ReasonPurchaseTxtPane1.setText(null);

           try {
        //////fetch ans set PR Details in the TextPane and populate Jtable
               
        int rowselect=BuyersPrTbl.getSelectedRow();
        String getPr=null;
        double total_price;
        getPr=BuyersPrTbl.getValueAt(rowselect,0).toString();
        total_price=Double.parseDouble(BuyersPrTbl.getValueAt(rowselect,1).toString());
         selectedPR = getPr;

        setTitle("                             YOU ABOUT TO PROCESS THIS PR-("+selectedPR+")");

        ////a query to fill the remaining details
        java.sql.Statement stmt;
     
            stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("SELECT status,cost_center,balance,sum(price*quantity) as Total_Price,reason  FROM st_receive_requisation WHERE requisition_no ILIKE '%PRQ%' and approval_status=TRUE AND requisition_no='"+selectedPR+"'  GROUP BY status,requisition_no,balance,cost_center,reason");
            
            while (rset.next()) {
                ReasonPurchaseTxtPane1.setText("THESE ARE THE MAIN DETAILS OF THIS PR \n");
               ReasonPurchaseTxtPane1.setText("PR NO: "+selectedPR +"        TOTAL PRICE: "+rset.getString("Total_Price")
                                       +"    Raised by(DPT): "  +rset.getString("cost_center")+"            Balance:"  +rset.getString("balance")
                        +"\nMode of Procurement      "+rset.getString("status")
                        +"\nPURCHASE REASONS \n"+rset.getString("reason"));
               // String str="<html><center><font color=#ffffdd>middle button</font></center></html>";
               
                //ReasonPurchaseTxtPane1.setText(rset.getString("reason"));

            }

           

            
            ////filling the items table
            ////a query to fill the remaining details
         java.sql.Statement stmt1 = null;
     
            stmt1 = connectDB.createStatement();
             java.sql.ResultSet rset1 = stmt1.executeQuery("SELECT  cost_center, item_description, \n" +
"       units, quantity, date_due, date, status, requisition_no, \n" +
"       price, store_name,  balance,reason, \n" +
"       terms,item_code\n" +
"       \n" +
"  FROM st_receive_requisation WHERE requisition_no='"+selectedPR+"'");
          int rows=0;
            while (rset1.next()) {
               reqDateTxt.setText(rset1.getString("date"));
               proDeptTxt.setText("Processing PR(s)");
               reqDeptTxt.setText(rset1.getString("cost_center"));
              

              PurchaseItemsTbl.setValueAt(rset1.getString("item_description"),rows,0);
              PurchaseItemsTbl.setValueAt(rset1.getString("units"),rows,1);
              PurchaseItemsTbl.setValueAt(rset1.getString("quantity"),rows,2);
              PurchaseItemsTbl.setValueAt(rset1.getString("price"),rows,3);
              PurchaseItemsTbl.setValueAt(rset1.getString("balance"),rows,4);
              PurchaseItemsTbl.setValueAt(rset1.getString("item_code"),rows,5);
              PurchaseItemsTbl.setValueAt(rset1.getString("terms"),rows,6);
              
              //incrementing the rows
              rows++;
   
               
            }
            ///end 
            
            /////determinig  the mode of purchase 
            
           if(total_price<=500000.00&&!(total_price<=0.0)){
              
               QuotationCbx.setText("Restricted Tender");
              QuotationCbx.setSelected(true);
              
                  
              }
           else if(total_price>500000.00){
                
                OpenTenderCbx.setText("Open Tender");
                 OpenTenderCbx.setSelected(true);
                
             
            
              } 
  /////refreshing the Approval table
            BuyersPrTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT   requisition_no as \"PR N0:\",    \n" +
                "       sum(price*quantity) as \"Total Price\"  FROM st_receive_requisation WHERE requisition_no ILIKE '%PRQ%' and approval_status=TRUE \n" +
                "       GROUP BY requisition_no,cost_center,date_due"));

        } catch (SQLException ex) {
            Logger.getLogger(RequisitionApprovalIntFr.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_BuyersPrTblMouseClicked

    private void processbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processbtnActionPerformed
       
        // Add your handling code here:
    }//GEN-LAST:event_processbtnActionPerformed

    private void cancelbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelbtnActionPerformed
        for (int k = 0; k < PurchaseItemsTbl.getRowCount(); k++) {
            for (int r = 0; r < PurchaseItemsTbl.getColumnCount(); r++) {
                PurchaseItemsTbl.getModel().setValueAt(null, k, r);
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_cancelbtnActionPerformed

    private void exitbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitbtnActionPerformed
        //this.setVisible(false);   // Add your handling code here:
        if(selectedPR==null){
        
            String str="<html><center><font color=red>YOU NEED TO SELECT A PR TO VIEW ITS ITEMS</font></center></html>";
            JOptionPane.showMessageDialog(null,str,"ERROR MESSAGE",1,new javax.swing.ImageIcon(getClass().getResource("/Icons/32x32/Recycle Bin Full 1.png")));
        }
        else{
        ZoomBuyerPrDetailsTable m=new ZoomBuyerPrDetailsTable(null,true,connectDB,selectedPR);
        m.setVisible(true);
        }
    }//GEN-LAST:event_exitbtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int rows2Delete = PurchaseItemsTbl.getSelectedRowCount();

        int[] selectedRows = PurchaseItemsTbl.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) PurchaseItemsTbl.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) PurchaseItemsTbl.getModel();

                defTableModel.removeRow(PurchaseItemsTbl.getSelectedRow());
            }
        }        // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void PurchaseItemsTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PurchaseItemsTblMouseClicked
//////view more details  of a PR
//        String Preq=null;
//        Preq=PurchaseItemsTbl.getValueAt(PurchaseItemsTbl.getSelectedRow(),1).toString();
//        JOptionPane.showMessageDialog(null,Preq);
//           if(Preq==null){
//        
//            String str="<html><center><font color=red>YOU NEED TO SELECT A PR TO VIEW ITS ITEMS</font></center></html>";
//            JOptionPane.showMessageDialog(null,str,"ERROR MESSAGE",1,new javax.swing.ImageIcon(getClass().getResource("/Icons/32x32/Recycle Bin Full 1.png")));
//        }
//        else{
//        ZoomBuyerPrDetailsTable m=new ZoomBuyerPrDetailsTable(null,true,connectDB,Preq);
//        m.setVisible(true);
//        }
        
    }//GEN-LAST:event_PurchaseItemsTblMouseClicked

    private void resetbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetbtnActionPerformed
        //ADDING ITEMS
         

    }//GEN-LAST:event_resetbtnActionPerformed

 public void setColumnAlignmentCenter(javax.swing.JTable  thisOne,int column){
    
     /////setting the column 1 alignment to center
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        thisOne.getColumnModel().getColumn(column).setCellRenderer( centerRenderer );
    
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable BuyersPrTbl;
    private javax.swing.JCheckBox OpenTenderCbx;
    private javax.swing.JTable PurchaseItemsTbl;
    private javax.swing.JCheckBox QuotationCbx;
    private javax.swing.JTextPane ReasonPurchaseTxtPane1;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelbtn;
    private com.afrisoftech.lib.DatePicker datePicker2;
    public static javax.swing.JButton exitbtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField proDeptTxt;
    private javax.swing.JButton processbtn;
    private javax.swing.JTextField reqDateTxt;
    private javax.swing.JTextField reqDeptTxt;
    private javax.swing.JButton resetbtn;
    private javax.swing.JTextField timeTxt;
    // End of variables declaration//GEN-END:variables
}
