/*
 * Requisitions.java
 *
 * Created on April 22, 2003, 5:12 PM
 */
package com.afrisoftech.hospinventory;

/**
 *
 * @author root
 */
public class AnalyseRequisintfr extends javax.swing.JInternalFrame implements java.lang.Runnable {

    javax.swing.JComboBox cmbox2 = null;
    javax.swing.JComboBox cmbox3 = null;
    javax.swing.JComboBox cmbox4 = null;

    javax.swing.JSpinner dateSpinner = null;
    javax.swing.JSpinner dateSpinner1 = null;

    java.lang.Thread getListThread;

    java.sql.Connection connectDB = null;

    boolean getList;

    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;

    public AnalyseRequisintfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        reorderMainPanel = new javax.swing.JPanel();
        buttonPanel = new javax.swing.JPanel();
        postbtn = new javax.swing.JButton();
        resetbtn = new javax.swing.JButton();
        cancelbtn = new javax.swing.JButton();
        exitbtn = new javax.swing.JButton();
        spacerLbl = new javax.swing.JLabel();
        printReportBtn = new javax.swing.JButton();
        removeRowBtn = new javax.swing.JButton();
        reorderReportPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        reorderReportTable = new com.afrisoftech.dbadmin.JTable();
        headerPanel = new javax.swing.JPanel();
        analyseItemsChkbx = new javax.swing.JCheckBox();
        refreshReordersChkbx = new javax.swing.JCheckBox();
        orderStoreLbl = new javax.swing.JLabel();
        orderingStoreCmbx = new javax.swing.JComboBox();
        presetReorderLevelsRdbtn = new javax.swing.JRadioButton();
        movingAverageReorderRdbtn = new javax.swing.JRadioButton();
        mainStoreChkbx = new javax.swing.JCheckBox();
        subStoreChkbx = new javax.swing.JCheckBox();
        orderDateLbl = new javax.swing.JLabel();
        orderDatePicker = new com.afrisoftech.lib.DatePicker();
        supplyStoreLbl = new javax.swing.JLabel();
        supplyStoreCmbx = new javax.swing.JComboBox();
        analyseBelowReorderLvelChkbx = new javax.swing.JCheckBox();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Analyse requisitions based on re-order levels");
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        reorderMainPanel.setLayout(new java.awt.GridBagLayout());

        buttonPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        buttonPanel.setLayout(new java.awt.GridBagLayout());

        postbtn.setMnemonic('s');
        postbtn.setText("Save Reorder Report");
        postbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(postbtn, gridBagConstraints);

        resetbtn.setText("Reset");
        resetbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(resetbtn, gridBagConstraints);

        cancelbtn.setMnemonic('l');
        cancelbtn.setText("Clear form");
        cancelbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(cancelbtn, gridBagConstraints);

        exitbtn.setMnemonic('c');
        exitbtn.setText("Close form");
        exitbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(exitbtn, gridBagConstraints);

        spacerLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(spacerLbl, gridBagConstraints);

        printReportBtn.setText("Print Reorder Report");
        printReportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printReportBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(printReportBtn, gridBagConstraints);

        removeRowBtn.setText("Remove Row");
        removeRowBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRowBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(removeRowBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        reorderMainPanel.add(buttonPanel, gridBagConstraints);

        reorderReportPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        reorderReportPanel.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Total analysis of requisitions received"));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        reorderReportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Item Code", "Description", "Strength", "Unit Pack", "Qty In Stock", "Min Stock", "Reorder Level", "Max Stock", "Min. Order", "Qty. To Order"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        reorderReportTable.setGridColor(new java.awt.Color(204, 204, 255));
        /*    try {

            crset2.setCommand("select description,units,stock,reorder_level,quantity,min_order AS quantity,reorder_level-stock as min_order,reorder_level-stock as min_order from analysed_requisation where reorder_level-stock > 0 order by description");
            //  crset2.setCommand("select description,units,sum(quantity_in_stock) as quantity_in_stock,reorder_level,sum(quantity) as quantity,sum(reorder_level-quantity_in_stock) as min_order,sum(min_order) AS min_order from ungroup_analyse_requisation group by description,units,reorder_level");

            crset2.setConnectionSource(pConnDB);

            crset2.execute();
            reorderReportTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset2, new org.netbeans.lib.sql.models.TableModel.Column[] {

                new org.netbeans.lib.sql.models.TableModel.Column("description", "Item", false),
                new org.netbeans.lib.sql.models.TableModel.Column("units", "Units", false),
                new org.netbeans.lib.sql.models.TableModel.Column("stock", "Qty In Stock", false),
                new org.netbeans.lib.sql.models.TableModel.Column("reorder_level", "Reorder Level", false),
                new org.netbeans.lib.sql.models.TableModel.Column("quantity", "Qty Ordered", false),
                new org.netbeans.lib.sql.models.TableModel.Column("min_order", "Min.Order", false),
                new org.netbeans.lib.sql.models.TableModel.Column("min_order", "Qty to Order", true)

            }));

            jScrollPane1.setViewportView(reorderReportTable);
        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());

        }

        javax.swing.table.TableColumn column = null;
        for (int i = 0; i < 7; i++) {
            column = reorderReportTable.getColumnModel().getColumn(i);
            if (i == 0) {

                column.setPreferredWidth(250); //sport column is bigger
            } else {
                if (i == 1) {
                    column.setPreferredWidth(100);
                } else {
                    //if (i == 2) {
                        column.setPreferredWidth(100);
                        // }  else
                    //column.setPreferredWidth(50);

                }
            }
        }
        */
        jScrollPane1.setViewportView(reorderReportTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        reorderReportPanel.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        reorderMainPanel.add(reorderReportPanel, gridBagConstraints);

        headerPanel.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(analyseItemsChkbx);
        analyseItemsChkbx.setText("Analyse all Items");
        analyseItemsChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        analyseItemsChkbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyseItemsChkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        headerPanel.add(analyseItemsChkbx, gridBagConstraints);

        buttonGroup1.add(refreshReordersChkbx);
        refreshReordersChkbx.setText("Refresh");
        refreshReordersChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        refreshReordersChkbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshReordersChkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        headerPanel.add(refreshReordersChkbx, gridBagConstraints);

        orderStoreLbl.setText("Ordering Store");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        headerPanel.add(orderStoreLbl, gridBagConstraints);

        orderingStoreCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select distinct store_name from st_stores order by store_name"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        headerPanel.add(orderingStoreCmbx, gridBagConstraints);

        buttonGroup2.add(presetReorderLevelsRdbtn);
        presetReorderLevelsRdbtn.setText("Analysis based on preset reorder level");
        presetReorderLevelsRdbtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        presetReorderLevelsRdbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presetReorderLevelsRdbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 10);
        headerPanel.add(presetReorderLevelsRdbtn, gridBagConstraints);

        buttonGroup2.add(movingAverageReorderRdbtn);
        movingAverageReorderRdbtn.setText("Analysis based on consumption average");
        movingAverageReorderRdbtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 10);
        headerPanel.add(movingAverageReorderRdbtn, gridBagConstraints);

        buttonGroup3.add(mainStoreChkbx);
        mainStoreChkbx.setText("Main Store");
        mainStoreChkbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainStoreChkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        headerPanel.add(mainStoreChkbx, gridBagConstraints);

        buttonGroup3.add(subStoreChkbx);
        subStoreChkbx.setText("Sub Store");
        subStoreChkbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subStoreChkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        headerPanel.add(subStoreChkbx, gridBagConstraints);

        orderDateLbl.setText("Order Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        headerPanel.add(orderDateLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        headerPanel.add(orderDatePicker, gridBagConstraints);

        supplyStoreLbl.setText("Supplying Store");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        headerPanel.add(supplyStoreLbl, gridBagConstraints);

        supplyStoreCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select distinct store_name from st_stores order by store_name"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        headerPanel.add(supplyStoreCmbx, gridBagConstraints);

        buttonGroup1.add(analyseBelowReorderLvelChkbx);
        analyseBelowReorderLvelChkbx.setText("Analyse Below Re-Order Level");
        analyseBelowReorderLvelChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        analyseBelowReorderLvelChkbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyseBelowReorderLvelChkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        headerPanel.add(analyseBelowReorderLvelChkbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        reorderMainPanel.add(headerPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(reorderMainPanel, gridBagConstraints);

        setBounds(0, 0, 924, 400);
    }// </editor-fold>//GEN-END:initComponents

    private void analyseBelowReorderLvelChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyseBelowReorderLvelChkbxActionPerformed
        getList = true;

        getListThread = new java.lang.Thread(this, "get_list_Thread");

        getListThread.start();

        postbtn.setEnabled(true);
// TODO add your handling code here:
    }//GEN-LAST:event_analyseBelowReorderLvelChkbxActionPerformed

    private void subStoreChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subStoreChkbxActionPerformed
        orderingStoreCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT store_name FROM st_stores ORDER BY 1"));
        orderingStoreCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //   jComboBox2ActionPerformed(evt);
            }
        });

        // Add your handling code here:
    }//GEN-LAST:event_subStoreChkbxActionPerformed

    private void mainStoreChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainStoreChkbxActionPerformed
//this.jTextField1.setVisible(true);
        orderingStoreCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select store_name from st_main_stores order by 1"));
        orderingStoreCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //  jComboBox2ActionPerformed(evt);
            }
        });

        // Add your handling code here:
    }//GEN-LAST:event_mainStoreChkbxActionPerformed

    private void presetReorderLevelsRdbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_presetReorderLevelsRdbtnActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_presetReorderLevelsRdbtnActionPerformed

    private void removeRowBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRowBtnActionPerformed
        int rows2Delete = reorderReportTable.getSelectedRowCount();

        int[] selectedRows = reorderReportTable.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) reorderReportTable.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) reorderReportTable.getModel();

                defTableModel.removeRow(reorderReportTable.getSelectedRow());
            }
        }        // Add your handling code here:
    }//GEN-LAST:event_removeRowBtnActionPerformed

    private void printReportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printReportBtnActionPerformed
        String transNo = null;
        try {
            java.sql.Statement ps = connectDB.createStatement();
            java.sql.ResultSet rs2 = ps.executeQuery("select 'RQ'||lpad(currval('req_no_seq')::text,6,0::text)");
            while (rs2.next()) {
                transNo = rs2.getObject(1).toString();
            }
            com.afrisoftech.hospinventory.RequisationPdf policy = new com.afrisoftech.hospinventory.RequisationPdf();
            policy.RequisationPdf(connectDB, orderDatePicker.getDate(), orderDatePicker.getDate(), orderingStoreCmbx.getSelectedItem().toString(), transNo);
        } catch (java.sql.SQLException sq) {
            sq.printStackTrace();
        }
// Add your handling code here:
    }//GEN-LAST:event_printReportBtnActionPerformed

    private void refreshReordersChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshReordersChkbxActionPerformed
        for (int k = 0; k < reorderReportTable.getRowCount(); k++) {
            for (int r = 0; r < reorderReportTable.getColumnCount(); r++) {
                reorderReportTable.getModel().setValueAt(null, k, r);
            }
        }        // Add your handling code here:
    }//GEN-LAST:event_refreshReordersChkbxActionPerformed

    public java.lang.Object[] getListofActivities() {

        java.lang.Object[] listofActivities = null;

        java.util.Vector listActVector = new java.util.Vector(1, 1);

        try {

            java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT item_code FROM stock_balance_qty WHERE department ilike '" + orderingStoreCmbx.getSelectedItem().toString() + "' AND item_code IS NOT NULL");

            while (rSet1.next()) {
                listActVector.addElement(rSet1.getObject(1).toString());
                System.out.println("description" + rSet1.getObject(1).toString());
            }

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());

        }

        listofActivities = listActVector.toArray();
        System.out.println("Done list of activities ...");
        return listofActivities;

    }

    private void analyseItemsChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyseItemsChkbxActionPerformed

        getList = true;

        getListThread = new java.lang.Thread(this, "get_list_Thread");

        getListThread.start();

        postbtn.setEnabled(true);
        // Add your handling code here:
    }//GEN-LAST:event_analyseItemsChkbxActionPerformed

    private void exitbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitbtnActionPerformed
        this.dispose();        // Add your handling code here:
    }//GEN-LAST:event_exitbtnActionPerformed

    private void resetbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetbtnActionPerformed

        postbtn.setEnabled(false);
        //    this.getContentPane().removeAll();
        //    this.initComponents();
        // Add your handling code here:
    }//GEN-LAST:event_resetbtnActionPerformed

    private void cancelbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelbtnActionPerformed
        for (int k = 0; k < reorderReportTable.getRowCount(); k++) {
            for (int r = 0; r < reorderReportTable.getColumnCount(); r++) {
                reorderReportTable.getModel().setValueAt(null, k, r);
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_cancelbtnActionPerformed

    private void postbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postbtnActionPerformed
        java.util.Calendar calendar = java.util.Calendar.getInstance();
        String req_no = null;
        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql = new java.sql.Date(dateNow);

        System.out.println(datenowSql.toString());
        String description = null;
        String code = null;
        String Stock = null;
        String actCode = null;
        String accountCode = null;
        String transNo = null;
        String transNo1 = null;
        String glType = null;
        String user = null;
        String userName = null;
        String glCode = null;
        String units = null;
        String ChkBx = null;
        try {
            connectDB.setAutoCommit(false);
            String reqno = null;
            /* java.sql.Statement pstmt1x = connectDB.createStatement();
             java.sql.ResultSet rs1x = pstmt1x.executeQuery("select nextval('req_no_seq')");
            
             while (rs1x.next()){
             reqno = rs1x.getObject(1).toString();
             }
             java.sql.Statement pstmt1 = connectDB.createStatement();
             java.sql.ResultSet rs1 = pstmt1.executeQuery("select lpad('"+reqno+"',7,'0'),date('now')");
            
             while (rs1.next()){
             req_no = rs1.getObject(1).toString();
             }*/

            java.sql.Statement pst2q = connectDB.createStatement();
            java.sql.ResultSet rsq = pst2q.executeQuery("select current_user");
            while (rsq.next()) {
                userName = rsq.getObject(1).toString();
            }
            java.sql.Statement ps = connectDB.createStatement();
            java.sql.ResultSet rs2 = ps.executeQuery("select 'IRQ'||lpad(nextval('req_no_seq')::text,6,0::TEXT)");
            while (rs2.next()) {
                transNo = rs2.getObject(1).toString();
            }
            //       java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_orders values(?, ?,?,round(?),?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            for (int i = 0; i < reorderReportTable.getRowCount(); i++) {
                if (reorderReportTable.getModel().getValueAt(i, 9) != null) {
                    double pack = 0.00;
                    double quantity = Double.parseDouble(reorderReportTable.getModel().getValueAt(i, 9).toString());
                    if (quantity > 0) {
                        // double quantity = Double.parseDouble(reorderReportTable.getModel().getValueAt(i, 5).toString());
                        if (java.util.regex.Pattern.matches("[0-9]*", reorderReportTable.getValueAt(i, 3).toString())) {
                            pack = Double.parseDouble(reorderReportTable.getValueAt(i, 3).toString());
                        } else {
                            pack = 1;
                        }  //double uprice = Double.parseDouble(reorderReportTable.getModel().getValueAt(i, 6).toString());
                        double itemPrice = 0.00;

                        if (subStoreChkbx.isSelected()) {
                            java.sql.Statement pst221 = connectDB.createStatement();
                            java.sql.ResultSet rs21 = pst221.executeQuery("SELECT transfer_price FROM st_stock_prices WHERE product_id = '" + reorderReportTable.getModel().getValueAt(i, 0).toString() + "' AND department ilike '" + orderingStoreCmbx.getSelectedItem() + "'");
                            while (rs21.next()) {
                                itemPrice = rs21.getDouble(1);
                            }
                        } else {
                            java.sql.Statement pst221 = connectDB.createStatement();
                            java.sql.ResultSet rs21 = pst221.executeQuery("SELECT buying_price/'" + pack + "' FROM st_stock_item WHERE item_code = '" + reorderReportTable.getModel().getValueAt(i, 0).toString() + "' AND department ilike '" + orderingStoreCmbx.getSelectedItem() + "'");
                            while (rs21.next()) {
                                itemPrice = rs21.getDouble(1);
                            }
                        }

                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_receive_requisation values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                        pstmt.setObject(1, "");
                        pstmt.setObject(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(orderDatePicker.getDate()));
                        pstmt.setObject(3, orderingStoreCmbx.getSelectedItem());
                        pstmt.setObject(4, reorderReportTable.getValueAt(i, 1).toString());
                        pstmt.setObject(5, reorderReportTable.getValueAt(i, 3).toString());
                        pstmt.setDouble(6, java.lang.Double.valueOf(reorderReportTable.getValueAt(i, 9).toString()));
                        pstmt.setDate(7, com.afrisoftech.lib.SQLDateFormat.getSQLDate(orderDatePicker.getDate()));
                        pstmt.setDate(8, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.util.Calendar.getInstance().getTime()));
                        pstmt.setBoolean(9, false);
                        pstmt.setBoolean(10, false);
                        pstmt.setObject(11, "Normal");
                        pstmt.setString(12, transNo);
                        pstmt.setDouble(13, itemPrice);
                        pstmt.setString(14, userName);
                        pstmt.setObject(15, supplyStoreCmbx.getSelectedItem());
                        pstmt.setDouble(16, 0.00);
                        pstmt.setDouble(17, java.lang.Double.valueOf(reorderReportTable.getValueAt(i, 4).toString()));
                        pstmt.setBoolean(18, false);
                        pstmt.setObject(19, "");
                        pstmt.setObject(20, "Main Store");
                        pstmt.setTimestamp(21, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));//com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.util.Calendar.getInstance().getTime()));
                        pstmt.setObject(22, reorderReportTable.getValueAt(i, 4).toString());

                        pstmt.setString(23, "System Analysed");
                        pstmt.setDouble(24, 0.00);
                        pstmt.setObject(25, "");
                        pstmt.setDouble(26, java.lang.Double.valueOf(reorderReportTable.getValueAt(i, 6).toString()));
                        //   pstmt.setObject(26,reorderReportTable.getValueAt(i,7).toString());
                        pstmt.setObject(27, "");
                        pstmt.setObject(28, "");
                        // pstmt.setObject(27,reorderReportTable.getValueAt(i,8).toString());
                        pstmt.setObject(29, reorderReportTable.getValueAt(i, 0).toString());
                        // pstmt.setDouble(29,java.lang.Double.valueOf(reorderReportTable.getValueAt(i,6).toString()));
                        pstmt.setDouble(30, java.lang.Double.valueOf(reorderReportTable.getValueAt(i, 7).toString()));
                        pstmt.setDouble(31, java.lang.Double.valueOf(reorderReportTable.getValueAt(i, 5).toString()));
                        pstmt.setObject(32, reorderReportTable.getValueAt(i, 2).toString());
                        pstmt.executeUpdate();
                    }
                }
            }

            connectDB.commit();
            connectDB.setAutoCommit(true);

            postbtn.setEnabled(false);
            spacerLbl.setForeground(java.awt.Color.blue);
            //jLabel5.setText("Insert successful");
            javax.swing.JOptionPane.showMessageDialog(this, "Analysed Requisition Saved Successfully", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        } catch (java.sql.SQLException sq) {
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());
            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_postbtnActionPerformed
    private void cmbox2ActionPerformed(java.awt.event.ActionEvent evt) {
        /*  int i = reorderReportTable.getSelectedRow();
         java.lang.Object res_cmbox2 = cmbox2.getSelectedItem();
     
         try {
         java.sql.Statement pstmt = connectDB.createStatement();
         java.sql.ResultSet rs = pstmt.executeQuery("select units from stock_item where description = '"+cmbox2.getSelectedItem()+"'");
         while (rs.next())
         reorderReportTable.setValueAt(rs.getObject(1),i,2);
     
         } catch(java.sql.SQLException sqlex){
         System.out.println(sqlex.getMessage());
         }
         */
    }

    public void run() {

        while (getList) {

            runGetListThread();

            try {

                Thread.currentThread().sleep(100);

            } catch (java.lang.InterruptedException IntExec) {

                javax.swing.JOptionPane.showMessageDialog(this, IntExec.getMessage(), "Interruption Error!", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

            getList = false;

        }

    }

    public void runGetListThread() {

        for (int k = 0; k < reorderReportTable.getRowCount(); k++) {
            for (int r = 0; r < reorderReportTable.getColumnCount(); r++) {
                reorderReportTable.getModel().setValueAt(null, k, r);
            }
        }
        int j = 0;
        //    int i = 0;
        int n = 0;
        float leadtime = 0;
        float averagese = 0;
        float quantityToOrder = 0;
        float ReoderLevel = 0;
        float sumQty = 0;
        int avgr = 0;
        float reorders = 0;
        float qtyInstock = 0;
        float balance = 0;
        float qtyReq = 0;
        float sumQty1 = 0;
        float requ = 0;
        float rlevel = 0;
        float rtime = 0;
        float orders = 0;
        float averageCons = 0;

        try {

            java.sql.Statement stmtTab = connectDB.createStatement();

            java.sql.ResultSet rsetTab = stmtTab.executeQuery("select average_day::int,read_time,reorder_level from st_ordering_constants");

            while (rsetTab.next()) {

                averagese = rsetTab.getFloat(1);
                leadtime = rsetTab.getFloat(2);
                avgr = rsetTab.getInt(1);
                reorders = rsetTab.getFloat(3);
            }

            //  for (int y = 0; y < listofAct.length; y++) {
            //        java.lang.Object listofDays[] = this.getListofActivities(listofAct[y]);
            java.lang.Object listofDays[] = this.getListofActivities();
            int i = 0;
            for (int l = 0; l < listofDays.length; l++) {
                if (movingAverageReorderRdbtn.isSelected()) {
                    java.sql.Statement stmtTable1 = connectDB.createStatement();
                    //     java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select item,units,sum(issuing) from st_sub_stores where item = '"+listofDays[l]+"' and trans_date::date BETWEEN (date('now') - '"+avgr+"'::int) AND date('now') and issuing>0 group by item,units");

                    java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select item,units,sum(round(quantity)),sum(round(reorder_level)),sum(round(read_time)) from stock_analysis where item = '" + listofDays[l] + "' AND store_name ilike '" + orderingStoreCmbx.getSelectedItem().toString() + "%' GROUP BY item,units");

                    //  java.sql.Statement stmtTableq = connectDB.createStatement();
                    //  java.sql.ResultSet rsetTable4 = stmtTableq.executeQuery("select count(item) from stock_analysis where item = '"+listofDays[l]+"'");
                    java.sql.Statement stmtTable11 = connectDB.createStatement();
                    java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("select sum(qty) from stock_balance_qty where description ilike '" + listofDays[l] + "' AND department ilike '" + orderingStoreCmbx.getSelectedItem().toString() + "%'");

                    java.sql.Statement stmtTable111 = connectDB.createStatement();

                    while (rsetTable1.next()) {

                        requ = rsetTable1.getFloat(3);
                        rlevel = rsetTable1.getFloat(4);
                        rtime = rsetTable1.getFloat(5);

                        orders = (rlevel) + (rtime);
                        while (rsetTable11.next()) {

                            qtyInstock = rsetTable11.getFloat(1);
                            if (orders > qtyInstock) {

                                reorderReportTable.setValueAt(rsetTable1.getObject(1), i, 0);
                                reorderReportTable.setValueAt(rsetTable1.getObject(2), i, 1);
                                reorderReportTable.setValueAt(rsetTable1.getObject(3), i, 2);
                                reorderReportTable.setValueAt(rsetTable1.getObject(4), i, 3);

                                if (qtyInstock > 0) {
                                    reorderReportTable.setValueAt(new java.lang.Float(java.lang.String.valueOf(java.lang.Math.round(qtyInstock))), i, 4);
                                    qtyInstock = qtyInstock;
                                    //     java.sql.Statement stmtTable11A = connectDB.createStatement();

                                } else {
                                    reorderReportTable.setValueAt(new java.lang.Float(java.lang.String.valueOf(java.lang.Math.round(0))), i, 4);
                                    qtyInstock = 0;
                                }

                                qtyReq = rsetTable1.getFloat(3);
                                averageCons = rsetTable1.getFloat(3) / averagese;

                                System.out.println(java.lang.Math.round(averageCons));
                                System.out.println("Lead time is [" + leadtime + "]");
                                quantityToOrder = java.lang.Math.round(averageCons * leadtime);
                                System.out.println("These are the items to order " + quantityToOrder);
                                //    reorderReportTable.setValueAt(new java.lang.Float(java.lang.String.valueOf(java.lang.Math.round(averageCons*reorders))), i, 3);

                                if (reorderReportTable.getValueAt(i, 3) != null) {
                                    // double reOrderLevel1 = java.lang.Double.parseDouble(reorderReportTable.getValueAt(i, 3).toString());
                                    // if ((averageCons*reorders + quantityToOrder) > qtyInstock){
                                    if (orders > qtyInstock) {
                                        // sumQty1 = java.lang.Math.round(averageCons*leadtime/reorders) - qtyInstock + quantityToOrder;
                                        sumQty1 = java.lang.Math.round(orders - qtyInstock);
                                        //sumQty1 = java.lang.Math.round(averageCons*reorders) - qtyInstock + quantityToOrder;

                                    } else {
                                        sumQty1 = 0;
                                    }

                                    if (sumQty1 > 0) {
                                        reorderReportTable.setValueAt(new java.lang.Float(sumQty1), i, 5);
                                        reorderReportTable.setValueAt(new java.lang.Float(sumQty1), i, 6);
                                    } else {

                                        reorderReportTable.setValueAt(new java.lang.Float(sumQty1 * -1), i, 5);
                                        reorderReportTable.setValueAt(new java.lang.Float(sumQty1 * -1), i, 6);

                                    }
                                }
                               // i++;

                            }

                        }
                    }
                }
                
                i++;
            }
        } catch (java.sql.SQLException sqlExec) {

            sqlExec.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        } //else{*/
        // java.lang.Object listofDays[] = this.getListofActivities();
        float maxStock = 0;
        float minStock = 0;
        qtyInstock = 0;
        if (analyseItemsChkbx.isSelected()) {
            if (presetReorderLevelsRdbtn.isSelected()) {

                /*   reorderReportTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT st.item_code,sb.description,st.strength,st.units AS unit_pack,CASE WHEN (sum(round(sb.qty)) < 1) THEN 0 ELSE sum(round(sb.qty)) END AS stock_balance," +
                 "'"+minStock+"'::numeric as min_stock,'"+ReoderLevel+"'::numeric as reorder_level,'"+maxStock+"'::numeric as max_stock,'"+requ+"'::numeric as min_order, " +
                 "'"+requ+"'::numeric as qty_to_order FROM stock_balance_qty sb,stockitem st WHERE  sb.item_code = st.item_code" +
                 " AND st.department ilike '"+jComboBox1.getSelectedItem()+"' AND sb.department ilike '"+jComboBox1.getSelectedItem()+"' GROUP BY sb.description,st.strength,st.units,st.item_code HAVING sum(round(sb.qty)) < sum(st.reorder_level-st.quantity_toorder)"));
                 */
                if (mainStoreChkbx.isSelected()) {
                    reorderReportTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT st.item_code,st.description,st.strength,st.units AS unit_pack,'" + qtyInstock + "' AS stock_balance,"
                            + "min_stock::numeric as min_stock,reorder_level::numeric as reorder_level,max_stock::numeric as max_stock,'" + requ + "'::numeric as min_order, "
                            + "'" + requ + "'::numeric as qty_to_order FROM stockitem st WHERE "
                            + " st.department ilike '" + orderingStoreCmbx.getSelectedItem() + "' ORDER BY st.description"));

                    Class[] types = new Class[]{
                        java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
                    };
                    boolean[] canEdit = new boolean[]{
                        false, false, false, false, false, false, false, false, false, true
                    };
                    javax.swing.table.TableColumn column = null;
                    for (int s = 0; s < 10; s++) {
                        column = reorderReportTable.getColumnModel().getColumn(s);
                        if (s == 1) {

                            column.setPreferredWidth(350); //sport column is bigger

                        } else {

                            column.setPreferredWidth(100);

                        }
                    }
                } else {

                    /*reorderReportTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT st.product_id,sb.description,st.strength,st.units AS unit_pack,CASE WHEN (sum(round(sb.qty)) < 1) THEN 0 ELSE sum(round(sb.qty)) END AS stock_balance," +
                     "'"+minStock+"'::numeric as min_stock,'"+ReoderLevel+"'::numeric as reorder_level,'"+maxStock+"'::numeric as max_stock,'"+requ+"'::numeric as min_order, " +
                     "'"+requ+"'::numeric as qty_to_order FROM stock_balance_qty sb,stockprices st WHERE  sb.item_code = st.product_id" +
                     " AND st.department ilike '"+jComboBox1.getSelectedItem()+"' AND sb.department ilike '"+jComboBox1.getSelectedItem()+"' GROUP BY sb.description,st.strength,st.units,st.product_id HAVING sum(round(sb.qty)) < sum(st.reorder_level)"));
                     */
                    reorderReportTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT st.product_id,st.product,st.strength,st.units AS unit_pack,'" + qtyInstock + "' AS stock_balance,"
                            + "minimum_level::numeric as min_stock,reorder_level::numeric as reorder_level,maximum_level::numeric as max_stock,'" + requ + "'::numeric as min_order, "
                            + "'" + requ + "'::numeric as qty_to_order FROM stockprices st WHERE  "
                            + " st.department ilike '" + orderingStoreCmbx.getSelectedItem() + "' ORDER BY st.product"));

                    Class[] types = new Class[]{
                        java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
                    };
                    boolean[] canEdit = new boolean[]{
                        false, false, false, false, false, false, false, false, false, true
                    };
                    javax.swing.table.TableColumn column = null;
                    for (int s = 0; s < 10; s++) {
                        column = reorderReportTable.getColumnModel().getColumn(s);
                        if (s == 1) {

                            column.setPreferredWidth(350); //sport column is bigger
                            // } else {
                            //     if (s == 1) {
                            //         column.setPreferredWidth(100);
                        } else {
                            //if (i == 2) {
                            column.setPreferredWidth(100);
                            // }  else
                            //column.setPreferredWidth(50);

                            //  }
                        }
                    }
                }

                try {
                    for (int i = 0; i < reorderReportTable.getRowCount(); i++) {
                        if (mainStoreChkbx.isSelected()) {
                            java.sql.Statement stmtTable111d = connectDB.createStatement();
                            java.sql.ResultSet rsetTable111d = stmtTable111d.executeQuery("SELECT sum(qty) FROM stock_balance_qty WHERE item_code = '" + reorderReportTable.getValueAt(i, 0) + "' AND department ilike '" + orderingStoreCmbx.getSelectedItem().toString() + "%'");

                            while (rsetTable111d.next()) {
                                reorderReportTable.setValueAt(rsetTable111d.getObject(1), i, 4);

                                rlevel = Float.parseFloat(reorderReportTable.getValueAt(i, 6).toString());
                                maxStock = Float.parseFloat(reorderReportTable.getValueAt(i, 7).toString());
                                minStock = Float.parseFloat(reorderReportTable.getValueAt(i, 5).toString());
                                qtyInstock = Float.parseFloat(reorderReportTable.getValueAt(i, 4).toString());

                                if (qtyInstock > 0) {
                                    reorderReportTable.setValueAt(new java.lang.Float(rlevel - qtyInstock), i, 8);
                                    if (maxStock > 0) {
                                        reorderReportTable.setValueAt(new java.lang.Float(maxStock - qtyInstock), i, 9);
                                    } else {
                                        reorderReportTable.setValueAt(new java.lang.Float(rlevel), i, 9);
                                    }
                                } else {
                                    reorderReportTable.setValueAt(new java.lang.Float(rlevel), i, 8);
                                    if (maxStock > 0) {
                                        reorderReportTable.setValueAt(new java.lang.Float(maxStock), i, 9);
                                    } else {
                                        reorderReportTable.setValueAt(new java.lang.Float(rlevel), i, 9);
                                    }
                                }

                            }

                        } else {
                            java.sql.Statement stmtTable111d = connectDB.createStatement();
                            java.sql.ResultSet rsetTable111d = stmtTable111d.executeQuery("SELECT sum(qty) FROM stock_balance_qty WHERE item_code = '" + reorderReportTable.getValueAt(i, 0) + "' AND department ilike '" + orderingStoreCmbx.getSelectedItem().toString() + "%'");

                            while (rsetTable111d.next()) {
                                reorderReportTable.setValueAt(rsetTable111d.getObject(1), i, 4);

                                rlevel = Float.parseFloat(reorderReportTable.getValueAt(i, 6).toString());
                                maxStock = Float.parseFloat(reorderReportTable.getValueAt(i, 7).toString());
                                minStock = Float.parseFloat(reorderReportTable.getValueAt(i, 5).toString());
                                qtyInstock = Float.parseFloat(reorderReportTable.getValueAt(i, 4).toString());

                                if (qtyInstock > 0) {
                                    reorderReportTable.setValueAt(new java.lang.Float(rlevel - qtyInstock), i, 8);
                                    if (maxStock > 0) {
                                        reorderReportTable.setValueAt(new java.lang.Float(maxStock - qtyInstock), i, 9);
                                    } else {
                                        reorderReportTable.setValueAt(new java.lang.Float(rlevel), i, 9);
                                    }
                                } else {
                                    reorderReportTable.setValueAt(new java.lang.Float(rlevel), i, 8);
                                    if (maxStock > 0) {
                                        reorderReportTable.setValueAt(new java.lang.Float(maxStock), i, 9);
                                    } else {
                                        reorderReportTable.setValueAt(new java.lang.Float(rlevel), i, 9);
                                    }
                                }
                            }
                        }
                    }
                } catch (java.sql.SQLException sqlExec) {

                    sqlExec.printStackTrace();

                    javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

                }

            }            //
        } else {

            try {
                int i = 0;
                java.lang.Object listofAct[] = this.getListofActivities();

                for (int y = 0; y < listofAct.length; y++) {

                    // for (int i = 0; i < reorderReportTable.getRowCount(); i++ ) {
                    if (presetReorderLevelsRdbtn.isSelected()) {

                        /*   reorderReportTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT st.item_code,sb.description,st.strength,st.units AS unit_pack,CASE WHEN (sum(round(sb.qty)) < 1) THEN 0 ELSE sum(round(sb.qty)) END AS stock_balance," +
                         "'"+minStock+"'::numeric as min_stock,'"+ReoderLevel+"'::numeric as reorder_level,'"+maxStock+"'::numeric as max_stock,'"+requ+"'::numeric as min_order, " +
                         "'"+requ+"'::numeric as qty_to_order FROM stock_balance_qty sb,stockitem st WHERE  sb.item_code = st.item_code" +
                         " AND st.department ilike '"+jComboBox1.getSelectedItem()+"' AND sb.department ilike '"+jComboBox1.getSelectedItem()+"' GROUP BY sb.description,st.strength,st.units,st.item_code HAVING sum(round(sb.qty)) < sum(st.reorder_level-st.quantity_toorder)"));
                         */
                        if (mainStoreChkbx.isSelected()) {
                            java.sql.Statement stmtTable111d = connectDB.createStatement();
                            java.sql.ResultSet rsetTable111d = stmtTable111d.executeQuery("SELECT sum(qty) FROM stock_balance_qty WHERE item_code = '" + listofAct[y] + "' AND department ilike '" + orderingStoreCmbx.getSelectedItem().toString() + "'");
                            while (rsetTable111d.next()) {
                                qtyInstock = rsetTable111d.getFloat(1);
                                // int i = 0;
                                java.sql.Statement stmtTable1 = connectDB.createStatement();
                                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT st.item_code,st.description,st.strength,st.units AS unit_pack,'" + qtyInstock + "' AS stock_balance,"
                                        + "min_stock::numeric as min_stock,reorder_level::numeric as reorder_level,max_stock::numeric as max_stock,'" + requ + "'::numeric as min_order, "
                                        + "'" + requ + "'::numeric as qty_to_order FROM stockitem st WHERE "
                                        + " st.department ilike '" + orderingStoreCmbx.getSelectedItem() + "' and reorder_level >= '" + qtyInstock + "' AND item_code = '" + listofAct[y] + "' ORDER BY st.description");

                                while (rsetTable1.next()) {
                                    reorderReportTable.setValueAt(rsetTable1.getObject(1), i, 0);
                                    reorderReportTable.setValueAt(rsetTable1.getObject(2), i, 1);
                                    reorderReportTable.setValueAt(rsetTable1.getObject(3), i, 2);
                                    reorderReportTable.setValueAt(rsetTable1.getObject(4), i, 3);
                                    reorderReportTable.setValueAt(rsetTable1.getObject(5), i, 4);
                                    reorderReportTable.setValueAt(rsetTable1.getObject(6), i, 5);
                                    reorderReportTable.setValueAt(rsetTable1.getObject(7), i, 6);
                                    reorderReportTable.setValueAt(rsetTable1.getObject(8), i, 7);
                                    reorderReportTable.setValueAt(rsetTable1.getObject(9), i, 8);
                                    reorderReportTable.setValueAt(rsetTable1.getObject(10), i, 9);

                                }

                                reorderReportTable.setValueAt(qtyInstock, i, 4);

                                rlevel = Float.parseFloat(reorderReportTable.getValueAt(i, 6).toString());
                                maxStock = Float.parseFloat(reorderReportTable.getValueAt(i, 7).toString());
                                minStock = Float.parseFloat(reorderReportTable.getValueAt(i, 5).toString());
                                qtyInstock = Float.parseFloat(reorderReportTable.getValueAt(i, 4).toString());

                                if (qtyInstock > 0) {
                                    reorderReportTable.setValueAt(new java.lang.Float(rlevel - qtyInstock), i, 8);
                                    if (maxStock > 0) {
                                        reorderReportTable.setValueAt(new java.lang.Float(maxStock - qtyInstock), i, 9);
                                    } else {
                                        reorderReportTable.setValueAt(new java.lang.Float(rlevel), i, 9);
                                    }
                                } else {
                                    reorderReportTable.setValueAt(new java.lang.Float(rlevel), i, 8);
                                    if (maxStock > 0) {
                                        reorderReportTable.setValueAt(new java.lang.Float(maxStock), i, 9);
                                    } else {
                                        reorderReportTable.setValueAt(new java.lang.Float(rlevel), i, 9);
                                    }
                                }

                            }
                        } else {
                            if (analyseBelowReorderLvelChkbx.isSelected()) {
                                /*Class[] types = new Class [] {
                                 java.lang.Object.class,java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
                                 };
                                 boolean[] canEdit = new boolean [] {
                                 false,false, false,false, false, false, false, false, false, true
                                 };
                                 javax.swing.table.TableColumn column = null;
                                 for (int s = 0; s < 10; s++) {
                                 column = reorderReportTable.getColumnModel().getColumn(s);
                                 if (s == 1) {
                                 
                                 column.setPreferredWidth(350); //sport column is bigger
                                 
                                 } else {
                                 
                                 column.setPreferredWidth(100);
                                 
                                 }
                                 }*/

                                /*reorderReportTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT st.product_id,sb.description,st.strength,st.units AS unit_pack,CASE WHEN (sum(round(sb.qty)) < 1) THEN 0 ELSE sum(round(sb.qty)) END AS stock_balance," +
                                 "'"+minStock+"'::numeric as min_stock,'"+ReoderLevel+"'::numeric as reorder_level,'"+maxStock+"'::numeric as max_stock,'"+requ+"'::numeric as min_order, " +
                                 "'"+requ+"'::numeric as qty_to_order FROM stock_balance_qty sb,stockprices st WHERE  sb.item_code = st.product_id" +
                                 " AND st.department ilike '"+jComboBox1.getSelectedItem()+"' AND sb.department ilike '"+jComboBox1.getSelectedItem()+"' GROUP BY sb.description,st.strength,st.units,st.product_id HAVING sum(round(sb.qty)) < sum(st.reorder_level)"));
                                 */
                                java.sql.Statement stmtTable111d = connectDB.createStatement();
                                java.sql.ResultSet rsetTable111d = stmtTable111d.executeQuery("SELECT sum(qty) FROM stock_balance_qty WHERE item_code = '" + listofAct[y] + "' AND department ilike '" + orderingStoreCmbx.getSelectedItem().toString() + "'");
                                while (rsetTable111d.next()) {

                                    qtyInstock = rsetTable111d.getFloat(1);
                                }
                                java.sql.Statement stmtTable1x = connectDB.createStatement();
                                java.sql.ResultSet rsetTable1 = stmtTable1x.executeQuery("SELECT st.product_id,st.product,st.strength,st.units AS unit_pack,'" + qtyInstock + "' AS stock_balance,"
                                        + "minimum_level::numeric as min_stock,reorder_level::numeric as reorder_level,maximum_level::numeric as max_stock,'" + requ + "'::numeric as min_order, "
                                        + "'" + requ + "'::numeric as qty_to_order FROM st_stock_prices st WHERE  "
                                        + " st.department ilike '" + orderingStoreCmbx.getSelectedItem() + "' and st.reorder_level >= '" + qtyInstock + "' AND st.product_id = '" + listofAct[y] + "' ORDER BY st.product");

                                // for (int i = 0; i < reorderReportTable.getRowCount(); i++ ) {
                                while (rsetTable1.next()) {
                                    reorderReportTable.setValueAt(rsetTable1.getObject(1), i, 0);
                                    reorderReportTable.setValueAt(rsetTable1.getObject(2), i, 1);
                                    reorderReportTable.setValueAt(rsetTable1.getObject(3), i, 2);
                                    reorderReportTable.setValueAt(rsetTable1.getObject(4), i, 3);
                                    reorderReportTable.setValueAt(rsetTable1.getObject(5), i, 4);
                                    reorderReportTable.setValueAt(rsetTable1.getObject(6), i, 5);
                                    reorderReportTable.setValueAt(rsetTable1.getObject(7), i, 6);
                                    reorderReportTable.setValueAt(rsetTable1.getObject(8), i, 7);
                                    reorderReportTable.setValueAt(rsetTable1.getObject(9), i, 8);
                                    reorderReportTable.setValueAt(rsetTable1.getObject(10), i, 9);

                                    //i++;
                                    // try{
                                    // for (int i = 0; i < reorderReportTable.getRowCount(); i++){
                                    // reorderReportTable.setValueAt(qtyInstock, i, 4);
                                    rlevel = Float.parseFloat(reorderReportTable.getValueAt(i, 6).toString());
                                    maxStock = Float.parseFloat(reorderReportTable.getValueAt(i, 7).toString());
                                    minStock = Float.parseFloat(reorderReportTable.getValueAt(i, 5).toString());
                                    qtyInstock = Float.parseFloat(reorderReportTable.getValueAt(i, 4).toString());

                                    if (qtyInstock > 0) {
                                        reorderReportTable.setValueAt(new java.lang.Float(rlevel - qtyInstock), i, 8);
                                        if (maxStock > 0) {
                                            reorderReportTable.setValueAt(new java.lang.Float(maxStock - qtyInstock), i, 9);
                                        } else {
                                            reorderReportTable.setValueAt(new java.lang.Float(rlevel), i, 9);
                                        }
                                    } else {
                                        reorderReportTable.setValueAt(new java.lang.Float(rlevel), i, 8);
                                        if (maxStock > 0) {
                                            reorderReportTable.setValueAt(new java.lang.Float(maxStock), i, 9);
                                        } else {
                                            reorderReportTable.setValueAt(new java.lang.Float(rlevel), i, 9);
                                        }
                                    }
                                    i++;
                                }
                            }

                        }
                    } else {

                        //}
                        //}
                    }
                    //i++;
                    //}

                    //}
                    //}
                }
            } catch (java.sql.SQLException sqlExec) {

                sqlExec.printStackTrace();

                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

            }
        }
    }

    /*  javax.swing.table.TableColumn column = null;
     for (int s = 0; s < 7; s++) {
     column = reorderReportTable.getColumnModel().getColumn(s);
     if (s == 0) {
   
     column.setPreferredWidth(300); //sport column is bigger
     // } else {
     //     if (s == 1) {
     //         column.setPreferredWidth(100);
     } else {
     //if (i == 2) {
     column.setPreferredWidth(100);
     // }  else
     //column.setPreferredWidth(50);
   
     //  }
     }
     }
     */
    //        jScrollPane1.setViewportView(reorderReportTable);

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox analyseBelowReorderLvelChkbx;
    private javax.swing.JCheckBox analyseItemsChkbx;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelbtn;
    private javax.swing.JButton exitbtn;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox mainStoreChkbx;
    private javax.swing.JRadioButton movingAverageReorderRdbtn;
    private javax.swing.JLabel orderDateLbl;
    private com.afrisoftech.lib.DatePicker orderDatePicker;
    private javax.swing.JLabel orderStoreLbl;
    private javax.swing.JComboBox orderingStoreCmbx;
    private javax.swing.JButton postbtn;
    private javax.swing.JRadioButton presetReorderLevelsRdbtn;
    private javax.swing.JButton printReportBtn;
    private javax.swing.JCheckBox refreshReordersChkbx;
    private javax.swing.JButton removeRowBtn;
    private javax.swing.JPanel reorderMainPanel;
    private javax.swing.JPanel reorderReportPanel;
    private javax.swing.JTable reorderReportTable;
    private javax.swing.JButton resetbtn;
    private javax.swing.JLabel spacerLbl;
    private javax.swing.JCheckBox subStoreChkbx;
    private javax.swing.JComboBox supplyStoreCmbx;
    private javax.swing.JLabel supplyStoreLbl;
    // End of variables declaration//GEN-END:variables

}
