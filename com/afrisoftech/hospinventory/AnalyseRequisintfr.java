/*
 * Requisitions.java
 *
 * Created on April 22, 2003, 5:12 PM
 */

package com.afrisoftech.hospinventory;

/**
 *
 * @author  root
 */
public class AnalyseRequisintfr extends javax.swing.JInternalFrame implements java.lang.Runnable {
    javax.swing.JComboBox cmbox2 =null;
    javax.swing.JComboBox cmbox3 =null;
    javax.swing.JComboBox cmbox4 =null;
    
    javax.swing.JSpinner dateSpinner = null;
    javax.swing.JSpinner dateSpinner1 = null;
    
    
    java.lang.Thread getListThread;
    
    java.sql.Connection connectDB = null;
    
    boolean getList;
    
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    
    
    public AnalyseRequisintfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {
        
        
        
        connectDB = connDb;
        
        pConnDB = pconnDB;
        
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        postbtn = new javax.swing.JButton();
        resetbtn = new javax.swing.JButton();
        cancelbtn = new javax.swing.JButton();
        exitbtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new com.afrisoftech.dbadmin.JTable();
        jPanel1 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        jLabel3 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jCheckBox5 = new javax.swing.JCheckBox();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Analyse Requisitions");
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new java.awt.GridBagLayout());

        postbtn.setMnemonic('s');
        postbtn.setText("Save");
        postbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(postbtn, gridBagConstraints);

        resetbtn.setText("Reset");
        resetbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(resetbtn, gridBagConstraints);

        cancelbtn.setMnemonic('l');
        cancelbtn.setText("Clear");
        cancelbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(cancelbtn, gridBagConstraints);

        exitbtn.setMnemonic('c');
        exitbtn.setText("Close");
        exitbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(exitbtn, gridBagConstraints);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel3.add(jLabel5, gridBagConstraints);

        jButton1.setText("Print");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton1, gridBagConstraints);

        jButton2.setText("Remove Row");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel4.add(jPanel3, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Total analysis of requisitions received"));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Item Code", "Description", "Strength", "Unit Pack", "Qty In Stock", "Min Stock", "Reorder Level", "Max Stock", "Min. Order", "Qty. To Order"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(204, 204, 255));
        /*    try {

            crset2.setCommand("select description,units,stock,reorder_level,quantity,min_order AS quantity,reorder_level-stock as min_order,reorder_level-stock as min_order from analysed_requisation where reorder_level-stock > 0 order by description");
            //  crset2.setCommand("select description,units,sum(quantity_in_stock) as quantity_in_stock,reorder_level,sum(quantity) as quantity,sum(reorder_level-quantity_in_stock) as min_order,sum(min_order) AS min_order from ungroup_analyse_requisation group by description,units,reorder_level");

            crset2.setConnectionSource(pConnDB);

            crset2.execute();
            jTable1.setModel(new org.netbeans.lib.sql.models.TableModel(crset2, new org.netbeans.lib.sql.models.TableModel.Column[] {

                new org.netbeans.lib.sql.models.TableModel.Column("description", "Item", false),
                new org.netbeans.lib.sql.models.TableModel.Column("units", "Units", false),
                new org.netbeans.lib.sql.models.TableModel.Column("stock", "Qty In Stock", false),
                new org.netbeans.lib.sql.models.TableModel.Column("reorder_level", "Reorder Level", false),
                new org.netbeans.lib.sql.models.TableModel.Column("quantity", "Qty Ordered", false),
                new org.netbeans.lib.sql.models.TableModel.Column("min_order", "Min.Order", false),
                new org.netbeans.lib.sql.models.TableModel.Column("min_order", "Qty to Order", true)

            }));

            jScrollPane1.setViewportView(jTable1);
        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());

        }

        javax.swing.table.TableColumn column = null;
        for (int i = 0; i < 7; i++) {
            column = jTable1.getColumnModel().getColumn(i);
            if (i == 0) {

                column.setPreferredWidth(250); //sport column is bigger
            } else {
                if (i == 1) {
                    column.setPreferredWidth(100);
                } else {
                    //if (i == 2) {
                        column.setPreferredWidth(100);
                        // }  else
                    //column.setPreferredWidth(50);

                }
            }
        }
        */
        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel4.add(jPanel2, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(jCheckBox1);
        jCheckBox1.setText("Analyse all Items");
        jCheckBox1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jCheckBox1, gridBagConstraints);

        buttonGroup1.add(jCheckBox2);
        jCheckBox2.setText("Refresh");
        jCheckBox2.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jCheckBox2, gridBagConstraints);

        jLabel1.setText("Ordering Store");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        jComboBox1.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select distinct store_name from st_stores order by store_name"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(jComboBox1, gridBagConstraints);

        buttonGroup2.add(jRadioButton1);
        jRadioButton1.setText("Analysis based on preset reorder level");
        jRadioButton1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 10);
        jPanel1.add(jRadioButton1, gridBagConstraints);

        buttonGroup2.add(jRadioButton2);
        jRadioButton2.setText("Analysis based on consumption average");
        jRadioButton2.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 10);
        jPanel1.add(jRadioButton2, gridBagConstraints);

        buttonGroup3.add(jCheckBox3);
        jCheckBox3.setText("Main Store");
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel1.add(jCheckBox3, gridBagConstraints);

        buttonGroup3.add(jCheckBox4);
        jCheckBox4.setText("Sub Store");
        jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel1.add(jCheckBox4, gridBagConstraints);

        jLabel2.setText("Order Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(datePicker1, gridBagConstraints);

        jLabel3.setText("Supplying Store");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        jComboBox2.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select distinct store_name from st_stores order by store_name"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(jComboBox2, gridBagConstraints);

        buttonGroup1.add(jCheckBox5);
        jCheckBox5.setText("Analyse Below Re-Order Level");
        jCheckBox5.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jCheckBox5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jPanel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel4, gridBagConstraints);

        setBounds(0, 0, 924, 400);
    }// </editor-fold>//GEN-END:initComponents
    
    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
        getList = true;
        
        getListThread = new java.lang.Thread(this, "get_list_Thread");
        
        getListThread.start();
        
        postbtn.setEnabled(true);
// TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox5ActionPerformed
    
    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        jComboBox1.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT store_name FROM st_stores ORDER BY 1"));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //   jComboBox2ActionPerformed(evt);
            }
        });
        
        
        
        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox4ActionPerformed
    
    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
//this.jTextField1.setVisible(true);
        jComboBox1.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select store_name from st_main_stores order by 1"));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //  jComboBox2ActionPerformed(evt);
            }
        });
        
        
        
        
        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox3ActionPerformed
    
    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int rows2Delete = jTable1.getSelectedRowCount();
        
        int[] selectedRows = jTable1.getSelectedRows();
        
        if (rows2Delete < 1) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            
            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");
            
        } else {
            
            if (rows2Delete > 1) {
                
                for (int i = 0; i < selectedRows.length; i++) {
                    
                    
                    
                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable1.getModel();
                    
                    defTableModel.removeRow(selectedRows[i]);
                    
                }
                
                
                
            } else {
                
                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable1.getModel();
                
                defTableModel.removeRow(jTable1.getSelectedRow());
            }
        }        // Add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String transNo = null;
        try{
            java.sql.Statement ps = connectDB.createStatement();
            java.sql.ResultSet rs2 = ps.executeQuery("select 'RQ'||lpad(currval('req_no_seq')::text,6,0::text)");
            while (rs2.next()){
                transNo = rs2.getObject(1).toString();
            }
            com.afrisoftech.hospinventory.RequisationPdf policy = new com.afrisoftech.hospinventory.RequisationPdf();
            policy.RequisationPdf(connectDB,datePicker1.getDate(),datePicker1.getDate(), jComboBox1.getSelectedItem().toString(),transNo);
        }catch(java.sql.SQLException sq){
            sq.printStackTrace();
        }
// Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        for (int k = 0; k < jTable1.getRowCount(); k++ ) {
            for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                jTable1.getModel().setValueAt(null,k,r);
            }
        }        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed
    
    public java.lang.Object[] getListofActivities() {
        
        java.lang.Object[] listofActivities = null;
        
        java.util.Vector listActVector = new java.util.Vector(1,1);
        
        
        try {
            
            
            java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT item_code FROM stock_balance_qty WHERE department ilike '"+jComboBox1.getSelectedItem().toString()+"' AND item_code IS NOT NULL");
            
            while (rSet1.next()) {
                listActVector.addElement(rSet1.getObject(1).toString());
                System.out.println("description"+rSet1.getObject(1).toString());
            }
            
            
        }catch (java.sql.SQLException sqlExec) {
            
            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());
            
        }
        
        listofActivities = listActVector.toArray();
        System.out.println("Done list of activities ...");
        return listofActivities;
        
    }
    
    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        
        getList = true;
        
        getListThread = new java.lang.Thread(this, "get_list_Thread");
        
        getListThread.start();
        
        postbtn.setEnabled(true);
        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed
    
    private void exitbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitbtnActionPerformed
        this.dispose();        // Add your handling code here:
    }//GEN-LAST:event_exitbtnActionPerformed
    
    private void resetbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetbtnActionPerformed
        
        postbtn.setEnabled(false);
        //    this.getContentPane().removeAll();
        //    this.initComponents();
        // Add your handling code here:
    }//GEN-LAST:event_resetbtnActionPerformed
    
    private void cancelbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelbtnActionPerformed
        for (int k = 0; k < jTable1.getRowCount(); k++ ) {
            for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                jTable1.getModel().setValueAt(null,k,r);
            }
        }
        
        // Add your handling code here:
    }//GEN-LAST:event_cancelbtnActionPerformed
    
    private void postbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postbtnActionPerformed
        java.util.Calendar calendar = java.util.Calendar.getInstance();
        String req_no = null;
        long dateNow = calendar.getTimeInMillis();
        
        java.sql.Date datenowSql= new java.sql.Date(dateNow);
        
        System.out.println(datenowSql.toString());
        String description = null;
        String code = null;
        String Stock = null;
        String actCode = null;
        String accountCode = null;
        String transNo = null;
        String transNo1 = null;
        String glType = null;
        String user = null;
        String userName = null;
        String glCode = null;
        String units = null;
        String ChkBx = null;
        try {
            connectDB.setAutoCommit(false);
            String reqno = null;
           /* java.sql.Statement pstmt1x = connectDB.createStatement();
            java.sql.ResultSet rs1x = pstmt1x.executeQuery("select nextval('req_no_seq')");
            
            while (rs1x.next()){
                reqno = rs1x.getObject(1).toString();
            }
            java.sql.Statement pstmt1 = connectDB.createStatement();
            java.sql.ResultSet rs1 = pstmt1.executeQuery("select lpad('"+reqno+"',7,'0'),date('now')");
            
            while (rs1.next()){
                req_no = rs1.getObject(1).toString();
            }*/
            
            java.sql.Statement pst2q = connectDB.createStatement();
            java.sql.ResultSet rsq = pst2q.executeQuery("select current_user");
            while (rsq.next()){
                userName = rsq.getObject(1).toString();
            }
            java.sql.Statement ps = connectDB.createStatement();
            java.sql.ResultSet rs2 = ps.executeQuery("select 'IRQ'||lpad(nextval('req_no_seq')::text,6,0::TEXT)");
            while (rs2.next()){
                transNo = rs2.getObject(1).toString();
            }
            //       java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_orders values(?, ?,?,round(?),?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
            for (int i = 0; i < jTable1.getRowCount(); i++){
                if (jTable1.getModel().getValueAt(i,9) != null){
                    double pack = 0.00;
                    double quantity = Double.parseDouble(jTable1.getModel().getValueAt(i, 9).toString());
                    if(quantity > 0){
                        // double quantity = Double.parseDouble(jTable1.getModel().getValueAt(i, 5).toString());
                        if(java.util.regex.Pattern.matches("[0-9]*",jTable1.getValueAt(i, 3).toString())){
                            pack = Double.parseDouble(jTable1.getValueAt(i, 3).toString());
                        }else{
                            pack = 1;
                        }  //double uprice = Double.parseDouble(jTable1.getModel().getValueAt(i, 6).toString());
                        double itemPrice = 0.00;
                        
                        if(jCheckBox4.isSelected()){
                            java.sql.Statement pst221 = connectDB.createStatement();
                            java.sql.ResultSet rs21 = pst221.executeQuery("SELECT transfer_price FROM st_stock_prices WHERE product_id = '"+jTable1.getModel().getValueAt(i, 0).toString()+"' AND department ilike '"+jComboBox1.getSelectedItem()+"'");
                            while (rs21.next()){
                                itemPrice = rs21.getDouble(1);
                            }
                        }else{
                            java.sql.Statement pst221 = connectDB.createStatement();
                            java.sql.ResultSet rs21 = pst221.executeQuery("SELECT buying_price/'"+pack+"' FROM st_stock_item WHERE item_code = '"+jTable1.getModel().getValueAt(i, 0).toString()+"' AND department ilike '"+jComboBox1.getSelectedItem()+"'");
                            while (rs21.next()){
                                itemPrice = rs21.getDouble(1);
                            }
                        }
                        
                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_receive_requisation values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                        pstmt.setObject(1,"");
                        pstmt.setObject(2,com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                        pstmt.setObject(3,jComboBox1.getSelectedItem());
                        pstmt.setObject(4,jTable1.getValueAt(i,1).toString());
                        pstmt.setObject(5,jTable1.getValueAt(i,3).toString());
                        pstmt.setDouble(6,java.lang.Double.valueOf(jTable1.getValueAt(i,9).toString()));
                        pstmt.setDate(7,com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                        pstmt.setDate(8,com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.util.Calendar.getInstance().getTime()));
                        pstmt.setBoolean(9,false);
                        pstmt.setBoolean(10,false);
                        pstmt.setObject(11,"Normal");
                        pstmt.setString(12,transNo);
                        pstmt.setDouble(13,itemPrice);
                        pstmt.setString(14,userName);
                        pstmt.setObject(15,jComboBox2.getSelectedItem());
                        pstmt.setDouble(16,0.00);
                        pstmt.setDouble(17,java.lang.Double.valueOf(jTable1.getValueAt(i,4).toString()));
                        pstmt.setBoolean(18,false);
                        pstmt.setObject(19,"");
                         pstmt.setObject(20,"Main Store");
                        pstmt.setTimestamp(21,new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));//com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.util.Calendar.getInstance().getTime()));
                          pstmt.setObject(22,jTable1.getValueAt(i,4).toString());
                    
                        pstmt.setString(23,"System Analysed");
                        pstmt.setDouble(24,0.00);
                        pstmt.setObject(25,"");
                        pstmt.setDouble(26,java.lang.Double.valueOf(jTable1.getValueAt(i,6).toString()));
                     //   pstmt.setObject(26,jTable1.getValueAt(i,7).toString());
                            pstmt.setObject(27,"");
                                pstmt.setObject(28,"");
                       // pstmt.setObject(27,jTable1.getValueAt(i,8).toString());
                        pstmt.setObject(29,jTable1.getValueAt(i,0).toString());
                       // pstmt.setDouble(29,java.lang.Double.valueOf(jTable1.getValueAt(i,6).toString()));
                        pstmt.setDouble(30,java.lang.Double.valueOf(jTable1.getValueAt(i,7).toString()));
                        pstmt.setDouble(31,java.lang.Double.valueOf(jTable1.getValueAt(i,5).toString()));
                        pstmt.setObject(32,jTable1.getValueAt(i,2).toString());
                        pstmt.executeUpdate();
                    }
                }
            }
            
            
            connectDB.commit();
            connectDB.setAutoCommit(true);
            
            postbtn.setEnabled(false);
            jLabel5.setForeground(java.awt.Color.blue);
            //jLabel5.setText("Insert successful");
                javax.swing.JOptionPane.showMessageDialog(this, "Analysed Requisition Saved Successfully","Confirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
        
        }   catch(java.sql.SQLException sq){
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());
            try {
                connectDB.rollback();
            }catch (java.sql.SQLException sql){
                javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_postbtnActionPerformed
    private void cmbox2ActionPerformed(java.awt.event.ActionEvent evt){
    /*  int i = jTable1.getSelectedRow();
      java.lang.Object res_cmbox2 = cmbox2.getSelectedItem();
     
      try {
             java.sql.Statement pstmt = connectDB.createStatement();
          java.sql.ResultSet rs = pstmt.executeQuery("select units from stock_item where description = '"+cmbox2.getSelectedItem()+"'");
          while (rs.next())
            jTable1.setValueAt(rs.getObject(1),i,2);
     
      } catch(java.sql.SQLException sqlex){
        System.out.println(sqlex.getMessage());
 }
     */
    }
    
    
    public void run() {
        
        while(getList) {
            
            runGetListThread();
            
            try {
                
                Thread.currentThread().sleep(100);
                
            } catch(java.lang.InterruptedException IntExec){
                
                javax.swing.JOptionPane.showMessageDialog(this, IntExec.getMessage(), "Interruption Error!", javax.swing.JOptionPane.ERROR_MESSAGE);
                
            }
            
            getList = false;
            
        }
        
    }
    
    public void runGetListThread() {
        
        for (int k = 0; k < jTable1.getRowCount(); k++ ) {
            for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                jTable1.getModel().setValueAt(null,k,r);
            }
        }
        int j = 0;
        //    int i = 0;
        int n = 0;
        float leadtime = 0;
        float averagese = 0;
        float quantityToOrder = 0;
        float ReoderLevel = 0;
        float sumQty = 0;
        int avgr = 0;
        float reorders = 0;
        float qtyInstock = 0;
        float balance = 0;
        float qtyReq = 0;
        float sumQty1 = 0;
        float requ = 0;
        float rlevel = 0;
        float rtime = 0;
        float orders = 0;
        float averageCons = 0;
        
     /*   try {
      
            java.sql.Statement stmtTab = connectDB.createStatement();
      
            java.sql.ResultSet rsetTab = stmtTab.executeQuery("select average_day::int,read_time,reorder_level from st_ordering_constants");
      
            while (rsetTab.next()) {
      
                averagese = rsetTab.getFloat(1);
                leadtime = rsetTab.getFloat(2);
                avgr = rsetTab.getInt(1);
                reorders = rsetTab.getFloat(3);
            }
      
            //  for (int y = 0; y < listofAct.length; y++) {
            //        java.lang.Object listofDays[] = this.getListofActivities(listofAct[y]);
      
            java.lang.Object listofDays[] = this.getListofActivities();
            for (int l = 0; l < listofDays.length; l++) {
                if(jRadioButton2.isSelected()){
                    java.sql.Statement stmtTable1 = connectDB.createStatement();
                    //     java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select item,units,sum(issuing) from st_sub_stores where item = '"+listofDays[l]+"' and trans_date::date BETWEEN (date('now') - '"+avgr+"'::int) AND date('now') and issuing>0 group by item,units");
      
                    java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select item,units,sum(round(quantity)),sum(round(reorder_level)),sum(round(read_time)) from stock_analysis where item = '"+listofDays[l]+"' AND store_name ilike '"+jComboBox1.getSelectedItem().toString()+"%' GROUP BY item,units");
      
                    //  java.sql.Statement stmtTableq = connectDB.createStatement();
                    //  java.sql.ResultSet rsetTable4 = stmtTableq.executeQuery("select count(item) from stock_analysis where item = '"+listofDays[l]+"'");
      
                    java.sql.Statement stmtTable11 = connectDB.createStatement();
                    java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("select sum(qty) from stock_balance_qty where description ilike '"+listofDays[l]+"' AND department ilike '"+jComboBox1.getSelectedItem().toString()+"%'");
      
                    java.sql.Statement stmtTable111 = connectDB.createStatement();
      
                    while (rsetTable1.next()) {
      
                        requ = rsetTable1.getFloat(3);
                        rlevel = rsetTable1.getFloat(4);
                        rtime = rsetTable1.getFloat(5);
      
      
                        orders = (rlevel)+(rtime);
                        while (rsetTable11.next()) {
      
                            qtyInstock = rsetTable11.getFloat(1);
                            if (orders > qtyInstock){
      
                                jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                                jTable1.setValueAt(rsetTable1.getObject(2), i, 1);
                                jTable1.setValueAt(rsetTable1.getObject(3), i, 2);
                                jTable1.setValueAt(rsetTable1.getObject(4), i, 3);
      
                                if (qtyInstock > 0){
                                    jTable1.setValueAt(new java.lang.Float(java.lang.String.valueOf(java.lang.Math.round(qtyInstock))), i, 4);
                                    qtyInstock = qtyInstock;
                                    //     java.sql.Statement stmtTable11A = connectDB.createStatement();
      
                                }else{
                                    jTable1.setValueAt(new java.lang.Float(java.lang.String.valueOf(java.lang.Math.round(0))), i, 4);
                                    qtyInstock = 0;
                                }
      
      
      
                                qtyReq = rsetTable1.getFloat(3);
                                averageCons = rsetTable1.getFloat(3)/averagese;
      
                                System.out.println(java.lang.Math.round(averageCons));
                                System.out.println("Lead time is ["+leadtime+"]");
                                quantityToOrder = java.lang.Math.round(averageCons*leadtime);
                                System.out.println("These are the items to order " +quantityToOrder);
                                //    jTable1.setValueAt(new java.lang.Float(java.lang.String.valueOf(java.lang.Math.round(averageCons*reorders))), i, 3);
      
      
                                if (jTable1.getValueAt(i, 3) !=null){
                                    // double reOrderLevel1 = java.lang.Double.parseDouble(jTable1.getValueAt(i, 3).toString());
                                    // if ((averageCons*reorders + quantityToOrder) > qtyInstock){
                                    if (orders > qtyInstock){
                                        // sumQty1 = java.lang.Math.round(averageCons*leadtime/reorders) - qtyInstock + quantityToOrder;
                                        sumQty1 = java.lang.Math.round(orders - qtyInstock);
                                        //sumQty1 = java.lang.Math.round(averageCons*reorders) - qtyInstock + quantityToOrder;
      
                                    }else{
                                        sumQty1 = 0;
                                    }
      
                                    if (sumQty1 > 0){
                                        jTable1.setValueAt(new java.lang.Float(sumQty1), i, 5);
                                        jTable1.setValueAt(new java.lang.Float(sumQty1), i, 6);
                                    }else{
      
                                        jTable1.setValueAt(new java.lang.Float(sumQty1*-1), i, 5);
                                        jTable1.setValueAt(new java.lang.Float(sumQty1*-1), i, 6);
      
                                    }
                                }
                                i++;
      
                            }
      
                        }
                    }
                }else{*/
        // java.lang.Object listofDays[] = this.getListofActivities();
        float maxStock = 0;
        float minStock = 0;
        qtyInstock = 0;
        if(jCheckBox1.isSelected()){
            if(jRadioButton1.isSelected()){
                
         /*   jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT st.item_code,sb.description,st.strength,st.units AS unit_pack,CASE WHEN (sum(round(sb.qty)) < 1) THEN 0 ELSE sum(round(sb.qty)) END AS stock_balance," +
                        "'"+minStock+"'::numeric as min_stock,'"+ReoderLevel+"'::numeric as reorder_level,'"+maxStock+"'::numeric as max_stock,'"+requ+"'::numeric as min_order, " +
                        "'"+requ+"'::numeric as qty_to_order FROM stock_balance_qty sb,stockitem st WHERE  sb.item_code = st.item_code" +
                        " AND st.department ilike '"+jComboBox1.getSelectedItem()+"' AND sb.department ilike '"+jComboBox1.getSelectedItem()+"' GROUP BY sb.description,st.strength,st.units,st.item_code HAVING sum(round(sb.qty)) < sum(st.reorder_level-st.quantity_toorder)"));
          */
                if(jCheckBox3.isSelected()){
                    jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT st.item_code,st.description,st.strength,st.units AS unit_pack,'"+qtyInstock+"' AS stock_balance," +
                            "min_stock::numeric as min_stock,reorder_level::numeric as reorder_level,max_stock::numeric as max_stock,'"+requ+"'::numeric as min_order, " +
                            "'"+requ+"'::numeric as qty_to_order FROM stockitem st WHERE " +
                            " st.department ilike '"+jComboBox1.getSelectedItem()+"' ORDER BY st.description"));
                    
                    Class[] types = new Class [] {
                        java.lang.Object.class,java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
                    };
                    boolean[] canEdit = new boolean [] {
                        false,false, false,false, false, false, false, false, false, true
                    };
                    javax.swing.table.TableColumn column = null;
                    for (int s = 0; s < 10; s++) {
                        column = jTable1.getColumnModel().getColumn(s);
                        if (s == 1) {
                            
                            column.setPreferredWidth(350); //sport column is bigger
                            
                        } else {
                            
                            column.setPreferredWidth(100);
                            
                        }
                    }
                }else{
                    
                /*jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT st.product_id,sb.description,st.strength,st.units AS unit_pack,CASE WHEN (sum(round(sb.qty)) < 1) THEN 0 ELSE sum(round(sb.qty)) END AS stock_balance," +
                        "'"+minStock+"'::numeric as min_stock,'"+ReoderLevel+"'::numeric as reorder_level,'"+maxStock+"'::numeric as max_stock,'"+requ+"'::numeric as min_order, " +
                        "'"+requ+"'::numeric as qty_to_order FROM stock_balance_qty sb,stockprices st WHERE  sb.item_code = st.product_id" +
                        " AND st.department ilike '"+jComboBox1.getSelectedItem()+"' AND sb.department ilike '"+jComboBox1.getSelectedItem()+"' GROUP BY sb.description,st.strength,st.units,st.product_id HAVING sum(round(sb.qty)) < sum(st.reorder_level)"));
                 */
                    
                    jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT st.product_id,st.product,st.strength,st.units AS unit_pack,'"+qtyInstock+"' AS stock_balance," +
                            
                            "minimum_level::numeric as min_stock,reorder_level::numeric as reorder_level,maximum_level::numeric as max_stock,'"+requ+"'::numeric as min_order, " +
                            "'"+requ+"'::numeric as qty_to_order FROM stockprices st WHERE  " +
                            " st.department ilike '"+jComboBox1.getSelectedItem()+"' ORDER BY st.product"));
                    
                    Class[] types = new Class [] {
                        java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
                    };
                    boolean[] canEdit = new boolean [] {
                        false, false, false, false, false, false, false, false, false, true
                    };
                    javax.swing.table.TableColumn column = null;
                    for (int s = 0; s < 10; s++) {
                        column = jTable1.getColumnModel().getColumn(s);
                        if (s == 1) {
                            
                            column.setPreferredWidth(350); //sport column is bigger
                            // } else {
                            //     if (s == 1) {
                            //         column.setPreferredWidth(100);
                        } else {
                            //if (i == 2) {
                            column.setPreferredWidth(100);
                            // }  else
                            //column.setPreferredWidth(50);
                            
                            //  }
                        }
                    }
                }
                
                try{
                    for (int i = 0; i < jTable1.getRowCount(); i++){
                        if(jCheckBox3.isSelected()){
                            java.sql.Statement stmtTable111d = connectDB.createStatement();
                            java.sql.ResultSet rsetTable111d = stmtTable111d.executeQuery("SELECT sum(qty) FROM stock_balance_qty WHERE item_code = '"+jTable1.getValueAt(i, 0)+"' AND department ilike '"+jComboBox1.getSelectedItem().toString()+"%'");
                            
                            while (rsetTable111d.next()) {
                                jTable1.setValueAt(rsetTable111d.getObject(1), i, 4);
                                
                                rlevel = Float.parseFloat(jTable1.getValueAt(i,6).toString());
                                maxStock = Float.parseFloat(jTable1.getValueAt(i,7).toString());
                                minStock = Float.parseFloat(jTable1.getValueAt(i,5).toString());
                                qtyInstock = Float.parseFloat(jTable1.getValueAt(i,4).toString());
                                
                                
                                if(qtyInstock > 0){
                                    jTable1.setValueAt(new java.lang.Float(rlevel-qtyInstock), i, 8);
                                    if(maxStock > 0){
                                        jTable1.setValueAt(new java.lang.Float(maxStock-qtyInstock), i, 9);
                                    }else{
                                        jTable1.setValueAt(new java.lang.Float(rlevel), i, 9);
                                    }
                                }else{
                                    jTable1.setValueAt(new java.lang.Float(rlevel), i, 8);
                                    if(maxStock > 0){
                                        jTable1.setValueAt(new java.lang.Float(maxStock), i, 9);
                                    }else{
                                        jTable1.setValueAt(new java.lang.Float(rlevel), i, 9);
                                    }
                                }
                                
                            }
                            
                        }else{
                            java.sql.Statement stmtTable111d = connectDB.createStatement();
                            java.sql.ResultSet rsetTable111d = stmtTable111d.executeQuery("SELECT sum(qty) FROM stock_balance_qty WHERE item_code = '"+jTable1.getValueAt(i, 0)+"' AND department ilike '"+jComboBox1.getSelectedItem().toString()+"%'");
                            
                            
                            while (rsetTable111d.next()) {
                                jTable1.setValueAt(rsetTable111d.getObject(1), i, 4);
                                
                                rlevel = Float.parseFloat(jTable1.getValueAt(i,6).toString());
                                maxStock = Float.parseFloat(jTable1.getValueAt(i,7).toString());
                                minStock = Float.parseFloat(jTable1.getValueAt(i,5).toString());
                                qtyInstock = Float.parseFloat(jTable1.getValueAt(i,4).toString());
                                
                                
                                
                                if(qtyInstock > 0){
                                    jTable1.setValueAt(new java.lang.Float(rlevel-qtyInstock), i, 8);
                                    if(maxStock > 0){
                                        jTable1.setValueAt(new java.lang.Float(maxStock-qtyInstock), i, 9);
                                    }else{
                                        jTable1.setValueAt(new java.lang.Float(rlevel), i, 9);
                                    }
                                }else{
                                    jTable1.setValueAt(new java.lang.Float(rlevel), i, 8);
                                    if(maxStock > 0){
                                        jTable1.setValueAt(new java.lang.Float(maxStock), i, 9);
                                    }else{
                                        jTable1.setValueAt(new java.lang.Float(rlevel), i, 9);
                                    }
                                }
                            }
                        }
                    }
                } catch(java.sql.SQLException sqlExec) {
                    
                    sqlExec.printStackTrace();
                    
                    javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
                    
                }
                
            }            //
        }else{
            
            try{
                int i = 0;
                java.lang.Object listofAct[] = this.getListofActivities();
                
                for (int y = 0; y < listofAct.length; y++) {
                    
                    // for (int i = 0; i < jTable1.getRowCount(); i++ ) {
                    
                    
                    if(jRadioButton1.isSelected()){
                        
         /*   jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT st.item_code,sb.description,st.strength,st.units AS unit_pack,CASE WHEN (sum(round(sb.qty)) < 1) THEN 0 ELSE sum(round(sb.qty)) END AS stock_balance," +
                        "'"+minStock+"'::numeric as min_stock,'"+ReoderLevel+"'::numeric as reorder_level,'"+maxStock+"'::numeric as max_stock,'"+requ+"'::numeric as min_order, " +
                        "'"+requ+"'::numeric as qty_to_order FROM stock_balance_qty sb,stockitem st WHERE  sb.item_code = st.item_code" +
                        " AND st.department ilike '"+jComboBox1.getSelectedItem()+"' AND sb.department ilike '"+jComboBox1.getSelectedItem()+"' GROUP BY sb.description,st.strength,st.units,st.item_code HAVING sum(round(sb.qty)) < sum(st.reorder_level-st.quantity_toorder)"));
          */
                        if(jCheckBox3.isSelected()){
                            java.sql.Statement stmtTable111d = connectDB.createStatement();
                            java.sql.ResultSet rsetTable111d = stmtTable111d.executeQuery("SELECT sum(qty) FROM stock_balance_qty WHERE item_code = '"+listofAct[y]+"' AND department ilike '"+jComboBox1.getSelectedItem().toString()+"'");
                            while (rsetTable111d.next()){
                                qtyInstock = rsetTable111d.getFloat(1);
                                // int i = 0;
                                java.sql.Statement stmtTable1 = connectDB.createStatement();
                                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT st.item_code,st.description,st.strength,st.units AS unit_pack,'"+qtyInstock+"' AS stock_balance," +
                                        "min_stock::numeric as min_stock,reorder_level::numeric as reorder_level,max_stock::numeric as max_stock,'"+requ+"'::numeric as min_order, " +
                                        "'"+requ+"'::numeric as qty_to_order FROM stockitem st WHERE " +
                                        " st.department ilike '"+jComboBox1.getSelectedItem()+"' and reorder_level >= '"+qtyInstock+"' AND item_code = '"+listofAct[y]+"' ORDER BY st.description");
                                
                                while (rsetTable1.next()){
                                    jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                                    jTable1.setValueAt(rsetTable1.getObject(2), i, 1);
                                    jTable1.setValueAt(rsetTable1.getObject(3), i, 2);
                                    jTable1.setValueAt(rsetTable1.getObject(4), i, 3);
                                    jTable1.setValueAt(rsetTable1.getObject(5), i, 4);
                                    jTable1.setValueAt(rsetTable1.getObject(6), i, 5);
                                    jTable1.setValueAt(rsetTable1.getObject(7), i, 6);
                                    jTable1.setValueAt(rsetTable1.getObject(8), i, 7);
                                    jTable1.setValueAt(rsetTable1.getObject(9), i, 8);
                                    jTable1.setValueAt(rsetTable1.getObject(10), i, 9);
                                    
                                }
                                
                                jTable1.setValueAt(qtyInstock, i, 4);
                                
                                rlevel = Float.parseFloat(jTable1.getValueAt(i,6).toString());
                                maxStock = Float.parseFloat(jTable1.getValueAt(i,7).toString());
                                minStock = Float.parseFloat(jTable1.getValueAt(i,5).toString());
                                qtyInstock = Float.parseFloat(jTable1.getValueAt(i,4).toString());
                                
                                
                                if(qtyInstock > 0){
                                    jTable1.setValueAt(new java.lang.Float(rlevel-qtyInstock), i, 8);
                                    if(maxStock > 0){
                                        jTable1.setValueAt(new java.lang.Float(maxStock-qtyInstock), i, 9);
                                    }else{
                                        jTable1.setValueAt(new java.lang.Float(rlevel), i, 9);
                                    }
                                }else{
                                    jTable1.setValueAt(new java.lang.Float(rlevel), i, 8);
                                    if(maxStock > 0){
                                        jTable1.setValueAt(new java.lang.Float(maxStock), i, 9);
                                    }else{
                                        jTable1.setValueAt(new java.lang.Float(rlevel), i, 9);
                                    }
                                }
                                
                            }
                        }else{
                            if(jCheckBox5.isSelected()){
                                /*Class[] types = new Class [] {
                                    java.lang.Object.class,java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
                                };
                                boolean[] canEdit = new boolean [] {
                                    false,false, false,false, false, false, false, false, false, true
                                };
                                javax.swing.table.TableColumn column = null;
                                for (int s = 0; s < 10; s++) {
                                    column = jTable1.getColumnModel().getColumn(s);
                                    if (s == 1) {
                                 
                                        column.setPreferredWidth(350); //sport column is bigger
                                 
                                    } else {
                                 
                                        column.setPreferredWidth(100);
                                 
                                    }
                                }*/
                                
                                
                /*jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT st.product_id,sb.description,st.strength,st.units AS unit_pack,CASE WHEN (sum(round(sb.qty)) < 1) THEN 0 ELSE sum(round(sb.qty)) END AS stock_balance," +
                        "'"+minStock+"'::numeric as min_stock,'"+ReoderLevel+"'::numeric as reorder_level,'"+maxStock+"'::numeric as max_stock,'"+requ+"'::numeric as min_order, " +
                        "'"+requ+"'::numeric as qty_to_order FROM stock_balance_qty sb,stockprices st WHERE  sb.item_code = st.product_id" +
                        " AND st.department ilike '"+jComboBox1.getSelectedItem()+"' AND sb.department ilike '"+jComboBox1.getSelectedItem()+"' GROUP BY sb.description,st.strength,st.units,st.product_id HAVING sum(round(sb.qty)) < sum(st.reorder_level)"));
                 */
                                java.sql.Statement stmtTable111d = connectDB.createStatement();
                                java.sql.ResultSet rsetTable111d = stmtTable111d.executeQuery("SELECT sum(qty) FROM stock_balance_qty WHERE item_code = '"+listofAct[y]+"' AND department ilike '"+jComboBox1.getSelectedItem().toString()+"'");
                                while (rsetTable111d.next()){
                                    
                                    qtyInstock = rsetTable111d.getFloat(1);
                                }
                                java.sql.Statement stmtTable1x = connectDB.createStatement();
                                java.sql.ResultSet rsetTable1 = stmtTable1x.executeQuery("SELECT st.product_id,st.product,st.strength,st.units AS unit_pack,'"+qtyInstock+"' AS stock_balance," +
                                        "minimum_level::numeric as min_stock,reorder_level::numeric as reorder_level,maximum_level::numeric as max_stock,'"+requ+"'::numeric as min_order, " +
                                        "'"+requ+"'::numeric as qty_to_order FROM stockprices st WHERE  " +
                                        " st.department ilike '"+jComboBox1.getSelectedItem()+"' and st.reorder_level >= '"+qtyInstock+"' AND st.product_id = '"+listofAct[y]+"' ORDER BY st.product");
                                
                                // for (int i = 0; i < jTable1.getRowCount(); i++ ) {
                                while (rsetTable1.next()){
                                    jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                                    jTable1.setValueAt(rsetTable1.getObject(2), i, 1);
                                    jTable1.setValueAt(rsetTable1.getObject(3), i, 2);
                                    jTable1.setValueAt(rsetTable1.getObject(4), i, 3);
                                    jTable1.setValueAt(rsetTable1.getObject(5), i, 4);
                                    jTable1.setValueAt(rsetTable1.getObject(6), i, 5);
                                    jTable1.setValueAt(rsetTable1.getObject(7), i, 6);
                                    jTable1.setValueAt(rsetTable1.getObject(8), i, 7);
                                    jTable1.setValueAt(rsetTable1.getObject(9), i, 8);
                                    jTable1.setValueAt(rsetTable1.getObject(10), i, 9);
                                    
                                    //i++;
                                    // try{
                                    // for (int i = 0; i < jTable1.getRowCount(); i++){
                                    
                                    
                                    
                                    // jTable1.setValueAt(qtyInstock, i, 4);
                                    
                                    rlevel = Float.parseFloat(jTable1.getValueAt(i,6).toString());
                                    maxStock = Float.parseFloat(jTable1.getValueAt(i,7).toString());
                                    minStock = Float.parseFloat(jTable1.getValueAt(i,5).toString());
                                    qtyInstock = Float.parseFloat(jTable1.getValueAt(i,4).toString());
                                    
                                    
                                    
                                    if(qtyInstock > 0){
                                        jTable1.setValueAt(new java.lang.Float(rlevel-qtyInstock), i, 8);
                                        if(maxStock > 0){
                                            jTable1.setValueAt(new java.lang.Float(maxStock-qtyInstock), i, 9);
                                        }else{
                                            jTable1.setValueAt(new java.lang.Float(rlevel), i, 9);
                                        }
                                    }else{
                                        jTable1.setValueAt(new java.lang.Float(rlevel), i, 8);
                                        if(maxStock > 0){
                                            jTable1.setValueAt(new java.lang.Float(maxStock), i, 9);
                                        }else{
                                            jTable1.setValueAt(new java.lang.Float(rlevel), i, 9);
                                        }
                                    }
                                    i++;
                                }
                            }
                            
                        }
                    }else{
                        
                        //}
                        //}
                    }
                    //i++;
                    //}
                    
                    //}
                    //}
                }
            } catch(java.sql.SQLException sqlExec) {
                
                sqlExec.printStackTrace();
                
                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
                
            }
        }
    }
    
  /*  javax.swing.table.TableColumn column = null;
    for (int s = 0; s < 7; s++) {
        column = jTable1.getColumnModel().getColumn(s);
        if (s == 0) {
   
            column.setPreferredWidth(300); //sport column is bigger
            // } else {
            //     if (s == 1) {
            //         column.setPreferredWidth(100);
        } else {
            //if (i == 2) {
            column.setPreferredWidth(100);
            // }  else
            //column.setPreferredWidth(50);
   
            //  }
        }
    }
   */
    
    //        jScrollPane1.setViewportView(jTable1);
    
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JButton cancelbtn;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private javax.swing.JButton exitbtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton postbtn;
    private javax.swing.JButton resetbtn;
    // End of variables declaration//GEN-END:variables
    
}
