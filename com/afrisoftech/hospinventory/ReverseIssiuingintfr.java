/*
 * companyprflintfr.java
 *
 * Created on August 13, 2002, 11:36 AM
 */
package com.afrisoftech.hospinventory;

import java.sql.SQLException;
//

/**
 *
 * @author root
 */
public class ReverseIssiuingintfr extends javax.swing.JInternalFrame {

    private javax.swing.JComboBox cmbox = new javax.swing.JComboBox();

    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    com.afrisoftech.lib.DBObject dbObject;
    String transNo = null;

    public ReverseIssiuingintfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        dbObject = new com.afrisoftech.lib.DBObject();

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new javax.swing.JTable();
        jButton9 = new javax.swing.JButton();
        jSearchDialog1 = new javax.swing.JDialog();
        jSearchPanel1 = new javax.swing.JPanel();
        jTextField1111 = new javax.swing.JTextField();
        jSearchScrollPane1 = new javax.swing.JScrollPane();
        jSearchTable1 = new javax.swing.JTable();
        jButton91 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        transferNumberSearchDialog = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        searchTransferNumberTxt = new javax.swing.JTextField();
        transferNumberScrollPane = new javax.swing.JScrollPane();
        searchTransferTable = new com.afrisoftech.dbadmin.JTable();
        jButton10 = new javax.swing.JButton();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        resuisitionNumberSearchDialog = new javax.swing.JDialog();
        jSearchPanel111 = new javax.swing.JPanel();
        requisitionNumberSearchTxt = new javax.swing.JTextField();
        jSearchScrollPane111 = new javax.swing.JScrollPane();
        requisitionNumberSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton5111 = new javax.swing.JButton();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        recepientStoreCmbx = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        jLabel3 = new javax.swing.JLabel();
        issuingStoreCmbx = new javax.swing.JComboBox();
        newTransferChkbx = new javax.swing.JCheckBox();
        rectifyTransferChkbx = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        transferNumberTxt = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        requisitionNumberTxt = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        useCostPriceRdbtn = new javax.swing.JRadioButton();
        useSellingPriceRdbtn = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        issuingItemsTable = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class
            };
            /*   boolean[] canEdit = new boolean [] {
                false, true, priceEdit, false, false
            };
            */
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        jPanel11 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        issuingRecipientTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        personIssuingTxt = new javax.swing.JTextField();
        totalValueTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        manualS11NumberTxt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        saveTransactionBtn = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        spacerPanel = new javax.swing.JPanel();
        mainStoreCkbx = new javax.swing.JCheckBox();
        subStoreChkbx = new javax.swing.JCheckBox();

        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(jTextField111, gridBagConstraints);

        jSearchTable.setShowHorizontalLines(false);

        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton9.setText("Dispose");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        jSearchDialog1.setModal(true);
        jSearchDialog1.setUndecorated(true);
        jSearchDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel1.setLayout(new java.awt.GridBagLayout());

        jTextField1111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel1.add(jTextField1111, gridBagConstraints);

        jSearchTable1.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable1MouseClicked(evt);
            }
        });
        jSearchScrollPane1.setViewportView(jSearchTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel1.add(jSearchScrollPane1, gridBagConstraints);

        jButton91.setText("Dispose");
        jButton91.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton91ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel1.add(jButton91, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog1.getContentPane().add(jSearchPanel1, gridBagConstraints);

        transferNumberSearchDialog.setModal(true);
        transferNumberSearchDialog.setUndecorated(true);
        transferNumberSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        searchTransferNumberTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchTransferNumberTxtCaretUpdate(evt);
            }
        });
        searchTransferNumberTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTransferNumberTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel2.add(searchTransferNumberTxt, gridBagConstraints);

        searchTransferTable.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        searchTransferTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchTransferTableMouseClicked(evt);
            }
        });
        transferNumberScrollPane.setViewportView(searchTransferTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2.add(transferNumberScrollPane, gridBagConstraints);

        jButton10.setText("Dispose");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton10, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        transferNumberSearchDialog.getContentPane().add(jSearchPanel2, gridBagConstraints);

        resuisitionNumberSearchDialog.setModal(true);
        resuisitionNumberSearchDialog.setUndecorated(true);
        resuisitionNumberSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel111.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel111.setLayout(new java.awt.GridBagLayout());

        requisitionNumberSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                requisitionNumberSearchTxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel111.add(requisitionNumberSearchTxt, gridBagConstraints);

        requisitionNumberSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
        requisitionNumberSearchTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        requisitionNumberSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                requisitionNumberSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane111.setViewportView(requisitionNumberSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel111.add(jSearchScrollPane111, gridBagConstraints);

        jButton5111.setText("Close");
        jButton5111.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5111ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel111.add(jButton5111, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        resuisitionNumberSearchDialog.getContentPane().add(jSearchPanel111, gridBagConstraints);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Reverse Stock Distribution - Stockable Items");
        setToolTipText("");
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel2.setBackground(new java.awt.Color(204, 255, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        recepientStoreCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recepientStoreCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel1.add(recepientStoreCmbx, gridBagConstraints);

        jLabel13.setText("Recipient");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel1.add(jLabel13, gridBagConstraints);

        jLabel1.setText("Issiuing Store");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 50);
        jPanel1.add(datePicker1, gridBagConstraints);

        jLabel3.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        //issuingStoreCmbx.setModel( com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select distinct stores from store_allocation where user_name = current_user order by 1"));
        issuingStoreCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                issuingStoreCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(issuingStoreCmbx, gridBagConstraints);

        buttonGroup2.add(newTransferChkbx);
        newTransferChkbx.setText("Transfer from one store to another");
        newTransferChkbx.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        newTransferChkbx.setEnabled(false);
        newTransferChkbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTransferChkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel1.add(newTransferChkbx, gridBagConstraints);

        buttonGroup2.add(rectifyTransferChkbx);
        rectifyTransferChkbx.setSelected(true);
        rectifyTransferChkbx.setText("Rectify previous transfer");
        rectifyTransferChkbx.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rectifyTransferChkbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectifyTransferChkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel1.add(rectifyTransferChkbx, gridBagConstraints);

        jLabel6.setText("Transfer No/ IRQ No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel1.add(jLabel6, gridBagConstraints);

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel5.setLayout(new java.awt.GridBagLayout());

        transferNumberTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(transferNumberTxt, gridBagConstraints);

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton.setToolTipText("Search");
        searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel5.add(searchButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel5, gridBagConstraints);

        jLabel4.setText("Requisition No.");
        jLabel4.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setMinimumSize(new java.awt.Dimension(82, 37));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        requisitionNumberTxt.setEditable(false);
        requisitionNumberTxt.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(requisitionNumberTxt, gridBagConstraints);

        searchButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton1.setToolTipText("Search");
        searchButton1.setEnabled(false);
        searchButton1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton1.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton1.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jPanel6.add(searchButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jPanel6, gridBagConstraints);

        buttonGroup4.add(useCostPriceRdbtn);
        useCostPriceRdbtn.setSelected(true);
        useCostPriceRdbtn.setText("Use cost Price");
        useCostPriceRdbtn.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        useCostPriceRdbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useCostPriceRdbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel1.add(useCostPriceRdbtn, gridBagConstraints);

        buttonGroup4.add(useSellingPriceRdbtn);
        useSellingPriceRdbtn.setText("Use Selling Price");
        useSellingPriceRdbtn.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(useSellingPriceRdbtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        jPanel2.add(jPanel1, gridBagConstraints);

        issuingItemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Item Code", "Item Description", "Strength", "Units", "Issuing store Bal", "Rev. Store Bal.", "Qty Per Pack", "Qty. Issued", "Price", "Total", "Reverse?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        issuingItemsTable.setGridColor(new java.awt.Color(0, 204, 204));
        issuingItemsTable.setSelectionForeground(new java.awt.Color(255, 51, 0));
        issuingItemsTable.getTableHeader().setReorderingAllowed(false);
        javax.swing.table.TableColumn column = null;
        for (int i = 0; i < issuingItemsTable.getColumnCount(); i++) {
            column = this.issuingItemsTable.getColumnModel().getColumn(i);
            if (i == 1) {

                column.setPreferredWidth(300); //sport column is bigger
            } else {
                if(i == 0){
                    column.setPreferredWidth(100);
                }else{
                    if(i == 4 || i == 5){
                        column.setPreferredWidth(100);
                    }else{
                        //if (i == 2) {
                            column.setPreferredWidth(100);
                            // }  else
                        //column.setPreferredWidth(50);
                    }
                }
            }
        }
        issuingItemsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                issuingItemsTableMouseClicked(evt);
            }
        });
        issuingItemsTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                issuingItemsTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(issuingItemsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 4.5;
        gridBagConstraints.weighty = 30.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel2.add(jScrollPane1, gridBagConstraints);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel11.setLayout(new java.awt.GridBagLayout());

        jLabel9.setText("Issued To");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jLabel9, gridBagConstraints);

        issuingRecipientTxt.setText(com.afrisoftech.lib.UserName.getUserName(connectDB));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel11.add(issuingRecipientTxt, gridBagConstraints);

        jLabel5.setText("Reversed By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jLabel5, gridBagConstraints);

        personIssuingTxt.setEditable(false);
        personIssuingTxt.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        personIssuingTxt.setForeground(new java.awt.Color(128, 128, 128));
        personIssuingTxt.setText(com.afrisoftech.lib.UserName.getLoginName(connectDB));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel11.add(personIssuingTxt, gridBagConstraints);

        totalValueTxt.setEditable(false);
        totalValueTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel11.add(totalValueTxt, gridBagConstraints);

        jLabel2.setText("Total");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 10;
        jPanel11.add(jLabel2, gridBagConstraints);

        jLabel7.setText("Manual S11 Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        jPanel11.add(jLabel7, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel11.add(manualS11NumberTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        jPanel2.add(jPanel11, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Utopia", 3, 18)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel2.add(jLabel12, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel3.setMinimumSize(new java.awt.Dimension(25, 200));
        jPanel3.setPreferredSize(new java.awt.Dimension(50, 195));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        saveTransactionBtn.setMnemonic('s');
        saveTransactionBtn.setText("Reverse Issued items");
        saveTransactionBtn.setToolTipText("click to store data");
        saveTransactionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTransactionBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(saveTransactionBtn, gridBagConstraints);

        jButton5.setMnemonic('r');
        jButton5.setText("Remove Row");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton5, gridBagConstraints);

        jButton8.setMnemonic('r');
        jButton8.setText("Reprint");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton8, gridBagConstraints);

        jButton7.setMnemonic('p');
        jButton7.setText("Save & Print");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton7, gridBagConstraints);

        jButton3.setMnemonic('l');
        jButton3.setText("Clear");
        jButton3.setToolTipText("click to clear fields");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton3, gridBagConstraints);

        jButton4.setMnemonic('C');
        jButton4.setText("Close");
        jButton4.setToolTipText("Click to close");
        jButton4.setSelected(true);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton4, gridBagConstraints);

        jButton6.setMnemonic('h');
        jButton6.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        jPanel3.add(spacerPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 200;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 4.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel3, gridBagConstraints);

        buttonGroup1.add(mainStoreCkbx);
        mainStoreCkbx.setText("Central Store");
        mainStoreCkbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainStoreCkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(mainStoreCkbx, gridBagConstraints);

        buttonGroup1.add(subStoreChkbx);
        subStoreChkbx.setText("Sub Store");
        subStoreChkbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subStoreChkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(subStoreChkbx, gridBagConstraints);

        jTabbedPane1.addTab("Reversal for Stock Trasfer", jPanel2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        setBounds(0, 0, 1117, 459);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton5111ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5111ActionPerformed
        resuisitionNumberSearchDialog.dispose();  // Add your handling code here:
    }//GEN-LAST:event_jButton5111ActionPerformed

    private void requisitionNumberSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_requisitionNumberSearchTableMouseClicked
        requisitionNumberTxt.setText(requisitionNumberSearchTable.getValueAt(requisitionNumberSearchTable.getSelectedRow(), 0).toString());
        issuingStoreCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '" + requisitionNumberSearchTable.getValueAt(requisitionNumberSearchTable.getSelectedRow(), 2) + "'"));
        recepientStoreCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '" + requisitionNumberSearchTable.getValueAt(requisitionNumberSearchTable.getSelectedRow(), 3) + "'"));
        resuisitionNumberSearchDialog.dispose();
        for (int k = 0; k < issuingItemsTable.getRowCount(); k++) {
            for (int r = 0; r < issuingItemsTable.getColumnCount(); r++) {
                issuingItemsTable.getModel().setValueAt(null, k, r);
            }
        }
        this.populateTable22(this.requisitionNumberTxt.getText().toString());
        try {
            for (int j = 0; j < issuingItemsTable.getRowCount(); j++) {
                //    java.sql.Statement stmtTable111 = connectDB.createStatement();
                if (issuingItemsTable.getModel().getValueAt(j, 0) != null) {

                    java.sql.Statement stmtTable11 = connectDB.createStatement();
                    java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT sum(qty) FROM stock_balance_qty WHERE item_code ilike '" + issuingItemsTable.getValueAt(j, 0).toString() + "' AND department ILIKE '" + issuingStoreCmbx.getSelectedItem() + "' AND dates <= '" + datePicker1.getDate() + "'");
                    java.sql.Statement stmtTable11x = connectDB.createStatement();
                    java.sql.ResultSet rsetTable11x = stmtTable11x.executeQuery("SELECT sum(qty) FROM stock_balance_qty WHERE item_code ilike '" + issuingItemsTable.getValueAt(j, 0).toString() + "' AND department ILIKE '" + recepientStoreCmbx.getSelectedItem() + "' AND dates <= '" + datePicker1.getDate() + "'");

                    while (rsetTable11x.next()) {
                        while (rsetTable11.next()) {
                            double storeBal = 0;
                            double depBal = 0;
                            storeBal = rsetTable11.getDouble(1);
                            depBal = rsetTable11x.getDouble(1);
                            issuingItemsTable.setValueAt(storeBal, j, 4);
                            issuingItemsTable.setValueAt(depBal, j, 5);
                        }
                    }
                }
            }

            totalValueTxt.setText(String.valueOf(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(this.issuingItemsTable, 9)));
            personIssuingTxt.setText(com.afrisoftech.lib.UserName.getLoginName(connectDB));
        } catch (java.sql.SQLException sqlExec) {

            sqlExec.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
        }
        // Add your handling code here:
    }//GEN-LAST:event_requisitionNumberSearchTableMouseClicked
    private void populateTable22(java.lang.String processNumber) {

        if (this.newTransferChkbx.isSelected()) {

            //issuingItemsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT item_code,item_description, '' as strength, 1 as units, 0.00 as issuing_store_balance, 0.00 as recipient_store_balance, 1.00 as qty_per_pack, quantity::numeric(10,2), price::numeric(10,2), (quantity * price)::numeric(10,2) FROM st_receive_requisation WHERE requisition_no = '" + requisitionNumberTxt.getText() + "' and quantity - qty_issued > 0 order by item_description"));
            issuingItemsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT item_code,item_description, '' as strength, 1 as units, 0.00 as issuing_store_balance, 0.00 as recipient_store_balance, 1.00 as qty_per_pack, quantity::numeric, price::numeric, (quantity * price)::numeric FROM st_receive_requisation WHERE requisition_no = '" + requisitionNumberTxt.getText() + "' and quantity - qty_issued > 0 order by item_description"));

        } else if (this.rectifyTransferChkbx.isSelected()) {

            //issuingItemsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT item_code,item as item_description, '' as strength, 1 as units, 0.00 as issuing_store_balance, 0.00 as recipient_store_balance, 1.00 as qty_per_pack, issuing::numeric(10,2), buying_price::numeric(10,2), total::numeric(10,2), false FROM st_sub_stores WHERE transaction_no = '" + transferNumberTxt.getText() + "' and issuing > 0 order by item"));
            issuingItemsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT item_code,item as item_description, '' as strength, 1 as units, 0.00 as issuing_store_balance, 0.00 as recipient_store_balance, 1.00 as qty_per_pack, issuing::numeric, buying_price::numeric, total::numeric, false FROM st_sub_stores WHERE transaction_no = '" + transferNumberTxt.getText() + "' and issuing > 0 order by item"));

        }

    }
    private void requisitionNumberSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_requisitionNumberSearchTxtCaretUpdate
        if (this.requisitionNumberSearchTxt.getCaretPosition() < 2) {
            System.out.print("Nothing");
        } else {
            requisitionNumberSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT "
                    + "DISTINCT requisition_no as rq_number,(date) as date, store_name,cost_center FROM st_receive_requisation "
                    + "WHERE requisition_no ILIKE '" + requisitionNumberSearchTxt.getText().toString() + "%' AND "
                    //+ "cost_center ilike '" + this.jComboBox11.getSelectedItem().toString() + "%' AND "
                    //+ "store_name ilike '" + this.jComboBox2.getSelectedItem().toString() + "%'  AND "
                    + "receiving> 0 and store_name ilike '" + issuingStoreCmbx.getSelectedItem() + "' ORDER BY requisition_no"));
            requisitionNumberSearchTable.setShowHorizontalLines(false);
            jSearchScrollPane111.setViewportView(requisitionNumberSearchTable);

        }   // Add your handling code here:
    }//GEN-LAST:event_requisitionNumberSearchTxtCaretUpdate
    private void searchButton111Clicked() {

        System.out.println("Showing dialog");

        resuisitionNumberSearchDialog.dispose();
        java.awt.Point point = this.requisitionNumberTxt.getLocationOnScreen();
        resuisitionNumberSearchDialog.setSize(600, 200);
        resuisitionNumberSearchDialog.setLocation(point);
        resuisitionNumberSearchDialog.setVisible(true);

    }
    private void issuingStoreCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_issuingStoreCmbxActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_issuingStoreCmbxActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        transferNumberSearchDialog.dispose();
// TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    private void searchTransferTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchTransferTableMouseClicked
        transferNumberSearchDialog.dispose();
        boolean transferStatus = false;

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        System.out.println("Loading values Please Wait");
        transferNumberTxt.setText(searchTransferTable.getValueAt(searchTransferTable.getSelectedRow(), 0).toString());
        // issuingStoreCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '" + this.searchTransferTable.getValueAt(searchTransferTable.getSelectedRow(), 1) + "'"));
        // recepientStoreCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '" + searchTransferTable.getValueAt(searchTransferTable.getSelectedRow(), 2) + "'"));

        recepientStoreCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '" + this.searchTransferTable.getValueAt(searchTransferTable.getSelectedRow(), 1) + "'"));
        issuingStoreCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '" + searchTransferTable.getValueAt(searchTransferTable.getSelectedRow(), 2) + "'"));

        try {
            java.sql.PreparedStatement pstmtc = connectDB.prepareStatement("SELECT sum(debit-quantity_ordered) FROM st_stock_cardex WHERE transaction_no = ? AND store = ?");
            pstmtc.setObject(1, transferNumberTxt.getText());
            pstmtc.setObject(2, recepientStoreCmbx.getSelectedItem());
            java.sql.ResultSet rsetc = pstmtc.executeQuery();
            while (rsetc.next()) {
                if (rsetc.getDouble(1) > 0) {
                    transferStatus = true;
                }
            }
        } catch (SQLException ex) {
                        ex.printStackTrace();             //ex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        if (transferStatus) {
            java.text.DateFormat df = java.text.DateFormat.getDateInstance();

            java.text.SimpleDateFormat sdf = (java.text.SimpleDateFormat) df;

            sdf.applyPattern("yyyy-MM-dd");

            try {
                datePicker1.setDate(sdf.parse(searchTransferTable.getValueAt(searchTransferTable.getSelectedRow(), 3).toString()));
            } catch (java.text.ParseException pe) {
                javax.swing.JOptionPane.showMessageDialog(this, pe.getMessage());
            }
            recepientStoreCmbx.setSelectedItem(searchTransferTable.getValueAt(searchTransferTable.getSelectedRow(), 1).toString());
            issuingStoreCmbx.setSelectedItem(searchTransferTable.getValueAt(searchTransferTable.getSelectedRow(), 2).toString());
            this.populateTable22(transferNumberTxt.getText());
            try {
                for (int j = 0; j < issuingItemsTable.getRowCount(); j++) {
                    //    java.sql.Statement stmtTable111 = connectDB.createStatement();
                    if (issuingItemsTable.getModel().getValueAt(j, 0) != null) {

                        java.sql.Statement stmtTable11 = connectDB.createStatement();
                        java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT sum(qty) FROM stock_balance_qty WHERE item_code ilike '" + issuingItemsTable.getValueAt(j, 0).toString() + "' AND department ILIKE '" + issuingStoreCmbx.getSelectedItem() + "' AND dates <= '" + datePicker1.getDate() + "'");
                        java.sql.Statement stmtTable11x = connectDB.createStatement();
                        java.sql.ResultSet rsetTable11x = stmtTable11x.executeQuery("SELECT sum(qty) FROM stock_balance_qty WHERE item_code ilike '" + issuingItemsTable.getValueAt(j, 0).toString() + "' AND department ILIKE '" + recepientStoreCmbx.getSelectedItem() + "' AND dates <= '" + datePicker1.getDate() + "'");

                        while (rsetTable11x.next()) {
                            while (rsetTable11.next()) {
                                double storeBal = 0;
                                double depBal = 0;
                                storeBal = rsetTable11.getDouble(1);
                                depBal = rsetTable11x.getDouble(1);
                                issuingItemsTable.setValueAt(storeBal, j, 4);
                                issuingItemsTable.setValueAt(depBal, j, 5);
                            }
                        }
                    }
                }
                java.sql.PreparedStatement pstmts = connectDB.prepareStatement("SELECT DISTINCT issiued_to, manual_transfer_no, user_name FROM st_sub_stores WHERE transaction_no = '" + transferNumberTxt.getText() + "' and issuing > 0");
                java.sql.ResultSet rsets = pstmts.executeQuery();
                while (rsets.next()) {
                    issuingRecipientTxt.setText(rsets.getString(1));
                    manualS11NumberTxt.setText(rsets.getString(2));
                    personIssuingTxt.setText(rsets.getString(3));
                }
                totalValueTxt.setText(String.valueOf(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(this.issuingItemsTable, 9)));
                personIssuingTxt.setText(com.afrisoftech.lib.UserName.getLoginName(connectDB));
            } catch (java.sql.SQLException sqlExec) {

                sqlExec.printStackTrace();
                this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
            }
            System.out.println("Finished loading details on form");
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Please check, it appears that this transfer has been reversed");
        }

// TODO add your handling code here:
    }//GEN-LAST:event_searchTransferTableMouseClicked

    private void searchTransferNumberTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTransferNumberTxtActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_searchTransferNumberTxtActionPerformed

    private void searchTransferNumberTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchTransferNumberTxtCaretUpdate
        if (searchTransferNumberTxt.getText().length() > 5) {

            searchTransferTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT DISTINCT transaction_no,sub_store,store_name,trans_date FROM st_sub_stores "
                    + "WHERE ( transaction_no ILIKE '" + searchTransferNumberTxt.getText() + "%' or manual_transfer_no ILIKE '" + searchTransferNumberTxt.getText() + "%') "
                    + "AND receiving>0 and  (transaction_no ilike 'T%' OR transaction_no ilike 'I%') ORDER BY transaction_no"));

            searchTransferTable.setShowHorizontalLines(false);
            transferNumberScrollPane.setViewportView(searchTransferTable);
        }
// TODO add your handling code here:
    }//GEN-LAST:event_searchTransferNumberTxtCaretUpdate

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchButtonClicked();

        // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed
    private void searchButtonClicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.transferNumberTxt.getLocationOnScreen();

        transferNumberSearchDialog.setSize(600, 200);

        transferNumberSearchDialog.setLocation(point);

        transferNumberSearchDialog.setVisible(true);

    }
    private void rectifyTransferChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectifyTransferChkbxActionPerformed
        jLabel6.setEnabled(true);
        searchButton.setEnabled(true);
// TODO add your handling code here:
    }//GEN-LAST:event_rectifyTransferChkbxActionPerformed

    private void newTransferChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTransferChkbxActionPerformed
        jLabel6.setEnabled(false);
        searchButton.setEnabled(false);
// TODO add your handling code here:
    }//GEN-LAST:event_newTransferChkbxActionPerformed

    private void subStoreChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subStoreChkbxActionPerformed

        // issuingStoreCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select DISTINCT stores from store_allocation where user_name = current_user"));// and type ilike 'Issuing Stock%'"));
        issuingStoreCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select DISTINCT  store_name from st_stores ORDER BY 1"));

        issuingStoreCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //   jComboBox2ActionPerformed(evt);
            }
        });

        recepientStoreCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select DISTINCT  store_name from st_stores ORDER BY 1"));
        recepientStoreCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //   jComboBox2ActionPerformed(evt);
            }
        });

        // Add your handling code here:
    }//GEN-LAST:event_subStoreChkbxActionPerformed

    private void mainStoreCkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainStoreCkbxActionPerformed
        //this.jTextField1.setVisible(true);
        //this.jCheckBox2.setVisible(false);
        //issuingStoreCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select distinct stores from store_allocation where user_name = current_user order by 1"));
        issuingStoreCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select '-' as store_name union all select distinct initcap(store_name) from st_main_stores order by store_name"));
        issuingStoreCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //  jComboBox2ActionPerformed(evt);
            }
        });

        recepientStoreCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select distinct initcap(store_name) from st_stores ORDER BY 1"));
        recepientStoreCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //   jComboBox2ActionPerformed(evt);
            }
        });

        // Add your handling code here:
    }//GEN-LAST:event_mainStoreCkbxActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        //      String transNo = null;

        if (totalValueTxt.getText() != "0.00") {
            if (issuingStoreCmbx.getSelectedItem() != null && recepientStoreCmbx.getSelectedItem() != null) {
                try {
                    connectDB.setAutoCommit(false);

                    if (newTransferChkbx.isSelected()) {
                        java.sql.Statement ps1 = connectDB.createStatement();
                        java.sql.ResultSet rst1 = ps1.executeQuery("select 'T'||currval('transfer_seq')");

                        //   java.sql.ResultSet rst1 = ps1.executeQuery("select currval('receipt_no_seq')");
                        while (rst1.next()) {
                            transNo = rst1.getObject(1).toString();
                        }
                    } else {
                        //  transNo = jTextField10.getText();
                    }
                    TransferedItemsPdf policy = new TransferedItemsPdf();
                    policy.TransferedItemsPdf(connectDB, transNo);

                } catch (java.sql.SQLException sq) {

                    sq.printStackTrace();

                    try {
                        connectDB.rollback();
                    } catch (java.sql.SQLException sql) {
                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                    System.out.println(sq.getMessage());
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                }
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Please double check your entries. The issuing and recipient stores must be set.");
            }

        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Please double check your entries. There must be something to transfer.");
        }
        // Add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        if (totalValueTxt.getText() != "0.00") {
            if (issuingStoreCmbx.getSelectedItem() != null && recepientStoreCmbx.getSelectedItem() != null) {

                java.util.Calendar calendar = java.util.Calendar.getInstance();

                long dateNow = calendar.getTimeInMillis();

                java.sql.Date datenowSql = new java.sql.Date(dateNow);
                String Stock = null;
                String actCode = null;
                //      String transNo = null;
                String userName = null;
                String glCode = null;
                String glType = null;
                try {
                    saveTransactionBtnActionPerformed(evt);
                    connectDB.setAutoCommit(false);

                    connectDB.commit();
                    connectDB.setAutoCommit(true);
                    System.out.println("Transfer Number [" + transNo + "]");
                    javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                    ReversedTransferedItemsPdf policy = new ReversedTransferedItemsPdf();
                    policy.ReversedTransferedItemsPdf(connectDB, transNo);

                    this.saveTransactionBtn.setEnabled(false);
                    for (int k = 0; k < issuingItemsTable.getRowCount(); k++) {
                        for (int r = 0; r < issuingItemsTable.getColumnCount(); r++) {
                            issuingItemsTable.getModel().setValueAt(null, k, r);
                        }
                    }

                    issuingRecipientTxt.setText("");
                    //            jComboBox11.setSelectedItem(null);
                    // javax.swing.JOptionPane.showMessageDialog(this, "Enter quantity issued","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                } catch (java.sql.SQLException sq) {
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

                    try {
                        connectDB.rollback();
                    } catch (java.sql.SQLException sql) {
                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                    // jLabel12.setForeground(java.awt.Color.red);
                    // jLabel12.setText("Sorry. Another  Code already exists");
                }
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Please double check your entries. The issuing and recipient stores must be set.");
            }

        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Please double check your entries. There must be something to transfer.");
        }
        // Add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jTextField1111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1111CaretUpdate
    }//GEN-LAST:event_jTextField1111CaretUpdate

    private void jSearchTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable1MouseClicked
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable1MouseClicked
    private void cmbox11MouseClicked() {
    }
    private void jButton91ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton91ActionPerformed
        jSearchDialog1.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton91ActionPerformed

    private void issuingItemsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_issuingItemsTableMouseClicked
        if (issuingItemsTable.getSelectedColumn() == 0) {

            this.cmbox1MouseClicked();
        }        // Add your handling code here:
    }//GEN-LAST:event_issuingItemsTableMouseClicked
    private void cmbox1MouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane1.getLocationOnScreen();
        jSearchDialog.setSize(600, 200);
        jSearchDialog.setLocation(point);
        jSearchDialog.setVisible(true);
    }
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        jSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        issuingItemsTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0), issuingItemsTable.getSelectedRow(), 0);
        issuingItemsTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1), issuingItemsTable.getSelectedRow(), 1);
        issuingItemsTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 2), issuingItemsTable.getSelectedRow(), 2);
        issuingItemsTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 3), issuingItemsTable.getSelectedRow(), 3);
        issuingItemsTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 4), issuingItemsTable.getSelectedRow(), 6);
        issuingItemsTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 5), issuingItemsTable.getSelectedRow(), 8);

        jSearchDialog.dispose();
        int i = issuingItemsTable.getSelectedRow();
        if (this.mainStoreCkbx.isSelected()) {
            try {
                java.sql.Statement pstmt1 = connectDB.createStatement();
                java.sql.ResultSet rs1 = pstmt1.executeQuery("select sum(qty),1 from stock_balance_qty where item_code = '" + issuingItemsTable.getValueAt(issuingItemsTable.getSelectedRow(), 0) + "' and department ilike '" + issuingStoreCmbx.getSelectedItem().toString() + "%' AND dates <= '" + datePicker1.getDate() + "'");
                java.sql.Statement pst = connectDB.createStatement();
                while (rs1.next()) {

                    issuingItemsTable.setValueAt(rs1.getObject(1), i, 4);
                    // jTable1.setValueAt(rs1.getObject(2),i,1);
                }
            } catch (java.sql.SQLException sqlex) {
                System.out.println(sqlex.getMessage());
            }
        } else {
            try {
                java.sql.Statement pstmt1 = connectDB.createStatement();
                java.sql.ResultSet rs1 = pstmt1.executeQuery("select sum(qty),1 from stock_balance_qty where item_code = '" + issuingItemsTable.getValueAt(issuingItemsTable.getSelectedRow(), 0) + "' and department ilike '" + issuingStoreCmbx.getSelectedItem().toString() + "%' AND dates <= '" + datePicker1.getDate() + "'");
                java.sql.Statement pst = connectDB.createStatement();
                while (rs1.next()) {
                    issuingItemsTable.setValueAt(rs1.getObject(1), i, 4);
                    //jTable1.setValueAt(rs1.getObject(2),i,1);
                }
            } catch (java.sql.SQLException sqlex) {
                System.out.println(sqlex.getMessage());
            }
        }

        try {
            java.sql.Statement pstmt12 = connectDB.createStatement();
            java.sql.ResultSet rs12 = pstmt12.executeQuery("select sum(qty),1 from stock_balance_qty where item_code = '" + issuingItemsTable.getValueAt(issuingItemsTable.getSelectedRow(), 0) + "' and department ilike '" + recepientStoreCmbx.getSelectedItem().toString() + "%' AND dates <= '" + datePicker1.getDate() + "'");

            while (rs12.next()) {
                issuingItemsTable.setValueAt(rs12.getObject(1), i, 5);

            }

        } catch (java.sql.SQLException sqlex) {
            sqlex.printStackTrace();
            System.out.println(sqlex.getMessage());
        }

        if (issuingItemsTable.getValueAt(i, 4) == null) {

            issuingItemsTable.setValueAt(0.00, i, 4);

        }

        if (issuingItemsTable.getValueAt(i, 5) == null) {

            issuingItemsTable.setValueAt(0.00, i, 5);

        }

        // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked

    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate
        if (jTextField111.getCaretPosition() > 4) {
//        } 
//        else {
            if (mainStoreCkbx.isSelected()) {
                jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select DISTINCT item_code,description,strength,units,packaging, round(buying_price * 1.33), buying_price FROM stockitem WHERE (description ILIKE '%" + jTextField111.getText() + "%' OR item_code ILIKE '" + jTextField111.getText() + "%') AND department ILIKE '%" + issuingStoreCmbx.getSelectedItem() + "%' order by description"));

                jSearchTable.setShowHorizontalLines(false);
                jSearchScrollPane.setViewportView(jSearchTable);
            } else {
                if (useCostPriceRdbtn.isSelected()) {
                    jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select DISTINCT product_id,product,strength,units,(1.00)::numeric(10,2) AS packing,transfer_price::numeric(10,2) FROM stockprices WHERE (product ILIKE '%" + jTextField111.getText() + "%'  OR product_id ILIKE '" + jTextField111.getText() + "%') AND department ILIKE '%" + issuingStoreCmbx.getSelectedItem() + "%' ORDER BY product"));

                    jSearchTable.setShowHorizontalLines(false);
                    jSearchScrollPane.setViewportView(jSearchTable);
                } else {
                    jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select DISTINCT product_id,product,strength,units,(1.00)::numeric(10,2) AS packing,selling_price::numeric(10,2) FROM stockprices WHERE (product ILIKE '%" + jTextField111.getText() + "%' OR product_id ILIKE '" + jTextField111.getText() + "%') AND department ILIKE '%" + issuingStoreCmbx.getSelectedItem() + "%' ORDER BY product"));

                    jSearchTable.setShowHorizontalLines(false);
                    jSearchScrollPane.setViewportView(jSearchTable);
                }
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_jTextField111CaretUpdate
    public void tableModelTableChangedx() {
        System.out.println("Calculating totals for table 11 and 2.");
        //        double resFloat = 0.00;
        double resFloat = 0.00;
        double Gross = Double.parseDouble(this.totalValueTxt.getText());
        for (int i = 0; i < issuingItemsTable.getRowCount(); i++) {

            if (issuingItemsTable.getValueAt(i, 7) != null) {

                if (issuingItemsTable.getSelectedColumn() == 7) {

                    resFloat = resFloat + Double.parseDouble(issuingItemsTable.getModel().getValueAt(i, 9).toString());
                    totalValueTxt.setText(java.lang.String.valueOf(resFloat));
                } else {

                    resFloat = resFloat + Double.parseDouble(issuingItemsTable.getModel().getValueAt(i, 9).toString());
                    totalValueTxt.setText(java.lang.String.valueOf(resFloat));

                }
            }

        }
    }

    public void tableModelTableChangedx(javax.swing.event.TableModelEvent evt) {
        double Gross = Double.parseDouble(this.totalValueTxt.getText());
        //        double resFloat = 0.00;
        double resFloat = 0.00;

        for (int i = 0; i < issuingItemsTable.getRowCount(); i++) {

            if (issuingItemsTable.getValueAt(i, 7) != null) {

                if (issuingItemsTable.getSelectedColumn() == 7) {

                    resFloat = resFloat + Double.parseDouble(issuingItemsTable.getModel().getValueAt(i, 9).toString());

                    totalValueTxt.setText(java.lang.String.valueOf(resFloat));

                } else {
                    resFloat = resFloat + Double.parseDouble(issuingItemsTable.getModel().getValueAt(i, 9).toString());

                    totalValueTxt.setText(java.lang.String.valueOf(resFloat));

                }
            }
        }

        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }
    private void issuingItemsTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_issuingItemsTableKeyReleased
        boolean neg = false;
        try {

            java.sql.Statement pstmt1 = connectDB.createStatement();
            java.sql.ResultSet rs1 = pstmt1.executeQuery("select neg_allow from st_stock_control"); //from orders where supplier ='"+jTable1.getValueAt(i,4).toString()+"'");

            while (rs1.next()) {

                neg = rs1.getBoolean(1);
            }

        } catch (java.sql.SQLException sq) {
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sq.getMessage());

        }

        if (issuingItemsTable.getModel().getValueAt(issuingItemsTable.getSelectedRow(), 7) != null) {
            float bal = java.lang.Float.parseFloat(issuingItemsTable.getValueAt(issuingItemsTable.getSelectedRow(), 4).toString());
            float floatCol2 = java.lang.Float.parseFloat(issuingItemsTable.getValueAt(issuingItemsTable.getSelectedRow(), 7).toString());

            float floatCol3 = java.lang.Float.parseFloat(issuingItemsTable.getValueAt(issuingItemsTable.getSelectedRow(), 8).toString());
//            float pack = java.lang.Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString());

            //   float resVal = floatCol2 * floatCol3*pack;
            if (neg == false && bal >= floatCol2) {
                float resVal = floatCol2 * floatCol3;

                java.lang.Float resFloat = new java.lang.Float(resVal);

                if (issuingItemsTable.getSelectedColumn() == issuingItemsTable.getSelectedColumn()) {

                    issuingItemsTable.setValueAt(resFloat, issuingItemsTable.getSelectedRow(), 9);

                    double Total = java.lang.Double.parseDouble(totalValueTxt.getText().toString());
                    double tableSum = java.lang.Double.parseDouble(resFloat.toString());
                    double totalSum = Total + tableSum;
                    totalValueTxt.setText("" + totalSum + "");

                }

            } else {
                if (neg == false && bal < floatCol2) {
                    javax.swing.JOptionPane.showMessageDialog(this, "You are not allowed to dispense more than the available stock", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    issuingItemsTable.setValueAt(0, issuingItemsTable.getSelectedRow(), 7);
                    issuingItemsTable.setValueAt(0, issuingItemsTable.getSelectedRow(), 8);

                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(issuingItemsTable, 7);
                    totalValueTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));

                }
            }
            if (neg == true) {
                float resVal = floatCol2 * floatCol3;

                java.lang.Float resFloat = new java.lang.Float(resVal);

                if (issuingItemsTable.getSelectedColumn() == issuingItemsTable.getSelectedColumn()) {

                    issuingItemsTable.setValueAt(resFloat, issuingItemsTable.getSelectedRow(), 9);

                    double Total = java.lang.Double.parseDouble(totalValueTxt.getText().toString());
                    double tableSum = java.lang.Double.parseDouble(resFloat.toString());
                    double totalSum = Total + tableSum;
                    totalValueTxt.setText("" + totalSum + "");

                }
            }
        }
        this.tableModelTableChangedx();
        // Add your handling code here:
    }//GEN-LAST:event_issuingItemsTableKeyReleased
    private void populateTable1(java.lang.String patient_no) {
        int i = 0;
        try {

            //   for (int i = 0; i < jTable1.getRowCount(); i++ ) {
            //       if (jTable1.getModel().getValueAt(i,0) != null){
            java.sql.Statement stmtTable = connectDB.createStatement();

            java.sql.ResultSet rsetTable = stmtTable.executeQuery("SELECT product,balance,requisition,units FROM st_stock_prices WHERE requisition >0 AND department = '" + recepientStoreCmbx.getSelectedItem().toString() + "'");
            //  java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT sum(receiving-issuing) FROM st_sub_stores WHERE store_name = '"+jTextField1.getText().equalsIgnoreCase(jTextField1.getText())+"' and item = '"+jTable1.getValueAt(k,0).toString()+"'");

            while (rsetTable.next()) {

                issuingItemsTable.setValueAt(rsetTable.getObject(1), i, 0);
                issuingItemsTable.setValueAt(rsetTable.getObject(2), i, 4);
                issuingItemsTable.setValueAt(rsetTable.getObject(3), i, 2);
                issuingItemsTable.setValueAt(rsetTable.getObject(4), i, 1);
                //  jTable1.setValueAt(rsetTable1.getObject(5), i, 5);
                //   jTable1.setValueAt(rsetTable1.getObject(6), i, 6);

                i++;

            }
            //   }
            // }
        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

    }

    private void recepientStoreCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recepientStoreCmbxActionPerformed
        for (int k = 0; k < issuingItemsTable.getRowCount(); k++) {
            for (int r = 0; r < issuingItemsTable.getColumnCount(); r++) {
                issuingItemsTable.getModel().setValueAt(null, k, r);
            }
        }

        int k = 0;

        saveTransactionBtn.setEnabled(true);

        // this.populateTable1(this.jComboBox11.getSelectedItem().toString());
        for (int j = 0; j < issuingItemsTable.getRowCount(); j++) {
            if (issuingItemsTable.getModel().getValueAt(j, 0) != null) {

                try {
                    java.sql.Statement stmtTable111 = connectDB.createStatement();

                    // java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT sum(receiving-issuing) FROM st_sub_stores WHERE item = '"+jTable1.getValueAt(j,0).toString()+"' GROUP BY item");
                    //  java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT sum(receiving-issuing) FROM st_sub_stores WHERE store_name = '"+jTextField1.getText()+"' and item = '"+jTable1.getValueAt(j,0).toString()+"' GROUP BY item");
                    java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT sum(quantity_instock) FROM st_stock_item WHERE department = '" + issuingStoreCmbx.getSelectedItem().toString() + "' and item_code = '" + issuingItemsTable.getValueAt(j, 0).toString() + "'");

                    while (rsetTable111.next()) {

                        issuingItemsTable.setValueAt(rsetTable111.getObject(1), j, 3);
                        //  jTable1.setValueAt(rsetTable1.getObject(3), i, 1);
                        //  jTable1.setValueAt(rsetTable1.getObject(2), i, 2);
                        //  jTable1.setValueAt(rsetTable1.getObject(4), i, 4);
                        //  jTable1.setValueAt(rsetTable1.getObject(5), i, 5);
                        //   jTable1.setValueAt(rsetTable1.getObject(6), i, 6);

                        // i++;
                    }

                    /*
                     * java.sql.Statement stmtTable1111 =
                     * connectDB.createStatement();
                     *
                     * java.sql.ResultSet rsetTable1111 =
                     * stmtTable1111.executeQuery("SELECT
                     * balance,requisation,units FROM st_stock_prices WHERE
                     * product = '"+jTable1.getValueAt(j,0).toString()+"' AND
                     * department =
                     * '"+jComboBox11.getSelectedItem().toString()+"'"); //
                     * java.sql.ResultSet rsetTable111 =
                     * stmtTable111.executeQuery("SELECT sum(receiving-issuing)
                     * FROM st_sub_stores WHERE store_name =
                     * '"+jTextField1.getText().equalsIgnoreCase(jTextField1.getText())+"'
                     * and item = '"+jTable1.getValueAt(k,0).toString()+"'");
                     *
                     * while (rsetTable1111.next()) {
                     *
                     * jTable1.setValueAt(rsetTable1111.getObject(1), j, 4);
                     * jTable1.setValueAt(rsetTable1.getObject(3), i, 1);
                     * jTable1.setValueAt(rsetTable1.getObject(2), i, 2); //
                     * jTable1.setValueAt(rsetTable1.getObject(4), i, 4); //
                     * jTable1.setValueAt(rsetTable1.getObject(5), i, 5); //
                     * jTable1.setValueAt(rsetTable1.getObject(6), i, 6);
                     *
                     * //i++;
                     *
                     * }
                     */
                } catch (java.sql.SQLException sqlExec) {

                    javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

                }
            }
        }
        /*
         * crset21.setCommand("select distinct product FROM st_stock_prices
         * WHERE department = '"+jComboBox11.getSelectedItem()+"'");
         * crset21.setConnectionSource(pConnDB);
         *
         * cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset21,
         * "product", null, null, null)); javax.swing.table.TableColumn s =
         * this.jTable1.getColumn("Item description"); s.setCellEditor(new
         * javax.swing.DefaultCellEditor(cmbox)); cmbox.addActionListener(new
         * java.awt.event.ActionListener() { public void
         * actionPerformed(java.awt.event.ActionEvent evt) {
         * cmboxActionPerformed(evt); } }); try { searchRowSet.execute("select
         * product,units FROM st_stock_prices WHERE department =
         * '"+jComboBox11.getSelectedItem().toString()+"' ORDER BY product");
         * searchRowSet.setConnectionSource(pConnDB);
         *
         * searchRowSet.execute();
         *
         * jSearchTable.setModel(new
         * org.netbeans.lib.sql.models.TableModel(searchRowSet, new
         * org.netbeans.lib.sql.models.TableModel.Column[] { new
         * org.netbeans.lib.sql.models.TableModel.Column("product", "Desc.",
         * false), new org.netbeans.lib.sql.models.TableModel.Column("units",
         * "Units", false) // new
         * org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl code",
         * false) })); jSearchScrollPane.setViewportView(jSearchTable);
         * System.out.println("Cannot sort out"); } catch(java.sql.SQLException
         * sqlExec) {
         *
         * javax.swing.JOptionPane.showMessageDialog(this,
         * sqlExec.getMessage());
         *
         * }
         * jScrollPane1.setViewportView(jTable1);
         *
         */
        // Add your handling code here:
    }//GEN-LAST:event_recepientStoreCmbxActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        int rows2Delete = issuingItemsTable.getSelectedRowCount();

        int[] selectedRows = issuingItemsTable.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) issuingItemsTable.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) issuingItemsTable.getModel();

                defTableModel.removeRow(issuingItemsTable.getSelectedRow());

            }
        }
        this.tableModelTableChangedx();
        // Add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        for (int k = 0; k < issuingItemsTable.getRowCount(); k++) {
            for (int r = 0; r < issuingItemsTable.getColumnCount(); r++) {
                issuingItemsTable.getModel().setValueAt(null, k, r);
            }
        }
        issuingStoreCmbx.setSelectedItem(null);
        recepientStoreCmbx.setSelectedItem(null); // Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void saveTransactionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTransactionBtnActionPerformed
        if (issuingRecipientTxt.getText().length() > 1 && Double.parseDouble(totalValueTxt.getText()) > 0.00) {
            IssuingThread issuingThread = new IssuingThread();

            issuingThread.start();

            saveTransactionBtn.setEnabled(false);
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Please ensure that the total value of items to be transferred has been computed and \n"
                    + "the name of the recipient has been set accordingly.");
        }

        // Add your handling code here:
    }//GEN-LAST:event_saveTransactionBtnActionPerformed

    private void useCostPriceRdbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useCostPriceRdbtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_useCostPriceRdbtnActionPerformed

    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        searchButton111Clicked();
        //this.jButton1.setEnabled(true);

        // this.jButton7.setEnabled(true);// Add your handling code here:
    }//GEN-LAST:event_searchButton1ActionPerformed

    private void cmboxActionPerformed(java.awt.event.ActionEvent evt) {

        // Add your handling code here:
    }

    class IssuingThread extends java.lang.Thread {

        public void run() {
            java.util.Date dateToday = new java.util.Date();
            java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

            if (totalValueTxt.getText() != "0.00") {
                if (issuingStoreCmbx.getSelectedItem() != null && recepientStoreCmbx.getSelectedItem() != null) {
                    java.util.Date periodFrom = null;
                    java.util.Date periodTo = null;

                    try {

                        java.sql.Statement stmtf = connectDB.createStatement();
                        java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + datePicker1.getDate() + "' BETWEEN period_from AND period_to");
                        while (rsetf.next()) {
                            periodFrom = rsetf.getDate(1);
                            periodTo = rsetf.getDate(2);
                        }

                    } catch (java.sql.SQLException sq) {
                        javax.swing.JOptionPane.showMessageDialog(null, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        System.out.println(sq.getMessage());

                    }

                    if (datePicker1.getDate().before(periodFrom) || datePicker1.getDate().after(periodTo)) {
                        javax.swing.JOptionPane.showMessageDialog(null, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    } else {
                        if (issuingItemsTable.isEditing()) {
                            issuingItemsTable.getCellEditor().stopCellEditing();
                        }
                        java.util.Calendar calendar = java.util.Calendar.getInstance();

                        long dateNow = calendar.getTimeInMillis();

                        java.sql.Date datenowSql = new java.sql.Date(dateNow);
                        try {
                            String Stock = null;
                            String actCode = null;
                            String Stock1 = null;
                            String actCode1 = null;
//                String transNo = null;
                            String userName = null;
                            String glCode = null;
                            String glType = null;
                            boolean consumable = false;
                            int itemInt = 0;
                            double sPrice = 0.00;
                            double bPrice = 0.00;
                            String code = null;
                            String category = null;
                            String productId = null;
                            java.sql.Savepoint registerSavePoint = null;
                            try {
                                connectDB.setAutoCommit(false);
                                registerSavePoint = connectDB.setSavepoint("registration");
                            } catch (java.sql.SQLException ex) {
                                ex.printStackTrace();
                            }

                            try {

                                if (rectifyTransferChkbx.isSelected()) {
                                    // java.sql.Statement pst21 = connectDB.createStatement();
                                    // java.sql.ResultSet rs1 = pst21.executeQuery("select 'T'||nextval('transfer_seq')");
                                    // while (rs1.next()) {
                                    //     transNo = rs1.getObject(1).toString();
                                    // }
                                    transNo = transferNumberTxt.getText();

                                    java.sql.Statement pst2 = connectDB.createStatement();
                                    java.sql.ResultSet rs = pst2.executeQuery("SELECT glstock_code,store_name FROM st_stores WHERE store_name ILIKE '" + issuingStoreCmbx.getSelectedItem() + "%'");
                                    while (rs.next()) {
                                        actCode = rs.getObject(1).toString();
                                        Stock = rs.getObject(2).toString();
                                    }

                                    java.sql.Statement pst22 = connectDB.createStatement();
                                    java.sql.ResultSet rs2 = pst22.executeQuery("SELECT glstock_code,store_name FROM st_stores WHERE store_name ILIKE '" + recepientStoreCmbx.getSelectedItem() + "%'");
                                    while (rs2.next()) {
                                        actCode1 = rs2.getObject(1).toString();
                                        Stock1 = rs2.getObject(2).toString();
                                    }
                                    java.sql.Statement pst22q = connectDB.createStatement();
                                    java.sql.ResultSet rs2q = pst22q.executeQuery("SELECT cs_code,store_name FROM st_stores WHERE store_name ILIKE '" + recepientStoreCmbx.getSelectedItem() + "%'");
                                    while (rs2q.next()) {
                                        glCode = rs2q.getObject(1).toString();
                                        glType = rs2q.getObject(2).toString();
                                    }

                                    java.sql.Statement pst2q = connectDB.createStatement();
                                    java.sql.ResultSet rsq = pst2q.executeQuery("select current_user");
                                    while (rsq.next()) {
                                        userName = rsq.getObject(1).toString();
                                    }

                                    for (int i = 0; i < issuingItemsTable.getRowCount(); i++) {
                                        if (issuingItemsTable.getModel().getValueAt(i, 7) != null && Boolean.parseBoolean(issuingItemsTable.getValueAt(i, 10).toString()) == Boolean.TRUE) {
                                            double price = 0;
                                            double pack = 0;
                                            double quantity = Double.parseDouble(issuingItemsTable.getModel().getValueAt(i, 7).toString());

                                            java.sql.Statement pst21r = connectDB.createStatement();
                                            //         java.sql.ResultSet rstr = ps11r.executeQuery("SELECT mark_up FROM st_stores WHERE store_name ILIKE '"+jComboBox2.getSelectedItem().toString()+"'");
                                            java.sql.ResultSet rstrs = pst21r.executeQuery("SELECT packaging FROM stockitem st WHERE st.item_code = '" + issuingItemsTable.getValueAt(i, 0).toString() + "'");
                                            while (rstrs.next()) {
                                                pack = rstrs.getDouble(1);
                                            }

                                            pack = Double.parseDouble(issuingItemsTable.getValueAt(i, 6).toString());
                                            double uprice = Double.parseDouble(issuingItemsTable.getModel().getValueAt(i, 8).toString());
                                            if (subStoreChkbx.isSelected()) {

                                                price = Double.parseDouble(issuingItemsTable.getModel().getValueAt(i, 8).toString());
                                                quantity = quantity;
                                            } else {
                                                price = uprice / pack;
                                                quantity = quantity * pack;
                                            }

                                            java.sql.Statement pst221 = connectDB.createStatement();
                                            java.sql.ResultSet rs21 = pst221.executeQuery("SELECT consumable FROM st_stock_item WHERE item_code ilike '" + issuingItemsTable.getModel().getValueAt(i, 0).toString() + "'");
                                            while (rs21.next()) {
                                                consumable = rs21.getBoolean(1);
                                            }

                                            java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("INSERT INTO st_sub_stores VALUES(? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                                            pstmt1.setString(1, issuingStoreCmbx.getSelectedItem().toString());
                                            pstmt1.setObject(2, issuingItemsTable.getValueAt(i, 1));
                                            pstmt1.setDouble(4, quantity);
                                            pstmt1.setDouble(3, 0.00);
                                            pstmt1.setDouble(5, 0.00);
                                            pstmt1.setDouble(6, java.lang.Double.valueOf(issuingItemsTable.getValueAt(i, 9).toString()));
                                            pstmt1.setDouble(7, 0.00);
                                            pstmt1.setString(8, transNo);
                                            pstmt1.setString(9, "");
                                            pstmt1.setObject(10, java.sql.Timestamp.valueOf(sdf.format(dateToday)));
                                            pstmt1.setString(11, userName);
                                            pstmt1.setObject(12, issuingItemsTable.getValueAt(i, 3));
                                            pstmt1.setString(13, recepientStoreCmbx.getSelectedItem().toString());
                                            pstmt1.setString(14, issuingRecipientTxt.getText());
                                            pstmt1.setDouble(15, price);
                                            pstmt1.setObject(16, issuingItemsTable.getValueAt(i, 0));
                                            pstmt1.setObject(17, issuingItemsTable.getValueAt(i, 2));
                                            pstmt1.setString(18, manualS11NumberTxt.getText());
                                            pstmt1.executeUpdate();

                                            // Issuing items back to original store
                                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO st_stock_cardex VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, upper(?), ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                            pstmt.setString(1, null);
                                            pstmt.setObject(3, issuingItemsTable.getValueAt(i, 1) + " " + issuingItemsTable.getValueAt(i, 2));
                                            pstmt.setString(2, issuingStoreCmbx.getSelectedItem().toString());
                                            pstmt.setDate(4, null);
                                            pstmt.setDouble(5, java.lang.Double.valueOf(issuingItemsTable.getValueAt(i, 9).toString()));
                                            pstmt.setDouble(6, price);
                                            pstmt.setObject(7, issuingItemsTable.getValueAt(i, 3));
                                            pstmt.setObject(8, "");
                                            pstmt.setObject(9, null);
                                            pstmt.setString(10, null);
                                            pstmt.setDouble(11, 0.00);
                                            pstmt.setDouble(12, quantity);
                                            pstmt.setDouble(13, 0.00);
                                            if (issuingRecipientTxt.getText().equals("")) {
                                                javax.swing.JOptionPane.showMessageDialog(null, "Enter Issued to", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                            } else {
                                                pstmt.setString(14, issuingRecipientTxt.getText());
                                            }
                                            pstmt.setString(15, userName);
                                            pstmt.setString(16, "");
                                            pstmt.setString(17, null);
                                            pstmt.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                            pstmt.setString(19, recepientStoreCmbx.getSelectedItem().toString());
                                            pstmt.setString(20, "Issuing");
                                            pstmt.setDouble(21, 0.00);
                                            pstmt.setString(23, actCode);
                                            //      pstmt.setDouble(22, 0.00); commented and changed 25/08/13 and replaced below -- line following
                                            pstmt.setDouble(22, java.lang.Double.valueOf(issuingItemsTable.getValueAt(i, 9).toString()));
                                            pstmt.setString(24, "");
                                            pstmt.setString(25, Stock);
                                            pstmt.setString(26, transNo);
                                            pstmt.setDouble(27, quantity);
                                            pstmt.setString(28, userName);
                                            pstmt.setBoolean(29, false);
                                            pstmt.setDouble(30, 0.00);
                                            pstmt.setDate(31, null);
                                            pstmt.setObject(32, issuingItemsTable.getValueAt(i, 0));
                                            pstmt.setObject(33, issuingItemsTable.getValueAt(i, 2));
                                            pstmt.executeUpdate();

                                            //Store receiving back items
                                            java.sql.PreparedStatement pstmty = connectDB.prepareStatement("INSERT INTO st_stock_cardex values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, upper(?), ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                            pstmty.setString(1, null);
                                            pstmty.setObject(3, issuingItemsTable.getValueAt(i, 1) + " " + issuingItemsTable.getValueAt(i, 2));
                                            pstmty.setString(2, recepientStoreCmbx.getSelectedItem().toString());
                                            pstmty.setDate(4, null);
                                            pstmty.setDouble(5, 0.00);
                                            pstmty.setDouble(6, price);
                                            pstmty.setObject(7, issuingItemsTable.getValueAt(i, 3));
                                            pstmty.setObject(8, "");
                                            pstmty.setObject(9, null);
                                            pstmty.setString(10, null);
                                            pstmty.setDouble(12, 0.00);
                                            pstmty.setDouble(11, quantity);
                                            pstmty.setDouble(13, 0.00);
                                            if (issuingRecipientTxt.getText().equals("")) {
                                                javax.swing.JOptionPane.showMessageDialog(null, "Enter Issued to", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                            } else {
                                                pstmty.setString(14, issuingRecipientTxt.getText());
                                            }
                                            pstmty.setString(15, userName);
                                            pstmty.setString(16, "");
                                            pstmty.setString(17, null);
                                            pstmty.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                            pstmty.setString(19, issuingStoreCmbx.getSelectedItem().toString());
                                            pstmty.setString(20, "Receiving");
                                            pstmty.setDouble(21, java.lang.Double.valueOf(issuingItemsTable.getValueAt(i, 9).toString()));
                                            pstmty.setDouble(22, 0.00);
                                            pstmty.setString(23, actCode1);
                                            pstmty.setString(24, "");
                                            pstmty.setString(25, Stock);
                                            pstmty.setString(26, transNo);
                                            pstmty.setDouble(27, 0.00);
                                            pstmty.setString(28, userName);
                                            pstmty.setBoolean(29, false);
                                            pstmty.setDouble(30, 0.00);
                                            pstmty.setDate(31, null);
                                            pstmty.setObject(32, issuingItemsTable.getValueAt(i, 0));
                                            pstmty.setObject(33, issuingItemsTable.getValueAt(i, 2));
                                            pstmty.executeUpdate();

                                            java.sql.PreparedStatement pstmt11 = connectDB.prepareStatement("INSERT INTO st_sub_stores VALUES(? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                                            pstmt11.setString(1, recepientStoreCmbx.getSelectedItem().toString());
                                            pstmt11.setObject(2, issuingItemsTable.getValueAt(i, 1));
                                            pstmt11.setDouble(3, quantity);
                                            pstmt11.setDouble(4, 0.00);
                                            pstmt11.setDouble(5, 0.00);
                                            pstmt11.setDouble(6, java.lang.Double.valueOf(issuingItemsTable.getValueAt(i, 9).toString()));
                                            pstmt11.setDouble(7, 0.00);
                                            pstmt11.setString(8, transNo);
                                            pstmt11.setString(9, "");
                                            pstmt11.setObject(10, java.sql.Timestamp.valueOf(sdf.format(dateToday)));
                                            pstmt11.setString(11, userName);
                                            pstmt11.setObject(12, issuingItemsTable.getValueAt(i, 3));
                                            pstmt11.setString(13, issuingStoreCmbx.getSelectedItem().toString());
                                            pstmt11.setString(14, issuingRecipientTxt.getText());
                                            pstmt11.setDouble(15, price);
                                            pstmt11.setObject(16, issuingItemsTable.getValueAt(i, 0));
                                            pstmt11.setObject(17, issuingItemsTable.getValueAt(i, 2));
                                            pstmt11.setString(18, manualS11NumberTxt.getText());

                                            pstmt11.executeUpdate();

                                            //}
                                            java.sql.Statement pstBx = connectDB.createStatement();
                                            java.sql.ResultSet rsBx = pstBx.executeQuery("select count(product_id) from st_stock_prices where product_id ILIKE '" + issuingItemsTable.getValueAt(i, 0) + "' and department ILIKE '" + recepientStoreCmbx.getSelectedItem() + "%'");

                                            while (rsBx.next()) {
                                                itemInt = rsBx.getInt(1);
                                            }
                                            System.out.println(itemInt);

                                            java.sql.PreparedStatement pstmt321 = connectDB.prepareStatement("UPDATE st_receive_requisation SET qty_issued = qty_issued + " + new java.lang.Double(quantity) + " WHERE requisition_no = '" + requisitionNumberTxt.getText() + "' and item_code = '" + issuingItemsTable.getValueAt(i, 0).toString() + "'");
                                            pstmt321.executeUpdate();
                                        }
                                    }

                                }
                                connectDB.commit();
                                connectDB.setAutoCommit(true);

                                javax.swing.JOptionPane.showMessageDialog(null, "Data Inserted Successfully", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                                //   TransferedItemsPdf policy = new TransferedItemsPdf();
                                //   policy.TransferedItemsPdf(connectDB,transNo);

                                saveTransactionBtn.setEnabled(false);
                                for (int k = 0; k < issuingItemsTable.getRowCount(); k++) {
                                    for (int r = 0; r < issuingItemsTable.getColumnCount(); r++) {
                                        issuingItemsTable.getModel().setValueAt(null, k, r);
                                    }
                                }

                                issuingRecipientTxt.setText("");
                                manualS11NumberTxt.setText("");

                                //            jComboBox11.setSelectedItem(null);
                                // javax.swing.JOptionPane.showMessageDialog(this, "Enter quantity issued","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                            } catch (java.sql.SQLException sq) {
                                sq.printStackTrace();
                                javax.swing.JOptionPane.showMessageDialog(null, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

                                try {
                                    connectDB.rollback(registerSavePoint);
                                } catch (java.sql.SQLException sql) {
                                    javax.swing.JOptionPane.showMessageDialog(null, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                }
                                // jLabel12.setForeground(java.awt.Color.red);
                                // jLabel12.setText("Sorry. Another  Code already exists");
                            }

                        } catch (java.lang.Exception ex) {
                            ex.printStackTrace();
                            System.out.println(ex.getMessage());
                            javax.swing.JOptionPane.showMessageDialog(null, "TRANSACTION ERROR : Please double check your entries.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                        }
                    }
                } else {
                    javax.swing.JOptionPane.showMessageDialog(null, "Please double check your entries. The issuing and recipient stores must be set.");
                }

            } else {
                javax.swing.JOptionPane.showMessageDialog(null, "Please double check your entries. There must be something to transfer.");
            }
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private javax.swing.JTable issuingItemsTable;
    private javax.swing.JTextField issuingRecipientTxt;
    private javax.swing.JComboBox issuingStoreCmbx;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton3;
    public static javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton5111;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButton91;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JDialog jSearchDialog1;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jSearchPanel1;
    private javax.swing.JPanel jSearchPanel111;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane1;
    private javax.swing.JScrollPane jSearchScrollPane111;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTable jSearchTable1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JTextField jTextField1111;
    private javax.swing.JCheckBox mainStoreCkbx;
    private javax.swing.JTextField manualS11NumberTxt;
    private javax.swing.JCheckBox newTransferChkbx;
    private javax.swing.JTextField personIssuingTxt;
    private javax.swing.JComboBox recepientStoreCmbx;
    private javax.swing.JCheckBox rectifyTransferChkbx;
    private javax.swing.JTable requisitionNumberSearchTable;
    private javax.swing.JTextField requisitionNumberSearchTxt;
    private javax.swing.JTextField requisitionNumberTxt;
    private javax.swing.JDialog resuisitionNumberSearchDialog;
    private javax.swing.JButton saveTransactionBtn;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchButton1;
    private javax.swing.JTextField searchTransferNumberTxt;
    private javax.swing.JTable searchTransferTable;
    private javax.swing.JPanel spacerPanel;
    private javax.swing.JCheckBox subStoreChkbx;
    private javax.swing.JTextField totalValueTxt;
    private javax.swing.JScrollPane transferNumberScrollPane;
    private javax.swing.JDialog transferNumberSearchDialog;
    private javax.swing.JTextField transferNumberTxt;
    private javax.swing.JRadioButton useCostPriceRdbtn;
    private javax.swing.JRadioButton useSellingPriceRdbtn;
    // End of variables declaration//GEN-END:variables
}
