/*
 *
 * Created on August 13, 2002, 1:09 PM
 */
package com.afrisoftech.hospinventory;

import com.afrisoftech.dbadmin.setFixedColumns;
import com.afrisoftech.lib.SQLDateFormat;
import java.awt.Color;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author francis
 */
public class PatientsBillingIntfr_ extends javax.swing.JInternalFrame {

    private final javax.swing.JTextField comboTextField = new javax.swing.JTextField();
    javax.swing.ComboBoxModel mainComboBoxModel;
    javax.swing.ComboBoxModel oldComboBox1311Model;
    private javax.swing.JComboBox cmbox;
    private javax.swing.JComboBox cmbox2;
    private javax.swing.JComboBox cmbox1;
    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    private boolean refreshStatus;
    com.afrisoftech.timeseries.YearyAgeing ageingSeries = null;
    private UpdatePatientList updatePatientList;
    com.afrisoftech.lib.DBObject dbObject;
    private boolean DirectRev;
    public static String transNo = null;
    boolean smartcard = false;
    private String visitID;
    private int total;
    public String storeType = "bill";
    private boolean insertHpPharmacy = false;

    String userName = null;

    public PatientsBillingIntfr_(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        refreshStatus = true;

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();

        setFixedColumns.DisallowReordering(availableDrugsQtysTbl);
        setFixedColumns.DisallowReordering(pharmacistWorkloadTbl);
        setFixedColumns.DisallowReordering(availableDrugsQtysTbl);
        setFixedColumns.DisallowReordering(patientPresctbl);

        dbObject = new com.afrisoftech.lib.DBObject();

    }
    String glAcc2 = null;
    String Stock = null;
    String actCode = null;
    String accountCode = null;
    //userName = com.afrisoftech.lib.UserName.getLoginName(connectDB);
    String transNo1 = null;
    String glType = null;
    String glCode = null;
    String units = null;
    String chbox = null;
    double price = 0.00;
    double qty = 0.00;
    double amount = 0.00;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jSearchDialog212 = new javax.swing.JDialog();
        jSearchPanel212 = new javax.swing.JPanel();
        jTextField11312 = new javax.swing.JTextField();
        jSearchScrollPane212 = new javax.swing.JScrollPane();
        jSearchTable212 = new com.afrisoftech.dbadmin.JTable();
        jButton4212 = new javax.swing.JButton();
        jButton5212 = new javax.swing.JButton();
        jSearchDialog2121 = new javax.swing.JDialog();
        jSearchPanel2121 = new javax.swing.JPanel();
        jTextField113121 = new javax.swing.JTextField();
        jSearchScrollPane2121 = new javax.swing.JScrollPane();
        jSearchTable2121 = new com.afrisoftech.dbadmin.JTable();
        jButton42121 = new javax.swing.JButton();
        jButton52121 = new javax.swing.JButton();
        medicineSearchdialog = new javax.swing.JDialog();
        jSearchPanel3 = new javax.swing.JPanel();
        jTextField114 = new javax.swing.JTextField();
        jSearchScrollPane3 = new javax.swing.JScrollPane();
        jSearchTable3 = new com.afrisoftech.dbadmin.JTable();
        jButton92 = new javax.swing.JButton();
        buttonGroup21 = new javax.swing.ButtonGroup();
        jSearchDialog4 = new javax.swing.JDialog();
        jSearchPanel213 = new javax.swing.JPanel();
        jTextField115 = new javax.swing.JTextField();
        jSearchScrollPane4 = new javax.swing.JScrollPane();
        jSearchTable4 = new com.afrisoftech.dbadmin.JTable();
        jButton93 = new javax.swing.JButton();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jSearchDialog13 = new javax.swing.JDialog();
        jSearchPanel13 = new javax.swing.JPanel();
        jTextField1113 = new javax.swing.JTextField();
        jSearchScrollPane13 = new javax.swing.JScrollPane();
        jSearchTable13 = new com.afrisoftech.dbadmin.JTable();
        dispose11 = new javax.swing.JButton();
        buttonGroup4 = new javax.swing.ButtonGroup();
        workloadBtnGrp = new javax.swing.ButtonGroup();
        pharmacyTabbedPane = new javax.swing.JTabbedPane();
        dispensePanel = new javax.swing.JPanel();
        dispenseHeaderPanel = new javax.swing.JPanel();
        dispenseSearchPatientTypePanel = new javax.swing.JPanel();
        schemeptsChkbx = new javax.swing.JCheckBox();
        walkinPtchbx = new javax.swing.JCheckBox();
        inpatientChkbx = new javax.swing.JCheckBox();
        dispenseSearchPatientPanel = new javax.swing.JPanel();
        searchNoChkbx = new javax.swing.JCheckBox();
        searchNameChbx = new javax.swing.JCheckBox();
        jRadioButton1 = new javax.swing.JRadioButton();
        dispenseHeader2panel = new javax.swing.JPanel();
        dispenseDateLbl = new javax.swing.JLabel();
        receiptNoLbl = new javax.swing.JLabel();
        searchReceiptNoPanel = new javax.swing.JPanel();
        receiptTxt = new javax.swing.JTextField();
        searchReceiptBtn = new javax.swing.JButton();
        dispensePaharmacyDonationsChkbx = new javax.swing.JCheckBox();
        dispensePharmacyChbx = new javax.swing.JCheckBox();
        dispensePharmacyPanel = new javax.swing.JTextField();

        dispenseDatePicker = new com.afrisoftech.lib.DatePicker();
        dispenseBodyPanel = new javax.swing.JPanel();
        //jPanel13.setVisible(false);
        jPanel23 = new javax.swing.JPanel();
        jLabel91 = new javax.swing.JLabel();
        jComboBox1311 = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        patientNameTxt = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        patientCategoryTxt = new javax.swing.JTextField();
        paymentModeLbl = new javax.swing.JLabel();
        doctorPrescribingLbl = new javax.swing.JLabel();
        patientNumberSearchPanel = new javax.swing.JPanel();
        patientNumberTxt = new javax.swing.JTextField();
        patientSearchbtn = new javax.swing.JButton();
        doctorPrescribingCmbx = new javax.swing.JComboBox();
        jTextField82 = new javax.swing.JTextField();
        try {
            java.sql.Statement pstmt = connectDB.createStatement();
            java.sql.ResultSet rs = pstmt.executeQuery("select rate from pb_operating_parameters where category = 'PF'");

            while (rs.next()){
                jTextField82.setText(rs.getObject(1).toString());
                // dispenseDiscountPaercentTxt.setText(rs.getObject(2).toString());

            }
        } catch(java.sql.SQLException sqlex){
            System.out.println(sqlex.getMessage());
        }
        paymentModeCmbx = new javax.swing.JComboBox();
        jPanel641 = new javax.swing.JPanel();
        searchButton3 = new javax.swing.JButton();
        jTextField14 = new javax.swing.JTextField();
        jTextField17 = new javax.swing.JTextField();
        jTextField18 = new javax.swing.JTextField();
        jTextField16 = new javax.swing.JTextField();
        jTextField19 = new javax.swing.JTextField();
        jTextField20 = new javax.swing.JTextField();
        jTextField21 = new javax.swing.JTextField();
        pharmacyCmbx = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        gLCodeTxt = new javax.swing.JTextField();
        searchDrugByCodeChkbx = new javax.swing.JCheckBox();
        searchDrugByDescriptionChkbx = new javax.swing.JCheckBox();
        jTextField5 = new javax.swing.JTextField();
        jScrollPane22 = new javax.swing.JScrollPane();
        mainItemstbl = new com.afrisoftech.dbadmin.JTable();
        cardBalanceLbl = new javax.swing.JLabel();
        cardbaltxtfld = new javax.swing.JTextField();
        addServiceFee = new javax.swing.JButton();
        wardNameLbl = new javax.swing.JLabel();
        wardNameTxt = new javax.swing.JTextField();
        jSeparator12 = new javax.swing.JSeparator();
        jLabel532 = new javax.swing.JLabel();
        jTextField32 = new javax.swing.JTextField();
        dispenseBillTotalTxt = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        dispenseDiscountAmountTxt = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        dispenseNetBillTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        dispenseDiscountPaercentTxt = new javax.swing.JTextField();
        pharmacistActionPanel = new javax.swing.JPanel();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton12 = new javax.swing.JButton();
        jButton63 = new javax.swing.JButton();
        jButton32 = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();
        jButton54 = new javax.swing.JButton();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton121 = new javax.swing.JButton();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton122 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        spacerPanel = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        patientCradBtn = new javax.swing.JButton();
        patientBillPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        patientBilltbl = new com.afrisoftech.dbadmin.JTable();
        printInterimbtn = new javax.swing.JButton();
        prescriptionsHistoryPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientPresctbl = new com.afrisoftech.dbadmin.JTable();
        patientPrescriptionDt = new com.afrisoftech.lib.DatePicker();
        patientPrescbtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        pharmacistWorkLoadPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pharmacistWorkloadTbl = new com.afrisoftech.dbadmin.JTable();
        endworkloadDate = new com.afrisoftech.lib.DatePicker();
        workloadBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        startworkloadDate = new com.afrisoftech.lib.DatePicker();
        jLabel6 = new javax.swing.JLabel();
        allPharmacistsChBx = new javax.swing.JCheckBox();
        currentUserChBx = new javax.swing.JCheckBox();
        jPanel14 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        totalRevenuelb = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        schemepatientTxt = new javax.swing.JTextField();
        outpatientTxt = new javax.swing.JTextField();
        totalRevenueTxt = new javax.swing.JTextField();
        inpatientsTXT = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        patientCountTxt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        totalItemDispensedtxt = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        availableQuantitiesPanel = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        availableDrugsQtysTbl = new com.afrisoftech.dbadmin.JTable();
        drugsCmbx = new javax.swing.JComboBox();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        requisitionsformTBl = new com.afrisoftech.dbadmin.JTable();
        requisitionNoTxt = new javax.swing.JTextField();
        reportPanel = new javax.swing.JPanel();

        jSearchDialog212.setModal(true);
        jSearchDialog212.setUndecorated(true);
        jSearchDialog212.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel212.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel212.setLayout(new java.awt.GridBagLayout());

        jTextField11312.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField11312CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel212.add(jTextField11312, gridBagConstraints);

        jSearchTable212.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable212.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable212.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable212MouseClicked(evt);
            }
        });
        jSearchScrollPane212.setViewportView(jSearchTable212);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel212.add(jSearchScrollPane212, gridBagConstraints);

        jButton4212.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel212.add(jButton4212, gridBagConstraints);

        jButton5212.setText("Close");
        jButton5212.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5212ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel212.add(jButton5212, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog212.getContentPane().add(jSearchPanel212, gridBagConstraints);

        jSearchDialog2121.setModal(true);
        jSearchDialog2121.setUndecorated(true);
        jSearchDialog2121.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2121.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2121.setLayout(new java.awt.GridBagLayout());

        jTextField113121.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField113121CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel2121.add(jTextField113121, gridBagConstraints);

        jSearchTable2121.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable2121.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable2121.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable2121MouseClicked(evt);
            }
        });
        jSearchScrollPane2121.setViewportView(jSearchTable2121);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2121.add(jSearchScrollPane2121, gridBagConstraints);

        jButton42121.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2121.add(jButton42121, gridBagConstraints);

        jButton52121.setText("Close");
        jButton52121.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52121ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2121.add(jButton52121, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog2121.getContentPane().add(jSearchPanel2121, gridBagConstraints);

        medicineSearchdialog.setModal(true);
        medicineSearchdialog.setUndecorated(true);
        medicineSearchdialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel3.setLayout(new java.awt.GridBagLayout());

        jTextField114.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField114CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel3.add(jTextField114, gridBagConstraints);

        jSearchTable3.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jSearchTable3MouseEntered(evt);
            }
        });
        jSearchScrollPane3.setViewportView(jSearchTable3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel3.add(jSearchScrollPane3, gridBagConstraints);

        jButton92.setText("Dispose");
        jButton92.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton92ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel3.add(jButton92, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        medicineSearchdialog.getContentPane().add(jSearchPanel3, gridBagConstraints);

        jSearchDialog4.setModal(true);
        jSearchDialog4.setUndecorated(true);
        jSearchDialog4.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel213.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel213.setLayout(new java.awt.GridBagLayout());

        jTextField115.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField115CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel213.add(jTextField115, gridBagConstraints);

        jSearchTable4.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable4.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable4MouseClicked(evt);
            }
        });
        jSearchScrollPane4.setViewportView(jSearchTable4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel213.add(jSearchScrollPane4, gridBagConstraints);

        jButton93.setText("Dispose");
        jButton93.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton93ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel213.add(jButton93, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog4.getContentPane().add(jSearchPanel213, gridBagConstraints);

        jSearchDialog13.setModal(true);
        jSearchDialog13.setUndecorated(true);
        jSearchDialog13.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel13.setLayout(new java.awt.GridBagLayout());

        jTextField1113.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1113CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel13.add(jTextField1113, gridBagConstraints);

        jSearchTable13.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable13.setShowHorizontalLines(false);
        /*int rowsNo = 0;
        //try {

            crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

            crset1.setConnectionSource(pConnDB);

            // try {
                //crset1.execute();

                // crset2.setExecuteOnLoad(true);
                jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                    new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                    new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

                }));

                tableModel = jSearchTable.getModel();

                jSearchScrollPane.setViewportView(jSearchTable);

                /*   }catch(java.sql.SQLException sqlex){
                javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                System.out.println(sqlex.getMessage());

            }

            javax.swing.table.TableColumn column = null;

            for (int i = 0; i < 4; i++) {

                column = jSearchTable.getColumnModel().getColumn(i);

                if (i == 1) {

                    column.setPreferredWidth(400);
                    //sport column is bigger
                } else {

                    column.setPreferredWidth(200);

                }
            }*/
            jSearchTable13.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jSearchTable13MouseClicked(evt);
                }
            });
            jSearchScrollPane13.setViewportView(jSearchTable13);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            jSearchPanel13.add(jSearchScrollPane13, gridBagConstraints);

            dispose11.setMnemonic('l');
            dispose11.setText("Close");
            dispose11.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    dispose11ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel13.add(dispose11, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchDialog13.getContentPane().add(jSearchPanel13, gridBagConstraints);

            setBackground(new java.awt.Color(250, 240, 220));
            setClosable(true);
            setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            setForeground(new java.awt.Color(204, 204, 204));
            setIconifiable(true);
            setMaximizable(true);
            setResizable(true);
            setTitle(dispenseDatePicker.getDate()+"                          "+com.afrisoftech.lib.UserName.getLoginName(connectDB));
            setFrameIcon(null);
            try {
                setSelected(true);
            } catch (java.beans.PropertyVetoException e1) {
                e1.printStackTrace();
            }
            setVisible(true);
            addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
                public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                    formInternalFrameActivated(evt);
                }
                public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                }
                public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                }
                public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
                }
                public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
                }
                public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                }
                public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                    formInternalFrameOpened(evt);
                }
            });
            addComponentListener(new java.awt.event.ComponentAdapter() {
                public void componentShown(java.awt.event.ComponentEvent evt) {
                    formComponentShown(evt);
                }
            });
            getContentPane().setLayout(new java.awt.GridBagLayout());

            pharmacyTabbedPane.setBackground(new java.awt.Color(250, 240, 220));
            javax.swing.JInternalFrame dismth = new DispenseBillingIntfr(connectDB, pConnDB);

            pharmacyTabbedPane.add("Ordered Prescriptions",  dismth.getContentPane());

            javax.swing.JInternalFrame dismth1 = new PatientsBillingIntfr(connectDB, pConnDB);

            pharmacyTabbedPane.add("Raise Bill for Cash Sales",  dismth1.getContentPane());
            pharmacyTabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    pharmacyTabbedPaneMouseClicked(evt);
                }
            });
            pharmacyTabbedPane.addComponentListener(new java.awt.event.ComponentAdapter() {
                public void componentShown(java.awt.event.ComponentEvent evt) {
                    pharmacyTabbedPaneComponentShown(evt);
                }
            });

            dispensePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Dispense items by choosing a receipt number for cash payments or bill client for credit sales by selecting a registered file"));
            dispensePanel.setLayout(new java.awt.GridBagLayout());

            dispenseHeaderPanel.setBackground(new java.awt.Color(250, 240, 220));
            dispenseHeaderPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            dispenseHeaderPanel.setLayout(new java.awt.GridBagLayout());

            dispenseSearchPatientTypePanel.setBackground(new java.awt.Color(250, 240, 220));
            dispenseSearchPatientTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Patient category"));
            dispenseSearchPatientTypePanel.setLayout(new java.awt.GridBagLayout());

            buttonGroup1.add(schemeptsChkbx);
            schemeptsChkbx.setSelected(true);
            schemeptsChkbx.setText("Out Patient(Scheme)");
            schemeptsChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            schemeptsChkbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    schemeptsChkbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            dispenseSearchPatientTypePanel.add(schemeptsChkbx, gridBagConstraints);

            buttonGroup1.add(walkinPtchbx);
            walkinPtchbx.setText("Walk In Patient");
            walkinPtchbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            walkinPtchbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    walkinPtchbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            dispenseSearchPatientTypePanel.add(walkinPtchbx, gridBagConstraints);

            buttonGroup1.add(inpatientChkbx);
            inpatientChkbx.setText("In Patient");
            inpatientChkbx.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            inpatientChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            inpatientChkbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    inpatientChkbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            dispenseSearchPatientTypePanel.add(inpatientChkbx, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            dispenseHeaderPanel.add(dispenseSearchPatientTypePanel, gridBagConstraints);

            dispenseSearchPatientPanel.setBackground(new java.awt.Color(250, 240, 220));
            dispenseSearchPatientPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Search By"));
            dispenseSearchPatientPanel.setLayout(new java.awt.GridBagLayout());

            buttonGroup21.add(searchNoChkbx);
            searchNoChkbx.setSelected(true);
            searchNoChkbx.setText("Search By  No.");
            searchNoChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            dispenseSearchPatientPanel.add(searchNoChkbx, gridBagConstraints);

            buttonGroup21.add(searchNameChbx);
            searchNameChbx.setText("Search By Name");
            searchNameChbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            dispenseSearchPatientPanel.add(searchNameChbx, gridBagConstraints);

            jRadioButton1.setText("Confirm Visit");
            jRadioButton1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jRadioButton1ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
            gridBagConstraints.weightx = 1.0;
            dispenseSearchPatientPanel.add(jRadioButton1, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            dispenseHeaderPanel.add(dispenseSearchPatientPanel, gridBagConstraints);

            dispenseHeader2panel.setBackground(new java.awt.Color(250, 240, 220));
            dispenseHeader2panel.setLayout(new java.awt.GridBagLayout());

            dispenseDateLbl.setText("Dispensing Date");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            dispenseHeader2panel.add(dispenseDateLbl, gridBagConstraints);

            receiptNoLbl.setText("Receipt No");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            dispenseHeader2panel.add(receiptNoLbl, gridBagConstraints);

            searchReceiptNoPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            searchReceiptNoPanel.setLayout(new java.awt.GridBagLayout());

            receiptTxt.setEditable(false);
            receiptTxt.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
            receiptTxt.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    receiptTxtActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            searchReceiptNoPanel.add(receiptTxt, gridBagConstraints);

            searchReceiptBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
            searchReceiptBtn.setToolTipText("Search");
            searchReceiptBtn.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            searchReceiptBtn.setMaximumSize(new java.awt.Dimension(74, 53));
            searchReceiptBtn.setMinimumSize(new java.awt.Dimension(74, 53));
            searchReceiptBtn.setPreferredSize(new java.awt.Dimension(25, 25));
            searchReceiptBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            searchReceiptBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchReceiptBtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 2;
            searchReceiptNoPanel.add(searchReceiptBtn, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 3.0;
            dispenseHeader2panel.add(searchReceiptNoPanel, gridBagConstraints);

            buttonGroup3.add(dispensePaharmacyDonationsChkbx);
            dispensePaharmacyDonationsChkbx.setText("Donation");
            dispensePaharmacyDonationsChkbx.setEnabled(false);
            dispensePaharmacyDonationsChkbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    dispensePaharmacyDonationsChkbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            dispenseHeader2panel.add(dispensePaharmacyDonationsChkbx, gridBagConstraints);

            buttonGroup3.add(dispensePharmacyChbx);
            dispensePharmacyChbx.setSelected(true);
            dispensePharmacyChbx.setText("Pharmacy");
            dispensePharmacyChbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    dispensePharmacyChbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            dispenseHeader2panel.add(dispensePharmacyChbx, gridBagConstraints);

            dispensePharmacyPanel.setEditable(false);
            dispensePharmacyPanel.setText("Pharmacy");
            dispensePharmacyPanel.setDoubleBuffered(true);
            String branch = null;
            try {
                java.sql.Statement stmt = connectDB.createStatement();
                java.sql.ResultSet rset = stmt.executeQuery("SELECT store_name FROM st_stores WHERE store_code ilike 'PHA'");
                while (rset.next()){
                    dispensePharmacyPanel.setText(rset.getString(1));
                }
                rset.close();
                stmt.close();

            } catch (java.sql.SQLException sqe) {
                sqe.printStackTrace();
                System.out.println("Insert not successful");
            }
            dispensePharmacyPanel.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    dispensePharmacyPanelActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            dispenseHeader2panel.add(dispensePharmacyPanel, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 6;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            dispenseHeader2panel.add(dispenseDatePicker, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            dispenseHeaderPanel.add(dispenseHeader2panel, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridwidth = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.ipady = -5;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
            gridBagConstraints.weightx = 10.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
            dispensePanel.add(dispenseHeaderPanel, gridBagConstraints);

            dispenseBodyPanel.setBackground(new java.awt.Color(250, 240, 220));
            dispenseBodyPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
            dispenseBodyPanel.setLayout(new java.awt.GridBagLayout());

            jPanel23.setBackground(new java.awt.Color(250, 240, 220));
            jPanel23.setLayout(new java.awt.GridBagLayout());

            jLabel91.setText("Patient No.");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel23.add(jLabel91, gridBagConstraints);

            jComboBox1311.setDoubleBuffered(true);
            jComboBox1311.setMinimumSize(new java.awt.Dimension(0, 0));
            jComboBox1311.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            jPanel23.add(jComboBox1311, gridBagConstraints);

            jLabel13.setText("Patient Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel23.add(jLabel13, gridBagConstraints);

            patientNameTxt.setEditable(false);
            patientNameTxt.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
            patientNameTxt.setDoubleBuffered(true);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 2.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel23.add(patientNameTxt, gridBagConstraints);

            jLabel22.setText("Pharmacy store");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel23.add(jLabel22, gridBagConstraints);

            jLabel32.setText("Patient Category");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel23.add(jLabel32, gridBagConstraints);

            patientCategoryTxt.setEditable(false);
            patientCategoryTxt.setDoubleBuffered(true);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel23.add(patientCategoryTxt, gridBagConstraints);

            paymentModeLbl.setText("Payment Mode");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel23.add(paymentModeLbl, gridBagConstraints);

            doctorPrescribingLbl.setText("Doctor Prescribing");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel23.add(doctorPrescribingLbl, gridBagConstraints);

            patientNumberSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            patientNumberSearchPanel.setMinimumSize(new java.awt.Dimension(7, 25));
            patientNumberSearchPanel.setPreferredSize(new java.awt.Dimension(7, 25));
            patientNumberSearchPanel.setLayout(new java.awt.GridBagLayout());

            patientNumberTxt.setEditable(false);
            patientNumberTxt.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            patientNumberSearchPanel.add(patientNumberTxt, gridBagConstraints);

            patientSearchbtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
            patientSearchbtn.setToolTipText("Search");
            patientSearchbtn.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            patientSearchbtn.setMaximumSize(new java.awt.Dimension(20, 53));
            patientSearchbtn.setMinimumSize(new java.awt.Dimension(20, 53));
            patientSearchbtn.setPreferredSize(new java.awt.Dimension(25, 25));
            patientSearchbtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            patientSearchbtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    patientSearchbtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 2;
            patientNumberSearchPanel.add(patientSearchbtn, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 3.0;
            gridBagConstraints.weighty = 1.0;
            jPanel23.add(patientNumberSearchPanel, gridBagConstraints);

            doctorPrescribingCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select first_name||' '||middle_name as name from pb_doctors_list  where status ilike 'acti%' order by name"));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel23.add(doctorPrescribingCmbx, gridBagConstraints);

            jTextField82.setEditable(false);
            jTextField82.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            jTextField82.setText("0.00");
            jTextField82.setMinimumSize(new java.awt.Dimension(0, 0));
            jTextField82.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 50);
            jPanel23.add(jTextField82, gridBagConstraints);

            paymentModeCmbx.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
            paymentModeCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cash", "Scheme" }));
            paymentModeCmbx.setEnabled(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel23.add(paymentModeCmbx, gridBagConstraints);

            jPanel641.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jPanel641.setMinimumSize(new java.awt.Dimension(0, 0));
            jPanel641.setPreferredSize(new java.awt.Dimension(0, 0));
            jPanel641.setLayout(new java.awt.GridBagLayout());

            searchButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
            searchButton3.setToolTipText("Search");
            searchButton3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            searchButton3.setMaximumSize(new java.awt.Dimension(74, 53));
            searchButton3.setMinimumSize(new java.awt.Dimension(74, 53));
            searchButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            searchButton3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchButton3ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 1;
            jPanel641.add(searchButton3, gridBagConstraints);

            jTextField14.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel641.add(jTextField14, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            jPanel23.add(jPanel641, gridBagConstraints);

            jTextField17.setEditable(false);
            jTextField17.setMinimumSize(new java.awt.Dimension(0, 0));
            jTextField17.setPreferredSize(new java.awt.Dimension(0, 0));
            jTextField17.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jTextField17ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            jPanel23.add(jTextField17, gridBagConstraints);

            jTextField18.setEditable(false);
            jTextField18.setMinimumSize(new java.awt.Dimension(0, 0));
            jTextField18.setPreferredSize(new java.awt.Dimension(0, 0));
            jTextField18.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jTextField18ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            jPanel23.add(jTextField18, gridBagConstraints);

            jTextField16.setEditable(false);
            jTextField16.setMinimumSize(new java.awt.Dimension(0, 0));
            jTextField16.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel23.add(jTextField16, gridBagConstraints);

            jTextField19.setEditable(false);
            jTextField19.setMinimumSize(new java.awt.Dimension(0, 0));
            jTextField19.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel23.add(jTextField19, gridBagConstraints);

            jTextField20.setEditable(false);
            jTextField20.setMinimumSize(new java.awt.Dimension(0, 0));
            jTextField20.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel23.add(jTextField20, gridBagConstraints);

            jTextField21.setEditable(false);
            jTextField21.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            jTextField21.setText("0.00");
            jTextField21.setMinimumSize(new java.awt.Dimension(0, 0));
            jTextField21.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel23.add(jTextField21, gridBagConstraints);

            pharmacyCmbx.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
            pharmacyCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select distinct stores from store_allocation where user_name = current_user and type ilike 'bill'"));
            pharmacyCmbx.setEnabled(false);
            pharmacyCmbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    pharmacyCmbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel23.add(pharmacyCmbx, gridBagConstraints);

            jLabel3.setText("GL Code");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 9;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel23.add(jLabel3, gridBagConstraints);

            gLCodeTxt.setEditable(false);
            gLCodeTxt.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
            gLCodeTxt.setText(com.afrisoftech.lib.StoreFactory.getStoreName(connectDB));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 9;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weighty = 1.0;
            jPanel23.add(gLCodeTxt, gridBagConstraints);

            buttonGroup4.add(searchDrugByCodeChkbx);
            searchDrugByCodeChkbx.setText("Search By Code");
            searchDrugByCodeChkbx.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
            searchDrugByCodeChkbx.setEnabled(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 10;
            jPanel23.add(searchDrugByCodeChkbx, gridBagConstraints);

            buttonGroup4.add(searchDrugByDescriptionChkbx);
            searchDrugByDescriptionChkbx.setSelected(true);
            searchDrugByDescriptionChkbx.setText("Search By name");
            searchDrugByDescriptionChkbx.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
            searchDrugByDescriptionChkbx.setEnabled(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 10;
            jPanel23.add(searchDrugByDescriptionChkbx, gridBagConstraints);

            jTextField5.setEditable(false);
            jTextField5.setMinimumSize(new java.awt.Dimension(0, 0));
            jTextField5.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel23.add(jTextField5, gridBagConstraints);

            jScrollPane22.setBorder(javax.swing.BorderFactory.createTitledBorder("Select items to bill for credit sales by clicking once on the first column on an empty row *PS. INSERT DISPENSING FEE FIRST"));
            jScrollPane22.setPreferredSize(new java.awt.Dimension(700, 403));

            mainItemstbl.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null, null}
                },
                new String [] {
                    "Medicine", "Qty", "Avl Qty", "Price", "Disc", "Total", "Gl Account", "Item Code", "Strength", "Prescrption No"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
                };
                boolean[] canEdit = new boolean [] {
                    false, true, false, false, true, false, false, false, false, false
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            mainItemstbl.setEditingColumn(1);
            mainItemstbl.setEditingRow(mainItemstbl.getSelectedRow());
            mainItemstbl.setGridColor(new java.awt.Color(204, 204, 255));
            mainItemstbl.getTableHeader().setReorderingAllowed(false);
            /*  cmbox = new javax.swing.JComboBox();

            crset2.setConnectionSource(pConnDB);
            crset2.setCommand("select distinct product FROM st_stock_prices WHERE department = 'Pharmacy' order by product");

            cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset2, "product", null, null, null));
            javax.swing.table.TableColumn s1 = this.jTable1.getColumn("Drugs");
            s1.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
            cmbox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    cmboxActionPerformed(evt);
                }
            });
            */

            javax.swing.table.TableColumn column111 = null;
            for (int i = 0; i < 9; i++) {
                column111 = mainItemstbl.getColumnModel().getColumn(i);
                if (i == 0) {

                    column111.setPreferredWidth(450); //sport column is bigger
                } else {
                    if (i == 6) {
                        column111.setPreferredWidth(10);
                    }  else
                    column111.setPreferredWidth(150);

                }
            }
            mainItemstbl.addAncestorListener(new javax.swing.event.AncestorListener() {
                public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                    mainItemstblAncestorMoved(evt);
                }
                public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                }
                public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                }
            });
            mainItemstbl.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    mainItemstblMouseClicked(evt);
                }
            });
            mainItemstbl.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    mainItemstblKeyReleased(evt);
                }
            });
            jScrollPane22.setViewportView(mainItemstbl);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 11;
            gridBagConstraints.gridwidth = 10;
            gridBagConstraints.gridheight = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
            jPanel23.add(jScrollPane22, gridBagConstraints);

            cardBalanceLbl.setText("Card Balance");
            cardBalanceLbl.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 10;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel23.add(cardBalanceLbl, gridBagConstraints);

            cardbaltxtfld.setEditable(false);
            cardbaltxtfld.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 10;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            jPanel23.add(cardbaltxtfld, gridBagConstraints);

            addServiceFee.setBackground(new java.awt.Color(204, 204, 255));
            addServiceFee.setForeground(new java.awt.Color(0, 0, 204));
            addServiceFee.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32x32/Control Panel 2.png"))); // NOI18N
            addServiceFee.setText("Add Service Fee   ");
            addServiceFee.setBorder(new javax.swing.border.MatteBorder(null));
            addServiceFee.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    addServiceFeeActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 10;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel23.add(addServiceFee, gridBagConstraints);

            wardNameLbl.setText("Ward Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 9;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel23.add(wardNameLbl, gridBagConstraints);

            wardNameTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 9;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel23.add(wardNameTxt, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.gridwidth = 10;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            dispenseBodyPanel.add(jPanel23, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.gridwidth = 10;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
            gridBagConstraints.weightx = 1.0;
            dispenseBodyPanel.add(jSeparator12, gridBagConstraints);

            jLabel532.setText("Amount");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 6;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.weightx = 1.0;
            dispenseBodyPanel.add(jLabel532, gridBagConstraints);

            jTextField32.setEditable(false);
            jTextField32.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            jTextField32.setText("0.00");
            jTextField32.setMinimumSize(new java.awt.Dimension(0, 0));
            jTextField32.setPreferredSize(new java.awt.Dimension(0, 0));
            jTextField32.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jTextField32ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
            dispenseBodyPanel.add(jTextField32, gridBagConstraints);

            dispenseBillTotalTxt.setEditable(false);
            dispenseBillTotalTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            dispenseBillTotalTxt.setText("0.00");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 7;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 2.0;
            dispenseBodyPanel.add(dispenseBillTotalTxt, gridBagConstraints);

            jTextField3.setText("0.00");
            jTextField3.setMinimumSize(new java.awt.Dimension(0, 0));
            jTextField3.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 6;
            gridBagConstraints.gridy = 1;
            dispenseBodyPanel.add(jTextField3, gridBagConstraints);

            dispenseDiscountAmountTxt.setEditable(false);
            dispenseDiscountAmountTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
            dispenseDiscountAmountTxt.setText("0.00");
            dispenseDiscountAmountTxt.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    dispenseDiscountAmountTxtKeyReleased(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.2;
            dispenseBodyPanel.add(dispenseDiscountAmountTxt, gridBagConstraints);

            jLabel16.setText("Net Total");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 8;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.weightx = 1.0;
            dispenseBodyPanel.add(jLabel16, gridBagConstraints);

            dispenseNetBillTxt.setEditable(false);
            dispenseNetBillTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
            dispenseNetBillTxt.setText("0.00");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 9;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.5;
            dispenseBodyPanel.add(dispenseNetBillTxt, gridBagConstraints);

            jLabel2.setText("Discount Amt.");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.weightx = 1.0;
            dispenseBodyPanel.add(jLabel2, gridBagConstraints);

            jLabel1.setText("Discount %");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            dispenseBodyPanel.add(jLabel1, gridBagConstraints);

            dispenseDiscountPaercentTxt.setEditable(false);
            dispenseDiscountPaercentTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
            dispenseDiscountPaercentTxt.setText("0.00");
            dispenseDiscountPaercentTxt.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    dispenseDiscountPaercentTxtKeyReleased(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            dispenseBodyPanel.add(dispenseDiscountPaercentTxt, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 7;
            gridBagConstraints.gridheight = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 20.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
            dispensePanel.add(dispenseBodyPanel, gridBagConstraints);

            pharmacistActionPanel.setBackground(new java.awt.Color(250, 240, 220));
            pharmacistActionPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
            pharmacistActionPanel.setLayout(new java.awt.GridBagLayout());

            jButton12.setBackground(new java.awt.Color(0, 204, 204));
            jButton12.setMnemonic('s');
            jButton12.setText("Bill/Dispense item(s)");
            jButton12.setToolTipText("Click here enter data");
            jButton12.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton12ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            pharmacistActionPanel.add(jButton12, gridBagConstraints);

            jButton63.setMnemonic('r');
            jButton63.setText("Remove Row");
            jButton63.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton63ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            pharmacistActionPanel.add(jButton63, gridBagConstraints);

            jButton32.setMnemonic('l');
            jButton32.setText("Clear form");
            jButton32.setToolTipText("Click here to clear textfields");
            jButton32.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton32ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            pharmacistActionPanel.add(jButton32, gridBagConstraints);

            closeBtn.setMnemonic('C');
            closeBtn.setText("Close form");
            closeBtn.setToolTipText("Click here to close window");
            closeBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    closeBtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 9;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            pharmacistActionPanel.add(closeBtn, gridBagConstraints);

            jButton54.setMnemonic('h');
            jButton54.setText("Help");
            jButton54.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton54ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 10;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            pharmacistActionPanel.add(jButton54, gridBagConstraints);

            jButton121.setMnemonic('p');
            jButton121.setText("Save & Print");
            jButton121.setToolTipText("Click here enter data");
            jButton121.setEnabled(false);
            jButton121.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton121ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            pharmacistActionPanel.add(jButton121, gridBagConstraints);

            jButton122.setMnemonic('R');
            jButton122.setText("Reprint");
            jButton122.setToolTipText("Click here enter data");
            jButton122.setEnabled(false);
            jButton122.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton122ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            pharmacistActionPanel.add(jButton122, gridBagConstraints);

            jButton7.setMnemonic('h');
            jButton7.setText("Read Card");
            jButton7.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton7ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            pharmacistActionPanel.add(jButton7, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 5.0;
            pharmacistActionPanel.add(spacerPanel, gridBagConstraints);

            jButton3.setText("View Patient Bill");
            jButton3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton3ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            pharmacistActionPanel.add(jButton3, gridBagConstraints);

            patientCradBtn.setText("Patient Card");
            patientCradBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    patientCradBtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            pharmacistActionPanel.add(patientCradBtn, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 7;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.gridheight = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            dispensePanel.add(pharmacistActionPanel, gridBagConstraints);

            pharmacyTabbedPane.addTab("Item(s)  To Dispense", dispensePanel);

            patientBillPanel.setLayout(new java.awt.GridBagLayout());

            patientBilltbl.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {

                }
            ));
            jScrollPane3.setViewportView(patientBilltbl);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            patientBillPanel.add(jScrollPane3, gridBagConstraints);

            printInterimbtn.setText("Print Interim Invoice");
            printInterimbtn.setEnabled(false);
            printInterimbtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    printInterimbtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            patientBillPanel.add(printInterimbtn, gridBagConstraints);

            pharmacyTabbedPane.addTab("Patient Bill(Pharmacy Items)", patientBillPanel);

            prescriptionsHistoryPanel.setLayout(new java.awt.GridBagLayout());

            patientPresctbl.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {

                }
            ));
            jScrollPane1.setViewportView(patientPresctbl);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 200.0;
            prescriptionsHistoryPanel.add(jScrollPane1, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
            prescriptionsHistoryPanel.add(patientPrescriptionDt, gridBagConstraints);

            patientPrescbtn.setText("Refresh Data");
            patientPrescbtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    patientPrescbtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            prescriptionsHistoryPanel.add(patientPrescbtn, gridBagConstraints);

            jLabel4.setText("Date");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            prescriptionsHistoryPanel.add(jLabel4, gridBagConstraints);

            pharmacyTabbedPane.addTab("Patient Prescriptions History", prescriptionsHistoryPanel);

            pharmacistWorkLoadPanel.setLayout(new java.awt.GridBagLayout());

            pharmacistWorkloadTbl.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {

                }
            ));
            pharmacistWorkloadTbl.getTableHeader().setReorderingAllowed(false);
            jScrollPane2.setViewportView(pharmacistWorkloadTbl);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridy = 2;
            gridBagConstraints.gridwidth = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 200.0;
            pharmacistWorkLoadPanel.add(jScrollPane2, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
            pharmacistWorkLoadPanel.add(endworkloadDate, gridBagConstraints);

            workloadBtn.setBackground(new java.awt.Color(0, 204, 204));
            workloadBtn.setText("Refresh");
            workloadBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    workloadBtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            pharmacistWorkLoadPanel.add(workloadBtn, gridBagConstraints);

            jLabel5.setText("Start Date ");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            pharmacistWorkLoadPanel.add(jLabel5, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
            pharmacistWorkLoadPanel.add(startworkloadDate, gridBagConstraints);

            jLabel6.setText("End Date");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            pharmacistWorkLoadPanel.add(jLabel6, gridBagConstraints);

            workloadBtnGrp.add(allPharmacistsChBx);
            allPharmacistsChBx.setSelected(true);
            allPharmacistsChBx.setText("Workload for all Pharmacists");
            allPharmacistsChBx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            allPharmacistsChBx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    allPharmacistsChBxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            pharmacistWorkLoadPanel.add(allPharmacistsChBx, gridBagConstraints);

            workloadBtnGrp.add(currentUserChBx);
            currentUserChBx.setText("Workload for current user");
            currentUserChBx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            currentUserChBx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    currentUserChBxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            pharmacistWorkLoadPanel.add(currentUserChBx, gridBagConstraints);

            jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(null, pharmacyCmbx.getSelectedItem().toString().toUpperCase()+":  Summary Between  "+com.afrisoftech.lib.SQLDateFormat.getSQLDate(startworkloadDate.getDate())+" and  "+com.afrisoftech.lib.SQLDateFormat.getSQLDate(endworkloadDate.getDate()), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Droid Sans Mono", 0, 12), new java.awt.Color(255, 0, 51))); // NOI18N
            jPanel14.setLayout(new java.awt.GridBagLayout());

            jLabel7.setText("Inpatients");
            jLabel7.setEnabled(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel14.add(jLabel7, gridBagConstraints);

            jLabel8.setText("Cash Outpatients");
            jLabel8.setEnabled(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel14.add(jLabel8, gridBagConstraints);

            totalRevenuelb.setBackground(new java.awt.Color(255, 51, 51));
            totalRevenuelb.setText("Total Revenue");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel14.add(totalRevenuelb, gridBagConstraints);

            jLabel11.setText("Scheme Outpatients");
            jLabel11.setEnabled(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel14.add(jLabel11, gridBagConstraints);

            schemepatientTxt.setEditable(false);
            schemepatientTxt.setText("0");
            schemepatientTxt.setEnabled(false);
            schemepatientTxt.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    schemepatientTxtActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
            jPanel14.add(schemepatientTxt, gridBagConstraints);

            outpatientTxt.setEditable(false);
            outpatientTxt.setText("0");
            outpatientTxt.setEnabled(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
            jPanel14.add(outpatientTxt, gridBagConstraints);

            totalRevenueTxt.setEditable(false);
            totalRevenueTxt.setText("0.00");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
            jPanel14.add(totalRevenueTxt, gridBagConstraints);

            inpatientsTXT.setEditable(false);
            inpatientsTXT.setText("0");
            inpatientsTXT.setEnabled(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel14.add(inpatientsTXT, gridBagConstraints);

            jLabel9.setBackground(new java.awt.Color(255, 51, 51));
            jLabel9.setText("Total Patient Count");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            jPanel14.add(jLabel9, gridBagConstraints);

            patientCountTxt.setEditable(false);
            patientCountTxt.setText("0");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel14.add(patientCountTxt, gridBagConstraints);

            jLabel12.setBackground(new java.awt.Color(255, 51, 51));
            jLabel12.setText("Items Dispensed");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            jPanel14.add(jLabel12, gridBagConstraints);

            totalItemDispensedtxt.setEditable(false);
            totalItemDispensedtxt.setText("0");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel14.add(totalItemDispensedtxt, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.gridwidth = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            jPanel14.add(jSeparator1, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.gridwidth = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 150.0;
            pharmacistWorkLoadPanel.add(jPanel14, gridBagConstraints);

            pharmacyTabbedPane.addTab("Pharmacist's Workload", pharmacistWorkLoadPanel);

            availableQuantitiesPanel.setLayout(new java.awt.GridBagLayout());

            jTabbedPane2.setBackground(new java.awt.Color(255, 51, 0));
            jTabbedPane2.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

            jPanel11.setLayout(new java.awt.GridBagLayout());

            availableDrugsQtysTbl.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {

                }
            ));
            availableDrugsQtysTbl.setSelectionBackground(new java.awt.Color(255, 255, 255));
            availableDrugsQtysTbl.setSelectionForeground(new java.awt.Color(255, 51, 51));
            jScrollPane4.setViewportView(availableDrugsQtysTbl);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 200.0;
            jPanel11.add(jScrollPane4, gridBagConstraints);

            drugsCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select distinct description from st_stock_item WHERE department ilike '%drug%' order by 1"));
            drugsCmbx.setBorder(javax.swing.BorderFactory.createTitledBorder("Select item to display available quantities in various stores"));
            drugsCmbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    drugsCmbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel11.add(drugsCmbx, gridBagConstraints);

            jTabbedPane2.addTab("Available Quantities", jPanel11);

            jPanel12.setLayout(new java.awt.GridBagLayout());

            requisitionsformTBl.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {

                },
                new String [] {

                }
            ));
            jScrollPane5.setViewportView(requisitionsformTBl);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel12.add(jScrollPane5, gridBagConstraints);

            requisitionNoTxt.setText("Search Requisition...");
            requisitionNoTxt.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    requisitionNoTxtCaretUpdate(evt);
                }
            });
            requisitionNoTxt.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    requisitionNoTxtMouseClicked(evt);
                }
            });
            requisitionNoTxt.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    requisitionNoTxtActionPerformed(evt);
                }
            });
            requisitionNoTxt.addFocusListener(new java.awt.event.FocusAdapter() {
                public void focusGained(java.awt.event.FocusEvent evt) {
                    requisitionNoTxtFocusGained(evt);
                }
                public void focusLost(java.awt.event.FocusEvent evt) {
                    requisitionNoTxtFocusLost(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 2.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 50, 0, 800);
            jPanel12.add(requisitionNoTxt, gridBagConstraints);

            jTabbedPane2.addTab("S11 Analysis", jPanel12);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            availableQuantitiesPanel.add(jTabbedPane2, gridBagConstraints);

            pharmacyTabbedPane.addTab("Available Quantities", availableQuantitiesPanel);
            pharmacyTabbedPane.addTab("Report Viewer", reportPanel);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            getContentPane().add(pharmacyTabbedPane, gridBagConstraints);
            pharmacyTabbedPane.getAccessibleContext().setAccessibleName("Dispense Window");

            setBounds(0, 0, 1213, 534);
        }// </editor-fold>//GEN-END:initComponents

    private void pharmacyCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pharmacyCmbxActionPerformed
        try {
            java.sql.Statement ps11 = connectDB.createStatement();
            java.sql.ResultSet rst11 = ps11.executeQuery("select code from pb_activity WHERE activity ilike '" + pharmacyCmbx.getSelectedItem() + "'");
            while (rst11.next()) {

                gLCodeTxt.setText(rst11.getString(1));
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
        }// TODO add your handling code here:
    }//GEN-LAST:event_pharmacyCmbxActionPerformed

    private void jSearchTable3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable3MouseEntered
// TODO add your handling code here:
    }//GEN-LAST:event_jSearchTable3MouseEntered

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        com.afrisoftech.hospinventory.PatientsBillingIntfr_.jTextField16.setText("");
        com.afrisoftech.hospinventory.PatientsBillingIntfr_.jTextField21.setText("");
        com.afrisoftech.hospinventory.PatientsBillingIntfr_.jTextField19.setText("");
        com.afrisoftech.hospinventory.PatientsBillingIntfr_.jTextField20.setText("");

        java.io.File xmlDocFile = null;

        xmlDocFile = new java.io.File(System.getProperty("docsdir"), "ForwardedCardData.xml");

        biz.systempartners.claims.XMLClaimFile claimFile = new biz.systempartners.claims.XMLClaimFile();

        claimFile.processFile(xmlDocFile);

        xmlDocFile = new java.io.File(System.getProperty("docsdir"), "ForwardedCardData.xml");

        javax.swing.JOptionPane.showMessageDialog(this, "Smart Card read successfully with identity:\nCard Number :[" + claimFile.cardNumber + "] and Name : [" + claimFile.patientSurName + " " + claimFile.patientForenames + "]");

        com.afrisoftech.hospinventory.PatientsBillingIntfr_.jTextField16.setText(claimFile.medicalAidCode);
        com.afrisoftech.hospinventory.PatientsBillingIntfr_.jTextField19.setText(claimFile.medicalAidNumber);
        com.afrisoftech.hospinventory.PatientsBillingIntfr_.jTextField20.setText(claimFile.patientSurName + " " + claimFile.patientForenames);
        com.afrisoftech.hospinventory.PatientsBillingIntfr_.jTextField21.setText(claimFile.cardBalance);
        if (jTextField16.getText().equalsIgnoreCase("")) {
            jTextField19.setText("");
        } else {
            try {

                java.sql.Statement st1 = connectDB.createStatement();
                java.sql.ResultSet rsetTable1 = st1.executeQuery("select account_no,scheme_name,payer_name FROM ac_schemes WHERE sch_abbrev ILIKE '" + claimFile.medicalAidCode + "'");
                while (rsetTable1.next()) {

                    jTextField14.setText(rsetTable1.getString(2));
                    jTextField17.setText(rsetTable1.getString(1));
                    jTextField18.setText(rsetTable1.getString(3));
                }
                // jButton121.setEnabled(true);
                jButton12.setEnabled(true);
                jButton122.setEnabled(false);
                jButton7.setEnabled(false);
                //javax.swing.JOptionPane.showMessageDialog(this,"You must retrieve from smart link","Information Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);

            } catch (java.sql.SQLException sqlExec) {

                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

            }
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jTextField18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField18ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jTextField18ActionPerformed

    private void jTextField17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField17ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jTextField17ActionPerformed

    private void dispose11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispose11ActionPerformed
        jSearchDialog13.dispose(); // Add your handling code here:
    }//GEN-LAST:event_dispose11ActionPerformed

    private void jSearchTable13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable13MouseClicked
        jTextField14.setText(jSearchTable13.getValueAt(jSearchTable13.getSelectedRow(), 1).toString());
        jTextField18.setText(jSearchTable13.getValueAt(jSearchTable13.getSelectedRow(), 2).toString());
        jTextField17.setText(jSearchTable13.getValueAt(jSearchTable13.getSelectedRow(), 0).toString());

        jSearchDialog13.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable13MouseClicked

    private void jTextField1113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1113CaretUpdate
        if (jTextField1113.getCaretPosition() < 3) {

            System.out.println("Nothing");
        } else {

            jSearchTable13.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT account_no,scheme_name,payer_name from ac_schemes where scheme_name ILIKE '" + jTextField1113.getText() + "%' order by scheme_name"));


            /*
             * searchRowSet11.execute("SELECT account_no,scheme_name,payer_name
             * from ac_schemes where scheme_name ILIKE
             * '"+jTextField1111.getText()+"%' order by scheme_name"); //
             * searchRowSet.execute("SELECT patient_no, (upper(first_name||'
             * '||second_name)) as name, year_of_birth, residence from
             * hp_patient_register where (upper(first_name||' '||second_name))
             * ILIKE '"+jTextField11.getText()+"%' order by first_name");
             *
             * jSearchTable11.setModel(new
             * org.netbeans.lib.sql.models.TableModel(searchRowSet11, new
             * org.netbeans.lib.sql.models.TableModel.Column[] { new
             * org.netbeans.lib.sql.models.TableModel.Column("account_no",
             * "Account no", false), new
             * org.netbeans.lib.sql.models.TableModel.Column("scheme_name",
             * "Name", false), new
             * org.netbeans.lib.sql.models.TableModel.Column("payer_name",
             * "Payer", false)
             *
             * }));
             */
            jSearchTable13.setShowHorizontalLines(false);
            jSearchScrollPane13.setViewportView(jSearchTable13);

        }         // Add your handling code here:
    }//GEN-LAST:event_jTextField1113CaretUpdate

    private void searchButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton3ActionPerformed
        searchButton11aClicked();         // Add your handling code here:
    }//GEN-LAST:event_searchButton3ActionPerformed
    private void searchButton11aClicked() {

        System.out.println("Showing dialog");

        jSearchDialog13.dispose();

        java.awt.Point point = this.jTextField14.getLocationOnScreen();

        jSearchDialog13.setSize(400, 200);

        jSearchDialog13.setLocation(point);

        jSearchDialog13.setVisible(true);
    }
    private void dispenseDiscountPaercentTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dispenseDiscountPaercentTxtKeyReleased
        if (dispenseDiscountPaercentTxt.getText().equalsIgnoreCase("")) {
            dispenseDiscountPaercentTxt.setText("0.00");
            dispenseDiscountAmountTxt.setText("0.00");

        } else {
            double discAllowed = 0.00;
            double discount = java.lang.Float.parseFloat(dispenseDiscountPaercentTxt.getText());
            double total = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(mainItemstbl, 5);
            discAllowed = java.lang.Math.round(total * (discount / 100));
            dispenseDiscountAmountTxt.setText("" + discAllowed + "");
            dispenseDiscountAmountTxtKeyReleased(evt);
        }
// TODO add your handling code here:
    }//GEN-LAST:event_dispenseDiscountPaercentTxtKeyReleased

    private void dispenseDiscountAmountTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dispenseDiscountAmountTxtKeyReleased
        if (dispenseDiscountAmountTxt.getText().equalsIgnoreCase("")) {
        } else {
            double discAllowed = 0;
            double discount = java.lang.Float.parseFloat(dispenseDiscountAmountTxt.getText());
            double total = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(mainItemstbl, 5);

            // float total = java.lang.Float.parseFloat(jTextField10.getText());
            try {

                java.sql.Statement pstmt1 = connectDB.createStatement();
                java.sql.ResultSet rs1 = pstmt1.executeQuery("select disc_allowed from st_stock_control"); //from orders where supplier ='"+jTable1.getValueAt(i,4).toString()+"'");

                while (rs1.next()) {

                    discAllowed = rs1.getFloat(1);
                }

            } catch (java.sql.SQLException sq) {
                sq.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

                System.out.println(sq.getMessage());

            }
            if (discount > total * (discAllowed / 100)) {
                javax.swing.JOptionPane.showMessageDialog(this, "The discount you are giving is higher than the authorised one. \n Should be not more than [ " + total * (discAllowed / 100) + " ]", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                dispenseNetBillTxt.setText("0.00");
                dispenseDiscountAmountTxt.setText("0.00");
            } else {
                if (discount <= total * (discAllowed / 100)) {
                    double num_d = total - discount;
                    dispenseNetBillTxt.setText("" + num_d + "");

                    if (num_d < 0) {
                        dispenseNetBillTxt.setForeground(java.awt.Color.red);
                    } else {
                        dispenseNetBillTxt.setForeground(java.awt.Color.blue);
                    }
                }
            }
        }
// TODO add your handling code here:
    }//GEN-LAST:event_dispenseDiscountAmountTxtKeyReleased

    private void dispensePharmacyChbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispensePharmacyChbxActionPerformed
        //this.jTextField4.setText(this.jCheckBox6.getText());        // Add your handling code here:
    }//GEN-LAST:event_dispensePharmacyChbxActionPerformed

    private void dispensePaharmacyDonationsChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispensePaharmacyDonationsChkbxActionPerformed
        //  jTextField4.setText(this.jCheckBox5.getText());   // Add your handling code here:
    }//GEN-LAST:event_dispensePaharmacyDonationsChkbxActionPerformed

    private void jButton122ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton122ActionPerformed
        double amount1 = 0.00;
        double percentage = 0.00;
        double TotalPrice = 0.00;
        double total = 0.00;
        double quantity = 0.00;
        double Total = 0.00;
        String billNo = null;
        transNo = null;
        String payMode = null;
        String patientAcc = null;
        String cardNo = null;
        String AccDesc = null;
        String scheme = null;
        String cardName = null;
        String isurer = null;
        String expDate = null;
        String staffNo = null;
        String BillNo = null;
        String glAcc = null;
        // String BillNo = null;
        String code = null;
        String user = null;
        String prescNo = null;
        String glAcc2 = null;
        String chbox = null;
        int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "Do you really want to Save?", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

        if (exitOption == javax.swing.JOptionPane.YES_OPTION) {

            //     double presc = java.lang.Double.parseDouble(jTextField8.getText());
            if (schemeptsChkbx.isSelected()) {
                chbox = "OP";
            } else {
                if (walkinPtchbx.isSelected()) {
                    chbox = "WI";
                } else {
                    if (inpatientChkbx.isSelected()) {
                        chbox = "IP";
                    }
                }
            }

            String receiptNo = null;
            int k = 1;
            try {
                connectDB.setAutoCommit(false);

                //wait(10000);
                while (k != 0) {

                    if (transNo != null) {
                        k = 0;
                    }

                }
                connectDB.setAutoCommit(false);

                java.sql.Statement psq = connectDB.createStatement();
                java.sql.ResultSet rstq = psq.executeQuery("select currval('prescription_no')");
                while (rstq.next()) {
                    rstq.getObject(1).toString();

                    prescNo = rstq.getObject(1).toString();
                }

                connectDB.commit();
                connectDB.setAutoCommit(true);

                com.afrisoftech.txtreports.PrescriptionTxt policy = new com.afrisoftech.txtreports.PrescriptionTxt(connectDB, patientNumberTxt.getText(), patientNameTxt.getText(), prescNo, paymentModeCmbx.getSelectedItem().toString());

                //  BillInvoicePdf policy = new BillInvoicePdf();
                //  policy.BillInvoicePdf(connectDB,jTextField9.getText(), jTextField1.getText(),jTextField3.getText(),prescNo,jTextField5.getText(),jTable1,datePicker1.getDate());
                // }
                //  jComboBox2.setSelectedItem(null);
            } catch (java.sql.SQLException sq) {

                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    sql.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

        }        // Add your handling code here:
    }//GEN-LAST:event_jButton122ActionPerformed

    private void jButton121ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton121ActionPerformed
        double amount1 = 0.00;
        double percentage = 0.00;
        double TotalPrice = 0.00;
        double total = 0.00;
        double quantity = 0.00;
        double Total = 0.00;
        String billNo = null;
        transNo = null;
        String payMode = null;
        String patientAcc = null;
        String cardNo = null;
        String AccDesc = null;
        String scheme = null;
        String cardName = null;
        String isurer = null;
        String expDate = null;
        String staffNo = null;
        String BillNo = null;
        String glAcc = null;
        // String BillNo = null;
        String code = null;
        String user = null;
        String prescNo = null;
        String glAcc2 = null;
        String chbox = null;
        int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "Do you really want to Save?", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

        if (exitOption == javax.swing.JOptionPane.YES_OPTION) {

            //  double presc = java.lang.Double.parseDouble(jTextField8.getText());
            if (schemeptsChkbx.isSelected()) {
                chbox = "OP";
            } else {
                if (walkinPtchbx.isSelected()) {
                    chbox = "WI";
                } else {
                    if (inpatientChkbx.isSelected()) {
                        chbox = "IP";
                    }
                }
            }

            jButton12ActionPerformed(evt);
            jButton122ActionPerformed(evt);

        }        // Add your handling code here:
    }//GEN-LAST:event_jButton121ActionPerformed

    private void searchReceiptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchReceiptBtnActionPerformed
        searchButtonClicked4();    // Add your handling code here:
    }//GEN-LAST:event_searchReceiptBtnActionPerformed

    private void jSearchTable4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable4MouseClicked

        for (int k = 0; k < mainItemstbl.getRowCount(); k++) {
            for (int r = 0; r < mainItemstbl.getColumnCount(); r++) {
                mainItemstbl.getModel().setValueAt(null, k, r);
            }
        }
        receiptTxt.setText(jSearchTable4.getValueAt(jSearchTable4.getSelectedRow(), 0).toString());
        int j = 0;

        int i = 0;
        //irq036423 43359
        try {
            java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("select store_gl_account from store_allocation where stores = ? AND user_name = current_user ");
            pstmt1.setString(1, pharmacyCmbx.getSelectedItem().toString());
            java.sql.ResultSet rsetGL = pstmt1.executeQuery();
            while (rsetGL.next()) {
                gLCodeTxt.setText(rsetGL.getObject(1).toString());
            }
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("select dealer,patient_no,activity_code from ac_cash_collection where receipt_no = ? ");
            java.sql.PreparedStatement pstmtx = connectDB.prepareStatement("select distinct ac.description,ac.quantity,ROUND(ac.debit),ROUND(ac.debit/ac.quantity), '"+gLCodeTxt.getText()+"', hp.prescription_no"
                    + " from ac_cash_collection ac, hp_pharmacy hp where ac.description = hp.description AND ac.patient_no = hp.patient_no "
                    + "AND hp.collected = false AND hp.paid = true AND ac.receipt_no = ? AND ac.receipt_no=hp.manual_pr AND ac.credit = 0 AND hp.date_prescribed::date >= current_date - 2 AND ac.date::date >= current_date - 2 "
                    //   + "---AND ac.activity_code = ? "
                    + "");
            //   java.sql.PreparedStatement pstmtx = connectDB.prepareStatement("select description,quantity,ROUND(debit),ROUND(debit/quantity),activity_code from ac_cash_collection where receipt_no = ? AND credit = 0 AND activity_code = ? and ");

            java.sql.PreparedStatement pstmtx1 = connectDB.prepareStatement("select item_code,strength from hp_pharmacy where description = ? AND patient_no = ? AND paid= true and collected = false AND date_prescribed::date >= current_date - 2");
            java.sql.PreparedStatement pstmtxx = connectDB.prepareStatement("select sum(qty) from stock_balance_qty where item_code = ? and department ilike ? AND dates::date <=  ?");
//0794260
            pstmt.setString(1, receiptTxt.getText());
            java.sql.ResultSet rs = pstmt.executeQuery();
            while (rs.next()) {
                patientNumberTxt.setText(rs.getObject(2).toString());
                patientNameTxt.setText(rs.getObject(1).toString());

            }
            rs.close();
            pstmt.close();
            pstmtx.setString(1, receiptTxt.getText());
            // pstmtx.setString(2, gLCodeTxt.getText());

            System.out.println("select distinct ac.description,ac.quantity,ROUND(ac.debit),ROUND(ac.debit/ac.quantity),ac.activity_code,hp.prescription_no"
                    + " from ac_cash_collection ac, hp_pharmacy hp "
                    + "where ac.description = hp.description AND ac.patient_no = hp.patient_no AND hp.collected = false AND hp.paid = true "
                    + "AND ac.receipt_no = '" + receiptTxt.getText() + "' AND ac.receipt_no=hp.visit_id AND ac.credit = 0 "
                    + "AND ac.activity_code = '" + gLCodeTxt.getText() + "' ");

            java.sql.ResultSet rsx = pstmtx.executeQuery();
            int control = 0;
            while (rsx.next()) {
                pstmtx1.setString(1, rsx.getString(1));
                pstmtx1.setString(2, patientNumberTxt.getText());
                mainItemstbl.getModel().setValueAt(rsx.getObject(1), i, 0);
                mainItemstbl.getModel().setValueAt(rsx.getObject(2), i, 1);
                mainItemstbl.getModel().setValueAt(rsx.getObject(3), i, 5);
                mainItemstbl.getModel().setValueAt(rsx.getObject(4), i, 3);
                mainItemstbl.getModel().setValueAt(rsx.getObject(5), i, 6);
                mainItemstbl.getModel().setValueAt(rsx.getObject(6), i, 9);
                control++;

                java.sql.ResultSet rsx1 = pstmtx1.executeQuery();
                while (rsx1.next()) {
                    pstmtxx.setString(1, rsx1.getString(1));
                    pstmtxx.setString(2, pharmacyCmbx.getSelectedItem().toString());
                    pstmtxx.setDate(3, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dispenseDatePicker.getDate()));
                    mainItemstbl.getModel().setValueAt(rsx1.getObject(1), i, 7);
                    mainItemstbl.getModel().setValueAt(rsx1.getObject(2), i, 8);
                    java.sql.ResultSet rsxx = pstmtxx.executeQuery();

                    //java.sql.ResultSet rs = pstmt.executeQuery("select sum(qty) from stock_balance_qty where description ilike '"+jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(),0)+"' and department ilike '"+jTextField42.getText()+"' AND dates <= '"+datePicker1.getDate()+"'");
                    //java.sql.ResultSet rs = pstmt.executeQuery("select sum(receiving-issuing) As qty from  st_sub_stores where item = '"+jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(),0)+"' and department like '"+jTextField42.getText()+"' AND dates <= '"+datePicker1.getDate()+"'");
                    while (rsxx.next()) {
                        Double Qty = 0.00;
                        Qty = rsxx.getDouble(1);
                        //  jTable1.setValueAt(Qty,jTable1.getSelectedRow(),2);
                        if (!com.afrisoftech.lib.StockControlIndicators.canDispenseNegativeStock(connectDB)) {
                            if (Qty >= Double.parseDouble(mainItemstbl.getValueAt(i, 1).toString())) {

                                mainItemstbl.setValueAt(Qty, i, 2);
                            } else {
                                javax.swing.JOptionPane.showMessageDialog(this, "You cannot dispense more than what is available. \nPlease adjust the quantity to match available quantities.\n"
                                        + "You have only [" + Qty + "] remaining in the store");
                                mainItemstbl.setValueAt(Qty, i, 2);
                                mainItemstbl.setValueAt(null, i, 1);
                            }
                        } else {
                            mainItemstbl.setValueAt(Qty, i, 2);
                        }
                    }

                }
                i++;

            }

            if (control > 0) {
                for (int check = 0; check < control; check++) {
                    if (mainItemstbl.getValueAt(check, 0).toString().equalsIgnoreCase("DISPENSING FEE")) {

                        mainItemstbl.setValueAt(1, check, 2);

                    }

                    //0794261    
                }

            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "This prescription has already been dispensed.");
            }
        } catch (java.sql.SQLException sqlex) {
            sqlex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlex.getMessage());
            System.out.println(sqlex.getMessage());
        }

        jSearchDialog4.dispose();  // Add your handling code here:
    }//GEN-LAST:event_jSearchTable4MouseClicked

    private void jTextField115CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField115CaretUpdate
        if (jTextField115.getCaretPosition() > 6) {
            //jSearchTable4.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select chq_no FROM pb_documents_register WHERE chq_no ILIKE '%" + jTextField115.getText() + "%' and used = 'false' and doc_name ilike '%pha%' order by chq_no"));
            //jSearchTable4.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select DISTINCT receipt_no FROM ac_cash_collection WHERE receipt_no ILIKE '" + jTextField115.getText() + "%' AND receipt_time::date > (CURRENT_DATE-2)"));
            jSearchTable4.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select DISTINCT receipt_no, date as receipt_date, dealer as client_name FROM ac_cash_collection WHERE receipt_no = '" + jTextField115.getText() + "' AND receipt_time::date > (CURRENT_DATE-30)"));
            jSearchScrollPane4.setViewportView(jSearchTable4);
            System.out.println("Cannot sort out");

        }  // Add your handling code here:
    }//GEN-LAST:event_jTextField115CaretUpdate

    private void jButton93ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton93ActionPerformed
        this.jSearchDialog4.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton93ActionPerformed
    private void searchButtonClicked4() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.receiptTxt.getLocationOnScreen();

        jSearchDialog4.setSize(600, 200);

        jSearchDialog4.setLocation(point);

        jSearchDialog4.setVisible(true);

    }
    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        javax.swing.JInternalFrame other = new ServiceAccSlipIntfr(connectDB, pConnDB);
        this.getParent().add(other, javax.swing.JLayeredPane.DEFAULT_LAYER);
        try {
            other.setSelected(true);
        } catch (java.beans.PropertyVetoException pvt) {
        }
        other.setVisible(true);            // Add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jButton32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton32ActionPerformed

        super.setTitle(dispenseDatePicker.getDate() + "                  " + pharmacyCmbx.getSelectedItem() + "        " + com.afrisoftech.lib.UserName.getLoginName(connectDB));
        patientNameTxt.setText("");
        jTextField32.setText("0.00");
        dispenseDiscountPaercentTxt.setText("0.00");
        dispenseDiscountAmountTxt.setText("0.00");
        dispenseBillTotalTxt.setText("0.00");
        dispenseNetBillTxt.setText("0.00");
        jTextField82.setText("0.00");
        jTextField21.setText("0.00");
        patientCategoryTxt.setText("");
        patientNumberTxt.setText("");
        jTextField19.setText("");
        jTextField20.setText("");

        jTextField16.setText("");
        jTextField14.setText("");
        jTextField17.setText("");
        jTextField18.setText("");
        jTextField5.setText("");
        visitID = null;

        for (int k = 0; k < mainItemstbl.getRowCount(); k++) {
            for (int r = 0; r < mainItemstbl.getColumnCount(); r++) {
                mainItemstbl.getModel().setValueAt(null, k, r);
            }
        }
        dispenseDatePicker.setDate(com.afrisoftech.lib.SQLDateFormat.getSQLDate(com.afrisoftech.lib.UserName.getServerDate(connectDB)));
        System.out.println("[" + com.afrisoftech.lib.UserName.getServerDate(connectDB) + "] [" + com.afrisoftech.lib.UserName.getLoginName(connectDB) + "]");
        System.out.println(com.afrisoftech.lib.UserName.getAllocatedStore(connectDB, storeType));
        //  jTextField3.setText("0.00");// Add your handling code here:
    }//GEN-LAST:event_jButton32ActionPerformed

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        this.setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_closeBtnActionPerformed

    private void jButton63ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton63ActionPerformed

        int rows2Delete = mainItemstbl.getSelectedRowCount();

        int[] selectedRows = mainItemstbl.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) mainItemstbl.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) mainItemstbl.getModel();

                defTableModel.removeRow(mainItemstbl.getSelectedRow());
            }
        }

        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(mainItemstbl, 5);
        //double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable11, 3);
        double roundedsum = (int) Math.round(totalSum / 5.0) * 5;
        dispenseBillTotalTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(roundedsum));
        //    jTextField15.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
        dispenseNetBillTxt.setText(java.lang.String.valueOf(roundedsum));
        // Add your handling code here:
    }//GEN-LAST:event_jButton63ActionPerformed
    private Boolean checkTotals() {
        //returns false when total is not correct
        Boolean check = true;
        for (int i = 0; i < mainItemstbl.getRowCount(); i++) {
            if (mainItemstbl.getValueAt(i, 0) != null) {
                double qty = Double.valueOf(mainItemstbl.getValueAt(i, 1).toString());
                double price = Double.valueOf(mainItemstbl.getValueAt(i, 3).toString());
                double total = Double.valueOf(mainItemstbl.getValueAt(i, 5).toString());
                if (total != (qty * price)) {
                    check = false;
                }
            }
        }
        return check;
    }
    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed

        if (patientNumberTxt.getText().length() > 0 && patientNameTxt.getText().length() > 0) {
            //if (Double.parseDouble(jTextField15.getText().replace(",", "")) > 0.00) {
            if (checkTotals() == true) {
                java.util.Date periodFrom = null;
                java.util.Date periodTo = null;
                java.util.Date toDaysDate = null;
                boolean smartcard = false;
                boolean prepaid = true;

                // Check condition on balance for prepaid debtors
//         double totalSumm = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable13, 5);
//        if (com.afrisoftech.lib.CheckPrepaySchemes.checkPrepayStatus(connectDB, schemeAccountNumberTxt.getText())) {
//            if (totalSumm > 0) {
//                if (totalSumm > com.afrisoftech.lib.CheckPrepaySchemes.checkLimitExceeded(connectDB, schemeAccountNumberTxt.getText())) {
//                    javax.swing.JOptionPane.showMessageDialog(this, "THE BILL IS GREATER THAN THE SCHEME PREPAID BALANCE! THE SCHEME ADMINISTRATOR MUST TOP UP THE BALANCE.", "ALERT MESSAGE!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
//                    jButton12.setEnabled(false);
//                    jButton121.setEnabled(false);
//                    jButton122.setEnabled(false);
//                    jTable13.setValueAt(null, jTable13.getSelectedRow(), 1);
//                    jTable13.setValueAt(null, jTable13.getSelectedRow(), 5);
//                    prepaid=false;
//                    // jButton7.setEnabled(false);
//                } else {
//                    prepaid=true;
//                    jButton12.setEnabled(true);
//                    jButton121.setEnabled(true);
//                    jButton122.setEnabled(true);
//                }
//            }
//        }
                ////
                if (prepaid == true) {
                    java.sql.Savepoint registerSavePoint = null;
                    try {
                        try {
                            connectDB.setAutoCommit(false);
                            registerSavePoint = connectDB.setSavepoint("registration");
                        } catch (java.sql.SQLException ex) {
                            ex.printStackTrace();
                        }

                        java.sql.Statement stmtf = connectDB.createStatement();
                        java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + dispenseDatePicker.getDate() + "' BETWEEN period_from AND period_to");
                        while (rsetf.next()) {
                            periodFrom = rsetf.getDate(1);
                            periodTo = rsetf.getDate(2);
                        }

                        if (dispenseDatePicker.getDate().before(periodFrom) || dispenseDatePicker.getDate().after(periodTo)) {
                            javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                        } else {

                            // jTable13.setEditingRow(-1);
                            if (mainItemstbl.isEditing()) {
                                mainItemstbl.getCellEditor().stopCellEditing();
                            }
                            // try {
                            double amount1 = 0.00;
                            double percentage = 0.00;
                            double TotalPrice = 0.00;
                            double total = 0.00;
                            double presc = 0.00;
                            double Total = 0.00;

                            java.util.Calendar calendar = java.util.Calendar.getInstance();

                            long dateNow = calendar.getTimeInMillis();

                            java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

                            System.out.println(datenowSql1.toString());

                            java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

                            System.out.println(datenowSql.toString());

                            String billNo = null;
                            transNo = null;
                            String payMode = null;
                            String patientAcc = null;
                            String cardNo = null;
                            String AccDesc = null;
                            String scheme = null;
                            String cardName = null;
                            String isurer = null;
                            java.sql.Date expDate = null;
                            String staffNo = null;
                            String BillNo = null;
                            String glAcc = null;
                            // String BillNo = null;
                            String code = null;
                            String user = null;
                            String prescNo = null;
                            java.util.Date admDate = null;
                            String visitid = jTextField5.getText().toString();
                            String costofSaleCode = null;
                            String stockCode = null;
                            String costofSale = null;
                            String stock = null;
                            String billingDept = null;
                            String discode = null;
                            String discglAcc = null;
                            String invoiceNo = null;
                            String strength = null;
                            double discounte = java.lang.Double.parseDouble(dispenseDiscountAmountTxt.getText());

                            double sellPrice = 0.00;
                            int exitOption = javax.swing.JOptionPane.showConfirmDialog(new java.awt.Frame(), "Do you really want to Save?", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

                            if (exitOption == javax.swing.JOptionPane.YES_OPTION) {

                                // presc = java.lang.Double.parseDouble(jTextField8.getText());
                                if (schemeptsChkbx.isSelected()) {
                                    chbox = "OP";
                                } else {
                                    if (walkinPtchbx.isSelected()) {
                                        chbox = "WI";
                                    } else {
                                        if (inpatientChkbx.isSelected()) {
                                            chbox = "IP";
                                        }
                                    }
                                }

                                //  try {
                                // connectDB.setAutoCommit(false);
                                if (schemeptsChkbx.isSelected()) {
                                    java.sql.Statement stmt1cz3 = connectDB.createStatement();
                                    java.sql.ResultSet rset1cz3 = stmt1cz3.executeQuery("SELECT account_no,payer_name,usesmartcard FROM ac_schemes WHERE account_no  ILIKE '" + jTextField17.getText() + "'");
                                    while (rset1cz3.next()) {
                                        smartcard = rset1cz3.getBoolean(3);
                                    }
                                    if (smartcard) {
                                        biz.systempartners.claims.PharmacyClaim claimInstance = new biz.systempartners.claims.PharmacyClaim();

                                        claimInstance.createXMLDoc(mainItemstbl, connectDB);
                                    }
                                } else {
                                    //this for inpatient;
                                }
                                java.sql.Statement stm121x = connectDB.createStatement();

                                java.sql.ResultSet rse121x = stm121x.executeQuery("select direct_rev from pb_patient_names");
                                while (rse121x.next()) {

                                    DirectRev = rse121x.getBoolean(1);

                                }
                                java.sql.Statement ps11Y = connectDB.createStatement();
                                java.sql.ResultSet rst11Y = ps11Y.executeQuery("select current_user");
                                while (rst11Y.next()) {
                                    user = rst11Y.getObject(1).toString();
                                }
                                java.sql.Statement stm122x = connectDB.createStatement();
                                java.sql.ResultSet rse122x = stm122x.executeQuery("select code,activity from pb_activity where activity_category ='IEDS'");
                                while (rse122x.next()) {

                                    discode = rse122x.getObject(1).toString();
                                    discglAcc = rse122x.getObject(2).toString();
                                }
                                java.sql.Statement psq = connectDB.createStatement();
                                java.sql.ResultSet rstq = psq.executeQuery("select nextval('prescription_no')");
                                while (rstq.next()) {
                                    rstq.getObject(1).toString();

                                    prescNo = rstq.getObject(1).toString();

                                }
                                System.out.println(prescNo);
                                java.sql.Statement stmtz = connectDB.createStatement();

                                if (inpatientChkbx.isSelected()) {
                                    // This is code for dispensing to OUT-Patients
                                    System.out.println("This is the visit ID " + visitid);
                                    // if (jComboBox1.getSelectedItem().toString().equals("Scheme")){
                                    java.sql.Statement stm1 = connectDB.createStatement();
                                    java.sql.ResultSet rse1 = stm1.executeQuery("select pay_mode,account_no,description,payer,payer,expiry_date,account_no,adm_date from hp_inpatient_register where patient_no ='" + patientNumberTxt.getText() + "'");
                                    while (rse1.next()) {

                                        //                payMode = dbObject.getDBObject(rse1.getObject(1), "-");
                                        cardNo = dbObject.getDBObject(rse1.getObject(2), "-");
                                        scheme = dbObject.getDBObject(rse1.getObject(3), "-");
                                        cardName = dbObject.getDBObject(rse1.getObject(4), "-");
                                        isurer = dbObject.getDBObject(rse1.getObject(5), "-");
                                        expDate = rse1.getDate(6);
                                        staffNo = dbObject.getDBObject(rse1.getObject(7), "-");
                                        admDate = rse1.getDate(8);
                                    }

                                    System.out.println(admDate);
                                    // if (exp.before(date)){
                                    if (dispenseDatePicker.getDate().before(admDate)) {
                                        javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "Admission date is : " + admDate + " CHECK billing date", "Date Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                                    } else {
                                        java.sql.Statement stm126 = connectDB.createStatement();
                                        java.sql.ResultSet rse126 = stm126.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                                        while (rse126.next()) {

                                            patientAcc = rse126.getObject(1).toString();
                                            AccDesc = rse126.getObject(2).toString();
                                        }
                                        System.out.println(AccDesc);
                                        java.sql.Statement ps = connectDB.createStatement();
                                        java.sql.ResultSet rst = ps.executeQuery("select nextval('transaction_no_seq')");
                                        while (rst.next()) {

                                            transNo = rst.getObject(1).toString();
                                        }
                                        System.out.println(transNo);
                                        java.sql.Statement ps11 = connectDB.createStatement();
                                        java.sql.ResultSet rst11 = ps11.executeQuery("select nextval('billing_no_seq'),current_user");
                                        while (rst11.next()) {
                                            rst11.getObject(1).toString();

                                            billNo = rst11.getObject(1).toString();
                                            //    user = rst11.getObject(2).toString();
                                        }
                                        System.out.println(user);
                                        java.sql.Statement stm122 = connectDB.createStatement();
                                        java.sql.ResultSet rse122 = stm122.executeQuery("select code,activity from pb_activity where activity_category ='IP'");
                                        while (rse122.next()) {

                                            code = rse122.getObject(1).toString();
                                            //glAcc = rse122.getObject(2).toString();
                                        }

                                        glAcc = pharmacyCmbx.getSelectedItem().toString();

                                        for (int i = 0; i < mainItemstbl.getRowCount(); i++) {

//                                            Double Quant= mainItemstbl.getModel().getValueAt(i, 1);
//                                            Double price_=mainItemstbl.getModel().getValueAt(i, 3);
//                                            Double calc_= Quant*price_;
                                            //Double total_=mainItemstbl.getModel().getValueAt(i, 5);
                                            if (mainItemstbl.getModel().getValueAt(i, 0) != null && mainItemstbl.getModel().getValueAt(i, 5) != null) {
                                                if (Double.parseDouble(mainItemstbl.getModel().getValueAt(i, 5).toString()) > 0) {
                                                    // if(Double.parseDouble(mainItemstbl.getModel().getValueAt(i, 5).toString()) == (Double.parseDouble(mainItemstbl.getModel().getValueAt(i, 1).toString()) + Double.parseDouble(mainItemstbl.getModel().getValueAt(i, 3).toString()))) {
                                                    String drug = null;

                                                    if (mainItemstbl.getValueAt(i, 8).toString().equalsIgnoreCase("0") || mainItemstbl.getValueAt(i, 8).toString().equalsIgnoreCase("-")) {
                                                        drug = mainItemstbl.getValueAt(i, 0).toString();
                                                    } else {
                                                        drug = mainItemstbl.getValueAt(i, 0).toString();// + " " + jTable13.getValueAt(i, 8).toString();
                                                    }
                                                    java.sql.Statement pstz = connectDB.createStatement();
                                                    java.sql.ResultSet rsz = pstz.executeQuery("SELECT strength FROM st_stock_prices WHERE product_id = '" + mainItemstbl.getValueAt(i, 7).toString() + "'");
                                                    while (rsz.next()) {
                                                        strength = rsz.getObject(1).toString();
                                                    }

                                                    java.sql.Statement pst21c = connectDB.createStatement();
                                                    java.sql.ResultSet rs11c = pst21c.executeQuery("select cost_of_sale,stock_code from pb_departments where income_account = '" + mainItemstbl.getValueAt(i, 6).toString() + "'");
                                                    while (rs11c.next()) {
                                                        costofSaleCode = rs11c.getObject(1).toString();
                                                        stockCode = rs11c.getObject(2).toString();
                                                    }

                                                    java.sql.Statement pst21c1 = connectDB.createStatement();
                                                    java.sql.ResultSet rs11c1 = pst21c1.executeQuery("SELECT activity FROM pb_activity WHERE code = '" + mainItemstbl.getValueAt(i, 6).toString() + "'");
                                                    while (rs11c1.next()) {
                                                        billingDept = rs11c1.getObject(1).toString();

                                                    }
                                                    java.sql.Statement pst211c = connectDB.createStatement();
                                                    java.sql.ResultSet rs111c = pst211c.executeQuery("select activity from pb_activity where code = '" + costofSaleCode + "'");
                                                    while (rs111c.next()) {
                                                        costofSale = rs111c.getObject(1).toString();

                                                    }
                                                    java.sql.Statement pst2111c = connectDB.createStatement();
                                                    java.sql.ResultSet rs1111c = pst2111c.executeQuery("select activity from pb_activity where code = '" + stockCode + "'");
                                                    while (rs1111c.next()) {
                                                        stock = rs1111c.getObject(1).toString();
                                                    }

                                                    presc = java.lang.Double.parseDouble(jTextField82.getText());

                                                    Total = java.lang.Double.parseDouble(jTextField32.getText());
                                                    if (Total > presc) {
                                                        amount1 = java.lang.Double.parseDouble(mainItemstbl.getValueAt(i, 5).toString());

                                                        percentage = (amount1 / Total) * 100;

                                                        TotalPrice = ((percentage / 100) * presc) + amount1;
                                                    } else {
                                                        amount1 = java.lang.Double.parseDouble(mainItemstbl.getValueAt(i, 5).toString());

                                                        //  percentage = (amount1/Total)*100;
                                                        TotalPrice = amount1;
                                                    }

                                                    java.sql.Statement pstB = connectDB.createStatement();
                                                    java.sql.ResultSet rsB = pstB.executeQuery("select transfer_price,units from st_stock_prices where product_id = '" + mainItemstbl.getModel().getValueAt(i, 7) + "'");

                                                    while (rsB.next()) {
                                                        price = rsB.getDouble(1);
                                                        glAcc2 = rsB.getObject(2).toString();
                                                        // units = rsB.getString(2);
                                                        qty = java.lang.Double.parseDouble(mainItemstbl.getValueAt(i, 1).toString());
                                                        sellPrice = java.lang.Double.parseDouble(mainItemstbl.getValueAt(i, 3).toString());
                                                        amount = price * qty;
                                                    }

                                                    System.out.println(price);

                                                    // if (insertHpPharmacy == Boolean.FALSE) {
                                                    // Recording the credit sale for the inventory items in the patient control account in the hp_patient_card (debit patient account)
                                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                                    pstmt.setString(1, patientNumberTxt.getText());
                                                    pstmt.setObject(2, drug);
                                                    pstmt.setString(3, patientCategoryTxt.getText());
                                                    pstmt.setString(4, paymentModeCmbx.getSelectedItem().toString());
                                                    pstmt.setString(5, transNo);
                                                    pstmt.setString(7, scheme);
                                                    pstmt.setString(6, cardNo);
                                                    pstmt.setString(8, cardName);
                                                    pstmt.setString(9, isurer);
                                                    pstmt.setDate(10, expDate);
                                                    pstmt.setObject(11, doctorPrescribingCmbx.getSelectedItem().toString());
                                                    // pstmt.setObject(12,jTable13.getValueAt(i,5).toString());
                                                    pstmt.setDouble(12, TotalPrice);
                                                    pstmt.setDouble(13, 0.00);
                                                    pstmt.setDate(14, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                                    pstmt.setObject(15, patientAcc);
                                                    pstmt.setObject(16, billingDept);
                                                    pstmt.setDouble(17, qty);
                                                    pstmt.setObject(18, staffNo);
                                                    pstmt.setBoolean(19, false);
                                                    pstmt.setString(20, "Billing");
                                                    pstmt.setBoolean(21, false);
                                                    pstmt.setString(22, AccDesc);
                                                    pstmt.setString(23, visitid);
                                                    pstmt.setString(24, user);
                                                    pstmt.setString(25, prescNo);
                                                    pstmt.setString(26, "IP");
                                                    pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                                    pstmt.setString(28, visitid);
                                                    pstmt.executeUpdate();
                                              //  }

                                                    // Accounting for the sales of inventory on the sales ledger in ac_ledger (credit income account)
                                                    java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
                                                    pstmt2.setObject(1, mainItemstbl.getModel().getValueAt(i, 6));
                                                    pstmt2.setString(2, glAcc);
                                                    pstmt2.setString(3, patientNumberTxt.getText());
                                                    pstmt2.setString(4, patientNameTxt.getText());
                                                    pstmt2.setString(5, "");
                                                    pstmt2.setString(6, cardNo);
                                                    pstmt2.setString(7, cardName);
                                                    pstmt2.setString(8, "IP");
                                                    pstmt2.setString(9, isurer);
                                                    pstmt2.setString(10, paymentModeCmbx.getSelectedItem().toString());
                                                    pstmt2.setString(11, "");
                                                    pstmt2.setString(12, "");
                                                    pstmt2.setString(13, "");
                                                    pstmt2.setString(14, drug);
                                                    pstmt2.setString(15, "Revenue");
                                                    pstmt2.setDouble(16, 0.00);
                                                    pstmt2.setDouble(17, TotalPrice);
                                                    pstmt2.setDate(18, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //
                                                    pstmt2.setString(19, transNo);
                                                    pstmt2.setBoolean(20, false);
                                                    pstmt2.setBoolean(21, false);
                                                    pstmt2.setBoolean(22, false);
                                                    pstmt2.setString(23, user);
                                                    pstmt2.executeUpdate();

                                                    // Crediting the Inventory account in the st_stock_cardex (credit inventory/stock account)
                                                    if (!mainItemstbl.getValueAt(i, 0).toString().equalsIgnoreCase("DISPENSING FEE")) {
                                                        java.sql.PreparedStatement pstmt1a = connectDB.prepareStatement("INSERT INTO st_stock_cardex values(?,? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                                        pstmt1a.setString(1, null);
                                                        pstmt1a.setObject(3, drug);
                                                        pstmt1a.setObject(2, pharmacyCmbx.getSelectedItem().toString());
                                                        pstmt1a.setDate(4, null);
                                                        pstmt1a.setDouble(5, amount);
                                                        pstmt1a.setDouble(6, 0.00);
                                                        pstmt1a.setObject(7, glAcc2);
                                                        pstmt1a.setObject(8, "");
                                                        pstmt1a.setString(9, null);
                                                        pstmt1a.setString(10, null);
                                                        pstmt1a.setDouble(11, 0.00);
                                                        pstmt1a.setDouble(12, 0.00);
                                                        pstmt1a.setDouble(13, 0.00);
                                                        if (patientNameTxt.getText().equals("")) {
                                                            javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "Enter patient", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                                        } else {
                                                            pstmt1a.setString(14, patientNameTxt.getText());
                                                        }

                                                        pstmt1a.setString(15, com.afrisoftech.lib.UserName.getLoginName(connectDB));

                                                        pstmt1a.setString(16, "");
                                                        pstmt1a.setString(17, null);
                                                        pstmt1a.setDate(18, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //
                                                        pstmt1a.setObject(19, pharmacyCmbx.getSelectedItem().toString());
                                                        pstmt1a.setString(20, "Issuing");
                                                        pstmt1a.setDouble(21, 0.00);
                                                        pstmt1a.setString(23, stockCode);
                                                        pstmt1a.setDouble(22, 0.00);
                                                        pstmt1a.setString(24, "");
                                                        pstmt1a.setObject(25, pharmacyCmbx.getSelectedItem().toString());
                                                        pstmt1a.setString(26, transNo);
                                                        pstmt1a.setDouble(27, java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 1).toString()));
                                                        pstmt1a.setString(28, user);
                                                        pstmt1a.setBoolean(29, false);
                                                        pstmt1a.setDouble(30, 0.00);
                                                        pstmt1a.setDate(31, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //
                                                        pstmt1a.setString(32, mainItemstbl.getValueAt(i, 7).toString());
                                                        pstmt1a.setString(33, mainItemstbl.getValueAt(i, 8).toString());

                                                        pstmt1a.executeUpdate();

                                                        // Accounting for the cos of sales for the inventory items in expenses ledger (debit cost of sale account)
                                                        java.sql.PreparedStatement pstmt2a = connectDB.prepareStatement("INSERT INTO ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                                        pstmt2a.setObject(1, costofSaleCode);
                                                        pstmt2a.setObject(2, costofSale);
                                                        pstmt2a.setString(3, patientNumberTxt.getText());
                                                        pstmt2a.setString(4, patientNameTxt.getText());
                                                        pstmt2a.setString(5, "");
                                                        pstmt2a.setString(6, "");
                                                        pstmt2a.setString(7, "");
                                                        pstmt2a.setString(8, "");
                                                        pstmt2a.setString(9, "");
                                                        pstmt2a.setString(10, "");
                                                        pstmt2a.setString(11, "");
                                                        pstmt2a.setString(12, "");
                                                        pstmt2a.setString(13, "");
                                                        pstmt2a.setString(14, drug);
                                                        pstmt2a.setString(15, "Issuing");
                                                        pstmt2a.setDouble(16, amount);
                                                        pstmt2a.setDouble(17, 0.00);
                                                        pstmt2a.setDate(18, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //
                                                        pstmt2a.setString(19, transNo);
                                                        pstmt2a.setBoolean(20, false);
                                                        pstmt2a.setBoolean(21, false);
                                                        pstmt2a.setBoolean(22, false);
                                                        pstmt2a.setString(23, user);
                                                        pstmt2a.executeUpdate();
                                                    }
                                                    // Adjusting the stores inventory level to account for the items leaving the stores (adjust stock item downwards for the sold units)
                                                    if (!mainItemstbl.getValueAt(i, 0).toString().equalsIgnoreCase("DISPENSING FEE")) {
                                                        java.sql.PreparedStatement pstmt33 = connectDB.prepareStatement("INSERT INTO st_sub_stores VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                                        pstmt33.setObject(1, pharmacyCmbx.getSelectedItem().toString());
                                                        pstmt33.setObject(2, mainItemstbl.getValueAt(i, 0).toString());
                                                        pstmt33.setDouble(4, java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 1).toString()));
                                                        pstmt33.setDouble(3, 0);
                                                        pstmt33.setDouble(7, 0);
                                                        pstmt33.setDouble(5, java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 3).toString()));
                                                        pstmt33.setDouble(6, TotalPrice);
                                                        pstmt33.setDate(10, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //
                                                        pstmt33.setString(8, transNo);
                                                        pstmt33.setObject(9, doctorPrescribingCmbx.getSelectedItem().toString());
                                                        pstmt33.setObject(13, billingDept);
                                                        pstmt33.setString(11, user);
                                                        pstmt33.setString(12, units);
                                                        pstmt33.setString(14, patientNumberTxt.getText() + " " + patientNameTxt.getText());
                                                        pstmt33.setDouble(15, amount / java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 1).toString()));
                                                        pstmt33.setObject(16, mainItemstbl.getValueAt(i, 7).toString());
                                                        pstmt33.setString(17, strength);
                                                        pstmt33.executeUpdate();

                                                    }

                                                    if (inpatientChkbx.isSelected() == true) {

                                                        // Update the request from billing units that the request has been served
                                                        java.sql.PreparedStatement pstmt311 = connectDB.prepareStatement("UPDATE hp_pharmacy SET collected = true WHERE visit_id='" + visitid + "' and paid = true and prescription_no='" + mainItemstbl.getModel().getValueAt(i, 9) + "' and item_code = '" + mainItemstbl.getModel().getValueAt(i, 7) + "' AND patient_no = '" + patientNumberTxt.getText() + "' AND gl_code = '" + mainItemstbl.getModel().getValueAt(i, 6) + "'");
                                                        pstmt311.executeUpdate();
                                                    } else {
                                                        java.sql.PreparedStatement pstmt311 = connectDB.prepareStatement("UPDATE hp_pharmacy SET collected = true WHERE paid = true and prescription_no='" + mainItemstbl.getModel().getValueAt(i, 9) + "'  "
                                                                + "and manual_pr='" + receiptTxt.getText() + "' and item_code = '" + mainItemstbl.getModel().getValueAt(i, 7) + "' AND patient_no = '" + patientNumberTxt.getText() + "' AND gl_code = '" + mainItemstbl.getModel().getValueAt(i, 6) + "'");
                                                        pstmt311.executeUpdate();
                                                    }
                                                    System.out.println("Collected checked");
                                                } else {
                                                    javax.swing.JOptionPane.showMessageDialog(this, "You cannot issue zero stocks!");
                                                }
                                            }
                                        }
                                        javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "Insert Done Successfully " + transNo, "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                                        // If there is any discount or waiver on the norminal rate of sale for the inventory item (credit patient account in hp_patient_card)
                                        if (discounte > 0) {
                                            java.sql.PreparedStatement pstmtu = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                            pstmtu.setString(1, patientNumberTxt.getText());
                                            pstmtu.setObject(2, "Discount");
                                            pstmtu.setString(3, patientCategoryTxt.getText());
                                            pstmtu.setString(4, paymentModeCmbx.getSelectedItem().toString());
                                            pstmtu.setString(5, transNo);
                                            pstmtu.setString(7, scheme);
                                            pstmtu.setString(6, cardNo);
                                            pstmtu.setString(8, cardName);
                                            pstmtu.setString(9, isurer);
                                            pstmtu.setDate(10, expDate);
                                            pstmtu.setObject(11, doctorPrescribingCmbx.getSelectedItem().toString());
                                            pstmtu.setDouble(12, 0.00);
                                            pstmtu.setDouble(13, java.lang.Double.valueOf(dispenseDiscountAmountTxt.getText()));
                                            pstmtu.setDate(14, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //
                                            pstmtu.setObject(15, patientAcc);
                                            pstmtu.setObject(16, pharmacyCmbx.getSelectedItem().toString());
                                            pstmtu.setDouble(17, 1);
                                            pstmtu.setObject(18, staffNo);
                                            pstmtu.setBoolean(19, false);
                                            pstmtu.setString(20, "Billing");
                                            pstmtu.setBoolean(21, false);
                                            pstmtu.setString(22, AccDesc);
                                            pstmtu.setString(23, visitid);
                                            pstmtu.setString(24, user);
                                            pstmtu.setString(25, prescNo);
                                            pstmtu.setString(26, "IP");
                                            pstmtu.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                            pstmtu.setString(28, visitid);
                                            pstmtu.executeUpdate();

                                            // Reduce the sale by discount/waiver amount on sales ledger (Debit sales account in ac_ledger)
                                            java.sql.PreparedStatement pstmt2v = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
                                            pstmt2v.setString(1, discode);
                                            pstmt2v.setString(2, discglAcc);
                                            pstmt2v.setString(3, patientNumberTxt.getText());
                                            pstmt2v.setString(4, patientNameTxt.getText());
                                            pstmt2v.setString(5, "");
                                            pstmt2v.setString(6, cardNo);
                                            pstmt2v.setString(7, cardName);
                                            pstmt2v.setString(8, "IP");
                                            pstmt2v.setString(9, isurer);
                                            pstmt2v.setString(10, paymentModeCmbx.getSelectedItem().toString());
                                            pstmt2v.setString(11, "");
                                            pstmt2v.setString(12, "");
                                            pstmt2v.setString(13, "");
                                            pstmt2v.setString(14, "Discount");
                                            pstmt2v.setString(15, "Revenue");
                                            pstmt2v.setDouble(16, java.lang.Double.valueOf(dispenseDiscountAmountTxt.getText().toString()));
                                            pstmt2v.setDouble(17, 0.00);
                                            pstmt2v.setDate(18, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //
                                            pstmt2v.setString(19, transNo);
                                            pstmt2v.setBoolean(20, false);
                                            pstmt2v.setBoolean(21, false);
                                            pstmt2v.setBoolean(22, false);
                                            pstmt2v.setString(23, user);
                                            pstmt2v.executeUpdate();

                                        }

                                    }
                                } else {
                                    /// dealing with out-patients

                                    if (schemeptsChkbx.isSelected()) {

                                        if (paymentModeCmbx.getSelectedItem().toString().equals("Scheme")) {
                                            java.sql.Statement stm1q = connectDB.createStatement();
                                            java.sql.ResultSet rse1 = stm1q.executeQuery("select pay_mode,account_no,description,payer,payer,expiry_date,account_no from hp_patient_register where patient_no ='" + patientNumberTxt.getText() + "'");

                                            while (rse1.next()) {

                                                payMode = dbObject.getDBObject(rse1.getObject(1), "-");
                                                cardNo = dbObject.getDBObject(rse1.getObject(2), "-");
                                                scheme = dbObject.getDBObject(rse1.getObject(3), "-");
                                                cardName = dbObject.getDBObject(rse1.getObject(4), "-");
                                                isurer = dbObject.getDBObject(rse1.getObject(5), "-");
                                                expDate = rse1.getDate(6);
                                                staffNo = dbObject.getDBObject(rse1.getObject(7), "-");
                                            }
                                        }
                                    } else {
                                    }
                                    System.out.println(staffNo);

                                    java.sql.Statement stm126 = connectDB.createStatement();
                                    java.sql.ResultSet rse126 = stm126.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                                    while (rse126.next()) {

                                        patientAcc = rse126.getObject(1).toString();
                                        AccDesc = rse126.getObject(2).toString();
                                    }
                                    System.out.println(AccDesc);
                                    //  connectDB.setAutoCommit(false);
                                    java.sql.Statement ps = connectDB.createStatement();
                                    java.sql.ResultSet rst = ps.executeQuery("select nextval('transaction_no_seq')");
                                    while (rst.next()) {
                                        rst.getObject(1).toString();

                                        transNo = rst.getObject(1).toString();
                                    }
                                    /*
                                     * if (this.jCheckBox2.isSelected()) {
                                     * jTextField92.setText("WK" + prescNo); }
                                     */
                                    if (paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {
                                        if (walkinPtchbx.isSelected()) {
                                            java.sql.Statement pss1 = connectDB.createStatement();
                                            java.sql.ResultSet rss1 = pss1.executeQuery("select 'O'||(nextval('pinvoice_no_seq'))");
                                            while (rss1.next()) {
                                                invoiceNo = rss1.getObject(1).toString();
                                            }
                                        }

                                    }
                                    System.out.println(transNo);

                                    System.out.println(user);
                                    java.sql.Statement stm122 = connectDB.createStatement();
                                    java.sql.ResultSet rse122 = stm122.executeQuery("select code,activity from pb_activity where activity_category ='IP'");
                                    while (rse122.next()) {

                                        code = rse122.getObject(1).toString();
                                        glAcc = rse122.getObject(2).toString();
                                    }
                                    System.out.println(glAcc);

                                    for (int i = 0; i < mainItemstbl.getRowCount(); i++) {
                                        if (mainItemstbl.getModel().getValueAt(i, 0) != null && mainItemstbl.getModel().getValueAt(i, 5) != null) {
                                            if (Double.parseDouble(mainItemstbl.getModel().getValueAt(i, 5).toString()) > 0) {
                                                String drug = null;

                                                if (mainItemstbl.getValueAt(i, 8).toString().equalsIgnoreCase("0") || mainItemstbl.getValueAt(i, 8).toString().equalsIgnoreCase("-")) {
                                                    drug = mainItemstbl.getValueAt(i, 0).toString();
                                                } else {
                                                    drug = mainItemstbl.getValueAt(i, 0).toString();// + " " + jTable13.getValueAt(i, 8).toString();
                                                }
                                                java.sql.Statement pstz = connectDB.createStatement();
                                                java.sql.ResultSet rsz = pstz.executeQuery("SELECT strength FROM st_stock_prices WHERE product_id = '" + mainItemstbl.getValueAt(i, 7).toString() + "'");
                                                while (rsz.next()) {
                                                    strength = rsz.getObject(1).toString();
                                                }
                                                java.sql.Statement pst21c = connectDB.createStatement();
                                                java.sql.ResultSet rs11c = pst21c.executeQuery("select cost_of_sale,stock_code from pb_departments where income_account = '" + mainItemstbl.getValueAt(i, 6).toString() + "'");
                                                while (rs11c.next()) {
                                                    costofSaleCode = rs11c.getObject(1).toString();
                                                    stockCode = rs11c.getObject(2).toString();
                                                }
                                                java.sql.Statement pst211c = connectDB.createStatement();
                                                java.sql.ResultSet rs111c = pst211c.executeQuery("select activity from pb_activity where code = '" + costofSaleCode + "'");
                                                while (rs111c.next()) {
                                                    costofSale = rs111c.getObject(1).toString();

                                                }
                                                java.sql.Statement pst2111c = connectDB.createStatement();
                                                java.sql.ResultSet rs1111c = pst2111c.executeQuery("select activity from pb_activity where code = '" + stockCode + "'");
                                                while (rs1111c.next()) {
                                                    stock = rs1111c.getObject(1).toString();
                                                }
                                                presc = java.lang.Double.parseDouble(jTextField82.getText());

                                                Total = java.lang.Double.parseDouble(jTextField32.getText());
                                                if (Total > presc) {
                                                    amount1 = java.lang.Double.parseDouble(mainItemstbl.getValueAt(i, 5).toString());

                                                    percentage = (amount1 / Total) * 100;

                                                    TotalPrice = ((percentage / 100) * presc) + amount1;
                                                } else {
                                                    amount1 = java.lang.Double.parseDouble(mainItemstbl.getValueAt(i, 5).toString());

                                                    //  percentage = (amount1/Total)*100;
                                                    TotalPrice = amount1;
                                                }
                                                java.sql.Statement stm121 = connectDB.createStatement();
                                                java.sql.ResultSet rse121 = stm121.executeQuery("select units from st_stock_item where description ='" + mainItemstbl.getModel().getValueAt(i, 0).toString() + "'");
                                                while (rse121.next()) {

                                                    glAcc2 = rse121.getObject(1).toString();
                                                    System.out.println(glAcc2);
                                                }
                                                java.sql.Statement pstB = connectDB.createStatement();
                                                java.sql.ResultSet rsB = pstB.executeQuery("select transfer_price,units from st_stock_prices where product_id = '" + mainItemstbl.getModel().getValueAt(i, 7) + "'");

                                                while (rsB.next()) {
                                                    price = rsB.getDouble(1);
                                                    // units = rsB.getString(2);
                                                    qty = java.lang.Double.parseDouble(mainItemstbl.getValueAt(i, 1).toString());
                                                    sellPrice = java.lang.Double.parseDouble(mainItemstbl.getValueAt(i, 3).toString());
                                                    amount = price * qty;
                                                }

                                                System.out.println(price);

                                                java.sql.Statement pst2111cx = connectDB.createStatement();
                                                java.sql.ResultSet rs1111cx = pst2111cx.executeQuery("select activity from pb_activity where code = '" + stockCode + "'");
                                                while (rs1111cx.next()) {
                                                    stock = rs1111cx.getObject(1).toString();
                                                }

                                                // Account for the stock removal from store (credit stock account in st_stock_cardex)
                                                if (!mainItemstbl.getValueAt(i, 0).toString().equalsIgnoreCase("DISPENSING FEE")) {
                                                    java.sql.PreparedStatement pstmt1a = connectDB.prepareStatement("INSERT INTO st_stock_cardex values(?,? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                                    pstmt1a.setString(1, null);
                                                    pstmt1a.setObject(3, drug);
                                                    pstmt1a.setObject(2, pharmacyCmbx.getSelectedItem().toString());
                                                    pstmt1a.setDate(4, null);
                                                    pstmt1a.setDouble(5, amount);
                                                    pstmt1a.setDouble(6, 0.00);
                                                    pstmt1a.setObject(7, glAcc2);
                                                    pstmt1a.setObject(8, "");
                                                    pstmt1a.setString(9, null);
                                                    pstmt1a.setString(10, null);
                                                    pstmt1a.setDouble(11, 00);
                                                    pstmt1a.setDouble(12, 00);
                                                    pstmt1a.setDouble(13, 00);
                                                    if (patientNameTxt.getText().equals("")) {
                                                        javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "Enter patient", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                                    } else {
                                                        pstmt1a.setString(14, patientNameTxt.getText());
                                                    }

                                                    pstmt1a.setString(15, com.afrisoftech.lib.UserName.getLoginName(connectDB));

                                                    pstmt1a.setString(16, "");

                                                    pstmt1a.setString(17, null);
                                                    pstmt1a.setDate(18, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //
                                                    pstmt1a.setObject(19, pharmacyCmbx.getSelectedItem().toString());
                                                    pstmt1a.setString(20, "Issuing");
                                                    pstmt1a.setDouble(21, 00);
                                                    pstmt1a.setString(23, stockCode);
                                                    pstmt1a.setDouble(22, 00);
                                                    pstmt1a.setString(24, "");
                                                    pstmt1a.setObject(25, pharmacyCmbx.getSelectedItem().toString());
                                                    pstmt1a.setString(26, transNo);
                                                    pstmt1a.setDouble(27, qty);
                                                    pstmt1a.setString(28, com.afrisoftech.lib.UserName.getLoginName(connectDB));
                                                    pstmt1a.setBoolean(29, false);
                                                    pstmt1a.setDouble(30, 0.00);
                                                    pstmt1a.setDate(31, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //
                                                    pstmt1a.setString(32, mainItemstbl.getValueAt(i, 7).toString());
                                                    pstmt1a.setString(33, mainItemstbl.getValueAt(i, 8).toString());
                                                    pstmt1a.executeUpdate();

                                                    // Account for the cost of sale on the stock expense account in the ledger (debit the cost of sale account in ac_ledger)
                                                    java.sql.PreparedStatement pstmt2a = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                                    pstmt2a.setObject(1, costofSaleCode);
                                                    pstmt2a.setObject(2, costofSale);
                                                    pstmt2a.setString(3, patientNumberTxt.getText());
                                                    pstmt2a.setString(4, patientNameTxt.getText());
                                                    pstmt2a.setString(5, "");
                                                    pstmt2a.setString(6, "");
                                                    pstmt2a.setString(7, "");
                                                    pstmt2a.setString(8, "");
                                                    pstmt2a.setString(9, "");
                                                    pstmt2a.setString(10, "");
                                                    pstmt2a.setString(11, "");
                                                    pstmt2a.setString(12, "");
                                                    pstmt2a.setString(13, "");
                                                    pstmt2a.setString(14, drug);
                                                    pstmt2a.setString(15, "Issuing");
                                                    pstmt2a.setDouble(16, amount);
                                                    pstmt2a.setDouble(17, 00);
                                                    pstmt2a.setDate(18, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //
                                                    pstmt2a.setString(19, transNo);
                                                    pstmt2a.setBoolean(20, false);
                                                    pstmt2a.setBoolean(21, false);
                                                    pstmt2a.setBoolean(22, false);
                                                    pstmt2a.setString(23, com.afrisoftech.lib.UserName.getLoginName(connectDB));
                                                    pstmt2a.executeUpdate();
                                                    // StockCountingintfr
                                                }
                                                // Adjust the stock item level downwards from the respective store
                                                if (!mainItemstbl.getValueAt(i, 0).toString().equalsIgnoreCase("DISPENSING FEE")) {
                                                    java.sql.PreparedStatement pstmt33 = connectDB.prepareStatement("insert into st_sub_stores values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                                    pstmt33.setObject(1, pharmacyCmbx.getSelectedItem().toString());
                                                    pstmt33.setObject(2, mainItemstbl.getValueAt(i, 0).toString());
                                                    pstmt33.setDouble(3, 0.00);
                                                    pstmt33.setDouble(4, java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 1).toString()));
                                                    pstmt33.setDouble(7, 0.00);
                                                    pstmt33.setDouble(5, java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 3).toString()));
                                                    pstmt33.setDouble(6, TotalPrice);
                                                    pstmt33.setDate(10, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //
                                                    pstmt33.setString(8, transNo);
                                                    pstmt33.setObject(9, doctorPrescribingCmbx.getSelectedItem().toString());
                                                    pstmt33.setString(11, user);
                                                    pstmt33.setString(12, units);
                                                    pstmt33.setObject(13, pharmacyCmbx.getSelectedItem().toString());
                                                    pstmt33.setString(14, patientNumberTxt.getText() + " " + patientNameTxt.getText());
                                                    pstmt33.setDouble(15, amount / java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 1).toString()));
                                                    pstmt33.setObject(17, mainItemstbl.getValueAt(i, 8).toString());
                                                    pstmt33.setObject(16, mainItemstbl.getValueAt(i, 7).toString());
                                                    pstmt33.executeUpdate();
                                                }
                                                if (!paymentModeCmbx.getSelectedItem().equals("Scheme")) {
                                                    java.sql.PreparedStatement pstmt311 = connectDB.prepareStatement("UPDATE hp_pharmacy SET collected = true WHERE paid = true and prescription_no='" + mainItemstbl.getModel().getValueAt(i, 9) + "'  "
                                                            + "and manual_pr='" + receiptTxt.getText() + "' and item_code = '" + mainItemstbl.getModel().getValueAt(i, 7).toString() + "' AND patient_no = '" + patientNumberTxt.getText() + "' AND gl_code = '" + mainItemstbl.getModel().getValueAt(i, 6).toString() + "'");
                                                    pstmt311.executeUpdate();
                                                }
                                                if (paymentModeCmbx.getSelectedItem().equals("Scheme")) {

                                                    if (insertHpPharmacy == Boolean.FALSE) {

                                                        java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("INSERT INTO hp_pharmacy values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                                        pstmt1.setString(1, patientNumberTxt.getText());
                                                        pstmt1.setString(2, patientNameTxt.getText());
                                                        pstmt1.setObject(3, java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 1).toString()));
                                                        pstmt1.setDouble(4, TotalPrice);
                                                        //  pstmt1.setObject(4,jTable13.getValueAt(i,5).toString());
                                                        pstmt1.setObject(5, drug);
                                                        pstmt1.setDouble(7, java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 3).toString()));
                                                        pstmt1.setObject(8, mainItemstbl.getValueAt(i, 6).toString());
                                                        pstmt1.setBoolean(6, false);
                                                        pstmt1.setString(9, prescNo);
                                                        pstmt1.setObject(10, doctorPrescribingCmbx.getSelectedItem().toString());
                                                        pstmt1.setBoolean(11, true);
                                                        pstmt1.setString(12, glAcc2);
                                                        pstmt1.setDate(13, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //
                                                        pstmt1.setObject(14, pharmacyCmbx.getSelectedItem().toString());
                                                        pstmt1.setString(15, "OP");
                                                        pstmt1.setString(16, paymentModeCmbx.getSelectedItem().toString());
                                                        pstmt1.setString(17, "-");
                                                        pstmt1.setDouble(18, TotalPrice - amount1);
                                                        pstmt1.setString(19, user);
                                                        pstmt1.setString(20, jTextField5.getText());
                                                        pstmt1.setString(21, receiptTxt.getText());
                                                        pstmt1.setObject(22, mainItemstbl.getValueAt(i, 7).toString());
                                                        pstmt1.setObject(23, mainItemstbl.getValueAt(i, 8).toString());
                                                        pstmt1.executeUpdate();
                                                    }
                                                    // Account for the bill to the patient on the patient control account (Debit the patient control account in hp_patient_card)
                                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                                    pstmt.setString(1, patientNumberTxt.getText());
                                                    pstmt.setObject(2, drug);
                                                    pstmt.setString(3, patientCategoryTxt.getText());
                                                    pstmt.setString(4, paymentModeCmbx.getSelectedItem().toString());
                                                    pstmt.setString(5, transNo);
                                                    pstmt.setString(7, scheme);
                                                    pstmt.setString(6, cardNo);
                                                    pstmt.setString(8, cardName);
                                                    pstmt.setString(9, isurer);
                                                    pstmt.setDate(10, expDate);
                                                    pstmt.setObject(11, doctorPrescribingCmbx.getSelectedItem().toString());
                                                    pstmt.setDouble(12, TotalPrice);
                                                    pstmt.setDouble(13, 0.00);
                                                    pstmt.setDate(14, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //
                                                    pstmt.setObject(15, patientAcc);
                                                    pstmt.setObject(16, pharmacyCmbx.getSelectedItem().toString());
                                                    pstmt.setObject(17, qty);
                                                    pstmt.setObject(18, staffNo);
                                                    pstmt.setBoolean(19, false);
                                                    pstmt.setString(20, "Billing");
                                                    pstmt.setBoolean(21, false);
                                                    pstmt.setString(22, AccDesc);
                                                    pstmt.setString(23, invoiceNo);
                                                    pstmt.setString(24, user);
                                                    pstmt.setString(25, prescNo);
                                                    pstmt.setString(26, "OP");
                                                    pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                                    pstmt.setString(28, visitid);
                                                    pstmt.executeUpdate();

                                                    // Accounting for the sale of stock items in the sale ledger (Credit the inventory sales account on ac_ledger e.g. pharmacy sales account)
                                                    java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
                                                    pstmt2.setObject(1, mainItemstbl.getModel().getValueAt(i, 6));
                                                    pstmt2.setString(2, glAcc);
                                                    pstmt2.setString(3, patientNumberTxt.getText());
                                                    pstmt2.setString(4, patientNameTxt.getText());
                                                    pstmt2.setString(5, "");
                                                    pstmt2.setString(6, cardNo);
                                                    pstmt2.setString(7, cardName);
                                                    pstmt2.setString(8, "OP");
                                                    pstmt2.setString(9, isurer);
                                                    pstmt2.setString(10, paymentModeCmbx.getSelectedItem().toString());
                                                    pstmt2.setString(11, "");
                                                    pstmt2.setString(12, "");
                                                    pstmt2.setString(13, "");
                                                    pstmt2.setString(14, drug);
                                                    pstmt2.setString(15, "Revenue");
                                                    pstmt2.setDouble(16, 0.00);
                                                    pstmt2.setDouble(17, TotalPrice);
                                                    // pstmt2.setObject(17,jTable13.getValueAt(i,5).toString());
                                                    pstmt2.setDate(18, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //
                                                    pstmt2.setString(19, transNo);
                                                    pstmt2.setBoolean(20, false);
                                                    pstmt2.setBoolean(21, false);
                                                    pstmt2.setBoolean(22, false);
                                                    pstmt2.setString(23, user);
                                                    pstmt2.executeUpdate();

                                                    System.out.println("This is pharmacy");

                                                    java.sql.PreparedStatement pstmt311 = connectDB.prepareStatement("UPDATE hp_pharmacy SET collected = true WHERE paid = true and prescription_no='" + mainItemstbl.getModel().getValueAt(i, 9) + "' and item_code = '" + mainItemstbl.getModel().getValueAt(i, 7) + "' AND patient_no = '" + patientNumberTxt.getText() + "' AND gl_code = '" + mainItemstbl.getModel().getValueAt(i, 6) + "'");
                                                    pstmt311.executeUpdate();

                                                }

                                                double quantity = Double.parseDouble(mainItemstbl.getModel().getValueAt(i, 1).toString());
                                            } else {
                                                javax.swing.JOptionPane.showMessageDialog(this, "You cannot issue zero stocks!");
                                            }
                                        }

                                    }
                                    
                                    // If there is any discount or waiver on the norminal rate of sale for the inventory item (credit patient account in hp_patient_card)

                                    if (discounte > 0) {
                                        java.sql.PreparedStatement pstmtu = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                        pstmtu.setString(1, patientNumberTxt.getText());
                                        pstmtu.setObject(2, "Discount");
                                        pstmtu.setString(3, patientCategoryTxt.getText());
                                        pstmtu.setString(4, paymentModeCmbx.getSelectedItem().toString());
                                        pstmtu.setString(5, transNo);
                                        pstmtu.setString(7, scheme);
                                        pstmtu.setString(6, cardNo);
                                        pstmtu.setString(8, cardName);
                                        pstmtu.setString(9, isurer);
                                        pstmtu.setDate(10, expDate);
                                        pstmtu.setObject(11, doctorPrescribingCmbx.getSelectedItem().toString());
                                        pstmtu.setDouble(12, 0.00);
                                        pstmtu.setDouble(13, java.lang.Double.valueOf(dispenseDiscountAmountTxt.getText().toString()));
                                        pstmtu.setDate(14, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //
                                        pstmtu.setObject(15, patientAcc);
                                        pstmtu.setObject(16, pharmacyCmbx.getSelectedItem().toString());
                                        pstmtu.setDouble(17, 1);
                                        pstmtu.setObject(18, staffNo);
                                        pstmtu.setBoolean(19, false);
                                        pstmtu.setString(20, "Billing");
                                        pstmtu.setBoolean(21, false);
                                        pstmtu.setString(22, AccDesc);
                                        pstmtu.setString(23, visitid);
                                        pstmtu.setString(24, user);
                                        pstmtu.setString(25, prescNo);
                                        pstmtu.setString(26, "IP");
                                        pstmtu.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                        pstmtu.setString(28, visitid);
                                        pstmtu.executeUpdate();

                                        // Reduce the sale by discount/waiver amount on sales ledger (Debit sales account in ac_ledger)
                                        java.sql.PreparedStatement pstmt2v = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
                                        pstmt2v.setString(1, discode);
                                        pstmt2v.setString(2, discglAcc);
                                        pstmt2v.setString(3, patientNumberTxt.getText());
                                        pstmt2v.setString(4, patientNameTxt.getText());
                                        pstmt2v.setString(5, "");
                                        pstmt2v.setString(6, cardNo);
                                        pstmt2v.setString(7, cardName);
                                        pstmt2v.setString(8, "IP");
                                        pstmt2v.setString(9, isurer);
                                        pstmt2v.setString(10, paymentModeCmbx.getSelectedItem().toString());
                                        pstmt2v.setString(11, "");
                                        pstmt2v.setString(12, "");
                                        pstmt2v.setString(13, "");
                                        pstmt2v.setString(14, "Discount");
                                        pstmt2v.setString(15, "Revenue");
                                        pstmt2v.setDouble(16, java.lang.Double.valueOf(dispenseDiscountAmountTxt.getText().toString()));
                                        pstmt2v.setDouble(17, 0.00);
                                        pstmt2v.setDate(18, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //
                                        pstmt2v.setString(19, transNo);
                                        pstmt2v.setBoolean(20, false);
                                        pstmt2v.setBoolean(21, false);
                                        pstmt2v.setBoolean(22, false);
                                        pstmt2v.setString(23, user);
                                        pstmt2v.executeUpdate();

                                    }
                                    javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "Insert Done Successfully " + transNo, "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                                }

                                connectDB.commit();
                                connectDB.setAutoCommit(true);
                                //   javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "Insert Done Successfully " + transNo, "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                                jTextField32.setText("0.00");
                                dispenseBillTotalTxt.setText("0.00");
                                jButton32.doClick();
                                for (int k = 0; k < mainItemstbl.getRowCount(); k++) {
                                    for (int r = 0; r < mainItemstbl.getColumnCount(); r++) {
                                        mainItemstbl.getModel().setValueAt(null, k, r);
                                    }
                                }
                            }
                        }
                        insertHpPharmacy = false;

                    } catch (java.sql.SQLException sq) {
                        sq.printStackTrace();
                        insertHpPharmacy = false;
                        try {
                            connectDB.rollback(registerSavePoint);
                        } catch (java.sql.SQLException sql) {
                            javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
                        System.out.println(sq.getMessage());
                        javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                    }

                }
                //
//        DispenseBillThread dispenseBill = new DispenseBillThread();
//        
//        dispenseBill.start();
//        
//        jButton12.setEnabled(false);
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Please make sure that you have pressed the TAB key on each row to calculate bill totals.");
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Please make sure that you have selected the file for the patient.");
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void mainItemstblKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mainItemstblKeyReleased
        boolean neg = false;
        // Check condition on balance for prepaid debtors
//         double totalSumm = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(mainItemstbl, 5);
//        if (com.afrisoftech.lib.CheckPrepaySchemes.checkPrepayStatus(connectDB, schemeAccountNumberTxt.getText())) {
//            if (totalSumm > 0) {
//                cardbaltxtfld.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble( com.afrisoftech.lib.CheckPrepaySchemes.checkLimitExceeded(connectDB, schemeAccountNumberTxt.getText())));
//
//                if (totalSumm > com.afrisoftech.lib.CheckPrepaySchemes.checkLimitExceeded(connectDB, schemeAccountNumberTxt.getText())) {
//                    javax.swing.JOptionPane.showMessageDialog(this, "THE BILL IS GREATER THAN THE SCHEME PREPAID BALANCE! THE SCHEME ADMINISTRATOR MUST TOP UP THE BALANCE.", "ALERT MESSAGE!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
//                    jButton12.setEnabled(false);
//                    jButton121.setEnabled(false);
//                    jButton122.setEnabled(false);
//                    mainItemstbl.setValueAt(null, mainItemstbl.getSelectedRow(), 1);
//                    mainItemstbl.setValueAt(null, mainItemstbl.getSelectedRow(), 5);
//                    // jButton7.setEnabled(false);
//                } else {
//                    jButton12.setEnabled(true);
//                    jButton121.setEnabled(true);
//                    jButton122.setEnabled(true);
//                }
//            }
//        }
        ////
//for(int i=0;i<mainItemstbl.getRowCount();i++){
//            if(mainItemstbl.getValueAt(i, 0)!=null){

        if (mainItemstbl.getModel().getValueAt(mainItemstbl.getSelectedRow(), 1) != null) {
            if (mainItemstbl.getSelectedColumn() == mainItemstbl.getSelectedColumn()) {
                try {

                    java.sql.Statement pstmt1 = connectDB.createStatement();
                    java.sql.ResultSet rs1 = pstmt1.executeQuery("select neg_allow from st_stock_control"); //from orders where supplier ='"+jTable1.getValueAt(i,4).toString()+"'");

                    while (rs1.next()) {

                        neg = rs1.getBoolean(1);
                    }

                } catch (java.sql.SQLException sq) {

                    sq.printStackTrace();

                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

                    System.out.println(sq.getMessage());

                }

                float bal = java.lang.Float.parseFloat(mainItemstbl.getValueAt(mainItemstbl.getSelectedRow(), 2).toString());
                float qty = java.lang.Float.parseFloat(mainItemstbl.getValueAt(mainItemstbl.getSelectedRow(), 1).toString());
                float price = java.lang.Float.parseFloat(mainItemstbl.getValueAt(mainItemstbl.getSelectedRow(), 3).toString());
                dispenseDiscountAmountTxt.setText(java.lang.String.valueOf(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(mainItemstbl, 4)));
                if (neg == false && bal >= qty) {
                    float total = qty * price;
                    mainItemstbl.setValueAt(total, mainItemstbl.getSelectedRow(), 5);
                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(mainItemstbl, 5);
                    dispenseBillTotalTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                    dispenseNetBillTxt.setText(java.lang.String.valueOf(totalSum));
                } else {
                    if (neg == false && bal < qty) {
                        javax.swing.JOptionPane.showMessageDialog(this, "You are not allowed to dispense more than the available stock", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        mainItemstbl.setValueAt(0, mainItemstbl.getSelectedRow(), 5);
                        mainItemstbl.setValueAt(0, mainItemstbl.getSelectedRow(), 1);

                        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(mainItemstbl, 5);
                        dispenseBillTotalTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                        dispenseNetBillTxt.setText(java.lang.String.valueOf(totalSum));
                        com.afrisoftech.lib.ClearTable.removeSelectedRows(mainItemstbl);
                    }
                }
                if (neg == true) {
                    float total = qty * price;
                    mainItemstbl.setValueAt(total, mainItemstbl.getSelectedRow(), 5);
                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(mainItemstbl, 5);
                    dispenseBillTotalTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                    // jTextField15.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                    dispenseNetBillTxt.setText(java.lang.String.valueOf(totalSum));
                }
            }

        }

        // Add your handling code here:
    }//GEN-LAST:event_mainItemstblKeyReleased

    private void mainItemstblAncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_mainItemstblAncestorMoved
        // Add your handling code here:
    }//GEN-LAST:event_mainItemstblAncestorMoved

    private void jButton92ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton92ActionPerformed
        this.medicineSearchdialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton92ActionPerformed

    private void jTextField114CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField114CaretUpdate
        //if (jTextField114.getCaretPosition() < 5) {
        //  if (jCheckBox7.isSelected()) {
        if (jTextField114.getCaretPosition() > 3) {
            jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "select DISTINCT product AS product, selling_price, '" + gLCodeTxt.getText() + "' AS gl_code,product_id, strength FROM stockprices WHERE  (product_id ILIKE '%" + jTextField114.getText().toString() + "%' OR product ILIKE '%" + jTextField114.getText().toString() + "%') AND product not ilike '%dispensing%'  order by product"));
            ////  jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "select DISTINCT product AS product, selling_price, '" + gLCodeTxt.getText() + "' AS gl_code,product_id, strength FROM stockprices WHERE  department ilike '%" + pharmacyCmbx.getSelectedItem().toString() + "%' AND (product_id ILIKE '%" + jTextField114.getText().toString() + "%' OR product ILIKE '%" + jTextField114.getText().toString() + "%') AND product not ilike '%dispensing%'  order by product"));
            //jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select product,round(selling_price, 0) as selling_price, gl_code FROM st_stock_prices WHERE product ILIKE '%"+jTextField114.getText()+"%' AND department =  '"+jTextField42.getText()+"' order by product"));
            jSearchScrollPane3.setViewportView(jSearchTable3);
            // } 
//            else {
//                medicinesSearchtbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "select DISTINCT product AS product,selling_price, '" + jTextField4.getText() + "' AS gl_code,product_id, strength FROM stockprices WHERE product ILIKE '" + jTextField114.getText() + "%' AND department ilike  '" + pharmacyCmbx.getSelectedItem().toString() + "' order by product"));
//
//                //jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select product,round(selling_price, 0) as selling_price, gl_code FROM st_stock_prices WHERE product ILIKE '%"+jTextField114.getText()+"%' AND department =  '"+jTextField42.getText()+"' order by product"));
//
//                jSearchScrollPane3.setViewportView(medicinesSearchtbl);
//            }
//            System.out.println("Cannot sort out");

        }// Add your handling code here:
    }//GEN-LAST:event_jTextField114CaretUpdate

    private void jSearchTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable3MouseClicked

        //this.jTextField114.setText("");
        mainItemstbl.setValueAt(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 0), mainItemstbl.getSelectedRow(), 0);
        mainItemstbl.setValueAt(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 1), mainItemstbl.getSelectedRow(), 3);
        mainItemstbl.setValueAt(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 2), mainItemstbl.getSelectedRow(), 6);
        mainItemstbl.setValueAt(new java.lang.Double(0), mainItemstbl.getSelectedRow(), 4);
        mainItemstbl.setValueAt(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 3), mainItemstbl.getSelectedRow(), 7);
        mainItemstbl.setValueAt(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 4), mainItemstbl.getSelectedRow(), 8);

        int j = 0;

        /*        java.lang.Object selectedGuaran = cmbox1.getSelectedItem();
         int i = jTable11.getSelectedRow();
         if (i > -1){
         if (selectedGuaran != null) {
        
         try {
         java.sql.Statement pstmt = connectDB.createStatement();
         java.sql.ResultSet rs = pstmt.executeQuery("select sp.selling_price::numeric from st_stock_prices sp where product = '"+selectedGuaran+"'");
         while (rs.next()){
         jTable11.getModel().setValueAt(rs.getObject(1),i,3);
         }
         } catch(java.sql.SQLException sqlex){
         System.out.println(sqlex.getMessage());
         }
        
         */
        double Qty = 0.00;
        double issuing = 0.00;
        double total = 0.00;
        double itemPrice = 0.00;
        try {
            java.sql.Statement pstmt = connectDB.createStatement();
            java.sql.Statement pstmt1 = connectDB.createStatement();
            java.sql.Statement pstmt1x = connectDB.createStatement();

            java.sql.ResultSet rs1 = pstmt1.executeQuery("select count(product) from stockprices sc where product ilike '" + jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 0) + "' and department ilike '" + pharmacyCmbx.getSelectedItem().toString() + "'");
            while (rs1.next()) {
                j = rs1.getInt(1);
            }

            java.sql.ResultSet rsx = pstmt1x.executeQuery("select balance,selling_price from st_stock_prices where product_id ilike '" + jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 3) + "' and department ilike '" + pharmacyCmbx.getSelectedItem().toString() + "'");

            while (rsx.next()) {

                issuing = rsx.getDouble(1);
                itemPrice = rsx.getDouble(2);
                if (itemPrice > 0) {
                    total = itemPrice * issuing;
                } else {
                    total = 0;
                }
                //  jTable1.setValueAt(Qty,jTable1.getSelectedRow(),2);
                ////     jTable13.setValueAt(issuing, jTable13.getSelectedRow(), 1); 
                mainItemstbl.setValueAt(null, mainItemstbl.getSelectedRow(), 1);
                mainItemstbl.setValueAt(itemPrice, mainItemstbl.getSelectedRow(), 3);
                mainItemstbl.setValueAt(total, mainItemstbl.getSelectedRow(), 5);
            }

            if (j > 0) {
                java.sql.ResultSet rs = pstmt.executeQuery("select sum(qty) from stock_balance_qty where item_code ilike '" + jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 3) + "' and department ilike '" + pharmacyCmbx.getSelectedItem().toString() + "' AND dates::date <= '" + SQLDateFormat.getSQLDate(dispenseDatePicker.getDate()) + "'");

                //java.sql.ResultSet rs = pstmt.executeQuery("select sum(qty) from stock_balance_qty where description ilike '"+jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(),0)+"' and department ilike '"+jTextField42.getText()+"' AND dates <= '"+datePicker1.getDate()+"'");
                //java.sql.ResultSet rs = pstmt.executeQuery("select sum(receiving-issuing) As qty from  st_sub_stores where item = '"+jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(),0)+"' and department like '"+jTextField42.getText()+"' AND dates <= '"+datePicker1.getDate()+"'");
                while (rs.next()) {

                    Qty = rs.getDouble(1);
                    //  jTable1.setValueAt(Qty,jTable1.getSelectedRow(),2);
                    mainItemstbl.setValueAt(Qty, mainItemstbl.getSelectedRow(), 2);

                }
            } else {
                mainItemstbl.setValueAt("0", mainItemstbl.getSelectedRow(), 2);
            }
        } catch (java.sql.SQLException sqlex) {
            System.out.println(sqlex.getMessage());
        }

        medicineSearchdialog.dispose();

        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable3MouseClicked
    private void cmbox13MouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane22.getLocationOnScreen();
        medicineSearchdialog.setSize(650, 200);
        medicineSearchdialog.setLocation(point);
        medicineSearchdialog.setVisible(true);
        jTextField114.setText(null);

    }
    private void mainItemstblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainItemstblMouseClicked
        if (receiptTxt.getText().length() < 1) {
            if (mainItemstbl.getSelectedColumn() == 0) {
                if (gLCodeTxt.getText().toString().equalsIgnoreCase("") | gLCodeTxt.getText().toString().equalsIgnoreCase(" ") | pharmacyCmbx.getSelectedItem().toString().equalsIgnoreCase("-")) {
                    javax.swing.JOptionPane.showMessageDialog(this, "You have to select department first", "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                } else {
                    this.cmbox13MouseClicked();
                }
            }
        }// Add your handling code here:
    }//GEN-LAST:event_mainItemstblMouseClicked

    private void jButton52121ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52121ActionPerformed
        this.jSearchDialog2121.dispose(); // Add your handling code here:
    }//GEN-LAST:event_jButton52121ActionPerformed

    private void jSearchTable2121MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2121MouseClicked
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        jTextField32.setText("0.00");
        patientNumberTxt.setText("");
        //java.lang.String a= jSearchTable2121.getValueAt(jSearcht, WIDTH)

        patientNameTxt.setText("");
        patientCategoryTxt.setText("");
        jButton12.setEnabled(true);
        // jButton121.setEnabled(true);
        jButton122.setEnabled(true);
        double limit = 0.00;
        double bal = 0.00;
        double rect = 0.00;
        double outstanding = 0.00;
        boolean appLimit = false;
        String memberno = null;
        int interval = 0;

        smartcard = false;
        // jTextField32.setText("0.00");

        for (int k = 0; k < mainItemstbl.getRowCount(); k++) {
            for (int r = 0; r < mainItemstbl.getColumnCount(); r++) {
                mainItemstbl.getModel().setValueAt(null, k, r);
            }
        }

        patientNumberTxt.setText(jSearchTable2121.getValueAt(jSearchTable2121.getSelectedRow(), 0).toString());
        patientNameTxt.setText(jSearchTable2121.getValueAt(jSearchTable2121.getSelectedRow(), 1).toString());
        jTextField5.setText(jSearchTable2121.getValueAt(jSearchTable2121.getSelectedRow(), 2).toString());
        visitID = jSearchTable2121.getValueAt(jSearchTable2121.getSelectedRow(), 2).toString();
        super.setTitle(dispenseDatePicker.getDate() + "            " + pharmacyCmbx.getSelectedItem() + "                 Patient::" + patientNameTxt.getText().toString());

        jSearchDialog2121.dispose();

        int j = 0;
        if (inpatientChkbx.isSelected()) {
            wardNameTxt.setText(jSearchTable2121.getValueAt(jSearchTable2121.getSelectedRow(), 4).toString());
            try {

                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode,description,member_no from hp_inpatient_register where patient_no  = '" + this.patientNumberTxt.getText().toString() + "'");
                while (rset1.next()) {
                    patientCategoryTxt.setText(rset1.getObject(1).toString());
                    paymentModeCmbx.setSelectedItem(rset1.getObject(2).toString());
                    jTextField14.setText(dbObject.getDBObject(rset1.getObject(3), "-").toString());
                    memberno = dbObject.getDBObject(rset1.getObject(4), "-").toString();
                    System.out.println(memberno);
                }

                if (paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {

                    java.sql.Statement stmt1cz3 = connectDB.createStatement();
                    java.sql.ResultSet rset1cz3 = stmt1cz3.executeQuery("SELECT account_no,payer_name,usesmartcard FROM ac_schemes WHERE scheme_name  ILIKE '" + jTextField14.getText() + "'");
                    while (rset1cz3.next()) {
                        jTextField17.setText(rset1cz3.getObject(1).toString());
                        jTextField18.setText(rset1cz3.getObject(2).toString());
                        smartcard = rset1cz3.getBoolean(3);
                    }
                    if (schemeptsChkbx.isSelected()) {
                        if (smartcard) {
                            jButton12.setEnabled(false);
                            jButton121.setEnabled(false);
                            jButton122.setEnabled(false);
                            jButton7.setEnabled(true);
                            javax.swing.JOptionPane.showMessageDialog(this, "You must FORWARD from smart link".toUpperCase(), "Information Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                        }
                    }
                    java.sql.Statement stmt1cz = connectDB.createStatement();
                    java.sql.ResultSet rset1cz = stmt1cz.executeQuery("select applylimit from hp_schemestaff where staff_no  ='" + memberno + "' and applylimit = true");
                    while (rset1cz.next()) {
                        appLimit = rset1cz.getBoolean(1);
                    }
                    System.out.println(appLimit);
                    if (appLimit) {
                        ageingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, dispenseDatePicker.getDate());

                        java.lang.Object[][] rangeDates = ageingSeries.getAgeingDateSeries();

                        // ageingDates = ageingSeries.getAgeingDateSeries();
                        // double columnTotals[] = new double[rangeDates.length];
                        for (int x = 0; x < rangeDates.length; x++) {
                            System.out.println(rangeDates[x]);
                            try {

                                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
                                com.afrisoftech.lib.DateFormatter dateFormatter = new com.afrisoftech.lib.DateFormatter(dateFormat.parse(rangeDates[x][0].toString().trim()), "yyyy");

                                java.lang.String monthString = dateFormatter.getDateString();

                                interval = x;

                            } catch (java.text.ParseException prs) {
                                prs.printStackTrace();
                            }
                        }
                        java.sql.Statement stmt1c = connectDB.createStatement();
                        java.sql.ResultSet rset1c = stmt1c.executeQuery("select iplimit from hp_schemestaff where staff_no  ='" + memberno + "' and applylimit = true");
                        while (rset1c.next()) {
                            limit = rset1c.getDouble(1);
                        }
                        for (int t = 0; t < rangeDates.length; t++) {
                            java.sql.Statement stmt1cx = connectDB.createStatement();
                            System.out.println("Dates between : " + rangeDates[t][0] + " AND " + rangeDates[t][1]);
                            java.sql.ResultSet rset1cx = stmt1cx.executeQuery("select sum(balance) from ac_debtors where member_no  ='" + memberno + "' AND date between '" + rangeDates[t][0] + "' AND '" + rangeDates[t][1] + "' AND payee ilike '" + dispenseBillTotalTxt.getText() + "'");
                            while (rset1cx.next()) {
                                bal = rset1cx.getDouble(1);
                                System.out.println(bal);
                            }
                        }
                        outstanding = limit - bal;
                        // jTextField8.setText(java.lang.String.valueOf(outstanding));
                        if (outstanding >= limit) {
                            javax.swing.JOptionPane.showMessageDialog(this, "The patient has exausted the member limit", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        } else {
                        }
                    }
                }

            } catch (java.sql.SQLException sqlex) {
                sqlex.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, sqlex.getMessage());
                System.out.println(sqlex.getMessage());
            }
            jSearchDialog2121.dispose();
        } else {
            try {

                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode,description,card_no from hp_patient_register where patient_no  = '" + patientNumberTxt.getText() + "'");
                while (rset1.next()) {
                    patientCategoryTxt.setText(rset1.getObject(1).toString());
                    paymentModeCmbx.setSelectedItem(rset1.getObject(2).toString());
                    jTextField14.setText(dbObject.getDBObject(rset1.getObject(3), "-").toString());
                    memberno = dbObject.getDBObject(rset1.getObject(4), "-").toString();
                    System.out.println(memberno);
                }

                if (paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {
                    java.sql.Statement stmt1cz3 = connectDB.createStatement();
                    java.sql.ResultSet rset1cz3 = stmt1cz3.executeQuery("SELECT account_no,payer_name,usesmartcard FROM ac_schemes WHERE scheme_name  ILIKE '" + jTextField14.getText() + "'");
                    while (rset1cz3.next()) {
                        jTextField17.setText(rset1cz3.getObject(1).toString());
                        jTextField18.setText(rset1cz3.getObject(2).toString());
                        smartcard = rset1cz3.getBoolean(3);
                    }
                    if (schemeptsChkbx.isSelected()) {
                        if (smartcard) {
                            jButton12.setEnabled(false);
                            jButton121.setEnabled(false);
                            jButton122.setEnabled(false);
                            jButton7.setEnabled(true);
                            javax.swing.JOptionPane.showMessageDialog(this, "You must FORWARD from smart link".toUpperCase(), "Information Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                        }
                    }
                    java.sql.Statement stmt1cz = connectDB.createStatement();
                    java.sql.ResultSet rset1cz = stmt1cz.executeQuery("select limit_amount from hp_schemestaff where staff_no  ='" + memberno + "' and applylimit = true");
                    while (rset1cz.next()) {
                        appLimit = rset1cz.getBoolean(1);
                    }
                    System.out.println(appLimit);
                    if (appLimit) {
                        ageingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, dispenseDatePicker.getDate());

                        java.lang.Object[][] rangeDates = ageingSeries.getAgeingDateSeries();

                        // ageingDates = ageingSeries.getAgeingDateSeries();
                        // double columnTotals[] = new double[rangeDates.length];
                        for (int x = 0; x < rangeDates.length; x++) {
                            System.out.println(rangeDates[x]);
                            try {

                                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
                                com.afrisoftech.lib.DateFormatter dateFormatter = new com.afrisoftech.lib.DateFormatter(dateFormat.parse(rangeDates[x][0].toString().trim()), "yyyy");

                                java.lang.String monthString = dateFormatter.getDateString();

                                interval = x;

                            } catch (java.text.ParseException prs) {
                                prs.printStackTrace();
                            }
                        }
                        java.sql.Statement stmt1c = connectDB.createStatement();
                        java.sql.ResultSet rset1c = stmt1c.executeQuery("select iplimit from hp_schemestaff where staff_no  ='" + memberno + "' and applylimit = true");
                        while (rset1c.next()) {
                            limit = rset1c.getDouble(1);
                        }
                        for (int t = 0; t < rangeDates.length; t++) {
                            java.sql.Statement stmt1cx = connectDB.createStatement();
                            System.out.println("Dates between : " + rangeDates[t][0] + " AND " + rangeDates[t][1]);
                            java.sql.ResultSet rset1cx = stmt1cx.executeQuery("select sum(balance) from ac_debtors where member_no  ='" + memberno + "' AND date between '" + rangeDates[t][0] + "' AND '" + rangeDates[t][1] + "' AND payee ilike '" + dispenseBillTotalTxt.getText() + "'");
                            while (rset1cx.next()) {
                                bal = rset1cx.getDouble(1);
                                System.out.println(bal);
                            }
                        }
                        outstanding = limit - bal;
                        // jTextField8.setText(java.lang.String.valueOf(outstanding));
                        if (outstanding >= limit) {
                            javax.swing.JOptionPane.showMessageDialog(this, "The patient has exausted the member limit", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        } else {
                        }
                    }
                }
            } catch (java.sql.SQLException sqe) {
                sqe.printStackTrace();
                //  System.out.println("Insert not successful");
            }
        }

        try {
            // int j = 0;
            java.sql.Statement stmt = connectDB.createStatement();

            java.sql.ResultSet rset = stmt.executeQuery("SELECT count(patient_no) FROM hp_pharmacy where patient_no  ='" + patientNumberTxt.getText() + "' and paid = false AND date_prescribed::date > current_date - 1");

            while (rset.next()) {
                j = rset.getInt(1);
            }
            if (j > 0) {
                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select sum(amount) from hp_pharmacy where patient_no  ='" + patientNumberTxt.getText() + "' and paid = false AND date_prescribed::date > current_date - 1");
                while (rset1.next()) {
                    dispenseBillTotalTxt.setText(rset1.getObject(1).toString());
                    //jTextField5.setText(rset1.getObject(2).toString());
                }
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }

        this.populateTable1(patientNumberTxt.getText());

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

// Add your handling code here:
    }//GEN-LAST:event_jSearchTable2121MouseClicked

    private void jTextField113121CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField113121CaretUpdate
        if (this.inpatientChkbx.isSelected() && this.searchNameChbx.isSelected()) {
            if (jTextField113121.getText().length() > 4) {

                jSearchTable2121.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB,
                        "SELECT distinct patient_no, name,visit_id, unit_number, ward from inpatient_list where name ILIKE '" + jTextField113121.getText() + "%' or unit_number ilike '" + jTextField113121.getText() + "%' order by name"));

                jSearchTable2121.setShowHorizontalLines(false);
                jSearchScrollPane2121.setViewportView(jSearchTable2121);

            }
        } else if (this.schemeptsChkbx.isSelected()) {
            if (jTextField113121.getCaretPosition() > 4) {

                jSearchTable2121.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB,
                        "SELECT distinct  patient_no, name,'-' as visit_id, unit_number from patient_select "
                        + "where scheme_name  not Ilike 'CASH' and patient_no ILIKE '" + jTextField113121.getText() + "%'  or  name ILIKE '" + jTextField113121.getText() + "%'  or unit_number ilike '" + jTextField113121.getText() + "%'  order by name"));

                jSearchTable2121.setShowHorizontalLines(false);
                jSearchScrollPane2121.setViewportView(jSearchTable2121);

            }

        } else if (this.inpatientChkbx.isSelected() && this.searchNoChkbx.isSelected()) {
            if (jTextField113121.getCaretPosition() > 4) {

                jSearchTable2121.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB,
                        "SELECT distinct(patient_no), (name), visit_id, unit_number, ward from inpatient_list where patient_no ILIKE '" + jTextField113121.getText() + "%' or unit_number ilike '" + jTextField113121.getText() + "%' order by patient_no"));

                jSearchTable2121.setShowHorizontalLines(false);
                jSearchScrollPane2121.setViewportView(jSearchTable2121);

            }
        } else if (this.schemeptsChkbx.isSelected() && this.searchNoChkbx.isSelected()) {
            if (jTextField113121.getText().length() > 4) {

                jSearchTable2121.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, ""
                        + "SELECT distinct (a.patient_no), (a.name), '-' as visit_id, a.unit_number from patient_select a, hp_pharmacy b WHERE a.scheme_name  not Ilike 'CASH' and  a.patient_no ILIKE '" + jTextField113121.getText() + "%'  AND b.pay_mode='Scheme' AND a.patient_no = b.patient_no order by patient_no"));
                //jSearchTable2121.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, name, '-' as visit_id, unit_number from patient_select where patient_no ILIKE '%" + jTextField113121.getText() + "%'  or unit_number ilike '%" + jTextField113121.getText() + "%'   order by patient_no"));
                jSearchTable2121.setShowHorizontalLines(false);
                jSearchScrollPane2121.setViewportView(jSearchTable2121);

            }

        } else if (this.walkinPtchbx.isSelected()) {
            if (jTextField113121.getText().length() > 4) {

                //  jSearchTable2121.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT patient_no, name from patient_select where patient_no ILIKE '%"+jTextField113121.getText()+"%' order by patient_no"));
                jSearchTable2121.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB,
                        "SELECT distinct(patient_no),(patient_name) as name from hp_pharmacy where patient_name ILIKE '" + jTextField113121.getText() + "%' AND (patient_no ilike 'wk%') order by patient_name"));

                jSearchTable2121.setShowHorizontalLines(false);
                jSearchScrollPane2121.setViewportView(jSearchTable2121);

            }

        }

        // Add your handling code here:
    }//GEN-LAST:event_jTextField113121CaretUpdate

    private void patientSearchbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientSearchbtnActionPerformed
        searchButton2121Clicked(); // Add your handling code here:

        // Add your handling code here:
    }//GEN-LAST:event_patientSearchbtnActionPerformed
    private void searchButton2121Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.patientNumberTxt.getLocationOnScreen();

        jSearchDialog2121.setSize(600, 200);

        jSearchDialog2121.setLocation(point);

        jSearchDialog2121.setVisible(true);
    }
    private void inpatientChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inpatientChkbxActionPerformed
        //jPanel1.setVisible(false);
        printInterimbtn.setEnabled(true);
        patientNumberTxt.setText(null);
        receiptTxt.setText(null);

        patientSearchbtn.setEnabled(true);
        dispenseBodyPanel.setVisible(true);
        // jPanel11.setVisible(false);
        this.patientNameTxt.setEditable(false);
        try {
            java.sql.Statement pstmt = connectDB.createStatement();
            java.sql.ResultSet rs = pstmt.executeQuery("select store_name from st_stores where store_code = 'IP'");

            while (rs.next()) {
                dispensePharmacyPanel.setText(rs.getObject(1).toString());
                pharmacyCmbx.setSelectedItem(rs.getObject(1).toString());
                pharmacyCmbx.setSelectedItem(rs.getObject(1).toString());
                pharmacyCmbx.actionPerformed(evt);
                pharmacyCmbx.setSelectedItem(rs.getObject(1).toString());
            }
        } catch (java.sql.SQLException sqlex) {
            System.out.println(sqlex.getMessage());
        }

        //jPanel11.setVisible(true)// Add your handling code here:
    }//GEN-LAST:event_inpatientChkbxActionPerformed

    private void jButton5212ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5212ActionPerformed
        this.jSearchDialog212.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton5212ActionPerformed

    private void jSearchTable212MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable212MouseClicked
        //  jTextField5821.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 1).toString());
/*
         * jTextField912.setText(jSearchTable212.getValueAt(jSearchTable212.getSelectedRow(),
         * 0).toString());
         *
         *
         * int j = 0; try {
         *
         * java.sql.Statement pstmt12 = connectDB.createStatement();
         * java.sql.ResultSet rs12 = pstmt12.executeQuery("select
         * count(patient_name) from hp_pharmacy WHERE patient_name
         * ='"+jSearchTable212.getValueAt(jSearchTable212.getSelectedRow(),0)+"'
         * AND paid = true AND collected = false"); while (rs12.next()){ j =
         * rs12.getInt(1); }
         *
         * if (j > 0) { java.sql.Statement pstmt1 = connectDB.createStatement();
         * java.sql.ResultSet rs1 = pstmt1.executeQuery("select sum(amount) as
         * value from hp_pharmacy WHERE patient_name
         * ='"+jSearchTable212.getValueAt(jSearchTable212.getSelectedRow(),0)+"'
         * AND paid = true AND collected = false");
         *
         *
         * while (rs1.next()){
         * jTextField1111.setText(rs1.getObject(1).toString());
         *
         * }
         *
         * //crset1.setCommand("select service,dosage,units,selling_price,debit
         * as value from drug_collection_view WHERE patient_no
         * ='"+jComboBox11.getSelectedItem().toString()+"'"); /*
         * crset1.setCommand("select description,quantity,units,price,amount as
         * value from hp_pharmacy WHERE patient_name
         * ='"+jSearchTable212.getValueAt(jSearchTable212.getSelectedRow(),0)+"'
         * AND paid = true AND collected = false");
         *
         * crset1.setConnectionSource(pConnDB); try {
         *
         * crset1.execute();
         *
         * // crset2.setExecuteOnLoad(true); jTable111.setModel(new
         * org.netbeans.lib.sql.models.TableModel(crset1, new
         * org.netbeans.lib.sql.models.TableModel.Column[] { new
         * org.netbeans.lib.sql.models.TableModel.Column("description", "Item
         * Desc.", false), new
         * org.netbeans.lib.sql.models.TableModel.Column("units", "Units",
         * false), new org.netbeans.lib.sql.models.TableModel.Column("quantity",
         * "Quantity", false), new
         * org.netbeans.lib.sql.models.TableModel.Column("price", "Price per
         * Item", false), new
         * org.netbeans.lib.sql.models.TableModel.Column("value", "Value KShs",
         * true)
         *
         *
         * })); jScrollPane11.setViewportView(jTable111);
         *
         *
         * }
         * } catch(java.sql.SQLException sqlex){
         * System.out.println(sqlex.getMessage()); }
         * this.populateTable111(this.jTextField912.getText());
         *
         * jSearchDialog212.dispose();
         */
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable212MouseClicked
    /*
     * private void populateTable111(java.lang.String patient_no) { int j = 0;
     * int i = 0;
     *
     * try { java.sql.Statement stmtTable11 = connectDB.createStatement();
     *
     * java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT
     * count(patient_name) FROM hp_pharmacy WHERE patient_name =
     * '"+patient_no+"' AND paid = true AND collected = false");
     *
     * while (rsetTable11.next()) { j = rsetTable11.getInt(1); } if (j > 0) {
     * java.sql.Statement stmtTable1 = connectDB.createStatement();
     *
     * java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select
     * description,units,quantity,price,amount as value,gl_code from hp_pharmacy
     * WHERE patient_name ='"+patient_no+"' AND paid = true AND collected =
     * false and date_prescribed = current_date");
     *
     * while (rsetTable1.next()) {
     *
     * System.out.println("Working at table row "+i);
     * jTable111.setValueAt(rsetTable1.getObject(1), i, 0);
     * jTable111.setValueAt(rsetTable1.getObject(2), i, 1);
     * jTable111.setValueAt(rsetTable1.getObject(3), i, 3);
     * jTable111.setValueAt(rsetTable1.getObject(4), i, 4);
     * jTable111.setValueAt(rsetTable1.getObject(5), i, 5);
     * jTable111.setValueAt(rsetTable1.getObject(6), i, 6);
     *
     * i++;
     *
     * }
     * }
     * } catch(java.sql.SQLException sqlExec) {
     *
     * javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
     *
     * }
     * }
     */
    private void jTextField11312CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11312CaretUpdate

        jSearchTable212.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT distinct(patient_name) as name from hp_pharmacy where patient_name ILIKE '%" + jTextField11312.getText() + "%' AND (patient_no IS NULL OR  patient_no ='') and paid = true and collected = false order by patient_name"));

        /*
         * try {
         *
         * searchRowSet212.execute("SELECT distinct(patient_name) as name from
         * hp_pharmacy where patient_name ILIKE '"+jTextField11312.getText()+"%'
         * AND (patient_no IS NULL OR patient_no ='') and paid = true and
         * collected = false order by patient_name");
         *
         * jSearchTable212.setModel(new
         * org.netbeans.lib.sql.models.TableModel(searchRowSet212, new
         * org.netbeans.lib.sql.models.TableModel.Column[] { new
         * org.netbeans.lib.sql.models.TableModel.Column("name", "Patient name",
         * false) // new org.netbeans.lib.sql.models.TableModel.Column("name",
         * "Name", false) // new
         * org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Year
         * of birth", false), // new
         * org.netbeans.lib.sql.models.TableModel.Column("residence",
         * "Residence", false) }));
         */
        jSearchTable212.setShowHorizontalLines(false);
        jSearchScrollPane212.setViewportView(jSearchTable212);

        // Add your handling code here:
    }//GEN-LAST:event_jTextField11312CaretUpdate
    private void searchButton212Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
/*
         * java.awt.Point point = this.jTextField912.getLocationOnScreen();
         *
         * jSearchDialog212.setSize(400,200);
         *
         * jSearchDialog212.setLocation(point);
         *
         * jSearchDialog212.setVisible(true);
         */
    }

    private void populateTable11(java.lang.String patient_no) {
        /*
         * int j = 0; int i = 0;
         *
         * try { java.sql.Statement stmtTable11 = connectDB.createStatement();
         *
         * java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT
         * count(patient_name) FROM hp_pharmacy WHERE patient_name =
         * '"+patient_no+"' AND paid = false");
         *
         * while (rsetTable11.next()) { j = rsetTable11.getInt(1); } if (j > 0)
         * { java.sql.Statement stmtTable1 = connectDB.createStatement();
         *
         * java.sql.Statement stmtTable111 = connectDB.createStatement();
         *
         * java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT
         * description, quantity,price,(quantity*price)-amount,amount,gl_code
         * FROM hp_pharmacy WHERE patient_name = '"+patient_no+"' AND paid =
         * false");
         *
         * while (rsetTable1.next()) {
         *
         * jTable11.setValueAt(rsetTable1.getObject(1), i, 0);
         * jTable11.setValueAt(rsetTable1.getObject(2), i, 1);
         * jTable11.setValueAt(rsetTable1.getObject(3), i, 3);
         * if(rsetTable1.getDouble(4) >0){
         * jTable11.setValueAt(rsetTable1.getObject(4), i, 4); }else{
         * jTable11.setValueAt(new java.lang.Double(0.00), i, 4); } //
         * jTable11.setValueAt(rsetTable1.getObject(4), i, 4);
         * jTable11.setValueAt(rsetTable1.getObject(5), i, 5);
         * jTable11.setValueAt(rsetTable1.getObject(6), i, 6);
         *
         * java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("select
         * sum(qty) from stock_balance where description =
         * '"+jTable11.getValueAt(i,0).toString()+"' AND department ilike
         * '"+jTextField41.getText()+"%'"); while (rsetTable111.next()) {
         *
         * jTable11.setValueAt(rsetTable111.getObject(1), i, 2);
         *
         * i++;
         *
         * }
         * }
         * }
         *
         * java.sql.Statement pst211 = connectDB.createStatement();
         * java.sql.ResultSet rs111 = pst211.executeQuery("select doctor from
         * hp_pharmacy where paid = true and collected = false and patient_name
         * = '"+jTextField912.getText()+"'"); while (rs111.next()){
         * jTextField121.setText(rs111.getObject(1).toString()); } }
         * catch(java.sql.SQLException sqlExec) {
         *
         * javax.swing.JOptionPane.showMessageDialog(this,
         * sqlExec.getMessage());
         *
         * }
         */
    }

    /*
     * private void populateTable2(java.lang.String patient_no) { int j = 0; int
     * i = 0;
     *
     * try { java.sql.Statement stmtTable11 = connectDB.createStatement();
     *
     * java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT
     * count(patient_name) FROM hp_pharmacy WHERE patient_no = '"+patient_no+"'
     * AND paid = true AND collected = false");
     *
     * while (rsetTable11.next()) { j = rsetTable11.getInt(1); } if (j > 0) {
     * java.sql.Statement stmtTable1 = connectDB.createStatement();
     *
     * java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select
     * description,units,quantity,price,amount as value,gl_code from hp_pharmacy
     * WHERE patient_no ='"+patient_no+"' AND paid = true AND collected =
     * false");
     *
     * while (rsetTable1.next()) {
     *
     * System.out.println("Working at table row "+i);
     * jTable12.setValueAt(rsetTable1.getObject(1), i, 0);
     * jTable12.setValueAt(rsetTable1.getObject(2), i, 1);
     * jTable12.setValueAt(rsetTable1.getObject(3), i, 3);
     * jTable12.setValueAt(rsetTable1.getObject(4), i, 4);
     * jTable12.setValueAt(rsetTable1.getObject(5), i, 5);
     * jTable12.setValueAt(rsetTable1.getObject(6), i, 6);
     *
     * i++;
     *
     * }
     * }
     * } catch(java.sql.SQLException sqlExec) {
     *
     * javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
     *
     * }
     * }
     */ private void searchButton1Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
/*
         * java.awt.Point point = this.jTextField91.getLocationOnScreen();
         *
         * jSearchDialog21.setSize(400,200);
         *
         * jSearchDialog21.setLocation(point);
         *
         * jSearchDialog21.setVisible(true);
         *
         *
         */
    }
    /*
     * private void cmbox2ActionPerformed(java.awt.event.ActionEvent evt){ int j
     * = 0;
     *
     * java.lang.Object selectedGuaran = cmbox2.getSelectedItem(); int i =
     * jTable11.getSelectedRow();
     *
     * if (selectedGuaran != null) {
     *
     * try { java.sql.Statement pstmt = connectDB.createStatement();
     * java.sql.ResultSet rs = pstmt.executeQuery("select
     * sp.selling_price::numeric from st_stock_prices sp where product =
     * '"+selectedGuaran+"'"); while (rs.next()){
     * jTable11.setValueAt(rs.getObject(1),i,4); } } catch(java.sql.SQLException
     * sqlex){ System.out.println(sqlex.getMessage()); }
     *
     *
     * double Qty = 0.00; try { java.sql.Statement pstmt =
     * connectDB.createStatement(); java.sql.Statement pstmt1 =
     * connectDB.createStatement();
     *
     * java.sql.ResultSet rs1 = pstmt1.executeQuery("select count(product) from
     * st_stock_prices sc where item = '"+selectedGuaran+"' and department ilike
     * '"+jTextField41.getText()+"%'"); while (rs1.next()) j = rs1.getInt(1); if
     * (j > 0){
     *
     * java.sql.ResultSet rs = pstmt.executeQuery("select sum(qty) from
     * stock_balance where description = '"+selectedGuaran+"' and department
     * ILIKE '"+jTextField41.getText()+"%'"); while (rs.next()){ Qty =
     * rs.getDouble(1); //jTable1.setValueAt(Qty,jTable1.getSelectedRow(),2);
     *
     * jTable11.setValueAt(Qty,i,2);
     *
     * }
     * } else { jTable11.setValueAt("0.00",i,2); } } catch(java.sql.SQLException
     * sqlex){ System.out.println(sqlex.getMessage()); }
     *
     * try { java.sql.Statement pstmt = connectDB.createStatement();
     *
     * java.sql.ResultSet rs = pstmt.executeQuery("select code from pb_activity
     * where activity ilike '"+jTextField41.getText()+"%'"); while (rs.next()){
     * jTable11.setValueAt(rs.getObject(1),i,6);
     *
     * }
     * } catch(java.sql.SQLException sqlex){
     * System.out.println(sqlex.getMessage()); } }
     *
     * }
     */

    public class ComboTextField extends javax.swing.JTextField implements javax.swing.ComboBoxEditor {

        public ComboTextField() {

            initComponents();

        }

        void initComponents() {

            // oldComboBox1311Model = jComboBox1311.getModel();
            // comboTextField = new javax.swing.JTextField();
            comboTextField.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyTyped(java.awt.event.KeyEvent e) {

                    if (e.getID() == java.awt.event.KeyEvent.VK_BACK_SPACE) {

                        changeComboBoxModel(comboTextField.getText());

                        System.out.println(comboTextField.getText() + " Pressed Key " + e.getKeyText(e.getKeyCode()));
                    }
                }
            });

        }

        public java.awt.Component getEditorComponent() {

            return comboTextField;

        }

        public Object getItem() {

            return comboTextField.getText();

        }

        public void setItem(Object obj) {
            //    comboTextField.setText(jComboBox1311.getSelectedItem().toString());
        }

        public void changeComboBoxModel(java.lang.String typedLetters) {

            javax.swing.DefaultComboBoxModel newComboBox1311Model = new javax.swing.DefaultComboBoxModel();

            System.out.println("ComboBox Item No. " + oldComboBox1311Model.getSize());

            for (int i = 0; i < oldComboBox1311Model.getSize(); i++) {

                if (oldComboBox1311Model.getElementAt(i).toString().startsWith(typedLetters)) {

                    newComboBox1311Model.addElement(oldComboBox1311Model.getElementAt(i));

                    //                    jComboBox1311.setModel(newComboBox1311Model);
                }

            }

        }
        //      }
    }                                               /*
     * private void populateTable11(java.lang.String patient_name) { int j = 0;
     * int i = 0;
     *
     * try { java.sql.Statement stmtTable1 = connectDB.createStatement();
     *
     * java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT
     * count(patient_name) FROM hp_pharmacy WHERE patient_name =
     * '"+patient_name+"' AND paid = false AND collected = false");
     *
     * while (rsetTable1.next()) { j = rsetTable1.getInt(1); } if (j > 0) {
     *
     * java.sql.Statement stmtTable11 = connectDB.createStatement();
     *
     * java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT
     * description, quantity, price, null::numeric(15,2),amount, gl_code FROM
     * hp_pharmacy WHERE patient_name = '"+patient_name+"' AND paid = false AND
     * collected = false");
     *
     * while (rsetTable11.next()) {
     *
     * System.out.println("Working at table row "+i);
     * jTable11.setValueAt(rsetTable11.getObject(1), i, 0);
     * jTable11.setValueAt(rsetTable11.getObject(2), i, 1);
     * jTable11.setValueAt(rsetTable11.getObject(3), i, 3);
     * jTable11.setValueAt(rsetTable11.getObject(4), i, 4);
     * jTable11.setValueAt(rsetTable11.getObject(5), i, 5);
     * jTable11.setValueAt(rsetTable11.getObject(6), i, 6);
     *
     * i++;
     *
     * // i = i + i; // jTable1.setValueAt(rsetTable1.getObject(1), i, 0); } }
     * } catch(java.sql.SQLException sqlExec) {
     *
     * javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
     *
     * }
     * }
     *
     */


    // }
    private void schemeptsChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schemeptsChkbxActionPerformed
        this.patientNameTxt.setEditable(false);
        receiptTxt.setText(null);
        //  patientSearchbtn.setEnabled(false);
        /*
         * jPanel11.setVisible(false); jPanel1.setVisible(true);
         * jPanel13.setVisible(false); try { java.sql.Statement pstmt =
         * connectDB.createStatement(); java.sql.ResultSet rs =
         * pstmt.executeQuery("select store_name from st_stores where store_code
         * = 'OP'");
         *
         * while (rs.next()){ jTextField4.setText(rs.getObject(1).toString());
         * // jTextField2.setText(rs.getObject(2).toString());
         *
         * }
         * } catch(java.sql.SQLException sqlex){
         * System.out.println(sqlex.getMessage()); }
         */
        // Add your handling code here:
    }//GEN-LAST:event_schemeptsChkbxActionPerformed

    private void walkinPtchbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_walkinPtchbxActionPerformed
        /*
         * jPanel1.setVisible(false); jPanel11.setVisible(true);
         * jPanel13.setVisible(false);
         */
        patientSearchbtn.setEnabled(false);
        this.patientNameTxt.setEditable(true);
        this.paymentModeCmbx.setSelectedItem("Cash");
        this.patientNameTxt.setText("Cash");
        this.patientCategoryTxt.setText("Walk In");

        // jPanel11.setVisible(true)// Add your handling code here:
    }//GEN-LAST:event_walkinPtchbxActionPerformed

    private void jTextField32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField32ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField32ActionPerformed

    private void patientPrescbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientPrescbtnActionPerformed
        // TODO add your handling code here:

        if (patientNumberTxt.getText().length() < 1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select the patient file first ");
            pharmacyTabbedPane.setSelectedIndex(0);
        } else {

            patientPresctbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT trans_date::date, store_name,item_code, item,issuing,  price, total, user_name  FROM st_sub_stores WHERE issiued_to ilike '%" + patientNumberTxt.getText() + "%' AND trans_date::date <= '" + SQLDateFormat.getSQLDate(patientPrescriptionDt.getDate()) + "' AND upper(store_name) IN (SELECT upper(store_name) from st_stores WHERE status ='pharmacy') ORDER BY 1 DESC"));
        }


    }//GEN-LAST:event_patientPrescbtnActionPerformed

    private void pharmacyTabbedPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pharmacyTabbedPaneMouseClicked
        // TODO add your handling code here:
        if (pharmacyTabbedPane.getSelectedIndex() == 4) {

            if (patientNumberTxt.getText().length() < 1) {
                javax.swing.JOptionPane.showMessageDialog(this, "Please select the patient file first ");
                pharmacyTabbedPane.setSelectedIndex(0);
            } else {

                patientPresctbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT trans_date::date, store_name,item_code, item,issuing,  price, total, user_name  FROM st_sub_stores WHERE issiued_to ilike '%" + patientNumberTxt.getText() + "%' AND trans_date <= '" + patientPrescriptionDt.getDate() + "' AND upper(store_name) IN (SELECT upper(store_name) from st_stores WHERE status ='pharmacy') ORDER BY 1 DESC"));
            }

        }
    }//GEN-LAST:event_pharmacyTabbedPaneMouseClicked

    private void workloadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_workloadBtnActionPerformed
        // TODO add your handling code here:
        //
        pharmacistWorkloadTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT trans_date::date,issiued_to, store_name,item_code, item,issuing QTY,  price, total, user_name  FROM st_sub_stores WHERE store_name = '" + pharmacyCmbx.getSelectedItem() + "' AND (trans_date::date BETWEEN '" + startworkloadDate.getDate() + "'  AND '" + endworkloadDate.getDate() + "') AND receiving<1 and transaction_no not like 'Stock%' ;"));
        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(null, pharmacyCmbx.getSelectedItem().toString().toUpperCase() + ":  Summary Between  " + com.afrisoftech.lib.SQLDateFormat.getSQLDate(startworkloadDate.getDate()) + " and  " + com.afrisoftech.lib.SQLDateFormat.getSQLDate(endworkloadDate.getDate()), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Droid Sans Mono", 0, 12), new java.awt.Color(255, 0, 51))); // NOI18N

        totalRevenueTxt.setText(String.valueOf(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(pharmacistWorkloadTbl, 7))));
        totalItemDispensedtxt.setText(String.valueOf(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(pharmacistWorkloadTbl, 5))));
        try {
            // TODO add your handling code here:

            //select count( distinct c.patient_no) from hp_patient_card c,hp_pharmacy p  where  c.ip_no='IP' and  p.collected = true and p.pay_mode='Cash' and p.patient_no=c.patient_no and date between '2014-03-01' and current_date 
            //java.sql.PreparedStatement ps = connectDB.prepareStatement("select count(patient_no) from hp_patient_card where ip_no='OP' and main_service = '"+pharmacyCmbx.getSelectedItem().toString()+"' and billing_time::date  BETWEEN '"+startworkloadDate.getDate()+"'  AND '"+endworkloadDate.getDate()+"'");
            java.sql.PreparedStatement ps1 = connectDB.prepareStatement("select  count (distinct issiued_to) FROM st_sub_stores WHERE store_name = '" + pharmacyCmbx.getSelectedItem() + "' AND (trans_date::date BETWEEN '" + startworkloadDate.getDate() + "'  AND '" + endworkloadDate.getDate() + "');");
            //java.sql.PreparedStatement ps2 = connectDB.prepareStatement("select count(patient_no) from hp_patient_card where ip_no='IP' and main_service = '"+pharmacyCmbx.getSelectedItem().toString()+"' and billing_time::date  BETWEEN '"+startworkloadDate.getDate()+"'  AND '"+endworkloadDate.getDate()+"'");

            Integer count_scheme = 0;
            Integer count_CASH = 0;
            Integer count_IP = 0;
            //---------------------------------------------------------------------------------       
            ResultSet scheme = ps1.executeQuery();
            while (scheme.next()) {

//              count_scheme=  Integer.valueOf(String.valueOf(scheme.getObject(1).toString()));
//              schemepatientTxt.setText(count_scheme.toString());
                String pts = String.valueOf(scheme.getObject(1).toString());
                patientCountTxt.setText(pts);

            }
//    //------------------------------------------------------------------------------------          
//            ResultSet cash = ps.executeQuery();
//            while(cash.next()){
//            
//            count_scheme=  Integer.valueOf(String.valueOf(cash.getObject(1).toString()));
//              outpatientTxt.setText(count_scheme.toString());
//            
//            }
//            
//     //----------------------------------------------------------------------------------------
//            ResultSet IP = ps2.executeQuery();
//            while(IP.next()){
//            count_scheme=  Integer.valueOf(String.valueOf(IP.getObject(1).toString()));
//                inpatientsTXT.setText(count_scheme.toString());
//            
//            }

//            total = Integer.valueOf(outpatientTxt.getText()) + Integer.valueOf(inpatientsTXT.getText()) + Integer.valueOf(schemepatientTxt.getText());
//            patientCountTxt.setText(String.valueOf(total));
//            
        } catch (SQLException ex) {
            Logger.getLogger(PatientsBillingIntfr_.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_workloadBtnActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (patientNumberTxt.getText().length() < 1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select the patient file first ");
            pharmacyTabbedPane.setSelectedIndex(0);
        } else {

            printInterimbtn.doClick();

            pharmacyTabbedPane.setSelectedIndex(7);

            patientBilltbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT date::date,service AS ITEM_NAME,dosage AS QTY,debit  AS BILL_AMOUNT,credit AS RETURNS, user_name FROM hp_patient_card WHERE patient_no ='" + patientNumberTxt.getText() + "' AND visit_id='" + visitID + "' AND main_service = 'Pharmacy fee'"));
        }

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton54ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton54ActionPerformed
    }//GEN-LAST:event_jButton54ActionPerformed

    private void drugsCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drugsCmbxActionPerformed
        // TODO add your handling code here:
        availableDrugsQtysTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT initcap(store_name) Stock_Outlet, SUM(receiving - issuing) AS AVAILABLE_QTY FROM st_sub_stores WHERE item ilike '%" + drugsCmbx.getSelectedItem() + "%' GROUP BY 1 order by 2 desc "));


    }//GEN-LAST:event_drugsCmbxActionPerformed

    private void allPharmacistsChBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allPharmacistsChBxActionPerformed
        // TODO add your handling code here:
        workloadBtn.doClick();
    }//GEN-LAST:event_allPharmacistsChBxActionPerformed

    private void currentUserChBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentUserChBxActionPerformed
        // TODO add your handling code here:
        pharmacistWorkloadTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT trans_date,issiued_to, store_name,item_code, item,issuing,  price, total, user_name  FROM st_sub_stores WHERE store_name = '" + pharmacyCmbx.getSelectedItem() + "' AND (trans_date::date BETWEEN '" + startworkloadDate.getDate() + "'  AND '" + endworkloadDate.getDate() + "' AND user_name=current_user);"));

        totalRevenueTxt.setText(String.valueOf(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(pharmacistWorkloadTbl, 7))));
        totalItemDispensedtxt.setText(String.valueOf(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(pharmacistWorkloadTbl, 5))));
    }//GEN-LAST:event_currentUserChBxActionPerformed

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened

        super.setTitle(dispenseDatePicker.getDate() + "                          " + com.afrisoftech.lib.UserName.getLoginName(connectDB));


    }//GEN-LAST:event_formInternalFrameOpened

    private void requisitionNoTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requisitionNoTxtActionPerformed
        // TODO add your handling code here:
        // if(jTextField7.){}
    }//GEN-LAST:event_requisitionNoTxtActionPerformed

    private void requisitionNoTxtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_requisitionNoTxtFocusGained
        // TODO add your handling code here:
        if (requisitionNoTxt.getText().length() > 0 && requisitionNoTxt.getText().equalsIgnoreCase("Search Requisition...")) {
            requisitionNoTxt.setText(null);
            requisitionNoTxt.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_requisitionNoTxtFocusGained

    private void requisitionNoTxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_requisitionNoTxtFocusLost
        // TODO add your handling code here:
        if (requisitionNoTxt.getText().length() == 0) {

            requisitionNoTxt.setText("Search Requisition...");
            requisitionNoTxt.setForeground(Color.GRAY);
        }


    }//GEN-LAST:event_requisitionNoTxtFocusLost

    private void requisitionNoTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_requisitionNoTxtCaretUpdate
        // TODO add your handling code here:
        if (requisitionNoTxt.getText().equalsIgnoreCase("Search Requisition...")) {
            System.out.println("Nothing to query");
        } else {
            if (requisitionNoTxt.getCaretPosition() < 7) {
                System.out.println("Nothing");
            } else {

                requisitionsformTBl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT cost_center, item_code,item_description, '' as strength, 1 as units,  1.00 as qty_per_pack, quantity::numeric(10,2), price::numeric(10,2), (quantity * price)::numeric(10,2) AS TOTAL FROM st_receive_requisation WHERE requisition_no ilike '%" + requisitionNoTxt.getText() + "%' and quantity - qty_issued > 0  and store_name='" + pharmacyCmbx.getSelectedItem().toString() + "' order by 1"));

            }
        }


    }//GEN-LAST:event_requisitionNoTxtCaretUpdate

    private void requisitionNoTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_requisitionNoTxtMouseClicked
        // TODO add your handling code here:
        if (requisitionNoTxt.getText().length() > 0 && requisitionNoTxt.getText().equalsIgnoreCase("Search Requisition...")) {
            requisitionNoTxt.setText(null);
            requisitionNoTxt.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_requisitionNoTxtMouseClicked

    private void printInterimbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printInterimbtnActionPerformed

        com.afrisoftech.reports.FinalDescInPatientIntmlnvPdf policy = new com.afrisoftech.reports.FinalDescInPatientIntmlnvPdf();

        policy.FinalDescInPatientIntmlnvPdf(connectDB, visitID, patientNumberTxt.getText());

        com.afrisoftech.lib.PDFRenderer.renderPDF(policy.getFileName(), pharmacyTabbedPane.getComponentAt(7));

    }//GEN-LAST:event_printInterimbtnActionPerformed

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        // TODO add your handling code here:
        System.out.println("PHARMACIES " + pharmacyCmbx.getItemCount());

        if (pharmacyCmbx.getItemCount() > 1) {
            try {

                System.out.println("You have Rights");
            } catch (Exception e) {

                e.printStackTrace();

                javax.swing.JOptionPane.showMessageDialog(this, "You Need To Be Allocated A Pharmacy Outlet To Transact. Please Contact Your Inventory Supervisor");
                closeBtn.doClick();

            }

        }

    }//GEN-LAST:event_formInternalFrameActivated

    private void receiptTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receiptTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_receiptTxtActionPerformed

    private void schemepatientTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schemepatientTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_schemepatientTxtActionPerformed
    public java.lang.Object[] getListofActivities() {

        java.lang.Object[] listofActivities = null;

        java.util.Vector listActVector = new java.util.Vector(1, 4);

        try {
            PreparedStatement preparedStateme = connectDB.prepareStatement("select distinct (service_type),rate,'1',code from pb_operating_parameters where main_service ilike '%Fee' and gl_account = '" + gLCodeTxt.getText() + "' and service_type=upper(service_type) ");

            ResultSet rset1 = preparedStateme.executeQuery();

            while (rset1.next()) {
                for (int i = 1; i < 5; i++) {
                    listActVector.addElement(rset1.getObject(i));
                }
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        listofActivities = listActVector.toArray();
        System.out.println("Done list of Items in the Service List ...");
        return listofActivities;
    }

    private void addServiceFeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addServiceFeeActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        java.lang.Object[] listofActNow = this.getListofActivities();

        for (int i = 0; i < listofActNow.length; i++) {

            System.out.println(listofActNow[i]);

        }

        int j = 0;

        if (patientNumberTxt.getText().length() > 0) {
            //START
            this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

            for (int i = 0; i < mainItemstbl.getRowCount(); i++) {
                if (mainItemstbl.getValueAt(i, 0) != null) {

                    j = i;
                    System.err.println("ITEMS ALREADY INSERTED:::" + j);
                    if (!mainItemstbl.getValueAt(i, 0).toString().equalsIgnoreCase("DISPENSING FEE")) {
                        try {
                            PreparedStatement preparedStateme = connectDB.prepareStatement("select distinct (service_type),rate,'1',code from pb_operating_parameters where main_service ilike '%Fee' and gl_account = '" + gLCodeTxt.getText() + "' and service_type=upper(service_type) ");

                            ResultSet rset1 = preparedStateme.executeQuery();

                            while (rset1.next()) {

                                mainItemstbl.setValueAt(rset1.getObject(1), j + 1, 0);
                                mainItemstbl.setValueAt(rset1.getDouble(3), j + 1, 2);
                                mainItemstbl.setValueAt(rset1.getDouble(2), j + 1, 3);
                                mainItemstbl.setValueAt(rset1.getObject(4), j + 1, 7);
                                mainItemstbl.setValueAt("1", j + 1, 8);
                                mainItemstbl.setValueAt(gLCodeTxt.getText(), j + 1, 6);
                                mainItemstbl.setValueAt(0, j + 1, 4);

                                mainItemstbl.setValueAt(1, j + 1, 1);
                                mainItemstbl.setValueAt(rset1.getDouble(2), j + 1, 5);

                                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(mainItemstbl, 5);
                                dispenseBillTotalTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                                dispenseNetBillTxt.setText(java.lang.String.valueOf(totalSum));

                            }

                        } catch (SQLException ex) {
                            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
                            ex.printStackTrace();
                        }

                    }

                } else {
                    try {
                        PreparedStatement preparedStateme = connectDB.prepareStatement("select distinct upper(service_type),rate,'1',code from pb_operating_parameters where main_service ilike 'Pharmacy Fee' AND service_type ilike 'dispensing fee'");

                        ResultSet rset1 = preparedStateme.executeQuery();

                        while (rset1.next()) {

                            mainItemstbl.setValueAt(rset1.getObject(1), j + 1, 0);
                            mainItemstbl.setValueAt(rset1.getDouble(3), j + 1, 2);
                            mainItemstbl.setValueAt(rset1.getDouble(2), j + 1, 3);
                            mainItemstbl.setValueAt(rset1.getObject(4), j + 1, 7);
                            mainItemstbl.setValueAt("1", j + 1, 8);
                            mainItemstbl.setValueAt(gLCodeTxt.getText(), j + 1, 6);
                            mainItemstbl.setValueAt(0, j + 1, 4);

                            mainItemstbl.setValueAt(1, j + 1, 1);
                            mainItemstbl.setValueAt(rset1.getDouble(2), j + 1, 5);
                            mainItemstbl.setValueAt(rset1.getDouble(3), j + 1, 9);

                            double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(mainItemstbl, 5);
                            dispenseBillTotalTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                            dispenseNetBillTxt.setText(java.lang.String.valueOf(totalSum));
                        }

                    } catch (SQLException ex) {
                        javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
                        ex.printStackTrace();
                    }

                }
            }

            this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        } else {

            JOptionPane.showMessageDialog(this, "Select A Patient File", "CONFIRMATION", JOptionPane.INFORMATION_MESSAGE);

        }
    }//GEN-LAST:event_addServiceFeeActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown

        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentShown

    private void pharmacyTabbedPaneComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_pharmacyTabbedPaneComponentShown

        // TODO add your handling code here:
    }//GEN-LAST:event_pharmacyTabbedPaneComponentShown

    private void patientCradBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientCradBtnActionPerformed
        if (patientNumberTxt.getText().length() > 2) {
            com.afrisoftech.reports.PatientCardPdf policyReport = new com.afrisoftech.reports.PatientCardPdf();//connectDB, transdatePicker.getDate(), transdatePicker.getDate(),nameNoTxt.getText());
//
            policyReport.PatientCardPdf(connectDB, dispenseDatePicker.getDate(), dispenseDatePicker.getDate(), patientNumberTxt.getText());
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "You MUST select a patient file in order to view the patient card");
        }
// TODO add your handling code here:
    }//GEN-LAST:event_patientCradBtnActionPerformed

    private void dispensePharmacyPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispensePharmacyPanelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dispensePharmacyPanelActionPerformed
    private void populateTable1(java.lang.String patient_no) {
        insertHpPharmacy = false;
        int j = 0;
        int i = 0;
        double Qty = 0.00;
        try {
            java.sql.Statement stmtTable11 = connectDB.createStatement();

            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT count(patient_no)  FROM hp_pharmacy WHERE patient_no = '" + patient_no + "' AND paid = true and collected=false AND date_prescribed::date>current_date-2");

            while (rsetTable11.next()) {
                j = rsetTable11.getInt(1);
            }
            if (j > 0) {
                //change is here            
                insertHpPharmacy = true;
                //splsamuel   insertHpPharmacy = false;
                java.sql.Statement stmtTable1 = connectDB.createStatement();
                java.sql.Statement stmtTable111 = connectDB.createStatement();

//                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT description, sum(quantity),price,"
//                        + "sum((quantity*price)-amount)::numeric(15,2),sum(amount)::numeric(15,2),gl_code,item_code,strength,prescription_no  FROM hp_pharmacy WHERE "
//                        + "patient_no = '" + patient_no + "' AND paid = true "
//                        + " AND collected = false AND date_prescribed::date>current_date-2 GROUP BY description,price,gl_code,item_code,strength,prescription_no ");
                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT description, sum(quantity),price,"
                        + "0.00, sum(quantity*price)::numeric(15,2),gl_code,item_code,strength,prescription_no FROM hp_pharmacy WHERE "
                        + "patient_no = '" + patient_no + "' AND paid = true "
                        + " AND collected = false AND date_prescribed::date>current_date-2 GROUP BY description,price,gl_code,item_code,strength,prescription_no ");

                while (rsetTable1.next()) {

                    System.out.println("Working at table row " + i);
                    mainItemstbl.setValueAt(rsetTable1.getObject(1), i, 0);
                    mainItemstbl.setValueAt(rsetTable1.getObject(2), i, 1);
                    mainItemstbl.setValueAt(rsetTable1.getObject(3), i, 3);
                    if (rsetTable1.getDouble(4) > 0) {
                        mainItemstbl.setValueAt(rsetTable1.getObject(4), i, 4);
                    } else {
                        mainItemstbl.setValueAt(new java.lang.Double(0.00), i, 4);
                    }
                    mainItemstbl.setValueAt(rsetTable1.getObject(5), i, 5);
                    mainItemstbl.setValueAt(rsetTable1.getObject(6), i, 6);

                    mainItemstbl.setValueAt(rsetTable1.getObject(7), i, 7);
                    mainItemstbl.setValueAt(rsetTable1.getObject(8), i, 8);
                    mainItemstbl.setValueAt(rsetTable1.getObject(9), i, 9);

                    java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("select sum(receiving-issuing) from st_sub_stores where item_code = '" + mainItemstbl.getValueAt(i, 7).toString() + "' AND store_name ilike '" + pharmacyCmbx.getSelectedItem().toString() + "'");

                    while (rsetTable111.next()) {

                        mainItemstbl.setValueAt(rsetTable111.getObject(1), i, 2);

                        i++;

                    }
                }
            }
            dispenseNetBillTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(mainItemstbl, 5)));
        } catch (java.sql.SQLException sqlExec) {
            sqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
    }

    private void startRunning() {

        System.out.println("Starting to run Progress Thread");

        if (updatePatientList == null || !updatePatientList.isAlive()) {

            updatePatientList = new UpdatePatientList(this);

            updatePatientList.start();

            System.out.println("Progress Thread started");

        }

    }

    private void stopRunning() {

        System.out.println("Stopping run Progress Thread");

        updatePatientList.setStop(false);

    }

    class UpdatePatientList extends java.lang.Thread {

        java.lang.String selectedItem;
        int refreshWaitTime = 10000;

        public UpdatePatientList(java.awt.Component parent) {
        }

        public void setStop(boolean refreshstatus) {

            refreshStatus = refreshstatus;

        }
        /*
         * public void run() {
         *
         * System.out.println("Loading Patient refresh thread.");
         *
         * while (refreshStatus) {
         *
         * try {
         *
         * selectedItem = jComboBox131.getSelectedItem().toString();
         *
         * crset1.execute();
         *
         * jComboBox131.setSelectedItem(selectedItem);
         *
         * } catch (java.sql.SQLException sqlExec) {
         *
         * javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(),
         * sqlExec.getMessage());
         *
         * }
         *
         * try {
         *
         * java.lang.Thread.sleep(refreshWaitTime);
         *
         * } catch (java.lang.InterruptedException intExec) {
         *
         * javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(),
         * "Interruption Exception!"); }
         *
         * }
         *
         * }
         */
    }
    /*
     * public void tableModel1TableChanged() { System.out.println("Calculating
     * totals for table 13 and 2."); // double resFloat = 0.00; double resFloat
     * = 0.00; double Total =
     * java.lang.Double.parseDouble(jTextField82.getText()); for (int i = 0; i <
     * jTable13.getRowCount(); i++) {
     *
     * if (jTable13.getModel().getValueAt(i, 0) != null) {
     *
     * if (jTable13.getSelectedColumn() == 1) {
     *
     * resFloat = resFloat +
     * Double.parseDouble(jTable13.getModel().getValueAt(i, 5).toString());
     *
     * jTextField32.setText(java.lang.String.valueOf(resFloat)); }else // if
     * (jTable11.getSelectedColumn() == 4) {
     *
     * resFloat = resFloat +
     * Double.parseDouble(jTable13.getModel().getValueAt(i,5).toString()); //9 }
     *
     * jTextField32.setText(java.lang.String.valueOf(resFloat)); //
     * jTextField10.setText(java.lang.String.valueOf(resFloat+Total)); if
     * (resFloat>Total){
     * jTextField10.setText(java.lang.String.valueOf(resFloat+Total)); }else{
     * jTextField10.setText(java.lang.String.valueOf(resFloat)); } } }
     *
     * // jTextField31.setText(java.lang.String.valueOf(resFloat)); } public
     * void tableModel1TableChanged(javax.swing.event.TableModelEvent evt) {
     *
     * // double resFloat = 0.00; double resFloat = 0.00;
     *
     * double Total = java.lang.Double.parseDouble(jTextField82.getText());
     *
     * for (int i = 0; i < jTable13.getRowCount(); i++) {
     *
     * if (jTable11.getModel().getValueAt(i, 0) != null) {
     *
     * if (jTable13.getSelectedColumn() == 1) {
     *
     * resFloat = resFloat +
     * Double.parseDouble(jTable13.getModel().getValueAt(i,5).toString());
     *
     * jTextField32.setText(java.lang.String.valueOf(resFloat));
     * jTextField10.setText(java.lang.String.valueOf(resFloat+Total)); }else //
     * if (jTable11.getSelectedColumn() == 4) {
     *
     * resFloat = resFloat +
     * Double.parseDouble(jTable13.getModel().getValueAt(i,5).toString()); // }
     * jTextField32.setText(java.lang.String.valueOf(resFloat)); //
     * jTextField10.setText(java.lang.String.valueOf(resFloat+Total)); if
     * (resFloat>Total){
     * jTextField10.setText(java.lang.String.valueOf(resFloat+Total)); }else{
     * jTextField10.setText(java.lang.String.valueOf(resFloat)); } } }
     *
     * // jTextField31.setText(java.lang.String.valueOf(resFloat)); }
     *
     *
     * public void tableModelTableChanged2() { System.out.println("Calculating
     * totals for table 11 and 2."); // double resFloat = 0.00; double resFloat
     * = 0.00; double Total =
     * java.lang.Double.parseDouble(jTextField81.getText()); for (int i = 0; i <
     * jTable11.getRowCount(); i++) {
     *
     * if (jTable11.getModel().getValueAt(i, 0) != null) {
     *
     * if (jTable11.getSelectedColumn() == 1) {
     *
     * resFloat = resFloat +
     * Double.parseDouble(jTable11.getModel().getValueAt(i, 5).toString());
     *
     * jTextField31.setText(java.lang.String.valueOf(resFloat));
     * jTextField14.setText(java.lang.String.valueOf(resFloat+Total)); }else //
     * if (jTable11.getSelectedColumn() == 4) {
     *
     * resFloat = resFloat +
     * Double.parseDouble(jTable11.getModel().getValueAt(i,5).toString()); //9 }
     *
     * jTextField31.setText(java.lang.String.valueOf(resFloat)); //
     * jTextField14.setText(java.lang.String.valueOf(resFloat+Total)); if
     * (resFloat>Total){
     * jTextField14.setText(java.lang.String.valueOf(resFloat+Total)); }else{
     * jTextField14.setText(java.lang.String.valueOf(resFloat)); } } }
     *
     * // jTextField31.setText(java.lang.String.valueOf(resFloat)); }
     */
    /*
     * public void tableModelTableChanged() { System.out.println("Calculating
     * totals for table 12 and 21."); // double resFloat = 0.00; double
     * resFloat1 = 0.00; double Total =
     * java.lang.Double.parseDouble(jTextField8.getText()); for (int i = 0; i <
     * jTable1.getRowCount(); i++) {
     *
     * if (jTable1.getModel().getValueAt(i, 0) != null) {
     *
     * if (jTable1.getSelectedColumn() == 1) {
     *
     * resFloat1 = resFloat1 +
     * Double.parseDouble(jTable1.getModel().getValueAt(i, 5).toString());
     *
     * // }
     *
     * jTextField3.setText(java.lang.String.valueOf(resFloat1));
     * jTextField15.setText(java.lang.String.valueOf(resFloat1+Total));
     *
     * }else // if (jTable1.getSelectedColumn() == 4) {
     *
     * resFloat1 = resFloat1 +
     * Double.parseDouble(jTable1.getModel().getValueAt(i,5).toString()); // }
     * jTextField3.setText(java.lang.String.valueOf(resFloat1)); if
     * (resFloat1>Total){
     * jTextField15.setText(java.lang.String.valueOf(resFloat1+Total)); }else{
     * jTextField15.setText(java.lang.String.valueOf(resFloat1)); }
     *
     * }
     * }
     *
     * // jTextField31.setText(java.lang.String.valueOf(resFloat)); } public
     * void tableModelTableChanged(javax.swing.event.TableModelEvent evt) {
     *
     * // double resFloat = 0.00; double resFloat1 = 0.00; double Total =
     * java.lang.Double.parseDouble(jTextField8.getText()); for (int i = 0; i <
     * jTable1.getRowCount(); i++) {
     *
     * if (jTable1.getModel().getValueAt(i, 0) != null) {
     *
     * if (jTable1.getSelectedColumn() == 1) {
     *
     * resFloat1 = resFloat1 +
     * Double.parseDouble(jTable1.getModel().getValueAt(i, 5).toString());
     *
     * // }
     *
     * jTextField3.setText(java.lang.String.valueOf(resFloat1));
     * jTextField15.setText(java.lang.String.valueOf(resFloat1+Total)); }else //
     * if (jTable11.getSelectedColumn() == 4) {
     *
     * resFloat1 = resFloat1 +
     * Double.parseDouble(jTable1.getModel().getValueAt(i,5).toString()); // }
     * jTextField3.setText(java.lang.String.valueOf(resFloat1)); if
     * (resFloat1>Total){
     * jTextField15.setText(java.lang.String.valueOf(resFloat1+Total)); }else{
     * jTextField15.setText(java.lang.String.valueOf(resFloat1)); } } }
     *
     * // jTextField31.setText(java.lang.String.valueOf(resFloat)); }
     */

    class DispenseBillThread extends java.lang.Thread {

        public void run() {
            java.util.Date periodFrom = null;
            java.util.Date periodTo = null;
            java.util.Date toDaysDate = null;
            boolean smartcard = false;
            boolean prepaid = true;

            // Check condition on balance for prepaid debtors
//         double totalSumm = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable13, 5);
//        if (com.afrisoftech.lib.CheckPrepaySchemes.checkPrepayStatus(connectDB, schemeAccountNumberTxt.getText())) {
//            if (totalSumm > 0) {
//                if (totalSumm > com.afrisoftech.lib.CheckPrepaySchemes.checkLimitExceeded(connectDB, schemeAccountNumberTxt.getText())) {
//                    javax.swing.JOptionPane.showMessageDialog(this, "THE BILL IS GREATER THAN THE SCHEME PREPAID BALANCE! THE SCHEME ADMINISTRATOR MUST TOP UP THE BALANCE.", "ALERT MESSAGE!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
//                    jButton12.setEnabled(false);
//                    jButton121.setEnabled(false);
//                    jButton122.setEnabled(false);
//                    jTable13.setValueAt(null, jTable13.getSelectedRow(), 1);
//                    jTable13.setValueAt(null, jTable13.getSelectedRow(), 5);
//                    prepaid=false;
//                    // jButton7.setEnabled(false);
//                } else {
//                    prepaid=true;
//                    jButton12.setEnabled(true);
//                    jButton121.setEnabled(true);
//                    jButton122.setEnabled(true);
//                }
//            }
//        }
            ////
            if (prepaid == true) {
                java.sql.Savepoint registerSavePoint = null;
                try {
                    try {
                        connectDB.setAutoCommit(false);
                        registerSavePoint = connectDB.setSavepoint("registration");
                    } catch (java.sql.SQLException ex) {
                        ex.printStackTrace();
                    }

                    java.sql.Statement stmtf = connectDB.createStatement();
                    java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + dispenseDatePicker.getDate() + "' BETWEEN period_from AND period_to");
                    while (rsetf.next()) {
                        periodFrom = rsetf.getDate(1);
                        periodTo = rsetf.getDate(2);
                    }

                    if (dispenseDatePicker.getDate().before(periodFrom) || dispenseDatePicker.getDate().after(periodTo)) {
                        javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    } else {

                        // jTable13.setEditingRow(-1);
                        if (mainItemstbl.isEditing()) {
                            mainItemstbl.getCellEditor().stopCellEditing();
                        }
                        // try {
                        double amount1 = 0.00;
                        double percentage = 0.00;
                        double TotalPrice = 0.00;
                        double total = 0.00;
                        double presc = 0.00;
                        double Total = 0.00;

                        java.util.Calendar calendar = java.util.Calendar.getInstance();

                        long dateNow = calendar.getTimeInMillis();

                        java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

                        System.out.println(datenowSql1.toString());

                        java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

                        System.out.println(datenowSql.toString());

                        String billNo = null;
                        transNo = null;
                        String payMode = null;
                        String patientAcc = null;
                        String cardNo = null;
                        String AccDesc = null;
                        String scheme = null;
                        String cardName = null;
                        String isurer = null;
                        java.sql.Date expDate = null;
                        String staffNo = null;
                        String BillNo = null;
                        String glAcc = null;
                        // String BillNo = null;
                        String code = null;
                        String user = null;
                        String prescNo = null;
                        java.util.Date admDate = null;
                        String visitid = jTextField5.getText().toString();
                        String costofSaleCode = null;
                        String stockCode = null;
                        String costofSale = null;
                        String stock = null;
                        String billingDept = null;
                        String discode = null;
                        String discglAcc = null;
                        String invoiceNo = null;
                        String strength = null;
                        double discounte = java.lang.Double.parseDouble(dispenseDiscountAmountTxt.getText());

                        double sellPrice = 0.00;
                        int exitOption = javax.swing.JOptionPane.showConfirmDialog(new java.awt.Frame(), "Do you really want to Save?", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

                        if (exitOption == javax.swing.JOptionPane.YES_OPTION) {

                            // presc = java.lang.Double.parseDouble(jTextField8.getText());
                            if (schemeptsChkbx.isSelected()) {
                                chbox = "OP";
                            } else {
                                if (walkinPtchbx.isSelected()) {
                                    chbox = "WI";
                                } else {
                                    if (inpatientChkbx.isSelected()) {
                                        chbox = "IP";
                                    }
                                }
                            }

                            //  try {
                            // connectDB.setAutoCommit(false);
                            if (schemeptsChkbx.isSelected()) {
                                java.sql.Statement stmt1cz3 = connectDB.createStatement();
                                java.sql.ResultSet rset1cz3 = stmt1cz3.executeQuery("SELECT account_no,payer_name,usesmartcard FROM ac_schemes WHERE account_no  ILIKE '" + jTextField17.getText() + "'");
                                while (rset1cz3.next()) {
                                    smartcard = rset1cz3.getBoolean(3);
                                }
                                if (smartcard) {
                                    biz.systempartners.claims.PharmacyClaim claimInstance = new biz.systempartners.claims.PharmacyClaim();

                                    claimInstance.createXMLDoc(mainItemstbl, connectDB);
                                }
                            } else {
                                //this for inpatient;
                            }
                            java.sql.Statement stm121x = connectDB.createStatement();

                            java.sql.ResultSet rse121x = stm121x.executeQuery("select direct_rev from pb_patient_names");
                            while (rse121x.next()) {

                                DirectRev = rse121x.getBoolean(1);

                            }
                            java.sql.Statement ps11Y = connectDB.createStatement();
                            java.sql.ResultSet rst11Y = ps11Y.executeQuery("select current_user");
                            while (rst11Y.next()) {
                                user = rst11Y.getObject(1).toString();
                            }
                            java.sql.Statement stm122x = connectDB.createStatement();
                            java.sql.ResultSet rse122x = stm122x.executeQuery("select code,activity from pb_activity where activity_category ='IEDS'");
                            while (rse122x.next()) {

                                discode = rse122x.getObject(1).toString();
                                discglAcc = rse122x.getObject(2).toString();
                            }
                            java.sql.Statement psq = connectDB.createStatement();
                            java.sql.ResultSet rstq = psq.executeQuery("select nextval('prescription_no')");
                            while (rstq.next()) {
                                rstq.getObject(1).toString();

                                prescNo = rstq.getObject(1).toString();

                            }
                            System.out.println(prescNo);
                            java.sql.Statement stmtz = connectDB.createStatement();

                            if (inpatientChkbx.isSelected()) {
                                System.out.println("This is the visit ID " + visitid);
                                // if (jComboBox1.getSelectedItem().toString().equals("Scheme")){
                                java.sql.Statement stm1 = connectDB.createStatement();
                                java.sql.ResultSet rse1 = stm1.executeQuery("select pay_mode,account_no,description,payer,payer,expiry_date,account_no,adm_date from hp_inpatient_register where patient_no ='" + patientNumberTxt.getText() + "'");
                                while (rse1.next()) {

                                    //                payMode = dbObject.getDBObject(rse1.getObject(1), "-");
                                    cardNo = dbObject.getDBObject(rse1.getObject(2), "-");
                                    scheme = dbObject.getDBObject(rse1.getObject(3), "-");
                                    cardName = dbObject.getDBObject(rse1.getObject(4), "-");
                                    isurer = dbObject.getDBObject(rse1.getObject(5), "-");
                                    expDate = rse1.getDate(6);
                                    staffNo = dbObject.getDBObject(rse1.getObject(7), "-");
                                    admDate = rse1.getDate(8);
                                }

                                System.out.println(admDate);
                                // if (exp.before(date)){
                                if (dispenseDatePicker.getDate().before(admDate)) {
                                    javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "Admission date is : " + admDate + " CHECK billing date", "Date Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                                } else {
                                    java.sql.Statement stm126 = connectDB.createStatement();
                                    java.sql.ResultSet rse126 = stm126.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                                    while (rse126.next()) {

                                        patientAcc = rse126.getObject(1).toString();
                                        AccDesc = rse126.getObject(2).toString();
                                    }
                                    System.out.println(AccDesc);
                                    java.sql.Statement ps = connectDB.createStatement();
                                    java.sql.ResultSet rst = ps.executeQuery("select nextval('transaction_no_seq')");
                                    while (rst.next()) {

                                        transNo = rst.getObject(1).toString();
                                    }
                                    System.out.println(transNo);
                                    java.sql.Statement ps11 = connectDB.createStatement();
                                    java.sql.ResultSet rst11 = ps11.executeQuery("select nextval('billing_no_seq'),current_user");
                                    while (rst11.next()) {
                                        rst11.getObject(1).toString();

                                        billNo = rst11.getObject(1).toString();
                                        //    user = rst11.getObject(2).toString();
                                    }
                                    System.out.println(user);
                                    java.sql.Statement stm122 = connectDB.createStatement();
                                    java.sql.ResultSet rse122 = stm122.executeQuery("select code,activity from pb_activity where activity_category ='IP'");
                                    while (rse122.next()) {

                                        code = rse122.getObject(1).toString();
                                        //glAcc = rse122.getObject(2).toString();
                                    }

                                    glAcc = pharmacyCmbx.getSelectedItem().toString();

                                    for (int i = 0; i < mainItemstbl.getRowCount(); i++) {
                                        if (mainItemstbl.getModel().getValueAt(i, 0) != null) {
                                            String drug = null;

                                            if (mainItemstbl.getValueAt(i, 8).toString().equalsIgnoreCase("0") || mainItemstbl.getValueAt(i, 8).toString().equalsIgnoreCase("-")) {
                                                drug = mainItemstbl.getValueAt(i, 0).toString();
                                            } else {
                                                drug = mainItemstbl.getValueAt(i, 0).toString();// + " " + jTable13.getValueAt(i, 8).toString();
                                            }
                                            java.sql.Statement pstz = connectDB.createStatement();
                                            java.sql.ResultSet rsz = pstz.executeQuery("SELECT strength FROM st_stock_prices WHERE product_id = '" + mainItemstbl.getValueAt(i, 7).toString() + "'");
                                            while (rsz.next()) {
                                                strength = rsz.getObject(1).toString();
                                            }

                                            java.sql.Statement pst21c = connectDB.createStatement();
                                            java.sql.ResultSet rs11c = pst21c.executeQuery("select cost_of_sale,stock_code from pb_departments where income_account = '" + mainItemstbl.getValueAt(i, 6).toString() + "'");
                                            while (rs11c.next()) {
                                                costofSaleCode = rs11c.getObject(1).toString();
                                                stockCode = rs11c.getObject(2).toString();
                                            }

                                            java.sql.Statement pst21c1 = connectDB.createStatement();
                                            java.sql.ResultSet rs11c1 = pst21c1.executeQuery("SELECT activity FROM pb_activity WHERE code = '" + mainItemstbl.getValueAt(i, 6).toString() + "'");
                                            while (rs11c1.next()) {
                                                billingDept = rs11c1.getObject(1).toString();

                                            }
                                            java.sql.Statement pst211c = connectDB.createStatement();
                                            java.sql.ResultSet rs111c = pst211c.executeQuery("select activity from pb_activity where code = '" + costofSaleCode + "'");
                                            while (rs111c.next()) {
                                                costofSale = rs111c.getObject(1).toString();

                                            }
                                            java.sql.Statement pst2111c = connectDB.createStatement();
                                            java.sql.ResultSet rs1111c = pst2111c.executeQuery("select activity from pb_activity where code = '" + stockCode + "'");
                                            while (rs1111c.next()) {
                                                stock = rs1111c.getObject(1).toString();
                                            }

                                            presc = java.lang.Double.parseDouble(jTextField82.getText());

                                            Total = java.lang.Double.parseDouble(jTextField32.getText());
                                            if (Total > presc) {
                                                amount1 = java.lang.Double.parseDouble(mainItemstbl.getValueAt(i, 5).toString());

                                                percentage = (amount1 / Total) * 100;

                                                TotalPrice = ((percentage / 100) * presc) + amount1;
                                            } else {
                                                amount1 = java.lang.Double.parseDouble(mainItemstbl.getValueAt(i, 5).toString());

                                                //  percentage = (amount1/Total)*100;
                                                TotalPrice = amount1;
                                            }

                                            java.sql.Statement pstB = connectDB.createStatement();
                                            java.sql.ResultSet rsB = pstB.executeQuery("select transfer_price,units from st_stock_prices where product_id = '" + mainItemstbl.getModel().getValueAt(i, 7) + "'");

                                            while (rsB.next()) {
                                                price = rsB.getDouble(1);
                                                glAcc2 = rsB.getObject(2).toString();
                                                // units = rsB.getString(2);
                                                qty = java.lang.Double.parseDouble(mainItemstbl.getValueAt(i, 1).toString());
                                                sellPrice = java.lang.Double.parseDouble(mainItemstbl.getValueAt(i, 3).toString());
                                                amount = price * qty;
                                            }

                                            System.out.println(price);

                                            if (insertHpPharmacy == Boolean.FALSE) {

                                                // Recording the credit sale for the inventory items in the patient control account in the hp_patient_card (debit patient account)
                                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                                pstmt.setString(1, patientNumberTxt.getText());
                                                pstmt.setObject(2, drug);
                                                pstmt.setString(3, patientCategoryTxt.getText());
                                                pstmt.setString(4, paymentModeCmbx.getSelectedItem().toString());
                                                pstmt.setString(5, transNo);
                                                pstmt.setString(7, scheme);
                                                pstmt.setString(6, cardNo);
                                                pstmt.setString(8, cardName);
                                                pstmt.setString(9, isurer);
                                                pstmt.setDate(10, expDate);
                                                pstmt.setObject(11, doctorPrescribingCmbx.getSelectedItem().toString());
                                                // pstmt.setObject(12,jTable13.getValueAt(i,5).toString());
                                                pstmt.setDouble(12, TotalPrice);
                                                pstmt.setDouble(13, 0.00);
                                                pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dispenseDatePicker.getDate()));
                                                pstmt.setObject(15, patientAcc);
                                                pstmt.setObject(16, billingDept);
                                                pstmt.setDouble(17, qty);
                                                pstmt.setObject(18, staffNo);
                                                pstmt.setBoolean(19, false);
                                                pstmt.setString(20, "Billing");
                                                pstmt.setBoolean(21, false);
                                                pstmt.setString(22, AccDesc);
                                                pstmt.setString(23, visitid);
                                                pstmt.setString(24, user);
                                                pstmt.setString(25, prescNo);
                                                pstmt.setString(26, "IP");
                                                pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                                pstmt.setString(28, visitid);
                                                pstmt.executeUpdate();
                                            }

                                            // Accounting for the sales of inventory on the sales ledger in ac_ledger (credit income account)
                                            java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
                                            pstmt2.setObject(1, mainItemstbl.getModel().getValueAt(i, 6));
                                            pstmt2.setString(2, glAcc);
                                            pstmt2.setString(3, patientNumberTxt.getText());
                                            pstmt2.setString(4, patientNameTxt.getText());
                                            pstmt2.setString(5, "");
                                            pstmt2.setString(6, cardNo);
                                            pstmt2.setString(7, cardName);
                                            pstmt2.setString(8, "IP");
                                            pstmt2.setString(9, isurer);
                                            pstmt2.setString(10, paymentModeCmbx.getSelectedItem().toString());
                                            pstmt2.setString(11, "");
                                            pstmt2.setString(12, "");
                                            pstmt2.setString(13, "");
                                            pstmt2.setString(14, drug);
                                            pstmt2.setString(15, "Revenue");
                                            pstmt2.setDouble(16, 0.00);
                                            pstmt2.setDouble(17, TotalPrice);
                                            pstmt2.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dispenseDatePicker.getDate()));
                                            pstmt2.setString(19, transNo);
                                            pstmt2.setBoolean(20, false);
                                            pstmt2.setBoolean(21, false);
                                            pstmt2.setBoolean(22, false);
                                            pstmt2.setString(23, user);
                                            pstmt2.executeUpdate();

                                            // Crediting the Inventory account in the st_stock_cardex (credit inventory/stock account)
                                            if (!mainItemstbl.getValueAt(i, 0).toString().equalsIgnoreCase("DISPENSING FEE")) {
                                                java.sql.PreparedStatement pstmt1a = connectDB.prepareStatement("INSERT INTO st_stock_cardex values(?,? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                                pstmt1a.setString(1, null);
                                                pstmt1a.setObject(3, drug);
                                                pstmt1a.setObject(2, pharmacyCmbx.getSelectedItem().toString());
                                                pstmt1a.setDate(4, null);
                                                pstmt1a.setDouble(5, amount);
                                                pstmt1a.setDouble(6, 0.00);
                                                pstmt1a.setObject(7, glAcc2);
                                                pstmt1a.setObject(8, "");
                                                pstmt1a.setString(9, null);
                                                pstmt1a.setString(10, null);
                                                pstmt1a.setDouble(11, 0.00);
                                                pstmt1a.setDouble(12, 0.00);
                                                pstmt1a.setDouble(13, 0.00);
                                                if (patientNameTxt.getText().equals("")) {
                                                    javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "Enter patient", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                                } else {
                                                    pstmt1a.setString(14, patientNameTxt.getText());
                                                }

                                                pstmt1a.setString(15, com.afrisoftech.lib.UserName.getLoginName(connectDB));

                                                pstmt1a.setString(16, "");
                                                pstmt1a.setString(17, null);
                                                pstmt1a.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dispenseDatePicker.getDate()));
                                                pstmt1a.setObject(19, pharmacyCmbx.getSelectedItem().toString());
                                                pstmt1a.setString(20, "Issuing");
                                                pstmt1a.setDouble(21, 0.00);
                                                pstmt1a.setString(23, stockCode);
                                                pstmt1a.setDouble(22, 0.00);
                                                pstmt1a.setString(24, "");
                                                pstmt1a.setObject(25, pharmacyCmbx.getSelectedItem().toString());
                                                pstmt1a.setString(26, transNo);
                                                pstmt1a.setDouble(27, java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 1).toString()));
                                                pstmt1a.setString(28, user);
                                                pstmt1a.setBoolean(29, false);
                                                pstmt1a.setDouble(30, 0.00);
                                                pstmt1a.setDate(31, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dispenseDatePicker.getDate()));
                                                pstmt1a.setString(32, mainItemstbl.getValueAt(i, 7).toString());
                                                pstmt1a.setString(33, mainItemstbl.getValueAt(i, 8).toString());

                                                pstmt1a.executeUpdate();

                                                // Accounting for the cos of sales for the inventory items in expenses ledger (debit cost of sale account)
                                                java.sql.PreparedStatement pstmt2a = connectDB.prepareStatement("INSERT INTO ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                                pstmt2a.setObject(1, costofSaleCode);
                                                pstmt2a.setObject(2, costofSale);
                                                pstmt2a.setString(3, patientNumberTxt.getText());
                                                pstmt2a.setString(4, patientNameTxt.getText());
                                                pstmt2a.setString(5, "");
                                                pstmt2a.setString(6, "");
                                                pstmt2a.setString(7, "");
                                                pstmt2a.setString(8, "");
                                                pstmt2a.setString(9, "");
                                                pstmt2a.setString(10, "");
                                                pstmt2a.setString(11, "");
                                                pstmt2a.setString(12, "");
                                                pstmt2a.setString(13, "");
                                                pstmt2a.setString(14, drug);
                                                pstmt2a.setString(15, "Issuing");
                                                pstmt2a.setDouble(16, amount);
                                                pstmt2a.setDouble(17, 0.00);
                                                pstmt2a.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dispenseDatePicker.getDate()));
                                                pstmt2a.setString(19, transNo);
                                                pstmt2a.setBoolean(20, false);
                                                pstmt2a.setBoolean(21, false);
                                                pstmt2a.setBoolean(22, false);
                                                pstmt2a.setString(23, user);
                                                pstmt2a.executeUpdate();
                                            }
                                            // Adjusting the stores inventory level to account for the items leaving the stores (adjust stock item downwards for the sold units)
                                            if (!mainItemstbl.getValueAt(i, 0).toString().equalsIgnoreCase("DISPENSING FEE")) {
                                                java.sql.PreparedStatement pstmt33 = connectDB.prepareStatement("INSERT INTO st_sub_stores VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                                pstmt33.setObject(1, pharmacyCmbx.getSelectedItem().toString());
                                                pstmt33.setObject(2, mainItemstbl.getValueAt(i, 0).toString());
                                                pstmt33.setDouble(4, java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 1).toString()));
                                                pstmt33.setDouble(3, 0);
                                                pstmt33.setDouble(7, 0);
                                                pstmt33.setDouble(5, java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 3).toString()));
                                                pstmt33.setDouble(6, TotalPrice);
                                                pstmt33.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dispenseDatePicker.getDate()));
                                                pstmt33.setString(8, transNo);
                                                pstmt33.setObject(9, doctorPrescribingCmbx.getSelectedItem().toString());
                                                pstmt33.setObject(13, billingDept);
                                                pstmt33.setString(11, user);
                                                pstmt33.setString(12, units);
                                                pstmt33.setString(14, patientNumberTxt.getText() + " " + patientNameTxt.getText());
                                                pstmt33.setDouble(15, amount / java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 1).toString()));
                                                pstmt33.setObject(16, mainItemstbl.getValueAt(i, 7).toString());
                                                pstmt33.setString(17, strength);
                                                pstmt33.executeUpdate();

                                            }

                                            if (inpatientChkbx.isSelected() == true) {

                                                // Update the request from billing units that the request has been served
                                                java.sql.PreparedStatement pstmt311 = connectDB.prepareStatement("UPDATE hp_pharmacy SET collected = true WHERE visit_id='" + visitid + "' and paid = true and prescription_no='" + mainItemstbl.getModel().getValueAt(i, 9) + "' and item_code = '" + mainItemstbl.getModel().getValueAt(i, 7) + "' AND patient_no = '" + patientNumberTxt.getText() + "' AND gl_code = '" + mainItemstbl.getModel().getValueAt(i, 6) + "'");
                                                pstmt311.executeUpdate();
                                            } else {
                                                java.sql.PreparedStatement pstmt311 = connectDB.prepareStatement("UPDATE hp_pharmacy SET collected = true WHERE paid = true and prescription_no='" + mainItemstbl.getModel().getValueAt(i, 9) + "'  "
                                                        + "and manual_pr='" + receiptTxt.getText() + "' and item_code = '" + mainItemstbl.getModel().getValueAt(i, 7) + "' AND patient_no = '" + patientNumberTxt.getText() + "' AND gl_code = '" + mainItemstbl.getModel().getValueAt(i, 6) + "'");
                                                pstmt311.executeUpdate();
                                            }
                                            System.out.println("Collected checked");
                                        }
                                    }
                                    // If there is any discount or waiver on the norminal rate of sale for the inventory item (credit patient account in hp_patient_card)
                                    if (discounte > 0) {
                                        java.sql.PreparedStatement pstmtu = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                        pstmtu.setString(1, patientNumberTxt.getText());
                                        pstmtu.setObject(2, "Discount");
                                        pstmtu.setString(3, patientCategoryTxt.getText());
                                        pstmtu.setString(4, paymentModeCmbx.getSelectedItem().toString());
                                        pstmtu.setString(5, transNo);
                                        pstmtu.setString(7, scheme);
                                        pstmtu.setString(6, cardNo);
                                        pstmtu.setString(8, cardName);
                                        pstmtu.setString(9, isurer);
                                        pstmtu.setDate(10, expDate);
                                        pstmtu.setObject(11, doctorPrescribingCmbx.getSelectedItem().toString());
                                        // pstmt.setObject(12,jTable13.getValueAt(i,5).toString());
                                        pstmtu.setDouble(12, 0.00);
                                        pstmtu.setDouble(13, java.lang.Double.valueOf(dispenseDiscountAmountTxt.getText()));
                                        pstmtu.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dispenseDatePicker.getDate()));
                                        pstmtu.setObject(15, patientAcc);
                                        pstmtu.setObject(16, pharmacyCmbx.getSelectedItem().toString());
                                        pstmtu.setDouble(17, 1);
                                        pstmtu.setObject(18, staffNo);
                                        pstmtu.setBoolean(19, false);
                                        pstmtu.setString(20, "Billing");
                                        pstmtu.setBoolean(21, false);
                                        pstmtu.setString(22, AccDesc);
                                        pstmtu.setString(23, visitid);
                                        pstmtu.setString(24, user);
                                        pstmtu.setString(25, prescNo);
                                        pstmtu.setString(26, "IP");
                                        pstmtu.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                        pstmtu.setString(28, visitid);
                                        pstmtu.executeUpdate();

                                        // Reduce the sale by discount/waiver amount on sales ledger (Debit sales account in ac_ledger)
                                        java.sql.PreparedStatement pstmt2v = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
                                        pstmt2v.setString(1, discode);
                                        pstmt2v.setString(2, discglAcc);
                                        pstmt2v.setString(3, patientNumberTxt.getText());
                                        pstmt2v.setString(4, patientNameTxt.getText());
                                        pstmt2v.setString(5, "");
                                        pstmt2v.setString(6, cardNo);
                                        pstmt2v.setString(7, cardName);
                                        pstmt2v.setString(8, "IP");
                                        pstmt2v.setString(9, isurer);
                                        pstmt2v.setString(10, paymentModeCmbx.getSelectedItem().toString());
                                        pstmt2v.setString(11, "");
                                        pstmt2v.setString(12, "");
                                        pstmt2v.setString(13, "");
                                        pstmt2v.setString(14, "Discount");
                                        pstmt2v.setString(15, "Revenue");
                                        pstmt2v.setDouble(16, java.lang.Double.valueOf(dispenseDiscountAmountTxt.getText().toString()));
                                        pstmt2v.setDouble(17, 0.00);
                                        // pstmt2.setObject(17,jTable13.getValueAt(i,5).toString());
                                        pstmt2v.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dispenseDatePicker.getDate()));
                                        pstmt2v.setString(19, transNo);
                                        pstmt2v.setBoolean(20, false);
                                        pstmt2v.setBoolean(21, false);
                                        pstmt2v.setBoolean(22, false);
                                        pstmt2v.setString(23, user);
                                        pstmt2v.executeUpdate();

                                    }

                                }
                            } else {
                                /// dealing with out-patients

                                if (schemeptsChkbx.isSelected()) {

                                    if (paymentModeCmbx.getSelectedItem().toString().equals("Scheme")) {
                                        java.sql.Statement stm1q = connectDB.createStatement();
                                        java.sql.ResultSet rse1 = stm1q.executeQuery("select pay_mode,account_no,description,payer,payer,expiry_date,account_no from hp_patient_register where patient_no ='" + patientNumberTxt.getText() + "'");

                                        while (rse1.next()) {

                                            payMode = dbObject.getDBObject(rse1.getObject(1), "-");
                                            cardNo = dbObject.getDBObject(rse1.getObject(2), "-");
                                            scheme = dbObject.getDBObject(rse1.getObject(3), "-");
                                            cardName = dbObject.getDBObject(rse1.getObject(4), "-");
                                            isurer = dbObject.getDBObject(rse1.getObject(5), "-");
                                            expDate = rse1.getDate(6);
                                            staffNo = dbObject.getDBObject(rse1.getObject(7), "-");
                                        }
                                    }
                                } else {
                                }
                                System.out.println(staffNo);

                                java.sql.Statement stm126 = connectDB.createStatement();
                                java.sql.ResultSet rse126 = stm126.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                                while (rse126.next()) {

                                    patientAcc = rse126.getObject(1).toString();
                                    AccDesc = rse126.getObject(2).toString();
                                }
                                System.out.println(AccDesc);
                                //  connectDB.setAutoCommit(false);
                                java.sql.Statement ps = connectDB.createStatement();
                                java.sql.ResultSet rst = ps.executeQuery("select nextval('transaction_no_seq')");
                                while (rst.next()) {
                                    rst.getObject(1).toString();

                                    transNo = rst.getObject(1).toString();
                                }
                                /*
                                 * if (this.jCheckBox2.isSelected()) {
                                 * jTextField92.setText("WK" + prescNo); }
                                 */
                                if (paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {
                                    if (walkinPtchbx.isSelected()) {
                                        java.sql.Statement pss1 = connectDB.createStatement();
                                        java.sql.ResultSet rss1 = pss1.executeQuery("select 'O'||(nextval('pinvoice_no_seq'))");
                                        while (rss1.next()) {
                                            invoiceNo = rss1.getObject(1).toString();
                                        }
                                    }

                                }
                                System.out.println(transNo);

                                System.out.println(user);
                                java.sql.Statement stm122 = connectDB.createStatement();
                                java.sql.ResultSet rse122 = stm122.executeQuery("select code,activity from pb_activity where activity_category ='IP'");
                                while (rse122.next()) {

                                    code = rse122.getObject(1).toString();
                                    glAcc = rse122.getObject(2).toString();
                                }
                                System.out.println(glAcc);

                                for (int i = 0; i < mainItemstbl.getRowCount(); i++) {
                                    if (mainItemstbl.getModel().getValueAt(i, 0) != null) {
                                        String drug = null;

                                        if (mainItemstbl.getValueAt(i, 8).toString().equalsIgnoreCase("0") || mainItemstbl.getValueAt(i, 8).toString().equalsIgnoreCase("-")) {
                                            drug = mainItemstbl.getValueAt(i, 0).toString();
                                        } else {
                                            drug = mainItemstbl.getValueAt(i, 0).toString();// + " " + jTable13.getValueAt(i, 8).toString();
                                        }
                                        java.sql.Statement pstz = connectDB.createStatement();
                                        java.sql.ResultSet rsz = pstz.executeQuery("SELECT strength FROM st_stock_prices WHERE product_id = '" + mainItemstbl.getValueAt(i, 7).toString() + "'");
                                        while (rsz.next()) {
                                            strength = rsz.getObject(1).toString();
                                        }
                                        java.sql.Statement pst21c = connectDB.createStatement();
                                        java.sql.ResultSet rs11c = pst21c.executeQuery("select cost_of_sale,stock_code from pb_departments where income_account = '" + mainItemstbl.getValueAt(i, 6).toString() + "'");
                                        while (rs11c.next()) {
                                            costofSaleCode = rs11c.getObject(1).toString();
                                            stockCode = rs11c.getObject(2).toString();
                                        }
                                        java.sql.Statement pst211c = connectDB.createStatement();
                                        java.sql.ResultSet rs111c = pst211c.executeQuery("select activity from pb_activity where code = '" + costofSaleCode + "'");
                                        while (rs111c.next()) {
                                            costofSale = rs111c.getObject(1).toString();

                                        }
                                        java.sql.Statement pst2111c = connectDB.createStatement();
                                        java.sql.ResultSet rs1111c = pst2111c.executeQuery("select activity from pb_activity where code = '" + stockCode + "'");
                                        while (rs1111c.next()) {
                                            stock = rs1111c.getObject(1).toString();
                                        }
                                        presc = java.lang.Double.parseDouble(jTextField82.getText());

                                        Total = java.lang.Double.parseDouble(jTextField32.getText());
                                        if (Total > presc) {
                                            amount1 = java.lang.Double.parseDouble(mainItemstbl.getValueAt(i, 5).toString());

                                            percentage = (amount1 / Total) * 100;

                                            TotalPrice = ((percentage / 100) * presc) + amount1;
                                        } else {
                                            amount1 = java.lang.Double.parseDouble(mainItemstbl.getValueAt(i, 5).toString());

                                            //  percentage = (amount1/Total)*100;
                                            TotalPrice = amount1;
                                        }
                                        java.sql.Statement stm121 = connectDB.createStatement();
                                        java.sql.ResultSet rse121 = stm121.executeQuery("select units from st_stock_item where description ='" + mainItemstbl.getModel().getValueAt(i, 0).toString() + "'");
                                        while (rse121.next()) {

                                            glAcc2 = rse121.getObject(1).toString();
                                            System.out.println(glAcc2);
                                        }
                                        java.sql.Statement pstB = connectDB.createStatement();
                                        java.sql.ResultSet rsB = pstB.executeQuery("select transfer_price,units from st_stock_prices where product_id = '" + mainItemstbl.getModel().getValueAt(i, 7) + "'");

                                        while (rsB.next()) {
                                            price = rsB.getDouble(1);
                                            // units = rsB.getString(2);
                                            qty = java.lang.Double.parseDouble(mainItemstbl.getValueAt(i, 1).toString());
                                            sellPrice = java.lang.Double.parseDouble(mainItemstbl.getValueAt(i, 3).toString());
                                            amount = price * qty;
                                        }

                                        System.out.println(price);

                                        java.sql.Statement pst2111cx = connectDB.createStatement();
                                        java.sql.ResultSet rs1111cx = pst2111cx.executeQuery("select activity from pb_activity where code = '" + stockCode + "'");
                                        while (rs1111cx.next()) {
                                            stock = rs1111cx.getObject(1).toString();
                                        }

                                        // Account for the stock removal from store (credit stock account in st_stock_cardex)
                                        if (!mainItemstbl.getValueAt(i, 0).toString().equalsIgnoreCase("DISPENSING FEE")) {
                                            java.sql.PreparedStatement pstmt1a = connectDB.prepareStatement("INSERT INTO st_stock_cardex values(?,? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                            pstmt1a.setString(1, null);
                                            pstmt1a.setObject(3, drug);
                                            pstmt1a.setObject(2, pharmacyCmbx.getSelectedItem().toString());
                                            pstmt1a.setDate(4, null);
                                            pstmt1a.setDouble(5, amount);
                                            pstmt1a.setDouble(6, 0.00);
                                            pstmt1a.setObject(7, glAcc2);
                                            pstmt1a.setObject(8, "");
                                            pstmt1a.setString(9, null);
                                            pstmt1a.setString(10, null);
                                            pstmt1a.setDouble(11, 00);
                                            pstmt1a.setDouble(12, 00);
                                            pstmt1a.setDouble(13, 00);
                                            if (patientNameTxt.getText().equals("")) {
                                                javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "Enter patient", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                            } else {
                                                pstmt1a.setString(14, patientNameTxt.getText());
                                            }

                                            pstmt1a.setString(15, com.afrisoftech.lib.UserName.getLoginName(connectDB));

                                            pstmt1a.setString(16, "");

                                            pstmt1a.setString(17, null);
                                            pstmt1a.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dispenseDatePicker.getDate()));
                                            pstmt1a.setObject(19, pharmacyCmbx.getSelectedItem().toString());
                                            pstmt1a.setString(20, "Issuing");
                                            pstmt1a.setDouble(21, 00);
                                            pstmt1a.setString(23, stockCode);
                                            pstmt1a.setDouble(22, 00);
                                            pstmt1a.setString(24, "");
                                            pstmt1a.setObject(25, pharmacyCmbx.getSelectedItem().toString());
                                            pstmt1a.setString(26, transNo);
                                            pstmt1a.setDouble(27, qty);
                                            pstmt1a.setString(28, com.afrisoftech.lib.UserName.getLoginName(connectDB));
                                            pstmt1a.setBoolean(29, false);
                                            pstmt1a.setDouble(30, 0.00);
                                            pstmt1a.setDate(31, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dispenseDatePicker.getDate()));
                                            pstmt1a.setString(32, mainItemstbl.getValueAt(i, 7).toString());
                                            pstmt1a.setString(33, mainItemstbl.getValueAt(i, 8).toString());
                                            pstmt1a.executeUpdate();

                                            // Account for the cost of sale on the stock expense account in the ledger (debit the cost of sale account in ac_ledger)
                                            java.sql.PreparedStatement pstmt2a = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                            pstmt2a.setObject(1, costofSaleCode);
                                            pstmt2a.setObject(2, costofSale);
                                            pstmt2a.setString(3, patientNumberTxt.getText());
                                            pstmt2a.setString(4, patientNameTxt.getText());
                                            pstmt2a.setString(5, "");
                                            pstmt2a.setString(6, "");
                                            pstmt2a.setString(7, "");
                                            pstmt2a.setString(8, "");
                                            pstmt2a.setString(9, "");
                                            pstmt2a.setString(10, "");
                                            pstmt2a.setString(11, "");
                                            pstmt2a.setString(12, "");
                                            pstmt2a.setString(13, "");
                                            pstmt2a.setString(14, drug);
                                            pstmt2a.setString(15, "Issuing");
                                            pstmt2a.setDouble(16, amount);
                                            pstmt2a.setDouble(17, 00);
                                            pstmt2a.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dispenseDatePicker.getDate()));
                                            pstmt2a.setString(19, transNo);
                                            pstmt2a.setBoolean(20, false);
                                            pstmt2a.setBoolean(21, false);
                                            pstmt2a.setBoolean(22, false);
                                            pstmt2a.setString(23, com.afrisoftech.lib.UserName.getLoginName(connectDB));
                                            pstmt2a.executeUpdate();
                                            // StockCountingintfr
                                        }
                                        // Adjust the stock item level downwards from the respective store
                                        if (!mainItemstbl.getValueAt(i, 0).toString().equalsIgnoreCase("DISPENSING FEE")) {
                                            java.sql.PreparedStatement pstmt33 = connectDB.prepareStatement("insert into st_sub_stores values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                            pstmt33.setObject(1, pharmacyCmbx.getSelectedItem().toString());
                                            pstmt33.setObject(2, mainItemstbl.getValueAt(i, 0).toString());
                                            pstmt33.setDouble(3, 0.00);
                                            pstmt33.setDouble(4, java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 1).toString()));
                                            pstmt33.setDouble(7, 0.00);
                                            pstmt33.setDouble(5, java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 3).toString()));
                                            pstmt33.setDouble(6, TotalPrice);
                                            pstmt33.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dispenseDatePicker.getDate()));
                                            pstmt33.setString(8, transNo);
                                            pstmt33.setObject(9, doctorPrescribingCmbx.getSelectedItem().toString());
                                            pstmt33.setString(11, user);
                                            pstmt33.setString(12, units);
                                            pstmt33.setObject(13, pharmacyCmbx.getSelectedItem().toString());
                                            pstmt33.setString(14, patientNumberTxt.getText() + " " + patientNameTxt.getText());
                                            pstmt33.setDouble(15, amount / java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 1).toString()));
                                            pstmt33.setObject(17, mainItemstbl.getValueAt(i, 8).toString());
                                            pstmt33.setObject(16, mainItemstbl.getValueAt(i, 7).toString());
                                            pstmt33.executeUpdate();
                                        }
                                        if (!paymentModeCmbx.getSelectedItem().equals("Scheme")) {
                                            java.sql.PreparedStatement pstmt311 = connectDB.prepareStatement("UPDATE hp_pharmacy SET collected = true WHERE paid = true and prescription_no='" + mainItemstbl.getModel().getValueAt(i, 9) + "'  "
                                                    + "and manual_pr='" + receiptTxt.getText() + "' and item_code = '" + mainItemstbl.getModel().getValueAt(i, 7) + "' AND patient_no = '" + patientNumberTxt.getText() + "' AND gl_code = '" + mainItemstbl.getModel().getValueAt(i, 6) + "'");
                                            pstmt311.executeUpdate();
                                        }
                                        if (paymentModeCmbx.getSelectedItem().equals("Scheme")) {

                                            if (insertHpPharmacy == Boolean.FALSE) {

                                                java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("INSERT INTO hp_pharmacy values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                                pstmt1.setString(1, patientNumberTxt.getText());
                                                pstmt1.setString(2, patientNameTxt.getText());
                                                pstmt1.setObject(3, java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 1).toString()));
                                                pstmt1.setDouble(4, TotalPrice);
                                                //  pstmt1.setObject(4,jTable13.getValueAt(i,5).toString());
                                                pstmt1.setObject(5, drug);
                                                pstmt1.setDouble(7, java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 3).toString()));
                                                pstmt1.setObject(8, mainItemstbl.getValueAt(i, 6).toString());
                                                pstmt1.setBoolean(6, false);
                                                pstmt1.setString(9, prescNo);
                                                pstmt1.setObject(10, doctorPrescribingCmbx.getSelectedItem().toString());
                                                pstmt1.setBoolean(11, true);
                                                pstmt1.setString(12, glAcc2);
                                                pstmt1.setDate(13, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dispenseDatePicker.getDate()));
                                                pstmt1.setObject(14, pharmacyCmbx.getSelectedItem().toString());
                                                pstmt1.setString(15, "OP");
                                                pstmt1.setString(16, paymentModeCmbx.getSelectedItem().toString());
                                                pstmt1.setString(17, "-");
                                                pstmt1.setDouble(18, TotalPrice - amount1);
                                                pstmt1.setString(19, user);
                                                pstmt1.setString(20, jTextField5.getText());
                                                pstmt1.setString(21, receiptTxt.getText());
                                                pstmt1.setObject(22, mainItemstbl.getValueAt(i, 7).toString());
                                                pstmt1.setObject(23, mainItemstbl.getValueAt(i, 8).toString());
                                                pstmt1.executeUpdate();
                                            }
                                            // Account for the bill to the patient on the patient control account (Debit the patient control account in hp_patient_card)
                                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                            pstmt.setString(1, patientNumberTxt.getText());
                                            pstmt.setObject(2, drug);
                                            pstmt.setString(3, patientCategoryTxt.getText());
                                            pstmt.setString(4, paymentModeCmbx.getSelectedItem().toString());
                                            pstmt.setString(5, transNo);
                                            pstmt.setString(7, scheme);
                                            pstmt.setString(6, cardNo);
                                            pstmt.setString(8, cardName);
                                            pstmt.setString(9, isurer);
                                            pstmt.setDate(10, expDate);
                                            pstmt.setObject(11, doctorPrescribingCmbx.getSelectedItem().toString());
                                            pstmt.setDouble(12, TotalPrice);
                                            pstmt.setDouble(13, 0.00);
                                            pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dispenseDatePicker.getDate()));
                                            pstmt.setObject(15, patientAcc);
                                            pstmt.setObject(16, pharmacyCmbx.getSelectedItem().toString());
                                            pstmt.setObject(17, qty);
                                            pstmt.setObject(18, staffNo);
                                            pstmt.setBoolean(19, false);
                                            pstmt.setString(20, "Billing");
                                            pstmt.setBoolean(21, false);
                                            pstmt.setString(22, AccDesc);
                                            pstmt.setString(23, invoiceNo);
                                            pstmt.setString(24, user);
                                            pstmt.setString(25, prescNo);
                                            pstmt.setString(26, "OP");
                                            pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                            pstmt.setString(28, visitid);
                                            pstmt.executeUpdate();

                                            // Accounting for the sale of stock items in the sale ledger (Credit the inventory sales account on ac_ledger e.g. pharmacy sales account)
                                            java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
                                            pstmt2.setObject(1, mainItemstbl.getModel().getValueAt(i, 6));
                                            pstmt2.setString(2, glAcc);
                                            pstmt2.setString(3, patientNumberTxt.getText());
                                            pstmt2.setString(4, patientNameTxt.getText());
                                            pstmt2.setString(5, "");
                                            pstmt2.setString(6, cardNo);
                                            pstmt2.setString(7, cardName);
                                            pstmt2.setString(8, "OP");
                                            pstmt2.setString(9, isurer);
                                            pstmt2.setString(10, paymentModeCmbx.getSelectedItem().toString());
                                            pstmt2.setString(11, "");
                                            pstmt2.setString(12, "");
                                            pstmt2.setString(13, "");
                                            pstmt2.setString(14, drug);
                                            pstmt2.setString(15, "Revenue");
                                            pstmt2.setDouble(16, 0.00);
                                            pstmt2.setDouble(17, TotalPrice);
                                            // pstmt2.setObject(17,jTable13.getValueAt(i,5).toString());
                                            pstmt2.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dispenseDatePicker.getDate()));
                                            pstmt2.setString(19, transNo);
                                            pstmt2.setBoolean(20, false);
                                            pstmt2.setBoolean(21, false);
                                            pstmt2.setBoolean(22, false);
                                            pstmt2.setString(23, user);
                                            pstmt2.executeUpdate();

                                            System.out.println("This is pharmacy");

                                            java.sql.PreparedStatement pstmt311 = connectDB.prepareStatement("UPDATE hp_pharmacy SET collected = true WHERE paid = true and prescription_no='" + mainItemstbl.getModel().getValueAt(i, 9) + "' and item_code = '" + mainItemstbl.getModel().getValueAt(i, 7) + "' AND patient_no = '" + patientNumberTxt.getText() + "' AND gl_code = '" + mainItemstbl.getModel().getValueAt(i, 6) + "'");
                                            pstmt311.executeUpdate();

                                        }

                                        double quantity = Double.parseDouble(mainItemstbl.getModel().getValueAt(i, 1).toString());

                                    }

                                }

                            }

                            connectDB.commit();
                            connectDB.setAutoCommit(true);
                            javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "Insert Done Successfully " + transNo, "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                            jTextField32.setText("0.00");
                            dispenseBillTotalTxt.setText("0.00");
                            jButton32.doClick();
                            for (int k = 0; k < mainItemstbl.getRowCount(); k++) {
                                for (int r = 0; r < mainItemstbl.getColumnCount(); r++) {
                                    mainItemstbl.getModel().setValueAt(null, k, r);
                                }
                            }
                        }
                    }
                    insertHpPharmacy = false;

                } catch (java.sql.SQLException sq) {
                    sq.printStackTrace();
                    insertHpPharmacy = false;
                    try {
                        connectDB.rollback(registerSavePoint);
                    } catch (java.sql.SQLException sql) {
                        javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                    System.out.println(sq.getMessage());
                    javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                }

            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addServiceFee;
    private javax.swing.JCheckBox allPharmacistsChBx;
    private javax.swing.JTable availableDrugsQtysTbl;
    private javax.swing.JPanel availableQuantitiesPanel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup21;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JLabel cardBalanceLbl;
    private javax.swing.JTextField cardbaltxtfld;
    public static javax.swing.JButton closeBtn;
    private javax.swing.JCheckBox currentUserChBx;
    private static javax.swing.JTextField dispenseBillTotalTxt;
    private javax.swing.JPanel dispenseBodyPanel;
    private javax.swing.JLabel dispenseDateLbl;
    private com.afrisoftech.lib.DatePicker dispenseDatePicker;
    private javax.swing.JTextField dispenseDiscountAmountTxt;
    private javax.swing.JTextField dispenseDiscountPaercentTxt;
    private javax.swing.JPanel dispenseHeader2panel;
    private javax.swing.JPanel dispenseHeaderPanel;
    public static javax.swing.JTextField dispenseNetBillTxt;
    private javax.swing.JCheckBox dispensePaharmacyDonationsChkbx;
    private javax.swing.JPanel dispensePanel;
    private javax.swing.JCheckBox dispensePharmacyChbx;
    private javax.swing.JTextField dispensePharmacyPanel;
    private javax.swing.JPanel dispenseSearchPatientPanel;
    private javax.swing.JPanel dispenseSearchPatientTypePanel;
    private javax.swing.JButton dispose11;
    private javax.swing.JComboBox doctorPrescribingCmbx;
    private javax.swing.JLabel doctorPrescribingLbl;
    private javax.swing.JComboBox drugsCmbx;
    private com.afrisoftech.lib.DatePicker endworkloadDate;
    private javax.swing.JTextField gLCodeTxt;
    private javax.swing.JCheckBox inpatientChkbx;
    private javax.swing.JTextField inpatientsTXT;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton121;
    private javax.swing.JButton jButton122;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton32;
    private javax.swing.JButton jButton4212;
    private javax.swing.JButton jButton42121;
    private javax.swing.JButton jButton5212;
    private javax.swing.JButton jButton52121;
    private javax.swing.JButton jButton54;
    private javax.swing.JButton jButton63;
    public static javax.swing.JButton jButton7;
    private javax.swing.JButton jButton92;
    private javax.swing.JButton jButton93;
    private javax.swing.JComboBox jComboBox1311;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel532;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel641;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JDialog jSearchDialog13;
    private javax.swing.JDialog jSearchDialog212;
    private javax.swing.JDialog jSearchDialog2121;
    private javax.swing.JDialog jSearchDialog4;
    private javax.swing.JPanel jSearchPanel13;
    private javax.swing.JPanel jSearchPanel212;
    private javax.swing.JPanel jSearchPanel2121;
    private javax.swing.JPanel jSearchPanel213;
    private javax.swing.JPanel jSearchPanel3;
    private javax.swing.JScrollPane jSearchScrollPane13;
    private javax.swing.JScrollPane jSearchScrollPane212;
    private javax.swing.JScrollPane jSearchScrollPane2121;
    private javax.swing.JScrollPane jSearchScrollPane3;
    private javax.swing.JScrollPane jSearchScrollPane4;
    private javax.swing.JTable jSearchTable13;
    private javax.swing.JTable jSearchTable212;
    private javax.swing.JTable jSearchTable2121;
    private javax.swing.JTable jSearchTable3;
    private javax.swing.JTable jSearchTable4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField jTextField1113;
    private javax.swing.JTextField jTextField11312;
    private javax.swing.JTextField jTextField113121;
    private javax.swing.JTextField jTextField114;
    private javax.swing.JTextField jTextField115;
    private javax.swing.JTextField jTextField14;
    public static javax.swing.JTextField jTextField16;
    public static javax.swing.JTextField jTextField17;
    public static javax.swing.JTextField jTextField18;
    public static javax.swing.JTextField jTextField19;
    public static javax.swing.JTextField jTextField20;
    public static javax.swing.JTextField jTextField21;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField32;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField82;
    public static javax.swing.JTable mainItemstbl;
    private javax.swing.JDialog medicineSearchdialog;
    private javax.swing.JTextField outpatientTxt;
    private javax.swing.JPanel patientBillPanel;
    private javax.swing.JTable patientBilltbl;
    private javax.swing.JTextField patientCategoryTxt;
    private javax.swing.JTextField patientCountTxt;
    private javax.swing.JButton patientCradBtn;
    public static javax.swing.JTextField patientNameTxt;
    private javax.swing.JPanel patientNumberSearchPanel;
    public static javax.swing.JTextField patientNumberTxt;
    private javax.swing.JButton patientPrescbtn;
    private com.afrisoftech.lib.DatePicker patientPrescriptionDt;
    private javax.swing.JTable patientPresctbl;
    private javax.swing.JButton patientSearchbtn;
    private javax.swing.JComboBox paymentModeCmbx;
    private javax.swing.JLabel paymentModeLbl;
    private javax.swing.JPanel pharmacistActionPanel;
    private javax.swing.JPanel pharmacistWorkLoadPanel;
    private javax.swing.JTable pharmacistWorkloadTbl;
    private javax.swing.JComboBox pharmacyCmbx;
    private javax.swing.JTabbedPane pharmacyTabbedPane;
    private javax.swing.JPanel prescriptionsHistoryPanel;
    private javax.swing.JButton printInterimbtn;
    private javax.swing.JLabel receiptNoLbl;
    private javax.swing.JTextField receiptTxt;
    private javax.swing.JPanel reportPanel;
    private javax.swing.JTextField requisitionNoTxt;
    private javax.swing.JTable requisitionsformTBl;
    private javax.swing.JTextField schemepatientTxt;
    private javax.swing.JCheckBox schemeptsChkbx;
    private javax.swing.JButton searchButton3;
    private javax.swing.JCheckBox searchDrugByCodeChkbx;
    private javax.swing.JCheckBox searchDrugByDescriptionChkbx;
    private javax.swing.JCheckBox searchNameChbx;
    private javax.swing.JCheckBox searchNoChkbx;
    private javax.swing.JButton searchReceiptBtn;
    private javax.swing.JPanel searchReceiptNoPanel;
    private javax.swing.JPanel spacerPanel;
    private com.afrisoftech.lib.DatePicker startworkloadDate;
    private javax.swing.JTextField totalItemDispensedtxt;
    private javax.swing.JTextField totalRevenueTxt;
    private javax.swing.JLabel totalRevenuelb;
    private javax.swing.JCheckBox walkinPtchbx;
    private javax.swing.JLabel wardNameLbl;
    private javax.swing.JTextField wardNameTxt;
    private javax.swing.JButton workloadBtn;
    private javax.swing.ButtonGroup workloadBtnGrp;
    // End of variables declaration//GEN-END:variables
}
