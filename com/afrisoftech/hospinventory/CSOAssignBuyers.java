/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.afrisoftech.hospinventory;

import com.afrisoftech.lib.ClearTable;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.sql.ResultSet;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author sytem partners
 */
public class CSOAssignBuyers extends javax.swing.JPanel {

    /**
     * Creates new form CSOAssignBuyers
     */
    JComboBox cmbox51 = new javax.swing.JComboBox();
    String userName, agendaNo;
    java.sql.Connection connectDB = null;
    String buyer_section = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    java.lang.String Designation = null;

    public CSOAssignBuyers(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB, java.lang.String designation) {

        connectDB = connDb;

        pConnDB = pconnDB;

        Designation = designation;

        initComponents();
        populateTable();
        TransTypeTxt.setForeground(Color.red);
        TransTypeTxt.setText("Forwarding PR To Buyers");

        DeptToSort.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT department_name from pb_departments "));
        // cmbox51.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT  buyer_name  FROM st_buyers_register"));
        cmbox51.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT  distinct user_name from section_allocation where status=true"));

        ///loading the assigning  buyers table
        populateTable();
        //a query to fill the remaining details

        // java.sql.Statement stmt;
//        try {
//            stmt = connectDB.createStatement();
//             java.sql.ResultSet rset = stmt.executeQuery("SELECT distinct S.requisition_no,S.cost_center,S.user_name,S.date,S.store_name FROM st_receive_requisation as S,st_assign_buyers as B WHERE B.requisition_no=S.requisition_no and  B.buyer is null and  S.approval_status=TRUE AND S.assigned_buyer_flag=FALSE");
//          int rows=0;
//            while (rset.next()) {
//               
//              
//              BuyersAssignmentTbl.setValueAt(rows+1,rows,0);
//              BuyersAssignmentTbl.setValueAt(rset.getString(1),rows,1);
//              BuyersAssignmentTbl.setValueAt(rset.getString(2),rows,2);
//              BuyersAssignmentTbl.setValueAt(rset.getString(5),rows,3);
//              BuyersAssignmentTbl.setValueAt(rset.getString(3),rows,4);
//             // BuyersAssignmentTbl.setValueAt(rset.getString(5),rows,4);
//              BuyersAssignmentTbl.setValueAt(rset.getString(4),rows,5);
//              
//             
//                            
//              //incrementing the rows
//              rows++;
//              
//              
//              
//             
//               
//               
//           }
//            java.sql.Statement pst2 = connectDB.createStatement();
//            java.sql.ResultSet rs = pst2.executeQuery("select current_user");
//            while (rs.next()) {
//                userName = rs.getObject(1).toString();
//            }
//            jTextField2.setText(userName);
//        }
//        catch(Exception e)
//        {
//          e.printStackTrace();
//          System.out.println(e.getMessage());
//        }
    }

    public void setColumnAlignmentCenter(javax.swing.JTable thisOne, int column) {

        /////setting the column 1 alignment to center
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        thisOne.getColumnModel().getColumn(column).setCellRenderer(centerRenderer);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        HeaderBuyersPane = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        TransTypeTxt = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        DeptToSort = new javax.swing.JComboBox();
        datePicker2 = new com.afrisoftech.lib.DatePicker();
        PrTablesPane = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        BuyersAssignmentTbl = new javax.swing.JTable();
        ActionBuyersPane = new javax.swing.JPanel();
        postbtn = new javax.swing.JButton();
        resetbtn = new javax.swing.JButton();
        cancelbtn = new javax.swing.JButton();
        exitbtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        HeaderBuyersPane.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Transaction Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 10, 0);
        HeaderBuyersPane.add(jLabel1, gridBagConstraints);

        jLabel2.setText("User");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 10, 0);
        HeaderBuyersPane.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Sort By Dept");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 10, 0);
        HeaderBuyersPane.add(jLabel3, gridBagConstraints);

        jLabel4.setText("Date Assigned");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 10, 0);
        HeaderBuyersPane.add(jLabel4, gridBagConstraints);

        TransTypeTxt.setEditable(false);
        TransTypeTxt.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        TransTypeTxt.setForeground(new java.awt.Color(255, 0, 51));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 100);
        HeaderBuyersPane.add(TransTypeTxt, gridBagConstraints);

        jTextField2.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 100);
        HeaderBuyersPane.add(jTextField2, gridBagConstraints);

        DeptToSort.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 100);
        HeaderBuyersPane.add(DeptToSort, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 100);
        HeaderBuyersPane.add(datePicker2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        add(HeaderBuyersPane, gridBagConstraints);

        PrTablesPane.setLayout(new java.awt.GridBagLayout());

        BuyersAssignmentTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "#", "PR No. ", "Dept Raised To", "Dept Raised from", "Raised By", "Date Raised", "Assigned to", "Buyers Section"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        /*javax.swing.table.TableColumn seditor11 = this.BuyersAssignmentTbl.getColumn("Assigned to");

        seditor11.setCellEditor(new javax.swing.DefaultCellEditor(cmbox51));
        */
        cmbox51.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {

                cmbox51ActionPerformed(evt);
            }
        });

        javax.swing.table.TableColumn teditor2 = this.BuyersAssignmentTbl.getColumn("Assigned to");
        teditor2.setCellEditor(new javax.swing.DefaultCellEditor(cmbox51));
        BuyersAssignmentTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BuyersAssignmentTblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(BuyersAssignmentTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        PrTablesPane.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 9.0;
        add(PrTablesPane, gridBagConstraints);

        ActionBuyersPane.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        ActionBuyersPane.setLayout(new java.awt.GridBagLayout());

        postbtn.setMnemonic('s');
        postbtn.setText("Save");
        postbtn.setPreferredSize(new java.awt.Dimension(123, 25));
        postbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ActionBuyersPane.add(postbtn, gridBagConstraints);

        resetbtn.setText("Refresh");
        resetbtn.setPreferredSize(new java.awt.Dimension(123, 25));
        resetbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ActionBuyersPane.add(resetbtn, gridBagConstraints);

        cancelbtn.setMnemonic('l');
        cancelbtn.setText("Clear");
        cancelbtn.setPreferredSize(new java.awt.Dimension(123, 25));
        cancelbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ActionBuyersPane.add(cancelbtn, gridBagConstraints);

        exitbtn.setMnemonic('c');
        exitbtn.setText("Close");
        exitbtn.setPreferredSize(new java.awt.Dimension(123, 25));
        exitbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ActionBuyersPane.add(exitbtn, gridBagConstraints);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        ActionBuyersPane.add(jLabel5, gridBagConstraints);

        jButton1.setMnemonic('r');
        jButton1.setText("Remove Row");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        ActionBuyersPane.add(jButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 10);
        add(ActionBuyersPane, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void BuyersAssignmentTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BuyersAssignmentTblMouseClicked

        //if(BuyersAssignmentTbl.getSelectedColumn()==6){
        //}
////view more details  of a PR
        String Preq = null;
        int selectedRow, selColumn;
        selectedRow = BuyersAssignmentTbl.getSelectedRow();
        selColumn = BuyersAssignmentTbl.getSelectedColumn();

        if (selectedRow >= 0 && selColumn == 1) {
            Preq = BuyersAssignmentTbl.getValueAt(BuyersAssignmentTbl.getSelectedRow(), 1).toString();
            //JOptionPane.showMessageDialog(null,Preq);
            if (Preq == null) {

                String str = "<html><center><font color=red>YOU NEED TO SELECT A PR TO VIEW ITS ITEMS</font></center></html>";
                JOptionPane.showMessageDialog(null, str, "ERROR MESSAGE", 1, new javax.swing.ImageIcon(getClass().getResource("/Icons/32x32/Recycle Bin Full 1.png")));
            } else {
                ZoomBuyerPrDetailsTable m = new ZoomBuyerPrDetailsTable(null, true, connectDB, Preq);
                m.setVisible(true);
            }
        }
    }//GEN-LAST:event_BuyersAssignmentTblMouseClicked
    public void populateTable() {
//        for (int k = 0; k < BuyersAssignmentTbl.getRowCount(); k++) {
//   for (int r = 0; r < BuyersAssignmentTbl.getColumnCount(); r++) {
//   BuyersAssignmentTbl.getModel().setValueAt(null, k, r);
//        }
//    }
        ClearTable.clearthisTable(BuyersAssignmentTbl);
        System.out.println(Designation);
        java.sql.Statement stmt;
        try {
            stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("SELECT DISTINCT requisition_no from st_authorizations  where cso_awarded ilike '" + Designation + "'  and requisition_no NOT IN (SELECT DISTINCT requisition_no from st_receive_requisation WHERE assigned_buyer_flag=TRUE OR type_of_pr ilike 'Internal%') AND requisition_no NOT LIKE '%(SELECT DISTINCT irq_no from st_item_to_quote )%' ");
            int rows = 0;
            while (rset.next()) {

                BuyersAssignmentTbl.setValueAt(rows + 1, rows, 0);
                BuyersAssignmentTbl.setValueAt(rset.getString(1), rows, 1);
                //cost_center,S.,S.date,S.store_name 
                java.sql.Statement stmt1 = connectDB.createStatement();
                ResultSet rst = stmt1.executeQuery("SELECT DISTINCT store_name,cost_center,user_name,date FROM st_receive_requisation WHERE requisition_no='" + BuyersAssignmentTbl.getValueAt(rows, 1) + "'");
                while (rst.next()) {
                    BuyersAssignmentTbl.setValueAt(rst.getString(1), rows, 2);
                    BuyersAssignmentTbl.setValueAt(rst.getString(2), rows, 3);
                    BuyersAssignmentTbl.setValueAt(rst.getString(3), rows, 4);
                    BuyersAssignmentTbl.setValueAt(rst.getString(4), rows, 5);
                }
                rows++;

            }

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(e.getMessage());
        }

    }

    private void postbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postbtnActionPerformed
        //////generating an agenda
        Boolean selectedStatus = false;
        try {

            ///setting assigned buyer status true
            for (int i = 0; i < BuyersAssignmentTbl.getRowCount(); i++) {
                if (BuyersAssignmentTbl.getModel().getValueAt(i, 6) != null) {
                    selectedStatus = true;
                }
            }

            if (selectedStatus) {
//           

            }

            ////inserting into st_assign_buyers
            for (int i = 0; i < BuyersAssignmentTbl.getRowCount(); i++) {
                if (BuyersAssignmentTbl.getModel().getValueAt(i, 6) != null) {

                    java.sql.PreparedStatement pstmt12 = connectDB.prepareStatement("INSERT INTO st_assign_buyers(requisition_no,buyer,date_buyer_assigned,assigned_by) VALUES (?, ?,?,?)");
                    pstmt12.setObject(1, BuyersAssignmentTbl.getValueAt(i, 1).toString());
                    pstmt12.setObject(2, BuyersAssignmentTbl.getValueAt(i, 6).toString());
                    pstmt12.setObject(3, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                    pstmt12.setObject(4, com.afrisoftech.lib.UserName.getLoginName(connectDB).toLowerCase());
                    pstmt12.executeUpdate();

                    ///assining buyers
                    java.sql.PreparedStatement pstmt4 = connectDB.prepareStatement("UPDATE st_pr_progress  SET assign_buyer=? WHERE purchase_req  ilike '%" + BuyersAssignmentTbl.getValueAt(i, 1).toString() + "%' ");
                    pstmt4.setObject(1, BuyersAssignmentTbl.getValueAt(i, 6) + "-" + new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                    pstmt4.executeUpdate();
                    System.out.println("PR " + BuyersAssignmentTbl.getValueAt(i, 1).toString() + "progress assigned");

                    ///FLAGING
                    java.sql.PreparedStatement pstmt221;
                    pstmt221 = connectDB.prepareStatement("UPDATE st_receive_requisation set assigned_buyer_flag=TRUE WHERE requisition_no = '" + BuyersAssignmentTbl.getValueAt(i, 1).toString() + "'");
                    pstmt221.executeUpdate();

                    selectedStatus = true;

                }
            }

        } catch (java.sql.SQLException sql) {
            javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        if (selectedStatus) {

            JOptionPane.showMessageDialog(null, "Buyer(s) assigned successfully!", "CONFIRMATION", JOptionPane.INFORMATION_MESSAGE);
            populateTable();
            //clear table

        }
    }//GEN-LAST:event_postbtnActionPerformed

    private void resetbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetbtnActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_resetbtnActionPerformed

    private void cancelbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelbtnActionPerformed
        for (int k = 0; k < BuyersAssignmentTbl.getRowCount(); k++) {
            for (int r = 0; r < BuyersAssignmentTbl.getColumnCount(); r++) {
                BuyersAssignmentTbl.getModel().setValueAt(null, k, r);
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_cancelbtnActionPerformed
    public void cmbox51ActionPerformed(java.awt.event.ActionEvent evt) {

        try {
            if (BuyersAssignmentTbl.getModel().getValueAt(BuyersAssignmentTbl.getSelectedRow(), 6) != null) {
                //if(BuyersAssignmentTbl.getValueAt(BuyersAssignmentTbl.getSelectedRow(), 6)!=null){
                java.sql.Statement ps = connectDB.createStatement();
                // java.sql.ResultSet rs2 = ps.executeQuery("select distinct buyer_designation   FROM st_buyers_register where buyer_name='"+BuyersAssignmentTbl.getValueAt(BuyersAssignmentTbl.getSelectedRow(), 6).toString()+"'");
                java.sql.ResultSet rs2 = ps.executeQuery("select distinct section   FROM section_allocation where user_name='" + BuyersAssignmentTbl.getValueAt(BuyersAssignmentTbl.getSelectedRow(), 6).toString() + "' and status =true");
                while (rs2.next()) {
                    buyer_section = rs2.getObject(1).toString();

                    // TransTypeTxt.setText(agendaNo);
                }
                BuyersAssignmentTbl.setValueAt(buyer_section, BuyersAssignmentTbl.getSelectedRow(), 7);
                // }

            } else {
                JOptionPane.showMessageDialog(null, "You cannot view a buyers section for a BLANK Buyer's name");
            }

        } catch (Exception edg) {
            edg.printStackTrace();
            edg.getMessage();

        }

    }
    private void exitbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitbtnActionPerformed
        this.setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_exitbtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int rows2Delete = BuyersAssignmentTbl.getSelectedRowCount();

        int[] selectedRows = BuyersAssignmentTbl.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) BuyersAssignmentTbl.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) BuyersAssignmentTbl.getModel();

                defTableModel.removeRow(BuyersAssignmentTbl.getSelectedRow());
            }
        }        // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ActionBuyersPane;
    private javax.swing.JTable BuyersAssignmentTbl;
    private javax.swing.JComboBox DeptToSort;
    private javax.swing.JPanel HeaderBuyersPane;
    private javax.swing.JPanel PrTablesPane;
    private javax.swing.JTextField TransTypeTxt;
    private javax.swing.JButton cancelbtn;
    private com.afrisoftech.lib.DatePicker datePicker2;
    private javax.swing.JButton exitbtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton postbtn;
    private javax.swing.JButton resetbtn;
    // End of variables declaration//GEN-END:variables
}
