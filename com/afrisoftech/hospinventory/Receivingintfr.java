/*
 * companyprflintfr.java
 *
 * Created on August 13, 2002, 11:36 AM
 */
package com.afrisoftech.hospinventory;

import com.afrisoftech.lib.CurrencyFormatter;
import com.afrisoftech.lib.GetItemInfo;
import com.afrisoftech.lib.UserName;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

/**
 *
 * @author root
 */
public class Receivingintfr extends javax.swing.JInternalFrame {

    private javax.swing.JComboBox cmbox = new javax.swing.JComboBox();
    private javax.swing.JComboBox cmbox2;
    int measure = 0;
    /**
     * Creates new form companyprflintfr
     */
    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    private boolean uprices;
    private boolean updatePriceCheck;
    JComboBox cmbox51 = new JComboBox();

    public Receivingintfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();

        stockitems.doClick();
        if (jComboBox2.getSelectedObjects().length > 1) {
            jComboBox2.setSelectedIndex(1);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog2 = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        jTextField113 = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        jSearchTable2 = new com.afrisoftech.dbadmin.JTable();
        jButton52 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel12 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextField9 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        jComboBox2 = new javax.swing.JComboBox();
        jPanel41 = new javax.swing.JPanel();
        orderNotxt = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jTextField6 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        totalAmountTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel71 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel81 = new javax.swing.JLabel();
        jTextField51 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        grnDetailsTable = new javax.swing.JTable()/*new com.afrisoftech.dbadmin.JTable()*/;
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        stockitems = new javax.swing.JCheckBox();
        assets = new javax.swing.JCheckBox();

        jSearchDialog2.setModal(true);
        jSearchDialog2.setUndecorated(true);
        jSearchDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        jTextField113.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField113CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel2.add(jTextField113, gridBagConstraints);

        jSearchTable2.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable2.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable2MouseClicked(evt);
            }
        });
        jSearchScrollPane2.setViewportView(jSearchTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

        jButton52.setText("Dispose");
        jButton52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton52, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog2.getContentPane().add(jSearchPanel2, gridBagConstraints);

        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Receiving Stock (Where LPO has been generated from this system)");
        setToolTipText("");
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jSeparator1, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Utopia", 3, 18)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        getContentPane().add(jLabel12, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("L.P.O. No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        jLabel8.setText("Supplier");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel8, gridBagConstraints);

        jTextField8.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jTextField8, gridBagConstraints);

        jLabel7.setText("Store/Dept.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel7, gridBagConstraints);

        jLabel9.setText("D/Note No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel9, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        jPanel1.add(jTextField9, gridBagConstraints);

        jLabel4.setText("Delivery Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        jPanel1.add(datePicker1, gridBagConstraints);

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(jComboBox2, gridBagConstraints);

        jPanel41.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel41.setLayout(new java.awt.GridBagLayout());

        orderNotxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel41.add(orderNotxt, gridBagConstraints);

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton.setToolTipText("Search");
        searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel41.add(searchButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        jPanel1.add(jPanel41, gridBagConstraints);

        jTextField6.setEditable(false);
        jTextField6.setMaximumSize(new java.awt.Dimension(10, 20));
        jTextField6.setMinimumSize(new java.awt.Dimension(10, 20));
        jTextField6.setPreferredSize(new java.awt.Dimension(10, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(jTextField6, gridBagConstraints);

        jLabel10.setText("Store/Department Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel10, gridBagConstraints);

        jLabel14.setText("Received By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel14, gridBagConstraints);

        jTextField11.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        jPanel1.add(jTextField11, gridBagConstraints);

        jLabel15.setText("Delivered By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel15, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 10);
        jPanel1.add(jTextField5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Total Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 6;
        jPanel2.add(jLabel1, gridBagConstraints);

        totalAmountTxt.setEditable(false);
        totalAmountTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 50);
        jPanel2.add(totalAmountTxt, gridBagConstraints);

        jLabel6.setText("Total Discount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(jLabel6, gridBagConstraints);

        jTextField4.setEditable(false);
        jTextField4.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField4.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jTextField4, gridBagConstraints);

        jLabel71.setText("VAT Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jLabel71, gridBagConstraints);

        jTextField1.setEditable(false);
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField1.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jTextField1, gridBagConstraints);

        jLabel81.setText("Total");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jLabel81, gridBagConstraints);

        jTextField51.setEditable(false);
        jTextField51.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField51.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jTextField51, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel2, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N

        grnDetailsTable.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        grnDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Desc", "Strength", "Qty Ordered", "Undelivered Qty", "Units/Pack", "Qty Received", "Unit Price", "Disc %", "Disc Total", "Vat %", "Vat Total", "Value", "Batch No.", "Expiry Date", "Item Code", "Units of Issue", "Cummulative qty"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, true, true, true, true, false, true, false, true, true, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        grnDetailsTable.setGridColor(new java.awt.Color(204, 204, 255));
        /*
        cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset2, "item_description", null, null, null));
        javax.swing.table.TableColumn s = this.jTable1.getColumn("Item description");
        s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
        cmbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxActionPerformed(evt);
            }
        });
        */
        javax.swing.table.TableColumn dateEditor = grnDetailsTable.getColumnModel().getColumn(13);
        //com.afrisoftech.lib.DateCellEditor dateCellEditor = new com.afrisoftech.lib.DateCellEditor(new org.jdesktop.swingx.JXDatePicker(), grnDetailsTable);
        com.afrisoftech.lib.DateCellEditor dateCellEditor = new com.afrisoftech.lib.DateCellEditor(new com.afrisoftech.lib.DatePicker(), grnDetailsTable);
        dateEditor.setCellEditor(dateCellEditor);
        //jTable1.setRowHeight(30);
        javax.swing.table.DefaultTableCellRenderer cellRenderer = new javax.swing.table.DefaultTableCellRenderer();
        cellRenderer.setHorizontalAlignment(cellRenderer.TRAILING);
        dateEditor.setCellRenderer(cellRenderer);
        grnDetailsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                grnDetailsTableMouseClicked(evt);
            }
        });
        grnDetailsTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                grnDetailsTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(grnDetailsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel3.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 50.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        getContentPane().add(jPanel3, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jButton1.setMnemonic('s');
        jButton1.setText("Record Entry");
        jButton1.setToolTipText("click to store data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jButton1, gridBagConstraints);

        jButton6.setMnemonic('r');
        jButton6.setText("Remove Row");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jButton6, gridBagConstraints);

        jButton3.setMnemonic('l');
        jButton3.setText("Clear");
        jButton3.setToolTipText("click to clear fields");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jButton3, gridBagConstraints);

        jButton4.setMnemonic('C');
        jButton4.setText("Close");
        jButton4.setToolTipText("Click to close");
        jButton4.setSelected(true);
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jButton4, gridBagConstraints);

        jButton5.setMnemonic('h');
        jButton5.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jButton5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jLabel13, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        getContentPane().add(jPanel4, gridBagConstraints);

        buttonGroup1.add(stockitems);
        stockitems.setText(" Receipt of Stock Items");
        stockitems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockitemsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(stockitems, gridBagConstraints);

        buttonGroup1.add(assets);
        assets.setText("Receipt of Asset / Services");
        assets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assetsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(assets, gridBagConstraints);

        setBounds(0, 0, 1265, 459);
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        if (this.stockitems.isSelected()) {
            jTextField6.setText("");
            try {
                java.sql.Statement pstmt = connectDB.createStatement();

                java.sql.ResultSet rs = pstmt.executeQuery("select glstock_code from st_stores  where store_name ilike '" + jComboBox2.getSelectedItem().toString() + "%'");
                while (rs.next()) {

                    this.jTextField6.setText(rs.getObject(1).toString());
                }
            } catch (java.sql.SQLException sqlex) {
                System.out.println(sqlex.getMessage());
            }
        } else {
            try {
                java.sql.Statement pstmt = connectDB.createStatement();

                //java.sql.ResultSet rs = pstmt.executeQuery("select code from pb_activity  where store_name ilike '" + jComboBox2.getSelectedItem().toString() + "%'");
                java.sql.ResultSet rs = pstmt.executeQuery("select code from pb_activity where activity ilike '%Work In Progress%' limit 1");

                while (rs.next()) {

                    this.jTextField6.setText(rs.getObject(1).toString());
                }
            } catch (java.sql.SQLException sqlex) {
                System.out.println(sqlex.getMessage());
            }
        }   // Add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void assetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assetsActionPerformed

        jComboBox2.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select '-' union select distinct initcap(depart_name) from pb_main_department order by 1"));

        jComboBox2.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        jComboBox2.setSelectedIndex(1);
// Add your handling code here:
    }//GEN-LAST:event_assetsActionPerformed

    private void stockitemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockitemsActionPerformed

        jComboBox2.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select '-' union select DISTINCT stores from store_allocation where user_name = current_user and type ilike 'direct purch%'"));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        jComboBox2.setSelectedIndex(1);
    }//GEN-LAST:event_stockitemsActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchButtonClicked();         // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed
    private void searchButtonClicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.orderNotxt.getLocationOnScreen();

        jSearchDialog2.setSize(400, 200);

        jSearchDialog2.setLocation(point);

        jSearchDialog2.setVisible(true);

    }
    private void jTextField113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField113CaretUpdate
        if (jTextField113.getCaretPosition() < 1) {
            System.out.println("Nothing");
        } else {
            jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT distinct order_no,supplier from st_orders WHERE order_no ILIKE '%" + jTextField113.getText() + "%' order by order_no"));

            jSearchTable2.setShowHorizontalLines(false);
            jSearchScrollPane2.setViewportView(jSearchTable2);

        }        // Add your handling code here:
    }//GEN-LAST:event_jTextField113CaretUpdate

    private void jSearchTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2MouseClicked
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        String Paymode = null;
        jTextField5.setText("");
        orderNotxt.setText("");

        jTextField8.setText("");
        totalAmountTxt.setText("0.00");
        jTextField4.setText("0.00");
        jTextField1.setText("0.00");
        jTextField51.setText("0.00");

        for (int k = 0; k < grnDetailsTable.getRowCount(); k++) {
            for (int r = 0; r < grnDetailsTable.getColumnCount(); r++) {
                grnDetailsTable.getModel().setValueAt(null, k, r);
            }
        }

        jTextField8.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
        orderNotxt.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0).toString());

        jSearchDialog2.dispose();

        jTextField11.setText(UserName.getLoginName(connectDB).toLowerCase());
        int j = 0;
        int i = 0;

        try {
            java.sql.Statement stmtTable11 = connectDB.createStatement();
            //java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("select distinct sum(quantity_undelivered),item_code from stock_receiving_view where order_no ilike '" + this.jTextField91.getText() + "%' group by item_code");

            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery(" SELECT trim(CODE),trim(ITEM),UNITS::numeric(10,2),sum(quantity) FROM orders_balances_fn('" + this.orderNotxt.getText() + "%') group by 1,2,3");

            while (rsetTable11.next()) {
                // j = rsetTable11.getInt(1);
                if (rsetTable11.getDouble(4) > 0) {
                    java.sql.Statement stmtTable1 = connectDB.createStatement();
//
//                    //                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT description, quantity,(amount/quantity)::numeric(10,2),amount,gl_code  FROM hp_pharmacy WHERE patient_name = '"+patient_no+"' AND paid = false UNION SELECT service, quantity,(amount/quantity)::numeric(10,2),amount,gl_code  FROM hp_patient_billing WHERE patient_name = '"+patient_no+"' AND paid = false");
                    //java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select item,quantity,(select distinct sum(quantity_undelivered) from stock_receiving_view where item_code ='" + rsetTable11.getString(2) + "' and order_no ilike '" + this.jTextField91.getText() + "%' group by item_code)quantity_undelivered,packaging,price,0.00,0.00,item_code,0.00 FROM stock_receiving_view WHERE order_no ilike '" + this.jTextField91.getText() + "%' AND quantity_undelivered >0 and item_code ='" + rsetTable11.getString(2) + "' order by item");// AND paid = false UNION SELECT service, quantity,(amount/quantity)::numeric(10,2),amount,gl_code  FROM hp_patient_billing WHERE patient_name = '"+patient_no+"' AND paid = false");
                    java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select item,code,CASE WHEN item_strength IS NULL THEN '-' ELSE item_strength END AS strength,"
                            + " quantity,unit_price,units from st_orders where code ='" + rsetTable11.getString(1) + "' and order_no ilike '" + this.orderNotxt.getText() + "%' ");// AND paid = false UNION SELECT service, quantity,(amount/quantity)::numeric(10,2),amount,gl_code  FROM hp_patient_billing WHERE patient_name = '"+patient_no+"' AND paid = false");
//
                    while (rsetTable1.next()) {

                        System.out.println("Working at table row " + i);
                        grnDetailsTable.setValueAt(rsetTable11.getObject(2), i, 0);
                        grnDetailsTable.setValueAt(rsetTable1.getString(3), i, 1);
                        grnDetailsTable.setValueAt(rsetTable1.getDouble(4), i, 2);
                        grnDetailsTable.setValueAt(rsetTable11.getObject(4), i, 3);
                        grnDetailsTable.setValueAt(rsetTable1.getDouble(6), i, 4);
                        grnDetailsTable.setValueAt(rsetTable1.getDouble(5), i, 6);
                        grnDetailsTable.setValueAt(0.00, i, 7);
                        grnDetailsTable.setValueAt(0.00, i, 8);
                        grnDetailsTable.setValueAt(0.00, i, 9);
                        grnDetailsTable.setValueAt(0.00, i, 10);
                        grnDetailsTable.setValueAt(rsetTable11.getObject(1), i, 14);

                    }

                    i++;

                }
            }
            if (i < 1) {
                JOptionPane.showMessageDialog(this, "Items Completely Received");
            }
        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
            sqlExec.printStackTrace();

        }

        javax.swing.table.TableColumn column = null;
        for (int l = 0; l < 15; l++) {
            column = grnDetailsTable.getColumnModel().getColumn(l);
            if (l == 0) {

                column.setPreferredWidth(500); //sport column is bigger
            } else {
                //if (i == 2) {
                column.setPreferredWidth(200);
                // }  else
                //column.setPreferredWidth(50);

            }
        }
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jSearchDialog2.dispose();// Add your handling code here:
    }//GEN-LAST:event_jSearchTable2MouseClicked
    private void cmbox51ActionPerformed(java.awt.event.ActionEvent evt) {

    }
    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed
        this.jSearchDialog2.dispose();          // Add your handling code here:
    }//GEN-LAST:event_jButton52ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        int rows2Delete = grnDetailsTable.getSelectedRowCount();

        int[] selectedRows = grnDetailsTable.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) grnDetailsTable.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) grnDetailsTable.getModel();

                defTableModel.removeRow(grnDetailsTable.getSelectedRow());
            }
        }

        tableModelTableChanged();
        tableModelTableChanged1();
        tableModelTableChanged2();

        // Add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void grnDetailsTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_grnDetailsTableKeyReleased
        if (grnDetailsTable.getValueAt(grnDetailsTable.getSelectedRow(), 13) != null) {
            if (!com.afrisoftech.hospinventory.InventoryLevels.getExpiryStatus(grnDetailsTable.getValueAt(grnDetailsTable.getSelectedRow(), 13).toString())) {
                javax.swing.JOptionPane.showMessageDialog(this, "This item does not meet the threashold for quality assurance in terms of expiry date.");
                grnDetailsTable.setValueAt(null, grnDetailsTable.getSelectedRow(), 13);
            }
        }
        double resFloat = 0.00;
        double resVal = 0.00;
        double total = 0.00;
        double total1 = 0.00;
        double discount1 = 0.00;
        double vat = 0.00;
        double VatAmt = 0.00;
        double qty = 0.00;
        double floatCol3 = 0.00;
        double units = 1.00;

        String issuingUnits = com.afrisoftech.lib.GetItemInfo.getItemUnits(grnDetailsTable.getValueAt(grnDetailsTable.getSelectedRow(), 14).toString(), connectDB);

        double conversion = GetItemInfo.getConversion(issuingUnits, grnDetailsTable.getValueAt(grnDetailsTable.getSelectedRow(), 4).toString(), connectDB);
        System.out.println(CurrencyFormatter.getFormattedDouble(conversion));
        //  double totalSum = 0.00;
        if (grnDetailsTable.getValueAt(grnDetailsTable.getSelectedRow(), grnDetailsTable.getSelectedColumn()) != null) {

            if (grnDetailsTable.getValueAt(grnDetailsTable.getSelectedRow(), 5) != null) {
                qty = java.lang.Double.parseDouble(grnDetailsTable.getValueAt(grnDetailsTable.getSelectedRow(), 5).toString()) * conversion;

                floatCol3 = java.lang.Double.parseDouble(grnDetailsTable.getValueAt(grnDetailsTable.getSelectedRow(), 6).toString());

                //            if (jTable1.getValueAt(jTable1.getSelectedRow(), 3) != null) {
                total = qty * floatCol3;
                //                jTable1.setValueAt(new java.lang.Float(total), jTable1.getSelectedRow(), 7);

                if (grnDetailsTable.getValueAt(grnDetailsTable.getSelectedRow(), 7) != null) {
                    discount1 = java.lang.Double.parseDouble(grnDetailsTable.getValueAt(grnDetailsTable.getSelectedRow(), 7).toString());
                    resVal = total * discount1 / 100;
                    // total = ((qty * floatCol3) - ((qty * floatCol3)*discount1/100));
                    // resVal = (qty * floatCol3)*discount1/100;
                    grnDetailsTable.setValueAt(new java.lang.Float(resVal), grnDetailsTable.getSelectedRow(), 8);
                    grnDetailsTable.setValueAt(new java.lang.Float(total - resVal), grnDetailsTable.getSelectedRow(), 11);
                    this.tableModelTableChanged1();
                    if (grnDetailsTable.getValueAt(grnDetailsTable.getSelectedRow(), 9) != null) {
                        vat = java.lang.Double.parseDouble(grnDetailsTable.getValueAt(grnDetailsTable.getSelectedRow(), 9).toString());
                        // total = (((total) + ((qty * floatCol3)*vat/100)) - ((qty * floatCol3)*discount1/100));

                        VatAmt = (total - resVal) * vat / 100;
                        grnDetailsTable.setValueAt(new java.lang.Float(VatAmt), grnDetailsTable.getSelectedRow(), 10);
                        grnDetailsTable.setValueAt(new java.lang.Float(resVal), grnDetailsTable.getSelectedRow(), 8);

                        grnDetailsTable.setValueAt(new java.lang.Float((total - resVal) + VatAmt), grnDetailsTable.getSelectedRow(), 11);

                        grnDetailsTable.setValueAt(issuingUnits, grnDetailsTable.getSelectedRow(), 15);
                        grnDetailsTable.setValueAt(new java.lang.Float(qty), grnDetailsTable.getSelectedRow(), 16);

                        this.tableModelTableChanged2();
                        //jTable1.setValueAt(new java.lang.Float(resVal), jTable1.getSelectedRow(), 5);
                    }

                } else if (grnDetailsTable.getValueAt(grnDetailsTable.getSelectedRow(), 9) != null) {
                    vat = java.lang.Double.parseDouble(grnDetailsTable.getValueAt(grnDetailsTable.getSelectedRow(), 9).toString());

                    total1 = ((qty * floatCol3));

                    total = ((qty * floatCol3) + ((qty * floatCol3) * vat / 100));
                    VatAmt = ((qty * floatCol3) * vat / 100);
                    grnDetailsTable.setValueAt(new java.lang.Float(VatAmt), grnDetailsTable.getSelectedRow(), 10);

                    //this.jTextField1.setText(java.lang.String.valueOf(VatAmt));
                    grnDetailsTable.setValueAt(new java.lang.Float(total), grnDetailsTable.getSelectedRow(), 11);
                    this.tableModelTableChanged2();

                    grnDetailsTable.setValueAt(issuingUnits, grnDetailsTable.getSelectedRow(), 15);
                    grnDetailsTable.setValueAt(new java.lang.Float(qty), grnDetailsTable.getSelectedRow(), 16);

                } else {
                    grnDetailsTable.setValueAt(new java.lang.Float(total), grnDetailsTable.getSelectedRow(), 11);
                }

                this.tableModelTableChanged();

                for (int i = 0; i < grnDetailsTable.getRowCount(); i++) {

                    if (grnDetailsTable.getModel().getValueAt(i, 5) != null) {//toString().compareToIgnoreCase(null) {

                        resFloat = resFloat + Double.parseDouble(grnDetailsTable.getValueAt(i, 11).toString());

                    }
                }

                //  this.tableModelTableChanged();
            }
            grnDetailsTable.setValueAt(issuingUnits, grnDetailsTable.getSelectedRow(), 15);
            grnDetailsTable.setValueAt(new java.lang.Float(qty), grnDetailsTable.getSelectedRow(), 16);
        }


    }//GEN-LAST:event_grnDetailsTableKeyReleased

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        for (int k = 0; k < grnDetailsTable.getRowCount(); k++) {
            for (int r = 0; r < grnDetailsTable.getColumnCount(); r++) {
                grnDetailsTable.getModel().setValueAt(null, k, r);
            }
        }

        jTextField8.setText("");
        jTextField5.setText("");
        jTextField9.setText("");
        jTextField11.setText("");

        totalAmountTxt.setText("0.00");
        orderNotxt.setText("");
        // Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        java.util.Date periodFrom = null;
        java.util.Date periodTo = null;
        measure = 0;
        Boolean check_insert_status = false;

        try {
            java.sql.PreparedStatement pstmtCheck = connectDB.prepareStatement("SELECT update_prices FROM st_stock_control");
            java.sql.ResultSet rsetCheck = pstmtCheck.executeQuery();
            while (rsetCheck.next()) {
                updatePriceCheck = rsetCheck.getBoolean(1);
            }
            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open'");
            while (rsetf.next()) {
                periodFrom = rsetf.getDate(1);
                periodTo = rsetf.getDate(2);
            }

        } catch (java.sql.SQLException sq) {
            sq.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());

        }

        if (datePicker1.getDate().before(periodFrom) || datePicker1.getDate().after(periodTo)) {
            javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        } else {
            if (grnDetailsTable.isEditing()) {
                grnDetailsTable.getCellEditor().stopCellEditing();
            }        // jTable1.setEditingRow(-1);

            tableModelTableChanged();
            tableModelTableChanged1();
            tableModelTableChanged2();
            double quantity = 0.00;
            double price = 0.00;
            double pkge = 1.00;
            double qty = 0.00;
            double uprice = 0.00;
            double rates = 0.00;
            //double price = 0.00;

            java.util.Calendar calendar = java.util.Calendar.getInstance();

            long dateNow = calendar.getTimeInMillis();

            java.sql.Date datenowSql = new java.sql.Date(dateNow);
            // try{
            String Stock = null;
            String actCode = null;
            String accountCode = null;
            String transNo = null;
            String glType = null;
            String VouchNo = null;
            String StocktransNo = null;
            String user = null;
            int invoices = 0;
            double total = 0.00;
            String supCode = null;
            String Purchases = null;
            String cosCode = null;
            String CostofSale = null;
            String accountCoded = null;
            String glTyped = null;
            String units = null;

            try {
                if (jTextField6.getText().toString().length() > 0) {

                    connectDB.setAutoCommit(false);

                    java.sql.Statement pst1 = connectDB.createStatement();
                    java.sql.ResultSet rs1 = pst1.executeQuery("select code,activity from pb_activity where activity_category = 'CP'");
                    while (rs1.next()) {
                        accountCode = rs1.getObject(1).toString();
                        glType = rs1.getObject(2).toString();
                    }

                    java.sql.Statement ps11r = connectDB.createStatement();
                    /*
                     * java.sql.ResultSet rstr = ps11r.executeQuery("SELECT mark_up
                     * FROM st_stores WHERE store_name ILIKE
                     * '"+jComboBox2.getSelectedItem().toString()+"'"); while
                     * (rstr.next()){ if(rstr.getDouble(1) > 0){ rates =
                     * rstr.getDouble(1); }else{ rates = 1; } }
                     */
                    java.sql.Statement ps = connectDB.createStatement();
                    java.sql.Statement pst2 = connectDB.createStatement();
                    java.sql.Statement ps22 = connectDB.createStatement();
                    java.sql.Statement ps11 = connectDB.createStatement();
                    java.sql.ResultSet rst = ps11.executeQuery("select nextval('transaction_no_seq'),current_user");
                    while (rst.next()) {
                        rst.getObject(1).toString();

                        transNo = rst.getObject(1).toString();
                        user = rst.getObject(2).toString();
                    }
                    java.sql.Statement pst21 = connectDB.createStatement();
                    java.sql.ResultSet rs111 = pst21.executeQuery("select nextval('stock_delivery_seq')");
                    while (rs111.next()) {
                        StocktransNo = rs111.getObject(1).toString();
                    }

                    java.sql.Statement pst1i = connectDB.createStatement();
                    java.sql.ResultSet rs1i = pst1i.executeQuery("select code,activity from pb_activity where activity_category ILIKE 'GRN'");
                    while (rs1i.next()) {
                        accountCoded = rs1i.getObject(1).toString();
                        glTyped = rs1i.getObject(2).toString();
                    }

                    java.sql.ResultSet rs = pst2.executeQuery("select code,activity from pb_activity where code ILIKE '" + this.jTextField6.getText() + "'");
                    while (rs.next()) {
                        actCode = rs.getObject(1).toString();
                        Stock = rs.getObject(2).toString();
                    }

                    java.sql.Statement pstmt1t = connectDB.createStatement();
                    java.sql.ResultSet rs1t = pstmt1t.executeQuery("select update_prices from st_stock_control"); //from orders where supplier ='"+jTable1.getValueAt(i,4).toString()+"'");

                    while (rs1t.next()) {

                        uprices = rs1t.getBoolean(1);
                    }
                    for (int i = 0; i < grnDetailsTable.getRowCount(); i++) {

                        if (grnDetailsTable.getValueAt(i, 11) != null && grnDetailsTable.getValueAt(i, 0) != null) {
                            if (grnDetailsTable.getValueAt(i, 13) != null) {
                                if (Double.parseDouble(grnDetailsTable.getValueAt(i, 5).toString()) > Double.parseDouble(grnDetailsTable.getValueAt(i, 3).toString())) {
                                    javax.swing.JOptionPane.showMessageDialog(this, "You cannot receive more than undelivered items", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                    i = grnDetailsTable.getRowCount() + 1;
                                    measure = i;
                                } else if (Double.parseDouble(grnDetailsTable.getValueAt(i, 5).toString()) == 0) {
                                    javax.swing.JOptionPane.showMessageDialog(this, "You cannot receive zero items", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                    i = grnDetailsTable.getRowCount() + 1;
                                    measure = i;
                                } else {
                                    double Qty = Double.parseDouble(grnDetailsTable.getValueAt(i, 5).toString());
                                    total = total + Double.parseDouble(grnDetailsTable.getValueAt(i, 11).toString());

                                    if (Qty > 0) {
                                        java.sql.ResultSet rstr = ps11r.executeQuery("SELECT mc.markups FROM  st_main_category mc,st_stock_item st WHERE st.department ILIKE '" + jComboBox2.getSelectedItem().toString() + "' AND mc.description = st.sub_cat_code AND st.item_code = '" + grnDetailsTable.getValueAt(i, 14).toString() + "'");
                                        while (rstr.next()) {
                                            if (rstr.getDouble(1) > 0) {
                                                rates = rstr.getDouble(1);
                                            } else {
                                                rates = 1;
                                            }
                                        }
                                        java.sql.Statement pst21r = connectDB.createStatement();
                                        //         java.sql.ResultSet rstr = ps11r.executeQuery("SELECT mark_up FROM st_stores WHERE store_name ILIKE '"+jComboBox2.getSelectedItem().toString()+"'");
                                        java.sql.ResultSet rstrs = pst21r.executeQuery("SELECT units FROM stockitem st WHERE st.item_code = '" + grnDetailsTable.getValueAt(i, 14).toString() + "'");
                                        while (rstrs.next()) {
                                            units = rstrs.getString(1);
                                        }
                                        /*
                                         * if(java.util.regex.Pattern.matches("[0-9]*",jTable1.getValueAt(i,
                                         * 4).toString())){ pkge =
                                         * Double.parseDouble(jTable1.getValueAt(i,
                                         * 4).toString()); }else{ pkge = 1; }
                                         */

                                        pkge = Double.parseDouble(grnDetailsTable.getValueAt(i, 4).toString());
                                        System.out.println("Package is : [" + pkge + "]");

                                        qty = Double.parseDouble(grnDetailsTable.getValueAt(i, 5).toString());
                                        uprice = Double.parseDouble(grnDetailsTable.getValueAt(i, 6).toString());

                                        quantity = qty * pkge;
                                        // quantity = Double.parseDouble(grnDetailsTable.getValueAt(i, 16).toString());

                                        price = uprice / pkge;
                                        // price = uprice;
                                        java.sql.Date expiryDate = null;

//
                                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_stock_cardex values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                                        pstmt.setString(1, orderNotxt.getText().toString());
                                        pstmt.setString(2, jComboBox2.getSelectedItem().toString());
                                        pstmt.setObject(3, grnDetailsTable.getValueAt(i, 0).toString());
                                        if (grnDetailsTable.getValueAt(i, 13) != null) {
                                            java.sql.Statement pst22 = connectDB.createStatement();
                                            java.sql.ResultSet rs22 = pst22.executeQuery("select '" + grnDetailsTable.getValueAt(i, 13).toString() + "'::date");
                                            while (rs22.next()) {
                                                expiryDate = rs22.getDate(1);

                                            }
                                            pstmt.setDate(4, expiryDate);
                                        } else {
                                            pstmt.setDate(4, null);
                                        }
                                        pstmt.setDouble(5, 0.00);
                                        pstmt.setDouble(6, price);
                                        pstmt.setObject(7, units);
                                        pstmt.setString(8, jTextField11.getText());
                                        pstmt.setString(9, jTextField5.getText());
                                        pstmt.setString(10, "");
                                        pstmt.setDouble(11, quantity);
                                        pstmt.setDouble(12, 0.00);
                                        pstmt.setDouble(13, quantity);
                                        pstmt.setObject(14, grnDetailsTable.getValueAt(i, 2).toString());
                                        pstmt.setString(15, "-");
                                        pstmt.setObject(16, jTextField8.getText());
                                        pstmt.setString(17, jTextField9.getText());
                                        pstmt.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                        pstmt.setString(19, "-");
                                        pstmt.setString(20, "Receiving");
                                        pstmt.setDouble(21, java.lang.Double.valueOf(grnDetailsTable.getValueAt(i, 11).toString()));
                                        pstmt.setDouble(22, 0.00);
                                        pstmt.setString(23, jTextField6.getText());
                                        if (jTextField9.getText().equals("")) {
                                            javax.swing.JOptionPane.showMessageDialog(this, "Delivery note_no Missing", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                        } else {

                                            pstmt.setString(24, jTextField9.getText());
                                        }
                                        pstmt.setString(25, jComboBox2.getSelectedItem().toString());
                                        pstmt.setString(26, transNo);
                                        pstmt.setDouble(27, 0.00);
                                        pstmt.setString(28, user);
                                        pstmt.setBoolean(29, false);
                                        if (grnDetailsTable.getValueAt(i, 10) == null) {
                                            pstmt.setDouble(30, 0.0);
                                        } else {
                                            pstmt.setDouble(30, java.lang.Double.valueOf(grnDetailsTable.getValueAt(i, 10).toString()));
                                        }
                                        pstmt.setObject(31, null);
                                        pstmt.setObject(32, grnDetailsTable.getValueAt(i, 14));
                                        pstmt.setObject(33, grnDetailsTable.getValueAt(i, 1));
                                        pstmt.setObject(34, StocktransNo);
                                        pstmt.executeUpdate();

                                        java.sql.PreparedStatement pstmt11 = connectDB.prepareStatement("insert into st_sub_stores values(? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?)");
                                        pstmt11.setString(1, jComboBox2.getSelectedItem().toString());
                                        pstmt11.setObject(2, grnDetailsTable.getValueAt(i, 0).toString());
                                        pstmt11.setDouble(3, quantity);
                                        pstmt11.setDouble(4, 0.00);
                                        pstmt11.setDouble(5, 0.00);
                                        pstmt11.setDouble(6, java.lang.Double.valueOf(grnDetailsTable.getValueAt(i, 11).toString()));
                                        pstmt11.setDouble(7, 0.00);
                                        pstmt11.setObject(8, StocktransNo);
                                        pstmt11.setObject(9, orderNotxt.getText());
                                        pstmt11.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                        pstmt11.setString(11, user);
                                        pstmt11.setObject(12, units);
                                        pstmt11.setObject(13, jTextField8.getText());
                                        pstmt11.setObject(14, jTextField8.getText());
                                        pstmt11.setDouble(15, price);
                                        pstmt11.setObject(16, grnDetailsTable.getValueAt(i, 14));
                                        pstmt11.setObject(17, grnDetailsTable.getValueAt(i, 1));
                                        pstmt11.executeUpdate();

                                        check_insert_status = true;

                                        pstmt11 = connectDB.prepareStatement("INSERT INTO st_orders_delivery(supplier, item, units, quantity, unit_price,  order_no, code, received_by,invoice_no)\n"
                                                + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);");
                                        pstmt11.setString(1, jTextField8.getText());
                                        pstmt11.setObject(2, grnDetailsTable.getValueAt(i, 0).toString());
                                        pstmt11.setObject(3, grnDetailsTable.getValueAt(i, 4).toString());
                                        pstmt11.setDouble(4, Double.valueOf(grnDetailsTable.getValueAt(i, 5).toString()));
                                        pstmt11.setDouble(5, Double.valueOf(grnDetailsTable.getValueAt(i, 6).toString()));
                                        pstmt11.setObject(6, orderNotxt.getText());
                                        pstmt11.setObject(7, grnDetailsTable.getValueAt(i, 14).toString());

                                        pstmt11.setObject(8, UserName.getLoginName(connectDB).toLowerCase());
                                        pstmt11.setObject(9, jTextField9.getText());
                                        pstmt11.executeUpdate();

                                        if (updatePriceCheck) {
                                            java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("UPDATE st_stock_item SET buying_price = " + new java.lang.Double(uprice) + "  WHERE item_code ILIKE '" + grnDetailsTable.getValueAt(i, 14).toString() + "' AND department ILIKE '" + jComboBox2.getSelectedItem().toString() + "'");
                                            pstmt31.executeUpdate();
                                            java.sql.PreparedStatement pstmt32c = connectDB.prepareStatement("UPDATE st_stock_prices SET transfer_price = ROUND(" + new java.lang.Double(price) + ")  WHERE product_id ILIKE '" + grnDetailsTable.getValueAt(i, 14).toString() + "'  AND department ILIKE '" + jComboBox2.getSelectedItem().toString() + "'");
                                            pstmt32c.executeUpdate();

                                            if (uprices) {
                                                if (rates > 1) {
                                                    java.sql.PreparedStatement pstmt32 = connectDB.prepareStatement("UPDATE st_stock_prices SET transfer_price = ROUND(" + new java.lang.Double(price) + "),selling_price = round('" + (price * rates) + "')  WHERE product_id ILIKE '" + grnDetailsTable.getValueAt(i, 14).toString() + "'  AND department ILIKE '" + jComboBox2.getSelectedItem().toString() + "'");
                                                    pstmt32.executeUpdate();
                                                } else {
                                                    java.sql.PreparedStatement pstmt32 = connectDB.prepareStatement("UPDATE st_stock_prices SET transfer_price = ROUND(" + new java.lang.Double(price) + ")  WHERE product_id ILIKE '" + grnDetailsTable.getValueAt(i, 14).toString() + "'  AND department ILIKE '" + jComboBox2.getSelectedItem().toString() + "'");
                                                    pstmt32.executeUpdate();
                                                }
                                            } else {
                                                java.sql.PreparedStatement pstmt32 = connectDB.prepareStatement("UPDATE st_stock_prices SET transfer_price = ROUND(" + new java.lang.Double(price) + ") WHERE product_id ILIKE '" + grnDetailsTable.getValueAt(i, 14).toString() + "'  AND department ILIKE '" + jComboBox2.getSelectedItem().toString() + "'");
                                                pstmt32.executeUpdate();
                                            }
                                        }
//                            java.sql.PreparedStatement pstmt33 = connectDB.prepareStatement("update st_orders set received ='true' where order_no ='" + jTextField1.getText() + "' AND code = '" + jTable1.getValueAt(i, 14).toString() + "'");
//                            pstmt33.executeUpdate();

                                    }
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Some Fields cannot Be Empty ", "ERROR MESSAGE", JOptionPane.ERROR_MESSAGE);
                            }
                        }

                    }

                    // Capture the GRN for the delivery
                    java.sql.PreparedStatement pstmt1q1 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                    pstmt1q1.setObject(1, accountCoded);
                    pstmt1q1.setString(2, glTyped);
                    pstmt1q1.setString(3, "");
                    pstmt1q1.setString(4, jTextField8.getText());
                    pstmt1q1.setString(6, jTextField9.getText());
                    pstmt1q1.setString(5, glTyped);
                    pstmt1q1.setString(7, "");
                    pstmt1q1.setString(8, "");
                    pstmt1q1.setString(9, "");
                    pstmt1q1.setString(10, "");
                    pstmt1q1.setString(11, this.orderNotxt.getText());
                    pstmt1q1.setString(12, "");
                    pstmt1q1.setString(13, this.jTextField9.getText());
                    pstmt1q1.setString(14, glTyped);
                    pstmt1q1.setString(15, "Stock Delivery");
                    pstmt1q1.setDouble(16, 0.00);
                    pstmt1q1.setDouble(17, java.lang.Double.valueOf(totalAmountTxt.getText()));
                    pstmt1q1.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                    pstmt1q1.setString(19, transNo);
                    pstmt1q1.setBoolean(20, false);
                    pstmt1q1.setBoolean(21, false);
                    pstmt1q1.setBoolean(22, false);
                    pstmt1q1.setString(23, user);
                    pstmt1q1.setString(24, "");
                    pstmt1q1.setString(25, "");
                    pstmt1q1.setTimestamp(26, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                    pstmt1q1.executeUpdate();

                    if (check_insert_status == false) {

                        connectDB.rollback();

                        javax.swing.JOptionPane.showMessageDialog(this, "Check The Highlighted Fields Hint: They are Empty", "ERROR Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

                    } else {
                        connectDB.commit();
                        connectDB.setAutoCommit(true);

                        javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                        for (int k = 0; k < grnDetailsTable.getRowCount(); k++) {
                            for (int r = 0; r < grnDetailsTable.getColumnCount(); r++) {
                                grnDetailsTable.getModel().setValueAt(null, k, r);

                            }
                        }
                        jTextField9.setText("");
                        totalAmountTxt.setText("0.0");
                        jTextField4.setText("0.0");
                        jTextField1.setText("0.0");
                        jTextField5.setText("0.0");
                    }

                } else {
                    javax.swing.JOptionPane.showMessageDialog(this, "Double Check your Entries Hint:[Check Store Selection]", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }

                //  javax.swing.JOptionPane.showMessageDialog(this, "Enter quantity received","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            } catch (java.sql.SQLException sq) {
                sq.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

                System.out.println(sq.getMessage());
                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    sql.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cmbox2ActionPerformed(java.awt.event.ActionEvent evt) {

    }

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_jButton4MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // Add your handling code here:
    }//GEN-LAST:event_jButton3MouseClicked

    private void grnDetailsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grnDetailsTableMouseClicked
        // TODO add your handling code here:
        if (grnDetailsTable.getSelectedColumn() == 13) {

            kiwi.ui.DateChooser dateChooser = new kiwi.ui.DateChooser();

            dateChooser.setVisible(true);

        } else {
            if (grnDetailsTable.getSelectedColumn() == 15) {
                if (grnDetailsTable.getValueAt(grnDetailsTable.getSelectedRow(), 4) != null) {
                    cmbox51.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '-' UNION SELECT DISTINCT bulk_supply_unit FROM st_packing WHERE genre_description ilike '" + grnDetailsTable.getValueAt(grnDetailsTable.getSelectedRow(), 4) + "'"));
                } else {
                    JOptionPane.showMessageDialog(this, "No specified units", "Specify Units", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_grnDetailsTableMouseClicked

    public void tableModelTableChanged() {
        System.out.println("Calculating totals for table 11 and 2.");
        //        double resFloat = 0.00;
        double resFloat = 0.00;
        double Gross = Double.parseDouble(this.totalAmountTxt.getText());
        double Disc = Double.parseDouble(this.jTextField1.getText());
        double Vat = Double.parseDouble(this.jTextField4.getText());
        for (int i = 0; i < grnDetailsTable.getRowCount(); i++) {

            if (grnDetailsTable.getValueAt(i, 5) != null) {

                if (grnDetailsTable.getSelectedColumn() == 5) {

                    resFloat = resFloat + Double.parseDouble(grnDetailsTable.getModel().getValueAt(i, 11).toString());
                    totalAmountTxt.setText(java.lang.String.valueOf(resFloat));
                    jTextField51.setText(java.lang.String.valueOf(resFloat - Disc - Vat));
                } else {

                    resFloat = resFloat + Double.parseDouble(grnDetailsTable.getModel().getValueAt(i, 11).toString());
                    totalAmountTxt.setText(java.lang.String.valueOf(resFloat));
                    jTextField51.setText(java.lang.String.valueOf(resFloat - Disc - Vat));
                }
            }

            //               jTextField31.setText(java.lang.String.valueOf(resFloat));
        }
    }

    public void tableModelTableChanged(javax.swing.event.TableModelEvent evt) {
        double Gross = Double.parseDouble(this.totalAmountTxt.getText());
        double Disc = Double.parseDouble(this.jTextField1.getText());
        double Vat = Double.parseDouble(this.jTextField4.getText());
        //        double resFloat = 0.00;
        double resFloat = 0.00;

        for (int i = 0; i < grnDetailsTable.getRowCount(); i++) {

            if (grnDetailsTable.getValueAt(i, 5) != null) {

                if (grnDetailsTable.getSelectedColumn() == 5) {

                    resFloat = resFloat + Double.parseDouble(grnDetailsTable.getModel().getValueAt(i, 11).toString());

                    totalAmountTxt.setText(java.lang.String.valueOf(resFloat));
                    jTextField51.setText(java.lang.String.valueOf(resFloat - Disc - Vat));

                } else {
                    resFloat = resFloat + Double.parseDouble(grnDetailsTable.getModel().getValueAt(i, 11).toString());

                    totalAmountTxt.setText(java.lang.String.valueOf(resFloat));
                    jTextField51.setText(java.lang.String.valueOf(resFloat - Disc - Vat));
                }
            }
        }

        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    public void tableModelTableChanged1() {
        System.out.println("Calculating totals for table 12 and 21.");
        double Gross = Double.parseDouble(this.totalAmountTxt.getText());
        double Disc = Double.parseDouble(this.jTextField1.getText());
        double Vat = Double.parseDouble(this.jTextField4.getText());
        double resFloat1 = 0.00;

        for (int i = 0; i < grnDetailsTable.getRowCount(); i++) {

            if (grnDetailsTable.getValueAt(i, 8) != null) {

                if (grnDetailsTable.getSelectedColumn() == 8) {

                    resFloat1 = resFloat1 + Double.parseDouble(grnDetailsTable.getModel().getValueAt(i, 8).toString());
                    jTextField4.setText(java.lang.String.valueOf(resFloat1));
                    jTextField51.setText(java.lang.String.valueOf(Gross - Disc - Vat));

                } else {

                    resFloat1 = resFloat1 + Double.parseDouble(grnDetailsTable.getModel().getValueAt(i, 8).toString());
                    jTextField4.setText(java.lang.String.valueOf(resFloat1));
                    jTextField51.setText(java.lang.String.valueOf(Gross - Disc - Vat));

                }
            }
        }
    }


    public void tableModelTableChanged2() {
        System.out.println("Calculating totals for table 12 and 21.");
        //        double resFloat = 0.00;
        double resFloat1 = 0.00;
        double Gross = Double.parseDouble(this.totalAmountTxt.getText());
        double Disc = Double.parseDouble(this.jTextField1.getText());
        double Vat = Double.parseDouble(this.jTextField4.getText());
        for (int i = 0; i < grnDetailsTable.getRowCount(); i++) {

            if (grnDetailsTable.getValueAt(i, 10) != null) {

                if (grnDetailsTable.getSelectedColumn() == 10) {

                    resFloat1 = resFloat1 + Double.parseDouble(grnDetailsTable.getModel().getValueAt(i, 10).toString());
                    jTextField1.setText(java.lang.String.valueOf(resFloat1));
                    jTextField51.setText(java.lang.String.valueOf(Gross - Disc - Vat));

                } else {
                    resFloat1 = resFloat1 + Double.parseDouble(grnDetailsTable.getModel().getValueAt(i, 10).toString());
                    jTextField1.setText(java.lang.String.valueOf(resFloat1));
                    jTextField51.setText(java.lang.String.valueOf(Gross - Disc - Vat));

                }
            }

            //               jTextField31.setText(java.lang.String.valueOf(resFloat));
        }
    }

    public void tableModelTableChanged2(javax.swing.event.TableModelEvent evt) {

        double Gross = Double.parseDouble(this.totalAmountTxt.getText());
        double Disc = Double.parseDouble(this.jTextField1.getText());
        double Vat = Double.parseDouble(this.jTextField4.getText());
        double resFloat1 = 0.00;

        for (int i = 0; i < grnDetailsTable.getRowCount(); i++) {

            if (grnDetailsTable.getValueAt(i, 9) != null) {

                if (grnDetailsTable.getSelectedColumn() == 9) {

                    resFloat1 = resFloat1 + Double.parseDouble(grnDetailsTable.getModel().getValueAt(i, 10).toString());
                    jTextField1.setText(java.lang.String.valueOf(resFloat1));
                    jTextField51.setText(java.lang.String.valueOf(Gross - Disc - Vat));

                } else {

                    resFloat1 = resFloat1 + Double.parseDouble(grnDetailsTable.getModel().getValueAt(i, 10).toString());
                    jTextField1.setText(java.lang.String.valueOf(resFloat1));
                    jTextField51.setText(java.lang.String.valueOf(Gross - Disc - Vat));

                }
            }
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox assets;
    private javax.swing.ButtonGroup buttonGroup1;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private javax.swing.JTable grnDetailsTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    public javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton52;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JDialog jSearchDialog2;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JTable jSearchTable2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField113;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField51;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JTextField orderNotxt;
    private javax.swing.JButton searchButton;
    private javax.swing.JCheckBox stockitems;
    private javax.swing.JTextField totalAmountTxt;
    // End of variables declaration//GEN-END:variables
}
