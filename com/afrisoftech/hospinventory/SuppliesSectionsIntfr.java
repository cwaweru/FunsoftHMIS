/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.afrisoftech.hospinventory;

import com.afrisoftech.lib.ClearTable;
import com.afrisoftech.lib.GetItemInfo;
import com.afrisoftech.lib.ServerTime;
import com.afrisoftech.lib.UserName;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import org.openide.util.Exceptions;

/**
 *
 * @author saleem
 */
public class SuppliesSectionsIntfr extends javax.swing.JInternalFrame {

    /**
     * Creates new form SuppliesSectionsIntfr
     */
    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    private int tab2 = 0;
    private String currentUser;
    private int num_user;

    public SuppliesSectionsIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        userdialog = new javax.swing.JDialog();
        jSearchPanel4 = new javax.swing.JPanel();
        usersearchTxt = new javax.swing.JTextField();
        jSearchScrollPane4 = new javax.swing.JScrollPane();
        jSearchTable4 = new com.afrisoftech.dbadmin.JTable();
        jButton93 = new javax.swing.JButton();
        sectionsDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField11 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton9 = new javax.swing.JButton();
        userdialog1 = new javax.swing.JDialog();
        jSearchPanel5 = new javax.swing.JPanel();
        usersearchTxt1 = new javax.swing.JTextField();
        jSearchScrollPane5 = new javax.swing.JScrollPane();
        jSearchTable5 = new com.afrisoftech.dbadmin.JTable();
        jButton94 = new javax.swing.JButton();
        userdialog2 = new javax.swing.JDialog();
        jSearchPanel6 = new javax.swing.JPanel();
        usersearchTxt2 = new javax.swing.JTextField();
        jSearchScrollPane6 = new javax.swing.JScrollPane();
        jSearchTable6 = new com.afrisoftech.dbadmin.JTable();
        jButton95 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane23 = new javax.swing.JScrollPane();
        moduleTbl = new com.afrisoftech.dbadmin.JTable();
        jSeparator3 = new javax.swing.JSeparator();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton13 = new javax.swing.JButton();
        jButton63 = new javax.swing.JButton();
        jButton53 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel59 = new javax.swing.JPanel();
        sectiontxt = new javax.swing.JTextField();
        jButton23 = new javax.swing.JButton();
        superUserCmbx = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jScrollPane24 = new javax.swing.JScrollPane();
        moduleTbl1 = new com.afrisoftech.dbadmin.JTable();
        jSeparator4 = new javax.swing.JSeparator();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton14 = new javax.swing.JButton();
        jButton64 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel61 = new javax.swing.JPanel();
        superUserCmbx1 = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jPanel60 = new javax.swing.JPanel();
        usertxt = new javax.swing.JTextField();
        jButton24 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        moduleCmbx = new javax.swing.JComboBox();
        jPasswordField4 = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        setpwdbtn = new javax.swing.JButton();

        userdialog.setModal(true);
        userdialog.setUndecorated(true);
        userdialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel4.setLayout(new java.awt.GridBagLayout());

        usersearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                usersearchTxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        jSearchPanel4.add(usersearchTxt, gridBagConstraints);

        jSearchTable4.setShowHorizontalLines(false);
        jSearchTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable4MouseClicked(evt);
            }
        });
        jSearchScrollPane4.setViewportView(jSearchTable4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel4.add(jSearchScrollPane4, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jButton93, "Dispose");
        jButton93.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton93ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jSearchPanel4.add(jButton93, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        userdialog.getContentPane().add(jSearchPanel4, gridBagConstraints);

        sectionsDialog.setModal(true);
        sectionsDialog.setUndecorated(true);
        sectionsDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jTextField11.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField11CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(jTextField11, gridBagConstraints);

        jSearchTable.setShowHorizontalLines(false);
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jButton9, "Dispose");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        sectionsDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        userdialog1.setModal(true);
        userdialog1.setUndecorated(true);
        userdialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel5.setLayout(new java.awt.GridBagLayout());

        usersearchTxt1.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                usersearchTxt1CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        jSearchPanel5.add(usersearchTxt1, gridBagConstraints);

        jSearchTable5.setShowHorizontalLines(false);
        jSearchTable5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable5MouseClicked(evt);
            }
        });
        jSearchScrollPane5.setViewportView(jSearchTable5);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel5.add(jSearchScrollPane5, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jButton94, "Close");
        jButton94.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton94ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jSearchPanel5.add(jButton94, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        userdialog1.getContentPane().add(jSearchPanel5, gridBagConstraints);

        userdialog2.setModal(true);
        userdialog2.setUndecorated(true);
        userdialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel6.setLayout(new java.awt.GridBagLayout());

        usersearchTxt2.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                usersearchTxt2CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        jSearchPanel6.add(usersearchTxt2, gridBagConstraints);

        jSearchTable6.setShowHorizontalLines(false);
        jSearchTable6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable6MouseClicked(evt);
            }
        });
        jSearchScrollPane6.setViewportView(jSearchTable6);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel6.add(jSearchScrollPane6, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jButton95, "Close");
        jButton95.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton95ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jSearchPanel6.add(jButton95, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        userdialog2.getContentPane().add(jSearchPanel6, gridBagConstraints);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle(org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.title")); // NOI18N
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.jPanel13.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel13.setLayout(new java.awt.GridBagLayout());

        moduleTbl.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        moduleTbl.setForeground(new java.awt.Color(102, 102, 102));
        moduleTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Funsoft Login name", "Official Designation", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        moduleTbl.setShowHorizontalLines(false);
        moduleTbl.getTableHeader().setResizingAllowed(false);
        moduleTbl.getTableHeader().setReorderingAllowed(false);
        //cmbox = new javax.swing.JComboBox();
        /*try {

            crset2.setConnectionSource(pConnDB);
            crset2.execute("select payment_code from pb_paymentmodes order by payment_code");
            cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset2, "payment_code", null, null, null));
            javax.swing.table.TableColumn s = this.jTable11.getColumn("Payment Mode");
            s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
            cmbox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    cmboxActionPerformed(evt);
                }
            });

            /*     cmbox1.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset4, "item", null, null, null));
            javax.swing.table.TableColumn m = this.jTable1.getColumn("Drug Prescribed");
            m.setCellEditor(new javax.swing.DefaultCellEditor(cmbox1));
            cmbox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    cmboxActionPerformed(evt);
                }
            });

        } catch(java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
        */
        moduleTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                moduleTblMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                moduleTblMouseEntered(evt);
            }
        });
        jScrollPane23.setViewportView(moduleTbl);
        moduleTbl.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.moduleTbl.columnModel.title0")); // NOI18N
        moduleTbl.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.moduleTbl.columnModel.title2")); // NOI18N
        moduleTbl.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.moduleTbl.columnModel.title1")); // NOI18N

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1000.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel13.add(jScrollPane23, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        jPanel13.add(jSeparator3, gridBagConstraints);

        jButton13.setBackground(new java.awt.Color(0, 255, 204));
        jButton13.setMnemonic('O');
        org.openide.awt.Mnemonics.setLocalizedText(jButton13, org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.jButton13.text")); // NOI18N
        jButton13.setToolTipText(org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.jButton13.toolTipText")); // NOI18N
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel13.add(jButton13, gridBagConstraints);

        jButton63.setBackground(new java.awt.Color(0, 255, 204));
        jButton63.setMnemonic('r');
        org.openide.awt.Mnemonics.setLocalizedText(jButton63, org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.jButton63.text")); // NOI18N
        jButton63.setPreferredSize(new java.awt.Dimension(189, 25));
        jButton63.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton63ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        jPanel13.add(jButton63, gridBagConstraints);

        jButton53.setBackground(new java.awt.Color(0, 255, 204));
        jButton53.setMnemonic('d');
        org.openide.awt.Mnemonics.setLocalizedText(jButton53, org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.jButton53.text")); // NOI18N
        jButton53.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton53ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel13.add(jButton53, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1000.0;
        gridBagConstraints.weighty = 1.0;
        jPanel13.add(jLabel4, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 8;
        jPanel13.add(jButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel13, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.jLabel3.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jLabel3, gridBagConstraints);

        jPanel59.setLayout(new java.awt.GridBagLayout());

        sectiontxt.setEditable(false);
        sectiontxt.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        sectiontxt.setForeground(new java.awt.Color(102, 102, 102));
        sectiontxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sectiontxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel59.add(sectiontxt, gridBagConstraints);

        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        jPanel59.add(jButton23, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(jPanel59, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(superUserCmbx, org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.superUserCmbx.text")); // NOI18N
        superUserCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                superUserCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(superUserCmbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel2, gridBagConstraints);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.jPanel14.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel14.setLayout(new java.awt.GridBagLayout());

        moduleTbl1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        moduleTbl1.setForeground(new java.awt.Color(102, 102, 102));
        moduleTbl1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Funsoft Login name", "Main Department", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        moduleTbl1.setShowHorizontalLines(false);
        moduleTbl1.getTableHeader().setResizingAllowed(false);
        moduleTbl1.getTableHeader().setReorderingAllowed(false);
        //cmbox = new javax.swing.JComboBox();
        /*try {

            crset2.setConnectionSource(pConnDB);
            crset2.execute("select payment_code from pb_paymentmodes order by payment_code");
            cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset2, "payment_code", null, null, null));
            javax.swing.table.TableColumn s = this.jTable11.getColumn("Payment Mode");
            s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
            cmbox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    cmboxActionPerformed(evt);
                }
            });

            /*     cmbox1.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset4, "item", null, null, null));
            javax.swing.table.TableColumn m = this.jTable1.getColumn("Drug Prescribed");
            m.setCellEditor(new javax.swing.DefaultCellEditor(cmbox1));
            cmbox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    cmboxActionPerformed(evt);
                }
            });

        } catch(java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
        */
        moduleTbl1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                moduleTbl1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                moduleTbl1MouseEntered(evt);
            }
        });
        jScrollPane24.setViewportView(moduleTbl1);
        moduleTbl1.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.moduleTbl.columnModel.title0")); // NOI18N
        moduleTbl1.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.moduleTbl.columnModel.title2")); // NOI18N
        moduleTbl1.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.moduleTbl.columnModel.title1")); // NOI18N

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1000.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel14.add(jScrollPane24, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        jPanel14.add(jSeparator4, gridBagConstraints);

        jButton14.setBackground(new java.awt.Color(0, 255, 204));
        jButton14.setMnemonic('O');
        org.openide.awt.Mnemonics.setLocalizedText(jButton14, org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.jButton14.text_1")); // NOI18N
        jButton14.setToolTipText(org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.jButton14.toolTipText")); // NOI18N
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel14.add(jButton14, gridBagConstraints);

        jButton64.setBackground(new java.awt.Color(0, 255, 204));
        jButton64.setMnemonic('r');
        org.openide.awt.Mnemonics.setLocalizedText(jButton64, "Clear form");
        jButton64.setPreferredSize(new java.awt.Dimension(189, 25));
        jButton64.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton64ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        jPanel14.add(jButton64, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1000.0;
        gridBagConstraints.weighty = 1.0;
        jPanel14.add(jLabel6, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jButton2, org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 8;
        jPanel14.add(jButton2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jPanel14, gridBagConstraints);

        jPanel7.setLayout(new java.awt.GridBagLayout());

        jPanel61.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel7.add(jPanel61, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(superUserCmbx1, "Multiple Sections");
        superUserCmbx1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                superUserCmbx1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel7.add(superUserCmbx1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        jPanel6.add(jPanel7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jPanel6, gridBagConstraints);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.jPanel5.TabConstraints.tabTitle"), jPanel5); // NOI18N

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel4.setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.jLabel5.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jLabel5, gridBagConstraints);

        jPanel60.setLayout(new java.awt.GridBagLayout());

        usertxt.setEditable(false);
        usertxt.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        usertxt.setForeground(new java.awt.Color(102, 102, 102));
        usertxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usertxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel60.add(usertxt, gridBagConstraints);

        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        jPanel60.add(jButton24, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel4.add(jPanel60, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jLabel1, gridBagConstraints);

        moduleCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Quotation", "Tender" }));
        moduleCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moduleCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(moduleCmbx, gridBagConstraints);

        jPasswordField4.setText(org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.jPasswordField4.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jPasswordField4, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.jLabel2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jLabel2, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(setpwdbtn, org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.setpwdbtn.text")); // NOI18N
        setpwdbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setpwdbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        jPanel4.add(setpwdbtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jPanel4, gridBagConstraints);

        jTabbedPane1.addTab(org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.jPanel3.TabConstraints.tabTitle"), jPanel3); // NOI18N

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);
        jTabbedPane1.getAccessibleContext().setAccessibleName(org.openide.util.NbBundle.getMessage(SuppliesSectionsIntfr.class, "SuppliesSectionsIntfr.jTabbedPane1.AccessibleContext.accessibleName")); // NOI18N

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void moduleTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moduleTblMouseClicked
        // TODO add your handling code here:

        if (moduleTbl.getSelectedColumn() == 0) {
            System.out.println("Showing dialog");
            java.awt.Point point = jScrollPane23.getLocationOnScreen();
            userdialog.setSize(400, 200);
            userdialog.setLocation(point);
            userdialog.setVisible(true);

        }
    }//GEN-LAST:event_moduleTblMouseClicked

    private void moduleTblMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moduleTblMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_moduleTblMouseEntered

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed

        try {
            if (jButton13.getLabel().equalsIgnoreCase("Allocate staff to section")) {
                for (int i = 0; i < moduleTbl.getRowCount(); i++) {
                    if (moduleTbl.getValueAt(i, 0) != null) {

                        if (!superUserCmbx.isSelected()) {
                            java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("UPDATE section_allocation SET status = false,"
                                    + "time_terminated='" + com.afrisoftech.lib.ServerTime.serverTimeStamp(connectDB) + "'::timestamp(2)"
                                    + " where trim(user_name) ilike '" + moduleTbl.getValueAt(i, 0).toString() + "' and status =true");
                            pstmt1.executeUpdate();
                        }

                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into section_allocation(user_name,designation,section,status,TYPE) values(?,?,?,?,?)");

                        pstmt.setObject(1, moduleTbl.getValueAt(i, 0).toString());
                        pstmt.setObject(2, moduleTbl.getValueAt(i, 1).toString().toUpperCase());
                        pstmt.setObject(3, sectiontxt.getText().toString());
                        pstmt.setBoolean(4, (boolean) moduleTbl.getValueAt(i, 2));
                        pstmt.setObject(5, "BUYER");

                        pstmt.executeUpdate();

                        GetItemInfo.updateTrail("Section Re/Allocation for [" + moduleTbl.getValueAt(i, 0).toString() + "] to [" + sectiontxt.getText() + "]", connectDB);
                        // connectDB.commit();
                    }
                }

                JOptionPane.showMessageDialog(this, "Users transfered or allocated succesfully", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
            } else {
                for (int i = 0; i < moduleTbl.getRowCount(); i++) {
                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("UPDATE section_allocation SET user_name = '" + moduleTbl.getValueAt(i, 0).toString() + "',"
                            + "designation='" + moduleTbl.getValueAt(i, 1).toString() + "'"
                            + " where trim(user_name) ilike '" + moduleTbl.getValueAt(i, 0).toString() + "' ");

                    pstmt.executeUpdate();
                    GetItemInfo.updateTrail("Section data update for [" + moduleTbl.getValueAt(i, 0).toString() + "] in [" + sectiontxt.getText() + "]", connectDB);
                }
                JOptionPane.showMessageDialog(this, "Data update was succesful", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
                jButton13.setLabel("Allocate staff to section");

            }

            ClearTable.clearthisTable(moduleTbl);
            superUserCmbx.setSelected(false);
            //  activityChbx.doClick();
        } catch (SQLException ex) {
            ex.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, "Transaction Error,Recheck Your Entries", "Error", JOptionPane.ERROR_MESSAGE);

            try {
                connectDB.rollback();
            } catch (SQLException ex1) {

            }

        }


    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton63ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton63ActionPerformed
        // TODO add your handling code here:
        jButton13.setLabel("Update");

        moduleTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,
                "SELECT DISTINCT user_name Funsoft_Login,designation official_designation,status "
                + "FROM section_allocation where section ilike '" + sectiontxt.getText() + "'"));

    }//GEN-LAST:event_jButton63ActionPerformed

    private void jButton53ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton53ActionPerformed
        // TODO add your handling code here:
        ClearTable.clearthisTable(moduleTbl);
        sectiontxt.setText(null);
        jButton13.setLabel("Allocate staff to section");
        this.invalidate();
        //MODEL
        moduleTbl.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null}
                },
                new String[]{
                    "Funsoft Login name", "Official Designation", "Status"
                }
        ) {
            Class[] types = new Class[]{
                java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean[]{
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });


    }//GEN-LAST:event_jButton53ActionPerformed

    private void sectiontxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sectiontxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sectiontxtActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        // TODO add your handling code here:

        System.out.println("Showing dialog");
        java.awt.Point point = sectiontxt.getLocationOnScreen();
        sectionsDialog.setSize(400, 200);
        sectionsDialog.setLocation(point);
        sectionsDialog.setVisible(true);
    }//GEN-LAST:event_jButton23ActionPerformed

    private void usersearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_usersearchTxtCaretUpdate
        // TODO add your handling code here:
        if (usersearchTxt.getCaretPosition() > 3) {

            //            System.out.println("Nothing");
            //        } else {
            jSearchTable4.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct rolname from pg_roles where rolcanlogin=true AND rolname ILIKE '%" + usersearchTxt.getText() + "%' order by 1"));

            jSearchScrollPane4.setViewportView(jSearchTable4);

        }
    }//GEN-LAST:event_usersearchTxtCaretUpdate

    private String existingStatus(String user, String module) {
        String inference = "-";
        try {
            java.sql.Statement stmtsg = connectDB.createStatement();
            java.sql.ResultSet rsetsg = stmtsg.executeQuery("SELECT count(*) from secure_levels_access where   login_username='" + user + "' and menu_access='" + module + "'");

            while (rsetsg.next()) {
                num_user = rsetsg.getInt(1);

            }
            if (num_user > 0) {
                inference = "Update password";
            } else {
                inference = "Set Password";
            }

        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        }
        return inference;
    }


    private void jSearchTable4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable4MouseClicked
        // TODO add your handling code here:
        if (tab2 == 1) {
            usertxt.setText(jSearchTable4.getValueAt(jSearchTable4.getSelectedRow(), 0).toString());

            setpwdbtn.setLabel(existingStatus(usertxt.getText(), moduleCmbx.getSelectedItem().toString()));

        } else {
            moduleTbl.setValueAt(jSearchTable4.getValueAt(jSearchTable4.getSelectedRow(), 0).toString(), moduleTbl.getSelectedRow(), 0);
            moduleTbl.setValueAt(true, moduleTbl.getSelectedRow(), 2);

        }

        userdialog.dispose();
//        if (storeGLtxt.getText().length() > 0) {
//
//            activityChbx.doClick();
//            try {
//                PreparedStatement pst = connectDB.prepareStatement("SELECT COUNT (distinct stores) from store_allocation where user_name ='" + userTxt.getText() + "'");
//                ResultSet rset = pst.executeQuery();
//                int count = 0;
//                while (rset.next()) {
//
//                    count = rset.getInt(1);
//                }
//
//                if (count > 1) {
//
//                    System.out.println(count + ">>>Superuser");
//                    superUserCmbx.setSelected(true);
//
//                } else {
//                    System.out.println(count + ">>>Superuser");
//                }
//                superUserCmbx.setSelected(false);
//
//            } catch (SQLException ex) {
//                Logger.getLogger(PharmacyPointsIntfr.class.getName()).log(Level.SEVERE, null, ex);
//            }
//
//        }
    }//GEN-LAST:event_jSearchTable4MouseClicked

    private void jButton93ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton93ActionPerformed
        // TODO add your handling code here:
        userdialog.dispose();
    }//GEN-LAST:event_jButton93ActionPerformed

    private void jTextField11CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11CaretUpdate
        if (jTextField11.getCaretPosition() > 3) {

            //
            jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, " SELECT distinct upper(buyer_name) FROM st_buyers_register where buyer_name ilike '%" + jTextField11.getText() + "%'"));
            //jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select activity, code FROM pb_activity WHERE (activity ILIKE '%pharm%' OR activity ILIKE '%supplies%' OR sub_category ILIKE '%stock%') AND activity ilike '%" + jTextField11.getText() + "%'"));

            jSearchScrollPane.setViewportView(jSearchTable);

            System.out.println("Listed The Stock Outlets");

        }        // Add your handling code here:
    }//GEN-LAST:event_jTextField11CaretUpdate

    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        if (jTabbedPane1.getSelectedIndex() == 0) {
            sectiontxt.setText(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0).toString());
        } else {
           // sectiontxt1.setText(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0).toString());
        }
        sectionsDialog.dispose();

        // Add your handling code here:

    }//GEN-LAST:event_jSearchTableMouseClicked

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        this.sectionsDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void superUserCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_superUserCmbxActionPerformed
        // TODO add your handling code here:
//        if (sectiontxt.getText().length() > 0) {
//            sectiontxt.setText(null);
//        }
    }//GEN-LAST:event_superUserCmbxActionPerformed

    private void usertxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usertxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usertxtActionPerformed

    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
        // TODO add your handling code here:
        tab2 = 1;
        System.out.println("Showing dialog");
        java.awt.Point point = usertxt.getLocationOnScreen();
        userdialog.setSize(400, 200);
        userdialog.setLocation(point);
        userdialog.setVisible(true);


    }//GEN-LAST:event_jButton24ActionPerformed
    public static String md5(String input) {

        String md5 = null;

        if (null == input) {
            return null;
        }

        try {

            //Create MessageDigest object for MD5
            MessageDigest digest = MessageDigest.getInstance("MD5");

            //Update input string in message digest
            digest.update(input.getBytes(), 0, input.length());

            //Converts message digest value in base 16 (hex)
            md5 = new BigInteger(1, digest.digest()).toString(16);

        } catch (NoSuchAlgorithmException e) {

            e.printStackTrace();
        }
        return md5;
    }

    private String fullname(String loginName) {
        String fullname = "-";
        try {

            java.sql.Statement stmtSS = connectDB.createStatement();

            java.sql.ResultSet rsetSS = stmtSS.executeQuery("SELECT CONCAT(f_name,' ',l_name) ,group_name from secure_menu_access where login_name='" + loginName + "'");

            while (rsetSS.next()) {

                fullname = rsetSS.getString(1);

            }

        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        }
        return fullname;
    }
    private void setpwdbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setpwdbtnActionPerformed
        // TODO add your handling code here:
        if (setpwdbtn.getActionCommand().equals("Set Password")) {
            try {
                java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("INSERT INTO secure_levels_access(login_username, login_name, group_name, authorisation,menu_access,limit_amount) VALUES (?, ?, ?, ?,?,?)");
                pstmt2.setObject(1, usertxt.getText());
                // pstmt2.setObject(1, jTextField1.getText().toUpperCase());
                pstmt2.setObject(2, fullname(usertxt.getText()));
                pstmt2.setObject(3, "Buyer");
                pstmt2.setObject(4, md5(jPasswordField4.getText()));
                pstmt2.setObject(5, moduleCmbx.getSelectedItem());
                pstmt2.setDouble(6, 0.0);
                pstmt2.executeUpdate();
                JOptionPane.showMessageDialog(null, "Password Created Successfully", "CONFIRMATION MESSAGE", JOptionPane.INFORMATION_MESSAGE);
                jPasswordField4.setText(null);

                usertxt.setText(null);
            } catch (SQLException ex) {
                Exceptions.printStackTrace(ex);
            }

        } else {

            try {
                java.sql.PreparedStatement pstmts = connectDB.prepareStatement("UPDATE secure_levels_access set authorisation='" + md5(jPasswordField4.getText()) + "' where login_username='" + usertxt.getText() + "' and menu_access='" + moduleCmbx.getSelectedItem() + "'");
                pstmts.executeUpdate();
            } catch (SQLException ex) {
                Exceptions.printStackTrace(ex);
            }

            JOptionPane.showMessageDialog(null, "Password Changed Successfully", "CONFIRMATION MESSAGE", JOptionPane.INFORMATION_MESSAGE);

        }


    }//GEN-LAST:event_setpwdbtnActionPerformed

    private void moduleCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moduleCmbxActionPerformed
        // TODO add your handling code here:
        if (usertxt.getText().length() > 0) {

            setpwdbtn.setLabel(existingStatus(usertxt.getText(), moduleCmbx.getSelectedItem().toString()));

        }


    }//GEN-LAST:event_moduleCmbxActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, " This will delete the records permanently \n You CANNOT Reverse This Action. Continue ?", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

        if (exitOption == javax.swing.JOptionPane.YES_OPTION) {
            try {
                // TODO add your handling code here:
                for (int i = 0; i < moduleTbl.getRowCount(); i++) {
                    if (moduleTbl.getValueAt(i, 0) != null) {
                        java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("delete from section_allocation where user_name ilike '" + moduleTbl.getValueAt(i, 0).toString() + "' and section ilike '" + sectiontxt.getText() + "'");
                        pstmt2.executeUpdate();

                        GetItemInfo.updateTrail("Deleted permanently Entries  [" + moduleTbl.getValueAt(i, 0).toString() + "] in [" + sectiontxt.getText() + "]", connectDB);
                    }
                }
            } catch (SQLException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void moduleTbl1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moduleTbl1MouseClicked
        // TODO add your handling code here:
        if (moduleTbl1.getSelectedColumn() == 0) {
            // TODO add your handling code here:
            System.out.println("Showing dialog");
            java.awt.Point point = jScrollPane24.getLocationOnScreen();
            userdialog1.setSize(400, 200);
            userdialog1.setLocation(point);
            userdialog1.setVisible(true);

        } else if (moduleTbl1.getSelectedColumn() == 1) {
            // TODO add your handling code here:
            System.out.println("Showing dialog");
            java.awt.Point point = jScrollPane24.getLocationOnScreen();
            userdialog2.setSize(400, 200);
            userdialog2.setLocation(point);
            userdialog2.setVisible(true);
        }
        
    }//GEN-LAST:event_moduleTbl1MouseClicked

    private void moduleTbl1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moduleTbl1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_moduleTbl1MouseEntered

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
           try {
            if (jButton14.getLabel().contains("Allocate")) {
                for (int i = 0; i < moduleTbl1.getRowCount(); i++) {
                    if (moduleTbl1.getValueAt(i, 0) != null) {

                        if (!superUserCmbx1.isSelected()) {
                            java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("UPDATE section_allocation SET status = false,"
                                    + "time_terminated='" + com.afrisoftech.lib.ServerTime.serverTimeStamp(connectDB) + "'::timestamp(2)"
                                    + " where trim(user_name) ilike '" + moduleTbl1.getValueAt(i, 0).toString() + "' and status =true");
                            pstmt1.executeUpdate();
                        }

                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into section_allocation(user_name,designation,section,status,type) values(?,?,?,?,?)");

                        pstmt.setObject(1, moduleTbl1.getValueAt(i, 0).toString());
                        pstmt.setObject(2, moduleTbl1.getValueAt(i, 1).toString().toUpperCase());
                        pstmt.setObject(3, "");
                        pstmt.setBoolean(4, (boolean) moduleTbl1.getValueAt(i, 2));
                        pstmt.setObject(5, "AIE");

                        pstmt.executeUpdate();

                        GetItemInfo.updateTrail("AIE HOLDER Re/Allocation for [" + moduleTbl1.getValueAt(i, 0).toString() + "] to [" + moduleTbl1.getValueAt(i, 1).toString() + "]", connectDB);
                        // connectDB.commit();
                    }
                }

                JOptionPane.showMessageDialog(this, "Users transfered or allocated succesfully", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
                ClearTable.clearthisTable(moduleTbl1);
            } else {
                for (int i = 0; i < moduleTbl1.getRowCount(); i++) {
                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("UPDATE section_allocation SET user_name = '" + moduleTbl1.getValueAt(i, 0).toString() + "',"
                            + "designation='" + moduleTbl1.getValueAt(i, 1).toString() + "'"
                            + " where trim(user_name) ilike '" + moduleTbl1.getValueAt(i, 0).toString() + "' ");

                    pstmt.executeUpdate();
                    GetItemInfo.updateTrail("AIE existing data update for [" + moduleTbl1.getValueAt(i, 0).toString() + "] in [" + moduleTbl1.getValueAt(i, 1).toString() + "]", connectDB);
                }
                JOptionPane.showMessageDialog(this, "Data update was succesful", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);
                jButton14.setLabel("Allocate ");
                     ClearTable.clearthisTable(moduleTbl1);

            }

            ClearTable.clearthisTable(moduleTbl);
            superUserCmbx.setSelected(false);
            //  activityChbx.doClick();
        } catch (SQLException ex) {
            ex.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, "Transaction Error,Recheck Your Entries", "Error", JOptionPane.ERROR_MESSAGE);

            try {
                connectDB.rollback();
            } catch (SQLException ex1) {

            }

        }
        
        
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton64ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton64ActionPerformed
        // TODO add your handling code here:
            ClearTable.clearthisTable(moduleTbl1);
    }//GEN-LAST:event_jButton64ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        setVisible(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void superUserCmbx1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_superUserCmbx1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_superUserCmbx1ActionPerformed

    private void usersearchTxt1CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_usersearchTxt1CaretUpdate
        // TODO add your handling code here:
        if (usersearchTxt1.getCaretPosition() > 3) {

            //            System.out.println("Nothing");
            //        } else {
            jSearchTable5.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct rolname from pg_roles where rolcanlogin=true AND rolname ILIKE '%" + usersearchTxt1.getText() + "%' order by 1"));

            jSearchScrollPane5.setViewportView(jSearchTable5);

        }

    }//GEN-LAST:event_usersearchTxt1CaretUpdate

    private void jSearchTable5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable5MouseClicked
        // TODO add your handling code here:
        moduleTbl1.setValueAt(jSearchTable5.getValueAt(jSearchTable5.getSelectedRow(), 0).toString(), moduleTbl1.getSelectedRow(), 0);
        moduleTbl1.setValueAt(true, moduleTbl1.getSelectedRow(), 2);
        jButton94.doClick();
    }//GEN-LAST:event_jSearchTable5MouseClicked

    private void jButton94ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton94ActionPerformed
        // TODO add your handling code here:
        this.userdialog1.dispose();
    }//GEN-LAST:event_jButton94ActionPerformed

    private void usersearchTxt2CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_usersearchTxt2CaretUpdate
        // TODO add your handling code here:
               if (usersearchTxt2.getCaretPosition() > 3) {

            //            System.out.println("Nothing");
            //        } else {
            jSearchTable6.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct initcap(headname) from heads where headname ILIKE '%" + usersearchTxt2.getText() + "%' order by 1"));

            jSearchScrollPane6.setViewportView(jSearchTable6);

        }
        
        
        
        
        
        
    }//GEN-LAST:event_usersearchTxt2CaretUpdate

    private void jSearchTable6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable6MouseClicked
        // TODO add your handling code here:
        moduleTbl1.setValueAt(jSearchTable6.getValueAt(jSearchTable6.getSelectedRow(), 0).toString(), moduleTbl1.getSelectedRow(), 1);
        
        jButton95.doClick();
    }//GEN-LAST:event_jSearchTable6MouseClicked

    private void jButton95ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton95ActionPerformed
        // TODO add your handling code here:
        this.userdialog2.dispose();
    }//GEN-LAST:event_jButton95ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton53;
    private javax.swing.JButton jButton63;
    private javax.swing.JButton jButton64;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButton93;
    private javax.swing.JButton jButton94;
    private javax.swing.JButton jButton95;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel59;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel60;
    private javax.swing.JPanel jPanel61;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPasswordField jPasswordField4;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JScrollPane jScrollPane24;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jSearchPanel4;
    private javax.swing.JPanel jSearchPanel5;
    private javax.swing.JPanel jSearchPanel6;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane4;
    private javax.swing.JScrollPane jSearchScrollPane5;
    private javax.swing.JScrollPane jSearchScrollPane6;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTable jSearchTable4;
    private javax.swing.JTable jSearchTable5;
    private javax.swing.JTable jSearchTable6;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JComboBox moduleCmbx;
    private javax.swing.JTable moduleTbl;
    private javax.swing.JTable moduleTbl1;
    private javax.swing.JDialog sectionsDialog;
    private javax.swing.JTextField sectiontxt;
    private javax.swing.JButton setpwdbtn;
    private javax.swing.JCheckBox superUserCmbx;
    private javax.swing.JCheckBox superUserCmbx1;
    private javax.swing.JDialog userdialog;
    private javax.swing.JDialog userdialog1;
    private javax.swing.JDialog userdialog2;
    private javax.swing.JTextField usersearchTxt;
    private javax.swing.JTextField usersearchTxt1;
    private javax.swing.JTextField usersearchTxt2;
    private javax.swing.JTextField usertxt;
    // End of variables declaration//GEN-END:variables
}