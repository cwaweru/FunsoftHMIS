/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.afrisoftech.hospinventory;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author funsoft
 */
public class SetItemPriceIntfr extends javax.swing.JInternalFrame {

    java.sql.Connection connectDB = null;

    /**
     * Creates new form SetItemPriceIntfr
     */
    public SetItemPriceIntfr(java.sql.Connection connDB) {

        connectDB = connDB;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        itemSearchDialog = new javax.swing.JDialog();
        itemSearchPanel = new javax.swing.JPanel();
        searchItemLabel = new javax.swing.JLabel();
        searchItemtxt = new javax.swing.JTextField();
        closeBtn = new javax.swing.JButton();
        itemSearchScrollPane = new javax.swing.JScrollPane();
        itemSearchTable = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
            };

            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        mainPanel = new javax.swing.JPanel();
        stockItemsScrollPane = new javax.swing.JScrollPane();
        stockItemsTable = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class
            };

            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        buttonPanel = new javax.swing.JPanel();
        updateStockPricesBtn = new javax.swing.JButton();
        clearFormBtn = new javax.swing.JButton();
        closeFormBtn = new javax.swing.JButton();
        spacerLabel = new javax.swing.JLabel();

        itemSearchDialog.setUndecorated(true);
        itemSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        itemSearchPanel.setLayout(new java.awt.GridBagLayout());

        searchItemLabel.setText("Type Search Item");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        itemSearchPanel.add(searchItemLabel, gridBagConstraints);

        searchItemtxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchItemtxtCaretUpdate(evt);
            }
        });
        searchItemtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchItemtxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        itemSearchPanel.add(searchItemtxt, gridBagConstraints);

        closeBtn.setText("Close");
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        itemSearchPanel.add(closeBtn, gridBagConstraints);

        itemSearchTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Code", "Item Description", "Selling Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        javax.swing.table.TableColumn columns = null;
        for (int i = 0; i < 3; i++) {
            columns = this.itemSearchTable.getColumnModel().getColumn(i);
            if (i == 1) {

                columns.setPreferredWidth(300); //sport column is bigger
            } else {

                //if (i == 2) {
                    columns.setPreferredWidth(150);
                    // }  else
                //column.setPreferredWidth(50);

            }
        }
        itemSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemSearchTableMouseClicked(evt);
            }
        });
        itemSearchScrollPane.setViewportView(itemSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        itemSearchPanel.add(itemSearchScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        itemSearchDialog.getContentPane().add(itemSearchPanel, gridBagConstraints);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Setting new global prices for selected items");
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        mainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Select items targeted for direct price adjustment"));
        mainPanel.setLayout(new java.awt.GridBagLayout());

        stockItemsTable.setAutoCreateRowSorter(true);
        stockItemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item Code", "Item Description", "Current Price", "New Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        stockItemsTable.setDragEnabled(true);
        stockItemsTable.setRowHeight(22);
        javax.swing.table.TableColumn column1 = null;
        for (int i = 0; i < 4; i++) {
            column1 = this.stockItemsTable.getColumnModel().getColumn(i);
            if (i == 1) {

                column1.setPreferredWidth(300); //sport column is bigger
            } else {

                //if (i == 2) {
                    column1.setPreferredWidth(150);
                    // }  else
                //column.setPreferredWidth(50);

            }
        }
        stockItemsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stockItemsTableMouseClicked(evt);
            }
        });
        stockItemsScrollPane.setViewportView(stockItemsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(stockItemsScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        getContentPane().add(mainPanel, gridBagConstraints);

        buttonPanel.setForeground(new java.awt.Color(0, 0, 255));
        buttonPanel.setLayout(new java.awt.GridBagLayout());

        updateStockPricesBtn.setMnemonic('U');
        updateStockPricesBtn.setText("Update stock prices");
        updateStockPricesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateStockPricesBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(updateStockPricesBtn, gridBagConstraints);

        clearFormBtn.setMnemonic('C');
        clearFormBtn.setText("Clear form");
        clearFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(clearFormBtn, gridBagConstraints);

        closeFormBtn.setMnemonic('l');
        closeFormBtn.setText("Close form");
        closeFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(closeFormBtn, gridBagConstraints);

        spacerLabel.setForeground(new java.awt.Color(0, 0, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(spacerLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(buttonPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateStockPricesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateStockPricesBtnActionPerformed
        try {
            // Update stock prices for items selected on table
            for (int i = 0; i < stockItemsTable.getRowCount(); i++) {
                if (stockItemsTable.getValueAt(i, 0) != null) {
                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("UPDATE st_stock_prices SET selling_price = ?, transfer_price = ? WHERE product_id = ?");
                    pstmt.setDouble(1, Double.parseDouble(stockItemsTable.getValueAt(i, 3).toString()));
                    pstmt.setDouble(2, Double.parseDouble(stockItemsTable.getValueAt(i, 3).toString()));
                    pstmt.setString(3, stockItemsTable.getValueAt(i, 0).toString());
                    pstmt.executeUpdate();
                    pstmt.close();
                }
            }
            this.spacerLabel.setText("Item prices updated successfully.");
        } catch (SQLException ex) {
            ex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(SetItemPriceIntfr.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_updateStockPricesBtnActionPerformed

    private void closeFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFormBtnActionPerformed

        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_closeFormBtnActionPerformed

    private void searchItemtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchItemtxtActionPerformed

    //    itemSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT DISTINCT product_id, product, selling_price FROM st_stock_prices WHERE product ilike '%"+this.searchitemtxt.getText()+"%' OR product_id ilike '%"+this.searchitemtxt.getText()+"%'"));
        // TODO add your handling code here:
    }//GEN-LAST:event_searchItemtxtActionPerformed

    private void stockItemsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stockItemsTableMouseClicked

        this.spacerLabel.setText("");
        
        if (stockItemsTable.getSelectedColumn() == 0) {

        java.awt.Point point = stockItemsScrollPane.getLocationOnScreen();
       
        itemSearchDialog.setSize(700, 200);
       
        itemSearchDialog.setLocation(point);
       
        itemSearchDialog.setVisible(true);
         
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_stockItemsTableMouseClicked

    private void itemSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemSearchTableMouseClicked

        stockItemsTable.setValueAt(this.itemSearchTable.getValueAt(itemSearchTable.getSelectedRow(), 0), stockItemsTable.getSelectedRow(), 0);
        stockItemsTable.setValueAt(this.itemSearchTable.getValueAt(itemSearchTable.getSelectedRow(), 1), stockItemsTable.getSelectedRow(), 1);
        stockItemsTable.setValueAt(this.itemSearchTable.getValueAt(itemSearchTable.getSelectedRow(), 2), stockItemsTable.getSelectedRow(), 2);
        itemSearchDialog.setVisible(false);
        
        // TODO add your handling code here:
    }//GEN-LAST:event_itemSearchTableMouseClicked

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed

        itemSearchDialog.setVisible(false);// TODO add your handling code here:
    }//GEN-LAST:event_closeBtnActionPerformed

    private void searchItemtxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchItemtxtCaretUpdate

        
        itemSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT DISTINCT product_id, product, selling_price FROM st_stock_prices WHERE product ilike '%"+this.searchItemtxt.getText()+"%' OR product_id ilike '%"+this.searchItemtxt.getText()+"%'"));
     
        // TODO add your handling code here:
    }//GEN-LAST:event_searchItemtxtCaretUpdate

    private void clearFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFormBtnActionPerformed

        for(int i = 0; i < stockItemsTable.getRowCount(); i++){
            for(int j = 0; j < stockItemsTable.getColumnCount(); j++){
                stockItemsTable.setValueAt(null, i, j);
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_clearFormBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton clearFormBtn;
    private javax.swing.JButton closeBtn;
    private javax.swing.JButton closeFormBtn;
    private javax.swing.JDialog itemSearchDialog;
    private javax.swing.JPanel itemSearchPanel;
    private javax.swing.JScrollPane itemSearchScrollPane;
    private javax.swing.JTable itemSearchTable;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel searchItemLabel;
    private javax.swing.JTextField searchItemtxt;
    private javax.swing.JLabel spacerLabel;
    private javax.swing.JScrollPane stockItemsScrollPane;
    private javax.swing.JTable stockItemsTable;
    private javax.swing.JButton updateStockPricesBtn;
    // End of variables declaration//GEN-END:variables
}
