/*
 * companyprflintfr.java
 *
 * Created on August 13, 2002, 11:36 AM
 */
package com.afrisoftech.hospinventory;

import java.sql.Timestamp;

/**
 *
 * @author root
 */
public class StockCountingAdjintfr extends javax.swing.JInternalFrame implements java.lang.Runnable {

    private javax.swing.JComboBox cmbox2 = new javax.swing.JComboBox();
    private javax.swing.JComboBox cmbox = new javax.swing.JComboBox();

    javax.swing.JSpinner dateSpinner = null;
    javax.swing.JSpinner dateSpinner1 = null;
    java.lang.Thread getListThread;
    java.lang.Thread getListThread1;
    java.sql.Connection connectDB = null;
    boolean getList;
    boolean getList1;
    com.afrisoftech.lib.DBObject dbObject;
    //org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    private String actCode;
    private String Stock;
    private String activity;

    public StockCountingAdjintfr(java.sql.Connection connDb) {

        dbObject = new com.afrisoftech.lib.DBObject();
        connectDB = connDb;

//        pConnDB = pconnDB;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton9 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel12 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        storeCmbx = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        reconcileDtpckr = new com.afrisoftech.lib.DatePicker();
        jLabel11 = new javax.swing.JLabel();
        categoryCmbx = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        range1txt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        range2txt = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        centralStorerbtn = new javax.swing.JRadioButton();
        subStorebtn = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        storeGLtxt = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new com.afrisoftech.dbadmin.JTable();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(jTextField111, gridBagConstraints);

        jSearchTable.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton9.setText("Dispose");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        setBackground(new java.awt.Color(153, 255, 153));
        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Supply Chain Management System : Stock/Inventory Reconciliation form");
        setToolTipText("Please Enter The Qty Difference You Want To update");
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel12.setFont(new java.awt.Font("Utopia", 3, 18)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        getContentPane().add(jLabel12, gridBagConstraints);

        jPanel1.setBackground(new java.awt.Color(102, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Sub store here"));
        jPanel1.setAutoscrolls(true);
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText(" Store");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        storeCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select stores from store_allocation where user_name = current_user"));
        storeCmbx.setEnabled(false);
        storeCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(storeCmbx, gridBagConstraints);

        jLabel2.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jLabel2, gridBagConstraints);

        reconcileDtpckr.setDate(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel1.add(reconcileDtpckr, gridBagConstraints);

        jLabel11.setText("Category");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel1.add(jLabel11, gridBagConstraints);

        categoryCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select  description as name from st_main_category order by name "));
        categoryCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(categoryCmbx, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("From");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jLabel3, gridBagConstraints);

        range1txt.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        jPanel4.add(range1txt, gridBagConstraints);

        jLabel4.setText("To");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jLabel4, gridBagConstraints);

        range2txt.setText("-");
        range2txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                range2txtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel4.add(range2txt, gridBagConstraints);

        jCheckBox1.setText("List item balances");
        jCheckBox1.setToolTipText("Please tick once to display list of items registered in the selected store");
        jCheckBox1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "You MUST select to display items in the selected store", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 51, 255))); // NOI18N
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jCheckBox1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel1.add(jPanel4, gridBagConstraints);

        buttonGroup1.add(centralStorerbtn);
        centralStorerbtn.setText("Central Store");
        centralStorerbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                centralStorerbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel1.add(centralStorerbtn, gridBagConstraints);

        buttonGroup1.add(subStorebtn);
        subStorebtn.setText("Sub Store");
        subStorebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subStorebtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(subStorebtn, gridBagConstraints);

        jLabel5.setText("INVENTORY CODE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel1.add(jLabel5, gridBagConstraints);

        storeGLtxt.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        storeGLtxt.setText(com.afrisoftech.lib.GetItemInfo.getStoreMainGL(storeCmbx.getSelectedItem().toString(), connectDB));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(storeGLtxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter items & their balances"));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Item Code", "Item Description", "Strength", "Units", "Balance Qty", "Saleable Qty", "Expired Qty", "Damaged Qty", "Comments"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(false);
        // java.lang.Object[] strCmb = {"Payable","Receivable","Both"};

        //javax.swing.JComboBox cmBox = new javax.swing.JComboBox(strCmb);

        /*  javax.swing.SpinnerDateModel spinerDate = new javax.swing.SpinnerDateModel();
        dateSpinner = new javax.swing.JSpinner(spinerDate);

        javax.swing.table.TableColumn teditor = this.jTable1.getColumn("Expiry Date");

        teditor.setCellEditor(new javax.swing.DefaultCellEditor(dateSpinner));

        */

        /*
        cmbox2 = new javax.swing.JComboBox();

        try {

            crset1.setConnectionSource(pConnDB);
            crset1.execute("select description from stock_item ORDER BY description");

            cmbox2.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset1, "description", null, null,null));

            javax.swing.table.TableColumn seditor = this.jTable1.getColumn("Item Description");

            seditor.setCellEditor(new javax.swing.DefaultCellEditor(cmbox2));

            /*  cmbox2.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent evt) {

                    cmbox2ActionPerformed(evt);
                }
            });
            *
        } catch(java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
        */

        javax.swing.table.TableColumn column = null;
        for (int i = 0; i < 8; i++) {
            column = jTable1.getColumnModel().getColumn(i);
            if (i == 0) {

                column.setPreferredWidth(300); //sport column is bigger
            } else {
                if (i == 1) {
                    column.setPreferredWidth(100);
                } else {
                    //if (i == 2) {
                        column.setPreferredWidth(100);
                        // }  else
                    //column.setPreferredWidth(50);

                }
            }
        }
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTable1KeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        jPanel2.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        getContentPane().add(jPanel2, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jButton1.setMnemonic('O');
        jButton1.setText("Save inventory reconciliation data");
        jButton1.setToolTipText("click to store data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton1, gridBagConstraints);

        jButton5.setMnemonic('r');
        jButton5.setText("Remove Row");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(jButton5, gridBagConstraints);

        jButton3.setMnemonic('l');
        jButton3.setText("Clear form");
        jButton3.setToolTipText("click to clear fields");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton3, gridBagConstraints);

        jButton4.setMnemonic('C');
        jButton4.setText("Close form");
        jButton4.setToolTipText("Click to close");
        jButton4.setSelected(true);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jLabel6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jPanel3, gridBagConstraints);

        setBounds(0, 0, 1266, 459);
    }// </editor-fold>//GEN-END:initComponents

    private void subStorebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subStorebtnActionPerformed
        if (!jButton1.isEnabled()) {
            jButton1.setEnabled(true);
        }

        storeCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select stores from store_allocation where user_name = current_user"));

        //jComboBox1.setSelectedIndex(1);
        // com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select stores from store_allocation where user_name = current_user")
        storeCmbx.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeCmbxActionPerformed(evt);
            }
        });     // Add your handling code here:
    }//GEN-LAST:event_subStorebtnActionPerformed

    private void centralStorerbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_centralStorerbtnActionPerformed
//  jComboBox1.setM

        if (!jButton1.isEnabled()) {
            jButton1.setEnabled(true);
        }

        storeCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select stores from store_allocation where user_name = current_user and type ilike '%reconcil%' "));
        storeCmbx.setSelectedIndex(0);
        storeCmbx.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeCmbxActionPerformed(evt);
            }
        });
        // Add your handling code here:
    }//GEN-LAST:event_centralStorerbtnActionPerformed

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        if (jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 5) != null) {
            //if (jTable1.getSelectedColumn() == jTable1.getSelectedColumn()) {
            // jTable1.setValueAt(0, jTable1.getSelectedRow(), 6);
            // jTable1.setValueAt(0, jTable1.getSelectedRow(), 7);
            //}

        }// TODO add your handling code here:
    }//GEN-LAST:event_jTable1KeyReleased

    private void jTable1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyTyped
// TODO add your handling code here:
    }//GEN-LAST:event_jTable1KeyTyped

    //runGetListThread1() runs when the comboBox labelled category is selected
    public void runGetListThread1() {
        // if (jCheckBox1.isSelected()){

        if (reconcileDtpckr.getDate() == null) {
            javax.swing.JOptionPane.showMessageDialog(null, "You need to first select the date on which the physical count took place");

        } else {

            for (int k = 0; k < jTable1.getRowCount(); k++) {
                for (int r = 0; r < jTable1.getColumnCount(); r++) {
                    jTable1.getModel().setValueAt(null, k, r);
                }
            }
            if (range1txt.getText().equalsIgnoreCase("-")) {
                if (centralStorerbtn.isSelected()) {
                    jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct item_code,description,strength,units,null as balance,null as saleable, null as damaged, null as expired, null as comments from stockitem WHERE department ilike '" + storeCmbx.getSelectedItem().toString() + "'  AND sub_cat_code ilike '" + categoryCmbx.getSelectedItem() + "' order by description"));
                } else {

                    jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct product_id,product,strength,units,null as balance,null as saleable, null as damaged, null as expired, null as comments from st_stock_prices WHERE department ilike '" + storeCmbx.getSelectedItem().toString() + "' AND category ilike '" + categoryCmbx.getSelectedItem() + "' order by product"));

                }
            } else {
                if (centralStorerbtn.isSelected()) {
                    jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct item_code,description,strength,units,null as balance,null as saleable, null as damaged, null as expired, null as comments from stockitem WHERE (description ILIKE '" + range1txt.getText() + "%' OR description ILIKE '" + range2txt.getText() + "%') AND department ilike '" + storeCmbx.getSelectedItem().toString() + "'  AND sub_cat_code ilike '" + categoryCmbx.getSelectedItem() + "'  order by description"));
                } else {
                    jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct product_id,product,strength,units,null as balance,null as saleable, null as damaged, null as expired, null as comments from st_stock_prices WHERE (product ILIKE '" + range1txt.getText() + "%' OR product ILIKE '" + range2txt.getText() + "%') AND department ilike '" + storeCmbx.getSelectedItem().toString() + "' AND category ilike '" + categoryCmbx.getSelectedItem() + "' order by product"));

                }
            }

            Class[] types = new Class[]{
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean[]{
                false, false, false, false, false, true, true, true, true
            };

            jTable1.setShowHorizontalLines(true);
            javax.swing.table.TableColumn column = null;
            for (int i = 0; i < 7; i++) {
                column = jTable1.getColumnModel().getColumn(i);
                if (i == 1) {

                    column.setPreferredWidth(300); //sport column is bigger
                } else {
                    if (i == 1) {
                        column.setPreferredWidth(100);
                    } else {
                        //if (i == 2) {
                        column.setPreferredWidth(100);
                        // }  else
                        //column.setPreferredWidth(50);

                    }
                }
            }
            try {

                for (int i = 0; i < jTable1.getRowCount(); i++) {
                    Object qty = 0.00;
                    //  float qty = 0;
                    java.sql.Statement stmt1 = connectDB.createStatement();
                    java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT sum(qty) FROM stock_balance_qty  WHERE department ilike '" + storeCmbx.getSelectedItem().toString() + "' AND item_code ilike '" + jTable1.getValueAt(i, 0) + "' AND dates <= '" + reconcileDtpckr.getDate() + "'");
                    while (rSet1.next()) {
                        // qty = rSet1.getObject(1);
                        qty = dbObject.getDBObject(rSet1.getObject(1), "0.00");
                        if (qty.equals("-")) {
                            jTable1.setValueAt(0.00, i, 4);
                        } else {
                            jTable1.setValueAt(qty, i, 4);
                        }
                    }
                }

            } catch (java.sql.SQLException sqlExec) {
                sqlExec.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());
            }

        }

    }

    private void categoryCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryCmbxActionPerformed
        //if (jCheckBox1.isSelected()){
        for (int k = 0; k < jTable1.getRowCount(); k++) {
            for (int r = 0; r < jTable1.getColumnCount(); r++) {
                jTable1.getModel().setValueAt(null, k, r);
            }
        }

        getList1 = true;

        getListThread1 = new java.lang.Thread(this, "get_list_Thread1");

        getListThread1.start();


    }//GEN-LAST:event_categoryCmbxActionPerformed
    public java.lang.Object[] getListofActivities() {

        java.lang.Object[] listofActivities = null;

        java.util.Vector listActVector = new java.util.Vector(1, 1);

        try {

            //    java.sql.Connection connDB = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/sako","postgres","pilsiner");
            java.sql.Statement stmt1 = connectDB.createStatement();
            if (subStorebtn.isSelected()) {
                java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT product FROM st_stock_prices  WHERE department ilike '" + storeCmbx.getSelectedItem().toString() + "' order by product");
                while (rSet1.next()) {

                    listActVector.addElement(rSet1.getObject(1).toString());
                    //}
                }
                System.out.println("description" + rSet1.getObject(1).toString());
            } else {
                java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT description FROM st_stock_item  WHERE department ilike '" + storeCmbx.getSelectedItem().toString() + "' order by description");
                while (rSet1.next()) {

                    listActVector.addElement(rSet1.getObject(1).toString());
                    //}
                }
                System.out.println("description" + rSet1.getObject(1).toString());
            }
            //java.sql.ResultSet rSet1 = pSet1.executeQuery()

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());

        }

        listofActivities = listActVector.toArray();
        System.out.println("Done list of activities ...");
        return listofActivities;
    }
    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        getList = true;

        getListThread = new java.lang.Thread(this, "get_list_Thread");

        getListThread.start();

// Add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed
    public void run() {

        while (getList) {

            runGetListThread();

            try {

                Thread.currentThread().sleep(100);

            } catch (java.lang.InterruptedException IntExec) {

                javax.swing.JOptionPane.showMessageDialog(this, IntExec.getMessage(), "Interruption Error!", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

            getList = false;
            getListThread.destroy();
        }

        while (getList1) {

            runGetListThread1();

            try {

                Thread.currentThread().sleep(100);

            } catch (java.lang.InterruptedException IntExec) {

                javax.swing.JOptionPane.showMessageDialog(this, IntExec.getMessage(), "Interruption Error!", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

            getList1 = false;
            getListThread1.destroy();
        }

    }

    //runGetListThread() runs when the checkbox labelled list is selected
    public void runGetListThread() {

        if (reconcileDtpckr.getDate() == null) {
            javax.swing.JOptionPane.showMessageDialog(null, "You need to first select the date on which the physical count took place");
        } else {
            if (jCheckBox1.isSelected()) {
                for (int k = 0; k < jTable1.getRowCount(); k++) {
                    for (int r = 0; r < jTable1.getColumnCount(); r++) {
                        jTable1.getModel().setValueAt(null, k, r);
                    }
                }
                if (range1txt.getText().equalsIgnoreCase("-")) {
                    if (centralStorerbtn.isSelected()) {
                        jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct item_code,description,strength,units,null as balance,null as saleable, null as damaged, null as expired, null as comments FROM stockitem WHERE department ilike '" + storeCmbx.getSelectedItem().toString() + "%' order by description"));
                    } else {

                        jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct (product_id),(product),strength,units,null as balance,null as saleable, null as damaged, null as expired, null as comments FROM stockprices WHERE department ilike '" + storeCmbx.getSelectedItem().toString() + "%' order by product"));

                    }
                } else {
                    if (centralStorerbtn.isSelected()) {
                        jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct item_code,description,strength,units,null as balance,null as saleable, null as damaged, null as expired, null as comments FROM stockitem WHERE (description ILIKE '" + range1txt.getText() + "%' OR description ILIKE '" + range2txt.getText() + "%') AND department ilike '" + storeCmbx.getSelectedItem().toString() + "%' order by description"));
                    } else {
                        jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct product_id,product,strength,units,null as balance,null as saleable, null as damaged, null as expired, null as comments FROM stockprices WHERE (product ILIKE '" + range1txt.getText() + "%' OR product ILIKE '" + range2txt.getText() + "%') AND department ilike '" + storeCmbx.getSelectedItem().toString() + "%' order by product"));

                    }
                }

                Class[] types = new Class[]{
                    java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class
                };
                boolean[] canEdit = new boolean[]{
                    false, false, false, false, false, true, true, true, true
                };

                jTable1.setShowHorizontalLines(true);

                javax.swing.table.TableColumn column = null;
                for (int i = 0; i < 7; i++) {
                    column = jTable1.getColumnModel().getColumn(i);
                    if (i == 1) {

                        column.setPreferredWidth(300); //sport column is bigger
                    } else {
                        if (i == 1) {
                            column.setPreferredWidth(100);
                        } else {
                            //if (i == 2) {
                            column.setPreferredWidth(100);
                            // }  else
                            //column.setPreferredWidth(50);

                        }
                    }
                }
                try {
                    for (int i = 0; i < jTable1.getRowCount(); i++) {
                        Object qty = 0.00;
                        //  float qty = 0;
                        java.sql.Statement stmt1 = connectDB.createStatement();
                        java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT sum(qty) FROM stock_balance_qty  WHERE department ilike '" + storeCmbx.getSelectedItem().toString() + "' AND item_code ilike '" + jTable1.getValueAt(i, 0) + "' AND dates <= '" + reconcileDtpckr.getDate() + "'");
                        while (rSet1.next()) {
                            // qty = rSet1.getObject(1);
                            qty = dbObject.getDBObject(rSet1.getObject(1), "0.00");
                            if (qty.equals("-")) {
                                jTable1.setValueAt(0.00, i, 4);
                            } else {
                                jTable1.setValueAt(qty, i, 4);
                            }
                        }
                    }

                } catch (java.sql.SQLException sqlExec) {

                    javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());
                }

            }

        }

    }
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        this.jSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    //jSearchTableMouseClicked(MouseEvent) runs when the table's first column is selected
    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked

        if (reconcileDtpckr.getDate() == null) {
            javax.swing.JOptionPane.showMessageDialog(null, "You need to first select the date on which the physical count took place");
            jSearchDialog.dispose();

        } else {

            jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0), jTable1.getSelectedRow(), 0);
            jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1), jTable1.getSelectedRow(), 1);
            jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 2), jTable1.getSelectedRow(), 2);
            jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 3), jTable1.getSelectedRow(), 3);

            this.jSearchDialog.dispose();

            try {
                //for (int i = 0; i < jTable1.getRowCount(); i++){
                double qty = 0.00;
                //  float qty = 0;
                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT sum(qty) FROM stock_balance_qty  WHERE department ilike '" + storeCmbx.getSelectedItem().toString() + "' AND item_code ilike '" + jTable1.getValueAt(jTable1.getSelectedRow(), 0) + "' AND dates <= '" + reconcileDtpckr.getDate() + "'");
                while (rSet1.next()) {
                    // qty = rSet1.getObject(1);
                    qty = rSet1.getDouble(1);
                    if (qty == 0) {
                        jTable1.setValueAt(0.00, jTable1.getSelectedRow(), 4);
                    } else {
                        jTable1.setValueAt(qty, jTable1.getSelectedRow(), 4);
                    }
                    // }
                }

            } catch (java.sql.SQLException sqlExec) {

                javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());
            }

        }
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked

    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate
        //if (jTextField111.getCaretPosition() > 0) {

        if (centralStorerbtn.isSelected()) {
            if (jTextField111.getCaretPosition() > 0) {

                jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT DISTINCT item_code,description, strength,units  FROM st_stock_item WHERE department ilike '" + storeCmbx.getSelectedItem() + "' AND (description ILIKE '%" + jTextField111.getText() + "%' or item_code ILIKE '%" + jTextField111.getText() + "%')  ORDER BY 1"));

                jSearchScrollPane.setViewportView(jSearchTable);
                System.out.println("executingt");
                System.out.println(storeCmbx.getSelectedItem().toString());
            }

        } else if (subStorebtn.isSelected()) {
            if (jTextField111.getCaretPosition() > 0) {
                jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT DISTINCT product_id,product,strength,units FROM st_stock_prices WHERE department ILIKE '" + storeCmbx.getSelectedItem() + "' AND (product ilike '%" + jTextField111.getText() + "%' or product_id ilike '%" + jTextField111.getText() + "%') ORDER BY 1"));
                jSearchScrollPane.setViewportView(jSearchTable);
                System.out.println("Cannot sort out");
            }
        }

        //    }
        // Add your handling code here:
    }//GEN-LAST:event_jTextField111CaretUpdate

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (storeCmbx.getSelectedItem() == null) {
            javax.swing.JOptionPane.showMessageDialog(null, "Please confirm if your account has been allocated a store.");
        } else if (jTable1.getSelectedColumn() == 0) {

            this.cmbox1MouseClicked();
        }         // Add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked
    private void cmbox1MouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane1.getLocationOnScreen();
        jSearchDialog.setSize(600, 200);
        jSearchDialog.setLocation(point);
        jSearchDialog.setVisible(true);
    }
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        int rows2Delete = jTable1.getSelectedRowCount();

        int[] selectedRows = jTable1.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable1.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable1.getModel();

                defTableModel.removeRow(jTable1.getSelectedRow());

            }
        }        // Add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void storeCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storeCmbxActionPerformed

        jButton1.setEnabled(true);
        /*    crset1.setCommand("select distinct item_description FROM receive_requisation WHERE cost_center = '"+jComboBox1.getSelectedItem()+"' AND issiued = false");
         crset1.setConnectionSource(pConnDB);

         cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset1, "item_description", null, null, null));
         javax.swing.table.TableColumn s = this.jTable1.getColumn("Item description");
         s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
         cmbox.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
         cmboxActionPerformed(evt);
         }
         });

         */
        // Add your handling code here:
    }//GEN-LAST:event_storeCmbxActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        for (int k = 0; k < jTable1.getRowCount(); k++) {
            for (int r = 0; r < jTable1.getColumnCount(); r++) {
                jTable1.getModel().setValueAt(null, k, r);
            }
        }

        this.storeCmbx.setSelectedItem(null);
        //  jComboBox11.setSelectedItem(null); // Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        java.util.Date dateToday = new java.util.Date();
        java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

        java.util.Date periodFrom = null;
        java.util.Date periodTo = null;

        if (storeCmbx.getSelectedItem() == null) {

            javax.swing.JOptionPane.showMessageDialog(null, "You have to first select the store whose stock you intend to reconcile.");

        } else if (reconcileDtpckr.getDate() == null) {

            javax.swing.JOptionPane.showMessageDialog(null, "You have to specify a reconciliation date.\n"
                    + "i.e. the ACTUAL DATE when stock for this store was physically counted.");
        } else {

            try {

                java.sql.Statement stmtf = connectDB.createStatement();
                java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + reconcileDtpckr.getDate() + "' BETWEEN period_from AND period_to");
                while (rsetf.next()) {
                    periodFrom = rsetf.getDate(1);
                    periodTo = rsetf.getDate(2);
                }

            } catch (java.sql.SQLException sq) {
                javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                System.out.println(sq.getMessage());

            }

            if (reconcileDtpckr.getDate().before(periodFrom) || reconcileDtpckr.getDate().after(periodTo)) {
                javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            } else {
                if (jTable1.isEditing()) {
                    jTable1.getCellEditor().stopCellEditing();
                }
                java.util.Calendar calendar = java.util.Calendar.getInstance();

                long dateNow = calendar.getTimeInMillis();

                java.sql.Date datenowSql = new java.sql.Date(dateNow);
                String user = null;
                java.sql.Savepoint registerSavePoint = null;

                try {
                    connectDB.setAutoCommit(false);
                    registerSavePoint = connectDB.setSavepoint("registration");
                } catch (java.sql.SQLException ex) {
                    ex.printStackTrace();
                }

                try {

                    java.sql.Statement pst2 = connectDB.createStatement();
                    java.sql.ResultSet rs = pst2.executeQuery("select current_user");
                    while (rs.next()) {
                        user = rs.getObject(1).toString();
                    }
                    String transNo = null;
                    String accountCoded = null;
                    String glTyped = null;
                    java.sql.Statement ps11 = connectDB.createStatement();
                    java.sql.ResultSet rst = ps11.executeQuery("select nextval('transaction_no_seq'),current_user");
                    while (rst.next()) {
                        rst.getObject(1).toString();

                        transNo = rst.getObject(1).toString();
                        user = rst.getObject(2).toString();
                    }

                    java.sql.Statement pstcode = connectDB.createStatement();
                    java.sql.ResultSet rscode = pst2.executeQuery("select distinct activity from pb_activity where code ='" + storeGLtxt.getText() + "'");
                    while (rscode.next()) {
                        activity = rscode.getObject(1).toString();
                        // Stock = rs.getObject(2).toString();
                    }
                    for (int i = 0; i < jTable1.getRowCount(); i++) {

                        if (jTable1.getModel().getValueAt(i, 0) == null || jTable1.getModel().getValueAt(i, 5) == null || jTable1.getModel().getValueAt(i, 6).toString().equalsIgnoreCase("")) {
                            //java.sql.PreparedStatement pstmt = connectDB.prepareStatement("update st_stock_item set quantity_instock = quantity_instock + '"+jTable1.getValueAt(i,2).toString()+"' where department = '"+jComboBox1.getSelectedItem().toString()+"' and description = '"+jTable1.getValueAt(i,0).toString()+"'");
                        } else {
                            double actual = 0.00;
                            double diff = 0.00;
                            double price = 0.00;
                            String strength = null;
                            String code = null;

                            double balance = Double.parseDouble(jTable1.getModel().getValueAt(i, 4).toString());
                            double quantity = Double.parseDouble(jTable1.getModel().getValueAt(i, 5).toString());
                            double expired = Double.parseDouble(jTable1.getModel().getValueAt(i, 6).toString());
                            double damaged = Double.parseDouble(jTable1.getModel().getValueAt(i, 7).toString());

                            actual = quantity + expired + damaged;
                            diff = balance - actual;
                            double pkge = 0;

                            java.sql.Statement pst21r = connectDB.createStatement();

                            java.sql.ResultSet rstrs = pst21r.executeQuery("SELECT packaging FROM stockitem st WHERE st.item_code = '" + jTable1.getValueAt(i, 0).toString() + "'");
                            while (rstrs.next()) {
                                pkge = rstrs.getDouble(1);
                            }
                            java.sql.Statement pstmt6 = connectDB.createStatement();
                            java.sql.ResultSet rs6 = pstmt6.executeQuery("select item_code,buying_price,strength FROM stockitem where item_code ilike '" + jTable1.getValueAt(i, 0) + "'");
                            while (rs6.next()) {
                                code = dbObject.getDBObject(rs6.getObject(1), "-");
                                //  comp = rs6.getDouble(2);
                                if (pkge == 1) {
                                    price = rs6.getDouble(2);
                                } else {
                                    price = rs6.getDouble(2) / pkge;
                                }
                                strength = rs6.getString(3);
                            }

                            quantity = quantity;
                            //system balance                     
                            if (balance != 0.0) {
                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_stock_counts values(?, ?, ?, ?, ?, "
                                        + "                                                                                      ?, ?, ?, ?, ?, "
                                        + "                                                                                      ?, ?, ?, ?,?)");
                                pstmt.setObject(1, code);
                                pstmt.setObject(2, jTable1.getValueAt(i, 1) + " " + jTable1.getValueAt(i, 2));
                                pstmt.setObject(3, "System Balance");
                                pstmt.setDouble(4, balance);
                                pstmt.setString(5, transNo);
                                pstmt.setString(6, storeCmbx.getSelectedItem().toString());
                                pstmt.setString(7, user);
                                pstmt.setTime(8, new java.sql.Time(java.util.Calendar.getInstance().getTimeInMillis()));
                                if (balance > 0) {
                                    pstmt.setDouble(9, balance * price);
                                    pstmt.setDouble(10, 0.00);
                                } else {
                                    pstmt.setDouble(9, 0.00);
                                    pstmt.setDouble(10, -balance * price);
                                }

                                pstmt.setDouble(11, price);
                                pstmt.setObject(12, jTable1.getValueAt(i, 3));
                                pstmt.setObject(13, Timestamp.valueOf(sdf.format(reconcileDtpckr.getDate())));
                                pstmt.setString(14, "");
                                pstmt.setObject(15, jTable1.getValueAt(i, 8));
                                System.err.println(sdf.format(new java.util.Date()));
                                pstmt.executeUpdate();

                            }
                            if (quantity > 0.0) {
                                //salable 
                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_stock_counts values(?, ?, ?, ?, ?, "
                                        + "                                                                                      ?, ?, ?, ?, ?, "
                                        + "                                                                                      ?, ?, ?, ?,?)");
                                pstmt.setObject(1, code);
                                pstmt.setObject(2, jTable1.getValueAt(i, 1) + " " + jTable1.getValueAt(i, 2));
                                pstmt.setObject(3, "Salable");
                                pstmt.setDouble(4, quantity);
                                pstmt.setString(5, transNo);
                                pstmt.setString(6, storeCmbx.getSelectedItem().toString());
                                pstmt.setString(7, user);
                                pstmt.setTime(8, new java.sql.Time(java.util.Calendar.getInstance().getTimeInMillis()));
                                pstmt.setDouble(9, 0.00);
                                pstmt.setDouble(10, quantity * price);
                                pstmt.setDouble(11, price);
                                pstmt.setObject(12, jTable1.getValueAt(i, 3));
                                pstmt.setObject(13, Timestamp.valueOf(sdf.format(reconcileDtpckr.getDate())));
                                pstmt.setString(14, "");
                                pstmt.setObject(15, jTable1.getValueAt(i, 8));
                                System.err.println(sdf.format(new java.util.Date()));
                                pstmt.executeUpdate();

                            }
                            if (expired > 0.0) {
                                //expired
                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_stock_counts values(?, ?, ?, ?, ?, "
                                        + "                                                                                      ?, ?, ?, ?, ?, "
                                        + "                                                                                      ?, ?, ?, ?,?)");
                                pstmt.setObject(1, code);
                                pstmt.setObject(2, jTable1.getValueAt(i, 1) + " " + jTable1.getValueAt(i, 2));
                                pstmt.setObject(3, "Expired");
                                pstmt.setDouble(4, expired);
                                pstmt.setString(5, transNo);
                                pstmt.setString(6, storeCmbx.getSelectedItem().toString());
                                pstmt.setString(7, user);
                                pstmt.setTime(8, new java.sql.Time(java.util.Calendar.getInstance().getTimeInMillis()));
                                pstmt.setDouble(9, 0.00);
                                pstmt.setDouble(10, expired * price);
                                pstmt.setDouble(11, price);
                                pstmt.setObject(12, jTable1.getValueAt(i, 3));
                                pstmt.setObject(13, Timestamp.valueOf(sdf.format(reconcileDtpckr.getDate())));
                                pstmt.setString(14, "");
                                pstmt.setObject(15, jTable1.getValueAt(i, 8));
                                System.err.println(sdf.format(new java.util.Date()));
                                pstmt.executeUpdate();

                            }
                            if (damaged > 0.0) {
                                //damaged
                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_stock_counts values(?, ?, ?, ?, ?, "
                                        + "                                                                                      ?, ?, ?, ?, ?, "
                                        + "                                                                                      ?, ?, ?, ?,?)");
                                pstmt.setObject(1, code);
                                pstmt.setObject(2, jTable1.getValueAt(i, 1) + " " + jTable1.getValueAt(i, 2));
                                pstmt.setObject(3, "Damaged");
                                pstmt.setDouble(4, damaged);
                                pstmt.setString(5, transNo);
                                pstmt.setString(6, storeCmbx.getSelectedItem().toString());
                                pstmt.setString(7, user);
                                pstmt.setTime(8, new java.sql.Time(java.util.Calendar.getInstance().getTimeInMillis()));
                                pstmt.setDouble(9, 0.00);
                                pstmt.setDouble(10, damaged * price);
                                pstmt.setDouble(11, price);
                                pstmt.setObject(12, jTable1.getValueAt(i, 3));
                                pstmt.setObject(13, Timestamp.valueOf(sdf.format(reconcileDtpckr.getDate())));
                                pstmt.setString(14, "");
                                pstmt.setObject(15, jTable1.getValueAt(i, 8));
                                System.err.println(sdf.format(new java.util.Date()));
                                pstmt.executeUpdate();

                            }
//sub stores
                            if (balance != 0.0) {
                                java.sql.PreparedStatement pstmt11 = connectDB.prepareStatement("insert into st_sub_stores values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                                pstmt11.setString(1, storeCmbx.getSelectedItem().toString());
                                pstmt11.setObject(2, jTable1.getValueAt(i, 1));
                                if (balance >= 0) {
                                    pstmt11.setDouble(4, balance);
                                    pstmt11.setDouble(3, 0.00);
                                } else {
                                    if (balance < 0) {
                                        pstmt11.setDouble(3, (balance * -1));
                                        pstmt11.setDouble(4, 0.00);
                                    }
                                }

                                pstmt11.setDouble(5, 0.00);
                                pstmt11.setDouble(6, balance * price);
                                pstmt11.setDouble(7, 0.00);
                                pstmt11.setObject(8, transNo);
                                pstmt11.setObject(9, null);
                                pstmt11.setObject(10, Timestamp.valueOf(sdf.format(reconcileDtpckr.getDate())));
                                pstmt11.setString(11, user);
                                pstmt11.setObject(12, jTable1.getValueAt(i, 3));
                                pstmt11.setString(13, storeCmbx.getSelectedItem().toString());
                                pstmt11.setObject(14, "Stock Difference");
                                pstmt11.setDouble(15, price);
                                pstmt11.setObject(16, code);
                                pstmt11.setObject(17, strength);
                                pstmt11.executeUpdate();
                            }
//                           
                            java.sql.PreparedStatement pstmt11c = connectDB.prepareStatement("insert into st_sub_stores values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                            pstmt11c.setString(1, storeCmbx.getSelectedItem().toString());
                            pstmt11c.setObject(2, jTable1.getValueAt(i, 1));
                            pstmt11c.setDouble(3, actual);
                            pstmt11c.setDouble(4, 0.00);
                            pstmt11c.setDouble(5, 0.00);
                            pstmt11c.setDouble(6, actual * price);
                            pstmt11c.setDouble(7, 0.00);
                            pstmt11c.setObject(8, transNo);
                            pstmt11c.setObject(9, null);
                            pstmt11c.setObject(10, Timestamp.valueOf(sdf.format(reconcileDtpckr.getDate())));
                            pstmt11c.setString(11, user);
                            pstmt11c.setObject(12, jTable1.getValueAt(i, 3));
                            pstmt11c.setString(13, storeCmbx.getSelectedItem().toString());
                            pstmt11c.setObject(14, "Stock Count");
                            pstmt11c.setDouble(15, price);
                            pstmt11c.setObject(16, code);
                            pstmt11c.setObject(17, strength);
                            pstmt11c.executeUpdate();

                            java.sql.Statement pst21 = connectDB.createStatement();
                            java.sql.ResultSet rs1 = pst21.executeQuery("select code,activity from pb_activity where department='INV'");
                            while (rs1.next()) {

                                accountCoded = rs1.getObject(1).toString();
                                glTyped = rs1.getObject(2).toString();
                            }
                            //nulify  
                            if (balance != 0.0) {
                                java.sql.PreparedStatement pstmtCardex = connectDB.prepareStatement("insert into st_stock_cardex values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                                pstmtCardex.setString(1, null);
                                pstmtCardex.setObject(3, jTable1.getValueAt(i, 1) + " " + jTable1.getValueAt(i, 2));
                                pstmtCardex.setString(2, storeCmbx.getSelectedItem().toString());
                                pstmtCardex.setDate(4, null);
                                pstmtCardex.setDouble(6, price);
                                pstmtCardex.setObject(7, jTable1.getValueAt(i, 3));
                                pstmtCardex.setObject(8, "");
                                pstmtCardex.setObject(9, null);
                                pstmtCardex.setString(10, null);

                                if (balance < 0) {
                                    pstmtCardex.setDouble(11, -1 * balance); // Changed by CWW was - pstmtCardex.setDouble(11, balance);
                                    pstmtCardex.setDouble(5, 0.00);
                                    pstmtCardex.setDouble(21, -1 * balance * price);
                                    pstmtCardex.setDouble(22, 0.00);
                                    pstmtCardex.setDouble(27, 0.00);
                                } else if (balance >= 0) {
                                    pstmtCardex.setDouble(11, 0.00);
                                    pstmtCardex.setDouble(27, balance); // Changed by CWWW was - pstmtCardex.setDouble(11, balance);
                                    pstmtCardex.setDouble(5, balance * price);
                                    pstmtCardex.setDouble(21, 0.00);
                                    pstmtCardex.setDouble(22, balance * price);
                                }

                                pstmtCardex.setDouble(12, 0.00);
                                pstmtCardex.setDouble(13, 0.00);
                                pstmtCardex.setString(14, "-");
                                pstmtCardex.setString(15, "-");
                                pstmtCardex.setString(16, "");
                                pstmtCardex.setString(17, null);
                                pstmtCardex.setDate(18, datenowSql);
                                pstmtCardex.setString(19, storeCmbx.getSelectedItem().toString());
                                pstmtCardex.setString(20, "Stock_System_Balance_At:" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(reconcileDtpckr.getDate()));
                                pstmtCardex.setString(20, "Stock Count Difference");
                                pstmtCardex.setString(23, storeGLtxt.getText());
                                pstmtCardex.setString(24, "");
                                pstmtCardex.setString(25, storeCmbx.getSelectedItem().toString());
                                pstmtCardex.setString(26, transNo);
                               // pstmtCardex.setDouble(27, 0.00);
                                pstmtCardex.setString(28, user);
                                pstmtCardex.setBoolean(29, false);
                                pstmtCardex.setObject(30, 0.00);
                                pstmtCardex.setObject(31, null);
                                pstmtCardex.setObject(32, jTable1.getValueAt(i, 0));
                                pstmtCardex.setObject(33, "");
                                pstmtCardex.setObject(34, "");
                                pstmtCardex.executeUpdate();
                            }
                            //add new stock         
                            java.sql.PreparedStatement pstmtCardex3 = connectDB.prepareStatement("insert into st_stock_cardex values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                            pstmtCardex3.setString(1, null);
                            pstmtCardex3.setObject(3, jTable1.getValueAt(i, 1) + " " + jTable1.getValueAt(i, 2));
                            pstmtCardex3.setString(2, storeCmbx.getSelectedItem().toString());
                            pstmtCardex3.setDate(4, null);
                            pstmtCardex3.setDouble(11, actual);
                            pstmtCardex3.setDouble(6, price);
                            pstmtCardex3.setObject(7, jTable1.getValueAt(i, 3));
                            pstmtCardex3.setObject(8, "");
                            pstmtCardex3.setObject(9, null);
                            pstmtCardex3.setString(10, null);
                            pstmtCardex3.setDouble(5, 0.00);
                            pstmtCardex3.setDouble(21, actual * price);
                            pstmtCardex3.setDouble(22, 0.00);
                            pstmtCardex3.setDouble(12, 0.00);
                            pstmtCardex3.setDouble(13, 0.00);
                            pstmtCardex3.setString(14, "-");
                            pstmtCardex3.setString(15, "-");
                            pstmtCardex3.setString(16, "");
                            pstmtCardex3.setString(17, null);
                            pstmtCardex3.setDate(18, datenowSql);
                            pstmtCardex3.setString(19, storeCmbx.getSelectedItem().toString());
                            pstmtCardex3.setString(20, "Stock_System_Balance_At:" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(reconcileDtpckr.getDate()));
                            pstmtCardex3.setString(20, "Stock Count");
                            pstmtCardex3.setString(23, storeGLtxt.getText());
                            pstmtCardex3.setString(24, "");
                            pstmtCardex3.setString(25, storeCmbx.getSelectedItem().toString());
                            pstmtCardex3.setString(26, transNo);
                            pstmtCardex3.setDouble(27, 0.00);
                            pstmtCardex3.setString(28, user);
                            pstmtCardex3.setBoolean(29, false);
                            pstmtCardex3.setObject(30, 0.00);
                            pstmtCardex3.setObject(31, null);
                            pstmtCardex3.setObject(32, jTable1.getValueAt(i, 0));
                            pstmtCardex3.setObject(33, "");
                            pstmtCardex3.setObject(34, "");
                            pstmtCardex3.executeUpdate();

                            //+ diff is loss                               
                            if (diff != 0.0) {
                                java.sql.PreparedStatement pstmt1q1 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                                pstmt1q1.setObject(1, accountCoded);
                                pstmt1q1.setString(2, glTyped);
                                pstmt1q1.setString(3, jTable1.getValueAt(i, 0).toString());
                                pstmt1q1.setString(4, jTable1.getValueAt(i, 1).toString());
                                pstmt1q1.setString(6, String.valueOf(diff));
                                pstmt1q1.setString(5, "Stock count diff");
                                pstmt1q1.setString(7, "");
                                pstmt1q1.setString(8, "");
                                pstmt1q1.setString(9, "");
                                pstmt1q1.setString(10, "");
                                pstmt1q1.setString(11, "");
                                pstmt1q1.setString(12, "");
                                pstmt1q1.setString(13, "");
                                pstmt1q1.setString(14, glTyped);
                                pstmt1q1.setString(15, "stock count");
                                if (diff > 0) { //loss
                                    pstmt1q1.setDouble(17, 0.00);
                                    /*debit*/ pstmt1q1.setDouble(16, price * diff);
                                } else if (diff < 0) { //gain
                                    pstmt1q1.setDouble(17, price * diff * -1);
                                    pstmt1q1.setDouble(16, 0.00);
                                }
                                //  price*quantity
                                pstmt1q1.setDate(18, datenowSql);
                                pstmt1q1.setString(19, transNo);
                                pstmt1q1.setBoolean(20, false);
                                pstmt1q1.setBoolean(21, false);
                                pstmt1q1.setBoolean(22, false);
                                pstmt1q1.setString(23, user);
                                pstmt1q1.setString(24, "");
                                pstmt1q1.setString(25, "");
                                pstmt1q1.setTimestamp(26, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                pstmt1q1.executeUpdate();
                            }

                        }
                    }

                    connectDB.commit();
                    connectDB.setAutoCommit(true);

                    jLabel12.setForeground(java.awt.Color.blue);
                    javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "Data Saved Successfully", "Information message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    jButton1.setEnabled(false);
                    range1txt.setText("-");
                    range2txt.setText("-");
                    // javax.swing.JOptionPane.showMessageDialog(this, "Enter quantity issued","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                    for (int k = 0; k < jTable1.getRowCount(); k++) {
                        for (int r = 0; r < jTable1.getColumnCount(); r++) {
                            jTable1.getModel().setValueAt(null, k, r);
                        }
                    }

                    storeCmbx.setSelectedItem(null);
                    reconcileDtpckr.setDate(null);
                    jButton1.setEnabled(false);
                } catch (java.sql.SQLException sq) {
                    javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    sq.printStackTrace();
                    try {
                        connectDB.rollback(registerSavePoint);
                    } catch (java.sql.SQLException sql) {
                        sql.printStackTrace();
                        javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                }

            }

        }
        //
//        StockTakeThread stockTakeThread = new StockTakeThread();
//        
//        stockTakeThread.start();

        // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void range2txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_range2txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_range2txtActionPerformed

    class StockTakeThread extends java.lang.Thread {

        public void run() {
            java.util.Date dateToday = new java.util.Date();
            java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

            java.util.Date periodFrom = null;
            java.util.Date periodTo = null;

            if (storeCmbx.getSelectedItem() == null) {

                javax.swing.JOptionPane.showMessageDialog(null, "You have to first select the store whose stock you intend to reconcile.");

            } else if (reconcileDtpckr.getDate() == null) {

                javax.swing.JOptionPane.showMessageDialog(null, "You have to specify a reconciliation date.\n"
                        + "i.e. the ACTUAL DATE when stock for this store was physically counted.");
            } else {

                try {

                    java.sql.Statement stmtf = connectDB.createStatement();
                    java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + reconcileDtpckr.getDate() + "' BETWEEN period_from AND period_to");
                    while (rsetf.next()) {
                        periodFrom = rsetf.getDate(1);
                        periodTo = rsetf.getDate(2);
                    }

                } catch (java.sql.SQLException sq) {
                    javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    System.out.println(sq.getMessage());

                }

                if (reconcileDtpckr.getDate().before(periodFrom) || reconcileDtpckr.getDate().after(periodTo)) {
                    javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                } else {
                    if (jTable1.isEditing()) {
                        jTable1.getCellEditor().stopCellEditing();
                    }
                    java.util.Calendar calendar = java.util.Calendar.getInstance();

                    long dateNow = calendar.getTimeInMillis();

                    java.sql.Date datenowSql = new java.sql.Date(dateNow);
                    String user = null;
                    java.sql.Savepoint registerSavePoint = null;

                    try {
                        connectDB.setAutoCommit(false);
                        registerSavePoint = connectDB.setSavepoint("registration");
                    } catch (java.sql.SQLException ex) {
                        ex.printStackTrace();
                    }

                    try {

                        java.sql.Statement pst2 = connectDB.createStatement();
                        java.sql.ResultSet rs = pst2.executeQuery("select current_user");
                        while (rs.next()) {
                            user = rs.getObject(1).toString();
                        }
                        String transNo = null;
                        String accountCoded = null;
                        String glTyped = null;
                        java.sql.Statement ps11 = connectDB.createStatement();
                        java.sql.ResultSet rst = ps11.executeQuery("select nextval('transaction_no_seq'),current_user");
                        while (rst.next()) {
                            rst.getObject(1).toString();

                            transNo = rst.getObject(1).toString();
                            user = rst.getObject(2).toString();
                        }

                        java.sql.Statement pstcode = connectDB.createStatement();
                        java.sql.ResultSet rscode = pst2.executeQuery("select distinct activity from pb_activity where code ='" + storeGLtxt.getText() + "'");
                        while (rscode.next()) {
                            activity = rscode.getObject(1).toString();
                            // Stock = rs.getObject(2).toString();
                        }
                        for (int i = 0; i < jTable1.getRowCount(); i++) {

                            if (jTable1.getModel().getValueAt(i, 0) == null || jTable1.getModel().getValueAt(i, 5) == null || jTable1.getModel().getValueAt(i, 6).toString().equalsIgnoreCase("")) {
                                //java.sql.PreparedStatement pstmt = connectDB.prepareStatement("update st_stock_item set quantity_instock = quantity_instock + '"+jTable1.getValueAt(i,2).toString()+"' where department = '"+jComboBox1.getSelectedItem().toString()+"' and description = '"+jTable1.getValueAt(i,0).toString()+"'");
                            } else {
                                double actual = 0.00;
                                double diff = 0.00;
                                double price = 0.00;
                                String strength = null;
                                String code = null;

                                double balance = Double.parseDouble(jTable1.getModel().getValueAt(i, 4).toString());
                                double quantity = Double.parseDouble(jTable1.getModel().getValueAt(i, 5).toString());
                                double expired = Double.parseDouble(jTable1.getModel().getValueAt(i, 6).toString());
                                double damaged = Double.parseDouble(jTable1.getModel().getValueAt(i, 7).toString());

                                actual = quantity + expired + damaged;
                                diff = balance - actual;
                                double pkge = 0;

                                java.sql.Statement pst21r = connectDB.createStatement();

                                java.sql.ResultSet rstrs = pst21r.executeQuery("SELECT packaging FROM stockitem st WHERE st.item_code = '" + jTable1.getValueAt(i, 0).toString() + "'");
                                while (rstrs.next()) {
                                    pkge = rstrs.getDouble(1);
                                }
                                java.sql.Statement pstmt6 = connectDB.createStatement();
                                java.sql.ResultSet rs6 = pstmt6.executeQuery("select item_code,buying_price,strength FROM stockitem where item_code ilike '" + jTable1.getValueAt(i, 0) + "'");
                                while (rs6.next()) {
                                    code = dbObject.getDBObject(rs6.getObject(1), "-");
                                    //  comp = rs6.getDouble(2);
                                    if (pkge == 1) {
                                        price = rs6.getDouble(2);
                                    } else {
                                        price = rs6.getDouble(2) / pkge;
                                    }
                                    strength = rs6.getString(3);
                                }

                                quantity = quantity;
                                //system balance                     
                                if (balance != 0.0) {
                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_stock_counts values(?, ?, ?, ?, ?, "
                                            + "                                                                                      ?, ?, ?, ?, ?, "
                                            + "                                                                                      ?, ?, ?, ?,?)");
                                    pstmt.setObject(1, code);
                                    pstmt.setObject(2, jTable1.getValueAt(i, 1) + " " + jTable1.getValueAt(i, 2));
                                    pstmt.setObject(3, "System Balance");
                                    pstmt.setDouble(4, balance);
                                    pstmt.setString(5, transNo);
                                    pstmt.setString(6, storeCmbx.getSelectedItem().toString());
                                    pstmt.setString(7, user);
                                    pstmt.setTime(8, new java.sql.Time(java.util.Calendar.getInstance().getTimeInMillis()));
                                    if (balance > 0) {
                                        pstmt.setDouble(9, balance * price);
                                        pstmt.setDouble(10, 0.00);
                                    } else {
                                        pstmt.setDouble(9, 0.00);
                                        pstmt.setDouble(10, -balance * price);
                                    }

                                    pstmt.setDouble(11, price);
                                    pstmt.setObject(12, jTable1.getValueAt(i, 3));
                                    pstmt.setObject(13, Timestamp.valueOf(sdf.format(reconcileDtpckr.getDate())));
                                    pstmt.setString(14, "");
                                    pstmt.setObject(15, jTable1.getValueAt(i, 8));
                                    System.err.println(sdf.format(new java.util.Date()));
                                    pstmt.executeUpdate();

                                }
                                if (quantity > 0.0) {
                                    //salable 
                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_stock_counts values(?, ?, ?, ?, ?, "
                                            + "                                                                                      ?, ?, ?, ?, ?, "
                                            + "                                                                                      ?, ?, ?, ?,?)");
                                    pstmt.setObject(1, code);
                                    pstmt.setObject(2, jTable1.getValueAt(i, 1) + " " + jTable1.getValueAt(i, 2));
                                    pstmt.setObject(3, "Salable");
                                    pstmt.setDouble(4, quantity);
                                    pstmt.setString(5, transNo);
                                    pstmt.setString(6, storeCmbx.getSelectedItem().toString());
                                    pstmt.setString(7, user);
                                    pstmt.setTime(8, new java.sql.Time(java.util.Calendar.getInstance().getTimeInMillis()));
                                    pstmt.setDouble(9, 0.00);
                                    pstmt.setDouble(10, quantity * price);
                                    pstmt.setDouble(11, price);
                                    pstmt.setObject(12, jTable1.getValueAt(i, 3));
                                    pstmt.setObject(13, Timestamp.valueOf(sdf.format(reconcileDtpckr.getDate())));
                                    pstmt.setString(14, "");
                                    pstmt.setObject(15, jTable1.getValueAt(i, 8));
                                    System.err.println(sdf.format(new java.util.Date()));
                                    pstmt.executeUpdate();

                                }
                                if (expired > 0.0) {
                                    //expired
                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_stock_counts values(?, ?, ?, ?, ?, "
                                            + "                                                                                      ?, ?, ?, ?, ?, "
                                            + "                                                                                      ?, ?, ?, ?,?)");
                                    pstmt.setObject(1, code);
                                    pstmt.setObject(2, jTable1.getValueAt(i, 1) + " " + jTable1.getValueAt(i, 2));
                                    pstmt.setObject(3, "Expired");
                                    pstmt.setDouble(4, expired);
                                    pstmt.setString(5, transNo);
                                    pstmt.setString(6, storeCmbx.getSelectedItem().toString());
                                    pstmt.setString(7, user);
                                    pstmt.setTime(8, new java.sql.Time(java.util.Calendar.getInstance().getTimeInMillis()));
                                    pstmt.setDouble(9, 0.00);
                                    pstmt.setDouble(10, expired * price);
                                    pstmt.setDouble(11, price);
                                    pstmt.setObject(12, jTable1.getValueAt(i, 3));
                                    pstmt.setObject(13, Timestamp.valueOf(sdf.format(reconcileDtpckr.getDate())));
                                    pstmt.setString(14, "");
                                    pstmt.setObject(15, jTable1.getValueAt(i, 8));
                                    System.err.println(sdf.format(new java.util.Date()));
                                    pstmt.executeUpdate();

                                }
                                if (damaged > 0.0) {
                                    //damaged
                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_stock_counts values(?, ?, ?, ?, ?, "
                                            + "                                                                                      ?, ?, ?, ?, ?, "
                                            + "                                                                                      ?, ?, ?, ?,?)");
                                    pstmt.setObject(1, code);
                                    pstmt.setObject(2, jTable1.getValueAt(i, 1) + " " + jTable1.getValueAt(i, 2));
                                    pstmt.setObject(3, "Damaged");
                                    pstmt.setDouble(4, damaged);
                                    pstmt.setString(5, transNo);
                                    pstmt.setString(6, storeCmbx.getSelectedItem().toString());
                                    pstmt.setString(7, user);
                                    pstmt.setTime(8, new java.sql.Time(java.util.Calendar.getInstance().getTimeInMillis()));
                                    pstmt.setDouble(9, 0.00);
                                    pstmt.setDouble(10, damaged * price);
                                    pstmt.setDouble(11, price);
                                    pstmt.setObject(12, jTable1.getValueAt(i, 3));
                                    pstmt.setObject(13, Timestamp.valueOf(sdf.format(reconcileDtpckr.getDate())));
                                    pstmt.setString(14, "");
                                    pstmt.setObject(15, jTable1.getValueAt(i, 8));
                                    System.err.println(sdf.format(new java.util.Date()));
                                    pstmt.executeUpdate();

                                }
//sub stores
                                if (balance != 0.0) {
                                    java.sql.PreparedStatement pstmt11 = connectDB.prepareStatement("insert into st_sub_stores values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                                    pstmt11.setString(1, storeCmbx.getSelectedItem().toString());
                                    pstmt11.setObject(2, jTable1.getValueAt(i, 1));
                                    if (balance >= 0) {
                                        pstmt11.setDouble(4, balance);
                                        pstmt11.setDouble(3, 0.00);
                                    } else {
                                        if (balance < 0) {
                                            pstmt11.setDouble(3, (balance * -1));
                                            pstmt11.setDouble(4, 0.00);
                                        }
                                    }

                                    pstmt11.setDouble(5, 0.00);
                                    pstmt11.setDouble(6, balance * price);
                                    pstmt11.setDouble(7, 0.00);
                                    pstmt11.setObject(8, transNo);
                                    pstmt11.setObject(9, null);
                                    pstmt11.setObject(10, Timestamp.valueOf(sdf.format(reconcileDtpckr.getDate())));
                                    pstmt11.setString(11, user);
                                    pstmt11.setObject(12, jTable1.getValueAt(i, 3));
                                    pstmt11.setString(13, storeCmbx.getSelectedItem().toString());
                                    pstmt11.setObject(14, "Stock Difference");
                                    pstmt11.setDouble(15, price);
                                    pstmt11.setObject(16, code);
                                    pstmt11.setObject(17, strength);
                                    pstmt11.executeUpdate();
                                }
//                           
                                java.sql.PreparedStatement pstmt11c = connectDB.prepareStatement("insert into st_sub_stores values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                                pstmt11c.setString(1, storeCmbx.getSelectedItem().toString());
                                pstmt11c.setObject(2, jTable1.getValueAt(i, 1));
                                pstmt11c.setDouble(3, actual);
                                pstmt11c.setDouble(4, 0.00);
                                pstmt11c.setDouble(5, 0.00);
                                pstmt11c.setDouble(6, actual * price);
                                pstmt11c.setDouble(7, 0.00);
                                pstmt11c.setObject(8, transNo);
                                pstmt11c.setObject(9, null);
                                pstmt11c.setObject(10, Timestamp.valueOf(sdf.format(reconcileDtpckr.getDate())));
                                pstmt11c.setString(11, user);
                                pstmt11c.setObject(12, jTable1.getValueAt(i, 3));
                                pstmt11c.setString(13, storeCmbx.getSelectedItem().toString());
                                pstmt11c.setObject(14, "Stock Count");
                                pstmt11c.setDouble(15, price);
                                pstmt11c.setObject(16, code);
                                pstmt11c.setObject(17, strength);
                                pstmt11c.executeUpdate();

                                java.sql.Statement pst21 = connectDB.createStatement();
                                java.sql.ResultSet rs1 = pst21.executeQuery("select code,activity from pb_activity where department='INV'");
                                while (rs1.next()) {

                                    accountCoded = rs1.getObject(1).toString();
                                    glTyped = rs1.getObject(2).toString();
                                }
                                //nulify  
                                if (balance != 0.0) {
                                    java.sql.PreparedStatement pstmtCardex = connectDB.prepareStatement("insert into st_stock_cardex values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                                    pstmtCardex.setString(1, null);
                                    pstmtCardex.setObject(3, jTable1.getValueAt(i, 1) + " " + jTable1.getValueAt(i, 2));
                                    pstmtCardex.setString(2, storeCmbx.getSelectedItem().toString());
                                    pstmtCardex.setDate(4, null);
                                    pstmtCardex.setDouble(6, price);
                                    pstmtCardex.setObject(7, jTable1.getValueAt(i, 3));
                                    pstmtCardex.setObject(8, "");
                                    pstmtCardex.setObject(9, null);
                                    pstmtCardex.setString(10, null);

                                    if (balance < 0) {
                                        pstmtCardex.setDouble(11, balance);
                                        pstmtCardex.setDouble(5, 0.00);
                                        pstmtCardex.setDouble(21, -1 * balance * price);
                                        pstmtCardex.setDouble(22, 0.00);
                                    } else if (balance >= 0) {
                                        pstmtCardex.setDouble(11, balance);
                                        pstmtCardex.setDouble(5, balance * price);
                                        pstmtCardex.setDouble(21, 0.00);
                                        pstmtCardex.setDouble(22, balance * price);
                                    }

                                    pstmtCardex.setDouble(12, 0.00);
                                    pstmtCardex.setDouble(13, 0.00);
                                    pstmtCardex.setString(14, "-");
                                    pstmtCardex.setString(15, "-");
                                    pstmtCardex.setString(16, "");
                                    pstmtCardex.setString(17, null);
                                    pstmtCardex.setDate(18, datenowSql);
                                    pstmtCardex.setString(19, storeCmbx.getSelectedItem().toString());
                                    pstmtCardex.setString(20, "Stock_System_Balance_At:" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(reconcileDtpckr.getDate()));
                                    pstmtCardex.setString(20, "Stock Count Difference");
                                    pstmtCardex.setString(23, storeGLtxt.getText());
                                    pstmtCardex.setString(24, "");
                                    pstmtCardex.setString(25, storeCmbx.getSelectedItem().toString());
                                    pstmtCardex.setString(26, transNo);
                                    pstmtCardex.setDouble(27, 0.00);
                                    pstmtCardex.setString(28, user);
                                    pstmtCardex.setBoolean(29, false);
                                    pstmtCardex.setObject(30, 0.00);
                                    pstmtCardex.setObject(31, null);
                                    pstmtCardex.setObject(32, jTable1.getValueAt(i, 0));
                                    pstmtCardex.setObject(33, "");
                                    pstmtCardex.setObject(34, "");
                                    pstmtCardex.executeUpdate();
                                }
                                //add new stock         
                                java.sql.PreparedStatement pstmtCardex3 = connectDB.prepareStatement("insert into st_stock_cardex values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                                pstmtCardex3.setString(1, null);
                                pstmtCardex3.setObject(3, jTable1.getValueAt(i, 1) + " " + jTable1.getValueAt(i, 2));
                                pstmtCardex3.setString(2, storeCmbx.getSelectedItem().toString());
                                pstmtCardex3.setDate(4, null);
                                pstmtCardex3.setDouble(11, actual);
                                pstmtCardex3.setDouble(6, price);
                                pstmtCardex3.setObject(7, jTable1.getValueAt(i, 3));
                                pstmtCardex3.setObject(8, "");
                                pstmtCardex3.setObject(9, null);
                                pstmtCardex3.setString(10, null);
                                pstmtCardex3.setDouble(5, 0.00);
                                pstmtCardex3.setDouble(21, actual * price);
                                pstmtCardex3.setDouble(22, 0.00);
                                pstmtCardex3.setDouble(12, 0.00);
                                pstmtCardex3.setDouble(13, 0.00);
                                pstmtCardex3.setString(14, "-");
                                pstmtCardex3.setString(15, "-");
                                pstmtCardex3.setString(16, "");
                                pstmtCardex3.setString(17, null);
                                pstmtCardex3.setDate(18, datenowSql);
                                pstmtCardex3.setString(19, storeCmbx.getSelectedItem().toString());
                                pstmtCardex3.setString(20, "Stock_System_Balance_At:" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(reconcileDtpckr.getDate()));
                                pstmtCardex3.setString(20, "Stock Count");
                                pstmtCardex3.setString(23, storeGLtxt.getText());
                                pstmtCardex3.setString(24, "");
                                pstmtCardex3.setString(25, storeCmbx.getSelectedItem().toString());
                                pstmtCardex3.setString(26, transNo);
                                pstmtCardex3.setDouble(27, 0.00);
                                pstmtCardex3.setString(28, user);
                                pstmtCardex3.setBoolean(29, false);
                                pstmtCardex3.setObject(30, 0.00);
                                pstmtCardex3.setObject(31, null);
                                pstmtCardex3.setObject(32, jTable1.getValueAt(i, 0));
                                pstmtCardex3.setObject(33, "");
                                pstmtCardex3.setObject(34, "");
                                pstmtCardex3.executeUpdate();

                                //+ diff is loss                               
                                if (diff != 0.0) {
                                    java.sql.PreparedStatement pstmt1q1 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                                    pstmt1q1.setObject(1, accountCoded);
                                    pstmt1q1.setString(2, glTyped);
                                    pstmt1q1.setString(3, jTable1.getValueAt(i, 0).toString());
                                    pstmt1q1.setString(4, jTable1.getValueAt(i, 1).toString());
                                    pstmt1q1.setString(6, String.valueOf(diff));
                                    pstmt1q1.setString(5, "Stock count diff");
                                    pstmt1q1.setString(7, "");
                                    pstmt1q1.setString(8, "");
                                    pstmt1q1.setString(9, "");
                                    pstmt1q1.setString(10, "");
                                    pstmt1q1.setString(11, "");
                                    pstmt1q1.setString(12, "");
                                    pstmt1q1.setString(13, "");
                                    pstmt1q1.setString(14, glTyped);
                                    pstmt1q1.setString(15, "stock count");
                                    if (diff > 0) { //loss
                                        pstmt1q1.setDouble(17, 0.00);
                                        /*debit*/ pstmt1q1.setDouble(16, price * diff);
                                    } else if (diff < 0) { //gain
                                        pstmt1q1.setDouble(17, price * diff * -1);
                                        pstmt1q1.setDouble(16, 0.00);
                                    }
                                    //  price*quantity
                                    pstmt1q1.setDate(18, datenowSql);
                                    pstmt1q1.setString(19, transNo);
                                    pstmt1q1.setBoolean(20, false);
                                    pstmt1q1.setBoolean(21, false);
                                    pstmt1q1.setBoolean(22, false);
                                    pstmt1q1.setString(23, user);
                                    pstmt1q1.setString(24, "");
                                    pstmt1q1.setString(25, "");
                                    pstmt1q1.setTimestamp(26, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                    pstmt1q1.executeUpdate();
                                }

                            }
                        }

                        connectDB.commit();
                        connectDB.setAutoCommit(true);

                        jLabel12.setForeground(java.awt.Color.blue);
                        javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "Data Saved Successfully", "Information message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                        jButton1.setEnabled(false);
                        range1txt.setText("-");
                        range2txt.setText("-");
                        // javax.swing.JOptionPane.showMessageDialog(this, "Enter quantity issued","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                        for (int k = 0; k < jTable1.getRowCount(); k++) {
                            for (int r = 0; r < jTable1.getColumnCount(); r++) {
                                jTable1.getModel().setValueAt(null, k, r);
                            }
                        }

                        storeCmbx.setSelectedItem(null);
                        reconcileDtpckr.setDate(null);
                        jButton1.setEnabled(false);
                    } catch (java.sql.SQLException sq) {
                        javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        sq.printStackTrace();
                        try {
                            connectDB.rollback(registerSavePoint);
                        } catch (java.sql.SQLException sql) {
                            sql.printStackTrace();
                            javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
                    }

                }

            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox categoryCmbx;
    private javax.swing.JRadioButton centralStorerbtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JTextField range1txt;
    private javax.swing.JTextField range2txt;
    private com.afrisoftech.lib.DatePicker reconcileDtpckr;
    private javax.swing.JComboBox storeCmbx;
    private javax.swing.JTextField storeGLtxt;
    private javax.swing.JRadioButton subStorebtn;
    // End of variables declaration//GEN-END:variables
}
