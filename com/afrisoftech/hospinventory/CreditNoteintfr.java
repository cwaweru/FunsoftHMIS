/*
 * Requisitions.java
 *
 * Created on April 22, 2003, 5:12 PM
 */
package com.afrisoftech.hospinventory;

import com.afrisoftech.lib.GetItemInfo;
import java.sql.SQLException;
import java.util.Vector;
//import org.openide.util.Exceptions;
//import org.postgresql.core.Logger;

/**
 *
 * @author root
 */
public class CreditNoteintfr extends javax.swing.JInternalFrame {

    javax.swing.JComboBox cmbox = null;
    Vector oid = new Vector();
    javax.swing.JSpinner dateSpinner = null;
    double resVal1 = 0.00;
    double resVal11 = 0.00;
    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    javax.swing.table.TableModel tableModel;

    public CreditNoteintfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton9 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        dnoteSearchdialog = new javax.swing.JDialog();
        jSearchPanel21 = new javax.swing.JPanel();
        searchDnoteTxt = new javax.swing.JTextField();
        dnoteSearchScrollPane = new javax.swing.JScrollPane();
        dnoteSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton521 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        grnDetailsTable = new com.afrisoftech.dbadmin.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        totalDiscountTxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        vatAmountTxt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        netValueTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        grossValueTxt = new javax.swing.JTextField();
        reversalReasonTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        receivedFromTxt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        invoiceDateTxt = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        originalInvoiceTxt = new javax.swing.JTextField();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        jLabel4 = new javax.swing.JLabel();
        storeNameCmbx = new javax.swing.JComboBox();
        jPanel421 = new javax.swing.JPanel();
        DnoteNoTxt = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        LPONO = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        S13NumberTxt = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        postbtn = new javax.swing.JButton();
        resetbtn = new javax.swing.JButton();
        cancelbtn = new javax.swing.JButton();
        exitbtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jTextField61 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jCheckBox3 = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        journalItemsTbl = new com.afrisoftech.dbadmin.JTable();
        jPanel8 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jTextField12 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jTextField14 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jTextField15 = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jTextField16 = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jTextField17 = new javax.swing.JTextField();
        datePicker2 = new com.afrisoftech.lib.DatePicker();
        jLabel27 = new javax.swing.JLabel();
        jPanel422 = new javax.swing.JPanel();
        jTextField92 = new javax.swing.JTextField();
        searchButton2 = new javax.swing.JButton();
        LPONO1 = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        s13txfld1 = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        postbtn1 = new javax.swing.JButton();
        cancelbtn1 = new javax.swing.JButton();
        exitbtn1 = new javax.swing.JButton();
        jLabel30 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel31 = new javax.swing.JLabel();

        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField111CaretUpdate(evt);
            }
        });
        jTextField111.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField111ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(jTextField111, gridBagConstraints);

        jSearchTable.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton9.setText("Dispose");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        dnoteSearchdialog.setModal(true);
        dnoteSearchdialog.setUndecorated(true);
        dnoteSearchdialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel21.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel21.setLayout(new java.awt.GridBagLayout());

        searchDnoteTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchDnoteTxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel21.add(searchDnoteTxt, gridBagConstraints);

        dnoteSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
        dnoteSearchTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        dnoteSearchTable.setShowHorizontalLines(false);
        dnoteSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dnoteSearchTableMouseClicked(evt);
            }
        });
        dnoteSearchScrollPane.setViewportView(dnoteSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel21.add(dnoteSearchScrollPane, gridBagConstraints);

        jButton521.setText("Close");
        jButton521.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton521ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel21.add(jButton521, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        dnoteSearchdialog.getContentPane().add(jSearchPanel21, gridBagConstraints);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Reversing Goods Receipt Note (GRN Reversal)");
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new java.awt.GridBagLayout());

        grnDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Item", "Units", "Package", "Qty", "Unit Price", "Disc %", "Disc. Total", "Vat %", "Vat Amt.", "Value", "Batch No.", "Exp. Date", "Item Code"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        grnDetailsTable.setShowHorizontalLines(false);
        cmbox = new javax.swing.JComboBox();
        //try{
            /*      crset2.setConnectionSource(pConnDB);
            crset2.setCommand("select distinct description FROM st_stock_item order by description");

            cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset2, "description", null, null, null));
            javax.swing.table.TableColumn s = this.jTable1.getColumn("Item");
            s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
            cmbox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    cmboxActionPerformed(evt);
                }
            });
            //      } catch(java.sql.SQLException sqlExec) {

            //        javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

            //   }
        */
        javax.swing.table.TableColumn column = null;
        for (int i = 0; i < 12; i++) {
            column = grnDetailsTable.getColumnModel().getColumn(i);
            if (i == 0) {

                column.setPreferredWidth(500); //sport column is bigger
            } else {
                //if (i == 2) {
                    column.setPreferredWidth(200);
                    // }  else
                //column.setPreferredWidth(50);

            }
        }

        grnDetailsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                grnDetailsTableMouseClicked(evt);
            }
        });
        grnDetailsTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                grnDetailsTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                grnDetailsTableKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(grnDetailsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 50.0;
        jPanel2.add(jScrollPane2, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel6.setText("Total Discount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel4.add(jLabel6, gridBagConstraints);

        totalDiscountTxt.setEditable(false);
        totalDiscountTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        totalDiscountTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel4.add(totalDiscountTxt, gridBagConstraints);

        jLabel7.setText("VAT Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel4.add(jLabel7, gridBagConstraints);

        vatAmountTxt.setEditable(false);
        vatAmountTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        vatAmountTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel4.add(vatAmountTxt, gridBagConstraints);

        jLabel8.setText("Net Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel4.add(jLabel8, gridBagConstraints);

        netValueTxt.setEditable(false);
        netValueTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        netValueTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel4.add(netValueTxt, gridBagConstraints);

        jLabel1.setText("Gross Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel4.add(jLabel1, gridBagConstraints);

        grossValueTxt.setEditable(false);
        grossValueTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        grossValueTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel4.add(grossValueTxt, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(reversalReasonTxt, gridBagConstraints);

        jLabel11.setText("Reason for reversal of GRN");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = -50;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jLabel11, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 100.0;
        jPanel5.add(jPanel2, gridBagConstraints);

        /*        javax.swing.SpinnerDateModel spinerDate = new javax.swing.SpinnerDateModel();
        dateSpinner = new javax.swing.JSpinner(spinerDate);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jPanel1.add(dateSpinner, gridBagConstraints);
        */
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel9.setText("Received From");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel9, gridBagConstraints);

        jLabel10.setText("Delivery Note No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel10, gridBagConstraints);

        receivedFromTxt.setEditable(false);
        receivedFromTxt.setBackground(new java.awt.Color(255, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(receivedFromTxt, gridBagConstraints);

        jLabel12.setText("Invoice Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel12, gridBagConstraints);

        invoiceDateTxt.setEditable(false);
        invoiceDateTxt.setBackground(new java.awt.Color(255, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(invoiceDateTxt, gridBagConstraints);

        jLabel13.setText("Store Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel13, gridBagConstraints);

        jLabel2.setText("Original Invoice Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        originalInvoiceTxt.setEditable(false);
        originalInvoiceTxt.setBackground(new java.awt.Color(255, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(originalInvoiceTxt, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 40);
        jPanel1.add(datePicker1, gridBagConstraints);

        jLabel4.setText("Entry Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        storeNameCmbx.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                storeNameCmbxMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                storeNameCmbxMouseEntered(evt);
            }
        });
        storeNameCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeNameCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(storeNameCmbx, gridBagConstraints);

        jPanel421.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel421.setLayout(new java.awt.GridBagLayout());

        DnoteNoTxt.setEditable(false);
        DnoteNoTxt.setBackground(new java.awt.Color(255, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel421.add(DnoteNoTxt, gridBagConstraints);

        searchButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton1.setToolTipText("Search");
        searchButton1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton1.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton1.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel421.add(searchButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jPanel421, gridBagConstraints);

        LPONO.setEditable(false);
        LPONO.setBackground(new java.awt.Color(255, 255, 255));
        LPONO.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        LPONO.setForeground(new java.awt.Color(255, 0, 102));
        LPONO.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(LPONO, gridBagConstraints);

        jLabel15.setText("LPO No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel15, gridBagConstraints);

        jLabel16.setText("S13 NO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel16, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(S13NumberTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 4.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel5.add(jPanel1, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setLayout(new java.awt.GridBagLayout());

        postbtn.setBackground(new java.awt.Color(204, 255, 255));
        postbtn.setMnemonic('o');
        postbtn.setText("Save and reverse GRN");
        postbtn.setPreferredSize(new java.awt.Dimension(123, 25));
        postbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(postbtn, gridBagConstraints);

        resetbtn.setBackground(new java.awt.Color(204, 255, 255));
        resetbtn.setMnemonic('p');
        resetbtn.setText("Save and Revere GRN & Print");
        resetbtn.setPreferredSize(new java.awt.Dimension(123, 25));
        resetbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(resetbtn, gridBagConstraints);

        cancelbtn.setBackground(new java.awt.Color(204, 255, 255));
        cancelbtn.setMnemonic('l');
        cancelbtn.setText("Clear form");
        cancelbtn.setPreferredSize(new java.awt.Dimension(123, 25));
        cancelbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(cancelbtn, gridBagConstraints);

        exitbtn.setBackground(new java.awt.Color(204, 255, 255));
        exitbtn.setMnemonic('c');
        exitbtn.setText("Close form");
        exitbtn.setPreferredSize(new java.awt.Dimension(123, 25));
        exitbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(exitbtn, gridBagConstraints);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel3.add(jLabel5, gridBagConstraints);

        jButton1.setBackground(new java.awt.Color(204, 255, 255));
        jButton1.setMnemonic('r');
        jButton1.setText("Remove row");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton1, gridBagConstraints);

        jButton2.setBackground(new java.awt.Color(204, 255, 255));
        jButton2.setMnemonic('h');
        jButton2.setText("Help");
        jButton2.setPreferredSize(new java.awt.Dimension(123, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton2, gridBagConstraints);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel3.add(jLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jLabel25, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jPanel3, gridBagConstraints);

        buttonGroup1.add(jCheckBox1);
        jCheckBox1.setText("Central Store");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jCheckBox1, gridBagConstraints);

        buttonGroup1.add(jCheckBox2);
        jCheckBox2.setText("Sub Store");
        jCheckBox2.setEnabled(false);
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jCheckBox2, gridBagConstraints);

        jTextField61.setMinimumSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        jPanel5.add(jTextField61, gridBagConstraints);

        jLabel14.setText("Gl Acc Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.ipady = 1;
        jPanel5.add(jLabel14, gridBagConstraints);

        jTextField6.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel5.add(jTextField6, gridBagConstraints);

        jCheckBox3.setText("Edit Descriptions?");
        jCheckBox3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        jPanel5.add(jCheckBox3, gridBagConstraints);

        jTabbedPane1.addTab("GRN Reversal", jPanel5);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel7.setLayout(new java.awt.GridBagLayout());

        journalItemsTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Item Code", "Item", "Units", "Package", "Qty", "Unit Price", "Value", "Batch No.", "Reverse "
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        journalItemsTbl.setShowHorizontalLines(false);
        cmbox = new javax.swing.JComboBox();
        //try{
            /*      crset2.setConnectionSource(pConnDB);
            crset2.setCommand("select distinct description FROM st_stock_item order by description");

            cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset2, "description", null, null, null));
            javax.swing.table.TableColumn s = this.jTable1.getColumn("Item");
            s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
            cmbox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    cmboxActionPerformed(evt);
                }
            });
            //      } catch(java.sql.SQLException sqlExec) {

            //        javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

            //   }
        */
        javax.swing.table.TableColumn column1 = null;
        for (int i = 0; i < 12; i++) {
            column1 = grnDetailsTable.getColumnModel().getColumn(i);
            if (i == 1) {

                column1.setPreferredWidth(500); //sport column is bigger
            } else {
                //if (i == 2) {
                    column1.setPreferredWidth(200);
                    // }  else
                //column.setPreferredWidth(50);

            }
        }
        journalItemsTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                journalItemsTblMouseClicked(evt);
            }
        });
        journalItemsTbl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                journalItemsTblKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                journalItemsTblKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(journalItemsTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 50.0;
        jPanel7.add(jScrollPane3, gridBagConstraints);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel8.setLayout(new java.awt.GridBagLayout());

        jLabel17.setText("Total Discount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel8.add(jLabel17, gridBagConstraints);

        jTextField10.setEditable(false);
        jTextField10.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField10.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel8.add(jTextField10, gridBagConstraints);

        jLabel18.setText("VAT Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel8.add(jLabel18, gridBagConstraints);

        jTextField11.setEditable(false);
        jTextField11.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField11.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel8.add(jTextField11, gridBagConstraints);

        jLabel19.setText("Net Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel8.add(jLabel19, gridBagConstraints);

        jTextField12.setEditable(false);
        jTextField12.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField12.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel8.add(jTextField12, gridBagConstraints);

        jLabel20.setText("Gross Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel8.add(jLabel20, gridBagConstraints);

        jTextField13.setEditable(false);
        jTextField13.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField13.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel8.add(jTextField13, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jTextField14, gridBagConstraints);

        jLabel21.setText("Reason for Reversal");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = -50;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jLabel21, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel7.add(jPanel8, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel6.add(jPanel7, gridBagConstraints);

        /*        javax.swing.SpinnerDateModel spinerDate = new javax.swing.SpinnerDateModel();
        dateSpinner = new javax.swing.JSpinner(spinerDate);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jPanel1.add(dateSpinner, gridBagConstraints);
        */
        jPanel9.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel9.setLayout(new java.awt.GridBagLayout());

        jLabel22.setText("Received From");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel9.add(jLabel22, gridBagConstraints);

        jLabel23.setText("Delivery Note NO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel9.add(jLabel23, gridBagConstraints);

        jTextField15.setEditable(false);
        jTextField15.setBackground(new java.awt.Color(255, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel9.add(jTextField15, gridBagConstraints);

        jLabel24.setText("Invoice Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel9.add(jLabel24, gridBagConstraints);

        jTextField16.setEditable(false);
        jTextField16.setBackground(new java.awt.Color(255, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel9.add(jTextField16, gridBagConstraints);

        jLabel26.setText("Original Invoice Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel9.add(jLabel26, gridBagConstraints);

        jTextField17.setEditable(false);
        jTextField17.setBackground(new java.awt.Color(255, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel9.add(jTextField17, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 40);
        jPanel9.add(datePicker2, gridBagConstraints);

        jLabel27.setText("Entry Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel9.add(jLabel27, gridBagConstraints);

        jPanel422.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel422.setLayout(new java.awt.GridBagLayout());

        jTextField92.setEditable(false);
        jTextField92.setBackground(new java.awt.Color(255, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel422.add(jTextField92, gridBagConstraints);

        searchButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton2.setToolTipText("Search");
        searchButton2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton2.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton2.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel422.add(searchButton2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel9.add(jPanel422, gridBagConstraints);

        LPONO1.setEditable(false);
        LPONO1.setBackground(new java.awt.Color(255, 255, 255));
        LPONO1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        LPONO1.setForeground(new java.awt.Color(255, 0, 102));
        LPONO1.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel9.add(LPONO1, gridBagConstraints);

        jLabel28.setText("LPO NO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        jPanel9.add(jLabel28, gridBagConstraints);

        jLabel29.setText("S13 NO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        jPanel9.add(jLabel29, gridBagConstraints);

        s13txfld1.setEditable(false);
        s13txfld1.setBackground(new java.awt.Color(255, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel9.add(s13txfld1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 4.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel6.add(jPanel9, gridBagConstraints);

        jPanel10.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel10.setLayout(new java.awt.GridBagLayout());

        postbtn1.setBackground(new java.awt.Color(204, 255, 255));
        postbtn1.setMnemonic('o');
        postbtn1.setText("Pass Journal ");
        postbtn1.setPreferredSize(new java.awt.Dimension(200, 25));
        postbtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postbtn1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel10.add(postbtn1, gridBagConstraints);

        cancelbtn1.setBackground(new java.awt.Color(204, 255, 255));
        cancelbtn1.setMnemonic('l');
        cancelbtn1.setText("Clear");
        cancelbtn1.setPreferredSize(new java.awt.Dimension(123, 25));
        cancelbtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelbtn1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel10.add(cancelbtn1, gridBagConstraints);

        exitbtn1.setBackground(new java.awt.Color(204, 255, 255));
        exitbtn1.setMnemonic('c');
        exitbtn1.setText("Close");
        exitbtn1.setPreferredSize(new java.awt.Dimension(123, 25));
        exitbtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitbtn1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel10.add(exitbtn1, gridBagConstraints);

        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel10.add(jLabel30, gridBagConstraints);

        jButton3.setBackground(new java.awt.Color(204, 255, 255));
        jButton3.setMnemonic('r');
        jButton3.setText("Remove Row");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel10.add(jButton3, gridBagConstraints);

        jButton4.setBackground(new java.awt.Color(204, 255, 255));
        jButton4.setMnemonic('h');
        jButton4.setText("Help");
        jButton4.setPreferredSize(new java.awt.Dimension(123, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel10.add(jButton4, gridBagConstraints);

        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel10.add(jLabel31, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 0, 10);
        jPanel6.add(jPanel10, gridBagConstraints);

        jTabbedPane1.addTab("Journal To Cancel Reversal of GRN", jPanel6);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        setBounds(0, 0, 1161, 423);
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        com.afrisoftech.hospinventory.EditGrnintfr other = new com.afrisoftech.hospinventory.EditGrnintfr(connectDB, pConnDB);
        this.getParent().add(other, javax.swing.JLayeredPane.DEFAULT_LAYER);
        try {
            other.setSelected(true);
        } catch (java.beans.PropertyVetoException pvt) {
        }
        other.setVisible(true);
// TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void grnDetailsTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_grnDetailsTableKeyPressed
// TODO add your handling code here:
    }//GEN-LAST:event_grnDetailsTableKeyPressed

    private void dnoteSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dnoteSearchTableMouseClicked

        java.text.DateFormat df = java.text.DateFormat.getDateInstance();

        java.text.SimpleDateFormat sdf = (java.text.SimpleDateFormat) df;

        boolean deliveryStatus = false;

        grossValueTxt.setText("00");
        totalDiscountTxt.setText("00");
        vatAmountTxt.setText("00");
        netValueTxt.setText("00");

        DnoteNoTxt.setText(dnoteSearchTable.getValueAt(dnoteSearchTable.getSelectedRow(), 0).toString());
        receivedFromTxt.setText(dnoteSearchTable.getValueAt(dnoteSearchTable.getSelectedRow(), 1).toString());
        invoiceDateTxt.setText(dnoteSearchTable.getValueAt(dnoteSearchTable.getSelectedRow(), 2).toString());
        originalInvoiceTxt.setText(dnoteSearchTable.getValueAt(dnoteSearchTable.getSelectedRow(), 3).toString());
        LPONO.setText(dnoteSearchTable.getValueAt(dnoteSearchTable.getSelectedRow(), 4).toString());
        S13NumberTxt.setText(dnoteSearchTable.getValueAt(dnoteSearchTable.getSelectedRow(), 5).toString());

        for (int k = 0; k < grnDetailsTable.getRowCount(); k++) {
            for (int r = 0; r < grnDetailsTable.getColumnCount(); r++) {
                grnDetailsTable.getModel().setValueAt(null, k, r);
            }
        }

        System.out.println("select item,quantity_received,PRICE_PER_ITEM ,debit ,item_code,order_no,oid "
                + "                                     FROM st_stock_cardex  WHERE "
                + "order_no='" + LPONO.getText() + "' and approved=false AND "
                + "grn_no='" + S13NumberTxt.getText() + "' AND "
                + "store ilike '%" + storeNameCmbx.getSelectedItem().toString() + "%'  and "
                + "delivery_note_no='" + DnoteNoTxt.getText() + "' and invoice_no='" + DnoteNoTxt.getText() + "' ");
        try {
            java.sql.PreparedStatement pstmtc = connectDB.prepareStatement("SELECT sum(debit-quantity_ordered) FROM st_stock_cardex WHERE UPPER(grn_no) = UPPER(?) AND UPPER(store) = UPPER(?)");
            pstmtc.setObject(1, S13NumberTxt.getText());
            pstmtc.setObject(2, storeNameCmbx.getSelectedItem());
            java.sql.ResultSet rsetc = pstmtc.executeQuery();
            while (rsetc.next()) {
                if (rsetc.getDouble(1) > 0) {
                    deliveryStatus = true;
                }
            }
        } catch (SQLException ex) {
                        ex.printStackTrace();             //Exceptions.printStackTrace(ex);
            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        if (deliveryStatus) {

            try {

                java.sql.Statement pstmt1 = connectDB.createStatement();

                java.sql.ResultSet rs12 = pstmt1.executeQuery("select item,quantity_received,PRICE_PER_ITEM ,debit ,item_code,order_no,oid "
                        + "                                     FROM st_stock_cardex WHERE "
                        + " UPPER(order_no) = UPPER('" + LPONO.getText() + "') and approved=false AND "
                        + " UPPER(grn_no) = UPPER('" + S13NumberTxt.getText() + "') AND "
                        + " UPPER(store) = UPPER('" + storeNameCmbx.getSelectedItem().toString() + "')  and "
                        + " UPPER(delivery_note_no) = UPPER('" + DnoteNoTxt.getText() + "') and UPPER(invoice_no) = '" + DnoteNoTxt.getText().toUpperCase() + "' ");
                int k = 0;

                while (rs12.next()) {
                    System.out.println("k is " + k);
                    grnDetailsTable.setValueAt(rs12.getObject(1), k, 0);
                    grnDetailsTable.setValueAt(rs12.getObject(2), k, 3);
                    grnDetailsTable.setValueAt(rs12.getObject(3), k, 4);
                    grnDetailsTable.setValueAt(rs12.getObject(4), k, 9);
                    grnDetailsTable.setValueAt(rs12.getObject(5), k, 12);
                    grnDetailsTable.setValueAt(new java.lang.Double(0), k, 5);
                    grnDetailsTable.setValueAt(new java.lang.Double(0), k, 6);
                    grnDetailsTable.setValueAt(new java.lang.Double(0), k, 7);
                    grnDetailsTable.setValueAt(new java.lang.Double(0), k, 8);
                    grnDetailsTable.setValueAt("-", k, 1);
                    grnDetailsTable.setValueAt("1", k, 2);
                    LPONO.setText(rs12.getObject("order_no").toString());
                    if (!oid.contains(rs12.getObject("oid"))) {
                        oid.addElement(rs12.getObject("oid"));
                        System.out.println("oid is " + oid);
                    }
                    k = k + 1;

                }

            } catch (Exception r) {
                r.printStackTrace();
            }

        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Please check to verify that this GRN has not been reversed!");
        }

//   
//          jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
//                 + "select item,PRICE_PER_ITEM AS PRICE,item_code,order_no,quantity_received,oid as Qty FROM st_stock_cardex WHERE "
//                 + "order_no='" + LPONO.getText() + "' and approved=false AND "
//                 + "grn_no='" +s13txfld.getText() + "' AND "
//                 + "store ilike '%" + jComboBox2.getSelectedItem().toString() + "%'  and "
//                 + "delivery_note_no='" + jTextField91.getText() + "' and invoice_no='" + jTextField91.getText() + "' "));
        this.postbtn.setEnabled(true);

        this.dnoteSearchdialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_dnoteSearchTableMouseClicked
    private void populateTable11(java.lang.String patient_no) {
        int i = 0;
        double net = 0.00;
        double gross = 0.00;
        /*
         * try {
         *
         *
         * java.sql.Statement stmtTable = connectDB.createStatement();
         *
         * java.sql.ResultSet rsetTable = stmtTable.executeQuery("select
         * item,units,'1' as package,quantity_received as
         * quantity,price_per_item as price,debit as value,credit as
         * disc_amt,sum(debit-quantity_ordered) from st_stock_cardex where
         * invoice_no ILIKE '"+jTextField91.getText()+"' and transaction_type
         * ILIKE 'Receiving' and debit > 0 group by item,units,3
         * ,quantity_received ,price_per_item ,debit ,credit ");
         *
         * while (rsetTable.next()) {
         *
         *
         * jTable1.setValueAt(rsetTable.getObject(1), i, 0);
         * jTable1.setValueAt(rsetTable.getObject(2), i, 1);
         * jTable1.setValueAt(rsetTable.getObject(3), i, 2);
         * jTable1.setValueAt(rsetTable.getObject(4), i, 3);
         * jTable1.setValueAt(rsetTable.getObject(5), i, 4);
         * jTable1.setValueAt(rsetTable.getObject(7), i, 6);
         * jTable1.setValueAt(rsetTable.getObject(6), i, 9);
         * jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(),
         * 5); jTable1.setValueAt(new java.lang.Double(0),
         * jTable1.getSelectedRow(), 7); jTable1.setValueAt(new
         * java.lang.Double(0), jTable1.getSelectedRow(),8); i++;
         *
         * }
         *
         *
         *
         *
         * } catch(java.sql.SQLException sqlExec) {
         *
         * javax.swing.JOptionPane.showMessageDialog(this,
         * sqlExec.getMessage());
         *
         * }
         */

    }
    private void jButton521ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton521ActionPerformed
        this.dnoteSearchdialog.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jButton521ActionPerformed

    private void searchDnoteTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchDnoteTxtCaretUpdate
        grossValueTxt.setText("00");
        totalDiscountTxt.setText("00");
        vatAmountTxt.setText("00");
        netValueTxt.setText("00");

        if (this.searchDnoteTxt.getCaretPosition() < 3) {
            System.out.print("Nothing");
        } else {
            dnoteSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                    + "select distinct  invoice_no as DNOTE_NO,supplier,date,sum(debit-quantity_ordered) as amt,order_no as LPO_NO,grn_no as S13_NO from st_stock_cardex"
                    + " where invoice_no ILIKE '%" + searchDnoteTxt.getText() + "%' and approved=false and transaction_type ILIKE 'Receiving%' and store ilike '" + storeNameCmbx.getSelectedItem() + "%' "
                    + "GROUP BY grn_no,invoice_no,supplier,date,order_no having sum(debit-quantity_ordered)>=0 ORDER BY invoice_no"));

            dnoteSearchScrollPane.setViewportView(dnoteSearchTable);
           // System.out.println();
        }
        // Add your handling code here:
    }//GEN-LAST:event_searchDnoteTxtCaretUpdate

    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        searchButton21Clicked();         // Add your handling code here:
    }//GEN-LAST:event_searchButton1ActionPerformed
    private void searchButton21Clicked() {

        if ((storeNameCmbx.getSelectedItem() == null) || (((String) storeNameCmbx.getSelectedItem()).equalsIgnoreCase("-"))) {
            javax.swing.JOptionPane.showMessageDialog(null, "Please first select a store.");
        } else {
            System.out.println("Showing dialog");

            // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
            java.awt.Point point = this.DnoteNoTxt.getLocationOnScreen();

            dnoteSearchdialog.setSize(700, 200);

            dnoteSearchdialog.setLocation(point);

            dnoteSearchdialog.setVisible(true);
        }

    }
    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        //  try {
        //    java.sql.Statement pstmt = connectDB.createStatement();
        //cmbox = new javax.swing.JComboBox();
        //   crset3.setCommand("select store_name from st_stores");
        //   crset3.setConnectionSource(pConnDB);
        //  jComboBox1.setM
        storeNameCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select '-' union all select store_name from st_stores"));

        //      jComboBox2.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset3, "store_name", null, null, null));
        // javax.swing.table.TableColumn s = this.jTable1.getColumn("Service");
        //  s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
        storeNameCmbx.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {

                storeNameCmbxActionPerformed(evt);
            }
        });

        // Add your handling code here:
        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void storeNameCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storeNameCmbxActionPerformed
        // Add your handling code here:

        /*
         * try { java.sql.Statement pstmt = connectDB.createStatement();
         *
         * java.sql.ResultSet rs = pstmt.executeQuery("select gl_stock_code from
         * st_main_stores where store_name ilike
         * '"+jComboBox2.getSelectedItem().toString()+"'"); while (rs.next()){
         *
         * this.jTextField6.setText(rs.getObject(1).toString()); } }
         * catch(java.sql.SQLException sqlex){
         * System.out.println(sqlex.getMessage()); }
         */

        /*
         * try { java.sql.Statement pstmt = connectDB.createStatement();
         *
         * java.sql.ResultSet rs = pstmt.executeQuery("select stock_code from
         * pb_departments where department_name ilike
         * '"+jComboBox2.getSelectedItem().toString()+"'"); while (rs.next()){
         * this.jTextField6.setText(rs.getObject(1).toString()); } }
         * catch(java.sql.SQLException sqlex){
         * System.out.println(sqlex.getMessage());
         }
         */
        try {
            java.sql.Statement pstmt = connectDB.createStatement();

            java.sql.ResultSet rs = pstmt.executeQuery("select glstock_code from st_stores  where store_name ilike '" + storeNameCmbx.getSelectedItem().toString() + "%'");
            while (rs.next()) {

                this.jTextField6.setText(rs.getObject(1).toString());
            }
        } catch (java.sql.SQLException sqlex) {
            System.out.println(sqlex.getMessage());
        }

    }//GEN-LAST:event_storeNameCmbxActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        //   com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select distinct store_name from st_stores order by store_name")
        //try {
        //    java.sql.Statement pstmt = connectDB.createStatement();
        //cmbox = new javax.swing.JComboBox();
        //    crset3.setCommand("select store_name from st_main_stores");
        //     crset3.setConnectionSource(pConnDB);
        //  jComboBox1.setM
        //   jComboBox2.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset3, "store_name", null, null, null));
        storeNameCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select '-' as store_name union all select store_name from st_main_stores"));
        storeNameCmbx.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeNameCmbxActionPerformed(evt);
            }
        });
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void grnDetailsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grnDetailsTableMouseClicked
//        if (jTable1.getSelectedColumn() == 0) {
//
//            this.cmboxMouseClicked();
//        }         // Add your handling code here:
    }//GEN-LAST:event_grnDetailsTableMouseClicked
    private void cmboxMouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane2.getLocationOnScreen();
        jSearchDialog.setSize(400, 200);
        jSearchDialog.setLocation(point);
        jSearchDialog.setVisible(true);
    }
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        jSearchDialog.dispose();         // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate
        //if(this.jComboBox2.getSelectedItem().equals("GENERAL STORE")){
        if (this.jTextField111.getCaretPosition() < 0) {
            System.out.print("Nothing");
        } else {
            jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                    + "select item,PRICE_PER_ITEM AS PRICE,item_code,order_no,quantity_received,oid as Qty FROM st_stock_cardex WHERE "
                    + "order_no='" + LPONO.getText() + "' and approved=false AND "
                    + "item ilike '%" + jTextField111.getText() + "%' AND "
                    + "store ilike '%" + storeNameCmbx.getSelectedItem().toString() + "%'  and"
                    + " invoice_no='" + DnoteNoTxt.getText() + "' "));
            // + "group by item,PRICE_PER_ITEM ,item_code,order_no having sum(debit-quantity_ordered)>0 order by ITEM"

            jSearchScrollPane.setViewportView(jSearchTable);
            System.out.println("Cannot sort out  select item,PRICE_PER_ITEM AS PRICE,item_code,order_no FROM st_stock_cardex WHERE "
                    + "order_no='" + LPONO.getText() + "' and approved=false AND "
                    + "item ilike '%" + jTextField111.getText() + "%' AND "
                    + "store ilike '%" + storeNameCmbx.getSelectedItem().toString() + "%'  and"
                    + " invoice_no='" + DnoteNoTxt.getText() + "' ");

        }
        // Add your handling code here:
    }//GEN-LAST:event_jTextField111CaretUpdate

    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked

//        try { 
//           
//         
//          java.sql.Statement pstmt1 = connectDB.createStatement();
//         
//         java.sql.ResultSet rs12 = pstmt1.executeQuery("select item,quantity_received,PRICE_PER_ITEM ,debit ,item_code,order_no,oid "
//                 + "                                     FROM st_stock_cardex WHERE oid='"+jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 5)+"'");
//
//         while(rs12.next()){
//              jTable1.setValueAt(rs12.getObject(1), jTable1.getSelectedRow(), 0);
//        jTable1.setValueAt(rs12.getObject(2), jTable1.getSelectedRow(), 3);
//        jTable1.setValueAt(rs12.getObject(3), jTable1.getSelectedRow(), 4);
//        jTable1.setValueAt(rs12.getObject(4), jTable1.getSelectedRow(), 9);
//        jTable1.setValueAt(rs12.getObject(5), jTable1.getSelectedRow(), 12);
//        jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(), 5);
//        jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(), 6);
//        jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(), 7);
//        jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(), 8);
//        jTable1.setValueAt("-", jTable1.getSelectedRow(), 1);
//        jTable1.setValueAt("1", jTable1.getSelectedRow(), 2);
//         LPONO.setText(rs12.getObject("order_no").toString());
//         if(!oid.contains(rs12.getObject("oid"))){
//             oid.addElement(rs12.getObject("oid"));
//            System.out.println("oid is "+oid);
//         }
//         }
//        System.out.println("select item,quantity_received,PRICE_PER_ITEM ,debit ,item_code,order_no,oid "
//                 + "                                     FROM st_stock_cardex WHERE"
//                 + " approved=false and quantity_received='"+jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 4)+"' and item_code='"+jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 2)+"' and  "
//                 + "item='"+jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0)+"' AND "
//                 + "store ilike '%" + jComboBox2.getSelectedItem().toString() + "%' and invoice_no = '" + jTextField91.getText() + "'");
//            
//             for (int k = 0; k < jSearchTable.getRowCount(); k++) {
//            for (int r = 0; r < jSearchTable.getColumnCount(); r++) {
//                jSearchTable.getModel().setValueAt(null, k, r);
//            }
//        }
//             
//          
//        }catch(Exception r){
//            r.printStackTrace();
//        }
//        
//
//        int j = 0;
//    
//        jSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked

    private void resetbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetbtnActionPerformed
        double quantity = 0.00;
        double price = 0.00;
        double pkge = 0.00;
        double qty = 0.00;
        double uprice = 0.00;
        double rates = 0.00;

        java.util.Calendar calendar = java.util.Calendar.getInstance();

        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql = new java.sql.Date(dateNow);

        String Stock = null;
        String actCode = null;
        String accountCode = null;
        String transNo = null;
        String glType = null;
        String VouchNo = null;
        String StocktransNo = null;
        String creditNote = null;

        int invoices = 0;
        try {

            postbtnActionPerformed(evt);
            //  connectDB.setAutoCommit(false);
            //   if(this.jComboBox2.getSelectedItem().toString().equalsIgnoreCase("main store")){
            java.sql.Statement pst2 = connectDB.createStatement();
            java.sql.ResultSet rs = pst2.executeQuery("select code,activity from pb_activity where code ilike '" + this.jTextField6.getText() + "%'");
            while (rs.next()) {
                actCode = rs.getObject(1).toString();
                Stock = rs.getObject(2).toString();
            }
            java.sql.Statement pst1 = connectDB.createStatement();
            java.sql.ResultSet rs1 = pst1.executeQuery("select code,activity from pb_activity where activity_category = 'CP'");
            while (rs1.next()) {
                accountCode = rs1.getObject(1).toString();
                glType = rs1.getObject(2).toString();
            }
            java.sql.Statement cr = connectDB.createStatement();
            java.sql.ResultSet rstcr = cr.executeQuery("select 'PCRT'||lpad(currval('debitnote_no_seq')::TEXT,3,0::TEXT)");
            while (rstcr.next()) {
                rstcr.getObject(1).toString();

                creditNote = rstcr.getObject(1).toString();
            }
            com.afrisoftech.reports.GRTPdf policy = new com.afrisoftech.reports.GRTPdf();
            policy.GRTPdf(connectDB, this.datePicker1.getDate().toLocaleString(), this.datePicker1.getDate().toLocaleString(), this.receivedFromTxt.getText().toString(), creditNote);

            //  javax.swing.JOptionPane.showMessageDialog(this, "Enter quantity received","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
        } catch (java.sql.SQLException sq) {
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sq.getMessage());
            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_resetbtnActionPerformed

    private void grnDetailsTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_grnDetailsTableKeyReleased
//        double resFloat = 0.00;
//        double resVal = 0.00;
//        double total = 0.00;
//        double total1 = 0.00;
//        double discount1 = 0.00;
//        double vat = 0.00;
//        double VatAmt = 0.00;
//        double floatCol2 = 0.00;
//        double floatCol3 = 0.00;
//        //  double totalSum = 0.00;
//        if (jTable1.getValueAt(jTable1.getSelectedRow(), jTable1.getSelectedColumn()) != null) {
//
//
//            floatCol2 = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString());
//
//            floatCol3 = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString());
//
//            //            if (jTable1.getValueAt(jTable1.getSelectedRow(), 3) != null) {
//            total = floatCol2 * floatCol3;
//            //                jTable1.setValueAt(new java.lang.Float(total), jTable1.getSelectedRow(), 7);
//
//
//            if (jTable1.getValueAt(jTable1.getSelectedRow(), 5) != null) {
//                discount1 = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());
//
//                resVal = total * discount1 / 100;
//                // total = ((floatCol2 * floatCol3) - ((floatCol2 * floatCol3)*discount1/100));
//                // resVal = (floatCol2 * floatCol3)*discount1/100;
//                jTable1.setValueAt(new java.lang.Float(resVal), jTable1.getSelectedRow(), 6);
//                jTable1.setValueAt(new java.lang.Float(total - resVal), jTable1.getSelectedRow(), 9);
//
//                this.tableModelTableChanged1();
//
//                if (jTable1.getValueAt(jTable1.getSelectedRow(), 7) != null) {
//                    vat = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 7).toString());
//                    // total = (((total) + ((floatCol2 * floatCol3)*vat/100)) - ((floatCol2 * floatCol3)*discount1/100));
//
//                    VatAmt = (total - resVal) * vat / 100;
//                    jTable1.setValueAt(new java.lang.Float(VatAmt), jTable1.getSelectedRow(), 8);
//                    jTable1.setValueAt(new java.lang.Float(resVal), jTable1.getSelectedRow(), 6);
//                    jTable1.setValueAt(new java.lang.Float((total - resVal) + VatAmt), jTable1.getSelectedRow(), 9);
//
//                    this.tableModelTableChanged2();
//                    //jTable1.setValueAt(new java.lang.Float(resVal), jTable1.getSelectedRow(), 5);
//                }
//
//
//
//
//
//
//            } else if (jTable1.getValueAt(jTable1.getSelectedRow(), 7) != null) {
//                vat = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 7).toString());
//
//                total1 = ((floatCol2 * floatCol3));
//
//                total = ((floatCol2 * floatCol3) + ((floatCol2 * floatCol3) * vat / 100));
//                VatAmt = ((floatCol2 * floatCol3) * vat / 100);
//                jTable1.setValueAt(new java.lang.Float(VatAmt), jTable1.getSelectedRow(), 8);
//
//                //this.jTextField1.setText(java.lang.String.valueOf(VatAmt));
//                jTable1.setValueAt(new java.lang.Float(total), jTable1.getSelectedRow(), 9);
//                this.tableModelTableChanged2();
//
//            } else //  }else
//            if (jTable1.getValueAt(jTable1.getSelectedRow(), 7) != null) {
//                jTable1.setValueAt(new java.lang.Float(total), jTable1.getSelectedRow(), 9);
//            }
//            this.tableModelTableChanged();
//
//
//            for (int i = 0; i < jTable1.getRowCount(); i++) {
//
//                if (jTable1.getModel().getValueAt(i, 0) != null) {//toString().compareToIgnoreCase(null) {
//
//                    resFloat = resFloat + Double.parseDouble(jTable1.getValueAt(i, 9).toString());
//
//
//                }
//            }
//
//            //  this.tableModelTableChanged();
//
//        }
//        double net = Double.parseDouble(this.jTextField2.getText());
//        double vats = Double.parseDouble(this.jTextField1.getText());
//        jTextField5.setText(java.lang.String.valueOf(net - vats));
        //  if (jTable1.getValueAt(jTable1.getSelectedRow(), 4) != null) {
        //      vat = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 6).toString());

        //       total = (((floatCol2 * floatCol3) + ((floatCol2 * floatCol3)*vat/100)) - ((floatCol2 * floatCol3)*discount1/100));
        // }
        // Add your handling code here:
    }//GEN-LAST:event_grnDetailsTableKeyReleased

    private void exitbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitbtnActionPerformed
        this.setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_exitbtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
//        int rows2Delete = jTable1.getSelectedRowCount();
//
//        int[] selectedRows = jTable1.getSelectedRows();
//
//        if (rows2Delete < 1) {
//
//            java.awt.Toolkit.getDefaultToolkit().beep();
//
//            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");
//
//        } else {
//
//            if (rows2Delete > 1) {
//
//                for (int i = 0; i < selectedRows.length; i++) {
//
//
//
//                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable1.getModel();
//
//                    defTableModel.removeRow(selectedRows[i]);
//
//                }
//
//
//
//            } else {
//
//                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable1.getModel();
//
//                defTableModel.removeRow(jTable1.getSelectedRow());
//            }
//        }
        // Add your handling code here:
        for (int k = 0; k < grnDetailsTable.getRowCount(); k++) {
            for (int r = 0; r < grnDetailsTable.getColumnCount(); r++) {
                grnDetailsTable.getModel().setValueAt(null, k, r);
            }
        }
        oid.removeAllElements();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cancelbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelbtnActionPerformed
        reversalReasonTxt.setText("");
        jTextField111.setText("");
        receivedFromTxt.setText("");
        DnoteNoTxt.setText("");
        originalInvoiceTxt.setText("");
        grossValueTxt.setText("00");
        totalDiscountTxt.setText("00");
        vatAmountTxt.setText("00");
        netValueTxt.setText("00");
        LPONO.setText(" ");
        oid.removeAllElements();

        for (int k = 0; k < grnDetailsTable.getRowCount(); k++) {
            for (int r = 0; r < grnDetailsTable.getColumnCount(); r++) {
                grnDetailsTable.getModel().setValueAt(null, k, r);
            }
        }

        for (int k = 0; k < jSearchTable.getRowCount(); k++) {
            for (int r = 0; r < jSearchTable.getColumnCount(); r++) {
                jSearchTable.getModel().setValueAt(null, k, r);
            }
        }

        for (int k = 0; k < dnoteSearchTable.getRowCount(); k++) {
            for (int r = 0; r < dnoteSearchTable.getColumnCount(); r++) {
                dnoteSearchTable.getModel().setValueAt(null, k, r);
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_cancelbtnActionPerformed
    private void cmboxActionPerformed(java.awt.event.ActionEvent evt) {
        java.lang.Object selectedGuaran = cmbox.getSelectedItem();
        int i = grnDetailsTable.getSelectedRow();

        if (selectedGuaran != null) {

            try {
                //java.sql.Connection con = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/hospital","postgres","pilsiner");
                java.sql.Statement pstmt = connectDB.createStatement();
                // java.sql.ResultSet rs = pstmt.executeQuery("select rate,gl_account from pb_operating_parameters where service_type = '"+selectedGuaran+"'");

                java.sql.ResultSet rs = pstmt.executeQuery("select units from st_stock_item where description = '" + selectedGuaran + "'");
                while (rs.next()) {

                    grnDetailsTable.setValueAt(rs.getObject(1), i, 1);

                }
            } catch (java.sql.SQLException sqlex) {
                System.out.println(sqlex.getMessage());
            }

        }

    }

    private void postbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postbtnActionPerformed

        java.text.SimpleDateFormat timestampDate = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        java.util.Date dateToday = new java.util.Date();

        if (jTextField6.getText().toString().equalsIgnoreCase("") | jTextField6.getText().toString().equalsIgnoreCase(" ") | jTextField6.getText().toString().equalsIgnoreCase("  ") | jTextField6.getText().toString().equalsIgnoreCase("   ") | jTextField6.getText().toString().equalsIgnoreCase("    ")) {
            javax.swing.JOptionPane.showMessageDialog(this, "Cannot have blank Gl Acc No.\nSelect store name again to populate the field.".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        } else if ((reversalReasonTxt.getText().equals(null)) || (reversalReasonTxt.getText().length() < 3)) {
            javax.swing.JOptionPane.showMessageDialog(null, "Please specify a valid reason for reversing.");
        } else {
            java.util.Date periodFrom = null;
            java.util.Date periodTo = null;

            try {

                java.sql.Statement stmtf = connectDB.createStatement();
                java.sql.ResultSet rsetf = stmtf.executeQuery("select period_from,period_to FROM period_setup WHERE period_status ilike 'Open'");
                while (rsetf.next()) {
                    periodFrom = rsetf.getDate(1);
                    periodTo = rsetf.getDate(2);
                }

            } catch (java.sql.SQLException sq) {
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                System.out.println(sq.getMessage());

            }

            if (datePicker1.getDate().before(periodFrom) || datePicker1.getDate().after(periodTo)) {
                javax.swing.JOptionPane.showMessageDialog(this, "The date is within the closed account period! \n Please Contact Accounts Head".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            } else {
                double quantity = 0.00;
                double price = 0.00;
                double pkge = 0.00;
                double qty = 0.00;
                double uprice = 0.00;
                double rates = 0.00;

                java.util.Calendar calendar = java.util.Calendar.getInstance();

                long dateNow = calendar.getTimeInMillis();

                java.sql.Date datenowSql = new java.sql.Date(dateNow);
                try {
                    String Stock = null;
                    String actCode = null;
                    String accountCode = null;
                    String transNo = null;
                    String glType = null;
                    String VouchNo = null;
                    String StocktransNo = null;
                    String user = null;
                    String supCode = null;
                    String Purchases = null;
                    String cosCode = null;
                    String CostofSale = null;
                    String creditNote = null;

                    int invoices = 0;
                    try {
                        connectDB.setAutoCommit(false);

                        java.sql.Statement pst2v = connectDB.createStatement();
                        java.sql.ResultSet rsv = pst2v.executeQuery("select current_user");
                        while (rsv.next()) {
                            user = rsv.getObject(1).toString();
                            // Stock = rs.getObject(2).toString();
                        }
                        java.sql.Statement pst2 = connectDB.createStatement();
                        java.sql.ResultSet rs = pst2.executeQuery("select code,activity from pb_activity where code ilike '" + this.jTextField6.getText() + "%'");
                        while (rs.next()) {
                            actCode = rs.getObject(1).toString();
                            Stock = rs.getObject(2).toString();
                        }
                        java.sql.Statement pst1 = connectDB.createStatement();
                        java.sql.ResultSet rs1 = pst1.executeQuery("select code,activity from pb_activity where activity_category = 'CP'");
                        while (rs1.next()) {
                            accountCode = rs1.getObject(1).toString();
                            glType = rs1.getObject(2).toString();
                        }
                        java.sql.Statement ps = connectDB.createStatement();
                        java.sql.Statement cr = connectDB.createStatement();
                        java.sql.Statement ps22 = connectDB.createStatement();
                        java.sql.Statement ps11 = connectDB.createStatement();
                        java.sql.Statement ps11r = connectDB.createStatement();
                        java.sql.ResultSet rst = ps11.executeQuery("select nextval('transaction_no_seq')");
                        while (rst.next()) {
                            rst.getObject(1).toString();

                            transNo = rst.getObject(1).toString();
                        }

                        java.sql.ResultSet rstr = ps11r.executeQuery("SELECT mark_up FROM st_stores WHERE store_name ILIKE '" + storeNameCmbx.getSelectedItem().toString() + "'");
                        while (rstr.next()) {
                            rates = rstr.getDouble(1);
                        }
                        java.sql.Statement pst21 = connectDB.createStatement();
                        java.sql.ResultSet rs111 = pst21.executeQuery("select 'PCRT'||lpad(nextval('debitnote_no_seq')::TEXT,3,0::TEXT)");
                        while (rs111.next()) {
                            StocktransNo = rs111.getObject(1).toString();
                        }

                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert "
                                + "into st_stock_cardex values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?,"
                                + " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                        for (int i = 0; i < grnDetailsTable.getRowCount(); i++) {
                            // if (jTable1.getModel().getValueAt(i, 0).toString().length()>0) 

                            if (grnDetailsTable.getModel().getValueAt(i, 9) != null) {

                                pkge = Double.parseDouble(grnDetailsTable.getModel().getValueAt(i, 2).toString());
                                qty = Double.parseDouble(grnDetailsTable.getModel().getValueAt(i, 3).toString());
                                uprice = Double.parseDouble(grnDetailsTable.getModel().getValueAt(i, 4).toString());

                                quantity = qty;

                                price = uprice / pkge;

                                pstmt.setString(1, LPONO.getText());
                                pstmt.setString(2, storeNameCmbx.getSelectedItem().toString());
                                pstmt.setObject(3, grnDetailsTable.getValueAt(i, 0));
                                pstmt.setDate(4, null);
                                pstmt.setDouble(5, java.lang.Double.valueOf(grnDetailsTable.getValueAt(i, 9).toString()));
                                pstmt.setDouble(6, price);
                                pstmt.setObject(7, grnDetailsTable.getValueAt(i, 1));
                                pstmt.setString(8, user);
                                pstmt.setString(9, "Reversal");
                                pstmt.setString(10, StocktransNo);
                                pstmt.setDouble(12, 0.00);
                                pstmt.setDouble(11, 0.00);
                                pstmt.setDouble(13, 0.00);
                                pstmt.setString(14, "Wrong Receiving");
                                pstmt.setString(15, user);
                                pstmt.setString(16, receivedFromTxt.getText());
                                pstmt.setString(17, StocktransNo);
                                pstmt.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));

                                System.err.println("This is the date from datePicker " + datePicker1.getDate());
                                pstmt.setString(19, storeNameCmbx.getSelectedItem().toString());
                                pstmt.setString(20, "Stock Returns");
                                pstmt.setDouble(21, 0.00);
                                pstmt.setObject(22, java.lang.Double.valueOf(grnDetailsTable.getValueAt(i, 6).toString()));
                                pstmt.setString(23, jTextField6.getText());
                                pstmt.setString(24, DnoteNoTxt.getText());
                                pstmt.setString(25, storeNameCmbx.getSelectedItem().toString());
                                pstmt.setString(26, transNo);
                                pstmt.setDouble(27, quantity);
                                pstmt.setString(28, user);
                                pstmt.setBoolean(29, true);
                                pstmt.setDouble(30, java.lang.Double.valueOf(grnDetailsTable.getValueAt(i, 7).toString()));
                                pstmt.setDate(31, null);

                                pstmt.setObject(32, grnDetailsTable.getValueAt(i, 12));

                                pstmt.setObject(33, "");
                                pstmt.setObject(34, S13NumberTxt.getText());

                                pstmt.executeUpdate();

                                java.sql.PreparedStatement pstmt81212 = connectDB.prepareStatement(""
                                        + "update st_stock_cardex set approved=true where oid='" + oid.elementAt(i) + "' ");
//                                  + "and "
//                                  + "order_no='" + LPONO.getText()+ "' and delivery_note_no='" + jTextField91.getText()+ "' "
//                                  + "and item_code='" + jTable1.getValueAt(i, 12) + "'");
                                pstmt81212.executeUpdate();

                                java.sql.PreparedStatement pstmt11 = connectDB.prepareStatement("insert into "
                                        + "st_sub_stores values(?,? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
                                pstmt11.setString(1, storeNameCmbx.getSelectedItem().toString());
                                pstmt11.setObject(2, grnDetailsTable.getValueAt(i, 0));
                                pstmt11.setDouble(4, quantity);
                                pstmt11.setDouble(3, 0.00);
                                pstmt11.setDouble(5, price);
                                pstmt11.setDouble(6, java.lang.Double.valueOf(grnDetailsTable.getValueAt(i, 9).toString()));
                                pstmt11.setDouble(7, 0.00);
                                pstmt11.setObject(8, transNo + "- Reversal of GRN No. " + DnoteNoTxt.getText());
                                pstmt11.setObject(9, null);
                                pstmt11.setObject(10, java.sql.Timestamp.valueOf(timestampDate.format(dateToday)));
                                pstmt11.setString(11, user);
                                pstmt11.setObject(12, grnDetailsTable.getValueAt(i, 1));
                                pstmt11.setObject(13, storeNameCmbx.getSelectedItem().toString());
                                pstmt11.setObject(14, reversalReasonTxt.getText());
                                pstmt11.setObject(15, grnDetailsTable.getValueAt(i, 4));
                                pstmt11.setObject(16, grnDetailsTable.getValueAt(i, 12));
                                pstmt11.setObject(17, "");
                                //pstmt11.setObject(18, "");

                                pstmt11.executeUpdate();

                                pstmt11 = connectDB.prepareStatement("DELETE FROM st_orders_delivery WHERE code= ? AND order_no= ? AND invoice_no= ?");
                                pstmt11.setObject(1, grnDetailsTable.getValueAt(i, 12));
                                pstmt11.setObject(2, LPONO.getText());
                                pstmt11.setObject(3, DnoteNoTxt.getText());
                                pstmt11.executeUpdate();

                            }

                        }

                        java.sql.Statement pst1d1 = connectDB.createStatement();
                        java.sql.ResultSet rs1d1 = pst1d1.executeQuery("select cost_of_sale from pb_departments where department_name ILIKE '" + storeNameCmbx.getSelectedItem() + "%'");
                        while (rs1d1.next()) {
                            supCode = rs1d1.getObject(1).toString();
                        }

                        java.sql.Statement pst1cc = connectDB.createStatement();
                        java.sql.ResultSet rs1cc = pst1cc.executeQuery("select activity from pb_activity where code ILIKE '" + supCode + "'");
                        while (rs1cc.next()) {
                            Purchases = rs1cc.getObject(1).toString();
                        }
                        java.sql.Statement pst1i = connectDB.createStatement();
                        java.sql.ResultSet rs1i = pst1i.executeQuery("select code,activity from pb_activity where activity_category ILIKE 'GRN'");
                        while (rs1i.next()) {
                            cosCode = rs1i.getObject(1).toString();
                            CostofSale = rs1i.getObject(2).toString();
                        }

                        java.sql.PreparedStatement pstmt1q1 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                        pstmt1q1.setObject(1, cosCode);
                        pstmt1q1.setString(2, CostofSale);
                        pstmt1q1.setString(3, "");
                        pstmt1q1.setString(4, receivedFromTxt.getText());
                        pstmt1q1.setString(6, DnoteNoTxt.getText());
                        pstmt1q1.setString(5, reversalReasonTxt.getText());
                        pstmt1q1.setString(7, "");
                        pstmt1q1.setString(8, "");
                        pstmt1q1.setString(9, "");
                        pstmt1q1.setString(10, "");
                        pstmt1q1.setString(11, "");
                        pstmt1q1.setString(12, "");
                        pstmt1q1.setString(13, transNo);
                        pstmt1q1.setString(14, "Medical Supplies-GRN Adj");
                        pstmt1q1.setString(15, "Stock Delivery GRN Adj");
                        //pstmt1q1.setString(15,jTextField8.getText());
                        pstmt1q1.setDouble(17, 0.00);
                        pstmt1q1.setDouble(16, com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(grnDetailsTable, 9));
                        pstmt1q1.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                        pstmt1q1.setString(19, transNo);
                        pstmt1q1.setBoolean(20, false);
                        pstmt1q1.setBoolean(21, false);
                        pstmt1q1.setBoolean(22, false);
                        pstmt1q1.setString(23, user);
                        pstmt1q1.setString(24, "");
                        pstmt1q1.setString(25, "");
                        pstmt1q1.setTimestamp(26, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                        pstmt1q1.executeUpdate();

                        GetItemInfo.autoUpdateInspection(LPONO.getText(), connectDB);
                        connectDB.commit();
                        connectDB.setAutoCommit(true);
                        javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                        for (int k = 0; k < grnDetailsTable.getRowCount(); k++) {
                            for (int r = 0; r < grnDetailsTable.getColumnCount(); r++) {
                                grnDetailsTable.getModel().setValueAt(null, k, r);
                            }
                        }

                        grossValueTxt.setText("00");
                        totalDiscountTxt.setText("00");
                        vatAmountTxt.setText("00");
                        netValueTxt.setText("00");

                        //  javax.swing.JOptionPane.showMessageDialog(this, "Enter quantity received","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                    } catch (java.sql.SQLException sq) {
                        sq.printStackTrace();
                        javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

                        System.out.println(sq.getMessage());
                        try {
                            connectDB.rollback();
                        } catch (java.sql.SQLException sql) {
                            javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
                    }

                } catch (java.lang.Exception ex) {
                    System.out.println("\n\n\n\n\n\n\nthe probleim is am " + ex.getMessage() + "\n\n\n");
                    javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                    try {
                        connectDB.rollback();
                    } catch (java.sql.SQLException sql) {
                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }

                }
            }

            cancelbtn.doClick();
        }
        // Add your handling code here:
    }//GEN-LAST:event_postbtnActionPerformed

    private void jTextField111ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField111ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField111ActionPerformed

    private void storeNameCmbxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_storeNameCmbxMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_storeNameCmbxMouseClicked

    private void storeNameCmbxMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_storeNameCmbxMouseEntered
        // TODO add your handling code here:
        if (!jCheckBox1.isSelected()) {
            javax.swing.JOptionPane.showMessageDialog(null, "Please tick the checkbox labelled \"Central Store\" to\n"
                    + "populate this drop-down list with various stores.");
        }
    }//GEN-LAST:event_storeNameCmbxMouseEntered

    private void journalItemsTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_journalItemsTblMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_journalItemsTblMouseClicked

    private void journalItemsTblKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_journalItemsTblKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_journalItemsTblKeyPressed

    private void journalItemsTblKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_journalItemsTblKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_journalItemsTblKeyReleased

    private void searchButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchButton2ActionPerformed

    private void postbtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postbtn1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_postbtn1ActionPerformed

    private void cancelbtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelbtn1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cancelbtn1ActionPerformed

    private void exitbtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitbtn1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_exitbtn1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        // TODO add your handling code here:
        if (jTabbedPane1.getSelectedIndex() == 1 && storeNameCmbx.getSelectedItem() == null) {

            storeNameCmbxMouseEntered(evt);
            jTabbedPane1.setSelectedIndex(0);
        }
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    public void tableModelTableChanged() {
        System.out.println("Calculating totals for table 11 and 2.");
        //        double resFloat = 0.00;
        double resFloat = 0.00;
        double Gross = Double.parseDouble(this.grossValueTxt.getText());
        double Disc = Double.parseDouble(this.vatAmountTxt.getText());
        double Vat = Double.parseDouble(this.totalDiscountTxt.getText());
        for (int i = 0; i < grnDetailsTable.getRowCount(); i++) {

            if (grnDetailsTable.getModel().getValueAt(i, 0) != null) {

                //                if (jTable1.getSelectedColumn() == 2) {
                resFloat = resFloat + Double.parseDouble(grnDetailsTable.getModel().getValueAt(i, 9).toString());
                grossValueTxt.setText(java.lang.String.valueOf(resFloat));
                netValueTxt.setText(java.lang.String.valueOf(resFloat - Disc - Vat));
                //                }else{

                //  resFloat = resFloat + Double.parseDouble(jTable1.getModel().getValueAt(i, 7).toString());
                //   jTextField2.setText(java.lang.String.valueOf(resFloat));
                //  }
            }

            //               jTextField31.setText(java.lang.String.valueOf(resFloat));
        }
    }

    public void tableModelTableChanged(javax.swing.event.TableModelEvent evt) {
        double Gross = Double.parseDouble(this.grossValueTxt.getText());
        double Disc = Double.parseDouble(this.vatAmountTxt.getText());
        double Vat = Double.parseDouble(this.totalDiscountTxt.getText());
        //        double resFloat = 0.00;
        double resFloat = 0.00;

        for (int i = 0; i < grnDetailsTable.getRowCount(); i++) {

            if (grnDetailsTable.getModel().getValueAt(i, 0) != null) {

                //   if (jTable1.getSelectedColumn() == 3) {
                resFloat = resFloat + Double.parseDouble(grnDetailsTable.getModel().getValueAt(i, 9).toString());

                grossValueTxt.setText(java.lang.String.valueOf(resFloat));
                netValueTxt.setText(java.lang.String.valueOf(resFloat - Disc - Vat));

                //  }else{
                //      resFloat = resFloat + Double.parseDouble(jTable1.getModel().getValueAt(i, 7).toString());
                //      jTextField2.setText(java.lang.String.valueOf(resFloat));
                //}
            }
        }

        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    public void tableModelTableChanged1() {
        System.out.println("Calculating totals for table 12 and 21.");
        double Gross = Double.parseDouble(this.grossValueTxt.getText());
        double Disc = Double.parseDouble(this.vatAmountTxt.getText());
        double Vat = Double.parseDouble(this.totalDiscountTxt.getText());
        double resFloat1 = 0.00;

        for (int i = 0; i < grnDetailsTable.getRowCount(); i++) {

            if (grnDetailsTable.getModel().getValueAt(i, 5) != null) {

                if (grnDetailsTable.getSelectedColumn() == 5) {

                    resFloat1 = resFloat1 + Double.parseDouble(grnDetailsTable.getModel().getValueAt(i, 6).toString());
                    totalDiscountTxt.setText(java.lang.String.valueOf(resFloat1));
                    netValueTxt.setText(java.lang.String.valueOf(Gross - Disc - Vat));

                }

                resFloat1 = resFloat1 + Double.parseDouble(grnDetailsTable.getModel().getValueAt(i, 6).toString());
                totalDiscountTxt.setText(java.lang.String.valueOf(resFloat1));
                netValueTxt.setText(java.lang.String.valueOf(Gross - Disc - Vat));
                //   else{
                //       javax.swing.JOptionPane.showMessageDialog(this,"Disc. % cannot be null","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                //   }

            }
        }
    }

    public void tableModelTableChanged1(javax.swing.event.TableModelEvent evt) {

        double Gross = Double.parseDouble(this.grossValueTxt.getText());
        double Disc = Double.parseDouble(this.vatAmountTxt.getText());
        double Vat = Double.parseDouble(this.totalDiscountTxt.getText());
        double resFloat1 = 0.00;

        for (int i = 0; i < grnDetailsTable.getRowCount(); i++) {

            if (grnDetailsTable.getModel().getValueAt(i, 5) != null) {

                if (grnDetailsTable.getSelectedColumn() == 5) {

                    resFloat1 = resFloat1 + Double.parseDouble(grnDetailsTable.getModel().getValueAt(i, 6).toString());
                    totalDiscountTxt.setText(java.lang.String.valueOf(resFloat1));
                    netValueTxt.setText(java.lang.String.valueOf(Gross - Disc - Vat));

                } else {

                    resFloat1 = resFloat1 + Double.parseDouble(grnDetailsTable.getModel().getValueAt(i, 6).toString());
                    totalDiscountTxt.setText(java.lang.String.valueOf(resFloat1));
                    netValueTxt.setText(java.lang.String.valueOf(Gross - Disc - Vat));

                    // else{
                    // javax.swing.JOptionPane.showMessageDialog(this,"Disc. % cannot be null","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    public void tableModelTableChanged2() {
        System.out.println("Calculating totals for table 12 and 21.");
        //        double resFloat = 0.00;
        double resFloat1 = 0.00;
        double Gross = Double.parseDouble(this.grossValueTxt.getText());
        double Disc = Double.parseDouble(this.vatAmountTxt.getText());
        double Vat = Double.parseDouble(this.totalDiscountTxt.getText());
        for (int i = 0; i < grnDetailsTable.getRowCount(); i++) {

            if (grnDetailsTable.getModel().getValueAt(i, 0) != null) {

                if (grnDetailsTable.getSelectedColumn() == 7) {

                    resFloat1 = resFloat1 + Double.parseDouble(grnDetailsTable.getModel().getValueAt(i, 8).toString());
                    vatAmountTxt.setText(java.lang.String.valueOf(resFloat1));
                    netValueTxt.setText(java.lang.String.valueOf(Gross - Disc - Vat));

                } else {

                    resFloat1 = resFloat1 + Double.parseDouble(grnDetailsTable.getModel().getValueAt(i, 8).toString());
                    vatAmountTxt.setText(java.lang.String.valueOf(resFloat1));
                    netValueTxt.setText(java.lang.String.valueOf(Gross - Disc - Vat));

                    //   javax.swing.JOptionPane.showMessageDialog(this,"Vat % cannot be null","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }

            //               jTextField31.setText(java.lang.String.valueOf(resFloat));
        }
    }

    public void tableModelTableChanged2(javax.swing.event.TableModelEvent evt) {

        double Gross = Double.parseDouble(this.grossValueTxt.getText());
        double Disc = Double.parseDouble(this.vatAmountTxt.getText());
        double Vat = Double.parseDouble(this.totalDiscountTxt.getText());
        double resFloat1 = 0.00;

        for (int i = 0; i < grnDetailsTable.getRowCount(); i++) {

            if (grnDetailsTable.getModel().getValueAt(i, 7) != null) {

                if (grnDetailsTable.getSelectedColumn() == 7) {

                    resFloat1 = resFloat1 + Double.parseDouble(grnDetailsTable.getModel().getValueAt(i, 7).toString());
                    vatAmountTxt.setText(java.lang.String.valueOf(resFloat1));
                    netValueTxt.setText(java.lang.String.valueOf(Gross - Disc - Vat));

                } else {

                    resFloat1 = resFloat1 + Double.parseDouble(grnDetailsTable.getModel().getValueAt(i, 7).toString());
                    vatAmountTxt.setText(java.lang.String.valueOf(resFloat1));
                    netValueTxt.setText(java.lang.String.valueOf(Gross - Disc - Vat));
                    //    javax.swing.JOptionPane.showMessageDialog(this,"Vat % cannot be null","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                }
            }
        }
        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField DnoteNoTxt;
    private javax.swing.JTextField LPONO;
    private javax.swing.JTextField LPONO1;
    private javax.swing.JTextField S13NumberTxt;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelbtn;
    private javax.swing.JButton cancelbtn1;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private com.afrisoftech.lib.DatePicker datePicker2;
    private javax.swing.JScrollPane dnoteSearchScrollPane;
    private javax.swing.JTable dnoteSearchTable;
    private javax.swing.JDialog dnoteSearchdialog;
    private javax.swing.JButton exitbtn;
    private javax.swing.JButton exitbtn1;
    private javax.swing.JTable grnDetailsTable;
    private javax.swing.JTextField grossValueTxt;
    private javax.swing.JTextField invoiceDateTxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton521;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel421;
    private javax.swing.JPanel jPanel422;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jSearchPanel21;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField61;
    private javax.swing.JTextField jTextField92;
    private javax.swing.JTable journalItemsTbl;
    private javax.swing.JTextField netValueTxt;
    private javax.swing.JTextField originalInvoiceTxt;
    private javax.swing.JButton postbtn;
    private javax.swing.JButton postbtn1;
    private javax.swing.JTextField receivedFromTxt;
    private javax.swing.JButton resetbtn;
    private javax.swing.JTextField reversalReasonTxt;
    private javax.swing.JTextField s13txfld1;
    private javax.swing.JButton searchButton1;
    private javax.swing.JButton searchButton2;
    private javax.swing.JTextField searchDnoteTxt;
    private javax.swing.JComboBox storeNameCmbx;
    private javax.swing.JTextField totalDiscountTxt;
    private javax.swing.JTextField vatAmountTxt;
    // End of variables declaration//GEN-END:variables
}
