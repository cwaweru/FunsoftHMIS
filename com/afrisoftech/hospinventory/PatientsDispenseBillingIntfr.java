/*
 *
 * Created on August 13, 2002, 1:09 PM
 */
package com.afrisoftech.hospinventory;

import com.afrisoftech.lib.ClearTable;
import com.afrisoftech.lib.CurrencyFormatter;
import com.afrisoftech.lib.GetItemInfo;
import com.afrisoftech.lib.SQLDateFormat;
import com.afrisoftech.lib.StockFormulae;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;

/**
 *
 * @author francis
 */
public class PatientsDispenseBillingIntfr extends javax.swing.JInternalFrame {

    private final javax.swing.JTextField comboTextField = new javax.swing.JTextField();
    javax.swing.ComboBoxModel mainComboBoxModel;
    javax.swing.ComboBoxModel oldComboBox1311Model;
    private javax.swing.JComboBox cmbox;
    private javax.swing.JComboBox cmbox2;
    private javax.swing.JComboBox cmbox1;
    java.sql.Connection connectDB = null;
    private boolean refreshStatus;
    com.afrisoftech.timeseries.YearyAgeing ageingSeries = null;
    private UpdatePatientList updatePatientList;
    com.afrisoftech.lib.DBObject dbObject;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    private boolean DirectRev;
    public static String transNo = null;
    boolean smartcard = false;
    private String visitID;

    public PatientsDispenseBillingIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        refreshStatus = true;

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();

//        com.afrisoftech.lib.BarcodeReader barcodeReader = new com.afrisoftech.lib.BarcodeReader();
//
//        barcodeReader.addBarcodeListener(new com.afrisoftech.lib.BarcodeReader.BarcodeListener() {
//
//            @Override
//            public void onBarcodeRead(String barcode) {
//                //  javax.swing.JOptionPane.showMessageDialog(null, barcode);
//                System.out.println("Barcode reading : [" + barcode + "]");
//                barcodeSearchAction(barcode);
//
//                // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//            }
//        });
        dbObject = new com.afrisoftech.lib.DBObject();

        //  startRunning();
    }
    String glAcc2 = null;
    String Stock = null;
    String actCode = null;
    String accountCode = null;
    String userName = null;
    String transNo1 = null;
    String glType = null;
    String glCode = null;
    String units = null;
    String chbox = null;
    double price = 0.00;
    double qty = 0.00;
    double amount = 0.00;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jSearchDialog212 = new javax.swing.JDialog();
        jSearchPanel212 = new javax.swing.JPanel();
        jTextField11312 = new javax.swing.JTextField();
        jSearchScrollPane212 = new javax.swing.JScrollPane();
        jSearchTable212 = new com.afrisoftech.dbadmin.JTable();
        jButton4212 = new javax.swing.JButton();
        jButton5212 = new javax.swing.JButton();
        patientSearchDialog = new javax.swing.JDialog();
        jSearchPanel2121 = new javax.swing.JPanel();
        jTextField113121 = new javax.swing.JTextField();
        jSearchScrollPane2121 = new javax.swing.JScrollPane();
        jSearchTable2121 = new com.afrisoftech.dbadmin.JTable();
        jButton42121 = new javax.swing.JButton();
        jButton52121 = new javax.swing.JButton();
        itemsSearchDialog = new javax.swing.JDialog();
        itemSearchPanel = new javax.swing.JPanel();
        itemSearchTxt = new javax.swing.JTextField();
        itemSearchScrollPane = new javax.swing.JScrollPane();
        itemSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton92 = new javax.swing.JButton();
        buttonGroup21 = new javax.swing.ButtonGroup();
        receiptsearchDialog = new javax.swing.JDialog();
        jSearchPanel213 = new javax.swing.JPanel();
        jTextField115 = new javax.swing.JTextField();
        jSearchScrollPane4 = new javax.swing.JScrollPane();
        jSearchTable4 = new com.afrisoftech.dbadmin.JTable();
        jButton93 = new javax.swing.JButton();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jSearchDialog13 = new javax.swing.JDialog();
        jSearchPanel13 = new javax.swing.JPanel();
        jTextField1113 = new javax.swing.JTextField();
        jSearchScrollPane13 = new javax.swing.JScrollPane();
        jSearchTable13 = new com.afrisoftech.dbadmin.JTable();
        dispose11 = new javax.swing.JButton();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        searchPharmacist = new javax.swing.JDialog();
        jSearchPanel14 = new javax.swing.JPanel();
        jSearchScrollPane14 = new javax.swing.JScrollPane();
        usersTbl = new com.afrisoftech.dbadmin.JTable();
        dispose12 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        outPatient = new javax.swing.JCheckBox();
        walkIn = new javax.swing.JCheckBox();
        inPatient = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jCheckBox31 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jRadioButton1 = new javax.swing.JRadioButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jPanel413 = new javax.swing.JPanel();
        receiptNotxt = new javax.swing.JTextField();
        searchButton4 = new javax.swing.JButton();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jTextField42 = new javax.swing.JTextField();

        datePicker1 = new com.afrisoftech.lib.DatePicker();
        jTextField6 = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        //jPanel13.setVisible(false);
        jPanel23 = new javax.swing.JPanel();
        jLabel91 = new javax.swing.JLabel();
        jComboBox1311 = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jTextField22 = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jPanel42 = new javax.swing.JPanel();
        patientNumberTxt = new javax.swing.JTextField();
        searchButton2 = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox();
        jTextField82 = new javax.swing.JTextField();
        try {
            java.sql.Statement pstmt = connectDB.createStatement();
            java.sql.ResultSet rs = pstmt.executeQuery("select rate from pb_operating_parameters where category = 'PF'");

            while (rs.next()){
                jTextField82.setText(rs.getObject(1).toString());
                // jTextField2.setText(rs.getObject(2).toString());

            }
        } catch(java.sql.SQLException sqlex){
            System.out.println(sqlex.getMessage());
        }
        jComboBox1 = new javax.swing.JComboBox();
        jPanel641 = new javax.swing.JPanel();
        searchButton3 = new javax.swing.JButton();
        jTextField14 = new javax.swing.JTextField();
        jTextField17 = new javax.swing.JTextField();
        jTextField18 = new javax.swing.JTextField();
        jTextField16 = new javax.swing.JTextField();
        jTextField19 = new javax.swing.JTextField();
        jTextField20 = new javax.swing.JTextField();
        jTextField21 = new javax.swing.JTextField();
        storeCmbx = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        storeGLCodeTxt = new javax.swing.JTextField();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jTextField5 = new javax.swing.JTextField();
        jScrollPane22 = new javax.swing.JScrollPane();
        dispensingTable = new com.afrisoftech.dbadmin.JTable();
        jLabel18 = new javax.swing.JLabel();
        procurementMethodCmbx = new javax.swing.JComboBox<>();
        jSeparator12 = new javax.swing.JSeparator();
        jLabel532 = new javax.swing.JLabel();
        jTextField32 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jTextField15 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton12 = new javax.swing.JButton();
        jButton63 = new javax.swing.JButton();
        jButton32 = new javax.swing.JButton();
        jButton41 = new javax.swing.JButton();
        jButton54 = new javax.swing.JButton();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton121 = new javax.swing.JButton();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton122 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        spacerPanel = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        patientBilltbl = new com.afrisoftech.dbadmin.JTable();
        printInterimbtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientPresctbl = new com.afrisoftech.dbadmin.JTable();
        patientPrescbtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        patientPrescriptionDt = new com.afrisoftech.lib.DatePicker();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pharmacistWorkloadTbl = new com.afrisoftech.dbadmin.JTable();
        workloadBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        allPharmacistsChBx = new javax.swing.JCheckBox();
        currentUserChBx = new javax.swing.JCheckBox();
        jPanel14 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        totalRevenuelb = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        schemepatientTxt = new javax.swing.JTextField();
        outpatientTxt = new javax.swing.JTextField();
        totalRevenueTxt = new javax.swing.JTextField();
        inpatientsTXT = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        patientCountTxt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        totalItemDispensedtxt = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        endworkloadDate = new com.afrisoftech.lib.DatePicker();
        startworkloadDate = new com.afrisoftech.lib.DatePicker();
        searchPharmacisttxt = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        availableDrugsQtysTbl = new com.afrisoftech.dbadmin.JTable();
        drugsCmbx = new javax.swing.JComboBox();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        requisitionsformTBl = new com.afrisoftech.dbadmin.JTable();
        requisitionNoTxt = new javax.swing.JTextField();

        jSearchDialog212.setUndecorated(true);
        jSearchDialog212.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel212.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel212.setLayout(new java.awt.GridBagLayout());

        jTextField11312.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField11312CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel212.add(jTextField11312, gridBagConstraints);

        jSearchTable212.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable212.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable212.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable212MouseClicked(evt);
            }
        });
        jSearchScrollPane212.setViewportView(jSearchTable212);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel212.add(jSearchScrollPane212, gridBagConstraints);

        jButton4212.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel212.add(jButton4212, gridBagConstraints);

        jButton5212.setText("Close");
        jButton5212.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5212ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel212.add(jButton5212, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog212.getContentPane().add(jSearchPanel212, gridBagConstraints);

        patientSearchDialog.setUndecorated(true);
        patientSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2121.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2121.setLayout(new java.awt.GridBagLayout());

        jTextField113121.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField113121CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel2121.add(jTextField113121, gridBagConstraints);

        jSearchTable2121.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable2121.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable2121.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable2121MouseClicked(evt);
            }
        });
        jSearchScrollPane2121.setViewportView(jSearchTable2121);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2121.add(jSearchScrollPane2121, gridBagConstraints);

        jButton42121.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2121.add(jButton42121, gridBagConstraints);

        jButton52121.setText("Close");
        jButton52121.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52121ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2121.add(jButton52121, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientSearchDialog.getContentPane().add(jSearchPanel2121, gridBagConstraints);

        itemsSearchDialog.setUndecorated(true);
        itemsSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        itemSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        itemSearchPanel.setLayout(new java.awt.GridBagLayout());

        itemSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                itemSearchTxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        itemSearchPanel.add(itemSearchTxt, gridBagConstraints);

        itemSearchTable.setShowHorizontalLines(false);
        javax.swing.table.TableColumn column = null;
        for (int i = 0; i < itemSearchTable.getColumnCount(); i++) {
            column = this.itemSearchTable.getColumnModel().getColumn(i);
            if (i == 0) {

                column.setPreferredWidth(300); // item description column is bigger
            } else {

                column.setPreferredWidth(100);

            }
        }
        itemSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemSearchTableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                itemSearchTableMouseEntered(evt);
            }
        });
        itemSearchScrollPane.setViewportView(itemSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        itemSearchPanel.add(itemSearchScrollPane, gridBagConstraints);

        jButton92.setText("Dispose");
        jButton92.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton92ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        itemSearchPanel.add(jButton92, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        itemsSearchDialog.getContentPane().add(itemSearchPanel, gridBagConstraints);

        receiptsearchDialog.setUndecorated(true);
        receiptsearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel213.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel213.setLayout(new java.awt.GridBagLayout());

        jTextField115.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField115CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel213.add(jTextField115, gridBagConstraints);

        jSearchTable4.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable4.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable4MouseClicked(evt);
            }
        });
        jSearchScrollPane4.setViewportView(jSearchTable4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel213.add(jSearchScrollPane4, gridBagConstraints);

        jButton93.setText("Dispose");
        jButton93.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton93ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel213.add(jButton93, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        receiptsearchDialog.getContentPane().add(jSearchPanel213, gridBagConstraints);

        jSearchDialog13.setModal(true);
        jSearchDialog13.setUndecorated(true);
        jSearchDialog13.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel13.setLayout(new java.awt.GridBagLayout());

        jTextField1113.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1113CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel13.add(jTextField1113, gridBagConstraints);

        jSearchTable13.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable13.setShowHorizontalLines(false);
        /*int rowsNo = 0;
        //try {

            crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

            crset1.setConnectionSource(pConnDB);

            // try {
                //crset1.execute();

                // crset2.setExecuteOnLoad(true);
                jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                    new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                    new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

                }));

                tableModel = jSearchTable.getModel();

                jSearchScrollPane.setViewportView(jSearchTable);

                /*   }catch(java.sql.SQLException sqlex){
                javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                System.out.println(sqlex.getMessage());

            }

            javax.swing.table.TableColumn column = null;

            for (int i = 0; i < 4; i++) {

                column = jSearchTable.getColumnModel().getColumn(i);

                if (i == 1) {

                    column.setPreferredWidth(400);
                    //sport column is bigger
                } else {

                    column.setPreferredWidth(200);

                }
            }*/
            jSearchTable13.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jSearchTable13MouseClicked(evt);
                }
            });
            jSearchScrollPane13.setViewportView(jSearchTable13);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            jSearchPanel13.add(jSearchScrollPane13, gridBagConstraints);

            dispose11.setMnemonic('l');
            dispose11.setText("Close");
            dispose11.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    dispose11ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel13.add(dispose11, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchDialog13.getContentPane().add(jSearchPanel13, gridBagConstraints);

            searchPharmacist.setAlwaysOnTop(true);
            searchPharmacist.setAutoRequestFocus(false);
            searchPharmacist.setUndecorated(true);
            searchPharmacist.getContentPane().setLayout(new java.awt.GridBagLayout());

            jSearchPanel14.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jSearchPanel14.setLayout(new java.awt.GridBagLayout());

            usersTbl.setToolTipText("Click on the target row to select the patient from the search.");
            usersTbl.setShowHorizontalLines(false);
            /*int rowsNo = 0;
            //try {

                crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

                crset1.setConnectionSource(pConnDB);

                // try {
                    //crset1.execute();

                    // crset2.setExecuteOnLoad(true);
                    jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                        new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                        new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                        new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                        new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

                    }));

                    tableModel = jSearchTable.getModel();

                    jSearchScrollPane.setViewportView(jSearchTable);

                    /*   }catch(java.sql.SQLException sqlex){
                    javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                    System.out.println(sqlex.getMessage());

                }

                javax.swing.table.TableColumn column = null;

                for (int i = 0; i < 4; i++) {

                    column = jSearchTable.getColumnModel().getColumn(i);

                    if (i == 1) {

                        column.setPreferredWidth(400);
                        //sport column is bigger
                    } else {

                        column.setPreferredWidth(200);

                    }
                }*/
                usersTbl.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        usersTblMouseClicked(evt);
                    }
                });
                jSearchScrollPane14.setViewportView(usersTbl);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 20.0;
                jSearchPanel14.add(jSearchScrollPane14, gridBagConstraints);

                dispose12.setMnemonic('l');
                dispose12.setText("Close");
                dispose12.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        dispose12ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jSearchPanel14.add(dispose12, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                searchPharmacist.getContentPane().add(jSearchPanel14, gridBagConstraints);

                setBackground(new java.awt.Color(250, 240, 220));
                setClosable(true);
                setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
                setIconifiable(true);
                setMaximizable(true);
                setResizable(true);
                setTitle("Dispense Items Paid (Cash paying patients and billing for credit sales)");
                setFrameIcon(null);
                try {
                    setSelected(true);
                } catch (java.beans.PropertyVetoException e1) {
                    e1.printStackTrace();
                }
                setVisible(true);
                getContentPane().setLayout(new java.awt.GridBagLayout());

                jTabbedPane1.setBackground(new java.awt.Color(250, 240, 220));

                jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Dispense items by choosing a receipt number for cash payments or bill client for credit sales by selecting a registered file"));
                jPanel5.setLayout(new java.awt.GridBagLayout());

                jPanel3.setBackground(new java.awt.Color(250, 240, 220));
                jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                jPanel3.setLayout(new java.awt.GridBagLayout());

                jPanel6.setBackground(new java.awt.Color(250, 240, 220));
                jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Patient category"));
                jPanel6.setLayout(new java.awt.GridBagLayout());

                buttonGroup1.add(outPatient);
                outPatient.setSelected(true);
                outPatient.setText("Out Patient");
                outPatient.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                outPatient.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        outPatientActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                jPanel6.add(outPatient, gridBagConstraints);

                buttonGroup1.add(walkIn);
                walkIn.setText("Walk In Patient");
                walkIn.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                walkIn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        walkInActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                jPanel6.add(walkIn, gridBagConstraints);

                buttonGroup1.add(inPatient);
                inPatient.setText("In Patient");
                inPatient.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                inPatient.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                inPatient.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        inPatientActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                jPanel6.add(inPatient, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                jPanel3.add(jPanel6, gridBagConstraints);

                jPanel7.setBackground(new java.awt.Color(250, 240, 220));
                jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Search By"));
                jPanel7.setLayout(new java.awt.GridBagLayout());

                buttonGroup21.add(jCheckBox31);
                jCheckBox31.setSelected(true);
                jCheckBox31.setText("Search By  No.");
                jCheckBox31.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                jPanel7.add(jCheckBox31, gridBagConstraints);

                buttonGroup21.add(jCheckBox4);
                jCheckBox4.setText("Search By Name");
                jCheckBox4.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                jPanel7.add(jCheckBox4, gridBagConstraints);

                jRadioButton1.setText("Confirm Visit");
                jRadioButton1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jRadioButton1ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                gridBagConstraints.weightx = 1.0;
                jPanel7.add(jRadioButton1, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                jPanel3.add(jPanel7, gridBagConstraints);

                jPanel8.setBackground(new java.awt.Color(250, 240, 220));
                jPanel8.setLayout(new java.awt.GridBagLayout());

                jLabel10.setText("Date");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                jPanel8.add(jLabel10, gridBagConstraints);

                jLabel14.setText("Receipt No");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
                jPanel8.add(jLabel14, gridBagConstraints);

                jPanel413.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                jPanel413.setLayout(new java.awt.GridBagLayout());

                receiptNotxt.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel413.add(receiptNotxt, gridBagConstraints);

                searchButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
                searchButton4.setToolTipText("Search");
                searchButton4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                searchButton4.setMaximumSize(new java.awt.Dimension(74, 53));
                searchButton4.setMinimumSize(new java.awt.Dimension(74, 53));
                searchButton4.setPreferredSize(new java.awt.Dimension(25, 25));
                searchButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                searchButton4.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        searchButton4ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 2;
                jPanel413.add(searchButton4, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 3.0;
                jPanel8.add(jPanel413, gridBagConstraints);

                buttonGroup3.add(jCheckBox5);
                jCheckBox5.setText("Donation");
                jCheckBox5.setEnabled(false);
                jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jCheckBox5ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                jPanel8.add(jCheckBox5, gridBagConstraints);

                buttonGroup3.add(jCheckBox6);
                jCheckBox6.setSelected(true);
                jCheckBox6.setText("Pharmacy");
                jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jCheckBox6ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                jPanel8.add(jCheckBox6, gridBagConstraints);

                jTextField42.setEditable(false);
                jTextField42.setText("Pharmacy");
                jTextField42.setDoubleBuffered(true);
                String branch = null;
                try {
                    java.sql.Statement stmt = connectDB.createStatement();
                    java.sql.ResultSet rset = stmt.executeQuery("SELECT store_name FROM st_stores WHERE store_code ilike 'PHA'");
                    while (rset.next()){
                        jTextField42.setText(rset.getString(1));
                    }
                    rset.close();
                    stmt.close();

                } catch (java.sql.SQLException sqe) {
                    sqe.printStackTrace();
                    System.out.println("Insert not successful");
                }
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                jPanel8.add(jTextField42, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 6;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                jPanel8.add(datePicker1, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                jPanel3.add(jPanel8, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridwidth = 7;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.ipady = -5;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
                gridBagConstraints.weightx = 10.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
                jPanel5.add(jPanel3, gridBagConstraints);

                jTextField6.setEditable(false);
                jTextField6.setMinimumSize(new java.awt.Dimension(0, 0));
                jTextField6.setPreferredSize(new java.awt.Dimension(0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                jPanel5.add(jTextField6, gridBagConstraints);

                jPanel13.setBackground(new java.awt.Color(250, 240, 220));
                jPanel13.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
                jPanel13.setLayout(new java.awt.GridBagLayout());

                jPanel23.setBackground(new java.awt.Color(250, 240, 220));
                jPanel23.setLayout(new java.awt.GridBagLayout());

                jLabel91.setText("Patient No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
                jPanel23.add(jLabel91, gridBagConstraints);

                jComboBox1311.setDoubleBuffered(true);
                jComboBox1311.setMinimumSize(new java.awt.Dimension(0, 0));
                jComboBox1311.setPreferredSize(new java.awt.Dimension(0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                jPanel23.add(jComboBox1311, gridBagConstraints);

                jLabel13.setText("Patient Name");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
                jPanel23.add(jLabel13, gridBagConstraints);

                jTextField13.setEditable(false);
                jTextField13.setDoubleBuffered(true);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 2.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel23.add(jTextField13, gridBagConstraints);

                jLabel22.setText("Pharmacy store");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
                jPanel23.add(jLabel22, gridBagConstraints);

                jLabel32.setText("Patient Category");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
                jPanel23.add(jLabel32, gridBagConstraints);

                jTextField22.setEditable(false);
                jTextField22.setDoubleBuffered(true);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel23.add(jTextField22, gridBagConstraints);

                jLabel41.setText("Payment Mode");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
                jPanel23.add(jLabel41, gridBagConstraints);

                jLabel61.setText("Doctor");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
                jPanel23.add(jLabel61, gridBagConstraints);

                jPanel42.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                jPanel42.setMinimumSize(new java.awt.Dimension(7, 25));
                jPanel42.setPreferredSize(new java.awt.Dimension(7, 25));
                jPanel42.setLayout(new java.awt.GridBagLayout());

                patientNumberTxt.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel42.add(patientNumberTxt, gridBagConstraints);

                searchButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
                searchButton2.setToolTipText("Search");
                searchButton2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                searchButton2.setMaximumSize(new java.awt.Dimension(20, 53));
                searchButton2.setMinimumSize(new java.awt.Dimension(20, 53));
                searchButton2.setPreferredSize(new java.awt.Dimension(25, 25));
                searchButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                searchButton2.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        searchButton2ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 2;
                jPanel42.add(searchButton2, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 3.0;
                gridBagConstraints.weighty = 1.0;
                jPanel23.add(jPanel42, gridBagConstraints);

                jComboBox2.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select first_name||' '||middle_name as name from pb_doctors_list  where status ilike 'acti%' order by name"));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel23.add(jComboBox2, gridBagConstraints);

                jTextField82.setEditable(false);
                jTextField82.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                jTextField82.setText("0.00");
                jTextField82.setMinimumSize(new java.awt.Dimension(0, 0));
                jTextField82.setPreferredSize(new java.awt.Dimension(0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 8;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 50);
                jPanel23.add(jTextField82, gridBagConstraints);

                jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cash", "Scheme" }));
                jComboBox1.setEnabled(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel23.add(jComboBox1, gridBagConstraints);

                jPanel641.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                jPanel641.setMinimumSize(new java.awt.Dimension(0, 0));
                jPanel641.setPreferredSize(new java.awt.Dimension(0, 0));
                jPanel641.setLayout(new java.awt.GridBagLayout());

                searchButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
                searchButton3.setToolTipText("Search");
                searchButton3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                searchButton3.setMaximumSize(new java.awt.Dimension(74, 53));
                searchButton3.setMinimumSize(new java.awt.Dimension(74, 53));
                searchButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                searchButton3.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        searchButton3ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                jPanel641.add(searchButton3, gridBagConstraints);

                jTextField14.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel641.add(jTextField14, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                jPanel23.add(jPanel641, gridBagConstraints);

                jTextField17.setEditable(false);
                jTextField17.setMinimumSize(new java.awt.Dimension(0, 0));
                jTextField17.setPreferredSize(new java.awt.Dimension(0, 0));
                jTextField17.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jTextField17ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                jPanel23.add(jTextField17, gridBagConstraints);

                jTextField18.setEditable(false);
                jTextField18.setMinimumSize(new java.awt.Dimension(0, 0));
                jTextField18.setPreferredSize(new java.awt.Dimension(0, 0));
                jTextField18.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jTextField18ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                jPanel23.add(jTextField18, gridBagConstraints);

                jTextField16.setEditable(false);
                jTextField16.setMinimumSize(new java.awt.Dimension(0, 0));
                jTextField16.setPreferredSize(new java.awt.Dimension(0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel23.add(jTextField16, gridBagConstraints);

                jTextField19.setEditable(false);
                jTextField19.setMinimumSize(new java.awt.Dimension(0, 0));
                jTextField19.setPreferredSize(new java.awt.Dimension(0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel23.add(jTextField19, gridBagConstraints);

                jTextField20.setEditable(false);
                jTextField20.setMinimumSize(new java.awt.Dimension(0, 0));
                jTextField20.setPreferredSize(new java.awt.Dimension(0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel23.add(jTextField20, gridBagConstraints);

                jTextField21.setEditable(false);
                jTextField21.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                jTextField21.setText("0.00");
                jTextField21.setMinimumSize(new java.awt.Dimension(0, 0));
                jTextField21.setPreferredSize(new java.awt.Dimension(0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 8;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel23.add(jTextField21, gridBagConstraints);

                storeCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select DISTINCT stores from store_allocation where user_name = current_user"));
                storeCmbx.setSelectedIndex(0);
                storeCmbx.setEnabled(false);
                storeCmbx.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        storeCmbxActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel23.add(storeCmbx, gridBagConstraints);

                jLabel3.setText("GL Code");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 9;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
                jPanel23.add(jLabel3, gridBagConstraints);

                storeGLCodeTxt.setEditable(false);
                storeGLCodeTxt.setText(com.afrisoftech.lib.StoreFactory.getStoreName(connectDB));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 9;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weighty = 1.0;
                jPanel23.add(storeGLCodeTxt, gridBagConstraints);

                buttonGroup4.add(jCheckBox7);
                jCheckBox7.setText("Search By Code");
                jCheckBox7.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                jCheckBox7.setMargin(new java.awt.Insets(0, 0, 0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 9;
                jPanel23.add(jCheckBox7, gridBagConstraints);

                buttonGroup4.add(jCheckBox8);
                jCheckBox8.setSelected(true);
                jCheckBox8.setText("Search By name");
                jCheckBox8.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                jCheckBox8.setMargin(new java.awt.Insets(0, 0, 0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 9;
                gridBagConstraints.gridwidth = 2;
                jPanel23.add(jCheckBox8, gridBagConstraints);

                jTextField5.setEditable(false);
                jTextField5.setMinimumSize(new java.awt.Dimension(0, 0));
                jTextField5.setPreferredSize(new java.awt.Dimension(0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 8;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel23.add(jTextField5, gridBagConstraints);

                jScrollPane22.setBorder(javax.swing.BorderFactory.createTitledBorder("Select items to bill for credit sales by clicking once on the first column on an empty row"));
                jScrollPane22.setPreferredSize(new java.awt.Dimension(700, 403));

                dispensingTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null}
                    },
                    new String [] {
                        "Drugs", "Qty", "Avl Qty", "Price", "Disc", "Total", "Gl Account", "Item Code", "Strength", "Proc. Method"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
                    };
                    boolean[] canEdit = new boolean [] {
                        false, true, false, false, true, false, false, false, false, false
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }

                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit [columnIndex];
                    }
                });
                dispensingTable.setEditingColumn(1);
                dispensingTable.setEditingRow(dispensingTable.getSelectedRow());
                dispensingTable.setGridColor(new java.awt.Color(204, 204, 255));

                /*  cmbox = new javax.swing.JComboBox();

                crset2.setConnectionSource(pConnDB);
                crset2.setCommand("select distinct product FROM st_stock_prices WHERE department = 'Pharmacy' order by product");

                cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset2, "product", null, null, null));
                javax.swing.table.TableColumn s1 = this.jTable1.getColumn("Drugs");
                s1.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
                cmbox.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        cmboxActionPerformed(evt);
                    }
                });
                */

                javax.swing.table.TableColumn column111 = null;
                for (int i = 0; i < 9; i++) {
                    column111 = dispensingTable.getColumnModel().getColumn(i);
                    if (i == 0) {

                        column111.setPreferredWidth(450); //sport column is bigger
                    } else {
                        if (i == 6) {
                            column111.setPreferredWidth(10);
                        }  else
                        column111.setPreferredWidth(150);

                    }
                }

                dispensingTable.addAncestorListener(new javax.swing.event.AncestorListener() {
                    public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                    }
                    public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                    }
                    public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                        dispensingTableAncestorMoved(evt);
                    }
                });
                dispensingTable.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        dispensingTableMouseClicked(evt);
                    }
                });
                dispensingTable.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyReleased(java.awt.event.KeyEvent evt) {
                        dispensingTableKeyReleased(evt);
                    }
                });
                jScrollPane22.setViewportView(dispensingTable);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 11;
                gridBagConstraints.gridwidth = 10;
                gridBagConstraints.gridheight = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 20.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
                jPanel23.add(jScrollPane22, gridBagConstraints);

                jLabel18.setForeground(new java.awt.Color(255, 51, 51));
                jLabel18.setText("Procurement Method");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
                jPanel23.add(jLabel18, gridBagConstraints);

                procurementMethodCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT method_desc FROM public.st_procurement_method ORDER BY 1")
                );
                procurementMethodCmbx.setSelectedItem("Tender");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel23.add(procurementMethodCmbx, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridwidth = 10;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel13.add(jPanel23, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.gridwidth = 10;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
                gridBagConstraints.weightx = 1.0;
                jPanel13.add(jSeparator12, gridBagConstraints);

                jLabel532.setText("Amount");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 6;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.weightx = 1.0;
                jPanel13.add(jLabel532, gridBagConstraints);

                jTextField32.setEditable(false);
                jTextField32.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                jTextField32.setText("0.00");
                jTextField32.setMinimumSize(new java.awt.Dimension(0, 0));
                jTextField32.setPreferredSize(new java.awt.Dimension(0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
                jPanel13.add(jTextField32, gridBagConstraints);

                jTextField10.setEditable(false);
                jTextField10.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                jTextField10.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 7;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 2.0;
                jPanel13.add(jTextField10, gridBagConstraints);

                jTextField3.setText("0.00");
                jTextField3.setMinimumSize(new java.awt.Dimension(0, 0));
                jTextField3.setPreferredSize(new java.awt.Dimension(0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 6;
                gridBagConstraints.gridy = 1;
                jPanel13.add(jTextField3, gridBagConstraints);

                jTextField1.setEditable(false);
                jTextField1.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
                jTextField1.setText("0.00");
                jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyReleased(java.awt.event.KeyEvent evt) {
                        jTextField1KeyReleased(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.2;
                jPanel13.add(jTextField1, gridBagConstraints);

                jLabel16.setText("Net Total");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 8;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.weightx = 1.0;
                jPanel13.add(jLabel16, gridBagConstraints);

                jTextField15.setEditable(false);
                jTextField15.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
                jTextField15.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 9;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.5;
                jPanel13.add(jTextField15, gridBagConstraints);

                jLabel2.setText("Discount Amt.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.weightx = 1.0;
                jPanel13.add(jLabel2, gridBagConstraints);

                jLabel1.setText("Discount %");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
                jPanel13.add(jLabel1, gridBagConstraints);

                jTextField2.setEditable(false);
                jTextField2.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
                jTextField2.setText("0.00");
                jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyReleased(java.awt.event.KeyEvent evt) {
                        jTextField2KeyReleased(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel13.add(jTextField2, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 7;
                gridBagConstraints.gridheight = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 20.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
                jPanel5.add(jPanel13, gridBagConstraints);

                jPanel9.setBackground(new java.awt.Color(250, 240, 220));
                jPanel9.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
                jPanel9.setLayout(new java.awt.GridBagLayout());

                jButton12.setMnemonic('s');
                jButton12.setText("Dispense item(s)");
                jButton12.setToolTipText("Click here enter data");
                jButton12.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton12ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel9.add(jButton12, gridBagConstraints);

                jButton63.setMnemonic('r');
                jButton63.setText("Remove Row");
                jButton63.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton63ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel9.add(jButton63, gridBagConstraints);

                jButton32.setMnemonic('l');
                jButton32.setText("Clear");
                jButton32.setToolTipText("Click here to clear textfields");
                jButton32.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton32ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel9.add(jButton32, gridBagConstraints);

                jButton41.setMnemonic('C');
                jButton41.setText("Close");
                jButton41.setToolTipText("Click here to close window");
                jButton41.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton41ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 8;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel9.add(jButton41, gridBagConstraints);

                jButton54.setMnemonic('h');
                jButton54.setText("Help");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 9;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel9.add(jButton54, gridBagConstraints);

                jButton121.setMnemonic('p');
                jButton121.setText("Save & Print");
                jButton121.setToolTipText("Click here enter data");
                jButton121.setEnabled(false);
                jButton121.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton121ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel9.add(jButton121, gridBagConstraints);

                jButton122.setMnemonic('R');
                jButton122.setText("Reprint");
                jButton122.setToolTipText("Click here enter data");
                jButton122.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton122ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel9.add(jButton122, gridBagConstraints);

                jButton7.setMnemonic('h');
                jButton7.setText("Read Card");
                jButton7.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton7ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel9.add(jButton7, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 5.0;
                jPanel9.add(spacerPanel, gridBagConstraints);

                jButton3.setText("View Patient Bill");
                jButton3.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton3ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel9.add(jButton3, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 7;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridheight = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                jPanel5.add(jPanel9, gridBagConstraints);

                jTabbedPane1.addTab("Item(s)  To Dispense", jPanel5);

                jPanel4.setLayout(new java.awt.GridBagLayout());

                patientBilltbl.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {

                    },
                    new String [] {

                    }
                ));
                jScrollPane3.setViewportView(patientBilltbl);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel4.add(jScrollPane3, gridBagConstraints);

                printInterimbtn.setText("Print Interim Invoice");
                printInterimbtn.setEnabled(false);
                printInterimbtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        printInterimbtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel4.add(printInterimbtn, gridBagConstraints);

                jTabbedPane1.addTab("Patient Bill(Pharmacy Items)", jPanel4);

                jPanel1.setLayout(new java.awt.GridBagLayout());

                patientPresctbl.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {

                    },
                    new String [] {

                    }
                ));
                jScrollPane1.setViewportView(patientPresctbl);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 200.0;
                jPanel1.add(jScrollPane1, gridBagConstraints);

                patientPrescbtn.setText("Refresh Data");
                patientPrescbtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        patientPrescbtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                jPanel1.add(patientPrescbtn, gridBagConstraints);

                jLabel4.setText("Date");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel1.add(jLabel4, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                jPanel1.add(patientPrescriptionDt, gridBagConstraints);

                jTabbedPane1.addTab("Patient Prescriptions History", jPanel1);

                jPanel2.setLayout(new java.awt.GridBagLayout());

                pharmacistWorkloadTbl.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {

                    },
                    new String [] {

                    }
                ));
                pharmacistWorkloadTbl.getTableHeader().setReorderingAllowed(false);
                jScrollPane2.setViewportView(pharmacistWorkloadTbl);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridy = 2;
                gridBagConstraints.gridwidth = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 200.0;
                jPanel2.add(jScrollPane2, gridBagConstraints);

                workloadBtn.setBackground(new java.awt.Color(0, 204, 204));
                workloadBtn.setText("Refresh");
                workloadBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        workloadBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel2.add(workloadBtn, gridBagConstraints);

                jLabel5.setText("Start Date ");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel2.add(jLabel5, gridBagConstraints);

                jLabel6.setText("End Date");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel2.add(jLabel6, gridBagConstraints);

                buttonGroup5.add(allPharmacistsChBx);
                allPharmacistsChBx.setSelected(true);
                allPharmacistsChBx.setText("Workload for all Pharmacists");
                allPharmacistsChBx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                allPharmacistsChBx.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        allPharmacistsChBxActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel2.add(allPharmacistsChBx, gridBagConstraints);

                buttonGroup5.add(currentUserChBx);
                currentUserChBx.setText("Workload for current user");
                currentUserChBx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                currentUserChBx.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        currentUserChBxActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel2.add(currentUserChBx, gridBagConstraints);

                jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(null, storeCmbx.getSelectedItem().toString().toUpperCase()+":  Summary Between  "+com.afrisoftech.lib.SQLDateFormat.getSQLDate(startworkloadDate.getDate())+" and  "+com.afrisoftech.lib.SQLDateFormat.getSQLDate(endworkloadDate.getDate()), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Droid Sans Mono", 0, 12), new java.awt.Color(255, 0, 51))); // NOI18N
                jPanel14.setLayout(new java.awt.GridBagLayout());

                jLabel7.setText("Inpatients");
                jLabel7.setEnabled(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel14.add(jLabel7, gridBagConstraints);

                jLabel8.setText("Cash Outpatients");
                jLabel8.setEnabled(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel14.add(jLabel8, gridBagConstraints);

                totalRevenuelb.setBackground(new java.awt.Color(255, 51, 51));
                totalRevenuelb.setText("Total Stock Value Sold (CS)");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel14.add(totalRevenuelb, gridBagConstraints);

                jLabel11.setText("Scheme Outpatients");
                jLabel11.setEnabled(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel14.add(jLabel11, gridBagConstraints);

                schemepatientTxt.setEditable(false);
                schemepatientTxt.setText("0");
                schemepatientTxt.setEnabled(false);
                schemepatientTxt.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        schemepatientTxtActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
                jPanel14.add(schemepatientTxt, gridBagConstraints);

                outpatientTxt.setEditable(false);
                outpatientTxt.setText("0");
                outpatientTxt.setEnabled(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
                jPanel14.add(outpatientTxt, gridBagConstraints);

                totalRevenueTxt.setEditable(false);
                totalRevenueTxt.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
                totalRevenueTxt.setForeground(new java.awt.Color(255, 0, 0));
                totalRevenueTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
                jPanel14.add(totalRevenueTxt, gridBagConstraints);

                inpatientsTXT.setEditable(false);
                inpatientsTXT.setText("0");
                inpatientsTXT.setEnabled(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel14.add(inpatientsTXT, gridBagConstraints);

                jLabel9.setBackground(new java.awt.Color(255, 51, 51));
                jLabel9.setText("Total Patient Count");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                jPanel14.add(jLabel9, gridBagConstraints);

                patientCountTxt.setEditable(false);
                patientCountTxt.setText("0");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel14.add(patientCountTxt, gridBagConstraints);

                jLabel12.setBackground(new java.awt.Color(255, 51, 51));
                jLabel12.setText("Items Dispensed");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                jPanel14.add(jLabel12, gridBagConstraints);

                totalItemDispensedtxt.setEditable(false);
                totalItemDispensedtxt.setText("0");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel14.add(totalItemDispensedtxt, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.gridwidth = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                jPanel14.add(jSeparator1, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.gridwidth = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 150.0;
                jPanel2.add(jPanel14, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                jPanel2.add(endworkloadDate, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                jPanel2.add(startworkloadDate, gridBagConstraints);

                searchPharmacisttxt.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
                searchPharmacisttxt.addCaretListener(new javax.swing.event.CaretListener() {
                    public void caretUpdate(javax.swing.event.CaretEvent evt) {
                        searchPharmacisttxtCaretUpdate(evt);
                    }
                });
                searchPharmacisttxt.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        searchPharmacisttxtMouseClicked(evt);
                    }
                });
                searchPharmacisttxt.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        searchPharmacisttxtActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                jPanel2.add(searchPharmacisttxt, gridBagConstraints);

                jTabbedPane1.addTab("Pharmacist's Workload (Pharmacy sales)", jPanel2);

                jPanel10.setLayout(new java.awt.GridBagLayout());

                jTabbedPane2.setBackground(new java.awt.Color(255, 51, 0));
                jTabbedPane2.setTabPlacement(javax.swing.JTabbedPane.BOTTOM);

                jPanel11.setLayout(new java.awt.GridBagLayout());

                availableDrugsQtysTbl.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {

                    },
                    new String [] {

                    }
                ));
                availableDrugsQtysTbl.setSelectionBackground(new java.awt.Color(255, 255, 255));
                availableDrugsQtysTbl.setSelectionForeground(new java.awt.Color(255, 51, 51));
                jScrollPane4.setViewportView(availableDrugsQtysTbl);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 200.0;
                jPanel11.add(jScrollPane4, gridBagConstraints);

                drugsCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select  product||' '||strength from st_stock_prices WHERE upper(department) ilike '"+storeCmbx.getSelectedItem()+"' order by 1"));
                drugsCmbx.setBorder(javax.swing.BorderFactory.createTitledBorder("Select item to display available quantities in various stores"));
                drugsCmbx.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        drugsCmbxActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel11.add(drugsCmbx, gridBagConstraints);

                jTabbedPane2.addTab("Available Quantities", jPanel11);

                jPanel12.setLayout(new java.awt.GridBagLayout());

                requisitionsformTBl.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {

                    },
                    new String [] {

                    }
                ));
                jScrollPane5.setViewportView(requisitionsformTBl);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel12.add(jScrollPane5, gridBagConstraints);

                requisitionNoTxt.setText("Search Requisition...");
                requisitionNoTxt.addCaretListener(new javax.swing.event.CaretListener() {
                    public void caretUpdate(javax.swing.event.CaretEvent evt) {
                        requisitionNoTxtCaretUpdate(evt);
                    }
                });
                requisitionNoTxt.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        requisitionNoTxtMouseClicked(evt);
                    }
                });
                requisitionNoTxt.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        requisitionNoTxtActionPerformed(evt);
                    }
                });
                requisitionNoTxt.addFocusListener(new java.awt.event.FocusAdapter() {
                    public void focusGained(java.awt.event.FocusEvent evt) {
                        requisitionNoTxtFocusGained(evt);
                    }
                    public void focusLost(java.awt.event.FocusEvent evt) {
                        requisitionNoTxtFocusLost(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 2.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 50, 0, 800);
                jPanel12.add(requisitionNoTxt, gridBagConstraints);

                jTabbedPane2.addTab("S11 Analysis", jPanel12);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel10.add(jTabbedPane2, gridBagConstraints);

                jTabbedPane1.addTab("Available Quantities", jPanel10);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                getContentPane().add(jTabbedPane1, gridBagConstraints);
                jTabbedPane1.getAccessibleContext().setAccessibleName("Dispense Window");

                setBounds(0, 0, 1320, 829);
            }// </editor-fold>//GEN-END:initComponents

    private void storeCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storeCmbxActionPerformed
        try {
            java.sql.Statement ps11 = connectDB.createStatement();
            java.sql.ResultSet rst11 = ps11.executeQuery("select code from pb_activity WHERE activity ilike '" + storeCmbx.getSelectedItem() + "'");
            while (rst11.next()) {

                storeGLCodeTxt.setText(rst11.getString(1));
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
        }// TODO add your handling code here:
    }//GEN-LAST:event_storeCmbxActionPerformed

    private void itemSearchTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemSearchTableMouseEntered
// TODO add your handling code here:
    }//GEN-LAST:event_itemSearchTableMouseEntered

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        com.afrisoftech.hospinventory.PatientsDispenseBillingIntfr.jTextField16.setText("");
        com.afrisoftech.hospinventory.PatientsDispenseBillingIntfr.jTextField21.setText("");
        com.afrisoftech.hospinventory.PatientsDispenseBillingIntfr.jTextField19.setText("");
        com.afrisoftech.hospinventory.PatientsDispenseBillingIntfr.jTextField20.setText("");

        java.io.File xmlDocFile = null;

        xmlDocFile = new java.io.File(System.getProperty("docsdir"), "ForwardedCardData.xml");

        biz.systempartners.claims.XMLClaimFile claimFile = new biz.systempartners.claims.XMLClaimFile();

        claimFile.processFile(xmlDocFile);

        xmlDocFile = new java.io.File(System.getProperty("docsdir"), "ForwardedCardData.xml");

        javax.swing.JOptionPane.showMessageDialog(this, "Smart Card read successfully with identity:\nCard Number :[" + claimFile.cardNumber + "] and Name : [" + claimFile.patientSurName + " " + claimFile.patientForenames + "]");

        com.afrisoftech.hospinventory.PatientsDispenseBillingIntfr.jTextField16.setText(claimFile.medicalAidCode);
        com.afrisoftech.hospinventory.PatientsDispenseBillingIntfr.jTextField19.setText(claimFile.medicalAidNumber);
        com.afrisoftech.hospinventory.PatientsDispenseBillingIntfr.jTextField20.setText(claimFile.patientSurName + " " + claimFile.patientForenames);
        com.afrisoftech.hospinventory.PatientsDispenseBillingIntfr.jTextField21.setText(claimFile.cardBalance);
        if (jTextField16.getText().equalsIgnoreCase("")) {
            jTextField19.setText("");
        } else {
            try {

                java.sql.Statement st1 = connectDB.createStatement();
                java.sql.ResultSet rsetTable1 = st1.executeQuery("select account_no,scheme_name,payer_name FROM ac_schemes WHERE sch_abbrev ILIKE '" + claimFile.medicalAidCode + "'");
                while (rsetTable1.next()) {

                    jTextField14.setText(rsetTable1.getString(2));
                    jTextField17.setText(rsetTable1.getString(1));
                    jTextField18.setText(rsetTable1.getString(3));
                }
                jButton121.setEnabled(true);
                jButton12.setEnabled(true);
                jButton122.setEnabled(false);
                jButton7.setEnabled(false);
                //javax.swing.JOptionPane.showMessageDialog(this,"You must retrieve from smart link","Information Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);

            } catch (java.sql.SQLException sqlExec) {

                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

            }
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jTextField18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField18ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jTextField18ActionPerformed

    private void jTextField17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField17ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jTextField17ActionPerformed

    private void dispose11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispose11ActionPerformed
        jSearchDialog13.dispose(); // Add your handling code here:
    }//GEN-LAST:event_dispose11ActionPerformed

    private void jSearchTable13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable13MouseClicked
        jTextField14.setText(jSearchTable13.getValueAt(jSearchTable13.getSelectedRow(), 1).toString());
        jTextField18.setText(jSearchTable13.getValueAt(jSearchTable13.getSelectedRow(), 2).toString());
        jTextField17.setText(jSearchTable13.getValueAt(jSearchTable13.getSelectedRow(), 0).toString());

        jSearchDialog13.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable13MouseClicked

    private void jTextField1113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1113CaretUpdate
        if (jTextField1113.getCaretPosition() < 3) {

            System.out.println("Nothing");
        } else {

            jSearchTable13.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT account_no,scheme_name,payer_name from ac_schemes where scheme_name ILIKE '" + jTextField1113.getText() + "%' order by scheme_name"));

            jSearchTable13.setShowHorizontalLines(false);
            jSearchScrollPane13.setViewportView(jSearchTable13);

        }         // Add your handling code here:
    }//GEN-LAST:event_jTextField1113CaretUpdate

    private void searchButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton3ActionPerformed
        searchButton11aClicked();         // Add your handling code here:
    }//GEN-LAST:event_searchButton3ActionPerformed
    private void searchButton11aClicked() {

        System.out.println("Showing dialog");

        jSearchDialog13.dispose();

        java.awt.Point point = this.jTextField14.getLocationOnScreen();

        jSearchDialog13.setSize(400, 200);

        jSearchDialog13.setLocation(point);

        jSearchDialog13.show();
    }
    private void jTextField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyReleased
        if (jTextField2.getText().equalsIgnoreCase("")) {
            jTextField2.setText("0.00");
            jTextField1.setText("0.00");

        } else {
            double discAllowed = 0.00;
            double discount = java.lang.Float.parseFloat(jTextField2.getText());
            double total = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(dispensingTable, 5);
            discAllowed = java.lang.Math.round(total * (discount / 100));
            jTextField1.setText("" + discAllowed + "");
            jTextField1KeyReleased(evt);
        }
// TODO add your handling code here:
    }//GEN-LAST:event_jTextField2KeyReleased

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        if (jTextField1.getText().equalsIgnoreCase("")) {
        } else {
            double discAllowed = 0;
            double discount = java.lang.Float.parseFloat(jTextField1.getText());
            double total = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(dispensingTable, 5);

            // float total = java.lang.Float.parseFloat(jTextField10.getText());
            try {

                java.sql.Statement pstmt1 = connectDB.createStatement();
                java.sql.ResultSet rs1 = pstmt1.executeQuery("select disc_allowed from st_stock_control"); //from orders where supplier ='"+jTable1.getValueAt(i,4).toString()+"'");

                while (rs1.next()) {

                    discAllowed = rs1.getFloat(1);
                }

            } catch (java.sql.SQLException sq) {
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

                System.out.println(sq.getMessage());

            }
            if (discount > total * (discAllowed / 100)) {
                javax.swing.JOptionPane.showMessageDialog(this, "The discount you are giving is higher than the authorised one. \n Should be not more than [ " + total * (discAllowed / 100) + " ]", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                jTextField15.setText("0.00");
                jTextField1.setText("0.00");
            } else {
                if (discount <= total * (discAllowed / 100)) {
                    double num_d = total - discount;
                    jTextField15.setText("" + num_d + "");

                    if (num_d < 0) {
                        jTextField15.setForeground(java.awt.Color.red);
                    } else {
                        jTextField15.setForeground(java.awt.Color.blue);
                    }
                }
            }
        }
// TODO add your handling code here:
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox6ActionPerformed
        //this.jTextField4.setText(this.jCheckBox6.getText());        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox6ActionPerformed

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
        //  jTextField4.setText(this.jCheckBox5.getText());   // Add your handling code here:
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jButton122ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton122ActionPerformed
        double amount1 = 0.00;
        double percentage = 0.00;
        double TotalPrice = 0.00;
        double total = 0.00;
        double quantity = 0.00;
        double Total = 0.00;
        String billNo = null;
        transNo = null;
        String payMode = null;
        String patientAcc = null;
        String cardNo = null;
        String AccDesc = null;
        String scheme = null;
        String cardName = null;
        String isurer = null;
        String expDate = null;
        String staffNo = null;
        String BillNo = null;
        String glAcc = null;
        // String BillNo = null;
        String code = null;
        String user = null;
        String prescNo = null;
        String glAcc2 = null;
        String chbox = null;
        int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "Do you really want to Save?", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

        if (exitOption == javax.swing.JOptionPane.YES_OPTION) {

            //     double presc = java.lang.Double.parseDouble(jTextField8.getText());
            if (outPatient.isSelected()) {
                chbox = "OP";
            } else {
                if (walkIn.isSelected()) {
                    chbox = "WI";
                } else {
                    if (inPatient.isSelected()) {
                        chbox = "IP";
                    }
                }
            }

            String receiptNo = null;
            int k = 1;
            try {
                connectDB.setAutoCommit(false);

                //wait(10000);
                while (k != 0) {

                    if (transNo != null) {
                        k = 0;
                    }

                }
                connectDB.setAutoCommit(false);

                java.sql.Statement psq = connectDB.createStatement();
                java.sql.ResultSet rstq = psq.executeQuery("select currval('prescription_no')");
                while (rstq.next()) {
                    rstq.getObject(1).toString();

                    prescNo = rstq.getObject(1).toString();
                }

                connectDB.commit();
                connectDB.setAutoCommit(true);

                com.afrisoftech.txtreports.PrescriptionTxt policy = new com.afrisoftech.txtreports.PrescriptionTxt(connectDB, patientNumberTxt.getText(), jTextField13.getText(), prescNo, jComboBox1.getSelectedItem().toString());

                //  BillInvoicePdf policy = new BillInvoicePdf();
                //  policy.BillInvoicePdf(connectDB,jTextField9.getText(), jTextField1.getText(),jTextField3.getText(),prescNo,jTextField5.getText(),jTable1,datePicker1.getDate());
                // }
                //  jComboBox2.setSelectedItem(null);
            } catch (java.sql.SQLException sq) {

                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    sql.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

        }        // Add your handling code here:
    }//GEN-LAST:event_jButton122ActionPerformed

    private void jButton121ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton121ActionPerformed
        double amount1 = 0.00;
        double percentage = 0.00;
        double TotalPrice = 0.00;
        double total = 0.00;
        double quantity = 0.00;
        double Total = 0.00;
        String billNo = null;
        transNo = null;
        String payMode = null;
        String patientAcc = null;
        String cardNo = null;
        String AccDesc = null;
        String scheme = null;
        String cardName = null;
        String isurer = null;
        String expDate = null;
        String staffNo = null;
        String BillNo = null;
        String glAcc = null;
        // String BillNo = null;
        String code = null;
        String user = null;
        String prescNo = null;
        String glAcc2 = null;
        String chbox = null;
        int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "Do you really want to Save?", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

        if (exitOption == javax.swing.JOptionPane.YES_OPTION) {

            //  double presc = java.lang.Double.parseDouble(jTextField8.getText());
            if (outPatient.isSelected()) {
                chbox = "OP";
            } else {
                if (walkIn.isSelected()) {
                    chbox = "WI";
                } else {
                    if (inPatient.isSelected()) {
                        chbox = "IP";
                    }
                }
            }

            jButton12ActionPerformed(evt);
            jButton122ActionPerformed(evt);
            /*
             * try {
             *
             * connectDB.setAutoCommit(false);
             *
             *
             * java.sql.Statement psq = connectDB.createStatement();
             * java.sql.ResultSet rstq = psq.executeQuery("select
             * currval('prescription_no')"); while (rstq.next()){
             * rstq.getObject(1).toString();
             *
             * prescNo = rstq.getObject(1).toString(); }
             *
             * connectDB.commit(); connectDB.setAutoCommit(true);
             *
             * com.afrisoftech.txtreports.PrescriptionTxt policy = new
             * com.afrisoftech.txtreports.PrescriptionTxt(connectDB,
             * jTextField92.getText(),jTextField13.getText(),prescNo,jComboBox1.getSelectedItem().toString());
             *
             *
             *
             * for (int k = 0; k < jTable13.getRowCount(); k++ ) { for (int r =
             * 0; r < jTable13.getColumnCount(); r++ ) {
             * jTable13.getModel().setValueAt(null,k,r); } }
             *
             *
             * // } // jComboBox2.setSelectedItem(null);
             * }catch(java.sql.SQLException sq){
             *
             * try { connectDB.rollback(); }catch (java.sql.SQLException sql){
             * sql.printStackTrace();
             * javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error
             * Message!",javax.swing.JOptionPane.ERROR_MESSAGE); }
             * System.out.println(sq.getMessage());
             * javax.swing.JOptionPane.showMessageDialog(this,sq.getMessage(),
             * "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
             *
             * }
             */

        }        // Add your handling code here:
    }//GEN-LAST:event_jButton121ActionPerformed

    private void searchButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton4ActionPerformed
        searchButtonClicked4();    // Add your handling code here:
    }//GEN-LAST:event_searchButton4ActionPerformed

    private void jSearchTable4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable4MouseClicked
        for (int k = 0; k < dispensingTable.getRowCount(); k++) {
            for (int r = 0; r < dispensingTable.getColumnCount(); r++) {
                dispensingTable.getModel().setValueAt(null, k, r);
            }
        }
        receiptNotxt.setText(jSearchTable4.getValueAt(jSearchTable4.getSelectedRow(), 0).toString());

        int j = 0;

        /*
         * java.lang.Object selectedGuaran = cmbox1.getSelectedItem(); int i =
         * jTable11.getSelectedRow(); if (i > -1){ if (selectedGuaran != null) {
         */
        int i = 0;
        try {
            java.sql.Statement pstmt = connectDB.createStatement();
            java.sql.ResultSet rs = pstmt.executeQuery("select dealer,patient_no,activity_code from ac_cash_collection where receipt_no = '" + receiptNotxt.getText() + "'");
            while (rs.next()) {
                patientNumberTxt.setText(rs.getObject(2).toString());
                jTextField13.setText(rs.getObject(1).toString());
                storeGLCodeTxt.setText(rs.getObject(3).toString());
            }

            java.sql.Statement pstmtx = connectDB.createStatement();
            java.sql.Statement pstmtx1 = connectDB.createStatement();
            java.sql.Statement pstmtxx = connectDB.createStatement();

            java.sql.ResultSet rsx = pstmtx.executeQuery("select description,quantity,ROUND(debit),ROUND(debit/quantity),activity_code from ac_cash_collection where receipt_no = '" + receiptNotxt.getText() + "' AND credit = 0");
            while (rsx.next()) {
                dispensingTable.getModel().setValueAt(rsx.getObject(1), i, 0);
                dispensingTable.getModel().setValueAt(rsx.getObject(2), i, 1);
                dispensingTable.getModel().setValueAt(rsx.getObject(3), i, 5);
                dispensingTable.getModel().setValueAt(rsx.getObject(4), i, 3);
                dispensingTable.getModel().setValueAt(rsx.getObject(5), i, 6);
                java.sql.ResultSet rsx1 = pstmtx1.executeQuery("select item_code,strength from hp_pharmacy where description = '" + rsx.getObject(1) + "' AND patient_no = '" + patientNumberTxt.getText() + "'");
                while (rsx1.next()) {
                    dispensingTable.getModel().setValueAt(rsx1.getObject(1), i, 7);
                    dispensingTable.getModel().setValueAt(rsx1.getObject(2), i, 8);
                    dispensingTable.getModel().setValueAt(procurementMethodCmbx.getSelectedItem().toString(), i, 9);
                    //       java.sql.ResultSet rsxx = pstmtxx.executeQuery("select sum(qty) from stock_balance_qty where item_code = '" + rsx1.getObject(1) + "' and department ilike '" + jComboBox3.getSelectedItem().toString() + "' AND dates <= '" + datePicker1.getDate() + "'");
                    java.sql.ResultSet rsxx = pstmtxx.executeQuery("select case when qty=0 or qty IS NULL then 0 ELSE qty END AS qty from st_balance_qty( '" + rsx1.getObject(1) + "',  '" + SQLDateFormat.getSQLDate(datePicker1.getDate()).toString() + "' , '" + storeCmbx.getSelectedItem().toString() + "') ");
                    //java.sql.ResultSet rs = pstmt.executeQuery("select sum(qty) from stock_balance_qty where description ilike '"+jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(),0)+"' and department ilike '"+jTextField42.getText()+"' AND dates <= '"+datePicker1.getDate()+"'");
                    //java.sql.ResultSet rs = pstmt.executeQuery("select sum(receiving-issuing) As qty from  st_sub_stores where item = '"+jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(),0)+"' and department like '"+jTextField42.getText()+"' AND dates <= '"+datePicker1.getDate()+"'");
                    while (rsxx.next()) {
                        Double Qty = 0.00;
                        Qty = rsxx.getDouble(1);
                        if (Qty > rsx.getDouble(2)) {
                            dispensingTable.setValueAt(Qty, i, 2);
                        } else {
                            javax.swing.JOptionPane.showMessageDialog(this, "You cannot issue more than available items in the store.");

                        }
                    }
                }
                i++;
            }
        } catch (java.sql.SQLException sqlex) {
            System.out.println(sqlex.getMessage());
        }

        receiptsearchDialog.dispose();  // Add your handling code here:
    }//GEN-LAST:event_jSearchTable4MouseClicked

    private void jTextField115CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField115CaretUpdate
        if (jTextField115.getCaretPosition() >= 6) {
            //jSearchTable4.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select chq_no FROM pb_documents_register WHERE chq_no ILIKE '%" + jTextField115.getText() + "%' and used = 'false' and doc_name ilike '%pha%' order by chq_no"));
            jSearchTable4.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "select DISTINCT receipt_no FROM ac_cash_collection WHERE receipt_no ILIKE '" + jTextField115.getText() + "%' AND receipt_time::date > (CURRENT_DATE-2)"));

            jSearchScrollPane4.setViewportView(jSearchTable4);
            System.out.println("Cannot sort out");

        }  // Add your handling code here:
    }//GEN-LAST:event_jTextField115CaretUpdate

    private void jButton93ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton93ActionPerformed
        this.receiptsearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton93ActionPerformed
    private void searchButtonClicked4() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.receiptNotxt.getLocationOnScreen();

        receiptsearchDialog.setSize(400, 200);

        receiptsearchDialog.setLocation(point);

        receiptsearchDialog.show();

    }
    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        javax.swing.JInternalFrame other = new ServiceAccSlipIntfr(connectDB, pConnDB);
        this.getParent().add(other, javax.swing.JLayeredPane.DEFAULT_LAYER);
        try {
            other.setSelected(true);
        } catch (java.beans.PropertyVetoException pvt) {
        }
        other.setVisible(true);            // Add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jButton32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton32ActionPerformed
        jTextField13.setText("");
        jTextField32.setText("0.00");
        jTextField2.setText("0.00");
        jTextField1.setText("0.00");
        jTextField10.setText("0.00");
        jTextField15.setText("0.00");
        jTextField82.setText("0.00");
        jTextField21.setText("0.00");
        jTextField22.setText("");
        patientNumberTxt.setText("");
        jTextField19.setText("");
        jTextField20.setText("");

        jTextField16.setText("");
        jTextField14.setText("");
        jTextField17.setText("");
        jTextField18.setText("");
        // jTextField32.setText("0.00");

        for (int k = 0; k < dispensingTable.getRowCount(); k++) {
            for (int r = 0; r < dispensingTable.getColumnCount(); r++) {
                dispensingTable.getModel().setValueAt(null, k, r);
            }
        }

        //  jTextField3.setText("0.00");// Add your handling code here:
    }//GEN-LAST:event_jButton32ActionPerformed

    private void jButton41ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton41ActionPerformed
        this.setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_jButton41ActionPerformed

    private void jButton63ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton63ActionPerformed

        int rows2Delete = dispensingTable.getSelectedRowCount();

        int[] selectedRows = dispensingTable.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) dispensingTable.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) dispensingTable.getModel();

                defTableModel.removeRow(dispensingTable.getSelectedRow());
            }
        }

        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(dispensingTable, 5);
        //double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable11, 3);
        double roundedsum = (int) Math.round(totalSum / 5.0) * 5;
        jTextField10.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(roundedsum));
        //    jTextField15.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
        jTextField15.setText(java.lang.String.valueOf(roundedsum));
        // Add your handling code here:
    }//GEN-LAST:event_jButton63ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        java.util.Date periodFrom = null;
        java.util.Date periodTo = null;
        java.util.Date toDaysDate = null;
        boolean smartcard = false;

        java.sql.Savepoint registerSavePoint = null;
        try {
            try {
                connectDB.setAutoCommit(false);
                registerSavePoint = connectDB.setSavepoint("registration");
            } catch (java.sql.SQLException ex) {
                ex.printStackTrace();
            }

            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + datePicker1.getDate() + "' BETWEEN period_from AND period_to");
            while (rsetf.next()) {
                periodFrom = rsetf.getDate(1);
                periodTo = rsetf.getDate(2);
            }

            if (datePicker1.getDate().before(periodFrom) || datePicker1.getDate().after(periodTo)) {
                javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            } else {

                // jTable13.setEditingRow(-1);
                if (dispensingTable.isEditing()) {
                    dispensingTable.getCellEditor().stopCellEditing();
                }
                // try {
                double amount1 = 0.00;
                double percentage = 0.00;
                double TotalPrice = 0.00;
                double total = 0.00;
                double presc = 0.00;
                double Total = 0.00;

                java.util.Calendar calendar = java.util.Calendar.getInstance();

                long dateNow = calendar.getTimeInMillis();

                java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

                System.out.println(datenowSql1.toString());

                java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

                System.out.println(datenowSql.toString());

                String billNo = null;
                transNo = null;
                String payMode = null;
                String patientAcc = null;
                String cardNo = null;
                String AccDesc = null;
                String scheme = null;
                String cardName = null;
                String isurer = null;
                java.sql.Date expDate = null;
                String staffNo = null;
                String BillNo = null;
                String glAcc = null;
                // String BillNo = null;
                String code = null;
                String user = null;
                String prescNo = null;
                java.util.Date admDate = null;
                String visitid = jTextField5.getText().toString();
                String costofSaleCode = null;
                String stockCode = null;
                String costofSale = null;
                String stock = null;
                String billingDept = null;
                String discode = null;
                String discglAcc = null;
                String invoiceNo = null;
                String strength = null;
                double discounte = java.lang.Double.parseDouble(jTextField1.getText());

                double sellPrice = 0.00;
                double buyingPrice = 0.00;
                int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "Do you really want to Save?", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

                if (exitOption == javax.swing.JOptionPane.YES_OPTION) {

                    // presc = java.lang.Double.parseDouble(jTextField8.getText());
                    if (outPatient.isSelected()) {
                        chbox = "OP";
                    } else {
                        if (walkIn.isSelected()) {
                            chbox = "WI";
                        } else {
                            if (inPatient.isSelected()) {
                                chbox = "IP";
                            }
                        }
                    }

                    //  try {
                    // connectDB.setAutoCommit(false);
                    if (outPatient.isSelected()) {
                        java.sql.Statement stmt1cz3 = connectDB.createStatement();
                        java.sql.ResultSet rset1cz3 = stmt1cz3.executeQuery("SELECT account_no,payer_name,usesmartcard FROM ac_schemes WHERE account_no  ILIKE '" + jTextField17.getText() + "'");
                        while (rset1cz3.next()) {
                            smartcard = rset1cz3.getBoolean(3);
                        }
                        if (smartcard) {
                            biz.systempartners.claims.PharmacyClaim claimInstance = new biz.systempartners.claims.PharmacyClaim();

                            claimInstance.createXMLDoc(dispensingTable, connectDB);
                        }
                    } else {
                        //this for inpatient;
                    }
                    java.sql.Statement stm121x = connectDB.createStatement();

                    java.sql.ResultSet rse121x = stm121x.executeQuery("select direct_rev from pb_patient_names");
                    while (rse121x.next()) {

                        DirectRev = rse121x.getBoolean(1);

                    }
                    java.sql.Statement ps11Y = connectDB.createStatement();
                    java.sql.ResultSet rst11Y = ps11Y.executeQuery("select current_user");
                    while (rst11Y.next()) {
                        user = rst11Y.getObject(1).toString();
                    }
                    java.sql.Statement stm122x = connectDB.createStatement();
                    java.sql.ResultSet rse122x = stm122x.executeQuery("select code,activity from pb_activity where activity_category ='IEDS'");
                    while (rse122x.next()) {

                        discode = rse122x.getObject(1).toString();
                        discglAcc = rse122x.getObject(2).toString();
                    }
                    java.sql.Statement psq = connectDB.createStatement();
                    java.sql.ResultSet rstq = psq.executeQuery("select nextval('prescription_no')");
                    while (rstq.next()) {
                        rstq.getObject(1).toString();

                        prescNo = rstq.getObject(1).toString();

                    }
                    System.out.println(prescNo);
                    java.sql.Statement stmtz = connectDB.createStatement();

                    if (inPatient.isSelected()) {
                        System.out.println("This is the visit ID " + visitid);
                        // if (jComboBox1.getSelectedItem().toString().equals("Scheme")){
                        java.sql.Statement stm1 = connectDB.createStatement();
                        java.sql.ResultSet rse1 = stm1.executeQuery("select pay_mode,account_no,description,payer,payer,expiry_date,account_no,adm_date from hp_inpatient_register where patient_no ='" + patientNumberTxt.getText() + "'");
                        while (rse1.next()) {

                            //                payMode = dbObject.getDBObject(rse1.getObject(1), "-");
                            cardNo = dbObject.getDBObject(rse1.getObject(2), "-");
                            scheme = dbObject.getDBObject(rse1.getObject(3), "-");
                            cardName = dbObject.getDBObject(rse1.getObject(4), "-");
                            isurer = dbObject.getDBObject(rse1.getObject(5), "-");
                            expDate = rse1.getDate(6);
                            staffNo = dbObject.getDBObject(rse1.getObject(7), "-");
                            admDate = rse1.getDate(8);
                        }

                        System.out.println(admDate);
                        // if (exp.before(date)){
                        if (this.datePicker1.getDate().before(admDate)) {
                            javax.swing.JOptionPane.showMessageDialog(this, "Admission date is : " + admDate + " CHECK billing date", "Date Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            java.sql.Statement stm126 = connectDB.createStatement();
                            java.sql.ResultSet rse126 = stm126.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                            while (rse126.next()) {

                                patientAcc = rse126.getObject(1).toString();
                                AccDesc = rse126.getObject(2).toString();
                            }
                            System.out.println(AccDesc);
                            java.sql.Statement ps = connectDB.createStatement();
                            java.sql.ResultSet rst = ps.executeQuery("select nextval('transaction_no_seq')");
                            while (rst.next()) {

                                transNo = rst.getObject(1).toString();
                            }
                            System.out.println(transNo);
                            java.sql.Statement ps11 = connectDB.createStatement();
                            java.sql.ResultSet rst11 = ps11.executeQuery("select nextval('billing_no_seq'),current_user");
                            while (rst11.next()) {
                                rst11.getObject(1).toString();

                                billNo = rst11.getObject(1).toString();
                                //    user = rst11.getObject(2).toString();
                            }
                            System.out.println(user);
                            java.sql.Statement stm122 = connectDB.createStatement();
                            java.sql.ResultSet rse122 = stm122.executeQuery("select code,activity from pb_activity where activity_category ='IP'");
                            while (rse122.next()) {

                                code = rse122.getObject(1).toString();
                                glAcc = rse122.getObject(2).toString();
                            }

                            for (int i = 0; i < dispensingTable.getRowCount(); i++) {
                                if (dispensingTable.getModel().getValueAt(i, 0) != null) {
                                    String drug = null;

                                    if (dispensingTable.getValueAt(i, 8).toString().equalsIgnoreCase("0") || dispensingTable.getValueAt(i, 8).toString().equalsIgnoreCase("-")) {
                                        drug = dispensingTable.getValueAt(i, 0).toString();
                                    } else {
                                        drug = dispensingTable.getValueAt(i, 0).toString();// + " " + jTable13.getValueAt(i, 8).toString();
                                    }
                                    java.sql.Statement pstz = connectDB.createStatement();
                                    java.sql.ResultSet rsz = pstz.executeQuery("SELECT strength FROM st_stock_item WHERE item_code = '" + dispensingTable.getValueAt(i, 7).toString() + "'");
                                    while (rsz.next()) {
                                        strength = rsz.getString(1);
                                    }

                                    java.sql.Statement pst21c = connectDB.createStatement();
                                    java.sql.ResultSet rs11c = pst21c.executeQuery("select cost_of_sale,stock_code from pb_departments where income_account = '" + dispensingTable.getValueAt(i, 6).toString() + "'");
                                    while (rs11c.next()) {
                                        costofSaleCode = rs11c.getObject(1).toString();
                                        stockCode = rs11c.getObject(2).toString();
                                    }

                                    java.sql.Statement pst21c1 = connectDB.createStatement();
                                    java.sql.ResultSet rs11c1 = pst21c1.executeQuery("SELECT activity FROM pb_activity WHERE code = '" + dispensingTable.getValueAt(i, 6).toString() + "'");
                                    while (rs11c1.next()) {
                                        billingDept = rs11c1.getObject(1).toString();

                                    }
                                    java.sql.Statement pst211c = connectDB.createStatement();
                                    java.sql.ResultSet rs111c = pst211c.executeQuery("select activity from pb_activity where code = '" + costofSaleCode + "'");
                                    while (rs111c.next()) {
                                        costofSale = rs111c.getObject(1).toString();

                                    }
                                    java.sql.Statement pst2111c = connectDB.createStatement();
                                    java.sql.ResultSet rs1111c = pst2111c.executeQuery("select activity from pb_activity where code = '" + stockCode + "'");
                                    while (rs1111c.next()) {
                                        stock = rs1111c.getObject(1).toString();
                                    }

                                    presc = java.lang.Double.parseDouble(jTextField82.getText());

                                    Total = java.lang.Double.parseDouble(jTextField32.getText());
                                    if (Total > presc) {
                                        amount1 = java.lang.Double.parseDouble(dispensingTable.getValueAt(i, 5).toString());

                                        percentage = (amount1 / Total) * 100;

                                        TotalPrice = ((percentage / 100) * presc) + amount1;
                                    } else {
                                        amount1 = java.lang.Double.parseDouble(dispensingTable.getValueAt(i, 5).toString());

                                        //  percentage = (amount1/Total)*100;
                                        TotalPrice = amount1;
                                    }

                                    java.sql.Statement pstB = connectDB.createStatement();
                                    java.sql.ResultSet rsB = pstB.executeQuery("select ((buying_price/packaging)*(SELECT mark_up FROM st_stores WHERE upper(store_name) = upper('" + storeCmbx.getSelectedItem().toString().toUpperCase() + "')))::numeric(15,0) as selling_price, units,(buying_price/packaging)::numeric(15,1) from st_stock_item where item_code = '" + dispensingTable.getModel().getValueAt(i, 7) + "'");

                                    while (rsB.next()) {
                                        price = rsB.getDouble(1);
                                        glAcc2 = rsB.getString(2);
                                        // units = rsB.getString(2);
                                        qty = java.lang.Double.parseDouble(dispensingTable.getValueAt(i, 1).toString());
                                        sellPrice = java.lang.Double.parseDouble(dispensingTable.getValueAt(i, 3).toString());
                                        amount = price * qty;

                                    }

                                    System.out.println(price);
                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                    pstmt.setString(1, patientNumberTxt.getText());
                                    pstmt.setObject(2, drug);
                                    pstmt.setString(3, jTextField22.getText());
                                    pstmt.setString(4, jComboBox1.getSelectedItem().toString());
                                    pstmt.setString(5, transNo);
                                    pstmt.setString(7, scheme);
                                    pstmt.setString(6, cardNo);
                                    pstmt.setString(8, cardName);
                                    pstmt.setString(9, isurer);
                                    pstmt.setDate(10, expDate);
                                    pstmt.setObject(11, jComboBox2.getSelectedItem().toString());
                                    // pstmt.setObject(12,jTable13.getValueAt(i,5).toString());
                                    pstmt.setDouble(12, TotalPrice);
                                    pstmt.setDouble(13, 0.00);
                                    pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt.setObject(15, patientAcc);
                                    pstmt.setObject(16, billingDept);
                                    pstmt.setDouble(17, qty);
                                    pstmt.setObject(18, staffNo);
                                    pstmt.setBoolean(19, false);
                                    pstmt.setString(20, "Billing");
                                    pstmt.setBoolean(21, false);
                                    pstmt.setString(22, AccDesc);
                                    pstmt.setString(23, visitid);
                                    pstmt.setString(24, user);
                                    pstmt.setString(25, prescNo);
                                    pstmt.setString(26, "IP");
                                    pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                    pstmt.setString(28, visitid);
                                    pstmt.executeUpdate();

                                    java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
                                    pstmt2.setObject(1, dispensingTable.getModel().getValueAt(i, 6));
                                    pstmt2.setString(2, glAcc);
                                    pstmt2.setString(3, patientNumberTxt.getText());
                                    pstmt2.setString(4, jTextField13.getText());
                                    pstmt2.setString(5, "");
                                    pstmt2.setString(6, cardNo);
                                    pstmt2.setString(7, cardName);
                                    pstmt2.setString(8, "IP");
                                    pstmt2.setString(9, isurer);
                                    pstmt2.setString(10, jComboBox1.getSelectedItem().toString());
                                    pstmt2.setString(11, "");
                                    pstmt2.setString(12, "");
                                    pstmt2.setString(13, "");
                                    pstmt2.setString(14, drug);
                                    pstmt2.setString(15, "Revenue");
                                    pstmt2.setDouble(16, 0.00);
                                    pstmt2.setDouble(17, TotalPrice);
                                    pstmt2.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt2.setString(19, transNo);
                                    pstmt2.setBoolean(20, false);
                                    pstmt2.setBoolean(21, false);
                                    pstmt2.setBoolean(22, false);
                                    pstmt2.setString(23, user);
                                    pstmt2.executeUpdate();

                                    java.sql.PreparedStatement pstmt1a = connectDB.prepareStatement("INSERT INTO st_stock_cardex values(?,? "
                                            + ", ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,"
                                            + "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                    pstmt1a.setString(1, null);
                                    pstmt1a.setObject(3, drug);
                                    pstmt1a.setObject(2, storeCmbx.getSelectedItem().toString());
                                    pstmt1a.setDate(4, null);
                                    pstmt1a.setDouble(5, amount);
                                    pstmt1a.setDouble(6, 0.00);
                                    pstmt1a.setObject(7, glAcc2);
                                    pstmt1a.setObject(8, "");
                                    pstmt1a.setString(9, null);
                                    pstmt1a.setString(10, null);
                                    pstmt1a.setDouble(11, 0.00);
                                    pstmt1a.setDouble(12, 0.00);
                                    pstmt1a.setDouble(13, 0.00);
                                    if (jTextField13.getText().equals("")) {
                                        javax.swing.JOptionPane.showMessageDialog(this, "Enter patient", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                    } else {
                                        pstmt1a.setString(14, jTextField13.getText());
                                    }

                                    pstmt1a.setString(15, userName);

                                    pstmt1a.setString(16, "");
                                    pstmt1a.setString(17, null);
                                    pstmt1a.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt1a.setObject(19, storeCmbx.getSelectedItem().toString());
                                    pstmt1a.setString(20, "Issuing");
                                    pstmt1a.setDouble(21, 0.00);
                                    pstmt1a.setString(23, stockCode);
                                    pstmt1a.setDouble(22, 0.00);
                                    pstmt1a.setString(24, "");
                                    pstmt1a.setObject(25, storeCmbx.getSelectedItem().toString());
                                    pstmt1a.setString(26, transNo);
                                    pstmt1a.setDouble(27, java.lang.Double.valueOf(dispensingTable.getValueAt(i, 1).toString()));
                                    pstmt1a.setString(28, user);
                                    pstmt1a.setBoolean(29, false);
                                    pstmt1a.setDouble(30, 0.00);
                                    pstmt1a.setDate(31, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt1a.setString(32, dispensingTable.getValueAt(i, 7).toString());
                                    pstmt1a.setString(33, dispensingTable.getValueAt(i, 8).toString());
                                    pstmt1a.setObject(34, null);
                                    pstmt1a.setObject(35, null);
                                    pstmt1a.setObject(36, null);
                                    pstmt1a.setObject(37, null);
                                    pstmt1a.setObject(38, null);
                                    pstmt1a.setObject(39, null);
                                    pstmt1a.setObject(40, null);
                                    pstmt1a.setObject(41, null);
                                    pstmt1a.setObject(42, null);
                                    pstmt1a.setObject(43, null);
                                    pstmt1a.setObject(44, null);
                                    pstmt1a.setObject(45, null);
                                    pstmt1a.setObject(46, null);
                                    pstmt1a.setObject(47, null);
                                    pstmt1a.setObject(48, null);
                                    pstmt1a.setObject(49, null);
                                    pstmt1a.setObject(50, null);
                                    pstmt1a.setString(51, dispensingTable.getValueAt(i, 9).toString());

                                    pstmt1a.executeUpdate();

                                    java.sql.PreparedStatement pstmt2a = connectDB.prepareStatement("INSERT INTO ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                    pstmt2a.setObject(1, costofSaleCode);
                                    pstmt2a.setObject(2, costofSale);
                                    pstmt2a.setString(3, patientNumberTxt.getText());
                                    pstmt2a.setString(4, jTextField13.getText());
                                    pstmt2a.setString(5, "");
                                    pstmt2a.setString(6, "");
                                    pstmt2a.setString(7, "");
                                    pstmt2a.setString(8, "");
                                    pstmt2a.setString(9, "");
                                    pstmt2a.setString(10, "");
                                    pstmt2a.setString(11, "");
                                    pstmt2a.setString(12, "");
                                    pstmt2a.setString(13, "");
                                    pstmt2a.setString(14, drug);
                                    pstmt2a.setString(15, "Issuing");
                                    pstmt2a.setDouble(16, amount);
                                    pstmt2a.setDouble(17, 0.00);
                                    pstmt2a.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt2a.setString(19, transNo);
                                    pstmt2a.setBoolean(20, false);
                                    pstmt2a.setBoolean(21, false);
                                    pstmt2a.setBoolean(22, false);
                                    pstmt2a.setString(23, user);
                                    pstmt2a.executeUpdate();

                                    java.sql.PreparedStatement pstmt33 = connectDB.prepareStatement("INSERT INTO st_sub_stores VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                    pstmt33.setObject(1, storeCmbx.getSelectedItem().toString());
                                    pstmt33.setObject(2, dispensingTable.getValueAt(i, 0).toString());
                                    pstmt33.setDouble(4, java.lang.Double.valueOf(dispensingTable.getValueAt(i, 1).toString()));
                                    pstmt33.setDouble(3, 0);
                                    pstmt33.setDouble(7, 0);
                                    pstmt33.setDouble(5, java.lang.Double.valueOf(dispensingTable.getValueAt(i, 3).toString()));
                                    pstmt33.setDouble(6, TotalPrice);
                                    pstmt33.setObject(10, com.afrisoftech.lib.ServerTime.getSQLTimeStamp(connectDB)); //com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt33.setString(8, transNo);
                                    pstmt33.setObject(9, jComboBox2.getSelectedItem().toString());
                                    pstmt33.setObject(13, billingDept);
                                    pstmt33.setString(11, user);
                                    pstmt33.setString(12, units);
                                    pstmt33.setString(14, patientNumberTxt.getText() + " " + jTextField13.getText());
                                    pstmt33.setDouble(15, amount / java.lang.Double.valueOf(dispensingTable.getValueAt(i, 1).toString()));
                                    pstmt33.setObject(16, dispensingTable.getValueAt(i, 7).toString());
                                    pstmt33.setString(17, strength);
                                    pstmt33.setObject(18, null);
                                    pstmt33.setObject(19, null);
                                    pstmt33.setObject(20, null);
                                    pstmt33.setString(21, dispensingTable.getValueAt(i, 9).toString());

                                    pstmt33.executeUpdate();

                                    java.sql.PreparedStatement pstmt311 = connectDB.prepareStatement("UPDATE hp_pharmacy SET collected = true WHERE item_code = '" + dispensingTable.getModel().getValueAt(i, 7).toString() + "' AND patient_no = '" + patientNumberTxt.getText() + "' AND gl_code = '" + dispensingTable.getModel().getValueAt(i, 6).toString() + "'");
                                    pstmt311.executeUpdate();

                                    if (receiptNotxt.getText().length() > 0) {
                                        pstmt311 = connectDB.prepareStatement("UPDATE hp_pharmacy SET collected = true WHERE item_code = '" + dispensingTable.getModel().getValueAt(i, 7).toString() + "' AND patient_no = '" + patientNumberTxt.getText() + "' AND gl_code = '" + dispensingTable.getModel().getValueAt(i, 6).toString() + "'");
                                        pstmt311.executeUpdate();
                                    }

                                }
                            }

                            if (discounte > 0) {
                                java.sql.PreparedStatement pstmtu = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                pstmtu.setString(1, patientNumberTxt.getText());
                                pstmtu.setObject(2, "Discount");
                                pstmtu.setString(3, jTextField22.getText());
                                pstmtu.setString(4, jComboBox1.getSelectedItem().toString());
                                pstmtu.setString(5, transNo);
                                pstmtu.setString(7, scheme);
                                pstmtu.setString(6, cardNo);
                                pstmtu.setString(8, cardName);
                                pstmtu.setString(9, isurer);
                                pstmtu.setDate(10, expDate);
                                pstmtu.setObject(11, jComboBox2.getSelectedItem().toString());
                                // pstmt.setObject(12,jTable13.getValueAt(i,5).toString());
                                pstmtu.setDouble(13, java.lang.Double.valueOf(jTextField1.getText()));
                                pstmtu.setDouble(12, 0.00);
                                pstmtu.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                pstmtu.setObject(15, patientAcc);
                                pstmtu.setObject(16, storeCmbx.getSelectedItem().toString());
                                pstmtu.setDouble(17, 1);
                                pstmtu.setObject(18, staffNo);
                                pstmtu.setBoolean(19, false);
                                pstmtu.setString(20, "Billing");
                                pstmtu.setBoolean(21, false);
                                pstmtu.setString(22, AccDesc);
                                pstmtu.setString(23, visitid);
                                pstmtu.setString(24, user);
                                pstmtu.setString(25, prescNo);
                                pstmtu.setString(26, "IP");
                                pstmtu.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                pstmtu.setString(28, visitid);
                                pstmtu.executeUpdate();

                                java.sql.PreparedStatement pstmt2v = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
                                pstmt2v.setString(1, discode);
                                pstmt2v.setString(2, discglAcc);
                                pstmt2v.setString(3, patientNumberTxt.getText());
                                pstmt2v.setString(4, jTextField13.getText());
                                pstmt2v.setString(5, "");
                                pstmt2v.setString(6, cardNo);
                                pstmt2v.setString(7, cardName);
                                pstmt2v.setString(8, "IP");
                                pstmt2v.setString(9, isurer);
                                pstmt2v.setString(10, jComboBox1.getSelectedItem().toString());
                                pstmt2v.setString(11, "");
                                pstmt2v.setString(12, "");
                                pstmt2v.setString(13, "");
                                pstmt2v.setString(14, "Discount");
                                pstmt2v.setString(15, "Revenue");
                                pstmt2v.setDouble(16, java.lang.Double.valueOf(jTextField1.getText().toString()));
                                pstmt2v.setDouble(17, 0.00);
                                // pstmt2.setObject(17,jTable13.getValueAt(i,5).toString());
                                pstmt2v.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                pstmt2v.setString(19, transNo);
                                pstmt2v.setBoolean(20, false);
                                pstmt2v.setBoolean(21, false);
                                pstmt2v.setBoolean(22, false);
                                pstmt2v.setString(23, user);
                                pstmt2v.executeUpdate();

                            }

                        }
                    } else {

                        // Dispensing for out-patients
                        if (this.outPatient.isSelected()) {

                            if (jComboBox1.getSelectedItem().toString().equals("Scheme")) { // Capturing parameters for medical insurance credit sales
                                java.sql.Statement stm1q = connectDB.createStatement();
                                java.sql.ResultSet rse1 = stm1q.executeQuery("select pay_mode,account_no,description,payer,payer,expiry_date,account_no from hp_patient_register where patient_no ='" + patientNumberTxt.getText() + "'");

                                while (rse1.next()) {

                                    payMode = dbObject.getDBObject(rse1.getObject(1), "-");
                                    cardNo = dbObject.getDBObject(rse1.getObject(2), "-");
                                    scheme = dbObject.getDBObject(rse1.getObject(3), "-");
                                    cardName = dbObject.getDBObject(rse1.getObject(4), "-");
                                    isurer = dbObject.getDBObject(rse1.getObject(5), "-");
                                    expDate = rse1.getDate(6);
                                    staffNo = dbObject.getDBObject(rse1.getObject(7), "-");
                                }
                            }
                        } else {
                        }
                        System.out.println(staffNo);

                        java.sql.Statement stm126 = connectDB.createStatement();
                        java.sql.ResultSet rse126 = stm126.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                        while (rse126.next()) {

                            patientAcc = rse126.getObject(1).toString();
                            AccDesc = rse126.getObject(2).toString();
                        }
                        System.out.println(AccDesc);
                        //  connectDB.setAutoCommit(false);
                        java.sql.Statement ps = connectDB.createStatement();
                        java.sql.ResultSet rst = ps.executeQuery("select nextval('transaction_no_seq')");
                        while (rst.next()) {
                            rst.getObject(1).toString();

                            transNo = rst.getObject(1).toString();
                        }
                        /*
                         * if (this.jCheckBox2.isSelected()) {
                         * jTextField92.setText("WK" + prescNo); }
                         */
                        if (this.jComboBox1.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {
                            if (walkIn.isSelected()) {
                                java.sql.Statement pss1 = connectDB.createStatement();
                                java.sql.ResultSet rss1 = pss1.executeQuery("select 'O'||(nextval('pinvoice_no_seq'))");
                                while (rss1.next()) {
                                    invoiceNo = rss1.getObject(1).toString();
                                }
                            }

                        }
                        System.out.println(transNo);

                        System.out.println(user);
                        java.sql.Statement stm122 = connectDB.createStatement();
                        java.sql.ResultSet rse122 = stm122.executeQuery("select code,activity from pb_activity where activity_category ='IP'");
                        while (rse122.next()) {

                            code = rse122.getObject(1).toString();
                            glAcc = rse122.getObject(2).toString();
                        }
                        System.out.println(glAcc);

                        for (int i = 0; i < dispensingTable.getRowCount(); i++) {
                            if (dispensingTable.getModel().getValueAt(i, 0) != null) {
                                String drug = null;

                                if (dispensingTable.getValueAt(i, 8).toString().equalsIgnoreCase("0") || dispensingTable.getValueAt(i, 8).toString().equalsIgnoreCase("-")) {
                                    drug = dispensingTable.getValueAt(i, 0).toString();
                                } else {
                                    drug = dispensingTable.getValueAt(i, 0).toString();// + " " + jTable13.getValueAt(i, 8).toString();
                                }
                                java.sql.Statement pstz = connectDB.createStatement();
                                java.sql.ResultSet rsz = pstz.executeQuery("SELECT strength FROM st_stock_item WHERE item_code = '" + dispensingTable.getValueAt(i, 7).toString() + "'");
                                while (rsz.next()) {
                                    strength = rsz.getString(1);
                                }
                                java.sql.Statement pst21c = connectDB.createStatement();
                                java.sql.ResultSet rs11c = pst21c.executeQuery("select cost_of_sale,stock_code from pb_departments where income_account = '" + dispensingTable.getValueAt(i, 6).toString() + "'");
                                while (rs11c.next()) {
                                    costofSaleCode = rs11c.getObject(1).toString();
                                    stockCode = rs11c.getObject(2).toString();
                                }
                                java.sql.Statement pst211c = connectDB.createStatement();
                                java.sql.ResultSet rs111c = pst211c.executeQuery("select activity from pb_activity where code = '" + costofSaleCode + "'");
                                while (rs111c.next()) {
                                    costofSale = rs111c.getObject(1).toString();

                                }
                                java.sql.Statement pst2111c = connectDB.createStatement();
                                java.sql.ResultSet rs1111c = pst2111c.executeQuery("select activity from pb_activity where code = '" + stockCode + "'");
                                while (rs1111c.next()) {
                                    stock = rs1111c.getObject(1).toString();
                                }
                                presc = java.lang.Double.parseDouble(jTextField82.getText());

                                Total = java.lang.Double.parseDouble(jTextField32.getText());
                                if (Total > presc) {
                                    amount1 = java.lang.Double.parseDouble(dispensingTable.getValueAt(i, 5).toString());

                                    percentage = (amount1 / Total) * 100;

                                    TotalPrice = ((percentage / 100) * presc) + amount1;
                                } else {
                                    amount1 = java.lang.Double.parseDouble(dispensingTable.getValueAt(i, 5).toString());

                                    //  percentage = (amount1/Total)*100;
                                    TotalPrice = amount1;
                                }
                                java.sql.Statement stm121 = connectDB.createStatement();
                                java.sql.ResultSet rse121 = stm121.executeQuery("select units from st_stock_item where description ='" + dispensingTable.getModel().getValueAt(i, 0).toString() + "'");
                                while (rse121.next()) {

                                    glAcc2 = rse121.getObject(1).toString();
                                    System.out.println(glAcc2);
                                }
                                java.sql.Statement pstB = connectDB.createStatement();
                                java.sql.ResultSet rsB = pstB.executeQuery("select ((buying_price/packaging)*(SELECT mark_up FROM st_stores WHERE upper(store_name) = upper('" + storeCmbx.getSelectedItem().toString().toUpperCase() + "')))::numeric(15,0) as selling_price,units from st_stock_item where item_code = '" + dispensingTable.getModel().getValueAt(i, 7) + "'");

                                while (rsB.next()) {
                                    price = rsB.getDouble(1);
                                    // units = rsB.getString(2);
                                    qty = java.lang.Double.parseDouble(dispensingTable.getValueAt(i, 1).toString());
                                    sellPrice = java.lang.Double.parseDouble(dispensingTable.getValueAt(i, 3).toString());
                                    amount = price * qty;
                                }

                                System.out.println(price);

                                java.sql.Statement pst2111cx = connectDB.createStatement();
                                java.sql.ResultSet rs1111cx = pst2111cx.executeQuery("select activity from pb_activity where code = '" + stockCode + "'");
                                while (rs1111cx.next()) {
                                    stock = rs1111cx.getObject(1).toString();
                                }
                                java.sql.PreparedStatement pstmt1a = connectDB.prepareStatement("INSERT INTO st_stock_cardex values(?,? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "
                                        + "?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

                                pstmt1a.setString(1, null);
                                pstmt1a.setObject(3, drug);
                                pstmt1a.setObject(2, storeCmbx.getSelectedItem().toString());
                                pstmt1a.setDate(4, null);
                                pstmt1a.setDouble(5, amount);
                                pstmt1a.setDouble(6, 0.00);
                                pstmt1a.setObject(7, glAcc2);
                                pstmt1a.setObject(8, "");
                                pstmt1a.setString(9, null);
                                pstmt1a.setString(10, null);
                                pstmt1a.setDouble(11, 00);
                                pstmt1a.setDouble(12, 00);
                                pstmt1a.setDouble(13, 00);
                                if (jTextField13.getText().equals("")) {
                                    javax.swing.JOptionPane.showMessageDialog(this, "Enter patient", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                } else {
                                    pstmt1a.setString(14, jTextField13.getText());
                                }

                                pstmt1a.setString(15, userName);

                                pstmt1a.setString(16, "");

                                pstmt1a.setString(17, null);
                                pstmt1a.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                pstmt1a.setObject(19, storeCmbx.getSelectedItem().toString());
                                pstmt1a.setString(20, "Issuing");
                                pstmt1a.setDouble(21, 00);
                                pstmt1a.setString(23, stockCode);
                                pstmt1a.setDouble(22, 00);
                                pstmt1a.setString(24, "");
                                pstmt1a.setObject(25, storeCmbx.getSelectedItem().toString());
                                pstmt1a.setString(26, transNo);
                                pstmt1a.setDouble(27, qty);
                                pstmt1a.setString(28, userName);
                                pstmt1a.setBoolean(29, false);
                                pstmt1a.setDouble(30, 0.00);
                                pstmt1a.setDate(31, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                pstmt1a.setString(32, dispensingTable.getValueAt(i, 7).toString());
                                pstmt1a.setString(33, dispensingTable.getValueAt(i, 8).toString());
                                pstmt1a.setObject(34, null);
                                pstmt1a.setObject(35, null);
                                pstmt1a.setObject(36, null);
                                pstmt1a.setObject(37, null);
                                pstmt1a.setObject(38, null);
                                pstmt1a.setObject(39, null);
                                pstmt1a.setObject(40, null);
                                pstmt1a.setObject(41, null);
                                pstmt1a.setObject(42, null);
                                pstmt1a.setObject(43, null);
                                pstmt1a.setObject(44, null);
                                pstmt1a.setObject(45, null);
                                pstmt1a.setObject(46, null);
                                pstmt1a.setObject(47, null);
                                pstmt1a.setObject(48, null);
                                pstmt1a.setObject(49, null);
                                pstmt1a.setObject(50, null);
                                pstmt1a.setString(51, dispensingTable.getValueAt(i, 9).toString());

                                pstmt1a.executeUpdate();

                                java.sql.PreparedStatement pstmt2a = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                pstmt2a.setObject(1, costofSaleCode);
                                pstmt2a.setObject(2, costofSale);
                                pstmt2a.setString(3, patientNumberTxt.getText());
                                pstmt2a.setString(4, jTextField13.getText());
                                pstmt2a.setString(5, "");
                                pstmt2a.setString(6, "");
                                pstmt2a.setString(7, "");
                                pstmt2a.setString(8, "");
                                pstmt2a.setString(9, "");
                                pstmt2a.setString(10, "");
                                pstmt2a.setString(11, "");
                                pstmt2a.setString(12, "");
                                pstmt2a.setString(13, "");
                                pstmt2a.setString(14, drug);
                                pstmt2a.setString(15, "Issuing");
                                pstmt2a.setDouble(16, amount);
                                pstmt2a.setDouble(17, 00);
                                pstmt2a.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                pstmt2a.setString(19, transNo);
                                pstmt2a.setBoolean(20, false);
                                pstmt2a.setBoolean(21, false);
                                pstmt2a.setBoolean(22, false);
                                pstmt2a.setString(23, userName);
                                pstmt2a.executeUpdate();

                                java.sql.PreparedStatement pstmt33 = connectDB.prepareStatement("insert into st_sub_stores values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                pstmt33.setObject(1, storeCmbx.getSelectedItem().toString());
                                pstmt33.setObject(2, dispensingTable.getValueAt(i, 0).toString());
                                pstmt33.setDouble(3, 0.00);
                                pstmt33.setDouble(4, java.lang.Double.valueOf(dispensingTable.getValueAt(i, 1).toString()));
                                pstmt33.setDouble(7, 0.00);
                                pstmt33.setDouble(5, java.lang.Double.valueOf(dispensingTable.getValueAt(i, 3).toString()));
                                pstmt33.setDouble(6, TotalPrice);
                                pstmt33.setObject(10, com.afrisoftech.lib.ServerTime.getSQLTimeStamp(connectDB)); //com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                pstmt33.setString(8, transNo);
                                pstmt33.setObject(9, jComboBox2.getSelectedItem().toString());
                                pstmt33.setString(11, user);
                                pstmt33.setString(12, units);
                                pstmt33.setObject(13, storeCmbx.getSelectedItem().toString());
                                pstmt33.setString(14, patientNumberTxt.getText() + " " + jTextField13.getText());
                                pstmt33.setDouble(15, amount / java.lang.Double.valueOf(dispensingTable.getValueAt(i, 1).toString()));
                                pstmt33.setObject(17, dispensingTable.getValueAt(i, 8).toString());
                                pstmt33.setObject(16, dispensingTable.getValueAt(i, 7).toString());
                                pstmt33.setObject(18, null);
                                pstmt33.setObject(19, null);
                                pstmt33.setObject(20, null);
                                pstmt33.setString(21, dispensingTable.getValueAt(i, 9).toString());
                                pstmt33.executeUpdate();

                                if (jComboBox1.getSelectedItem().equals("Scheme")) {

                                    java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("INSERT INTO hp_pharmacy values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                    pstmt1.setString(1, patientNumberTxt.getText());
                                    pstmt1.setString(2, jTextField13.getText());
                                    pstmt1.setObject(3, java.lang.Double.valueOf(dispensingTable.getValueAt(i, 1).toString()));
                                    pstmt1.setDouble(4, TotalPrice);
                                    //  pstmt1.setObject(4,jTable13.getValueAt(i,5).toString());
                                    pstmt1.setObject(5, drug);
                                    pstmt1.setDouble(7, java.lang.Double.valueOf(dispensingTable.getValueAt(i, 3).toString()));
                                    pstmt1.setObject(8, dispensingTable.getValueAt(i, 6).toString());
                                    pstmt1.setBoolean(6, false);
                                    pstmt1.setString(9, prescNo);
                                    pstmt1.setObject(10, jComboBox2.getSelectedItem().toString());
                                    pstmt1.setBoolean(11, true);
                                    pstmt1.setString(12, glAcc2);
                                    pstmt1.setDate(13, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt1.setObject(14, storeCmbx.getSelectedItem().toString());
                                    pstmt1.setString(15, "OP");
                                    pstmt1.setString(16, jComboBox1.getSelectedItem().toString());
                                    pstmt1.setString(17, "-");
                                    pstmt1.setDouble(18, TotalPrice - amount1);
                                    pstmt1.setString(19, user);
                                    pstmt1.setString(20, jTextField5.getText());
                                    pstmt1.setString(21, receiptNotxt.getText());
                                    pstmt1.setObject(22, dispensingTable.getValueAt(i, 7).toString());
                                    pstmt1.setObject(23, dispensingTable.getValueAt(i, 8).toString());
                                    pstmt1.executeUpdate();

                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                    //1 for (int i = 0; i < jTable1.getRowCount(); i++){

                                    pstmt.setString(1, patientNumberTxt.getText());
                                    pstmt.setObject(2, drug);
                                    pstmt.setString(3, jTextField22.getText());
                                    pstmt.setString(4, jComboBox1.getSelectedItem().toString());
                                    pstmt.setString(5, transNo);
                                    pstmt.setString(7, scheme);
                                    pstmt.setString(6, cardNo);
                                    pstmt.setString(8, cardName);
                                    pstmt.setString(9, isurer);
                                    pstmt.setDate(10, expDate);
                                    pstmt.setObject(11, jComboBox2.getSelectedItem().toString());
                                    pstmt.setDouble(12, TotalPrice);
                                    pstmt.setDouble(13, 0.00);
                                    pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt.setObject(15, patientAcc);
                                    pstmt.setObject(16, storeCmbx.getSelectedItem().toString());
                                    pstmt.setObject(17, qty);
                                    pstmt.setObject(18, staffNo);
                                    pstmt.setBoolean(19, false);
                                    pstmt.setString(20, "Billing");
                                    pstmt.setBoolean(21, false);
                                    pstmt.setString(22, AccDesc);
                                    pstmt.setString(23, invoiceNo);
                                    pstmt.setString(24, user);
                                    pstmt.setString(25, prescNo);
                                    pstmt.setString(26, "OP");
                                    pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                    pstmt.setString(28, visitid);
                                    pstmt.executeUpdate();

                                    java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
                                    pstmt2.setObject(1, dispensingTable.getModel().getValueAt(i, 6));
                                    pstmt2.setString(2, glAcc);
                                    pstmt2.setString(3, patientNumberTxt.getText());
                                    pstmt2.setString(4, jTextField13.getText());
                                    pstmt2.setString(5, "");
                                    pstmt2.setString(6, cardNo);
                                    pstmt2.setString(7, cardName);
                                    pstmt2.setString(8, "OP");
                                    pstmt2.setString(9, isurer);
                                    pstmt2.setString(10, jComboBox1.getSelectedItem().toString());
                                    pstmt2.setString(11, "");
                                    pstmt2.setString(12, "");
                                    pstmt2.setString(13, "");
                                    pstmt2.setString(14, drug);
                                    pstmt2.setString(15, "Revenue");
                                    pstmt2.setDouble(16, 0.00);
                                    pstmt2.setDouble(17, TotalPrice);
                                    // pstmt2.setObject(17,jTable13.getValueAt(i,5).toString());
                                    pstmt2.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt2.setString(19, transNo);
                                    pstmt2.setBoolean(20, false);
                                    pstmt2.setBoolean(21, false);
                                    pstmt2.setBoolean(22, false);
                                    pstmt2.setString(23, user);
                                    pstmt2.executeUpdate();

                                    System.out.println("This is " + storeCmbx.getSelectedItem() + " pharmacy");
                                }
                                double quantity = Double.parseDouble(dispensingTable.getModel().getValueAt(i, 1).toString());

                            }
                        }

                    }

                    connectDB.commit();
                    connectDB.setAutoCommit(true);
                    javax.swing.JOptionPane.showMessageDialog(this, "Item(s) dispensed successfully " + transNo, "Dispensing Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    jTextField32.setText("0.00");
                    jTextField10.setText("0.00");
                    ClearTable.clearthisTable(dispensingTable);
                }
            }

        } catch (java.sql.SQLException sq) {
            sq.printStackTrace();
            try {
                connectDB.rollback(registerSavePoint);
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }

        // Add your handling code here:
    }//GEN-LAST:event_jButton12ActionPerformed

    private void dispensingTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_dispensingTableKeyReleased
        boolean neg = false;
        if (dispensingTable.getModel().getValueAt(dispensingTable.getSelectedRow(), 1) != null) {
            if (dispensingTable.getSelectedColumn() == dispensingTable.getSelectedColumn()) {
                try {

                    java.sql.Statement pstmt1 = connectDB.createStatement();
                    java.sql.ResultSet rs1 = pstmt1.executeQuery("select neg_allow from st_stock_control"); //from orders where supplier ='"+jTable1.getValueAt(i,4).toString()+"'");

                    while (rs1.next()) {

                        neg = rs1.getBoolean(1);
                    }

                } catch (java.sql.SQLException sq) {
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

                    System.out.println(sq.getMessage());

                }

                float bal = java.lang.Float.parseFloat(dispensingTable.getValueAt(dispensingTable.getSelectedRow(), 2).toString());
                float qty = java.lang.Float.parseFloat(dispensingTable.getValueAt(dispensingTable.getSelectedRow(), 1).toString());
                float price = java.lang.Float.parseFloat(dispensingTable.getValueAt(dispensingTable.getSelectedRow(), 3).toString());
                if (neg == false && bal >= qty) {
                    float total = qty * price;
                    dispensingTable.setValueAt(total, dispensingTable.getSelectedRow(), 5);
                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(dispensingTable, 5);
                    jTextField10.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                    jTextField15.setText(java.lang.String.valueOf(totalSum));
                } else {
                    if (neg == false && bal < qty) {
                        javax.swing.JOptionPane.showMessageDialog(this, "You are not allowed to dispense more than the available stock", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        dispensingTable.setValueAt(0, dispensingTable.getSelectedRow(), 5);
                        dispensingTable.setValueAt(0, dispensingTable.getSelectedRow(), 1);

                        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(dispensingTable, 5);
                        jTextField10.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                        jTextField15.setText(java.lang.String.valueOf(totalSum));
                    }
                }
                if (neg == true) {
                    float total = qty * price;
                    dispensingTable.setValueAt(total, dispensingTable.getSelectedRow(), 5);
                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(dispensingTable, 5);
                    jTextField10.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                    // jTextField15.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                    jTextField15.setText(java.lang.String.valueOf(totalSum));
                }
            }

        }
        /*
         * double resFloat = 0.00; if
         * (jTable13.getValueAt(jTable13.getSelectedRow(),
         * jTable13.getSelectedColumn()) != null) {
         *
         * float floatCol2 =
         * java.lang.Float.parseFloat(jTable13.getValueAt(jTable13.getSelectedRow(),
         * 1).toString());
         *
         * float floatCol3 =
         * java.lang.Float.parseFloat(jTable13.getValueAt(jTable13.getSelectedRow(),
         * 3).toString());
         *
         * float resVal = floatCol2 * floatCol3;
         *
         * if (jTable13.getValueAt(jTable13.getSelectedRow(), 4) != null) {
         *
         * float floatCol4 =
         * java.lang.Float.parseFloat(jTable13.getValueAt(jTable13.getSelectedRow(),
         * 4).toString());
         *
         * resVal = (floatCol2 * floatCol3) - floatCol4; // resFloat = resVal;
         *
         * jTable13.setValueAt(new java.lang.Float(resVal),
         * jTable13.getSelectedRow(), 5);
         *
         *
         * for (int i = 0; i < jTable13.getRowCount(); i++) {
         *
         * if (jTable1.getModel().getValueAt(i, 1) != null)
         * {//toString().compareToIgnoreCase(null) {
         *
         * resFloat = resFloat + Double.parseDouble(jTable13.getValueAt(i,
         * 5).toString());
         *
         *
         * // totalSum = floatTotal + resFloat;
         *
         * }
         * }
         *
         * this.tableModelTableChanged();
         *
         * }else
         *
         * jTable13.setValueAt(new java.lang.Float(resVal),
         * jTable13.getSelectedRow(), 5); for (int i = 0; i <
         * jTable13.getRowCount(); i++) {
         *
         * if (jTable13.getModel().getValueAt(i, 0) != null)
         * {//toString().compareToIgnoreCase(null) {
         *
         * resFloat = resFloat + Double.parseDouble(jTable13.getValueAt(i,
         * 5).toString());
         *
         *
         * }
         * }
         *
         * this.tableModel1TableChanged(); }
         *
         */
        // Add your handling code here:
    }//GEN-LAST:event_dispensingTableKeyReleased

    private void dispensingTableAncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_dispensingTableAncestorMoved
        // Add your handling code here:
    }//GEN-LAST:event_dispensingTableAncestorMoved

    private void jButton92ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton92ActionPerformed
        this.itemsSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton92ActionPerformed

    private void itemSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_itemSearchTxtCaretUpdate
        if (itemSearchTxt.getCaretPosition() > 2) {
            // if (jCheckBox7.isSelected()) {
            // jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select DISTINCT product AS product,selling_price, '" + jTextField4.getText() + "' AS gl_code,product_id, strength FROM stockprices WHERE product_id ILIKE '" + jTextField114.getText() + "%' AND department ilike  '" + jComboBox3.getSelectedItem().toString() + "' order by product"));
/////            itemSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT DISTINCT description AS product, CEIL((buying_price/packaging)*(SELECT mark_up FROM st_stores WHERE upper(store_name) = upper('" + storeCmbx.getSelectedItem().toString().toUpperCase() + "')))::numeric(15,0) as selling_price,'" + storeGLCodeTxt.getText() + "' AS gl_code, (item_code) as product_id, strength  from st_stock_item WHERE packaging >= 1 AND (description ilike '%" + itemSearchTxt.getText() + "%' OR item_code ILIKE '%" + itemSearchTxt.getText() + "%') AND (department ilike '%bulk%' OR department ilike '%commercial%') GROUP BY st_stock_item.description,st_stock_item.item_code, st_stock_item.strength, st_stock_item.buying_price, st_stock_item.packaging HAVING ((buying_price/packaging)*(SELECT mark_up FROM st_stores WHERE upper(store_name) = upper('" + storeCmbx.getSelectedItem().toString().toUpperCase() + "')))::numeric(15,0) > 0.00  ORDER BY 1"));
            itemSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT DISTINCT description AS product, ((buying_price/packaging)*(SELECT mark_up FROM st_stores WHERE upper(store_name) = upper('" + storeCmbx.getSelectedItem().toString().toUpperCase() + "')))::numeric(15,0) as selling_price,'" + storeGLCodeTxt.getText() + "' AS gl_code, item_code as product_id, strength,  '" + procurementMethodCmbx.getSelectedItem().toString() + "' as Procurement_Method from st_stock_item WHERE packaging >= 1 AND (description ilike '%" + itemSearchTxt.getText() + "%' OR item_code ILIKE '%" + itemSearchTxt.getText() + "%') AND (upper(department) IN (SELECT DISTINCT upper(store_name) FROM st_stores WHERE classification = (SELECT classification FROM st_stores WHERE upper(store_name) = upper('" + storeCmbx.getSelectedItem().toString().toUpperCase() + "')))) GROUP BY st_stock_item.description,st_stock_item.item_code, st_stock_item.strength, st_stock_item.buying_price, st_stock_item.packaging HAVING ((buying_price/packaging)*(SELECT mark_up FROM st_stores WHERE upper(store_name) = upper('" + storeCmbx.getSelectedItem().toString().toUpperCase() + "')))::numeric(15,0) > 0.00  ORDER BY 1"));

            javax.swing.table.TableColumn column = null;
            for (int i = 0; i < itemSearchTable.getColumnCount(); i++) {
                column = this.itemSearchTable.getColumnModel().getColumn(i);
                if (i == 0) {

                    column.setPreferredWidth(500); // item description column is bigger
                } else {

                    column.setPreferredWidth(100);

                }
            }
//////itemSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT DISTINCT description AS product, CEIL((funsoft_item_price(item_code, '"+procurementMethodCmbx.getSelectedItem().toString()+"'))*(SELECT mark_up FROM st_stores WHERE upper(store_name) = upper('" + storeCmbx.getSelectedItem().toString().toUpperCase() + "')))::numeric(15,0) as selling_price,'" + storeGLCodeTxt.getText() + "' AS gl_code, (item_code) as product_id, strength, '"+procurementMethodCmbx.getSelectedItem().toString()+"' AS Procurement_Method  from st_stock_item WHERE packaging >= 1 AND (description ilike '%" + itemSearchTxt.getText() + "%' OR item_code ILIKE '%" + itemSearchTxt.getText() + "%') AND (department ilike '%bulk%' OR department ilike '%commercial%') GROUP BY st_stock_item.description,st_stock_item.item_code, st_stock_item.strength, st_stock_item.buying_price, st_stock_item.packaging HAVING ((funsoft_item_price(item_code, '"+procurementMethodCmbx.getSelectedItem().toString()+"'))*(SELECT mark_up FROM st_stores WHERE upper(store_name) = upper('" + storeCmbx.getSelectedItem().toString().toUpperCase() + "')))::numeric(15,0) > 0.00 "));
            //        + "UNION SELECT DISTINCT description AS product, CEIL((funsoft_item_price(item_code, 'Direct Procurement'))*(SELECT mark_up FROM st_stores WHERE upper(store_name) = upper('" + storeCmbx.getSelectedItem().toString().toUpperCase() + "')))::numeric(15,0) as selling_price,'" + storeGLCodeTxt.getText() + "' AS gl_code, (item_code) as product_id, strength, 'Direct Procurement' AS Procurement_Method  from st_stock_item WHERE packaging >= 1 AND (description ilike '%" + itemSearchTxt.getText() + "%' OR item_code ILIKE '%" + itemSearchTxt.getText() + "%') AND (department ilike '%bulk%' OR department ilike '%commercial%') GROUP BY st_stock_item.description,st_stock_item.item_code, st_stock_item.strength, st_stock_item.buying_price, st_stock_item.packaging HAVING ((funsoft_item_price(item_code, 'Direct Procurement'))*(SELECT mark_up FROM st_stores WHERE upper(store_name) = upper('" + storeCmbx.getSelectedItem().toString().toUpperCase() + "')))::numeric(15,0) > 0.00 ORDER BY 1"));
            /////  itemSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select DISTINCT product AS product,selling_price,'" + storeGLCodeTxt.getText() + "' AS gl_code,product_id, strength  from funsoft_drugs_search('%" + itemSearchTxt.getText() + "%', '" + storeCmbx.getSelectedItem().toString() + "') ORDER By 1"));
            //jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select product,round(selling_price, 0) as selling_price, gl_code FROM st_stock_prices WHERE product ILIKE '%"+jTextField114.getText()+"%' AND department =  '"+jTextField42.getText()+"' order by product"));
            itemSearchScrollPane.setViewportView(itemSearchTable);
//            } else {
//                jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select DISTINCT product AS product,selling_price, '" + jTextField4.getText() + "' AS gl_code,product_id, strength FROM stockprices WHERE product ILIKE '" + jTextField114.getText() + "%' AND department ilike  '" + jComboBox3.getSelectedItem().toString() + "' order by product"));
//
//                //jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select product,round(selling_price, 0) as selling_price, gl_code FROM st_stock_prices WHERE product ILIKE '%"+jTextField114.getText()+"%' AND department =  '"+jTextField42.getText()+"' order by product"));
//
//                jSearchScrollPane3.setViewportView(jSearchTable3);
//            }
            System.out.println("Cannot sort out");

        }// Add your handling code here:
    }//GEN-LAST:event_itemSearchTxtCaretUpdate

    private void itemSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemSearchTableMouseClicked
        this.itemSearchTxt.setText("");
        dispensingTable.setValueAt(itemSearchTable.getValueAt(itemSearchTable.getSelectedRow(), 0), dispensingTable.getSelectedRow(), 0);
        dispensingTable.setValueAt(itemSearchTable.getValueAt(itemSearchTable.getSelectedRow(), 1), dispensingTable.getSelectedRow(), 3);
        dispensingTable.setValueAt(itemSearchTable.getValueAt(itemSearchTable.getSelectedRow(), 2), dispensingTable.getSelectedRow(), 6);
        dispensingTable.setValueAt(new java.lang.Double(0), dispensingTable.getSelectedRow(), 4);
        dispensingTable.setValueAt(itemSearchTable.getValueAt(itemSearchTable.getSelectedRow(), 3), dispensingTable.getSelectedRow(), 7);
        dispensingTable.setValueAt(itemSearchTable.getValueAt(itemSearchTable.getSelectedRow(), 4), dispensingTable.getSelectedRow(), 8);
        dispensingTable.setValueAt(itemSearchTable.getValueAt(itemSearchTable.getSelectedRow(), 5), dispensingTable.getSelectedRow(), 9);

        int j = 0;

        double Qty = 0.00;
        try {
            java.sql.Statement pstmt = connectDB.createStatement();
            java.sql.Statement pstmt1 = connectDB.createStatement();

            java.sql.ResultSet rs1 = pstmt1.executeQuery("select count(product) from stockprices sc where product ilike '" + itemSearchTable.getValueAt(itemSearchTable.getSelectedRow(), 0) + "' and department ilike '" + storeCmbx.getSelectedItem().toString() + "'");
            while (rs1.next()) {
                j = rs1.getInt(1);
            }
            //  if (j > 0) {
            //  java.sql.ResultSet rs = pstmt.executeQuery("select sum(qty) from stock_balance_qty where item_code ilike '" + jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 3) + "' and department ilike '" + jComboBox3.getSelectedItem().toString() + "' AND dates <= '" + datePicker1.getDate() + "'");

            java.sql.ResultSet rs = pstmt.executeQuery("select case when qty=0 or qty IS NULL then 0 ELSE qty END AS qty from st_balance_qty( '" + itemSearchTable.getValueAt(itemSearchTable.getSelectedRow(), 3) + "',  '" + SQLDateFormat.getSQLDate(datePicker1.getDate()).toString() + "' , '" + storeCmbx.getSelectedItem().toString() + "','" + procurementMethodCmbx.getSelectedItem().toString() + "') ");
            System.out.println("select case when qty=0 or qty IS NULL then 0 ELSE qty END AS qty from st_balance_qty( '" + itemSearchTable.getValueAt(itemSearchTable.getSelectedRow(), 3) + "',  '" + SQLDateFormat.getSQLDate(datePicker1.getDate()).toString() + "' , '" + storeCmbx.getSelectedItem().toString() + "', '" + procurementMethodCmbx.getSelectedItem().toString() + "') ");
            //java.sql.ResultSet rs = pstmt.executeQuery("select sum(qty) from stock_balance_qty where description ilike '"+jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(),0)+"' and department ilike '"+jTextField42.getText()+"' AND dates <= '"+datePicker1.getDate()+"'");
            //java.sql.ResultSet rs = pstmt.executeQuery("select sum(receiving-issuing) As qty from  st_sub_stores where item = '"+jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(),0)+"' and department like '"+jTextField42.getText()+"' AND dates <= '"+datePicker1.getDate()+"'");
            while (rs.next()) {

                Qty = rs.getDouble(1);
                //  jTable1.setValueAt(Qty,jTable1.getSelectedRow(),2);
                dispensingTable.setValueAt(Qty, dispensingTable.getSelectedRow(), 2);

            }
//            } else {
//                dispensingTable.setValueAt("0.00", dispensingTable.getSelectedRow(), 2);
//            }
        } catch (java.sql.SQLException sqlex) {
            System.out.println(sqlex.getMessage());
            sqlex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlex.getMessage());
        }

        itemsSearchDialog.dispose();   // Add your handling code here:
    }//GEN-LAST:event_itemSearchTableMouseClicked
    private void cmbox13MouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane22.getLocationOnScreen();
        itemsSearchDialog.setSize(850, 200);
        itemsSearchDialog.setLocation(point);
        itemsSearchDialog.show();

    }
    private void dispensingTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dispensingTableMouseClicked
        if (dispensingTable.getSelectedColumn() == 0) {
            if (storeGLCodeTxt.getText().toString().equalsIgnoreCase("") | storeGLCodeTxt.getText().toString().equalsIgnoreCase(" ") | storeCmbx.getSelectedItem().toString().equalsIgnoreCase("-")) {
                javax.swing.JOptionPane.showMessageDialog(this, "You have to select department first", "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            } else {
                this.cmbox13MouseClicked();
            }
        }   // Add your handling code here:
    }//GEN-LAST:event_dispensingTableMouseClicked

    private void jButton52121ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52121ActionPerformed
        this.patientSearchDialog.dispose(); // Add your handling code here:
    }//GEN-LAST:event_jButton52121ActionPerformed

    private void jSearchTable2121MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2121MouseClicked
        jTextField32.setText("0.00");
        patientNumberTxt.setText("");

        jTextField13.setText("");
        jTextField22.setText("");

        double limit = 0.00;
        double bal = 0.00;
        double rect = 0.00;
        double outstanding = 0.00;
        boolean appLimit = false;
        String memberno = null;
        int interval = 0;

        smartcard = false;
        // jTextField32.setText("0.00");

        for (int k = 0; k < dispensingTable.getRowCount(); k++) {
            for (int r = 0; r < dispensingTable.getColumnCount(); r++) {
                dispensingTable.getModel().setValueAt(null, k, r);
            }
        }

        patientNumberTxt.setText(jSearchTable2121.getValueAt(jSearchTable2121.getSelectedRow(), 0).toString());
        jTextField13.setText(jSearchTable2121.getValueAt(jSearchTable2121.getSelectedRow(), 1).toString());
        jTextField5.setText(jSearchTable2121.getValueAt(jSearchTable2121.getSelectedRow(), 2).toString());

        visitID = jSearchTable2121.getValueAt(jSearchTable2121.getSelectedRow(), 2).toString();

        System.err.println("patient visit id =" + visitID);
        patientSearchDialog.dispose();

        int j = 0;
        if (inPatient.isSelected()) {
            try {

                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode,description,member_no from hp_inpatient_register where patient_no  = '" + this.patientNumberTxt.getText().toString() + "'");
                while (rset1.next()) {
                    jTextField22.setText(rset1.getObject(1).toString());
                    jComboBox1.setSelectedItem(rset1.getObject(2).toString());
                    jTextField14.setText(dbObject.getDBObject(rset1.getObject(3), "-").toString());
                    memberno = dbObject.getDBObject(rset1.getObject(4), "-").toString();
                    System.out.println(memberno);
                }

                if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {

                    java.sql.Statement stmt1cz3 = connectDB.createStatement();
                    java.sql.ResultSet rset1cz3 = stmt1cz3.executeQuery("SELECT account_no,payer_name,usesmartcard FROM ac_schemes WHERE scheme_name  ILIKE '" + jTextField14.getText() + "'");
                    while (rset1cz3.next()) {
                        jTextField17.setText(rset1cz3.getObject(1).toString());
                        jTextField18.setText(rset1cz3.getObject(2).toString());
                        smartcard = rset1cz3.getBoolean(3);
                    }
                    if (outPatient.isSelected()) {
                        if (smartcard) {
                            jButton12.setEnabled(false);
                            jButton121.setEnabled(false);
                            jButton122.setEnabled(false);
                            jButton7.setEnabled(true);
                            javax.swing.JOptionPane.showMessageDialog(this, "You must FORWARD from smart link".toUpperCase(), "Information Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                        }
                    }
                    java.sql.Statement stmt1cz = connectDB.createStatement();
                    java.sql.ResultSet rset1cz = stmt1cz.executeQuery("select applylimit from hp_schemestaff where staff_no  ='" + memberno + "' and applylimit = true");
                    while (rset1cz.next()) {
                        appLimit = rset1cz.getBoolean(1);
                    }
                    System.out.println(appLimit);
                    if (appLimit) {
                        ageingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, datePicker1.getDate());

                        java.lang.Object[][] rangeDates = ageingSeries.getAgeingDateSeries();

                        // ageingDates = ageingSeries.getAgeingDateSeries();
                        // double columnTotals[] = new double[rangeDates.length];
                        for (int x = 0; x < rangeDates.length; x++) {
                            System.out.println(rangeDates[x]);
                            try {

                                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
                                com.afrisoftech.lib.DateFormatter dateFormatter = new com.afrisoftech.lib.DateFormatter(dateFormat.parse(rangeDates[x][0].toString().trim()), "yyyy");

                                java.lang.String monthString = dateFormatter.getDateString();

                                interval = x;

                            } catch (java.text.ParseException prs) {
                                prs.printStackTrace();
                            }
                        }
                        java.sql.Statement stmt1c = connectDB.createStatement();
                        java.sql.ResultSet rset1c = stmt1c.executeQuery("select iplimit from hp_schemestaff where staff_no  ='" + memberno + "' and applylimit = true");
                        while (rset1c.next()) {
                            limit = rset1c.getDouble(1);
                        }
                        for (int t = 0; t < rangeDates.length; t++) {
                            java.sql.Statement stmt1cx = connectDB.createStatement();
                            System.out.println("Dates between : " + rangeDates[t][0] + " AND " + rangeDates[t][1]);
                            java.sql.ResultSet rset1cx = stmt1cx.executeQuery("select sum(balance) from ac_debtors where member_no  ='" + memberno + "' AND date between '" + rangeDates[t][0] + "' AND '" + rangeDates[t][1] + "' AND payee ilike '" + jTextField10.getText() + "'");
                            while (rset1cx.next()) {
                                bal = rset1cx.getDouble(1);
                                System.out.println(bal);
                            }
                        }
                        outstanding = limit - bal;
                        // jTextField8.setText(java.lang.String.valueOf(outstanding));
                        if (outstanding >= limit) {
                            javax.swing.JOptionPane.showMessageDialog(this, "The patient has exausted the member limit", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        } else {
                        }
                    }
                }

            } catch (java.sql.SQLException sqlex) {
                System.out.println(sqlex.getMessage());
            }
            patientSearchDialog.dispose();
        } else {
            try {

                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode,description,card_no from hp_patient_register where patient_no  = '" + patientNumberTxt.getText() + "'");
                while (rset1.next()) {
                    jTextField22.setText(rset1.getObject(1).toString());
                    jComboBox1.setSelectedItem(rset1.getObject(2).toString());
                    jTextField14.setText(dbObject.getDBObject(rset1.getObject(3), "-").toString());
                    memberno = dbObject.getDBObject(rset1.getObject(4), "-").toString();
                    System.out.println(memberno);
                }

                if (jComboBox1.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {
                    java.sql.Statement stmt1cz3 = connectDB.createStatement();
                    java.sql.ResultSet rset1cz3 = stmt1cz3.executeQuery("SELECT account_no,payer_name,usesmartcard FROM ac_schemes WHERE scheme_name  ILIKE '" + jTextField14.getText() + "'");
                    while (rset1cz3.next()) {
                        jTextField17.setText(rset1cz3.getObject(1).toString());
                        jTextField18.setText(rset1cz3.getObject(2).toString());
                        smartcard = rset1cz3.getBoolean(3);
                    }
                    if (outPatient.isSelected()) {
                        if (smartcard) {
                            jButton12.setEnabled(false);
                            jButton121.setEnabled(false);
                            jButton122.setEnabled(false);
                            jButton7.setEnabled(true);
                            javax.swing.JOptionPane.showMessageDialog(this, "You must FORWARD from smart link".toUpperCase(), "Information Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                        }
                    }
                    java.sql.Statement stmt1cz = connectDB.createStatement();
                    java.sql.ResultSet rset1cz = stmt1cz.executeQuery("select limit_amount from hp_schemestaff where staff_no  ='" + memberno + "' and applylimit = true");
                    while (rset1cz.next()) {
                        appLimit = rset1cz.getBoolean(1);
                    }
                    System.out.println(appLimit);
                    if (appLimit) {
                        ageingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, datePicker1.getDate());

                        java.lang.Object[][] rangeDates = ageingSeries.getAgeingDateSeries();

                        // ageingDates = ageingSeries.getAgeingDateSeries();
                        // double columnTotals[] = new double[rangeDates.length];
                        for (int x = 0; x < rangeDates.length; x++) {
                            System.out.println(rangeDates[x]);
                            try {

                                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
                                com.afrisoftech.lib.DateFormatter dateFormatter = new com.afrisoftech.lib.DateFormatter(dateFormat.parse(rangeDates[x][0].toString().trim()), "yyyy");

                                java.lang.String monthString = dateFormatter.getDateString();

                                interval = x;

                            } catch (java.text.ParseException prs) {
                                prs.printStackTrace();
                            }
                        }
                        java.sql.Statement stmt1c = connectDB.createStatement();
                        java.sql.ResultSet rset1c = stmt1c.executeQuery("select iplimit from hp_schemestaff where staff_no  ='" + memberno + "' and applylimit = true");
                        while (rset1c.next()) {
                            limit = rset1c.getDouble(1);
                        }
                        for (int t = 0; t < rangeDates.length; t++) {
                            java.sql.Statement stmt1cx = connectDB.createStatement();
                            System.out.println("Dates between : " + rangeDates[t][0] + " AND " + rangeDates[t][1]);
                            java.sql.ResultSet rset1cx = stmt1cx.executeQuery("select sum(balance) from ac_debtors where member_no  ='" + memberno + "' AND date between '" + rangeDates[t][0] + "' AND '" + rangeDates[t][1] + "' AND payee ilike '" + jTextField10.getText() + "'");
                            while (rset1cx.next()) {
                                bal = rset1cx.getDouble(1);
                                System.out.println(bal);
                            }
                        }
                        outstanding = limit - bal;
                        // jTextField8.setText(java.lang.String.valueOf(outstanding));
                        if (outstanding >= limit) {
                            javax.swing.JOptionPane.showMessageDialog(this, "The patient has exausted the member limit", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        } else {
                        }
                    }
                }
            } catch (java.sql.SQLException sqe) {
                sqe.printStackTrace();
                //  System.out.println("Insert not successful");
            }
        }

        try {
            // int j = 0;
            java.sql.Statement stmt = connectDB.createStatement();

            java.sql.ResultSet rset = stmt.executeQuery("SELECT count(patient_no) FROM hp_pharmacy where patient_no  ='" + patientNumberTxt.getText() + "' and paid = false");

            while (rset.next()) {
                j = rset.getInt(1);
            }
            if (j > 0) {
                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select sum(amount) from hp_pharmacy where patient_no  ='" + patientNumberTxt.getText() + "' and paid = false");
                while (rset1.next()) {
                    jTextField10.setText(rset1.getObject(1).toString());
                    //jTextField5.setText(rset1.getObject(2).toString());
                }
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }

        this.populateTable1(this.patientNumberTxt.getText());

// Add your handling code here:
    }//GEN-LAST:event_jSearchTable2121MouseClicked

    private void jTextField113121CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField113121CaretUpdate
        if (this.inPatient.isSelected() && this.jCheckBox4.isSelected()) {
            if (jTextField113121.getCaretPosition() > 5) {

//                System.out.println("Nothing");
//            } else {
                jSearchTable2121.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, name,visit_id from inpatient_list where name ILIKE '%" + jTextField113121.getText() + "%' order by name"));


                /*
                 * try { // searchRowSet2121.execute("SELECT patient_no,
                 * (upper(second_name||' '||first_name||' '||last_name)) as name
                 * from hp_inpatient_register where second_name||'
                 * '||first_name||' '||last_name ILIKE
                 * '"+jTextField113121.getText()+"%' order by second_name");
                 * searchRowSet2121.execute("SELECT patient_no, name from
                 * inpatient_list where name ILIKE
                 * '"+jTextField113121.getText()+"%' order by name");
                 *
                 *
                 * jSearchTable2121.setModel(new
                 * org.netbeans.lib.sql.models.TableModel(searchRowSet2121, new
                 * org.netbeans.lib.sql.models.TableModel.Column[] { new
                 * org.netbeans.lib.sql.models.TableModel.Column("patient_no",
                 * "Patient no", false), new
                 * org.netbeans.lib.sql.models.TableModel.Column("name", "Name",
                 * false) }));
                 */
                jSearchTable2121.setShowHorizontalLines(false);
                jSearchScrollPane2121.setViewportView(jSearchTable2121);

            }
        } else {

            if (this.outPatient.isSelected() && this.jCheckBox4.isSelected()) {
                if (jTextField113121.getCaretPosition() > 5) {

                    jSearchTable2121.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, name,'-' as visit_id from patient_select where name ILIKE '%" + jTextField113121.getText() + "%' order by name"));


                    /*
                     * try { // searchRowSet2121.execute("SELECT patient_no,
                     * (upper(second_name||' '||first_name||' '||last_name)) as
                     * name from hp_inpatient_register where second_name||'
                     * '||first_name||' '||last_name ILIKE
                     * '"+jTextField113121.getText()+"%' order by second_name");
                     * searchRowSet2121.execute("SELECT patient_no, name from
                     * inpatient_list where name ILIKE
                     * '"+jTextField113121.getText()+"%' order by name");
                     *
                     *
                     * jSearchTable2121.setModel(new
                     * org.netbeans.lib.sql.models.TableModel(searchRowSet2121,
                     * new org.netbeans.lib.sql.models.TableModel.Column[] { new
                     * org.netbeans.lib.sql.models.TableModel.Column("patient_no",
                     * "Patient no", false), new
                     * org.netbeans.lib.sql.models.TableModel.Column("name",
                     * "Name", false) }));
                     */
                    jSearchTable2121.setShowHorizontalLines(false);
                    jSearchScrollPane2121.setViewportView(jSearchTable2121);

                }

            } else {
                if (this.inPatient.isSelected() && this.jCheckBox31.isSelected()) {
                    if (jTextField113121.getCaretPosition() > 5) {

                        jSearchTable2121.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, name, visit_id from inpatient_list where patient_no ILIKE '%" + jTextField113121.getText() + "%' order by patient_no"));

                        /*
                         * try { // searchRowSet2121.execute("SELECT patient_no,
                         * (upper(second_name||' '||first_name||' '||last_name))
                         * as name from hp_inpatient_register where patient_no
                         * ILIKE '"+jTextField113121.getText()+"%' order by
                         * second_name"); searchRowSet2121.execute("SELECT
                         * patient_no, name from inpatient_list where patient_no
                         * ILIKE '"+jTextField113121.getText()+"%' order by
                         * patient_no");
                         *
                         *
                         * jSearchTable2121.setModel(new
                         * org.netbeans.lib.sql.models.TableModel(searchRowSet2121,
                         * new org.netbeans.lib.sql.models.TableModel.Column[] {
                         * new
                         * org.netbeans.lib.sql.models.TableModel.Column("patient_no",
                         * "Patient no", false), new
                         * org.netbeans.lib.sql.models.TableModel.Column("name",
                         * "Name", false) }));
                         */
                        jSearchTable2121.setShowHorizontalLines(false);
                        jSearchScrollPane2121.setViewportView(jSearchTable2121);

                    }
                } else {

                    if (this.outPatient.isSelected() && this.jCheckBox31.isSelected()) {
                        if (jTextField113121.getCaretPosition() > 5) {

                            jSearchTable2121.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, name, '-' as visit_id from patient_select where patient_no ILIKE '%" + jTextField113121.getText() + "%' order by patient_no"));

                            /*
                             * try { // searchRowSet2121.execute("SELECT
                             * patient_no, (upper(second_name||'
                             * '||first_name||' '||last_name)) as name from
                             * hp_inpatient_register where patient_no ILIKE
                             * '"+jTextField113121.getText()+"%' order by
                             * second_name"); searchRowSet2121.execute("SELECT
                             * patient_no, name from inpatient_list where
                             * patient_no ILIKE
                             * '"+jTextField113121.getText()+"%' order by
                             * patient_no");
                             *
                             *
                             * jSearchTable2121.setModel(new
                             * org.netbeans.lib.sql.models.TableModel(searchRowSet2121,
                             * new
                             * org.netbeans.lib.sql.models.TableModel.Column[] {
                             * new
                             * org.netbeans.lib.sql.models.TableModel.Column("patient_no",
                             * "Patient no", false), new
                             * org.netbeans.lib.sql.models.TableModel.Column("name",
                             * "Name", false) }));
                             */
                            jSearchTable2121.setShowHorizontalLines(false);
                            jSearchScrollPane2121.setViewportView(jSearchTable2121);

                        }

                    } else {
                        if (this.walkIn.isSelected()) {
                            if (jTextField113121.getCaretPosition() > 5) {

                                //  jSearchTable2121.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT patient_no, name from patient_select where patient_no ILIKE '%"+jTextField113121.getText()+"%' order by patient_no"));
                                jSearchTable2121.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT distinct(patient_no),(patient_name) as name from hp_pharmacy where patient_name ILIKE '%" + jTextField113121.getText() + "%' AND (patient_no ilike 'wk%') order by patient_name"));

                                /*
                                 * try { // searchRowSet2121.execute("SELECT
                                 * patient_no, (upper(second_name||'
                                 * '||first_name||' '||last_name)) as name from
                                 * hp_inpatient_register where patient_no ILIKE
                                 * '"+jTextField113121.getText()+"%' order by
                                 * second_name");
                                 * searchRowSet2121.execute("SELECT patient_no,
                                 * name from inpatient_list where patient_no
                                 * ILIKE '"+jTextField113121.getText()+"%' order
                                 * by patient_no");
                                 *
                                 *
                                 * jSearchTable2121.setModel(new
                                 * org.netbeans.lib.sql.models.TableModel(searchRowSet2121,
                                 * new
                                 * org.netbeans.lib.sql.models.TableModel.Column[]
                                 * { new
                                 * org.netbeans.lib.sql.models.TableModel.Column("patient_no",
                                 * "Patient no", false), new
                                 * org.netbeans.lib.sql.models.TableModel.Column("name",
                                 * "Name", false) }));
                                 */
                                jSearchTable2121.setShowHorizontalLines(false);
                                jSearchScrollPane2121.setViewportView(jSearchTable2121);

                            }
                        }
                    }
                }
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jTextField113121CaretUpdate

    private void searchButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton2ActionPerformed
        searchButton2121Clicked(); // Add your handling code here:

        // Add your handling code here:
    }//GEN-LAST:event_searchButton2ActionPerformed
    private void searchButton2121Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.patientNumberTxt.getLocationOnScreen();

        patientSearchDialog.setSize(400, 200);

        patientSearchDialog.setLocation(point);

        patientSearchDialog.show();
    }
    private void inPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inPatientActionPerformed
        //jPanel1.setVisible(false);
        jPanel13.setVisible(true);
        // jPanel11.setVisible(false);
        this.jTextField13.setEditable(false);
        try {
            java.sql.Statement pstmt = connectDB.createStatement();
            java.sql.ResultSet rs = pstmt.executeQuery("select store_name from st_stores where store_code = 'IP'");

            while (rs.next()) {
                jTextField42.setText(rs.getObject(1).toString());
                storeCmbx.setSelectedItem(rs.getObject(1).toString());
                storeCmbx.setSelectedItem(rs.getObject(1).toString());
                storeCmbx.actionPerformed(evt);
                storeCmbx.setSelectedItem(rs.getObject(1).toString());
            }
        } catch (java.sql.SQLException sqlex) {
            System.out.println(sqlex.getMessage());
        }

        //jPanel11.setVisible(true)// Add your handling code here:
    }//GEN-LAST:event_inPatientActionPerformed

    private void jButton5212ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5212ActionPerformed
        this.jSearchDialog212.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton5212ActionPerformed

    private void jSearchTable212MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable212MouseClicked
        //  jTextField5821.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 1).toString());
/*
         * jTextField912.setText(jSearchTable212.getValueAt(jSearchTable212.getSelectedRow(),
         * 0).toString());
         *
         *
         * int j = 0; try {
         *
         * java.sql.Statement pstmt12 = connectDB.createStatement();
         * java.sql.ResultSet rs12 = pstmt12.executeQuery("select
         * count(patient_name) from hp_pharmacy WHERE patient_name
         * ='"+jSearchTable212.getValueAt(jSearchTable212.getSelectedRow(),0)+"'
         * AND paid = true AND collected = false"); while (rs12.next()){ j =
         * rs12.getInt(1); }
         *
         * if (j > 0) { java.sql.Statement pstmt1 = connectDB.createStatement();
         * java.sql.ResultSet rs1 = pstmt1.executeQuery("select sum(amount) as
         * value from hp_pharmacy WHERE patient_name
         * ='"+jSearchTable212.getValueAt(jSearchTable212.getSelectedRow(),0)+"'
         * AND paid = true AND collected = false");
         *
         *
         * while (rs1.next()){
         * jTextField1111.setText(rs1.getObject(1).toString());
         *
         * }
         *
         * //crset1.setCommand("select service,dosage,units,selling_price,debit
         * as value from drug_collection_view WHERE patient_no
         * ='"+jComboBox11.getSelectedItem().toString()+"'"); /*
         * crset1.setCommand("select description,quantity,units,price,amount as
         * value from hp_pharmacy WHERE patient_name
         * ='"+jSearchTable212.getValueAt(jSearchTable212.getSelectedRow(),0)+"'
         * AND paid = true AND collected = false");
         *
         * crset1.setConnectionSource(pConnDB); try {
         *
         * crset1.execute();
         *
         * // crset2.setExecuteOnLoad(true); jTable111.setModel(new
         * org.netbeans.lib.sql.models.TableModel(crset1, new
         * org.netbeans.lib.sql.models.TableModel.Column[] { new
         * org.netbeans.lib.sql.models.TableModel.Column("description", "Item
         * Desc.", false), new
         * org.netbeans.lib.sql.models.TableModel.Column("units", "Units",
         * false), new org.netbeans.lib.sql.models.TableModel.Column("quantity",
         * "Quantity", false), new
         * org.netbeans.lib.sql.models.TableModel.Column("price", "Price per
         * Item", false), new
         * org.netbeans.lib.sql.models.TableModel.Column("value", "Value KShs",
         * true)
         *
         *
         * })); jScrollPane11.setViewportView(jTable111);
         *
         *
         * }
         * } catch(java.sql.SQLException sqlex){
         * System.out.println(sqlex.getMessage()); }
         * this.populateTable111(this.jTextField912.getText());
         *
         * jSearchDialog212.dispose();
         */
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable212MouseClicked
    /*
     * private void populateTable111(java.lang.String patient_no) { int j = 0;
     * int i = 0;
     *
     * try { java.sql.Statement stmtTable11 = connectDB.createStatement();
     *
     * java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT
     * count(patient_name) FROM hp_pharmacy WHERE patient_name =
     * '"+patient_no+"' AND paid = true AND collected = false");
     *
     * while (rsetTable11.next()) { j = rsetTable11.getInt(1); } if (j > 0) {
     * java.sql.Statement stmtTable1 = connectDB.createStatement();
     *
     * java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select
     * description,units,quantity,price,amount as value,gl_code from hp_pharmacy
     * WHERE patient_name ='"+patient_no+"' AND paid = true AND collected =
     * false and date_prescribed = current_date");
     *
     * while (rsetTable1.next()) {
     *
     * System.out.println("Working at table row "+i);
     * jTable111.setValueAt(rsetTable1.getObject(1), i, 0);
     * jTable111.setValueAt(rsetTable1.getObject(2), i, 1);
     * jTable111.setValueAt(rsetTable1.getObject(3), i, 3);
     * jTable111.setValueAt(rsetTable1.getObject(4), i, 4);
     * jTable111.setValueAt(rsetTable1.getObject(5), i, 5);
     * jTable111.setValueAt(rsetTable1.getObject(6), i, 6);
     *
     * i++;
     *
     * }
     * }
     * } catch(java.sql.SQLException sqlExec) {
     *
     * javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
     *
     * }
     * }
     */
    private void jTextField11312CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11312CaretUpdate

        jSearchTable212.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT distinct(patient_name) as name from hp_pharmacy where patient_name ILIKE '%" + jTextField11312.getText() + "%' AND (patient_no IS NULL OR  patient_no ='') and paid = true and collected = false order by patient_name"));

        /*
         * try {
         *
         * searchRowSet212.execute("SELECT distinct(patient_name) as name from
         * hp_pharmacy where patient_name ILIKE '"+jTextField11312.getText()+"%'
         * AND (patient_no IS NULL OR patient_no ='') and paid = true and
         * collected = false order by patient_name");
         *
         * jSearchTable212.setModel(new
         * org.netbeans.lib.sql.models.TableModel(searchRowSet212, new
         * org.netbeans.lib.sql.models.TableModel.Column[] { new
         * org.netbeans.lib.sql.models.TableModel.Column("name", "Patient name",
         * false) // new org.netbeans.lib.sql.models.TableModel.Column("name",
         * "Name", false) // new
         * org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Year
         * of birth", false), // new
         * org.netbeans.lib.sql.models.TableModel.Column("residence",
         * "Residence", false) }));
         */
        jSearchTable212.setShowHorizontalLines(false);
        jSearchScrollPane212.setViewportView(jSearchTable212);

        // Add your handling code here:
    }//GEN-LAST:event_jTextField11312CaretUpdate
    private void searchButton212Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
/*
         * java.awt.Point point = this.jTextField912.getLocationOnScreen();
         *
         * jSearchDialog212.setSize(400,200);
         *
         * jSearchDialog212.setLocation(point);
         *
         * jSearchDialog212.show();
         */
    }

    private void populateTable11(java.lang.String patient_no) {
        /*
         * int j = 0; int i = 0;
         *
         * try { java.sql.Statement stmtTable11 = connectDB.createStatement();
         *
         * java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT
         * count(patient_name) FROM hp_pharmacy WHERE patient_name =
         * '"+patient_no+"' AND paid = false");
         *
         * while (rsetTable11.next()) { j = rsetTable11.getInt(1); } if (j > 0)
         * { java.sql.Statement stmtTable1 = connectDB.createStatement();
         *
         * java.sql.Statement stmtTable111 = connectDB.createStatement();
         *
         * java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT
         * description, quantity,price,(quantity*price)-amount,amount,gl_code
         * FROM hp_pharmacy WHERE patient_name = '"+patient_no+"' AND paid =
         * false");
         *
         * while (rsetTable1.next()) {
         *
         * jTable11.setValueAt(rsetTable1.getObject(1), i, 0);
         * jTable11.setValueAt(rsetTable1.getObject(2), i, 1);
         * jTable11.setValueAt(rsetTable1.getObject(3), i, 3);
         * if(rsetTable1.getDouble(4) >0){
         * jTable11.setValueAt(rsetTable1.getObject(4), i, 4); }else{
         * jTable11.setValueAt(new java.lang.Double(0.00), i, 4); } //
         * jTable11.setValueAt(rsetTable1.getObject(4), i, 4);
         * jTable11.setValueAt(rsetTable1.getObject(5), i, 5);
         * jTable11.setValueAt(rsetTable1.getObject(6), i, 6);
         *
         * java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("select
         * sum(qty) from stock_balance where description =
         * '"+jTable11.getValueAt(i,0).toString()+"' AND department ilike
         * '"+jTextField41.getText()+"%'"); while (rsetTable111.next()) {
         *
         * jTable11.setValueAt(rsetTable111.getObject(1), i, 2);
         *
         * i++;
         *
         * }
         * }
         * }
         *
         * java.sql.Statement pst211 = connectDB.createStatement();
         * java.sql.ResultSet rs111 = pst211.executeQuery("select doctor from
         * hp_pharmacy where paid = true and collected = false and patient_name
         * = '"+jTextField912.getText()+"'"); while (rs111.next()){
         * jTextField121.setText(rs111.getObject(1).toString()); } }
         * catch(java.sql.SQLException sqlExec) {
         *
         * javax.swing.JOptionPane.showMessageDialog(this,
         * sqlExec.getMessage());
         *
         * }
         */
    }

    /*
     * private void populateTable2(java.lang.String patient_no) { int j = 0; int
     * i = 0;
     *
     * try { java.sql.Statement stmtTable11 = connectDB.createStatement();
     *
     * java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT
     * count(patient_name) FROM hp_pharmacy WHERE patient_no = '"+patient_no+"'
     * AND paid = true AND collected = false");
     *
     * while (rsetTable11.next()) { j = rsetTable11.getInt(1); } if (j > 0) {
     * java.sql.Statement stmtTable1 = connectDB.createStatement();
     *
     * java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select
     * description,units,quantity,price,amount as value,gl_code from hp_pharmacy
     * WHERE patient_no ='"+patient_no+"' AND paid = true AND collected =
     * false");
     *
     * while (rsetTable1.next()) {
     *
     * System.out.println("Working at table row "+i);
     * jTable12.setValueAt(rsetTable1.getObject(1), i, 0);
     * jTable12.setValueAt(rsetTable1.getObject(2), i, 1);
     * jTable12.setValueAt(rsetTable1.getObject(3), i, 3);
     * jTable12.setValueAt(rsetTable1.getObject(4), i, 4);
     * jTable12.setValueAt(rsetTable1.getObject(5), i, 5);
     * jTable12.setValueAt(rsetTable1.getObject(6), i, 6);
     *
     * i++;
     *
     * }
     * }
     * } catch(java.sql.SQLException sqlExec) {
     *
     * javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
     *
     * }
     * }
     */ private void searchButton1Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
/*
         * java.awt.Point point = this.jTextField91.getLocationOnScreen();
         *
         * jSearchDialog21.setSize(400,200);
         *
         * jSearchDialog21.setLocation(point);
         *
         * jSearchDialog21.show();
         *
         *
         */
    }

    /*
     * private void cmbox2ActionPerformed(java.awt.event.ActionEvent evt){ int j
     * = 0;
     *
     * java.lang.Object selectedGuaran = cmbox2.getSelectedItem(); int i =
     * jTable11.getSelectedRow();
     *
     * if (selectedGuaran != null) {
     *
     * try { java.sql.Statement pstmt = connectDB.createStatement();
     * java.sql.ResultSet rs = pstmt.executeQuery("select
     * sp.selling_price::numeric from st_stock_prices sp where product =
     * '"+selectedGuaran+"'"); while (rs.next()){
     * jTable11.setValueAt(rs.getObject(1),i,4); } } catch(java.sql.SQLException
     * sqlex){ System.out.println(sqlex.getMessage()); }
     *
     *
     * double Qty = 0.00; try { java.sql.Statement pstmt =
     * connectDB.createStatement(); java.sql.Statement pstmt1 =
     * connectDB.createStatement();
     *
     * java.sql.ResultSet rs1 = pstmt1.executeQuery("select count(product) from
     * st_stock_prices sc where item = '"+selectedGuaran+"' and department ilike
     * '"+jTextField41.getText()+"%'"); while (rs1.next()) j = rs1.getInt(1); if
     * (j > 0){
     *
     * java.sql.ResultSet rs = pstmt.executeQuery("select sum(qty) from
     * stock_balance where description = '"+selectedGuaran+"' and department
     * ILIKE '"+jTextField41.getText()+"%'"); while (rs.next()){ Qty =
     * rs.getDouble(1); //jTable1.setValueAt(Qty,jTable1.getSelectedRow(),2);
     *
     * jTable11.setValueAt(Qty,i,2);
     *
     * }
     * } else { jTable11.setValueAt("0.00",i,2); } } catch(java.sql.SQLException
     * sqlex){ System.out.println(sqlex.getMessage()); }
     *
     * try { java.sql.Statement pstmt = connectDB.createStatement();
     *
     * java.sql.ResultSet rs = pstmt.executeQuery("select code from pb_activity
     * where activity ilike '"+jTextField41.getText()+"%'"); while (rs.next()){
     * jTable11.setValueAt(rs.getObject(1),i,6);
     *
     * }
     * } catch(java.sql.SQLException sqlex){
     * System.out.println(sqlex.getMessage()); } }
     *
     * }
     */
    public class ComboTextField extends javax.swing.JTextField implements javax.swing.ComboBoxEditor {

        public ComboTextField() {

            initComponents();

        }

        void initComponents() {

            // oldComboBox1311Model = jComboBox1311.getModel();
            // comboTextField = new javax.swing.JTextField();
            comboTextField.addKeyListener(new java.awt.event.KeyAdapter() {

                public void keyTyped(java.awt.event.KeyEvent e) {

                    if (e.getID() == java.awt.event.KeyEvent.VK_BACK_SPACE) {

                        changeComboBoxModel(comboTextField.getText());

                        System.out.println(comboTextField.getText() + " Pressed Key " + e.getKeyText(e.getKeyCode()));
                    }
                }
            });

        }

        public java.awt.Component getEditorComponent() {

            return comboTextField;

        }

        public Object getItem() {

            return comboTextField.getText();

        }

        public void setItem(Object obj) {
            //    comboTextField.setText(jComboBox1311.getSelectedItem().toString());
        }

        public void changeComboBoxModel(java.lang.String typedLetters) {

            javax.swing.DefaultComboBoxModel newComboBox1311Model = new javax.swing.DefaultComboBoxModel();

            System.out.println("ComboBox Item No. " + oldComboBox1311Model.getSize());

            for (int i = 0; i < oldComboBox1311Model.getSize(); i++) {

                if (oldComboBox1311Model.getElementAt(i).toString().startsWith(typedLetters)) {

                    newComboBox1311Model.addElement(oldComboBox1311Model.getElementAt(i));

                    //                    jComboBox1311.setModel(newComboBox1311Model);
                }

            }

        }
        //      }
    }

    /*
     * private void populateTable11(java.lang.String patient_name) { int j = 0;
     * int i = 0;
     *
     * try { java.sql.Statement stmtTable1 = connectDB.createStatement();
     *
     * java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT
     * count(patient_name) FROM hp_pharmacy WHERE patient_name =
     * '"+patient_name+"' AND paid = false AND collected = false");
     *
     * while (rsetTable1.next()) { j = rsetTable1.getInt(1); } if (j > 0) {
     *
     * java.sql.Statement stmtTable11 = connectDB.createStatement();
     *
     * java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT
     * description, quantity, price, null::numeric(15,2),amount, gl_code FROM
     * hp_pharmacy WHERE patient_name = '"+patient_name+"' AND paid = false AND
     * collected = false");
     *
     * while (rsetTable11.next()) {
     *
     * System.out.println("Working at table row "+i);
     * jTable11.setValueAt(rsetTable11.getObject(1), i, 0);
     * jTable11.setValueAt(rsetTable11.getObject(2), i, 1);
     * jTable11.setValueAt(rsetTable11.getObject(3), i, 3);
     * jTable11.setValueAt(rsetTable11.getObject(4), i, 4);
     * jTable11.setValueAt(rsetTable11.getObject(5), i, 5);
     * jTable11.setValueAt(rsetTable11.getObject(6), i, 6);
     *
     * i++;
     *
     * // i = i + i; // jTable1.setValueAt(rsetTable1.getObject(1), i, 0); } }
     * } catch(java.sql.SQLException sqlExec) {
     *
     * javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
     *
     * }
     * }
     *
     */
    // }
    private void outPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outPatientActionPerformed
        this.jTextField13.setEditable(false);
        /*
         * jPanel11.setVisible(false); jPanel1.setVisible(true);
         * jPanel13.setVisible(false); try { java.sql.Statement pstmt =
         * connectDB.createStatement(); java.sql.ResultSet rs =
         * pstmt.executeQuery("select store_name from st_stores where store_code
         * = 'OP'");
         *
         * while (rs.next()){ jTextField4.setText(rs.getObject(1).toString());
         * // jTextField2.setText(rs.getObject(2).toString());
         *
         * }
         * } catch(java.sql.SQLException sqlex){
         * System.out.println(sqlex.getMessage()); }
         */
        // Add your handling code here:
    }//GEN-LAST:event_outPatientActionPerformed

    private void walkInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_walkInActionPerformed
        /*
         * jPanel1.setVisible(false); jPanel11.setVisible(true);
         * jPanel13.setVisible(false);
         */
        this.jTextField13.setEditable(true);
        this.jComboBox1.setSelectedItem("Cash");
        this.jTextField13.setText("Cash");
        this.jTextField22.setText("Walk In");

        // jPanel11.setVisible(true)// Add your handling code here:
    }//GEN-LAST:event_walkInActionPerformed

    private void printInterimbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printInterimbtnActionPerformed
        // TODO add your handling code here:

        com.afrisoftech.reports.FinalDescInPatientIntmlnvPdf policy = new com.afrisoftech.reports.FinalDescInPatientIntmlnvPdf();

        policy.FinalDescInPatientIntmlnvPdf(connectDB, visitID, patientNumberTxt.getText());
    }//GEN-LAST:event_printInterimbtnActionPerformed

    private void patientPrescbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientPrescbtnActionPerformed
        // TODO add your handling code here:

        if (patientNumberTxt.getText().length() < 1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select the patient file first ");
            jTabbedPane1.setSelectedIndex(0);
        } else {

            patientPresctbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT trans_date::date, store_name,item_code, item,issuing,  price, total, user_name  FROM st_sub_stores WHERE issiued_to ilike '%" + patientNumberTxt.getText() + "%' AND trans_date::date <= '" + SQLDateFormat.getSQLDate(patientPrescriptionDt.getDate()) + "' AND store_name ILIKE '%pharmacy'  ORDER BY 1 DESC"));
            //KNH //patientPresctbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT trans_date::date, store_name,item_code, item,issuing,  price, total, user_name  FROM st_sub_stores WHERE issiued_to ilike '%" + patientNumberTxt.getText() + "%' AND trans_date::date <= '" + SQLDateFormat.getSQLDate(patientPrescriptionDt.getDate()) + "' AND upper(store_name) IN (SELECT upper(store_name) from st_stores WHERE status ='pharmacy') ORDER BY 1 DESC"));
        }

    }//GEN-LAST:event_patientPrescbtnActionPerformed

    public Double getClients(String parameterCode) {
        Double clients = 0.0;

        try {
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT count(distinct(issiued_to)) FROM st_sub_stores"
                    + "WHERE store_name = '" + parameterCode + "' AND (trans_date::date BETWEEN '" + startworkloadDate.getDate() + "'  "
                    + "AND '" + endworkloadDate.getDate() + "') AND receiving<1 and transaction_no not like 'Stock%'");

            java.sql.ResultSet rset = pstmt.executeQuery();

            while (rset.next()) {
                clients = rset.getDouble(1);
            }

        } catch (SQLException ex) {
            ex.printStackTrace();

        }

        return clients;
    }
    private void workloadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_workloadBtnActionPerformed
        // TODO add your handling code here:
        //
        pharmacistWorkloadTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT trans_date::date,issiued_to, store_name,item_code, item,issuing QTY,  price, total, user_name  FROM st_sub_stores WHERE store_name = '" + storeCmbx.getSelectedItem() + "' AND (trans_date::date BETWEEN '" + startworkloadDate.getDate() + "'  AND '" + endworkloadDate.getDate() + "') AND receiving<1 and transaction_no not like 'Stock%' ;"));

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(null, storeCmbx.getSelectedItem().toString().toUpperCase() + ":  Summary Between  " + com.afrisoftech.lib.SQLDateFormat.getSQLDate(startworkloadDate.getDate()) + " and  " + com.afrisoftech.lib.SQLDateFormat.getSQLDate(endworkloadDate.getDate()), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Droid Sans Mono", 0, 12), new java.awt.Color(255, 0, 51))); // NOI18N

        totalRevenueTxt.setText(String.valueOf(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(pharmacistWorkloadTbl, 7))));
        totalItemDispensedtxt.setText(String.valueOf(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(pharmacistWorkloadTbl, 5))));
        try {
            // TODO add your handling code here:

            //select count( distinct c.patient_no) from hp_patient_card c,hp_pharmacy p  where  c.ip_no='IP' and  p.collected = true and p.pay_mode='Cash' and p.patient_no=c.patient_no and date between '2014-03-01' and current_date
            //java.sql.PreparedStatement ps = connectDB.prepareStatement("select count(patient_no) from hp_patient_card where ip_no='OP' and main_service = '"+pharmacyCmbx.getSelectedItem().toString()+"' and billing_time::date  BETWEEN '"+startworkloadDate.getDate()+"'  AND '"+endworkloadDate.getDate()+"'");
            // java.sql.PreparedStatement ps1 = connectDB.prepareStatement("select  count (distinct issiued_to) FROM st_sub_stores WHERE store_name = '" + pharmacyCmbx.getSelectedItem() + "' AND (trans_date::date BETWEEN '" + startworkloadDate.getDate() + "'  AND '" + endworkloadDate.getDate() + "');");
            //java.sql.PreparedStatement ps2 = connectDB.prepareStatement("select count(patient_no) from hp_patient_card where ip_no='IP' and main_service = '"+pharmacyCmbx.getSelectedItem().toString()+"' and billing_time::date  BETWEEN '"+startworkloadDate.getDate()+"'  AND '"+endworkloadDate.getDate()+"'");
            Integer count_scheme = 0;
            Integer count_CASH = 0;
            Integer count_IP = 0;
            //---------------------------------------------------------------------------------
            // ResultSet scheme = ps1.executeQuery();
            //while (scheme.next()) {

            //              count_scheme=  Integer.valueOf(String.valueOf(scheme.getObject(1).toString()));
            //              schemepatientTxt.setText(count_scheme.toString());
            String pts = CurrencyFormatter.getFormattedDouble(getClients(storeCmbx.getSelectedItem().toString()));
            patientCountTxt.setText(pts);

            //  }
            //    //------------------------------------------------------------------------------------
            //            ResultSet cash = ps.executeQuery();
            //            while(cash.next()){
            //
            //            count_scheme=  Integer.valueOf(String.valueOf(cash.getObject(1).toString()));
            //              outpatientTxt.setText(count_scheme.toString());
            //
            //            }
            //
            //     //----------------------------------------------------------------------------------------
            //            ResultSet IP = ps2.executeQuery();
            //            while(IP.next()){
            //            count_scheme=  Integer.valueOf(String.valueOf(IP.getObject(1).toString()));
            //                inpatientsTXT.setText(count_scheme.toString());
            //
            //            }
            //            total = Integer.valueOf(outpatientTxt.getText()) + Integer.valueOf(inpatientsTXT.getText()) + Integer.valueOf(schemepatientTxt.getText());
            //            patientCountTxt.setText(String.valueOf(total));
            //
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_workloadBtnActionPerformed

    private void allPharmacistsChBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allPharmacistsChBxActionPerformed
        // TODO add your handling code here:
        workloadBtn.doClick();
    }//GEN-LAST:event_allPharmacistsChBxActionPerformed

    private void currentUserChBxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentUserChBxActionPerformed
        // TODO add your handling code here:
        pharmacistWorkloadTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT trans_date,issiued_to, store_name,item_code, item,issuing,  price, total, user_name  FROM st_sub_stores WHERE store_name = '" + storeCmbx.getSelectedItem() + "' AND (trans_date::date BETWEEN '" + startworkloadDate.getDate() + "'  AND '" + endworkloadDate.getDate() + "' AND user_name=current_user AND transaction_no not like 'Stock%');"));

        totalRevenueTxt.setText(String.valueOf(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(pharmacistWorkloadTbl, 7))));
        totalItemDispensedtxt.setText(String.valueOf(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(pharmacistWorkloadTbl, 5))));
    }//GEN-LAST:event_currentUserChBxActionPerformed

    private void schemepatientTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_schemepatientTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_schemepatientTxtActionPerformed

    private void drugsCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drugsCmbxActionPerformed
        // TODO add your handling code here:
        availableDrugsQtysTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT initcap(store_name) Stock_Outlet, '' AS AVAILABLE_QTY FROM st_sub_stores WHERE item ilike '" + drugsCmbx.getSelectedItem() + "' GROUP BY 1 order by 2 desc "));

        String item = GetItemInfo.getItemCodeByConcatenatedDesc(drugsCmbx.getSelectedItem().toString(), connectDB);

        String store = "";
        Double bal = 0.00;
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        for (int i = 0; i < availableDrugsQtysTbl.getRowCount(); i++) {
            store = availableDrugsQtysTbl.getValueAt(i, 0).toString();
            bal = StockFormulae.stockBalance(connectDB, store, item, SQLDateFormat.getSQLDate(datePicker1.getDate()));

            availableDrugsQtysTbl.setValueAt(bal, i, 1);

            System.out.println(store + " " + item + " " + bal);
        }
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

    }//GEN-LAST:event_drugsCmbxActionPerformed

    private void requisitionNoTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_requisitionNoTxtCaretUpdate
        // TODO add your handling code here:
        if (requisitionNoTxt.getText().equalsIgnoreCase("Search Requisition...")) {
            System.out.println("Nothing to query");
        } else {
            if (requisitionNoTxt.getCaretPosition() < 7) {
                System.out.println("Nothing");
            } else {

                requisitionsformTBl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT cost_center, item_code,item_description, '' as strength, 1 as units,  1.00 as qty_per_pack, quantity::numeric(10,2), price::numeric(10,2), (quantity * price)::numeric(10,2) AS TOTAL FROM st_receive_requisation WHERE requisition_no ilike '%" + requisitionNoTxt.getText() + "%' and quantity - qty_issued > 0  and store_name='" + storeCmbx.getSelectedItem().toString() + "' order by 1"));

            }
        }

    }//GEN-LAST:event_requisitionNoTxtCaretUpdate

    private void requisitionNoTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_requisitionNoTxtMouseClicked
        // TODO add your handling code here:
        if (requisitionNoTxt.getText().length() > 0 && requisitionNoTxt.getText().equalsIgnoreCase("Search Requisition...")) {
            requisitionNoTxt.setText(null);
            requisitionNoTxt.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_requisitionNoTxtMouseClicked

    private void requisitionNoTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requisitionNoTxtActionPerformed
        // TODO add your handling code here:
        // if(jTextField7.){}
    }//GEN-LAST:event_requisitionNoTxtActionPerformed

    private void requisitionNoTxtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_requisitionNoTxtFocusGained
        // TODO add your handling code here:
        if (requisitionNoTxt.getText().length() > 0 && requisitionNoTxt.getText().equalsIgnoreCase("Search Requisition...")) {
            requisitionNoTxt.setText(null);
            requisitionNoTxt.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_requisitionNoTxtFocusGained

    private void requisitionNoTxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_requisitionNoTxtFocusLost
        // TODO add your handling code here:
        if (requisitionNoTxt.getText().length() == 0) {

            requisitionNoTxt.setText("Search Requisition...");
            requisitionNoTxt.setForeground(Color.GRAY);
        }

    }//GEN-LAST:event_requisitionNoTxtFocusLost

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (patientNumberTxt.getText().length() < 1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select the patient file first ");
            jTabbedPane1.setSelectedIndex(0);
        } else {

            jTabbedPane1.setSelectedIndex(1);

            patientBilltbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT date::date,main_service AS ISSUED_FROM,service AS ITEM_NAME,dosage AS QTY,debit  AS BILL_AMOUNT,credit AS RETURNS, user_name FROM hp_patient_card WHERE patient_no ='" + patientNumberTxt.getText() + "' AND visit_id='" + visitID + "' AND main_service ILIKE '%pharmacy%'"));
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void searchPharmacisttxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchPharmacisttxtMouseClicked
        // TODO add your handling code here:
        java.awt.Point point = this.jScrollPane2.getLocationOnScreen();

        searchPharmacist.setSize(500, 200);

        searchPharmacist.setLocation(point);

        searchPharmacist.show();

        searchPharmacisttxt.setFocusable(true);

    }//GEN-LAST:event_searchPharmacisttxtMouseClicked

    private void usersTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_usersTblMouseClicked
        // TODO add your handling code here:
        dispose12.doClick();

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        String user = usersTbl.getValueAt(usersTbl.getSelectedRow(), 0).toString().toLowerCase();

        searchPharmacisttxt.setText(user);

        // TODO add your handling code here:
        pharmacistWorkloadTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,
                "SELECT trans_date,issiued_to, store_name,item_code, item,issuing,  price, total  FROM st_sub_stores WHERE  "
                + "(trans_date::date BETWEEN '" + startworkloadDate.getDate() + "'  AND '" + endworkloadDate.getDate() + "') "
                + "AND lower(user_name)= '" + user + "' AND transaction_no not like 'Stock%';"));

        totalRevenueTxt.setText(String.valueOf(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(pharmacistWorkloadTbl, 7))));
        totalItemDispensedtxt.setText(String.valueOf(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(pharmacistWorkloadTbl, 5))));
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

    }//GEN-LAST:event_usersTblMouseClicked

    private void dispose12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispose12ActionPerformed
        // TODO add your handling code here:
        searchPharmacist.dispose();
    }//GEN-LAST:event_dispose12ActionPerformed

    private void searchPharmacisttxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPharmacisttxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchPharmacisttxtActionPerformed

    private void searchPharmacisttxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchPharmacisttxtCaretUpdate
        // TODO add your handling code here:
        if (searchPharmacisttxt.getCaretPosition() > 2) {
            usersTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT user_name FROM store_allocation WHERE user_name ILIKE '%" + searchPharmacisttxt.getText() + "%'"));
        }
    }//GEN-LAST:event_searchPharmacisttxtCaretUpdate
    private void populateTable1(java.lang.String patient_no) {
        int j = 0;
        int i = 0;
        double Qty = 0.00;
        try {
            java.sql.Statement stmtTable11 = connectDB.createStatement();

            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT count(patient_no)  FROM hp_pharmacy WHERE patient_no = '" + patient_no + "' AND paid = true");

            while (rsetTable11.next()) {
                j = rsetTable11.getInt(1);
            }
            if (j > 0) {
                java.sql.Statement stmtTable1 = connectDB.createStatement();
                java.sql.Statement stmtTable111 = connectDB.createStatement();

                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT description, sum(quantity),price,"
                        + "sum((quantity*price)-amount),sum(amount),gl_code,item_code,strength  FROM hp_pharmacy WHERE "
                        + "patient_no = '" + patient_no + "' AND paid = true AND main_service ILIKE '" + storeCmbx.getSelectedItem() + "'"
                        + " AND collected = false GROUP BY description,price,gl_code,item_code,strength ");

                while (rsetTable1.next()) {

                    System.out.println("Working at table row " + i);
                    dispensingTable.setValueAt(rsetTable1.getObject(1), i, 0);
                    dispensingTable.setValueAt(rsetTable1.getObject(2), i, 1);
                    dispensingTable.setValueAt(rsetTable1.getObject(3), i, 3);
                    if (rsetTable1.getDouble(4) > 0) {
                        dispensingTable.setValueAt(rsetTable1.getObject(4), i, 4);
                    } else {
                        dispensingTable.setValueAt(new java.lang.Double(0.00), i, 4);
                    }
                    dispensingTable.setValueAt(rsetTable1.getObject(5), i, 5);
                    dispensingTable.setValueAt(rsetTable1.getObject(6), i, 6);

                    dispensingTable.setValueAt(rsetTable1.getObject(7), i, 7);
                    dispensingTable.setValueAt(rsetTable1.getObject(8), i, 8);
                    dispensingTable.setValueAt(procurementMethodCmbx.getSelectedItem().toString(), i, 9);

                    java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("select sum(receiving-issuing) from st_sub_stores where item_code = '" + dispensingTable.getValueAt(i, 7).toString() + "' AND store_name ilike '" + storeCmbx.getSelectedItem().toString() + "'");
                    while (rsetTable111.next()) {

                        dispensingTable.setValueAt(rsetTable111.getObject(1), i, 2);
                        //jTable1.setValueAt(new java.lang.String(dbObject.getDBObject(rsetTable111.getObject(1), i, 2), "0.00"));

                        i++;

                    }
                }
            }
        } catch (java.sql.SQLException sqlExec) {
            
            sqlExec.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
    }


    private void startRunning() {

        System.out.println("Starting to run Progress Thread");

        if (updatePatientList == null || !updatePatientList.isAlive()) {

            updatePatientList = new UpdatePatientList(this);

            updatePatientList.start();

            System.out.println("Progress Thread started");

        }

    }

    private void stopRunning() {

        System.out.println("Stopping run Progress Thread");

        updatePatientList.setStop(false);

    }

    class UpdatePatientList extends java.lang.Thread {

        java.lang.String selectedItem;
        int refreshWaitTime = 10000;

        public UpdatePatientList(java.awt.Component parent) {
        }

        public void setStop(boolean refreshstatus) {

            refreshStatus = refreshstatus;

        }

    }

    public void barcodeSearchAction(String itemCode) {
//        dispensingTable.grabFocus();
        String UTF8_BOM = "\uFEFF";

//        this.itemSearchTxt.setText("");
//        String itemCode = itemSearchTable.getValueAt(itemSearchTable.getSelectedRow(), 3).toString();
        System.out.println("Cleaned code : " + itemCode.replace(UTF8_BOM, ""));
        javax.swing.JTable itemSearchTable = new javax.swing.JTable();
        itemCode = itemCode.replaceAll("[^a-zA-Z0-9]", "");
        itemSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select description AS product, ((buying_price/packaging)*(SELECT mark_up FROM st_stores WHERE upper(store_name) = upper('" + storeCmbx.getSelectedItem().toString() + "')))::numeric(15,0) as selling_price,'" + storeGLCodeTxt.getText() + "' AS gl_code, item_code as product_id, strength  from st_stock_item WHERE (description = '" + itemCode + "' OR item_code = '" + itemCode + "') AND (department IN (SELECT upper(store_name) FROM st_stores WHERE classification = (SELECT classification FROM st_stores WHERE upper(store_name) = upper('" + storeCmbx.getSelectedItem().toString() + "') )))  GROUP BY st_stock_item.description,st_stock_item.item_code, st_stock_item.strength, st_stock_item.buying_price, st_stock_item.packaging HAVING ((buying_price/packaging)* (SELECT mark_up FROM st_stores WHERE upper(store_name) = upper('" + storeCmbx.getSelectedItem().toString() + "')))::numeric(15,0) > 0.00  ORDER BY 1"));
//        itemSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select description AS product, ((buying_price/packaging)*1.30)::numeric(15,0) as selling_price,'" + storeGLCodeTxt.getText() + "' AS gl_code, item_code as product_id, strength  from st_stock_item WHERE (description = '" + itemCode.replace(UTF8_BOM, "") + "' OR item_code = '" + itemCode.replace(UTF8_BOM, "") + "') AND (department ilike '%dressing%' OR department ilike '%suture%')  GROUP BY st_stock_item.description,st_stock_item.item_code, st_stock_item.strength, st_stock_item.buying_price, st_stock_item.packaging HAVING ((buying_price/packaging)*1.30)::numeric(15,0) > 0.00  ORDER BY 1"));

        if (itemSearchTable.getRowCount() > 0) {
            dispensingTable.setValueAt(itemSearchTable.getValueAt(0, 0), dispensingTable.getSelectedRow(), 0);
            dispensingTable.setValueAt(itemSearchTable.getValueAt(0, 1), dispensingTable.getSelectedRow(), 3);
            dispensingTable.setValueAt(itemSearchTable.getValueAt(0, 2), dispensingTable.getSelectedRow(), 6);
            dispensingTable.setValueAt(new java.lang.Double(0), dispensingTable.getSelectedRow(), 4);
            dispensingTable.setValueAt(itemSearchTable.getValueAt(0, 3), dispensingTable.getSelectedRow(), 7);
            dispensingTable.setValueAt(itemSearchTable.getValueAt(0, 4), dispensingTable.getSelectedRow(), 8);

            int j = 0;

            double Qty = 0.00;
            try {
                java.sql.Statement pstmt = connectDB.createStatement();
                java.sql.Statement pstmt1 = connectDB.createStatement();

//            java.sql.ResultSet rs1 = pstmt1.executeQuery("select count(product) from stockprices sc where product ilike '" + itemSearchTable.getValueAt(itemSearchTable.getSelectedRow(), 0) + "' and department ilike '" + pharmacyCmbx.getSelectedItem().toString() + "'");
//            while (rs1.next()) {
//                j = rs1.getInt(1);
//            }
                java.sql.ResultSet rs = pstmt.executeQuery("select case when qty=0 or qty IS NULL then 0 ELSE qty END AS qty from st_balance_qty( '" + itemSearchTable.getValueAt(0, 3) + "',  '" + SQLDateFormat.getSQLDate(datePicker1.getDate()).toString() + "' , '" + storeCmbx.getSelectedItem().toString() + "') ");
                System.out.println("select case when qty=0 or qty IS NULL then 0 ELSE qty END AS qty from st_balance_qty( '" + itemSearchTable.getValueAt(0, 3) + "',  '" + SQLDateFormat.getSQLDate(datePicker1.getDate()).toString() + "' , '" + storeCmbx.getSelectedItem().toString() + "') ");

                while (rs.next()) {

                    Qty = rs.getDouble(1);

                    dispensingTable.setValueAt(Qty, dispensingTable.getSelectedRow(), 2);

                }

                // Check for items included in a packaged billing
                int combiItemCount = 0;
                int currentRow = dispensingTable.getSelectedRow();
                java.sql.PreparedStatement pstmtCombiItem = connectDB.prepareStatement("SELECT count(master_item_code) FROM packages WHERE master_item_code = ? and dependancy_type = ?");
                pstmtCombiItem.setObject(1, itemCode);
                pstmtCombiItem.setObject(2, "MAIN");
                java.sql.ResultSet rsetCombiItem = pstmtCombiItem.executeQuery();
                while (rsetCombiItem.next()) {
                    combiItemCount = rsetCombiItem.getInt(1);
                }
                // Bill items included in a package with the master item selected earlier for billing
                if (combiItemCount > 0) {
                    String packageID = null;
                    java.sql.PreparedStatement pstmtBillCombiItems = connectDB.prepareStatement("SELECT package_id FROM packages WHERE master_item_code = ? AND dependancy_type = ?");
                    pstmtBillCombiItems.setObject(1, itemCode);
                    pstmtBillCombiItems.setObject(2, "MAIN");
                    java.sql.ResultSet rsetBillCombiItems = pstmtBillCombiItems.executeQuery();
                    dispensingTable.setValueAt(1, currentRow, 1);
                    dispensingTable.setValueAt(Double.parseDouble(dispensingTable.getValueAt(currentRow, 1).toString()) * Double.parseDouble(dispensingTable.getValueAt(currentRow, 3).toString()), currentRow, 5);
                    while (rsetBillCombiItems.next()) {
                        packageID = rsetBillCombiItems.getString(1);
                        java.sql.PreparedStatement pstmtSetCombiItems = connectDB.prepareStatement("SELECT master_item_code,qty FROM packages WHERE package_id = ? AND dependancy_type NOT ILIKE 'MAIN'");
                        pstmtSetCombiItems.setObject(1, packageID);
                        java.sql.ResultSet rsetSetCombiItems = pstmtSetCombiItems.executeQuery();
                        while (rsetSetCombiItems.next()) {

                            java.sql.PreparedStatement pstmtSetBillingVariables = connectDB.prepareStatement("SELECT description, ROUND(" + com.afrisoftech.lib.InventoryPricing.getSellingPrice(connectDB, rsetSetCombiItems.getString(1), storeCmbx.getSelectedItem().toString()) + "), ROUND((SELECT SUM(receiving-issuing) FROM st_sub_stores WHERE item_code = '" + rsetSetCombiItems.getString(1) + "' AND upper(store_name) = '" + storeCmbx.getSelectedItem().toString().toUpperCase() + "'))  as item_balance, '" + storeGLCodeTxt.getText() + "', strength FROM st_stock_item WHERE item_code = '" + rsetSetCombiItems.getString(1) + "'");
//                        pstmtSetBillingVariables.setObject(1, rsetSetCombiItems.getString(1));
//                        pstmtSetBillingVariables.setObject(2, pharmacyCmbx.getSelectedItem().toString());
//                        pstmtSetBillingVariables.setObject(3, rsetSetCombiItems.getString(1));

                            java.sql.ResultSet rsetSetBillingVariables = pstmtSetBillingVariables.executeQuery();
                            while (rsetSetBillingVariables.next()) {
                                dispensingTable.setValueAt(rsetSetBillingVariables.getString(1), currentRow + 1, 0);
                                dispensingTable.setValueAt(rsetSetCombiItems.getDouble(2), currentRow + 1, 1);
                                if (rsetSetBillingVariables.getInt(3) > 1) {
                                    dispensingTable.setValueAt(rsetSetBillingVariables.getInt(3), currentRow + 1, 2);
                                    //dispensingTable.setValueAt(rsetSetBillingVariables.getDouble(2), currentRow + 1, 5);
                                } else {
                                    dispensingTable.setValueAt(0, currentRow + 1, 2);
                                    dispensingTable.setValueAt(0, currentRow + 1, 5);
                                    javax.swing.JOptionPane.showMessageDialog(this, "You cannot dispense more than the items available in this store. Please check item level.");
                                }
                                dispensingTable.setValueAt(rsetSetBillingVariables.getDouble(2), currentRow + 1, 3);
                                dispensingTable.setValueAt(0.00, currentRow + 1, 4);
                                dispensingTable.setValueAt(Math.round(rsetSetBillingVariables.getDouble(2) * rsetSetCombiItems.getDouble(2)), currentRow + 1, 5);
                                dispensingTable.setValueAt(rsetSetBillingVariables.getString(4), currentRow + 1, 6);
                                dispensingTable.setValueAt(rsetSetCombiItems.getString(1), currentRow + 1, 7);
                                dispensingTable.setValueAt(rsetSetBillingVariables.getString(5), currentRow + 1, 8);

                            }
                            currentRow++;
                        }

                        jTextField15.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(dispensingTable, 5)));
                        jTextField10.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(dispensingTable, 5)));
                    }

                }
            } catch (java.sql.SQLException sqlex) {
                System.out.println(sqlex.getMessage());
                sqlex.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, sqlex.getMessage());
            }
        } else {
            cmbox13MouseClicked();
            //       itemSearchTxt.setText(itemCode);
//javax.swing.JOptionPane.showMessageDialog(this, "There is a problem reading this barcode, please use the keyboard as an alternative.");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox allPharmacistsChBx;
    private javax.swing.JTable availableDrugsQtysTbl;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup21;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.JCheckBox currentUserChBx;
    private com.afrisoftech.lib.DatePicker datePicker1;
    public static javax.swing.JTable dispensingTable;
    private javax.swing.JButton dispose11;
    private javax.swing.JButton dispose12;
    private javax.swing.JComboBox drugsCmbx;
    private com.afrisoftech.lib.DatePicker endworkloadDate;
    private javax.swing.JCheckBox inPatient;
    private javax.swing.JTextField inpatientsTXT;
    private javax.swing.JPanel itemSearchPanel;
    private javax.swing.JScrollPane itemSearchScrollPane;
    private javax.swing.JTable itemSearchTable;
    private javax.swing.JTextField itemSearchTxt;
    private javax.swing.JDialog itemsSearchDialog;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton121;
    private javax.swing.JButton jButton122;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton32;
    public javax.swing.JButton jButton41;
    private javax.swing.JButton jButton4212;
    private javax.swing.JButton jButton42121;
    private javax.swing.JButton jButton5212;
    private javax.swing.JButton jButton52121;
    private javax.swing.JButton jButton54;
    private javax.swing.JButton jButton63;
    public static javax.swing.JButton jButton7;
    private javax.swing.JButton jButton92;
    private javax.swing.JButton jButton93;
    private javax.swing.JCheckBox jCheckBox31;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox1311;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel532;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel413;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel641;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JDialog jSearchDialog13;
    private javax.swing.JDialog jSearchDialog212;
    private javax.swing.JPanel jSearchPanel13;
    private javax.swing.JPanel jSearchPanel14;
    private javax.swing.JPanel jSearchPanel212;
    private javax.swing.JPanel jSearchPanel2121;
    private javax.swing.JPanel jSearchPanel213;
    private javax.swing.JScrollPane jSearchScrollPane13;
    private javax.swing.JScrollPane jSearchScrollPane14;
    private javax.swing.JScrollPane jSearchScrollPane212;
    private javax.swing.JScrollPane jSearchScrollPane2121;
    private javax.swing.JScrollPane jSearchScrollPane4;
    private javax.swing.JTable jSearchTable13;
    private javax.swing.JTable jSearchTable212;
    private javax.swing.JTable jSearchTable2121;
    private javax.swing.JTable jSearchTable4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextField jTextField1;
    private static javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField1113;
    private javax.swing.JTextField jTextField11312;
    private javax.swing.JTextField jTextField113121;
    private javax.swing.JTextField jTextField115;
    public static javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    public static javax.swing.JTextField jTextField15;
    public static javax.swing.JTextField jTextField16;
    public static javax.swing.JTextField jTextField17;
    public static javax.swing.JTextField jTextField18;
    public static javax.swing.JTextField jTextField19;
    private javax.swing.JTextField jTextField2;
    public static javax.swing.JTextField jTextField20;
    public static javax.swing.JTextField jTextField21;
    private javax.swing.JTextField jTextField22;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField32;
    private javax.swing.JTextField jTextField42;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField82;
    private javax.swing.JCheckBox outPatient;
    private javax.swing.JTextField outpatientTxt;
    private javax.swing.JTable patientBilltbl;
    private javax.swing.JTextField patientCountTxt;
    public static javax.swing.JTextField patientNumberTxt;
    private javax.swing.JButton patientPrescbtn;
    private com.afrisoftech.lib.DatePicker patientPrescriptionDt;
    private javax.swing.JTable patientPresctbl;
    private javax.swing.JDialog patientSearchDialog;
    private javax.swing.JTable pharmacistWorkloadTbl;
    private javax.swing.JButton printInterimbtn;
    private javax.swing.JComboBox<String> procurementMethodCmbx;
    private javax.swing.JTextField receiptNotxt;
    private javax.swing.JDialog receiptsearchDialog;
    private javax.swing.JTextField requisitionNoTxt;
    private javax.swing.JTable requisitionsformTBl;
    private javax.swing.JTextField schemepatientTxt;
    private javax.swing.JButton searchButton2;
    private javax.swing.JButton searchButton3;
    private javax.swing.JButton searchButton4;
    private javax.swing.JDialog searchPharmacist;
    private javax.swing.JTextField searchPharmacisttxt;
    private javax.swing.JPanel spacerPanel;
    private com.afrisoftech.lib.DatePicker startworkloadDate;
    private javax.swing.JComboBox storeCmbx;
    private javax.swing.JTextField storeGLCodeTxt;
    private javax.swing.JTextField totalItemDispensedtxt;
    private javax.swing.JTextField totalRevenueTxt;
    private javax.swing.JLabel totalRevenuelb;
    private javax.swing.JTable usersTbl;
    private javax.swing.JCheckBox walkIn;
    private javax.swing.JButton workloadBtn;
    // End of variables declaration//GEN-END:variables
}
