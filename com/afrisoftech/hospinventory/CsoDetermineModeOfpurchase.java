/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.afrisoftech.hospinventory;

import com.afrisoftech.lib.ClearTable;
import java.awt.Color;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author sytem partners
 */
public class CsoDetermineModeOfpurchase extends javax.swing.JPanel {

    /**
     * Creates new form CsoDetermineModeOfpurchase
     */
    String selectedPR = null, userName = null, checked = null;
    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    String Designation = null;
    private String agenda_no;
    private String agenda_no1;

    public CsoDetermineModeOfpurchase(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB, java.lang.String designation) {

        connectDB = connDb;

        pConnDB = pconnDB;

        Designation = designation;

        initComponents();
        System.out.println(designation);

        jLabel7.hide();

        // SELECT   P.requisition_no as \"PR N0:\", sum( P.price* P.quantity) as  \"Total Price\" , P.type_of_pr as \"PR Type\" FROM st_receive_requisation as P,st_authorizations as S WHERE  P.requisition_no ILIKE '%PRQ%' and P.approval_status=TRUE and P.requisition_no=S.requisition_no and S.scm_forwading=TRUE  GROUP BY P.requisition_no,P.type_of_pr
        //     ApprovalTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT   P.requisition_no as \"PR N0:\", P.type_of_pr as \"PR Type\" FROM st_receive_requisation as P,st_authorizations as S WHERE  P.requisition_no ILIKE '%PRQ%' and P.approval_status=TRUE and P.requisition_no=S.requisition_no and S.scm_forwading=TRUE and S.cso_forwading=FALSE and cso_awarded='"+Designation+"' GROUP BY P.requisition_no,P.type_of_pr order by 1"));
        refreshTable();
        setColumnAlignmentCenter(ApprovalTbl, 0);

        try {
            /////To make an external purchase Requisition
            java.sql.Statement pst2 = connectDB.createStatement();
            java.sql.ResultSet rs = pst2.executeQuery("select current_user");
            while (rs.next()) {

                UserTxt.setForeground(Color.red);
                UserTxt.setText(rs.getObject(1).toString());
                userName = rs.getObject(1).toString();

            }
        } catch (Exception esv) {
            System.out.println(esv.getMessage());

        }

    }

    public void setColumnAlignmentCenter(javax.swing.JTable thisOne, int column) {

        /////setting the column 1 alignment to center
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        thisOne.getColumnModel().getColumn(column).setCellRenderer(centerRenderer);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ApprovalTbl = new com.afrisoftech.dbadmin.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel111 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        reqDateTxt = new javax.swing.JTextField();
        reqDeptTxt = new javax.swing.JTextField();
        TransactionTypeTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        timeTxt = new javax.swing.JTextField();
        datePicker2 = new com.afrisoftech.lib.DatePicker();
        jPanel6 = new javax.swing.JPanel();
        FormalCbx = new javax.swing.JCheckBox();
        EmergencyCbx = new javax.swing.JCheckBox();
        UserTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        prequalified = new javax.swing.JCheckBox();
        jLabel112 = new javax.swing.JLabel();
        reqDateTxt1 = new javax.swing.JTextField();
        ReasonPurchaseTxtPane = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        PurchaseItemsTbl = new com.afrisoftech.dbadmin.JTable();
        jPanel3 = new javax.swing.JPanel();
        Save = new javax.swing.JButton();
        cancelbtn = new javax.swing.JButton();
        exitbtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        TotalPriceTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select PR here", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanel7.setMinimumSize(new java.awt.Dimension(100, 250));
        jPanel7.setPreferredSize(new java.awt.Dimension(100, 250));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        jScrollPane3.setMinimumSize(new java.awt.Dimension(250, 100));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(250, 100));

        ApprovalTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "PR_No", "Total Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ApprovalTbl.setMinimumSize(new java.awt.Dimension(90, 34));
        ApprovalTbl.setPreferredSize(new java.awt.Dimension(90, 750));
        ApprovalTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ApprovalTblMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(ApprovalTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(jScrollPane3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel7, gridBagConstraints);

        /*        javax.swing.SpinnerDateModel spinerDate = new javax.swing.SpinnerDateModel();
        dateSpinner = new javax.swing.JSpinner(spinerDate);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jPanel1.add(dateSpinner, gridBagConstraints);

        */
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel4.setText("Transaction Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        jLabel111.setText("Procuring Department");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jLabel111, gridBagConstraints);

        jLabel5.setText("Due Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jLabel5, gridBagConstraints);

        jLabel22.setText("Requisitioning Department");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jLabel22, gridBagConstraints);

        reqDateTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(reqDateTxt, gridBagConstraints);

        reqDeptTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(reqDeptTxt, gridBagConstraints);

        TransactionTypeTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(TransactionTypeTxt, gridBagConstraints);

        jLabel1.setText("Time");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabel1, gridBagConstraints);

        timeTxt.setEditable(false);
        timeTxt.setForeground(new java.awt.Color(0, 204, 204));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 80);
        jPanel1.add(timeTxt, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 80);
        jPanel1.add(datePicker2, gridBagConstraints);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Mode Of Purchase", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 204)));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(FormalCbx);
        FormalCbx.setText("Open Tender");
        FormalCbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FormalCbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(FormalCbx, gridBagConstraints);

        buttonGroup1.add(EmergencyCbx);
        EmergencyCbx.setText("Prequalification");
        EmergencyCbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmergencyCbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(EmergencyCbx, gridBagConstraints);

        UserTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(UserTxt, gridBagConstraints);

        jLabel6.setText("User");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel6.add(jLabel6, gridBagConstraints);

        buttonGroup1.add(prequalified);
        prequalified.setText("Quotation");
        prequalified.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prequalifiedActionPerformed(evt);
            }
        });
        jPanel6.add(prequalified, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel6, gridBagConstraints);

        jLabel112.setText("Requisition Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jLabel112, gridBagConstraints);

        reqDateTxt1.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(reqDateTxt1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 9.0;
        gridBagConstraints.weighty = 2.0;
        add(jPanel1, gridBagConstraints);

        ReasonPurchaseTxtPane.setEditable(false);
        ReasonPurchaseTxtPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Remarks", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, java.awt.Color.blue));
        ReasonPurchaseTxtPane.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        add(ReasonPurchaseTxtPane, gridBagConstraints);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        PurchaseItemsTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Item/Service Code", "Item Description", "Units", "Quantity", "Price", "Balance", "Mode Of Purchase", "Remark"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        /*java.lang.Object[] strCmb = {"Normal","Urgent",""};

        javax.swing.JComboBox cmBox = new javax.swing.JComboBox(strCmb);

        javax.swing.table.TableColumn teditor = this.jTable1.getColumn("Status");

        teditor.setCellEditor(new javax.swing.DefaultCellEditor(cmBox));
        */
        this.PurchaseItemsTbl.getColumnModel().getColumn(6).setCellEditor(new javax.swing.DefaultCellEditor(new javax.swing.JComboBox(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "(SELECT '-' UNION SELECT 'Quotation' UNION SELECT 'Open Tender' UNION SELECT 'Prequalified') order by 1"))));
        javax.swing.table.TableColumn column = null;
        for (int i = 0; i < 4; i++) {
            column = PurchaseItemsTbl.getColumnModel().getColumn(i);
            if (i == 0) {

                column.setPreferredWidth(300); //sport column is bigger
            } else {
                if (i == 1) {
                    column.setPreferredWidth(200);
                } else {
                    //if (i == 2) {
                        column.setPreferredWidth(200);
                        // }  else
                    //column.setPreferredWidth(50);

                }
            }
        }
        PurchaseItemsTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PurchaseItemsTblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(PurchaseItemsTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 9.0;
        gridBagConstraints.weighty = 9.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        add(jScrollPane1, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setMinimumSize(new java.awt.Dimension(250, 27));
        jPanel3.setPreferredSize(new java.awt.Dimension(250, 27));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        Save.setMnemonic('s');
        Save.setText("Save");
        Save.setPreferredSize(new java.awt.Dimension(117, 25));
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(Save, gridBagConstraints);

        cancelbtn.setMnemonic('l');
        cancelbtn.setText("Clear");
        cancelbtn.setPreferredSize(new java.awt.Dimension(117, 25));
        cancelbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(cancelbtn, gridBagConstraints);

        exitbtn.setMnemonic('c');
        exitbtn.setText("Zoom Table");
        exitbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(exitbtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel3, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel2.setForeground(new java.awt.Color(255, 51, 0));
        jLabel2.setText("Total Price");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 7.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 400, 0, 0);
        jPanel2.add(jLabel2, gridBagConstraints);

        TotalPriceTxt.setEditable(false);
        TotalPriceTxt.setFont(new java.awt.Font("Garamond", 1, 14)); // NOI18N
        TotalPriceTxt.setForeground(new java.awt.Color(255, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 7.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 150);
        jPanel2.add(TotalPriceTxt, gridBagConstraints);

        jLabel3.setText("Unit Price");
        jPanel2.add(jLabel3, new java.awt.GridBagConstraints());

        jLabel7.setText("Unit Price");
        jLabel7.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 20);
        jPanel2.add(jLabel7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(jPanel2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void refreshTable() {

        //ApprovalTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT   P.requisition_no as \"PR N0:\", P.type_of_pr as \"PR Type\" FROM st_receive_requisation as P,st_authorizations as S WHERE  (P.requisition_no ILIKE '%PRQ%' or P.requisition_no ILIKE '%SRQ%')and P.approval_status=TRUE and P.requisition_no=S.requisition_no and S.scm_forwading=TRUE and S.cso_forwading=FALSE and cso_awarded='" + Designation + "'and type_of_pr ILIKE '%External%'  GROUP BY P.requisition_no,P.type_of_pr order by 1"));
        ApprovalTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT distinct st.requisition_no, st.type_of_pr as PR_Type  FROM st_assign_buyers bs,st_receive_requisation st where bs.requisition_no=st.requisition_no  and bs.buyer=current_user and st.type_of_pr ilike 'External%'  and st.agenda_no = '-' and (st.requisition_no ilike 'PRQ%' or st.requisition_no ilike 'SRQ%' )   order by 1"));
      //  ApprovalTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT distinct st.requisition_no, st.type_of_pr as PR_Type  FROM st_assign_buyers bs,st_receive_requisation st where bs.requisition_no=st.requisition_no  and bs.buyer=current_user and st.type_of_pr ilike 'External%'  and st.agenda_no = '-' and (st.requisition_no ilike 'PRQ%' or st.requisition_no ilike 'SRQ%' ) and st.requisition_no NOT IN (select  DISTINCT substring (IRQ_NO ,1 ,9) from st_item_to_quote )  order by 1"));
    }
    private void ApprovalTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ApprovalTblMouseClicked
        TotalPriceTxt.setText(null);

        // ApprovalTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT   P.requisition_no as \"PR N0:\", P.type_of_pr as \"PR Type\" FROM st_receive_requisation as P,st_authorizations as S WHERE  P.requisition_no ILIKE '%PRQ%' and P.approval_status=TRUE and P.requisition_no=S.requisition_no and S.scm_forwading=TRUE and S.cso_forwading=FALSE GROUP BY P.requisition_no,P.type_of_pr"));
        ////clearing the products table
        for (int k = 0; k < PurchaseItemsTbl.getRowCount(); k++) {
            for (int r = 0; r < PurchaseItemsTbl.getColumnCount(); r++) {
                PurchaseItemsTbl.getModel().setValueAt(null, k, r);
            }
        }

        ////clear the JTextPane
        ReasonPurchaseTxtPane.setText(null);

        //////Fill the PR table and other details
        int rowselect = ApprovalTbl.getSelectedRow();
        String getPr = null;
        getPr = ApprovalTbl.getValueAt(rowselect, 0).toString();
        selectedPR = getPr;

        String type_pr = null;

        type_pr = ApprovalTbl.getValueAt(rowselect, 1).toString();

        ///////////////////get the to total price  for the selected pr
        java.sql.Statement stmts;
        try {
            stmts = connectDB.createStatement();
            //SELECT   it.description, sum(it.buying_price* P.quantity) as  Total_Price  FROM st_receive_requisation as P,st_authorizations as S,stockitem as it 
// WHERE  P.requisition_no ILIKE '%PRQ%' and P.approval_status=TRUE and P.requisition_no=S.requisition_no and S.scm_forwading=TRUE and P.item_code=it.item_code and  P.requisition_no='PRQ000183' GROUP BY P.requisition_no, it.description

            //java.sql.ResultSet rset = stmts.executeQuery("SELECT   sum(it.buying_price* P.quantity) as  Total_Price ,it.buying_price FROM st_receive_requisation as P,st_authorizations as S,stockitem as it  WHERE  P.requisition_no ILIKE '%PRQ%' and P.approval_status=TRUE and P.requisition_no=S.requisition_no and S.scm_forwading=TRUE and P.item_code=it.item_code and  P.requisition_no='"+getPr+"' GROUP BY P.requisition_no,it.buying_price");
            java.sql.ResultSet rset = stmts.executeQuery("SELECT   sum(P.price* P.quantity) as  Total_Price FROM st_receive_requisation as P  WHERE  P.requisition_no ILIKE '%PRQ%'   and  P.requisition_no='" + getPr + "' GROUP BY P.requisition_no,P.price");

            int rows = 0;
            jLabel7.show();
            Double mode_of_pur_tot = 0.0;
            String mode_pur = null;
            while (rset.next()) {
                mode_of_pur_tot = Double.parseDouble(rset.getString(1));
                jLabel7.setForeground(Color.red);
                jLabel7.setText(rset.getString(1));
                TotalPriceTxt.setText(mode_of_pur_tot.toString());
                System.out.println("msdjcgfhsdfgsdjfsgd " + mode_of_pur_tot.toString());
                ///////getting the threshhold
                java.sql.Statement stmtss = connectDB.createStatement();
               // java.sql.ResultSet rsets = stmtss.executeQuery("select mode_purchase from st_purchasing_threshold where '" + mode_of_pur_tot + "' BETWEEN  threshold_min AND threshold_max");

//                while (rsets.next()) {
//                    mode_pur = rsets.getString(1);
//                    if (mode_pur.trim().equals("Quotation")) {
//                        FormalCbx.setSelected(true);
//                        System.out.println("kkkkkkkkkkkkkkkkkkkkk");
//
//                    } else {
//                        EmergencyCbx.setSelected(true);
//                        System.out.println("nnnnnnnnnnnnnnnnnnnnnnnnnnnnn");
//                    }
//                    System.out.println("sasasasasasasasa " + mode_pur.toString());
//                }

//                else if(mode_pur.equals("Direct")){
//                jCheckBox1.setSelected(true);
//                }
                TotalPriceTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(Double.parseDouble(rset.getString(1))));

            }
        } catch (Exception ecf) {
            ecf.printStackTrace();

        }

        java.sql.Statement stmt;
        try {
            stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("SELECT  cost_center, item_description, \n"
                    + "       units, quantity, date_due, date, status, requisition_no, \n"
                    + "       price, store_name,  balance,reason, \n"
                    + "       terms,item_code,monthly_usage FROM st_receive_requisation WHERE requisition_no='" + getPr + "'");
            int rows = 0;
            while (rset.next()) {
                reqDateTxt1.setText(rset.getString("date"));
                TransactionTypeTxt.setText("Forwarding PR to Buyers");
                reqDateTxt.setText(rset.getString("cost_center"));
                reqDeptTxt.setText(rset.getString("store_name"));

                PurchaseItemsTbl.setValueAt(rset.getString("item_code"), rows, 0);
                PurchaseItemsTbl.setValueAt(rset.getString("item_description"), rows, 1);
                PurchaseItemsTbl.setValueAt(rset.getString("units"), rows, 2);
                PurchaseItemsTbl.setValueAt(rset.getString("quantity"), rows, 3);
                PurchaseItemsTbl.setValueAt(rset.getString("price"), rows, 4);
                PurchaseItemsTbl.setValueAt(rset.getString("balance"), rows, 5);

                PurchaseItemsTbl.setValueAt(rset.getString("terms"), rows, 7);
               // PurchaseItemsTbl.setValueAt(rset.getString("monthly_usage"),rows,4);

                //incrementing the rows
                rows++;

                ReasonPurchaseTxtPane.setText(rset.getString("reason"));

            }

//            /////refreshing the Approval table
//                     ApprovalTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT   P.requisition_no as \"PR N0:\", sum( P.price* P.quantity) as  \"Total Price\" , P.type_of_pr as \"PR Type\" FROM st_receive_requisation as P,st_authorizations as S,st_assign_buyers as B WHERE P.requisition_no ILIKE '%PRQ%' and P.approval_status=FALSE and P.requisition_no=S.requisition_no and S.scm_forwading=TRUE and B.requisition_no!=S.requisition_no and P.requisition_no=B.requisition_no GROUP BY P.requisition_no,P.cost_center,P.date_due,P.type_of_pr,S.scm_forwading"));
//
//        setColumnAlignmentCenter(ApprovalTbl,1);
        } catch (Exception ex) {
            ex.printStackTrace();
        }


    }//GEN-LAST:event_ApprovalTblMouseClicked

    private void PurchaseItemsTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PurchaseItemsTblMouseClicked

    }//GEN-LAST:event_PurchaseItemsTblMouseClicked

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed

        //pr_agenda_no_seq
        try {
            Boolean Check_success = false;
            if (FormalCbx.isSelected()) {
                checked = FormalCbx.getActionCommand().toString();

            } else if (EmergencyCbx.isSelected()) {
                checked = EmergencyCbx.getActionCommand().toString();
            } else if (prequalified.isSelected()) {
                checked = prequalified.getActionCommand().toString();

            }

            connectDB.setAutoCommit(false);

            agenda_no1 = new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()).toString();

            for (int i = 0; i < PurchaseItemsTbl.getRowCount(); i++) {
/////determining the mode of purchase per item   
                if (PurchaseItemsTbl.getValueAt(i, 0) != null && PurchaseItemsTbl.getValueAt(i, 6).toString().length() > 0 && !PurchaseItemsTbl.getValueAt(i, 6).toString().equals("-")) {
                    java.sql.PreparedStatement pstmtgg = connectDB.prepareStatement("UPDATE  st_receive_requisation  SET monthly_usage=?, agenda_no=?,terms=? WHERE requisition_no='" + selectedPR + "' and item_code='" + PurchaseItemsTbl.getValueAt(i, 0).toString() + "' and item_description='" + PurchaseItemsTbl.getValueAt(i, 1).toString() + "' ");

                    pstmtgg.setObject(1, PurchaseItemsTbl.getValueAt(i, 6).toString());
                    pstmtgg.setObject(2, agenda_no1);
                    pstmtgg.setObject(3, agenda_no1);
                    pstmtgg.executeUpdate();
                    Check_success = true;

                }

            }

            if (Check_success == true) {

                Statement pstmt1s = connectDB.createStatement();
                java.sql.ResultSet rs1s = pstmt1s.executeQuery("select nextval('order_no_seq'),CURRENT_DATE"); //from orders where supplier ='"+jTable1.getValueAt(i,4).toString()+"'");
                // java.sql.ResultSet rs1 = pstmt1.executeQuery("select date_part('year',now())|| lpad('" + order_no1 + "',6,'0'),date('now')"); //from orders where supplier ='"+jTable1.getValueAt(i,4).toString()+"'");
                while (rs1s.next()) {
                    agenda_no = rs1s.getObject(1).toString();

                }

                java.sql.PreparedStatement pstmtgg = connectDB.prepareStatement("UPDATE  st_receive_requisation  set agenda_no=? ,terms =? WHERE agenda_no=? ");

                pstmtgg.setObject(1, agenda_no);
                pstmtgg.setObject(2, agenda_no);
                pstmtgg.setObject(3, agenda_no1);
                pstmtgg.executeUpdate();

                java.sql.PreparedStatement pstmt122 = connectDB.prepareStatement("UPDATE  st_authorizations set cso_forwading=? WHERE requisition_no='" + selectedPR + "'");
                pstmt122.setBoolean(1, true);
                pstmt122.executeUpdate();

                String sql_date = null;
                java.sql.Statement stmtss = connectDB.createStatement();
                java.sql.ResultSet rest = stmtss.executeQuery("select current_date::date");
                while (rest.next()) {

                    sql_date = rest.getString(1);
                }
                java.sql.PreparedStatement pstmtsh = connectDB.prepareStatement("UPDATE  st_pr_progress  SET determine_mode_of_pur=? WHERE purchase_req ilike '%" + selectedPR + "%' ");

                pstmtsh.setObject(1, sql_date + "-" + com.afrisoftech.lib.UserName.getLoginName(connectDB).toLowerCase());
                pstmtsh.executeUpdate();

                connectDB.setAutoCommit(false);
                connectDB.commit();
                connectDB.setAutoCommit(true);

                com.afrisoftech.lib.GetItemInfo.updateTrail("Generated Mode of Procurement Request " + selectedPR, connectDB);
                String str = "<html><center><font color=red>Mode Of Purchase Saved Successfully!</font></center></html>";
                JOptionPane.showMessageDialog(null, str, "CONFIRMATION MESSAGE", 1, new javax.swing.ImageIcon(getClass().getResource("/Icons/32x32/Recycle Bin Full 1.png")));

                for (int k = 0; k < PurchaseItemsTbl.getRowCount(); k++) {
                    for (int r = 0; r < PurchaseItemsTbl.getColumnCount(); r++) {
                        PurchaseItemsTbl.getModel().setValueAt(null, k, r);
                    }
                }

            } else {

                String str = "<html><center><font color=red>Double Check your Entries!</font></center></html>";
                JOptionPane.showMessageDialog(null, str, "CONFIRMATION MESSAGE", 1, new javax.swing.ImageIcon(getClass().getResource("/Icons/32x32/Recycle Bin Full 1.png")));

                for (int k = 0; k < PurchaseItemsTbl.getRowCount(); k++) {
                    for (int r = 0; r < PurchaseItemsTbl.getColumnCount(); r++) {
                        PurchaseItemsTbl.getModel().setValueAt(null, k, r);
                    }
                }

                connectDB.setAutoCommit(false);
                connectDB.rollback();
                connectDB.setAutoCommit(true);
            }
            /////clearing the other fields
            reqDateTxt.setText(null);

            reqDateTxt.setText(null);
            reqDeptTxt.setText(null);
            timeTxt.setText(null);
            ReasonPurchaseTxtPane.setText(null);
            reqDateTxt1.setText(null);

            
            refreshTable();
            
            setColumnAlignmentCenter(ApprovalTbl, 0);
            /////clearing the other fields
            reqDateTxt1.setText(null);
            TransactionTypeTxt.setText("Determining the mode of Purchase");
            reqDateTxt.setText(null);
            reqDeptTxt.setText(null);
            ReasonPurchaseTxtPane.setText(null);


            ClearTable.clearthisTable(PurchaseItemsTbl);

        } catch (Exception esc) {
            System.out.println(esc.getMessage());
            esc.printStackTrace();

        }
    }//GEN-LAST:event_SaveActionPerformed

    private void cancelbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelbtnActionPerformed

        /////clearing the other fields
        reqDateTxt1.setText(null);
        TransactionTypeTxt.setText("Forwarding PR to Buyers");
        reqDateTxt.setText(null);
        reqDeptTxt.setText(null);
        ReasonPurchaseTxtPane.setText(null);

        for (int k = 0; k < PurchaseItemsTbl.getRowCount(); k++) {
            for (int r = 0; r < PurchaseItemsTbl.getColumnCount(); r++) {
                PurchaseItemsTbl.getModel().setValueAt(null, k, r);
            }
        }
    }//GEN-LAST:event_cancelbtnActionPerformed

    private void exitbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitbtnActionPerformed

    }//GEN-LAST:event_exitbtnActionPerformed
    private void set_value(javax.swing.JCheckBox selectedCbx) {

        for (int i = 0; i < PurchaseItemsTbl.getRowCount(); i++) {
            if (PurchaseItemsTbl.getValueAt(i, 0) != null) {

                PurchaseItemsTbl.setValueAt(selectedCbx.getText(), i, 6);

            }

        }

    }
    private void FormalCbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FormalCbxActionPerformed
        // TODO add your handling code here:

        set_value(FormalCbx);
    }//GEN-LAST:event_FormalCbxActionPerformed

    private void EmergencyCbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmergencyCbxActionPerformed
        // TODO add your handling code here:
        set_value(EmergencyCbx);
    }//GEN-LAST:event_EmergencyCbxActionPerformed

    private void prequalifiedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prequalifiedActionPerformed
        // TODO add your handling code here:
        set_value(prequalified);
    }//GEN-LAST:event_prequalifiedActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ApprovalTbl;
    private javax.swing.JCheckBox EmergencyCbx;
    private javax.swing.JCheckBox FormalCbx;
    private javax.swing.JTable PurchaseItemsTbl;
    private javax.swing.JTextPane ReasonPurchaseTxtPane;
    private javax.swing.JButton Save;
    private javax.swing.JTextField TotalPriceTxt;
    private javax.swing.JTextField TransactionTypeTxt;
    private javax.swing.JTextField UserTxt;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton cancelbtn;
    private com.afrisoftech.lib.DatePicker datePicker2;
    public static javax.swing.JButton exitbtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JLabel jLabel112;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JCheckBox prequalified;
    private javax.swing.JTextField reqDateTxt;
    private javax.swing.JTextField reqDateTxt1;
    private javax.swing.JTextField reqDeptTxt;
    private javax.swing.JTextField timeTxt;
    // End of variables declaration//GEN-END:variables
}
