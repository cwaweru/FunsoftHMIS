/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */
package com.afrisoftech.hospinventory;

import com.afrisoftech.lib.SQLDateFormat;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 *
 * @author root
 */
public class PatientsBillingIntfr extends javax.swing.JInternalFrame {

    /**
     * Creates new form loanpymntintfr
     */
    private final javax.swing.JTextField comboTextField = new javax.swing.JTextField();
    javax.swing.ComboBoxModel mainComboBoxModel;
    javax.swing.ComboBoxModel oldComboBox1311Model;
    private javax.swing.JComboBox cmbox;
    private javax.swing.JComboBox cmbox2;
    private javax.swing.JComboBox cmbox1;
    java.sql.Connection connectDB = null;
    private boolean refreshStatus;
    com.afrisoftech.timeseries.YearyAgeing ageingSeries = null;
    private UpdatePatientList updatePatientList;
    com.afrisoftech.lib.DBObject dbObject;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    private boolean DirectRev;
    public static String transNo = null;
    boolean smartcard = false;
    private String visitID;
    public static String checkoutRequestID = null;

    public PatientsBillingIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        refreshStatus = true;

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();

        PatientCheckBox.doClick();
        dbObject = new com.afrisoftech.lib.DBObject();

        //  startRunning();
    }
    String glAcc2 = null;
    String Stock = null;
    String actCode = null;
    String accountCode = null;
    String userName = null;
    String transNo1 = null;
    String glType = null;
    String glCode = null;
    String units = null;
    String chbox = null;
    double price = 0.00;
    double qty = 0.00;
    double amount = 0.00;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jSearchDialog212 = new javax.swing.JDialog();
        jSearchPanel212 = new javax.swing.JPanel();
        jTextField11312 = new javax.swing.JTextField();
        jSearchScrollPane212 = new javax.swing.JScrollPane();
        jSearchTable212 = new com.afrisoftech.dbadmin.JTable();
        jButton4212 = new javax.swing.JButton();
        jButton5212 = new javax.swing.JButton();
        patientSearchdlg = new javax.swing.JDialog();
        jSearchPanel2121 = new javax.swing.JPanel();
        jTextField113121 = new javax.swing.JTextField();
        jSearchScrollPane2121 = new javax.swing.JScrollPane();
        jSearchTable2121 = new com.afrisoftech.dbadmin.JTable();
        jButton42121 = new javax.swing.JButton();
        jButton52121 = new javax.swing.JButton();
        medicinesSearchDialog = new javax.swing.JDialog();
        jSearchPanel3 = new javax.swing.JPanel();
        jTextField114 = new javax.swing.JTextField();
        jSearchScrollPane3 = new javax.swing.JScrollPane();
        jSearchTable3 = new com.afrisoftech.dbadmin.JTable();
        jButton92 = new javax.swing.JButton();
        buttonGroup21 = new javax.swing.ButtonGroup();
        jSearchDialog4 = new javax.swing.JDialog();
        jSearchPanel213 = new javax.swing.JPanel();
        jTextField115 = new javax.swing.JTextField();
        jSearchScrollPane4 = new javax.swing.JScrollPane();
        jSearchTable4 = new com.afrisoftech.dbadmin.JTable();
        jButton93 = new javax.swing.JButton();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jSearchDialog13 = new javax.swing.JDialog();
        jSearchPanel13 = new javax.swing.JPanel();
        jTextField1113 = new javax.swing.JTextField();
        jSearchScrollPane13 = new javax.swing.JScrollPane();
        jSearchTable13 = new com.afrisoftech.dbadmin.JTable();
        dispose11 = new javax.swing.JButton();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        OutptChkbx = new javax.swing.JCheckBox();
        WalkinPtbx = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jCheckBox31 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jRadioButton1 = new javax.swing.JRadioButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jPanel413 = new javax.swing.JPanel();
        jTextField93 = new javax.swing.JTextField();
        searchButton4 = new javax.swing.JButton();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jTextField42 = new javax.swing.JTextField();

        datePicker1 = new com.afrisoftech.lib.DatePicker();
        PrescriptionCheckBox = new javax.swing.JCheckBox();
        jTextField6 = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        //jPanel13.setVisible(false);
        jScrollPane22 = new javax.swing.JScrollPane();
        mainItemstbl = new com.afrisoftech.dbadmin.JTable();
        jPanel23 = new javax.swing.JPanel();
        jComboBox1311 = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        jTextField13 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jTextField22 = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jPanel42 = new javax.swing.JPanel();
        jTextField92 = new javax.swing.JTextField();
        searchButton2 = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox();
        jTextField82 = new javax.swing.JTextField();
        try {
            java.sql.Statement pstmt = connectDB.createStatement();
            java.sql.ResultSet rs = pstmt.executeQuery("select rate from pb_operating_parameters where category = 'PF'");

            while (rs.next()){
                jTextField82.setText(rs.getObject(1).toString());
                // jTextField2.setText(rs.getObject(2).toString());

            }
        } catch(java.sql.SQLException sqlex){
            System.out.println(sqlex.getMessage());
        }
        paymentModeCmbx = new javax.swing.JComboBox();
        jPanel641 = new javax.swing.JPanel();
        searchButton3 = new javax.swing.JButton();
        jTextField14 = new javax.swing.JTextField();
        jTextField17 = new javax.swing.JTextField();
        jTextField18 = new javax.swing.JTextField();
        jTextField16 = new javax.swing.JTextField();
        jTextField19 = new javax.swing.JTextField();
        jTextField20 = new javax.swing.JTextField();
        jTextField21 = new javax.swing.JTextField();
        storeNameCmbx = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        gLCodeTxt = new javax.swing.JTextField();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jTextField5 = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jComboBox4 = new javax.swing.JComboBox();
        PatientCheckBox = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        payerMobileTelephoneNumberTxt = new javax.swing.JFormattedTextField();
        jSeparator12 = new javax.swing.JSeparator();
        jLabel532 = new javax.swing.JLabel();
        jTextField32 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        billTotalTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton12 = new javax.swing.JButton();
        jButton63 = new javax.swing.JButton();
        jButton32 = new javax.swing.JButton();
        jButton41 = new javax.swing.JButton();
        jButton54 = new javax.swing.JButton();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton121 = new javax.swing.JButton();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton122 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        spacerPanel = new javax.swing.JPanel();
        payBillNumberTxt = new javax.swing.JTextField();

        jSearchDialog212.setUndecorated(true);
        jSearchDialog212.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel212.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel212.setLayout(new java.awt.GridBagLayout());

        jTextField11312.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField11312CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel212.add(jTextField11312, gridBagConstraints);

        jSearchTable212.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable212.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable212.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable212MouseClicked(evt);
            }
        });
        jSearchScrollPane212.setViewportView(jSearchTable212);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel212.add(jSearchScrollPane212, gridBagConstraints);

        jButton4212.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel212.add(jButton4212, gridBagConstraints);

        jButton5212.setText("Close");
        jButton5212.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5212ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel212.add(jButton5212, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog212.getContentPane().add(jSearchPanel212, gridBagConstraints);

        patientSearchdlg.setUndecorated(true);
        patientSearchdlg.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2121.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2121.setLayout(new java.awt.GridBagLayout());

        jTextField113121.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField113121CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel2121.add(jTextField113121, gridBagConstraints);

        jSearchTable2121.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable2121.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable2121.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable2121MouseClicked(evt);
            }
        });
        jSearchScrollPane2121.setViewportView(jSearchTable2121);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2121.add(jSearchScrollPane2121, gridBagConstraints);

        jButton42121.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2121.add(jButton42121, gridBagConstraints);

        jButton52121.setText("Close");
        jButton52121.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52121ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2121.add(jButton52121, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientSearchdlg.getContentPane().add(jSearchPanel2121, gridBagConstraints);

        medicinesSearchDialog.setUndecorated(true);
        medicinesSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel3.setLayout(new java.awt.GridBagLayout());

        jTextField114.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField114CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel3.add(jTextField114, gridBagConstraints);

        jSearchTable3.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jSearchTable3MouseEntered(evt);
            }
        });
        jSearchScrollPane3.setViewportView(jSearchTable3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel3.add(jSearchScrollPane3, gridBagConstraints);

        jButton92.setText("Dispose");
        jButton92.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton92ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel3.add(jButton92, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        medicinesSearchDialog.getContentPane().add(jSearchPanel3, gridBagConstraints);

        jSearchDialog4.setUndecorated(true);
        jSearchDialog4.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel213.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel213.setLayout(new java.awt.GridBagLayout());

        jTextField115.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField115CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel213.add(jTextField115, gridBagConstraints);

        jSearchTable4.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable4.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable4MouseClicked(evt);
            }
        });
        jSearchScrollPane4.setViewportView(jSearchTable4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel213.add(jSearchScrollPane4, gridBagConstraints);

        jButton93.setText("Dispose");
        jButton93.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton93ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel213.add(jButton93, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog4.getContentPane().add(jSearchPanel213, gridBagConstraints);

        jSearchDialog13.setModal(true);
        jSearchDialog13.setUndecorated(true);
        jSearchDialog13.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel13.setLayout(new java.awt.GridBagLayout());

        jTextField1113.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1113CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel13.add(jTextField1113, gridBagConstraints);

        jSearchTable13.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable13.setShowHorizontalLines(false);
        /*int rowsNo = 0;
        //try {

            crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

            crset1.setConnectionSource(pConnDB);

            // try {
                //crset1.execute();

                // crset2.setExecuteOnLoad(true);
                jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                    new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                    new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

                }));

                tableModel = jSearchTable.getModel();

                jSearchScrollPane.setViewportView(jSearchTable);

                /*   }catch(java.sql.SQLException sqlex){
                javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                System.out.println(sqlex.getMessage());

            }

            javax.swing.table.TableColumn column = null;

            for (int i = 0; i < 4; i++) {

                column = jSearchTable.getColumnModel().getColumn(i);

                if (i == 1) {

                    column.setPreferredWidth(400);
                    //sport column is bigger
                } else {

                    column.setPreferredWidth(200);

                }
            }*/
            jSearchTable13.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jSearchTable13MouseClicked(evt);
                }
            });
            jSearchScrollPane13.setViewportView(jSearchTable13);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            jSearchPanel13.add(jSearchScrollPane13, gridBagConstraints);

            dispose11.setMnemonic('l');
            dispose11.setText("Close");
            dispose11.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    dispose11ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel13.add(dispose11, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchDialog13.getContentPane().add(jSearchPanel13, gridBagConstraints);

            setClosable(true);
            setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
            setIconifiable(true);
            setMaximizable(true);
            setResizable(true);
            setTitle("Raise Patient Bill Estimates (CASH PAYMENTS ONLY)");
            setFrameIcon(null);
            try {
                setSelected(true);
            } catch (java.beans.PropertyVetoException e1) {
                e1.printStackTrace();
            }
            setVisible(true);
            getContentPane().setLayout(new java.awt.GridBagLayout());

            jPanel5.setLayout(new java.awt.GridBagLayout());

            jPanel3.setLayout(new java.awt.GridBagLayout());

            jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Patient category"));
            jPanel6.setLayout(new java.awt.GridBagLayout());

            buttonGroup1.add(OutptChkbx);
            OutptChkbx.setSelected(true);
            OutptChkbx.setText("Out Patient");
            OutptChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            OutptChkbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    OutptChkbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            jPanel6.add(OutptChkbx, gridBagConstraints);

            buttonGroup1.add(WalkinPtbx);
            WalkinPtbx.setText("Walk In Patient");
            WalkinPtbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            WalkinPtbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    WalkinPtbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            jPanel6.add(WalkinPtbx, gridBagConstraints);

            buttonGroup1.add(jCheckBox3);
            jCheckBox3.setText("In Patient");
            jCheckBox3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
            jCheckBox3.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCheckBox3ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            jPanel6.add(jCheckBox3, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel3.add(jPanel6, gridBagConstraints);

            jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Search By"));
            jPanel7.setLayout(new java.awt.GridBagLayout());

            buttonGroup21.add(jCheckBox31);
            jCheckBox31.setSelected(true);
            jCheckBox31.setText("Search By  No.");
            jCheckBox31.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            jPanel7.add(jCheckBox31, gridBagConstraints);

            buttonGroup21.add(jCheckBox4);
            jCheckBox4.setText("Search By Name");
            jCheckBox4.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel7.add(jCheckBox4, gridBagConstraints);

            jRadioButton1.setText("Confirm Visit");
            jRadioButton1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
            jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jRadioButton1ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel7.add(jRadioButton1, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel3.add(jPanel7, gridBagConstraints);

            jPanel8.setLayout(new java.awt.GridBagLayout());

            jLabel10.setText("Date");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            jPanel8.add(jLabel10, gridBagConstraints);

            jPanel413.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jPanel413.setLayout(new java.awt.GridBagLayout());

            jTextField93.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel413.add(jTextField93, gridBagConstraints);

            searchButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
            searchButton4.setToolTipText("Search");
            searchButton4.setEnabled(false);
            searchButton4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            searchButton4.setMaximumSize(new java.awt.Dimension(74, 53));
            searchButton4.setMinimumSize(new java.awt.Dimension(74, 53));
            searchButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            searchButton4.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchButton4ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 2;
            jPanel413.add(searchButton4, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 3.0;
            gridBagConstraints.weighty = 1.0;
            jPanel8.add(jPanel413, gridBagConstraints);

            buttonGroup3.add(jCheckBox5);
            jCheckBox5.setText("Donation");
            jCheckBox5.setEnabled(false);
            jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCheckBox5ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            jPanel8.add(jCheckBox5, gridBagConstraints);

            buttonGroup3.add(jCheckBox6);
            jCheckBox6.setSelected(true);
            jCheckBox6.setText("Pharmacy");
            jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCheckBox6ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            jPanel8.add(jCheckBox6, gridBagConstraints);

            jTextField42.setEditable(false);
            jTextField42.setText("Pharmacy");
            jTextField42.setDoubleBuffered(true);
            String branch = null;
            try {
                java.sql.Statement stmt = connectDB.createStatement();
                java.sql.ResultSet rset = stmt.executeQuery("SELECT store_name FROM st_stores WHERE store_code ilike 'PHA'");
                while (rset.next()){
                    jTextField42.setText(rset.getString(1));
                }
                rset.close();
                stmt.close();

            } catch (java.sql.SQLException sqe) {
                sqe.printStackTrace();
                System.out.println("Insert not successful");
            }
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel8.add(jTextField42, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 6;
            gridBagConstraints.gridy = 0;
            jPanel8.add(datePicker1, gridBagConstraints);

            PrescriptionCheckBox.setBackground(new java.awt.Color(255, 102, 102));
            buttonGroup5.add(PrescriptionCheckBox);
            PrescriptionCheckBox.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
            PrescriptionCheckBox.setText("Prescription No");
            PrescriptionCheckBox.setToolTipText("select prescription no or patient no");
            PrescriptionCheckBox.addItemListener(new java.awt.event.ItemListener() {
                public void itemStateChanged(java.awt.event.ItemEvent evt) {
                    PrescriptionCheckBoxItemStateChanged(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel8.add(PrescriptionCheckBox, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel3.add(jPanel8, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridwidth = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.ipady = -5;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
            gridBagConstraints.weightx = 10.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
            jPanel5.add(jPanel3, gridBagConstraints);

            jTextField6.setEditable(false);
            jTextField6.setMinimumSize(new java.awt.Dimension(0, 0));
            jTextField6.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            jPanel5.add(jTextField6, gridBagConstraints);

            jPanel13.setLayout(new java.awt.GridBagLayout());

            jScrollPane22.setBorder(javax.swing.BorderFactory.createTitledBorder("Select items to bill for credit sales by clicking once on the first column on an empty row"));

            mainItemstbl.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null},
                    {null, null, null, null, null, null, null, null, null}
                },
                new String [] {
                    "Medicine", "Qty", "Avl Qty", "Price", "Disc", "Total", "Gl Account", "Item Code", "Strength"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
                };
                boolean[] canEdit = new boolean [] {
                    false, true, false, false, true, false, false, false, false
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            mainItemstbl.setEditingColumn(1);
            mainItemstbl.setEditingRow(mainItemstbl.getSelectedRow());
            mainItemstbl.setGridColor(new java.awt.Color(204, 204, 255));

            /*  cmbox = new javax.swing.JComboBox();

            crset2.setConnectionSource(pConnDB);
            crset2.setCommand("select distinct product FROM st_stock_prices WHERE department = 'Pharmacy' order by product");

            cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset2, "product", null, null, null));
            javax.swing.table.TableColumn s1 = this.jTable1.getColumn("Drugs");
            s1.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
            cmbox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    cmboxActionPerformed(evt);
                }
            });
            */

            javax.swing.table.TableColumn column111 = null;
            for (int i = 0; i < 9; i++) {
                column111 = mainItemstbl.getColumnModel().getColumn(i);
                if (i == 0) {

                    column111.setPreferredWidth(450); //sport column is bigger
                } else {
                    if (i == 6) {
                        column111.setPreferredWidth(10);
                    }  else
                    column111.setPreferredWidth(150);

                }
            }

            mainItemstbl.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    mainItemstblMouseClicked(evt);
                }
            });
            mainItemstbl.addAncestorListener(new javax.swing.event.AncestorListener() {
                public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
                    mainItemstblAncestorMoved(evt);
                }
                public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                }
                public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
                }
            });
            mainItemstbl.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    mainItemstblKeyReleased(evt);
                }
            });
            jScrollPane22.setViewportView(mainItemstbl);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.gridwidth = 10;
            gridBagConstraints.gridheight = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 200.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
            jPanel13.add(jScrollPane22, gridBagConstraints);

            jPanel23.setLayout(new java.awt.GridBagLayout());

            jComboBox1311.setDoubleBuffered(true);
            jComboBox1311.setMinimumSize(new java.awt.Dimension(0, 0));
            jComboBox1311.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            jPanel23.add(jComboBox1311, gridBagConstraints);

            jLabel13.setText("Patients Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel23.add(jLabel13, gridBagConstraints);

            jTextField13.setEditable(false);
            jTextField13.setDoubleBuffered(true);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 2.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel23.add(jTextField13, gridBagConstraints);

            jLabel22.setText("Department");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel23.add(jLabel22, gridBagConstraints);

            jLabel32.setText("Patient Category");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel23.add(jLabel32, gridBagConstraints);

            jTextField22.setEditable(false);
            jTextField22.setDoubleBuffered(true);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel23.add(jTextField22, gridBagConstraints);

            jLabel41.setText("Payment Mode");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel23.add(jLabel41, gridBagConstraints);

            jLabel61.setText("Doctor");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel23.add(jLabel61, gridBagConstraints);

            jPanel42.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jPanel42.setLayout(new java.awt.GridBagLayout());

            jTextField92.setEditable(false);
            jTextField92.setToolTipText("Click one on the ellipses on the right to select select a patient file");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel42.add(jTextField92, gridBagConstraints);

            searchButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
            searchButton2.setToolTipText("Search");
            searchButton2.setEnabled(false);
            searchButton2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            searchButton2.setMaximumSize(new java.awt.Dimension(74, 53));
            searchButton2.setMinimumSize(new java.awt.Dimension(74, 53));
            searchButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            searchButton2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchButton2ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 2;
            jPanel42.add(searchButton2, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 3.0;
            gridBagConstraints.weighty = 1.0;
            jPanel23.add(jPanel42, gridBagConstraints);

            jComboBox2.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select first_name||' '||middle_name as name from pb_doctors_list  where status ilike 'acti%' order by name"));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel23.add(jComboBox2, gridBagConstraints);

            jTextField82.setEditable(false);
            jTextField82.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            jTextField82.setText("0.00");
            jTextField82.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 50);
            jPanel23.add(jTextField82, gridBagConstraints);

            paymentModeCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT payment_mode FROM pb_paymentmodes ORDER BY 1"));
            paymentModeCmbx.setEnabled(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            jPanel23.add(paymentModeCmbx, gridBagConstraints);

            jPanel641.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jPanel641.setMinimumSize(new java.awt.Dimension(82, 37));
            jPanel641.setPreferredSize(new java.awt.Dimension(0, 0));
            jPanel641.setLayout(new java.awt.GridBagLayout());

            searchButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
            searchButton3.setToolTipText("Search");
            searchButton3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            searchButton3.setMaximumSize(new java.awt.Dimension(74, 53));
            searchButton3.setMinimumSize(new java.awt.Dimension(74, 53));
            searchButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            searchButton3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchButton3ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 1;
            jPanel641.add(searchButton3, gridBagConstraints);

            jTextField14.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel641.add(jTextField14, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            jPanel23.add(jPanel641, gridBagConstraints);

            jTextField17.setEditable(false);
            jTextField17.setPreferredSize(new java.awt.Dimension(0, 0));
            jTextField17.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jTextField17ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            jPanel23.add(jTextField17, gridBagConstraints);

            jTextField18.setEditable(false);
            jTextField18.setPreferredSize(new java.awt.Dimension(0, 0));
            jTextField18.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jTextField18ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            jPanel23.add(jTextField18, gridBagConstraints);

            jTextField16.setEditable(false);
            jTextField16.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel23.add(jTextField16, gridBagConstraints);

            jTextField19.setEditable(false);
            jTextField19.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel23.add(jTextField19, gridBagConstraints);

            jTextField20.setEditable(false);
            jTextField20.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel23.add(jTextField20, gridBagConstraints);

            jTextField21.setEditable(false);
            jTextField21.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            jTextField21.setText("0.00");
            jTextField21.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel23.add(jTextField21, gridBagConstraints);

            storeNameCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select stores from store_allocation where user_name = current_user and type ilike 'bill'"));
            storeNameCmbx.setSelectedIndex(0);
            storeNameCmbx.setEnabled(false);
            storeNameCmbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    storeNameCmbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            jPanel23.add(storeNameCmbx, gridBagConstraints);

            jLabel3.setText("GL Code");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 9;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel23.add(jLabel3, gridBagConstraints);

            gLCodeTxt.setEditable(false);
            gLCodeTxt.setText(com.afrisoftech.lib.StoreFactory.getStoreName(connectDB));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 9;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weighty = 1.0;
            jPanel23.add(gLCodeTxt, gridBagConstraints);

            buttonGroup4.add(jCheckBox7);
            jCheckBox7.setText("Search By Code");
            jCheckBox7.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
            jCheckBox7.setMargin(new java.awt.Insets(0, 0, 0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 9;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel23.add(jCheckBox7, gridBagConstraints);

            buttonGroup4.add(jCheckBox8);
            jCheckBox8.setSelected(true);
            jCheckBox8.setText("Search By name");
            jCheckBox8.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
            jCheckBox8.setMargin(new java.awt.Insets(0, 0, 0, 0));
            jCheckBox8.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCheckBox8ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 9;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel23.add(jCheckBox8, gridBagConstraints);

            jTextField5.setEditable(false);
            jTextField5.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel23.add(jTextField5, gridBagConstraints);

            jLabel24.setText("Store To Credit");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 10;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel23.add(jLabel24, gridBagConstraints);

            jComboBox4.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select stores from store_allocation where user_name = current_user"));
            jComboBox4.setSelectedIndex(0);
            jComboBox4.setEnabled(false);
            jComboBox4.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jComboBox4ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 10;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel23.add(jComboBox4, gridBagConstraints);

            PatientCheckBox.setBackground(new java.awt.Color(255, 102, 102));
            buttonGroup5.add(PatientCheckBox);
            PatientCheckBox.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
            PatientCheckBox.setText("Patient No.");
            PatientCheckBox.setToolTipText("select prescription no or patient no");
            PatientCheckBox.addItemListener(new java.awt.event.ItemListener() {
                public void itemStateChanged(java.awt.event.ItemEvent evt) {
                    PatientCheckBoxItemStateChanged(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel23.add(PatientCheckBox, gridBagConstraints);

            jButton1.setBackground(new java.awt.Color(204, 204, 255));
            jButton1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
            jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/Contacts 1.png"))); // NOI18N
            jButton1.setText("Add Service Fee");
            jButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton1ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 10;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel23.add(jButton1, gridBagConstraints);

            payerMobileTelephoneNumberTxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bill Payer Telephone No.", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 0, 51)));
            payerMobileTelephoneNumberTxt.setForeground(new java.awt.Color(0, 0, 255));
            try {
                payerMobileTelephoneNumberTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("254-7##-######")));
            } catch (java.text.ParseException ex) {
                ex.printStackTrace();
            }
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 10;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel23.add(payerMobileTelephoneNumberTxt, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.gridwidth = 10;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel13.add(jPanel23, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.gridwidth = 10;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
            gridBagConstraints.weightx = 1.0;
            jPanel13.add(jSeparator12, gridBagConstraints);

            jLabel532.setText("Amount");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 6;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.weightx = 1.0;
            jPanel13.add(jLabel532, gridBagConstraints);

            jTextField32.setEditable(false);
            jTextField32.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            jTextField32.setText("0.00");
            jTextField32.setMinimumSize(new java.awt.Dimension(0, 0));
            jTextField32.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
            jPanel13.add(jTextField32, gridBagConstraints);

            jTextField10.setEditable(false);
            jTextField10.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            jTextField10.setText("0.00");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 7;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 2.0;
            jPanel13.add(jTextField10, gridBagConstraints);

            jTextField3.setText("0.00");
            jTextField3.setMinimumSize(new java.awt.Dimension(0, 0));
            jTextField3.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 6;
            gridBagConstraints.gridy = 1;
            jPanel13.add(jTextField3, gridBagConstraints);

            jTextField1.setEditable(false);
            jTextField1.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
            jTextField1.setText("0.00");
            jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    jTextField1KeyReleased(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.2;
            jPanel13.add(jTextField1, gridBagConstraints);

            jLabel16.setText("Net Total");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 8;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.weightx = 1.0;
            jPanel13.add(jLabel16, gridBagConstraints);

            billTotalTxt.setEditable(false);
            billTotalTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
            billTotalTxt.setText("0.00");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 9;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.5;
            jPanel13.add(billTotalTxt, gridBagConstraints);

            jLabel2.setText("Discount Amt.");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.weightx = 1.0;
            jPanel13.add(jLabel2, gridBagConstraints);

            jLabel1.setText("Discount %");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel13.add(jLabel1, gridBagConstraints);

            jTextField2.setEditable(false);
            jTextField2.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
            jTextField2.setText("0.00");
            jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    jTextField2KeyReleased(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel13.add(jTextField2, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 7;
            gridBagConstraints.gridheight = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 20.0;
            gridBagConstraints.weighty = 50.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
            jPanel5.add(jPanel13, gridBagConstraints);

            jPanel9.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
            jPanel9.setLayout(new java.awt.GridBagLayout());

            jButton12.setMnemonic('s');
            jButton12.setText("Save cash bill");
            jButton12.setToolTipText("Click here enter data");
            jButton12.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton12ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel9.add(jButton12, gridBagConstraints);

            jButton63.setMnemonic('r');
            jButton63.setText("Remove Row");
            jButton63.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton63ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel9.add(jButton63, gridBagConstraints);

            jButton32.setMnemonic('l');
            jButton32.setText("Clear");
            jButton32.setToolTipText("Click here to clear textfields");
            jButton32.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton32ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel9.add(jButton32, gridBagConstraints);

            jButton41.setMnemonic('C');
            jButton41.setText("Close");
            jButton41.setToolTipText("Click here to close window");
            jButton41.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton41ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 7;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel9.add(jButton41, gridBagConstraints);

            jButton54.setMnemonic('h');
            jButton54.setText("Help");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 8;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel9.add(jButton54, gridBagConstraints);

            jButton121.setMnemonic('p');
            jButton121.setText("Save & Print");
            jButton121.setToolTipText("Click here enter data");
            jButton121.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton121ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel9.add(jButton121, gridBagConstraints);

            jButton122.setMnemonic('R');
            jButton122.setText("Reprint");
            jButton122.setToolTipText("Click here enter data");
            jButton122.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton122ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel9.add(jButton122, gridBagConstraints);

            jButton7.setMnemonic('h');
            jButton7.setText("Read Card");
            jButton7.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton7ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel9.add(jButton7, gridBagConstraints);

            spacerPanel.setLayout(new java.awt.GridBagLayout());

            payBillNumberTxt.setEditable(false);
            payBillNumberTxt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
            payBillNumberTxt.setText(com.afrisoftech.lib.CashShiftNumberFactory.getPayBillNumber(connectDB)
            );
            payBillNumberTxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "PayBill Number", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 0, 51)));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            spacerPanel.add(payBillNumberTxt, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 5.0;
            jPanel9.add(spacerPanel, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 7;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.gridheight = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            jPanel5.add(jPanel9, gridBagConstraints);

            jTabbedPane1.addTab("Raise vouchers for cash sales (Patient to proceed to the cash point to pay for items before dispensing)", jPanel5);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            getContentPane().add(jTabbedPane1, gridBagConstraints);

            setBounds(0, 0, 1046, 783);
        }// </editor-fold>//GEN-END:initComponents

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jComboBox4ActionPerformed

    private void storeNameCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storeNameCmbxActionPerformed
        try {
            java.sql.Statement ps11 = connectDB.createStatement();
            java.sql.ResultSet rst11 = ps11.executeQuery("select code from pb_activity WHERE activity ilike '" + storeNameCmbx.getSelectedItem() + "'");
            while (rst11.next()) {

                gLCodeTxt.setText(rst11.getString(1));
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
        }// TODO add your handling code here:
    }//GEN-LAST:event_storeNameCmbxActionPerformed

    private void jSearchTable3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable3MouseEntered
// TODO add your handling code here:
    }//GEN-LAST:event_jSearchTable3MouseEntered

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        com.afrisoftech.hospinventory.PatientsBillingIntfr.jTextField16.setText("");
        com.afrisoftech.hospinventory.PatientsBillingIntfr.jTextField21.setText("");
        com.afrisoftech.hospinventory.PatientsBillingIntfr.jTextField19.setText("");
        com.afrisoftech.hospinventory.PatientsBillingIntfr.jTextField20.setText("");

        java.io.File xmlDocFile = null;

        xmlDocFile = new java.io.File(System.getProperty("docsdir"), "ForwardedCardData.xml");

        biz.systempartners.claims.XMLClaimFile claimFile = new biz.systempartners.claims.XMLClaimFile();

        claimFile.processFile(xmlDocFile);

        xmlDocFile = new java.io.File(System.getProperty("docsdir"), "ForwardedCardData.xml");

        javax.swing.JOptionPane.showMessageDialog(this, "Smart Card read successfully with identity:\nCard Number :[" + claimFile.cardNumber + "] and Name : [" + claimFile.patientSurName + " " + claimFile.patientForenames + "]");

        com.afrisoftech.hospinventory.PatientsBillingIntfr.jTextField16.setText(claimFile.medicalAidCode);
        com.afrisoftech.hospinventory.PatientsBillingIntfr.jTextField19.setText(claimFile.medicalAidNumber);
        com.afrisoftech.hospinventory.PatientsBillingIntfr.jTextField20.setText(claimFile.patientSurName + " " + claimFile.patientForenames);
        com.afrisoftech.hospinventory.PatientsBillingIntfr.jTextField21.setText(claimFile.cardBalance);
        if (jTextField16.getText().equalsIgnoreCase("")) {
            jTextField19.setText("");
        } else {
            try {

                java.sql.Statement st1 = connectDB.createStatement();
                java.sql.ResultSet rsetTable1 = st1.executeQuery("select account_no,scheme_name,payer_name FROM ac_schemes WHERE sch_abbrev ILIKE '" + claimFile.medicalAidCode + "'");
                while (rsetTable1.next()) {

                    jTextField14.setText(rsetTable1.getString(2));
                    jTextField17.setText(rsetTable1.getString(1));
                    jTextField18.setText(rsetTable1.getString(3));
                }
                // jButton121.setEnabled(true);
                jButton12.setEnabled(true);
                jButton122.setEnabled(false);
                jButton7.setEnabled(false);
                //javax.swing.JOptionPane.showMessageDialog(this,"You must retrieve from smart link","Information Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);

            } catch (java.sql.SQLException sqlExec) {

                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

            }
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jTextField18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField18ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jTextField18ActionPerformed

    private void jTextField17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField17ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jTextField17ActionPerformed

    private void dispose11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispose11ActionPerformed
        jSearchDialog13.dispose(); // Add your handling code here:
    }//GEN-LAST:event_dispose11ActionPerformed

    private void jSearchTable13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable13MouseClicked
        jTextField14.setText(jSearchTable13.getValueAt(jSearchTable13.getSelectedRow(), 1).toString());
        jTextField18.setText(jSearchTable13.getValueAt(jSearchTable13.getSelectedRow(), 2).toString());
        jTextField17.setText(jSearchTable13.getValueAt(jSearchTable13.getSelectedRow(), 0).toString());

        jSearchDialog13.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable13MouseClicked

    private void jTextField1113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1113CaretUpdate
        if (jTextField1113.getCaretPosition() < 3) {

            System.out.println("Nothing");
        } else {

            jSearchTable13.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT account_no,scheme_name,payer_name from ac_schemes where scheme_name ILIKE '" + jTextField1113.getText() + "%' order by scheme_name"));


            /*   searchRowSet11.execute("SELECT account_no,scheme_name,payer_name from ac_schemes where scheme_name ILIKE '"+jTextField1111.getText()+"%' order by scheme_name");
             //     searchRowSet.execute("SELECT patient_no, (upper(first_name||' '||second_name)) as name, year_of_birth, residence from hp_patient_register where (upper(first_name||' '||second_name)) ILIKE '"+jTextField11.getText()+"%' order by first_name");
            
             jSearchTable11.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet11, new org.netbeans.lib.sql.models.TableModel.Column[] {
             new org.netbeans.lib.sql.models.TableModel.Column("account_no", "Account no", false),
             new org.netbeans.lib.sql.models.TableModel.Column("scheme_name", "Name", false),
             new org.netbeans.lib.sql.models.TableModel.Column("payer_name", "Payer", false)
            
             }));
             */
            jSearchTable13.setShowHorizontalLines(false);
            jSearchScrollPane13.setViewportView(jSearchTable13);

        }         // Add your handling code here:
    }//GEN-LAST:event_jTextField1113CaretUpdate

    private void searchButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton3ActionPerformed
        searchButton11aClicked();         // Add your handling code here:
    }//GEN-LAST:event_searchButton3ActionPerformed
    private void searchButton11aClicked() {

        System.out.println("Showing dialog");

        jSearchDialog13.dispose();

        java.awt.Point point = this.jTextField14.getLocationOnScreen();

        jSearchDialog13.setSize(400, 200);

        jSearchDialog13.setLocation(point);

        jSearchDialog13.setVisible(true);
    }
    private void jTextField2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyReleased
        if (jTextField2.getText().equalsIgnoreCase("")) {
            jTextField2.setText("0.00");
            jTextField1.setText("0.00");

        } else {
            double discAllowed = 0.00;
            double discount = java.lang.Float.parseFloat(jTextField2.getText());
            double total = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(mainItemstbl, 5);
            discAllowed = java.lang.Math.round(total * (discount / 100));
            jTextField1.setText("" + discAllowed + "");
            jTextField1KeyReleased(evt);
        }
// TODO add your handling code here:
    }//GEN-LAST:event_jTextField2KeyReleased

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        if (jTextField1.getText().equalsIgnoreCase("")) {
        } else {
            double discAllowed = 0;
            double discount = java.lang.Float.parseFloat(jTextField1.getText());
            double total = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(mainItemstbl, 5);

            // float total = java.lang.Float.parseFloat(jTextField10.getText());
            try {

                java.sql.Statement pstmt1 = connectDB.createStatement();
                java.sql.ResultSet rs1 = pstmt1.executeQuery("select disc_allowed from st_stock_control"); //from orders where supplier ='"+jTable1.getValueAt(i,4).toString()+"'");

                while (rs1.next()) {

                    discAllowed = rs1.getFloat(1);
                }

            } catch (java.sql.SQLException sq) {
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

                System.out.println(sq.getMessage());

            }
            if (discount > total * (discAllowed / 100)) {
                javax.swing.JOptionPane.showMessageDialog(this, "The discount you are giving is higher than the authorised one. \n Should be not more than [ " + total * (discAllowed / 100) + " ]", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                billTotalTxt.setText("0.00");
                jTextField1.setText("0.00");
            } else {
                if (discount <= total * (discAllowed / 100)) {
                    double num_d = total - discount;
                    billTotalTxt.setText("" + num_d + "");

                    if (num_d < 0) {
                        billTotalTxt.setForeground(java.awt.Color.red);
                    } else {
                        billTotalTxt.setForeground(java.awt.Color.blue);
                    }
                }
            }
        }
// TODO add your handling code here:
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox6ActionPerformed
        //this.jTextField4.setText(this.jCheckBox6.getText());        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox6ActionPerformed

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed
        //  jTextField4.setText(this.jCheckBox5.getText());   // Add your handling code here:
    }//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jButton122ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton122ActionPerformed
        double amount1 = 0.00;
        double percentage = 0.00;
        double TotalPrice = 0.00;
        double total = 0.00;
        double quantity = 0.00;
        double Total = 0.00;
        String billNo = null;
        transNo = null;
        String payMode = null;
        String patientAcc = null;
        String cardNo = null;
        String AccDesc = null;
        String scheme = null;
        String cardName = null;
        String isurer = null;
        String expDate = null;
        String staffNo = null;
        String BillNo = null;
        String glAcc = null;
        // String BillNo = null;
        String code = null;
        String user = null;
        String prescNo = null;
        String glAcc2 = null;
        String chbox = null;
        int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "Do you really want to Save?", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

        if (exitOption == javax.swing.JOptionPane.YES_OPTION) {

            //     double presc = java.lang.Double.parseDouble(jTextField8.getText());
            if (OutptChkbx.isSelected()) {
                chbox = "OP";
            } else {
                if (WalkinPtbx.isSelected()) {
                    chbox = "WI";
                } else {
                    if (jCheckBox3.isSelected()) {
                        chbox = "IP";
                    }
                }
            }

            String receiptNo = null;
            int k = 1;
            try {
                connectDB.setAutoCommit(false);

                //wait(10000);
                while (k != 0) {

                    if (transNo != null) {
                        k = 0;
                    }

                }
                connectDB.setAutoCommit(false);

                java.sql.Statement psq = connectDB.createStatement();
                java.sql.ResultSet rstq = psq.executeQuery("select currval('prescription_no')");
                while (rstq.next()) {
                    rstq.getObject(1).toString();

                    prescNo = rstq.getObject(1).toString();
                }

                connectDB.commit();
                connectDB.setAutoCommit(true);

                com.afrisoftech.txtreports.PrescriptionTxt policy = new com.afrisoftech.txtreports.PrescriptionTxt(connectDB, jTextField92.getText(), jTextField13.getText(), prescNo, paymentModeCmbx.getSelectedItem().toString());

                //  BillInvoicePdf policy = new BillInvoicePdf();
                //  policy.BillInvoicePdf(connectDB,jTextField9.getText(), jTextField1.getText(),jTextField3.getText(),prescNo,jTextField5.getText(),jTable1,datePicker1.getDate());
                // }
                //  jComboBox2.setSelectedItem(null);
            } catch (java.sql.SQLException sq) {

                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    sql.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

        }        // Add your handling code here:
    }//GEN-LAST:event_jButton122ActionPerformed

    private void jButton121ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton121ActionPerformed
        double amount1 = 0.00;
        double percentage = 0.00;
        double TotalPrice = 0.00;
        double total = 0.00;
        double quantity = 0.00;
        double Total = 0.00;
        String billNo = null;
        transNo = null;
        String payMode = null;
        String patientAcc = null;
        String cardNo = null;
        String AccDesc = null;
        String scheme = null;
        String cardName = null;
        String isurer = null;
        String expDate = null;
        String staffNo = null;
        String BillNo = null;
        String glAcc = null;
        // String BillNo = null;
        String code = null;
        String user = null;
        String prescNo = null;
        String glAcc2 = null;
        String chbox = null;
        int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "Do you really want to Save?", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

        if (exitOption == javax.swing.JOptionPane.YES_OPTION) {

            //  double presc = java.lang.Double.parseDouble(jTextField8.getText());
            if (OutptChkbx.isSelected()) {
                chbox = "OP";
            } else {
                if (WalkinPtbx.isSelected()) {
                    chbox = "WI";
                } else {
                    if (jCheckBox3.isSelected()) {
                        chbox = "IP";
                    }
                }
            }

            jButton12ActionPerformed(evt);
            jButton122ActionPerformed(evt);
            /*try {
            
             connectDB.setAutoCommit(false);
            
            
             java.sql.Statement psq = connectDB.createStatement();
             java.sql.ResultSet rstq = psq.executeQuery("select currval('prescription_no')");
             while (rstq.next()){
             rstq.getObject(1).toString();
            
             prescNo = rstq.getObject(1).toString();
             }
            
             connectDB.commit();
             connectDB.setAutoCommit(true);
            
             com.afrisoftech.txtreports.PrescriptionTxt policy = new com.afrisoftech.txtreports.PrescriptionTxt(connectDB, jTextField92.getText(),jTextField13.getText(),prescNo,jComboBox1.getSelectedItem().toString());
            
            
            
             for (int k = 0; k < jTable13.getRowCount(); k++ ) {
             for (int r = 0; r < jTable13.getColumnCount(); r++ ) {
             jTable13.getModel().setValueAt(null,k,r);
             }
             }
            
            
             // }
             //  jComboBox2.setSelectedItem(null);
             }catch(java.sql.SQLException sq){
            
             try {
             connectDB.rollback();
             }catch (java.sql.SQLException sql){
             sql.printStackTrace();
             javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
             }
             System.out.println(sq.getMessage());
             javax.swing.JOptionPane.showMessageDialog(this,sq.getMessage(), "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            
             }
             */

        }        // Add your handling code here:
    }//GEN-LAST:event_jButton121ActionPerformed

    private void searchButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton4ActionPerformed
        searchButtonClicked4();    // Add your handling code here:
    }//GEN-LAST:event_searchButton4ActionPerformed

    private void jSearchTable4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable4MouseClicked
        jTextField32.setText("0.00");
        jTextField92.setText("");

        jTextField13.setText("");
        jTextField22.setText("");
        jTextField93.setText(jSearchTable4.getValueAt(jSearchTable4.getSelectedRow(), 0).toString());

        jTextField92.setText(jSearchTable4.getValueAt(jSearchTable4.getSelectedRow(), 1).toString());
        jTextField13.setText(jSearchTable4.getValueAt(jSearchTable4.getSelectedRow(), 2).toString());
        jTextField5.setText(jSearchTable4.getValueAt(jSearchTable4.getSelectedRow(), 3).toString());
        double limit = 0.00;
        double bal = 0.00;
        double rect = 0.00;
        double outstanding = 0.00;
        boolean appLimit = false;
        String memberno = null;
        int interval = 0;

        smartcard = false;
        // jTextField32.setText("0.00");

        for (int k = 0; k < mainItemstbl.getRowCount(); k++) {
            for (int r = 0; r < mainItemstbl.getColumnCount(); r++) {
                mainItemstbl.getModel().setValueAt(null, k, r);
            }
        }

        int j = 0;
        if (jCheckBox3.isSelected()) {
            try {

                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode,description,member_no from hp_inpatient_register where patient_no  = '" + this.jTextField92.getText().toString() + "'");
                while (rset1.next()) {
                    jTextField22.setText(rset1.getObject(1).toString());
                    paymentModeCmbx.setSelectedItem(rset1.getObject(2).toString());
                    jTextField14.setText(dbObject.getDBObject(rset1.getObject(3), "-").toString());
                    memberno = dbObject.getDBObject(rset1.getObject(4), "-").toString();
                    System.out.println(memberno);
                }

                if (paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {

                    java.sql.Statement stmt1cz3 = connectDB.createStatement();
                    java.sql.ResultSet rset1cz3 = stmt1cz3.executeQuery("SELECT account_no,payer_name,usesmartcard FROM ac_schemes WHERE scheme_name  ILIKE '" + jTextField14.getText() + "'");
                    while (rset1cz3.next()) {
                        jTextField17.setText(rset1cz3.getObject(1).toString());
                        jTextField18.setText(rset1cz3.getObject(2).toString());
                        smartcard = rset1cz3.getBoolean(3);
                    }
                    if (OutptChkbx.isSelected()) {
                        if (smartcard) {
                            jButton12.setEnabled(false);
                            jButton121.setEnabled(false);
                            jButton122.setEnabled(false);
                            jButton7.setEnabled(true);
                            javax.swing.JOptionPane.showMessageDialog(this, "You must FORWARD from smart link".toUpperCase(), "Information Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                        }
                    }
                    java.sql.Statement stmt1cz = connectDB.createStatement();
                    java.sql.ResultSet rset1cz = stmt1cz.executeQuery("select applylimit from hp_schemestaff where staff_no  ='" + memberno + "' and applylimit = true");
                    while (rset1cz.next()) {
                        appLimit = rset1cz.getBoolean(1);
                    }
                    System.out.println(appLimit);
                    if (appLimit) {
                        ageingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, datePicker1.getDate());

                        java.lang.Object[][] rangeDates = ageingSeries.getAgeingDateSeries();

                        // ageingDates = ageingSeries.getAgeingDateSeries();
                        // double columnTotals[] = new double[rangeDates.length];
                        for (int x = 0; x < rangeDates.length; x++) {
                            System.out.println(rangeDates[x]);
                            try {

                                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
                                com.afrisoftech.lib.DateFormatter dateFormatter = new com.afrisoftech.lib.DateFormatter(dateFormat.parse(rangeDates[x][0].toString().trim()), "yyyy");

                                java.lang.String monthString = dateFormatter.getDateString();

                                interval = x;

                            } catch (java.text.ParseException prs) {
                                prs.printStackTrace();
                            }
                        }
                        java.sql.Statement stmt1c = connectDB.createStatement();
                        java.sql.ResultSet rset1c = stmt1c.executeQuery("select iplimit from hp_schemestaff where staff_no  ='" + memberno + "' and applylimit = true");
                        while (rset1c.next()) {
                            limit = rset1c.getDouble(1);
                        }
                        for (int t = 0; t < rangeDates.length; t++) {
                            java.sql.Statement stmt1cx = connectDB.createStatement();
                            System.out.println("Dates between : " + rangeDates[t][0] + " AND " + rangeDates[t][1]);
                            java.sql.ResultSet rset1cx = stmt1cx.executeQuery("select sum(balance) from ac_debtors where member_no  ='" + memberno + "' AND date between '" + rangeDates[t][0] + "' AND '" + rangeDates[t][1] + "' AND payee ilike '" + jTextField10.getText() + "'");
                            while (rset1cx.next()) {
                                bal = rset1cx.getDouble(1);
                                System.out.println(bal);
                            }
                        }
                        outstanding = limit - bal;
                        // jTextField8.setText(java.lang.String.valueOf(outstanding));
                        if (outstanding >= limit) {
                            javax.swing.JOptionPane.showMessageDialog(this, "The patient has exausted the member limit", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        } else {
                        }
                    }
                }

            } catch (java.sql.SQLException sqlex) {
                System.out.println(sqlex.getMessage());
            }

        } else {
            try {

                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode,description,card_no from hp_patient_register where patient_no  = '" + jTextField92.getText() + "'");
                while (rset1.next()) {
                    jTextField22.setText(rset1.getObject(1).toString());
                    paymentModeCmbx.setSelectedItem(rset1.getObject(2).toString());
                    jTextField14.setText(dbObject.getDBObject(rset1.getObject(3), "-").toString());
                    memberno = dbObject.getDBObject(rset1.getObject(4), "-").toString();
                    System.out.println(memberno);
                }

                if (paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {
                    java.sql.Statement stmt1cz3 = connectDB.createStatement();
                    java.sql.ResultSet rset1cz3 = stmt1cz3.executeQuery("SELECT account_no,payer_name,usesmartcard FROM ac_schemes WHERE scheme_name  ILIKE '" + jTextField14.getText() + "'");
                    while (rset1cz3.next()) {
                        jTextField17.setText(rset1cz3.getObject(1).toString());
                        jTextField18.setText(rset1cz3.getObject(2).toString());
                        smartcard = rset1cz3.getBoolean(3);
                    }
                    if (OutptChkbx.isSelected()) {
                        if (smartcard) {
                            jButton12.setEnabled(false);
                            jButton121.setEnabled(false);
                            jButton122.setEnabled(false);
                            jButton7.setEnabled(true);
                            javax.swing.JOptionPane.showMessageDialog(this, "You must FORWARD from smart link".toUpperCase(), "Information Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                        }
                    }
                    java.sql.Statement stmt1cz = connectDB.createStatement();
                    java.sql.ResultSet rset1cz = stmt1cz.executeQuery("select limit_amount from hp_schemestaff where staff_no  ='" + memberno + "' and applylimit = true");
                    while (rset1cz.next()) {
                        appLimit = rset1cz.getBoolean(1);
                    }
                    System.out.println(appLimit);
                    if (appLimit) {
                        ageingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, datePicker1.getDate());

                        java.lang.Object[][] rangeDates = ageingSeries.getAgeingDateSeries();

                        // ageingDates = ageingSeries.getAgeingDateSeries();
                        // double columnTotals[] = new double[rangeDates.length];
                        for (int x = 0; x < rangeDates.length; x++) {
                            System.out.println(rangeDates[x]);
                            try {

                                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
                                com.afrisoftech.lib.DateFormatter dateFormatter = new com.afrisoftech.lib.DateFormatter(dateFormat.parse(rangeDates[x][0].toString().trim()), "yyyy");

                                java.lang.String monthString = dateFormatter.getDateString();

                                interval = x;

                            } catch (java.text.ParseException prs) {
                                prs.printStackTrace();
                            }
                        }
                        java.sql.Statement stmt1c = connectDB.createStatement();
                        java.sql.ResultSet rset1c = stmt1c.executeQuery("select iplimit from hp_schemestaff where staff_no  ='" + memberno + "' and applylimit = true");
                        while (rset1c.next()) {
                            limit = rset1c.getDouble(1);
                        }
                        for (int t = 0; t < rangeDates.length; t++) {
                            java.sql.Statement stmt1cx = connectDB.createStatement();
                            System.out.println("Dates between : " + rangeDates[t][0] + " AND " + rangeDates[t][1]);
                            java.sql.ResultSet rset1cx = stmt1cx.executeQuery("select sum(balance) from ac_debtors where member_no  ='" + memberno + "' AND date between '" + rangeDates[t][0] + "' AND '" + rangeDates[t][1] + "' AND payee ilike '" + jTextField10.getText() + "'");
                            while (rset1cx.next()) {
                                bal = rset1cx.getDouble(1);
                                System.out.println(bal);
                            }
                        }
                        outstanding = limit - bal;
                        // jTextField8.setText(java.lang.String.valueOf(outstanding));
                        if (outstanding >= limit) {
                            javax.swing.JOptionPane.showMessageDialog(this, "The patient has exausted the member limit", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        } else {
                        }
                    }
                }
            } catch (java.sql.SQLException sqe) {
                sqe.printStackTrace();
                //  System.out.println("Insert not successful");
            }
        }

        try {
            // int j = 0;
            java.sql.Statement stmt = connectDB.createStatement();

            java.sql.ResultSet rset = stmt.executeQuery("SELECT count(patient_no) FROM hp_pharmacy where patient_no  ='" + jTextField92.getText() + "' and paid = false");

            while (rset.next()) {
                j = rset.getInt(1);
            }
            if (j > 0) {
                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select sum(amount) from hp_pharmacy where patient_no  ='" + jTextField92.getText() + "' and paid = false");
                while (rset1.next()) {
                    jTextField10.setText(rset1.getObject(1).toString());
                    //jTextField5.setText(rset1.getObject(2).toString());
                }
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }

        this.populateTable1(this.jTextField92.getText().trim(), this.jTextField93.getText().trim(), this.jTextField5.getText().trim());

        jSearchDialog4.dispose();  // Add your handling code here:
    }//GEN-LAST:event_jSearchTable4MouseClicked

    private void jTextField115CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField115CaretUpdate
        if (jTextField115.getCaretPosition() >= 5) {
            jSearchTable4.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                    + "SELECT  distinct prescription_no,patient_no, patient_name,visit_id,date_prescribed\n"
                    + "  FROM hp_pharmacy where   paid=false and collected = false  and (prescription_no ilike '" + jTextField115.getText() + "%' or patient_no ilike '" + jTextField115.getText() + "%') order by date_prescribed desc  ;"
                    + ""));

            /*try {
             searchRowSet4.execute("select chq_no FROM pb_documents_register WHERE chq_no ILIKE '"+jTextField115.getText()+"%' and used = 'false' and doc_name ilike '%pha%' order by chq_no");
            
             jSearchTable4.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet4, new org.netbeans.lib.sql.models.TableModel.Column[] {
             new org.netbeans.lib.sql.models.TableModel.Column("chq_no", "Prescription No.", false)
             // new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Selling price", false),
             // new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl code", false)
             }));
             */
            jSearchScrollPane4.setViewportView(jSearchTable4);
            System.out.println("Cannot sort out");

        }  // Add your handling code here:
    }//GEN-LAST:event_jTextField115CaretUpdate

    private void jButton93ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton93ActionPerformed
        this.jSearchDialog4.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton93ActionPerformed
    private void searchButtonClicked4() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.jTextField93.getLocationOnScreen();

        jSearchDialog4.setSize(400, 200);

        jSearchDialog4.setLocation(point);

        jSearchDialog4.setVisible(true);

    }
    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        javax.swing.JInternalFrame other = new ServiceAccSlipIntfr(connectDB, pConnDB);
        this.getParent().add(other, javax.swing.JLayeredPane.DEFAULT_LAYER);
        try {
            other.setSelected(true);
        } catch (java.beans.PropertyVetoException pvt) {
        }
        other.setVisible(true);            // Add your handling code here:
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jButton32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton32ActionPerformed
        jTextField13.setText("");
        jTextField32.setText("0.00");
        jTextField2.setText("0.00");
        jTextField1.setText("0.00");
        jTextField10.setText("0.00");
        billTotalTxt.setText("0.00");
        jTextField82.setText("0.00");
        jTextField21.setText("0.00");
        jTextField22.setText("");
        jTextField92.setText("");
        jTextField19.setText("");
        jTextField20.setText("");

        jTextField16.setText("");
        jTextField14.setText("");
        jTextField17.setText("");
        jTextField18.setText("");
        // jTextField32.setText("0.00");

        for (int k = 0; k < mainItemstbl.getRowCount(); k++) {
            for (int r = 0; r < mainItemstbl.getColumnCount(); r++) {
                mainItemstbl.getModel().setValueAt(null, k, r);
            }
        }

        //  jTextField3.setText("0.00");// Add your handling code here:
    }//GEN-LAST:event_jButton32ActionPerformed

    private void jButton41ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton41ActionPerformed
        this.setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_jButton41ActionPerformed

    private void jButton63ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton63ActionPerformed

        int rows2Delete = mainItemstbl.getSelectedRowCount();

        int[] selectedRows = mainItemstbl.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) mainItemstbl.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) mainItemstbl.getModel();

                defTableModel.removeRow(mainItemstbl.getSelectedRow());
            }
        }

        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(mainItemstbl, 5);
        //double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable11, 3);
        double roundedsum = (int) Math.round(totalSum / 5.0) * 5;
        jTextField10.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(roundedsum));
        //    jTextField15.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
        billTotalTxt.setText(java.lang.String.valueOf(roundedsum));
        // Add your handling code here:
    }//GEN-LAST:event_jButton63ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        java.util.Date periodFrom = null;
        java.util.Date periodTo = null;
        java.util.Date toDaysDate = null;
        boolean smartcard = false;

        if (paymentModeCmbx.getSelectedItem().toString().contains("Pesa")) {
            String payerTelephoneNumber = null;

            System.out.println("Payer Mobile Telephone Number : [" + payerMobileTelephoneNumberTxt.getText().replace("-", "").length() + "]");

            if (paymentModeCmbx.getSelectedItem().toString().contains("Pesa") && payerMobileTelephoneNumberTxt.getText().replace("-", "").length() == 12) {
                payerTelephoneNumber = payerMobileTelephoneNumberTxt.getText().replace("-", "");

                java.sql.Savepoint registerSavePoint = null;
                try {
                    try {
                        connectDB.setAutoCommit(false);
                        registerSavePoint = connectDB.setSavepoint("registration");
                    } catch (java.sql.SQLException ex) {
                        ex.printStackTrace();
                    }

                    java.sql.Statement stmtf = connectDB.createStatement();
                    java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + datePicker1.getDate() + "' BETWEEN period_from AND period_to");
                    while (rsetf.next()) {
                        periodFrom = rsetf.getDate(1);
                        periodTo = rsetf.getDate(2);
                    }

                    if (datePicker1.getDate().before(periodFrom) || datePicker1.getDate().after(periodTo)) {
                        javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    } else {
                    }

                    // jTable13.setEditingRow(-1);
                    if (mainItemstbl.isEditing()) {
                        mainItemstbl.getCellEditor().stopCellEditing();
                    }
                    // try {
                    double amount1 = 0.00;
                    double percentage = 0.00;
                    double TotalPrice = 0.00;
                    double total = 0.00;
                    double presc = 0.00;
                    double Total = 0.00;

                    java.util.Calendar calendar = java.util.Calendar.getInstance();

                    long dateNow = calendar.getTimeInMillis();

                    java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

                    System.out.println(datenowSql1.toString());

                    java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

                    System.out.println(datenowSql.toString());

                    String billNo = null;
                    transNo = null;
                    String payMode = null;
                    String patientAcc = null;
                    String cardNo = null;
                    String AccDesc = null;
                    String scheme = null;
                    String cardName = null;
                    String isurer = null;
                    java.sql.Date expDate = null;
                    String staffNo = null;
                    String BillNo = null;
                    String glAcc = null;
                    // String BillNo = null;
                    String code = null;
                    String user = null;
                    String prescNo = null;
                    java.util.Date admDate = null;
                    String visitid = jTextField5.getText().toString();
                    String costofSaleCode = null;
                    String stockCode = null;
                    String costofSale = null;
                    String stock = null;
                    String discode = null;
                    String discglAcc = null;
                    String invoiceNo = null;
                    String strength = null;
                    double discounte = java.lang.Double.parseDouble(jTextField1.getText());

                    double sellPrice = 0.00;
                //int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "Do you really want to Save?", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

                //if (exitOption == javax.swing.JOptionPane.YES_OPTION) {
                    // presc = java.lang.Double.parseDouble(jTextField8.getText());
                    if (OutptChkbx.isSelected()) {
                        chbox = "OP";
                    } else {
                        if (WalkinPtbx.isSelected()) {
                            chbox = "WI";
                        } else {
                            if (jCheckBox3.isSelected()) {
                                chbox = "IP";
                            }
                        }
                    }

                    java.sql.Statement stm121x = connectDB.createStatement();

                    java.sql.ResultSet rse121x = stm121x.executeQuery("select direct_rev from pb_patient_names");
                    while (rse121x.next()) {

                        DirectRev = rse121x.getBoolean(1);

                    }
                    java.sql.Statement ps11Y = connectDB.createStatement();
                    java.sql.ResultSet rst11Y = ps11Y.executeQuery("select current_user");
                    while (rst11Y.next()) {
                        user = rst11Y.getObject(1).toString();
                    }
                    java.sql.Statement stm122x = connectDB.createStatement();
                    java.sql.ResultSet rse122x = stm122x.executeQuery("select code,activity from pb_activity where activity_category ='EDS'");
                    while (rse122x.next()) {

                        discode = rse122x.getObject(1).toString();
                        discglAcc = rse122x.getObject(2).toString();
                    }
                    java.sql.Statement psq = connectDB.createStatement();
                    java.sql.ResultSet rstq = psq.executeQuery("select nextval('prescription_no')");
                    while (rstq.next()) {
                        rstq.getObject(1).toString();

                        prescNo = rstq.getObject(1).toString();

                    }
                    System.out.println(prescNo);
                    java.sql.Statement stmtz = connectDB.createStatement();

                    if (this.WalkinPtbx.isSelected()) {
                        jTextField92.setText("WK" + prescNo);
                    }

                    System.out.println(transNo);

                    System.out.println(user);
                    java.sql.Statement stm122 = connectDB.createStatement();
                    java.sql.ResultSet rse122 = stm122.executeQuery("select code,activity from pb_activity where activity_category ='IP'");
                    while (rse122.next()) {

                        code = rse122.getObject(1).toString();
                        glAcc = rse122.getObject(2).toString();
                    }
                    System.out.println(glAcc);

                    for (int i = 0; i < mainItemstbl.getRowCount(); i++) {
                        if (mainItemstbl.getModel().getValueAt(i, 0) != null) {
                            java.sql.Statement pstz = connectDB.createStatement();
                            java.sql.ResultSet rsz = pstz.executeQuery("SELECT strength FROM st_stock_prices WHERE product_id = '" + mainItemstbl.getValueAt(i, 7).toString() + "'");
                            while (rsz.next()) {
                                strength = rsz.getObject(1).toString();
                            }
                            java.sql.Statement pst21c = connectDB.createStatement();
                            java.sql.ResultSet rs11c = pst21c.executeQuery("select cost_of_sale,stock_code from pb_departments where income_account = '" + mainItemstbl.getValueAt(i, 6).toString() + "'");
                            while (rs11c.next()) {
                                costofSaleCode = rs11c.getObject(1).toString();
                                stockCode = rs11c.getObject(2).toString();
                            }
                            java.sql.Statement pst211c = connectDB.createStatement();
                            java.sql.ResultSet rs111c = pst211c.executeQuery("select activity from pb_activity where code = '" + costofSaleCode + "'");
                            while (rs111c.next()) {
                                costofSale = rs111c.getObject(1).toString();

                            }
                            java.sql.Statement pst2111c = connectDB.createStatement();
                            java.sql.ResultSet rs1111c = pst2111c.executeQuery("select activity from pb_activity where code = '" + stockCode + "'");
                            while (rs1111c.next()) {
                                stock = rs1111c.getObject(1).toString();
                            }
                            presc = java.lang.Double.parseDouble(jTextField82.getText());

                            Total = java.lang.Double.parseDouble(jTextField32.getText());
                            if (Total > presc) {
                                amount1 = java.lang.Double.parseDouble(mainItemstbl.getValueAt(i, 5).toString());

                                percentage = (amount1 / Total) * 100;

                                TotalPrice = ((percentage / 100) * presc) + amount1;
                            } else {
                                amount1 = java.lang.Double.parseDouble(mainItemstbl.getValueAt(i, 5).toString());

                                //  percentage = (amount1/Total)*100;
                                TotalPrice = amount1;
                            }
                            java.sql.Statement stm121 = connectDB.createStatement();
                            java.sql.ResultSet rse121 = stm121.executeQuery("select units from st_stock_item where description ='" + mainItemstbl.getModel().getValueAt(i, 0).toString() + "'");
                            while (rse121.next()) {

                                glAcc2 = rse121.getObject(1).toString();
                                System.out.println(glAcc2);
                            }
                            java.sql.Statement pstB = connectDB.createStatement();
                            java.sql.ResultSet rsB = pstB.executeQuery("select transfer_price,units from st_stock_prices where product_id = '" + mainItemstbl.getModel().getValueAt(i, 7) + "'");

                            while (rsB.next()) {
                                price = rsB.getDouble(1);
                                // units = rsB.getString(2);
                                qty = java.lang.Double.parseDouble(mainItemstbl.getValueAt(i, 1).toString());
                                sellPrice = java.lang.Double.parseDouble(mainItemstbl.getValueAt(i, 3).toString());
                                amount = price * qty;
                            }

                            System.out.println(price);
                            if (PatientCheckBox.isSelected() == true) {
                                if (!paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {
                                    PreparedStatement pstmt1 = connectDB.prepareStatement("insert into hp_pharmacy values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

                                    pstmt1.setString(1, jTextField92.getText());
                                    pstmt1.setString(2, jTextField13.getText());
                                    pstmt1.setDouble(3, java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 1).toString()));
                                    pstmt1.setDouble(4, TotalPrice);
                                    //  pstmt1.setObject(4,jTable13.getValueAt(i,5).toString());
                                    pstmt1.setObject(5, mainItemstbl.getValueAt(i, 0).toString());
                                    pstmt1.setDouble(7, java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 3).toString()));
                                    pstmt1.setObject(8, mainItemstbl.getValueAt(i, 6).toString());
                                    pstmt1.setBoolean(6, false);
                                    if (jTextField93.getText().equals("")) {
                                        pstmt1.setString(9, prescNo);
                                    } else {
                                        pstmt1.setString(9, jTextField93.getText());
                                    }
                                    pstmt1.setObject(10, jComboBox2.getSelectedItem().toString());
                                    pstmt1.setBoolean(11, true);
                                    pstmt1.setString(12, glAcc2);
                                    pstmt1.setDate(13, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt1.setObject(14, jComboBox4.getSelectedItem().toString());
                                    pstmt1.setString(15, "OP");
                                    pstmt1.setString(16, paymentModeCmbx.getSelectedItem().toString());
                                    pstmt1.setString(17, "-");
                                    pstmt1.setDouble(18, TotalPrice - amount1);
                                    pstmt1.setString(19, user);
                                    pstmt1.setString(20, visitID);
                                    pstmt1.setString(21, jTextField93.getText());
                                    pstmt1.setObject(22, mainItemstbl.getValueAt(i, 7).toString());
                                    pstmt1.setObject(23, mainItemstbl.getValueAt(i, 8).toString());
                                    pstmt1.executeUpdate();

                                }
                            } else if (PrescriptionCheckBox.isSelected() == true) {
                                java.sql.PreparedStatement pstmt1;

                                pstmt1 = connectDB.prepareStatement("UPDATE hp_pharmacy\n"
                                        + "   SET   quantity=?, amount=?, "
                                        + "      price=?,   collected=true, "
                                        + "       units=?,  issues_to=current_user,  "
                                        + "        presc_fee=?,    manual_pr=? "
                                        + " WHERE patient_no='" + this.jTextField92.getText() + "' and prescription_no='" + this.jTextField93.getText() + "' and description='" + mainItemstbl.getValueAt(i, 0).toString() + "' ");

                                pstmt1.setDouble(1, java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 1).toString()));
                                pstmt1.setDouble(2, java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 5).toString()));
                                pstmt1.setDouble(3, java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 3).toString()));
                                pstmt1.setString(4, glAcc2);
                                pstmt1.setObject(5, TotalPrice - amount1);
                                pstmt1.setString(6, jTextField93.getText());
                                pstmt1.executeUpdate();

                            }
                        }

                    }
                    jTextField32.setText("0.00");
                    jTextField10.setText("0.00");
                    for (int k = 0; k < mainItemstbl.getRowCount(); k++) {
                        for (int r = 0; r < mainItemstbl.getColumnCount(); r++) {
                            mainItemstbl.getModel().setValueAt(null, k, r);
                        }
                    }
                    javax.swing.JOptionPane.showMessageDialog(this, "Transaction successful.", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    //STK Push for mobile payment
                    javax.swing.JOptionPane.showMessageDialog(this, "Insert Successful.Bill No. " + prescNo + "", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                    {
                        if (paymentModeCmbx.getSelectedItem().toString().contains("Pesa") && payerMobileTelephoneNumberTxt.getText().replace("-", "").length() == 12) {
                            boolean checkoutReturn = com.afrisoftech.funsoft.mobilepay.MobilePayAPI.sendProcessRequest(com.afrisoftech.funsoft.mobilepay.Base64Encoding.encodetoBase64String("Si1Y0dik7IoBEFC9buVTGBBdM0A9mQLw:DlPLOhUtuwdAjzDB"), prescNo, payerTelephoneNumber, String.valueOf(Math.round(Double.parseDouble(billTotalTxt.getText()))), com.afrisoftech.hospital.HospitalMain.payBillNumber);
                            if (checkoutReturn) {
                                java.sql.PreparedStatement pstmtCheckout = connectDB.prepareStatement("UPDATE hp_pharmacy SET checkout_request_id = ? WHERE prescription_no = ?");
                                pstmtCheckout.setString(1, checkoutRequestID);
                                pstmtCheckout.setString(2, prescNo);
                                pstmtCheckout.executeUpdate();
                                pstmtCheckout.close();
                            }
                        }
                    }

                    connectDB.commit();
                    connectDB.setAutoCommit(true);

                } catch (java.sql.SQLException sq) {
                    sq.printStackTrace();
                    try {
                        connectDB.rollback(registerSavePoint);
                    } catch (java.sql.SQLException sql) {
                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                    System.out.println(sq.getMessage());
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                }
            } else if (paymentModeCmbx.getSelectedItem().toString().contains("Pesa") && payerMobileTelephoneNumberTxt.getText().replace("-", "").length() != 12) {
                javax.swing.JOptionPane.showMessageDialog(this, "Please check telephone number! It should be formatted as follows : 2547xxxxxx");
            }

        } else {

            java.sql.Savepoint registerSavePoint = null;
            try {
                try {
                    connectDB.setAutoCommit(false);
                    registerSavePoint = connectDB.setSavepoint("registration");
                } catch (java.sql.SQLException ex) {
                    ex.printStackTrace();
                }

                java.sql.Statement stmtf = connectDB.createStatement();
                java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + datePicker1.getDate() + "' BETWEEN period_from AND period_to");
                while (rsetf.next()) {
                    periodFrom = rsetf.getDate(1);
                    periodTo = rsetf.getDate(2);
                }

                if (datePicker1.getDate().before(periodFrom) || datePicker1.getDate().after(periodTo)) {
                    javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                } else {
                }

                // jTable13.setEditingRow(-1);
                if (mainItemstbl.isEditing()) {
                    mainItemstbl.getCellEditor().stopCellEditing();
                }
                // try {
                double amount1 = 0.00;
                double percentage = 0.00;
                double TotalPrice = 0.00;
                double total = 0.00;
                double presc = 0.00;
                double Total = 0.00;

                java.util.Calendar calendar = java.util.Calendar.getInstance();

                long dateNow = calendar.getTimeInMillis();

                java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

                System.out.println(datenowSql1.toString());

                java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

                System.out.println(datenowSql.toString());

                String billNo = null;
                transNo = null;
                String payMode = null;
                String patientAcc = null;
                String cardNo = null;
                String AccDesc = null;
                String scheme = null;
                String cardName = null;
                String isurer = null;
                java.sql.Date expDate = null;
                String staffNo = null;
                String BillNo = null;
                String glAcc = null;
                // String BillNo = null;
                String code = null;
                String user = null;
                String prescNo = null;
                java.util.Date admDate = null;
                String visitid = jTextField5.getText().toString();
                String costofSaleCode = null;
                String stockCode = null;
                String costofSale = null;
                String stock = null;
                String discode = null;
                String discglAcc = null;
                String invoiceNo = null;
                String strength = null;
                double discounte = java.lang.Double.parseDouble(jTextField1.getText());

                double sellPrice = 0.00;
                //int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "Do you really want to Save?", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

                //if (exitOption == javax.swing.JOptionPane.YES_OPTION) {
                // presc = java.lang.Double.parseDouble(jTextField8.getText());
                if (OutptChkbx.isSelected()) {
                    chbox = "OP";
                } else {
                    if (WalkinPtbx.isSelected()) {
                        chbox = "WI";
                    } else {
                        if (jCheckBox3.isSelected()) {
                            chbox = "IP";
                        }
                    }
                }

                java.sql.Statement stm121x = connectDB.createStatement();

                java.sql.ResultSet rse121x = stm121x.executeQuery("select direct_rev from pb_patient_names");
                while (rse121x.next()) {

                    DirectRev = rse121x.getBoolean(1);

                }
                java.sql.Statement ps11Y = connectDB.createStatement();
                java.sql.ResultSet rst11Y = ps11Y.executeQuery("select current_user");
                while (rst11Y.next()) {
                    user = rst11Y.getObject(1).toString();
                }
                java.sql.Statement stm122x = connectDB.createStatement();
                java.sql.ResultSet rse122x = stm122x.executeQuery("select code,activity from pb_activity where activity_category ='EDS'");
                while (rse122x.next()) {

                    discode = rse122x.getObject(1).toString();
                    discglAcc = rse122x.getObject(2).toString();
                }
                java.sql.Statement psq = connectDB.createStatement();
                java.sql.ResultSet rstq = psq.executeQuery("select nextval('transaction_no_seq')");
                while (rstq.next()) {
                    rstq.getObject(1).toString();

                    prescNo = rstq.getObject(1).toString();

                }
                System.out.println(prescNo);
                java.sql.Statement stmtz = connectDB.createStatement();

                if (this.WalkinPtbx.isSelected()) {
                    jTextField92.setText("WK" + prescNo);
                }

                System.out.println(transNo);

                System.out.println(user);
                java.sql.Statement stm122 = connectDB.createStatement();
                java.sql.ResultSet rse122 = stm122.executeQuery("select code,activity from pb_activity where activity_category ='IP'");
                while (rse122.next()) {

                    code = rse122.getObject(1).toString();
                    glAcc = rse122.getObject(2).toString();
                }
                System.out.println(glAcc);

                for (int i = 0; i < mainItemstbl.getRowCount(); i++) {
                    if (mainItemstbl.getModel().getValueAt(i, 0) != null) {
                        java.sql.Statement pstz = connectDB.createStatement();
                        java.sql.ResultSet rsz = pstz.executeQuery("SELECT strength FROM st_stock_prices WHERE product_id = '" + mainItemstbl.getValueAt(i, 7).toString() + "'");
                        while (rsz.next()) {
                            strength = rsz.getObject(1).toString();
                        }
                        java.sql.Statement pst21c = connectDB.createStatement();
                        java.sql.ResultSet rs11c = pst21c.executeQuery("select cost_of_sale,stock_code from pb_departments where income_account = '" + mainItemstbl.getValueAt(i, 6).toString() + "'");
                        while (rs11c.next()) {
                            costofSaleCode = rs11c.getObject(1).toString();
                            stockCode = rs11c.getObject(2).toString();
                        }
                        java.sql.Statement pst211c = connectDB.createStatement();
                        java.sql.ResultSet rs111c = pst211c.executeQuery("select activity from pb_activity where code = '" + costofSaleCode + "'");
                        while (rs111c.next()) {
                            costofSale = rs111c.getObject(1).toString();

                        }
                        java.sql.Statement pst2111c = connectDB.createStatement();
                        java.sql.ResultSet rs1111c = pst2111c.executeQuery("select activity from pb_activity where code = '" + stockCode + "'");
                        while (rs1111c.next()) {
                            stock = rs1111c.getObject(1).toString();
                        }
                        presc = java.lang.Double.parseDouble(jTextField82.getText());

                        Total = java.lang.Double.parseDouble(jTextField32.getText());
                        if (Total > presc) {
                            amount1 = java.lang.Double.parseDouble(mainItemstbl.getValueAt(i, 5).toString());

                            percentage = (amount1 / Total) * 100;

                            TotalPrice = ((percentage / 100) * presc) + amount1;
                        } else {
                            amount1 = java.lang.Double.parseDouble(mainItemstbl.getValueAt(i, 5).toString());

                            //  percentage = (amount1/Total)*100;
                            TotalPrice = amount1;
                        }
                        java.sql.Statement stm121 = connectDB.createStatement();
                        java.sql.ResultSet rse121 = stm121.executeQuery("select units from st_stock_item where description ='" + mainItemstbl.getModel().getValueAt(i, 0).toString() + "'");
                        while (rse121.next()) {

                            glAcc2 = rse121.getObject(1).toString();
                            System.out.println(glAcc2);
                        }
                        java.sql.Statement pstB = connectDB.createStatement();
                        java.sql.ResultSet rsB = pstB.executeQuery("select transfer_price,units from st_stock_prices where product_id = '" + mainItemstbl.getModel().getValueAt(i, 7) + "'");

                        while (rsB.next()) {
                            price = rsB.getDouble(1);
                            // units = rsB.getString(2);
                            qty = java.lang.Double.parseDouble(mainItemstbl.getValueAt(i, 1).toString());
                            sellPrice = java.lang.Double.parseDouble(mainItemstbl.getValueAt(i, 3).toString());
                            amount = price * qty;
                        }

                        System.out.println(price);
                        if (PatientCheckBox.isSelected() == true) {
                            if (!paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {
                                PreparedStatement pstmt1 = connectDB.prepareStatement("insert into hp_pharmacy values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

                                pstmt1.setString(1, jTextField92.getText());
                                pstmt1.setString(2, jTextField13.getText());
                                pstmt1.setDouble(3, java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 1).toString()));
                                pstmt1.setDouble(4, TotalPrice);
                                //  pstmt1.setObject(4,jTable13.getValueAt(i,5).toString());
                                pstmt1.setObject(5, mainItemstbl.getValueAt(i, 0).toString());
                                pstmt1.setDouble(7, java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 3).toString()));
                                pstmt1.setObject(8, mainItemstbl.getValueAt(i, 6).toString());
                                pstmt1.setBoolean(6, false);
                                if (jTextField93.getText().equals("")) {
                                    pstmt1.setString(9, prescNo);
                                } else {
                                    pstmt1.setString(9, jTextField93.getText());
                                }
                                pstmt1.setObject(10, jComboBox2.getSelectedItem().toString());
                                pstmt1.setBoolean(11, true);
                                pstmt1.setString(12, glAcc2);
                                pstmt1.setDate(13, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                pstmt1.setObject(14, jComboBox4.getSelectedItem().toString());
                                pstmt1.setString(15, "OP");
                                pstmt1.setString(16, paymentModeCmbx.getSelectedItem().toString());
                                pstmt1.setString(17, "-");
                                pstmt1.setDouble(18, TotalPrice - amount1);
                                pstmt1.setString(19, user);
                                pstmt1.setString(20, visitID);
                                pstmt1.setString(21, jTextField93.getText());
                                pstmt1.setObject(22, mainItemstbl.getValueAt(i, 7).toString());
                                pstmt1.setObject(23, mainItemstbl.getValueAt(i, 8).toString());
                                pstmt1.executeUpdate();

                            }
                        } else if (PrescriptionCheckBox.isSelected() == true) {
                            java.sql.PreparedStatement pstmt1;

                            pstmt1 = connectDB.prepareStatement("UPDATE hp_pharmacy\n"
                                    + "   SET   quantity=?, amount=?, "
                                    + "      price=?,   collected=true, "
                                    + "       units=?,  issues_to=current_user,  "
                                    + "        presc_fee=?,    manual_pr=? "
                                    + " WHERE patient_no='" + this.jTextField92.getText() + "' and prescription_no='" + this.jTextField93.getText() + "' and description='" + mainItemstbl.getValueAt(i, 0).toString() + "' ");

                            pstmt1.setDouble(1, java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 1).toString()));
                            pstmt1.setDouble(2, java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 5).toString()));
                            pstmt1.setDouble(3, java.lang.Double.valueOf(mainItemstbl.getValueAt(i, 3).toString()));
                            pstmt1.setString(4, glAcc2);
                            pstmt1.setObject(5, TotalPrice - amount1);
                            pstmt1.setString(6, jTextField93.getText());
                            pstmt1.executeUpdate();

                        }
                    }

                }
                jTextField32.setText("0.00");
                jTextField10.setText("0.00");
                for (int k = 0; k < mainItemstbl.getRowCount(); k++) {
                    for (int r = 0; r < mainItemstbl.getColumnCount(); r++) {
                        mainItemstbl.getModel().setValueAt(null, k, r);
                    }
                }
                javax.swing.JOptionPane.showMessageDialog(this, "Transaction successful.", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                connectDB.commit();
                connectDB.setAutoCommit(true);

            } catch (java.sql.SQLException sq) {
                sq.printStackTrace();
                try {
                    connectDB.rollback(registerSavePoint);
                } catch (java.sql.SQLException sql) {
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jButton12ActionPerformed

    private void mainItemstblKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mainItemstblKeyReleased
        boolean neg = false;
        if (mainItemstbl.getModel().getValueAt(mainItemstbl.getSelectedRow(), 1) != null) {
            if (mainItemstbl.getSelectedColumn() == mainItemstbl.getSelectedColumn()) {
                try {

                    java.sql.Statement pstmt1 = connectDB.createStatement();
                    java.sql.ResultSet rs1 = pstmt1.executeQuery("select neg_allow from st_stock_control"); //from orders where supplier ='"+jTable1.getValueAt(i,4).toString()+"'");

                    while (rs1.next()) {

                        neg = rs1.getBoolean(1);
                    }

                } catch (java.sql.SQLException sq) {
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

                    System.out.println(sq.getMessage());

                }

                float bal = java.lang.Float.parseFloat(mainItemstbl.getValueAt(mainItemstbl.getSelectedRow(), 2).toString());
                float qty = java.lang.Float.parseFloat(mainItemstbl.getValueAt(mainItemstbl.getSelectedRow(), 1).toString());
                float price = java.lang.Float.parseFloat(mainItemstbl.getValueAt(mainItemstbl.getSelectedRow(), 3).toString());
                if (neg == false && bal >= qty) {
                    float total = qty * price;
                    mainItemstbl.setValueAt(total, mainItemstbl.getSelectedRow(), 5);
                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(mainItemstbl, 5);
                    jTextField10.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                    billTotalTxt.setText(java.lang.String.valueOf(totalSum));
                } else {
                    if (neg == false && bal < qty) {
                        javax.swing.JOptionPane.showMessageDialog(this, "You are not allowed to dispense more than the available stock", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        mainItemstbl.setValueAt(0, mainItemstbl.getSelectedRow(), 5);
                        mainItemstbl.setValueAt(0, mainItemstbl.getSelectedRow(), 1);

                        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(mainItemstbl, 5);
                        jTextField10.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                        billTotalTxt.setText(java.lang.String.valueOf(totalSum));
                        com.afrisoftech.lib.ClearTable.removeSelectedRows(mainItemstbl);
                    }
                }
                if (neg == true) {
                    float total = qty * price;
                    mainItemstbl.setValueAt(total, mainItemstbl.getSelectedRow(), 5);
                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(mainItemstbl, 5);
                    jTextField10.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                    // jTextField15.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                    billTotalTxt.setText(java.lang.String.valueOf(totalSum));
                }
            }

        }
        /*double resFloat = 0.00;
         if (jTable13.getValueAt(jTable13.getSelectedRow(), jTable13.getSelectedColumn()) != null) {
        
         float floatCol2 = java.lang.Float.parseFloat(jTable13.getValueAt(jTable13.getSelectedRow(), 1).toString());
        
         float floatCol3 = java.lang.Float.parseFloat(jTable13.getValueAt(jTable13.getSelectedRow(), 3).toString());
        
         float resVal = floatCol2 * floatCol3;
        
         if (jTable13.getValueAt(jTable13.getSelectedRow(), 4) != null) {
        
         float floatCol4 = java.lang.Float.parseFloat(jTable13.getValueAt(jTable13.getSelectedRow(), 4).toString());
        
         resVal = (floatCol2 * floatCol3) - floatCol4;
         //  resFloat = resVal;
        
         jTable13.setValueAt(new java.lang.Float(resVal), jTable13.getSelectedRow(), 5);
        
        
         for (int i = 0; i < jTable13.getRowCount(); i++) {
        
         if (jTable1.getModel().getValueAt(i, 1) != null) {//toString().compareToIgnoreCase(null) {
        
         resFloat = resFloat + Double.parseDouble(jTable13.getValueAt(i, 5).toString());
        
        
         // totalSum = floatTotal + resFloat;
        
         }
         }
        
         this.tableModelTableChanged();
        
         }else
        
         jTable13.setValueAt(new java.lang.Float(resVal), jTable13.getSelectedRow(), 5);
         for (int i = 0; i < jTable13.getRowCount(); i++) {
        
         if (jTable13.getModel().getValueAt(i, 0) != null) {//toString().compareToIgnoreCase(null) {
        
         resFloat = resFloat + Double.parseDouble(jTable13.getValueAt(i, 5).toString());
        
        
         }
         }
        
         this.tableModel1TableChanged();
         }
        
         */
        // Add your handling code here:
    }//GEN-LAST:event_mainItemstblKeyReleased

    private void mainItemstblAncestorMoved(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_mainItemstblAncestorMoved
        // Add your handling code here:
    }//GEN-LAST:event_mainItemstblAncestorMoved

    private void jButton92ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton92ActionPerformed
        this.medicinesSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton92ActionPerformed

    private void jTextField114CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField114CaretUpdate

        if (jTextField114.getCaretPosition() > 3) {
            if (jCheckBox7.isSelected()) {
                jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "select DISTINCT product AS product,selling_price, '" + gLCodeTxt.getText() + "' AS gl_code,product_id, strength FROM stockprices WHERE product_id ILIKE '" + jTextField114.getText() + "%' AND department ilike  '" + storeNameCmbx.getSelectedItem().toString() + "' AND product not ilike '%dispensing%' order by product"));

                //jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select product,round(selling_price, 0) as selling_price, gl_code FROM st_stock_prices WHERE product ILIKE '%"+jTextField114.getText()+"%' AND department =  '"+jTextField42.getText()+"' order by product"));
                jSearchScrollPane3.setViewportView(jSearchTable3);
            } else {
                jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "select DISTINCT product AS product,selling_price, '" + gLCodeTxt.getText() + "' AS gl_code,product_id, strength FROM stockprices WHERE product ILIKE '" + jTextField114.getText() + "%' AND department ilike  '" + storeNameCmbx.getSelectedItem().toString() + "' AND product not ilike '%dispensing%' order by product"));
                // jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select product AS product,selling_price, '" + jTextField4.getText() + "' AS gl_code,product_id, strength FROM stockprices WHERE product ILIKE 'all%' AND department ilike  'casualty pharmacy' order by product"));

                //jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select product,round(selling_price, 0) as selling_price, gl_code FROM st_stock_prices WHERE product ILIKE '%"+jTextField114.getText()+"%' AND department =  '"+jTextField42.getText()+"' order by product"));
                jSearchScrollPane3.setViewportView(jSearchTable3);
            }
            System.out.println("Cannot sort out");

        }// Add your handling code here:
    }//GEN-LAST:event_jTextField114CaretUpdate

    private void jSearchTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable3MouseClicked

        this.jTextField114.setText("");
        mainItemstbl.setValueAt(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 0), mainItemstbl.getSelectedRow(), 0);
        mainItemstbl.setValueAt(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 1), mainItemstbl.getSelectedRow(), 3);
        mainItemstbl.setValueAt(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 2), mainItemstbl.getSelectedRow(), 6);
        mainItemstbl.setValueAt(new java.lang.Double(0), mainItemstbl.getSelectedRow(), 4);
        mainItemstbl.setValueAt(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 3), mainItemstbl.getSelectedRow(), 7);
        mainItemstbl.setValueAt(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 4), mainItemstbl.getSelectedRow(), 8);

        int j = 0;

        /*        java.lang.Object selectedGuaran = cmbox1.getSelectedItem();
         int i = jTable11.getSelectedRow();
         if (i > -1){
         if (selectedGuaran != null) {
        
         try {
         java.sql.Statement pstmt = connectDB.createStatement();
         java.sql.ResultSet rs = pstmt.executeQuery("select sp.selling_price::numeric from st_stock_prices sp where product = '"+selectedGuaran+"'");
         while (rs.next()){
         jTable11.getModel().setValueAt(rs.getObject(1),i,3);
         }
         } catch(java.sql.SQLException sqlex){
         System.out.println(sqlex.getMessage());
         }
        
         */
        double Qty = 0.00;
        double issuing = 0.00;
        double total = 0.00;
        double itemPrice = 0.00;
        try {
            java.sql.Statement pstmt = connectDB.createStatement();
            java.sql.Statement pstmt1 = connectDB.createStatement();
            java.sql.Statement pstmt1x = connectDB.createStatement();

            java.sql.ResultSet rs1 = pstmt1.executeQuery("select count(product) from stockprices sc where product ilike '" + jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 0) + "' and department ilike '" + jComboBox4.getSelectedItem().toString() + "'");
            while (rs1.next()) {
                j = rs1.getInt(1);
            }

            java.sql.ResultSet rsx = pstmt1x.executeQuery("select balance,selling_price from st_stock_prices where product_id ilike '" + jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 3) + "' and department ilike '" + jComboBox4.getSelectedItem().toString() + "'");

            while (rsx.next()) {

                issuing = rsx.getDouble(1);
                itemPrice = rsx.getDouble(2);
                if (itemPrice > 0) {
                    total = itemPrice * issuing;
                } else {
                    total = 0;
                }
                //  jTable1.setValueAt(Qty,jTable1.getSelectedRow(),2);
                ////     jTable13.setValueAt(issuing, jTable13.getSelectedRow(), 1); 
                mainItemstbl.setValueAt(null, mainItemstbl.getSelectedRow(), 1);
                mainItemstbl.setValueAt(itemPrice, mainItemstbl.getSelectedRow(), 3);
                mainItemstbl.setValueAt(total, mainItemstbl.getSelectedRow(), 5);
            }

            if (j > 0) {
                java.sql.ResultSet rs = pstmt.executeQuery("select sum(qty) from stock_balance_qty where item_code ilike '" + jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 3) + "' and department ilike '" + jComboBox4.getSelectedItem().toString() + "' AND dates::date <= '" + SQLDateFormat.getSQLDate(datePicker1.getDate()) + "'");

                //java.sql.ResultSet rs = pstmt.executeQuery("select sum(qty) from stock_balance_qty where description ilike '"+jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(),0)+"' and department ilike '"+jTextField42.getText()+"' AND dates <= '"+datePicker1.getDate()+"'");
                //java.sql.ResultSet rs = pstmt.executeQuery("select sum(receiving-issuing) As qty from  st_sub_stores where item = '"+jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(),0)+"' and department like '"+jTextField42.getText()+"' AND dates <= '"+datePicker1.getDate()+"'");
                while (rs.next()) {

                    Qty = rs.getDouble(1);
                    //  jTable1.setValueAt(Qty,jTable1.getSelectedRow(),2);
                    mainItemstbl.setValueAt(Qty, mainItemstbl.getSelectedRow(), 2);

                }
            } else {
                mainItemstbl.setValueAt("0", mainItemstbl.getSelectedRow(), 2);
            }
        } catch (java.sql.SQLException sqlex) {
            System.out.println(sqlex.getMessage());
        }

        medicinesSearchDialog.dispose();   // Add your handling code here:
    }//GEN-LAST:event_jSearchTable3MouseClicked
    private void cmbox13MouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane22.getLocationOnScreen();
        medicinesSearchDialog.setSize(700, 200);
        medicinesSearchDialog.setLocation(point);
        medicinesSearchDialog.setVisible(true);

    }
    private void mainItemstblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainItemstblMouseClicked
        if (mainItemstbl.getSelectedColumn() == 0) {
            if (gLCodeTxt.getText().toString().equalsIgnoreCase("") | gLCodeTxt.getText().toString().equalsIgnoreCase(" ") | storeNameCmbx.getSelectedItem().toString().equalsIgnoreCase("-")) {
                javax.swing.JOptionPane.showMessageDialog(this, "You have to select department first", "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            } else {
                this.cmbox13MouseClicked();
            }
        }   // Add your handling code here:
    }//GEN-LAST:event_mainItemstblMouseClicked

    private void jButton52121ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52121ActionPerformed
        this.patientSearchdlg.dispose(); // Add your handling code here:
    }//GEN-LAST:event_jButton52121ActionPerformed

    private void jSearchTable2121MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2121MouseClicked
        jTextField32.setText("0.00");
        jTextField92.setText("");

        jTextField13.setText("");
        jTextField22.setText("");
        
        payerMobileTelephoneNumberTxt.setText("254-7  -      ");

        double limit = 0.00;
        double bal = 0.00;
        double rect = 0.00;
        double outstanding = 0.00;
        boolean appLimit = false;
        String memberno = null;
        int interval = 0;

        smartcard = false;
        // jTextField32.setText("0.00");

        for (int k = 0; k < mainItemstbl.getRowCount(); k++) {
            for (int r = 0; r < mainItemstbl.getColumnCount(); r++) {
                mainItemstbl.getModel().setValueAt(null, k, r);
            }
        }

        jTextField92.setText(jSearchTable2121.getValueAt(jSearchTable2121.getSelectedRow(), 0).toString());
        jTextField13.setText(jSearchTable2121.getValueAt(jSearchTable2121.getSelectedRow(), 1).toString());
        jTextField5.setText(jSearchTable2121.getValueAt(jSearchTable2121.getSelectedRow(), 2).toString());
        if (jCheckBox3.isSelected() == true) {

            visitID = jSearchTable2121.getValueAt(jSearchTable2121.getSelectedRow(), 2).toString().trim();
        } else {
            String b = null;
            if (OutptChkbx.isSelected()) {
                b = "OP";
            } else if (WalkinPtbx.isSelected()) {
                b = "WI";
            }
            visitID = b + "" + String.valueOf(com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate())).replace("-", "");
        }
        patientSearchdlg.dispose();

        int j = 0;
        if (jCheckBox3.isSelected()) {
            try {

                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode,description,member_no from hp_inpatient_register where patient_no  = '" + this.jTextField92.getText().toString() + "'");
                while (rset1.next()) {
                    jTextField22.setText(rset1.getObject(1).toString());
                    paymentModeCmbx.setSelectedItem(rset1.getObject(2).toString());
                    jTextField14.setText(dbObject.getDBObject(rset1.getObject(3), "-").toString());
                    memberno = dbObject.getDBObject(rset1.getObject(4), "-").toString();
                    System.out.println(memberno);
                }

                if (paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {

                    java.sql.Statement stmt1cz3 = connectDB.createStatement();
                    java.sql.ResultSet rset1cz3 = stmt1cz3.executeQuery("SELECT account_no,payer_name,usesmartcard FROM ac_schemes WHERE scheme_name  ILIKE '" + jTextField14.getText() + "'");
                    while (rset1cz3.next()) {
                        jTextField17.setText(rset1cz3.getObject(1).toString());
                        jTextField18.setText(rset1cz3.getObject(2).toString());
                        smartcard = rset1cz3.getBoolean(3);
                    }
                    if (OutptChkbx.isSelected()) {
                        if (smartcard) {
                            jButton12.setEnabled(false);
                            jButton121.setEnabled(false);
                            jButton122.setEnabled(false);
                            jButton7.setEnabled(true);
                            javax.swing.JOptionPane.showMessageDialog(this, "You must FORWARD from smart link".toUpperCase(), "Information Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                        }
                    }
                    java.sql.Statement stmt1cz = connectDB.createStatement();
                    java.sql.ResultSet rset1cz = stmt1cz.executeQuery("select applylimit from hp_schemestaff where staff_no  ='" + memberno + "' and applylimit = true");
                    while (rset1cz.next()) {
                        appLimit = rset1cz.getBoolean(1);
                    }
                    System.out.println(appLimit);
                    if (appLimit) {
                        ageingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, datePicker1.getDate());

                        java.lang.Object[][] rangeDates = ageingSeries.getAgeingDateSeries();

                        // ageingDates = ageingSeries.getAgeingDateSeries();
                        // double columnTotals[] = new double[rangeDates.length];
                        for (int x = 0; x < rangeDates.length; x++) {
                            System.out.println(rangeDates[x]);
                            try {

                                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
                                com.afrisoftech.lib.DateFormatter dateFormatter = new com.afrisoftech.lib.DateFormatter(dateFormat.parse(rangeDates[x][0].toString().trim()), "yyyy");

                                java.lang.String monthString = dateFormatter.getDateString();

                                interval = x;

                            } catch (java.text.ParseException prs) {
                                prs.printStackTrace();
                            }
                        }
                        java.sql.Statement stmt1c = connectDB.createStatement();
                        java.sql.ResultSet rset1c = stmt1c.executeQuery("select iplimit from hp_schemestaff where staff_no  ='" + memberno + "' and applylimit = true");
                        while (rset1c.next()) {
                            limit = rset1c.getDouble(1);
                        }
                        for (int t = 0; t < rangeDates.length; t++) {
                            java.sql.Statement stmt1cx = connectDB.createStatement();
                            System.out.println("Dates between : " + rangeDates[t][0] + " AND " + rangeDates[t][1]);
                            java.sql.ResultSet rset1cx = stmt1cx.executeQuery("select sum(balance) from ac_debtors where member_no  ='" + memberno + "' AND date between '" + rangeDates[t][0] + "' AND '" + rangeDates[t][1] + "' AND payee ilike '" + jTextField10.getText() + "'");
                            while (rset1cx.next()) {
                                bal = rset1cx.getDouble(1);
                                System.out.println(bal);
                            }
                        }
                        outstanding = limit - bal;
                        // jTextField8.setText(java.lang.String.valueOf(outstanding));
                        if (outstanding >= limit) {
                            javax.swing.JOptionPane.showMessageDialog(this, "The patient has exausted the member limit", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        } else {
                        }
                    }
                }

            } catch (java.sql.SQLException sqlex) {
                System.out.println(sqlex.getMessage());
            }
            patientSearchdlg.dispose();
        } else {
            try {

                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode,description,card_no from hp_patient_register where patient_no  = '" + jTextField92.getText() + "'");
                while (rset1.next()) {
                    jTextField22.setText(rset1.getObject(1).toString());
                    paymentModeCmbx.setSelectedItem(rset1.getObject(2).toString());
                    jTextField14.setText(dbObject.getDBObject(rset1.getObject(3), "-").toString());
                    memberno = dbObject.getDBObject(rset1.getObject(4), "-").toString();
                    System.out.println(memberno);
                }

                if (paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {
                    java.sql.Statement stmt1cz3 = connectDB.createStatement();
                    java.sql.ResultSet rset1cz3 = stmt1cz3.executeQuery("SELECT account_no,payer_name,usesmartcard FROM ac_schemes WHERE scheme_name  ILIKE '" + jTextField14.getText() + "'");
                    while (rset1cz3.next()) {
                        jTextField17.setText(rset1cz3.getObject(1).toString());
                        jTextField18.setText(rset1cz3.getObject(2).toString());
                        smartcard = rset1cz3.getBoolean(3);
                    }
                    if (OutptChkbx.isSelected()) {
                        if (smartcard) {
                            jButton12.setEnabled(false);
                            jButton121.setEnabled(false);
                            jButton122.setEnabled(false);
                            jButton7.setEnabled(true);
                            javax.swing.JOptionPane.showMessageDialog(this, "You must FORWARD from smart link".toUpperCase(), "Information Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                        }
                    }
                    java.sql.Statement stmt1cz = connectDB.createStatement();
                    java.sql.ResultSet rset1cz = stmt1cz.executeQuery("select limit_amount from hp_schemestaff where staff_no  ='" + memberno + "' and applylimit = true");
                    while (rset1cz.next()) {
                        appLimit = rset1cz.getBoolean(1);
                    }
                    System.out.println(appLimit);
                    if (appLimit) {
                        ageingSeries = new com.afrisoftech.timeseries.YearyAgeing(1, datePicker1.getDate());

                        java.lang.Object[][] rangeDates = ageingSeries.getAgeingDateSeries();

                        // ageingDates = ageingSeries.getAgeingDateSeries();
                        // double columnTotals[] = new double[rangeDates.length];
                        for (int x = 0; x < rangeDates.length; x++) {
                            System.out.println(rangeDates[x]);
                            try {

                                java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy");
                                com.afrisoftech.lib.DateFormatter dateFormatter = new com.afrisoftech.lib.DateFormatter(dateFormat.parse(rangeDates[x][0].toString().trim()), "yyyy");

                                java.lang.String monthString = dateFormatter.getDateString();

                                interval = x;

                            } catch (java.text.ParseException prs) {
                                prs.printStackTrace();
                            }
                        }
                        java.sql.Statement stmt1c = connectDB.createStatement();
                        java.sql.ResultSet rset1c = stmt1c.executeQuery("select iplimit from hp_schemestaff where staff_no  ='" + memberno + "' and applylimit = true");
                        while (rset1c.next()) {
                            limit = rset1c.getDouble(1);
                        }
                        for (int t = 0; t < rangeDates.length; t++) {
                            java.sql.Statement stmt1cx = connectDB.createStatement();
                            System.out.println("Dates between : " + rangeDates[t][0] + " AND " + rangeDates[t][1]);
                            java.sql.ResultSet rset1cx = stmt1cx.executeQuery("select sum(balance) from ac_debtors where member_no  ='" + memberno + "' AND date between '" + rangeDates[t][0] + "' AND '" + rangeDates[t][1] + "' AND payee ilike '" + jTextField10.getText() + "'");
                            while (rset1cx.next()) {
                                bal = rset1cx.getDouble(1);
                                System.out.println(bal);
                            }
                        }
                        outstanding = limit - bal;
                        // jTextField8.setText(java.lang.String.valueOf(outstanding));
                        if (outstanding >= limit) {
                            javax.swing.JOptionPane.showMessageDialog(this, "The patient has exausted the member limit", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        } else {
                        }
                    }
                }
            } catch (java.sql.SQLException sqe) {
                sqe.printStackTrace();
                //  System.out.println("Insert not successful");
            }
        }

        try {
            // int j = 0;
            java.sql.Statement stmt = connectDB.createStatement();

            java.sql.ResultSet rset = stmt.executeQuery("SELECT count(patient_no) FROM hp_pharmacy where patient_no  ='" + jTextField92.getText() + "' and paid = false");

            while (rset.next()) {
                j = rset.getInt(1);
            }
            if (j > 0) {
                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select sum(amount) from hp_pharmacy where patient_no  ='" + jTextField92.getText() + "' and paid = false");
                while (rset1.next()) {
                    jTextField10.setText(rset1.getObject(1).toString());
                    //jTextField5.setText(rset1.getObject(2).toString());
                }
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }

        this.populateTable1(this.jTextField92.getText());
        if (paymentModeCmbx.getSelectedItem().toString().contains("Pesa")) {
            javax.swing.JOptionPane.showMessageDialog(this, "You must enter a valid client Mpesa telephone number in the format : 254-7xxxxxxx on the Bill Payer Telephone No field");
        }
// Add your handling code here:
    }//GEN-LAST:event_jSearchTable2121MouseClicked

    private void jTextField113121CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField113121CaretUpdate
        if (this.jCheckBox3.isSelected() && this.jCheckBox4.isSelected()) {
            if (jTextField113121.getCaretPosition() < 4) {

                System.out.println("Nothing");
            } else {
                jSearchTable2121.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT patient_no, name,visit_id, unit_number from inpatient_list where name ILIKE '%" + jTextField113121.getText() + "%' or unit_number ILIKE '%" + jTextField113121.getText() + "%' or patient_no  ILIKE '%" + jTextField113121.getText() + "%'  order by name"));


                /*
                 try {
                 //  searchRowSet2121.execute("SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name from hp_inpatient_register where second_name||' '||first_name||' '||last_name ILIKE '"+jTextField113121.getText()+"%' order by second_name");
                 searchRowSet2121.execute("SELECT patient_no, name from inpatient_list where name ILIKE '"+jTextField113121.getText()+"%' order by name");
                
                
                 jSearchTable2121.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet2121, new org.netbeans.lib.sql.models.TableModel.Column[] {
                 new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient no", false),
                 new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false)
                 }));
                 */
                jSearchTable2121.setShowHorizontalLines(false);
                jSearchScrollPane2121.setViewportView(jSearchTable2121);

            }
        } else {

            if (this.OutptChkbx.isSelected() && this.jCheckBox4.isSelected()) {
                if (jTextField113121.getCaretPosition() < 2) {

                    System.out.println("Nothing");
                } else {
                    jSearchTable2121.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT patient_no, name,'-' as visit_id, unit_number from patient_select where name ILIKE '%" + jTextField113121.getText() + "%' or unit_number ilike '%" + jTextField113121.getText() + "%' order by name"));


                    /*
                     try {
                     //  searchRowSet2121.execute("SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name from hp_inpatient_register where second_name||' '||first_name||' '||last_name ILIKE '"+jTextField113121.getText()+"%' order by second_name");
                     searchRowSet2121.execute("SELECT patient_no, name from inpatient_list where name ILIKE '"+jTextField113121.getText()+"%' order by name");
                    
                    
                     jSearchTable2121.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet2121, new org.netbeans.lib.sql.models.TableModel.Column[] {
                     new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient no", false),
                     new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false)
                     }));
                     */
                    jSearchTable2121.setShowHorizontalLines(false);
                    jSearchScrollPane2121.setViewportView(jSearchTable2121);

                }

            } else {
                if (this.jCheckBox3.isSelected() && this.jCheckBox31.isSelected()) {
                    if (jTextField113121.getCaretPosition() < 2) {

                        System.out.println("Nothing");
                    } else {
                        jSearchTable2121.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT patient_no, name, visit_id, unit_number from inpatient_list where patient_no ILIKE '%" + jTextField113121.getText() + "%' or unit_number ILIKE '%" + jTextField113121.getText() + "%' order by patient_no"));

                        /*
                         try {
                         // searchRowSet2121.execute("SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name from hp_inpatient_register where patient_no ILIKE '"+jTextField113121.getText()+"%' order by second_name");
                         searchRowSet2121.execute("SELECT patient_no, name from inpatient_list where patient_no ILIKE '"+jTextField113121.getText()+"%' order by patient_no");
                        
                        
                         jSearchTable2121.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet2121, new org.netbeans.lib.sql.models.TableModel.Column[] {
                         new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient no", false),
                         new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false)
                         }));
                         */
                        jSearchTable2121.setShowHorizontalLines(false);
                        jSearchScrollPane2121.setViewportView(jSearchTable2121);

                    }
                } else {

                    if (this.OutptChkbx.isSelected() && this.jCheckBox31.isSelected()) {
                        if (jTextField113121.getCaretPosition() < 2) {

                            System.out.println("Nothing");
                        } else {
                            jSearchTable2121.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT patient_no, name, '-' as visit_id, unit_number from patient_select where patient_no ILIKE '%" + jTextField113121.getText() + "%' or unit_number ILIKE '%" + jTextField113121.getText() + "%' order by patient_no"));

                            /*
                             try {
                             // searchRowSet2121.execute("SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name from hp_inpatient_register where patient_no ILIKE '"+jTextField113121.getText()+"%' order by second_name");
                             searchRowSet2121.execute("SELECT patient_no, name from inpatient_list where patient_no ILIKE '"+jTextField113121.getText()+"%' order by patient_no");
                            
                            
                             jSearchTable2121.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet2121, new org.netbeans.lib.sql.models.TableModel.Column[] {
                             new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient no", false),
                             new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false)
                             }));
                             */
                            jSearchTable2121.setShowHorizontalLines(false);
                            jSearchScrollPane2121.setViewportView(jSearchTable2121);

                        }

                    } else {
                        if (this.WalkinPtbx.isSelected()) {
                            if (jTextField113121.getCaretPosition() < 2) {

                                System.out.println("Nothing");
                            } else {
                                //  jSearchTable2121.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT patient_no, name from patient_select where patient_no ILIKE '%"+jTextField113121.getText()+"%' order by patient_no"));
                                jSearchTable2121.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT distinct(patient_no),(patient_name) as name from hp_pharmacy where patient_name ILIKE '%" + jTextField113121.getText() + "%' AND (patient_no ilike 'wk%') order by patient_name"));

                                /*
                                 try {
                                 // searchRowSet2121.execute("SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name from hp_inpatient_register where patient_no ILIKE '"+jTextField113121.getText()+"%' order by second_name");
                                 searchRowSet2121.execute("SELECT patient_no, name from inpatient_list where patient_no ILIKE '"+jTextField113121.getText()+"%' order by patient_no");
                                
                                
                                 jSearchTable2121.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet2121, new org.netbeans.lib.sql.models.TableModel.Column[] {
                                 new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient no", false),
                                 new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false)
                                 }));
                                 */
                                jSearchTable2121.setShowHorizontalLines(false);
                                jSearchScrollPane2121.setViewportView(jSearchTable2121);

                            }
                        }
                    }
                }
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jTextField113121CaretUpdate

    private void searchButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton2ActionPerformed
        searchButton2121Clicked(); // Add your handling code here:

        // Add your handling code here:
    }//GEN-LAST:event_searchButton2ActionPerformed
    private void searchButton2121Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.jTextField92.getLocationOnScreen();

        patientSearchdlg.setSize(600, 200);

        patientSearchdlg.setLocation(point);

        patientSearchdlg.setVisible(true);
    }
    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        //jPanel1.setVisible(false);
        jPanel13.setVisible(true);
        // jPanel11.setVisible(false);
        this.jTextField13.setEditable(false);
        try {
            java.sql.Statement pstmt = connectDB.createStatement();
            java.sql.ResultSet rs = pstmt.executeQuery("select store_name from st_stores where store_code = 'IP'");

            while (rs.next()) {
                jTextField42.setText(rs.getObject(1).toString());
                jComboBox4.setSelectedItem(rs.getObject(1).toString());
            }
        } catch (java.sql.SQLException sqlex) {
            System.out.println(sqlex.getMessage());
        }
        //jPanel11.setVisible(true)// Add your handling code here:
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jButton5212ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5212ActionPerformed
        this.jSearchDialog212.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton5212ActionPerformed

    private void jSearchTable212MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable212MouseClicked
        //  jTextField5821.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 1).toString());
/*        jTextField912.setText(jSearchTable212.getValueAt(jSearchTable212.getSelectedRow(), 0).toString());
        
        
         int j = 0;
         try {
        
         java.sql.Statement pstmt12 = connectDB.createStatement();
         java.sql.ResultSet rs12 = pstmt12.executeQuery("select count(patient_name) from hp_pharmacy WHERE patient_name ='"+jSearchTable212.getValueAt(jSearchTable212.getSelectedRow(),0)+"' AND paid = true AND collected = false");
         while (rs12.next()){
         j = rs12.getInt(1);
         }
        
         if (j > 0) {
         java.sql.Statement pstmt1 = connectDB.createStatement();
         java.sql.ResultSet rs1 = pstmt1.executeQuery("select sum(amount) as value from hp_pharmacy WHERE patient_name ='"+jSearchTable212.getValueAt(jSearchTable212.getSelectedRow(),0)+"' AND paid = true AND collected = false");
        
        
         while (rs1.next()){
         jTextField1111.setText(rs1.getObject(1).toString());
        
         }
        
         //crset1.setCommand("select service,dosage,units,selling_price,debit as value from drug_collection_view WHERE patient_no ='"+jComboBox11.getSelectedItem().toString()+"'");
         /*          crset1.setCommand("select description,quantity,units,price,amount as value from hp_pharmacy WHERE patient_name ='"+jSearchTable212.getValueAt(jSearchTable212.getSelectedRow(),0)+"' AND paid = true AND collected = false");
        
         crset1.setConnectionSource(pConnDB);
         try {
        
         crset1.execute();
        
         // crset2.setExecuteOnLoad(true);
         jTable111.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
         new org.netbeans.lib.sql.models.TableModel.Column("description", "Item Desc.", false),
         new org.netbeans.lib.sql.models.TableModel.Column("units", "Units", false),
         new org.netbeans.lib.sql.models.TableModel.Column("quantity", "Quantity", false),
         new org.netbeans.lib.sql.models.TableModel.Column("price", "Price per Item", false),
         new org.netbeans.lib.sql.models.TableModel.Column("value", "Value KShs", true)
        
        
         }));
         jScrollPane11.setViewportView(jTable111);
        
        
         }
         } catch(java.sql.SQLException sqlex){
         System.out.println(sqlex.getMessage());
         }
         this.populateTable111(this.jTextField912.getText());
        
         jSearchDialog212.dispose();
         */
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable212MouseClicked
    /*  private void populateTable111(java.lang.String patient_no) {
     int j = 0;
     int i = 0;
    
     try {
     java.sql.Statement stmtTable11 = connectDB.createStatement();
    
     java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT count(patient_name)  FROM hp_pharmacy WHERE patient_name = '"+patient_no+"' AND paid = true AND collected = false");
    
     while (rsetTable11.next()) {
     j = rsetTable11.getInt(1);
     }
     if (j > 0) {
     java.sql.Statement stmtTable1 = connectDB.createStatement();
    
     java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select description,units,quantity,price,amount as value,gl_code from hp_pharmacy WHERE patient_name ='"+patient_no+"' AND paid = true AND collected = false and date_prescribed = current_date");
    
     while (rsetTable1.next()) {
    
     System.out.println("Working at table row "+i);
     jTable111.setValueAt(rsetTable1.getObject(1), i, 0);
     jTable111.setValueAt(rsetTable1.getObject(2), i, 1);
     jTable111.setValueAt(rsetTable1.getObject(3), i, 3);
     jTable111.setValueAt(rsetTable1.getObject(4), i, 4);
     jTable111.setValueAt(rsetTable1.getObject(5), i, 5);
     jTable111.setValueAt(rsetTable1.getObject(6), i, 6);
    
     i++;
    
     }
     }
     } catch(java.sql.SQLException sqlExec) {
    
     javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
    
     }
     }
     */
    private void jTextField11312CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11312CaretUpdate

        jSearchTable212.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT distinct(patient_name) as name from hp_pharmacy where patient_name ILIKE '%" + jTextField11312.getText() + "%' AND (patient_no IS NULL OR  patient_no ='') and paid = true and collected = false order by patient_name"));

        /* try {
        
         searchRowSet212.execute("SELECT distinct(patient_name) as name from hp_pharmacy where patient_name ILIKE '"+jTextField11312.getText()+"%' AND (patient_no IS NULL OR  patient_no ='') and paid = true and collected = false order by patient_name");
        
         jSearchTable212.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet212, new org.netbeans.lib.sql.models.TableModel.Column[] {
         new org.netbeans.lib.sql.models.TableModel.Column("name", "Patient name", false)
         //     new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false)
         //    new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Year of birth", false),
         //    new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", false)
         }));
         */
        jSearchTable212.setShowHorizontalLines(false);
        jSearchScrollPane212.setViewportView(jSearchTable212);

        // Add your handling code here:
    }//GEN-LAST:event_jTextField11312CaretUpdate
    private void searchButton212Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
/*        java.awt.Point point = this.jTextField912.getLocationOnScreen();
        
         jSearchDialog212.setSize(400,200);
        
         jSearchDialog212.setLocation(point);
        
         jSearchDialog212.setVisible(true);
         */
    }

    private void populateTable11(java.lang.String patient_no) {
        /*   int j = 0;
         int i = 0;
        
         try {
         java.sql.Statement stmtTable11 = connectDB.createStatement();
        
         java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT count(patient_name)  FROM hp_pharmacy WHERE patient_name = '"+patient_no+"' AND paid = false");
        
         while (rsetTable11.next()) {
         j = rsetTable11.getInt(1);
         }
         if (j > 0) {
         java.sql.Statement stmtTable1 = connectDB.createStatement();
        
         java.sql.Statement stmtTable111 = connectDB.createStatement();
        
         java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT description, quantity,price,(quantity*price)-amount,amount,gl_code  FROM hp_pharmacy WHERE patient_name = '"+patient_no+"' AND paid = false");
        
         while (rsetTable1.next()) {
        
         jTable11.setValueAt(rsetTable1.getObject(1), i, 0);
         jTable11.setValueAt(rsetTable1.getObject(2), i, 1);
         jTable11.setValueAt(rsetTable1.getObject(3), i, 3);
         if(rsetTable1.getDouble(4) >0){
         jTable11.setValueAt(rsetTable1.getObject(4), i, 4);
         }else{
         jTable11.setValueAt(new java.lang.Double(0.00), i, 4);
         }
         // jTable11.setValueAt(rsetTable1.getObject(4), i, 4);
         jTable11.setValueAt(rsetTable1.getObject(5), i, 5);
         jTable11.setValueAt(rsetTable1.getObject(6), i, 6);
        
         java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("select sum(qty) from stock_balance where description = '"+jTable11.getValueAt(i,0).toString()+"' AND department ilike '"+jTextField41.getText()+"%'");
         while (rsetTable111.next()) {
        
         jTable11.setValueAt(rsetTable111.getObject(1), i, 2);
        
         i++;
        
         }
         }
         }
        
         java.sql.Statement pst211 = connectDB.createStatement();
         java.sql.ResultSet rs111 = pst211.executeQuery("select doctor from hp_pharmacy where paid = true and collected = false and patient_name = '"+jTextField912.getText()+"'");
         while (rs111.next()){
         jTextField121.setText(rs111.getObject(1).toString());
         }
         } catch(java.sql.SQLException sqlExec) {
        
         javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
        
         }
         */
    }

    /*   private void populateTable2(java.lang.String patient_no) {
     int j = 0;
     int i = 0;
    
     try {
     java.sql.Statement stmtTable11 = connectDB.createStatement();
    
     java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT count(patient_name)  FROM hp_pharmacy WHERE patient_no = '"+patient_no+"' AND paid = true AND collected = false");
    
     while (rsetTable11.next()) {
     j = rsetTable11.getInt(1);
     }
     if (j > 0) {
     java.sql.Statement stmtTable1 = connectDB.createStatement();
    
     java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select description,units,quantity,price,amount as value,gl_code from hp_pharmacy WHERE patient_no ='"+patient_no+"' AND paid = true AND collected = false");
    
     while (rsetTable1.next()) {
    
     System.out.println("Working at table row "+i);
     jTable12.setValueAt(rsetTable1.getObject(1), i, 0);
     jTable12.setValueAt(rsetTable1.getObject(2), i, 1);
     jTable12.setValueAt(rsetTable1.getObject(3), i, 3);
     jTable12.setValueAt(rsetTable1.getObject(4), i, 4);
     jTable12.setValueAt(rsetTable1.getObject(5), i, 5);
     jTable12.setValueAt(rsetTable1.getObject(6), i, 6);
    
     i++;
    
     }
     }
     } catch(java.sql.SQLException sqlExec) {
    
     javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
    
     }
     }      */ private void searchButton1Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
/*        java.awt.Point point = this.jTextField91.getLocationOnScreen();
        
         jSearchDialog21.setSize(400,200);
        
         jSearchDialog21.setLocation(point);
        
         jSearchDialog21.setVisible(true);
        
        
         */
    }

    /*  private void cmbox2ActionPerformed(java.awt.event.ActionEvent evt){
     int j = 0;
    
     java.lang.Object selectedGuaran = cmbox2.getSelectedItem();
     int i = jTable11.getSelectedRow();
    
     if (selectedGuaran != null) {
    
     try {
     java.sql.Statement pstmt = connectDB.createStatement();
     java.sql.ResultSet rs = pstmt.executeQuery("select sp.selling_price::numeric from st_stock_prices sp where product = '"+selectedGuaran+"'");
     while (rs.next()){
     jTable11.setValueAt(rs.getObject(1),i,4);
     }
     } catch(java.sql.SQLException sqlex){
     System.out.println(sqlex.getMessage());
     }
    
    
     double Qty = 0.00;
     try {
     java.sql.Statement pstmt = connectDB.createStatement();
     java.sql.Statement pstmt1 = connectDB.createStatement();
    
     java.sql.ResultSet rs1 = pstmt1.executeQuery("select count(product) from st_stock_prices sc where item = '"+selectedGuaran+"' and department ilike '"+jTextField41.getText()+"%'");
     while (rs1.next())
     j = rs1.getInt(1);
     if (j > 0){
    
     java.sql.ResultSet rs = pstmt.executeQuery("select sum(qty) from stock_balance where description = '"+selectedGuaran+"' and department ILIKE '"+jTextField41.getText()+"%'");
     while (rs.next()){
     Qty = rs.getDouble(1);
     //jTable1.setValueAt(Qty,jTable1.getSelectedRow(),2);
    
     jTable11.setValueAt(Qty,i,2);
    
     }
     } else {
     jTable11.setValueAt("0.00",i,2);
     }
     } catch(java.sql.SQLException sqlex){
     System.out.println(sqlex.getMessage());
     }
    
     try {
     java.sql.Statement pstmt = connectDB.createStatement();
    
     java.sql.ResultSet rs = pstmt.executeQuery("select code from pb_activity where activity ilike '"+jTextField41.getText()+"%'");
     while (rs.next()){
     jTable11.setValueAt(rs.getObject(1),i,6);
    
     }
     } catch(java.sql.SQLException sqlex){
     System.out.println(sqlex.getMessage());
     }
     }
    
     }*/
    public class ComboTextField extends javax.swing.JTextField implements javax.swing.ComboBoxEditor {

        public ComboTextField() {

            initComponents();

        }

        void initComponents() {

            // oldComboBox1311Model = jComboBox1311.getModel();
            // comboTextField = new javax.swing.JTextField();
            comboTextField.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyTyped(java.awt.event.KeyEvent e) {

                    if (e.getID() == java.awt.event.KeyEvent.VK_BACK_SPACE) {

                        changeComboBoxModel(comboTextField.getText());

                        System.out.println(comboTextField.getText() + " Pressed Key " + e.getKeyText(e.getKeyCode()));
                    }
                }
            });

        }

        public java.awt.Component getEditorComponent() {

            return comboTextField;

        }

        public Object getItem() {

            return comboTextField.getText();

        }

        public void setItem(Object obj) {
            //    comboTextField.setText(jComboBox1311.getSelectedItem().toString());
        }

        public void changeComboBoxModel(java.lang.String typedLetters) {

            javax.swing.DefaultComboBoxModel newComboBox1311Model = new javax.swing.DefaultComboBoxModel();

            System.out.println("ComboBox Item No. " + oldComboBox1311Model.getSize());

            for (int i = 0; i < oldComboBox1311Model.getSize(); i++) {

                if (oldComboBox1311Model.getElementAt(i).toString().startsWith(typedLetters)) {

                    newComboBox1311Model.addElement(oldComboBox1311Model.getElementAt(i));

                    //                    jComboBox1311.setModel(newComboBox1311Model);
                }

            }

        }
        //      }
    }

    /*   private void populateTable11(java.lang.String patient_name) {
     int j = 0;
     int i = 0;
    
     try {
     java.sql.Statement stmtTable1 = connectDB.createStatement();
    
     java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT count(patient_name) FROM hp_pharmacy WHERE patient_name = '"+patient_name+"' AND paid = false AND collected = false");
    
     while (rsetTable1.next()) {
     j = rsetTable1.getInt(1);
     }
     if (j > 0) {
    
     java.sql.Statement stmtTable11 = connectDB.createStatement();
    
     java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT description, quantity, price, null::numeric(15,2),amount, gl_code  FROM hp_pharmacy WHERE patient_name = '"+patient_name+"' AND paid = false AND collected = false");
    
     while (rsetTable11.next()) {
    
     System.out.println("Working at table row "+i);
     jTable11.setValueAt(rsetTable11.getObject(1), i, 0);
     jTable11.setValueAt(rsetTable11.getObject(2), i, 1);
     jTable11.setValueAt(rsetTable11.getObject(3), i, 3);
     jTable11.setValueAt(rsetTable11.getObject(4), i, 4);
     jTable11.setValueAt(rsetTable11.getObject(5), i, 5);
     jTable11.setValueAt(rsetTable11.getObject(6), i, 6);
    
     i++;
    
     //                i = i + i;
     //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
     }
     }
     } catch(java.sql.SQLException sqlExec) {
    
     javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
    
     }
     }
    
     */
    // }
    private void OutptChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutptChkbxActionPerformed
        this.jTextField13.setEditable(false);
        /*  jPanel11.setVisible(false);
         jPanel1.setVisible(true);
         jPanel13.setVisible(false);
         try {
         java.sql.Statement pstmt = connectDB.createStatement();
         java.sql.ResultSet rs = pstmt.executeQuery("select store_name from st_stores where store_code = 'OP'");
        
         while (rs.next()){
         jTextField4.setText(rs.getObject(1).toString());
         // jTextField2.setText(rs.getObject(2).toString());
        
         }
         } catch(java.sql.SQLException sqlex){
         System.out.println(sqlex.getMessage());
         }*/
        // Add your handling code here:
    }//GEN-LAST:event_OutptChkbxActionPerformed

    private void WalkinPtbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WalkinPtbxActionPerformed
        /*        jPanel1.setVisible(false);
         jPanel11.setVisible(true);
         jPanel13.setVisible(false);
         */
        this.jTextField13.setEditable(true);
        this.paymentModeCmbx.setSelectedItem("Cash");
        this.jTextField13.setText("Cash");
        this.jTextField22.setText("Walk In");

        // jPanel11.setVisible(true)// Add your handling code here:
    }//GEN-LAST:event_WalkinPtbxActionPerformed

    private void jCheckBox8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox8ActionPerformed

    private void PrescriptionCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_PrescriptionCheckBoxItemStateChanged
        searchButton2.setEnabled(false);
        searchButton4.setEnabled(true);
    }//GEN-LAST:event_PrescriptionCheckBoxItemStateChanged

    private void PatientCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_PatientCheckBoxItemStateChanged
        searchButton2.setEnabled(true);
        searchButton4.setEnabled(false);
    }//GEN-LAST:event_PatientCheckBoxItemStateChanged

    public java.lang.Object[] getListofActivities() {

        java.lang.Object[] listofActivities = null;

        java.util.Vector listActVector = new java.util.Vector(1, 4);

        try {
            PreparedStatement preparedStateme = connectDB.prepareStatement("select distinct (service_type),rate,'1',code from pb_operating_parameters where main_service ilike '%Fee' and gl_account = '" + gLCodeTxt.getText() + "' and service_type=upper(service_type) ");

            ResultSet rset1 = preparedStateme.executeQuery();

            while (rset1.next()) {
                for (int i = 1; i < 5; i++) {
                    listActVector.addElement(rset1.getObject(i));
                }
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        listofActivities = listActVector.toArray();
        System.out.println("Done list of Items in the Service List ...");
        return listofActivities;
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        java.lang.Object[] listofActNow = this.getListofActivities();

        for (int i = 0; i < listofActNow.length; i++) {

            System.out.println(listofActNow[i]);

        }

        int j = 0;
        // if(patientNumberTxt.getText().length()>0){
        //START
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
//int enteredValues = mainItemstbl.getRowCount();
        for (int i = 0; i < mainItemstbl.getRowCount(); i++) {
            if (mainItemstbl.getValueAt(i, 0) != null) {

                j = i;
                System.err.println("ITEMS ALREADY INSERTED:::" + j);
                if (!mainItemstbl.getValueAt(i, 0).toString().equalsIgnoreCase("DISPENSING FEE")) {
                    try {
                        PreparedStatement preparedStateme = connectDB.prepareStatement("select distinct (service_type),rate,'1',code from pb_operating_parameters where main_service ilike '%Fee' and gl_account = '" + gLCodeTxt.getText() + "' and service_type=upper(service_type) ");

                        ResultSet rset1 = preparedStateme.executeQuery();

                        while (rset1.next()) {

                            mainItemstbl.setValueAt(rset1.getObject(1), j + 1, 0);
                            mainItemstbl.setValueAt(rset1.getDouble(3), j + 1, 2);
                            mainItemstbl.setValueAt(rset1.getDouble(2), j + 1, 3);
                            mainItemstbl.setValueAt(rset1.getObject(4), j + 1, 7);
                            mainItemstbl.setValueAt("1", j + 1, 8);
                            mainItemstbl.setValueAt(gLCodeTxt.getText(), j + 1, 6);
                            mainItemstbl.setValueAt(0, j + 1, 4);

                            mainItemstbl.setValueAt(1, j + 1, 1);

                            mainItemstbl.setValueAt(rset1.getDouble(2), j + 1, 5);

                            double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(mainItemstbl, 5);
                            jTextField10.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                            billTotalTxt.setText(java.lang.String.valueOf(totalSum));

                        }

                    } catch (SQLException ex) {
                        ex.printStackTrace();
                    }

                }

            } else {
                try {
                    PreparedStatement preparedStateme = connectDB.prepareStatement("select distinct upper(service_type),rate,'1',code from pb_operating_parameters where main_service ilike 'Pharmacy Fee' AND service_type ilike 'dispensing fee'");

                    ResultSet rset1 = preparedStateme.executeQuery();

                    while (rset1.next()) {

                        mainItemstbl.setValueAt(rset1.getObject(1), j, 0);
                        mainItemstbl.setValueAt(rset1.getDouble(3), j, 2);
                        mainItemstbl.setValueAt(rset1.getDouble(2), j, 3);
                        mainItemstbl.setValueAt(rset1.getObject(4), j, 7);
                        mainItemstbl.setValueAt("1", j, 8);
                        mainItemstbl.setValueAt(gLCodeTxt.getText(), j, 6);
                        mainItemstbl.setValueAt(0, j, 4);

                        mainItemstbl.setValueAt(1, j, 1);

                        mainItemstbl.setValueAt(rset1.getDouble(2), j, 5);

                        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(mainItemstbl, 5);
                        jTextField10.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                        billTotalTxt.setText(java.lang.String.valueOf(totalSum));

                    }

                    //6
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }

            }
        }
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        //  }

        //   else{
        //
        //       JOptionPane.showMessageDialog(this, "Select A Patient File", "CONFIRMATION", JOptionPane.INFORMATION_MESSAGE);
        //
        //   }
    }//GEN-LAST:event_jButton1ActionPerformed
    private void populateTable1(java.lang.String patient_no) {
        int j = 0;
        int i = 0;
        double Qty = 0.00;
        try {
            java.sql.Statement stmtTable11 = connectDB.createStatement();

            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT count(patient_no)  FROM hp_pharmacy WHERE patient_no = '" + patient_no + "' AND paid = false");

            while (rsetTable11.next()) {
                j = rsetTable11.getInt(1);
            }
            if (j > 0) {
                java.sql.Statement stmtTable1 = connectDB.createStatement();
                java.sql.Statement stmtTable111 = connectDB.createStatement();

                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT description, sum(quantity),price,sum((quantity*price)-amount),sum(amount),gl_code,item_code,strength  FROM hp_pharmacy WHERE patient_no = '" + patient_no + "' AND paid = false AND date_prescribed = '" + datePicker1.getDate().toString() + "' group by description,price,gl_code,item_code,strength ");

                while (rsetTable1.next()) {

                    System.out.println("Working at table row " + i);
                    mainItemstbl.setValueAt(rsetTable1.getObject(1), i, 0);
                    mainItemstbl.setValueAt(rsetTable1.getObject(2), i, 1);
                    mainItemstbl.setValueAt(rsetTable1.getObject(3), i, 3);
                    if (rsetTable1.getDouble(4) > 0) {
                        mainItemstbl.setValueAt(rsetTable1.getObject(4), i, 4);
                    } else {
                        mainItemstbl.setValueAt(new java.lang.Double(0.00), i, 4);
                    }
                    mainItemstbl.setValueAt(rsetTable1.getObject(5), i, 5);
                    mainItemstbl.setValueAt(rsetTable1.getObject(6), i, 6);

                    mainItemstbl.setValueAt(rsetTable1.getObject(7), i, 7);
                    mainItemstbl.setValueAt(rsetTable1.getObject(8), i, 8);

                    java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("select sum(receiving-issuing) from st_sub_stores where item_code = '" + mainItemstbl.getValueAt(i, 7).toString() + "' AND store_name ilike '" + jComboBox4.getSelectedItem().toString() + "'");
                    while (rsetTable111.next()) {

                        mainItemstbl.setValueAt(rsetTable111.getObject(1), i, 2);
                        //jTable1.setValueAt(new java.lang.String(dbObject.getDBObject(rsetTable111.getObject(1), i, 2), "0.00"));

                        i++;

                    }
                }
            }
        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
    }

    /*    private void cmboxActionPerformed(java.awt.event.ActionEvent evt){
     int j = 0;
    
     java.lang.Object selectedGuaran = cmbox.getSelectedItem();
     int i = jTable1.getSelectedRow();
     if ( i > -1){
     if (selectedGuaran != null) {
    
     try {
     java.sql.Statement pstmt = connectDB.createStatement();
     java.sql.ResultSet rs = pstmt.executeQuery("select sp.selling_price::numeric from st_stock_prices sp where product = '"+selectedGuaran+"'");
     while (rs.next()){
     jTable1.setValueAt(rs.getObject(1),i,3);
     }
     } catch(java.sql.SQLException sqlex){
     System.out.println(sqlex.getMessage());
     }
    
    
    
     try {
     java.sql.Statement pstmt = connectDB.createStatement();
     java.sql.Statement pstmt1 = connectDB.createStatement();
    
     java.sql.ResultSet rs1 = pstmt1.executeQuery("select count(item) from st_stock_cardex sc where item = '"+selectedGuaran+"' and sc.cost_center = 'Pharmacy'");
     while (rs1.next())
     j = rs1.getInt(1);
     if (j > 0){
    
     java.sql.ResultSet rs = pstmt.executeQuery("select sum(sc.quantity_received - sc.sub_store_issuing)::numeric from st_stock_cardex sc where item = '"+selectedGuaran+"' and sc.store = 'Pharmacy'");
     while (rs.next()){
    
     jTable1.setValueAt(rs.getObject(1),i,2);
    
     }
     } else {
     jTable1.setValueAt("0.00",i,2);
     }
     } catch(java.sql.SQLException sqlex){
     System.out.println(sqlex.getMessage());
     }
    
     try {
     java.sql.Statement pstmt = connectDB.createStatement();
    
     java.sql.ResultSet rs = pstmt.executeQuery("select code from pb_activity where activity = '"+jTextField4.getText()+"'");
     while (rs.next()){
     jTable1.setValueAt(rs.getObject(1),i,6);
    
     }
     } catch(java.sql.SQLException sqlex){
     System.out.println(sqlex.getMessage());
     }
     }
    
     }
     }
     */
    private void startRunning() {

        System.out.println("Starting to run Progress Thread");

        if (updatePatientList == null || !updatePatientList.isAlive()) {

            updatePatientList = new UpdatePatientList(this);

            updatePatientList.start();

            System.out.println("Progress Thread started");

        }

    }

    private void stopRunning() {

        System.out.println("Stopping run Progress Thread");

        updatePatientList.setStop(false);

    }

    class UpdatePatientList extends java.lang.Thread {

        java.lang.String selectedItem;
        int refreshWaitTime = 10000;

        public UpdatePatientList(java.awt.Component parent) {
        }

        public void setStop(boolean refreshstatus) {

            refreshStatus = refreshstatus;

        }
        /*       public void run() {
        
         System.out.println("Loading Patient refresh thread.");
        
         while (refreshStatus) {
        
         try {
        
         selectedItem = jComboBox131.getSelectedItem().toString();
        
         crset1.execute();
        
         jComboBox131.setSelectedItem(selectedItem);
        
         } catch (java.sql.SQLException sqlExec) {
        
         javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());
        
         }
        
         try {
        
         java.lang.Thread.sleep(refreshWaitTime);
        
         } catch (java.lang.InterruptedException intExec) {
        
         javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), "Interruption Exception!");
         }
        
         }
        
         }
         */
    }
    /*  public void tableModel1TableChanged() {
     System.out.println("Calculating totals for table 13 and 2.");
     //        double resFloat = 0.00;
     double resFloat = 0.00;
     double Total = java.lang.Double.parseDouble(jTextField82.getText());
     for (int i = 0; i < jTable13.getRowCount(); i++) {
    
     if (jTable13.getModel().getValueAt(i, 0) != null) {
    
     if (jTable13.getSelectedColumn() == 1) {
    
     resFloat = resFloat + Double.parseDouble(jTable13.getModel().getValueAt(i, 5).toString());
    
     jTextField32.setText(java.lang.String.valueOf(resFloat));
     }else
     //   if (jTable11.getSelectedColumn() == 4) {
    
     resFloat = resFloat + Double.parseDouble(jTable13.getModel().getValueAt(i,5).toString());
     //9   }
    
     jTextField32.setText(java.lang.String.valueOf(resFloat));
     //  jTextField10.setText(java.lang.String.valueOf(resFloat+Total));
     if (resFloat>Total){
     jTextField10.setText(java.lang.String.valueOf(resFloat+Total));
     }else{
     jTextField10.setText(java.lang.String.valueOf(resFloat));
     }
     }
     }
    
     //               jTextField31.setText(java.lang.String.valueOf(resFloat));
     }
     public void tableModel1TableChanged(javax.swing.event.TableModelEvent evt) {
    
     //        double resFloat = 0.00;
     double resFloat = 0.00;
    
     double Total = java.lang.Double.parseDouble(jTextField82.getText());
    
     for (int i = 0; i < jTable13.getRowCount(); i++) {
    
     if (jTable11.getModel().getValueAt(i, 0) != null) {
    
     if (jTable13.getSelectedColumn() == 1) {
    
     resFloat = resFloat + Double.parseDouble(jTable13.getModel().getValueAt(i,5).toString());
    
     jTextField32.setText(java.lang.String.valueOf(resFloat));
     jTextField10.setText(java.lang.String.valueOf(resFloat+Total));
     }else
     //    if (jTable11.getSelectedColumn() == 4) {
    
     resFloat = resFloat + Double.parseDouble(jTable13.getModel().getValueAt(i,5).toString());
     //  }
     jTextField32.setText(java.lang.String.valueOf(resFloat));
     // jTextField10.setText(java.lang.String.valueOf(resFloat+Total));
     if (resFloat>Total){
     jTextField10.setText(java.lang.String.valueOf(resFloat+Total));
     }else{
     jTextField10.setText(java.lang.String.valueOf(resFloat));
     }
     }
     }
    
     //               jTextField31.setText(java.lang.String.valueOf(resFloat));
     }
    
    
     public void tableModelTableChanged2() {
     System.out.println("Calculating totals for table 11 and 2.");
     //        double resFloat = 0.00;
     double resFloat = 0.00;
     double Total = java.lang.Double.parseDouble(jTextField81.getText());
     for (int i = 0; i < jTable11.getRowCount(); i++) {
    
     if (jTable11.getModel().getValueAt(i, 0) != null) {
    
     if (jTable11.getSelectedColumn() == 1) {
    
     resFloat = resFloat + Double.parseDouble(jTable11.getModel().getValueAt(i, 5).toString());
    
     jTextField31.setText(java.lang.String.valueOf(resFloat));
     jTextField14.setText(java.lang.String.valueOf(resFloat+Total));
     }else
     //   if (jTable11.getSelectedColumn() == 4) {
    
     resFloat = resFloat + Double.parseDouble(jTable11.getModel().getValueAt(i,5).toString());
     //9   }
    
     jTextField31.setText(java.lang.String.valueOf(resFloat));
     // jTextField14.setText(java.lang.String.valueOf(resFloat+Total));
     if (resFloat>Total){
     jTextField14.setText(java.lang.String.valueOf(resFloat+Total));
     }else{
     jTextField14.setText(java.lang.String.valueOf(resFloat));
     }
     }
     }
    
     //               jTextField31.setText(java.lang.String.valueOf(resFloat));
     }*/
    /*  public void tableModelTableChanged() {
     System.out.println("Calculating totals for table 12 and 21.");
     //        double resFloat = 0.00;
     double resFloat1 = 0.00;
     double Total = java.lang.Double.parseDouble(jTextField8.getText());
     for (int i = 0; i < jTable1.getRowCount(); i++) {
    
     if (jTable1.getModel().getValueAt(i, 0) != null) {
    
     if (jTable1.getSelectedColumn() == 1) {
    
     resFloat1 = resFloat1 + Double.parseDouble(jTable1.getModel().getValueAt(i, 5).toString());
    
     //   }
    
     jTextField3.setText(java.lang.String.valueOf(resFloat1));
     jTextField15.setText(java.lang.String.valueOf(resFloat1+Total));
    
     }else
     //    if (jTable1.getSelectedColumn() == 4) {
    
     resFloat1 = resFloat1 + Double.parseDouble(jTable1.getModel().getValueAt(i,5).toString());
     //    }
     jTextField3.setText(java.lang.String.valueOf(resFloat1));
     if (resFloat1>Total){
     jTextField15.setText(java.lang.String.valueOf(resFloat1+Total));
     }else{
     jTextField15.setText(java.lang.String.valueOf(resFloat1));
     }
    
     }
     }
    
     //               jTextField31.setText(java.lang.String.valueOf(resFloat));
     }
     public void tableModelTableChanged(javax.swing.event.TableModelEvent evt) {
    
     //        double resFloat = 0.00;
     double resFloat1 = 0.00;
     double Total = java.lang.Double.parseDouble(jTextField8.getText());
     for (int i = 0; i < jTable1.getRowCount(); i++) {
    
     if (jTable1.getModel().getValueAt(i, 0) != null) {
    
     if (jTable1.getSelectedColumn() == 1) {
    
     resFloat1 = resFloat1 + Double.parseDouble(jTable1.getModel().getValueAt(i, 5).toString());
    
     // }
    
     jTextField3.setText(java.lang.String.valueOf(resFloat1));
     jTextField15.setText(java.lang.String.valueOf(resFloat1+Total));
     }else
     //  if (jTable11.getSelectedColumn() == 4) {
    
     resFloat1 = resFloat1 + Double.parseDouble(jTable1.getModel().getValueAt(i,5).toString());
     //  }
     jTextField3.setText(java.lang.String.valueOf(resFloat1));
     if (resFloat1>Total){
     jTextField15.setText(java.lang.String.valueOf(resFloat1+Total));
     }else{
     jTextField15.setText(java.lang.String.valueOf(resFloat1));
     }
     }
     }
    
     //               jTextField31.setText(java.lang.String.valueOf(resFloat));
     }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox OutptChkbx;
    private javax.swing.JCheckBox PatientCheckBox;
    private javax.swing.JCheckBox PrescriptionCheckBox;
    private javax.swing.JCheckBox WalkinPtbx;
    public static javax.swing.JTextField billTotalTxt;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup21;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private javax.swing.JButton dispose11;
    private javax.swing.JTextField gLCodeTxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton121;
    private javax.swing.JButton jButton122;
    private javax.swing.JButton jButton32;
    public javax.swing.JButton jButton41;
    private javax.swing.JButton jButton4212;
    private javax.swing.JButton jButton42121;
    private javax.swing.JButton jButton5212;
    private javax.swing.JButton jButton52121;
    private javax.swing.JButton jButton54;
    private javax.swing.JButton jButton63;
    public static javax.swing.JButton jButton7;
    private javax.swing.JButton jButton92;
    private javax.swing.JButton jButton93;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox31;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JComboBox jComboBox1311;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel532;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel413;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel641;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JDialog jSearchDialog13;
    private javax.swing.JDialog jSearchDialog212;
    private javax.swing.JDialog jSearchDialog4;
    private javax.swing.JPanel jSearchPanel13;
    private javax.swing.JPanel jSearchPanel212;
    private javax.swing.JPanel jSearchPanel2121;
    private javax.swing.JPanel jSearchPanel213;
    private javax.swing.JPanel jSearchPanel3;
    private javax.swing.JScrollPane jSearchScrollPane13;
    private javax.swing.JScrollPane jSearchScrollPane212;
    private javax.swing.JScrollPane jSearchScrollPane2121;
    private javax.swing.JScrollPane jSearchScrollPane3;
    private javax.swing.JScrollPane jSearchScrollPane4;
    private javax.swing.JTable jSearchTable13;
    private javax.swing.JTable jSearchTable212;
    private javax.swing.JTable jSearchTable2121;
    private javax.swing.JTable jSearchTable3;
    private javax.swing.JTable jSearchTable4;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private static javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField1113;
    private javax.swing.JTextField jTextField11312;
    private javax.swing.JTextField jTextField113121;
    private javax.swing.JTextField jTextField114;
    private javax.swing.JTextField jTextField115;
    public static javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    public static javax.swing.JTextField jTextField16;
    public static javax.swing.JTextField jTextField17;
    public static javax.swing.JTextField jTextField18;
    public static javax.swing.JTextField jTextField19;
    private javax.swing.JTextField jTextField2;
    public static javax.swing.JTextField jTextField20;
    public static javax.swing.JTextField jTextField21;
    private javax.swing.JTextField jTextField22;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField32;
    private javax.swing.JTextField jTextField42;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField82;
    public static javax.swing.JTextField jTextField92;
    private javax.swing.JTextField jTextField93;
    public static javax.swing.JTable mainItemstbl;
    private javax.swing.JDialog medicinesSearchDialog;
    public static javax.swing.JDialog patientSearchdlg;
    private javax.swing.JTextField payBillNumberTxt;
    private javax.swing.JFormattedTextField payerMobileTelephoneNumberTxt;
    private javax.swing.JComboBox paymentModeCmbx;
    private javax.swing.JButton searchButton2;
    private javax.swing.JButton searchButton3;
    private javax.swing.JButton searchButton4;
    private javax.swing.JPanel spacerPanel;
    private javax.swing.JComboBox storeNameCmbx;
    // End of variables declaration//GEN-END:variables

    private void populateTable1(java.lang.String patient_no, java.lang.String prescription_no, java.lang.String visit_id) {
        int j = 0;
        int i = 0;
        double Qty = 0.00;
        try {
            java.sql.Statement stmtTable11 = connectDB.createStatement();

            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT count(patient_no)  FROM hp_pharmacy "
                    + "WHERE  paid=false and collected = false and patient_no = '" + patient_no + "' and  visit_id='" + visit_id + "' and prescription_no='" + prescription_no + "'"
                    + "");

            while (rsetTable11.next()) {
                j = rsetTable11.getInt(1);
            }
            if (j > 0) {
                java.sql.Statement stmtTable1 = connectDB.createStatement();
                java.sql.Statement stmtTable111 = connectDB.createStatement();

                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT description, sum(quantity),price,sum((quantity*price)-amount),sum(amount),gl_code,item_code,strength  FROM hp_pharmacy "
                        + "WHERE paid=false and collected = false and patient_no = '" + patient_no + "'  and  visit_id='" + visit_id + "' and prescription_no='" + prescription_no + "'"
                        + "  group by description,price,gl_code,item_code,strength ");

                while (rsetTable1.next()) {

                    System.out.println("Working at table row " + i);
                    mainItemstbl.setValueAt(rsetTable1.getObject(1), i, 0);
                    mainItemstbl.setValueAt(rsetTable1.getObject(2), i, 1);
                    mainItemstbl.setValueAt(rsetTable1.getObject(3), i, 3);
                    if (rsetTable1.getDouble(4) > 0) {
                        mainItemstbl.setValueAt(rsetTable1.getObject(4), i, 4);
                    } else {
                        mainItemstbl.setValueAt(new java.lang.Double(0.00), i, 4);
                    }
                    mainItemstbl.setValueAt(rsetTable1.getObject(5), i, 5);
                    mainItemstbl.setValueAt(rsetTable1.getObject(6), i, 6);

                    mainItemstbl.setValueAt(rsetTable1.getObject(7), i, 7);
                    mainItemstbl.setValueAt(rsetTable1.getObject(8), i, 8);

                    java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("select sum(receiving-issuing) from st_sub_stores where item_code = '" + mainItemstbl.getValueAt(i, 7).toString() + "' AND store_name ilike '" + jComboBox4.getSelectedItem().toString() + "'");
                    while (rsetTable111.next()) {

                        // jTable13.setValueAt(rsetTable111.getObject(1), i, 2);
                        mainItemstbl.setValueAt(dbObject.getDBObject(rsetTable111.getObject(1), "0.0"), i, 2);

                        i++;

                    }
                }
            }
        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
    }
}
