/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.afrisoftech.hospinventory;

/**
 *
 * @author sytem partners
 */
import com.afrisoftech.lib.ClearTable;
import com.afrisoftech.sys.SplashScreenDialog;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;

public class CsoRequisitionApproval extends javax.swing.JPanel {

    /**
     * Creates new form CsoRequisitionApproval
     */
    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    String selectedPR = null;
    java.lang.String designation = null;
    private String evaluation_dtls;

    public CsoRequisitionApproval(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB, java.lang.String Designation) {

        connectDB = connDb;

        pConnDB = pconnDB;
        designation = Designation;
        initComponents();

//         ApprovalTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT   requisition_no as \"PR N0:\",    \n" +
//"       sum(price*quantity) as \"Total Price\"  FROM st_receive_requisation WHERE requisition_no ILIKE '%PRQ%' and approval_status=FALSE \n" +
//"       GROUP BY requisition_no,cost_center,date_due"));
        refreshItems();

        setColumnAlignmentCenter(ApprovalTbl, 0);

        ////number of PRs awaiting approval
        approvalLbl.setText(ApprovalTbl.getRowCount() + "  PRs Awaiting Approval");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel7 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ApprovalTbl = new com.afrisoftech.dbadmin.JTable();
        PRQtxt = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        postbtn = new javax.swing.JButton();
        cancelbtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        PurchaseItemsTbl = new com.afrisoftech.dbadmin.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        buyerCmbx = new javax.swing.JComboBox();
        buyernameCmbx = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel111 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        reqDateTxt = new javax.swing.JTextField();
        reqDeptTxt = new javax.swing.JTextField();
        DueDateTxt = new javax.swing.JTextField();
        proDeptTxt = new javax.swing.JTextField();
        jPanel41 = new javax.swing.JPanel();
        jScrollPane21 = new javax.swing.JScrollPane();
        ReasonPurchaseTxtPane = new javax.swing.JTextPane();
        NoreqPane = new javax.swing.JPanel();
        approvalLbl = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1000, 500));
        setLayout(new java.awt.GridBagLayout());

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "PRs Awaiting Approval", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanel7.setMinimumSize(new java.awt.Dimension(100, 250));
        jPanel7.setPreferredSize(new java.awt.Dimension(100, 250));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        jScrollPane3.setMinimumSize(new java.awt.Dimension(250, 100));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(250, 100));

        ApprovalTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "PR", "STORE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ApprovalTbl.setMinimumSize(new java.awt.Dimension(90, 34));
        ApprovalTbl.setPreferredSize(new java.awt.Dimension(90, 750));
        ApprovalTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ApprovalTblMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(ApprovalTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(jScrollPane3, gridBagConstraints);

        PRQtxt.setText("Search PR...");
        PRQtxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                PRQtxtCaretUpdate(evt);
            }
        });
        PRQtxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PRQtxtMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel7.add(PRQtxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel7, gridBagConstraints);

        jPanel4.setMinimumSize(new java.awt.Dimension(250, 250));
        jPanel4.setPreferredSize(new java.awt.Dimension(250, 250));
        jPanel4.setRequestFocusEnabled(false);
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel3.setMinimumSize(new java.awt.Dimension(250, 27));
        jPanel3.setPreferredSize(new java.awt.Dimension(250, 27));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        postbtn.setMnemonic('s');
        postbtn.setText("Approve for Order    ");
        postbtn.setMinimumSize(new java.awt.Dimension(123, 25));
        postbtn.setPreferredSize(new java.awt.Dimension(123, 25));
        postbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel3.add(postbtn, gridBagConstraints);

        cancelbtn.setMnemonic('l');
        cancelbtn.setText("Clear");
        cancelbtn.setMinimumSize(new java.awt.Dimension(123, 25));
        cancelbtn.setPreferredSize(new java.awt.Dimension(123, 25));
        cancelbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(cancelbtn, gridBagConstraints);

        jButton1.setMnemonic('r');
        jButton1.setText("Remove Row");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton1, gridBagConstraints);

        jButton2.setText("View Sent PRs");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(jButton2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jPanel3, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        PurchaseItemsTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Item Description", "Units", "Quantity", "Price", "Balance", "Code", "Remark"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true, true, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        /*java.lang.Object[] strCmb = {"Normal","Urgent",""};

        javax.swing.JComboBox cmBox = new javax.swing.JComboBox(strCmb);

        javax.swing.table.TableColumn teditor = this.jTable1.getColumn("Status");

        teditor.setCellEditor(new javax.swing.DefaultCellEditor(cmBox));
        */

        javax.swing.table.TableColumn column = null;
        for (int i = 0; i < 4; i++) {
            column = PurchaseItemsTbl.getColumnModel().getColumn(i);
            if (i == 0) {

                column.setPreferredWidth(300); //sport column is bigger
            } else {
                if (i == 1) {
                    column.setPreferredWidth(200);
                } else {
                    //if (i == 2) {
                        column.setPreferredWidth(200);
                        // }  else
                    //column.setPreferredWidth(50);

                }
            }
        }

        PurchaseItemsTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PurchaseItemsTblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(PurchaseItemsTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        jPanel2.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel4.add(jPanel2, gridBagConstraints);

        /*        javax.swing.SpinnerDateModel spinerDate = new javax.swing.SpinnerDateModel();
        dateSpinner = new javax.swing.JSpinner(spinerDate);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jPanel1.add(dateSpinner, gridBagConstraints);

        */
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("Procuring Department/Store");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Purchasing Officer", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 204)));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Section");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel6.add(jLabel1, gridBagConstraints);

        buyerCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '-' UNION SELECT DISTINCT buyer_name  FROM st_buyers_register where buyer_designation='SSO'"));
        buyerCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyerCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel6.add(buyerCmbx, gridBagConstraints);

        buyernameCmbx.setForeground(new java.awt.Color(0, 204, 255));
        buyernameCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(buyernameCmbx, gridBagConstraints);

        jLabel2.setText("Buyer Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel6.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel6, gridBagConstraints);

        jLabel111.setText("Requisition Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jLabel111, gridBagConstraints);

        jLabel4.setText("Due Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        jLabel22.setText("Requisitioning Department");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jLabel22, gridBagConstraints);

        reqDateTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(reqDateTxt, gridBagConstraints);

        reqDeptTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(reqDeptTxt, gridBagConstraints);

        DueDateTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel1.add(DueDateTxt, gridBagConstraints);

        proDeptTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(proDeptTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        jPanel4.add(jPanel1, gridBagConstraints);

        jPanel41.setBorder(javax.swing.BorderFactory.createTitledBorder("Remarks"));
        jPanel41.setLayout(new java.awt.GridBagLayout());

        jScrollPane21.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        ReasonPurchaseTxtPane.setText("Take necessary action");
        jScrollPane21.setViewportView(ReasonPurchaseTxtPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel41.add(jScrollPane21, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        jPanel4.add(jPanel41, gridBagConstraints);

        NoreqPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(255, 0, 51), null, null));
        NoreqPane.setLayout(new java.awt.GridBagLayout());

        approvalLbl.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        approvalLbl.setForeground(new java.awt.Color(255, 0, 51));
        approvalLbl.setText("No: Of PRs Awaiting Approval");
        NoreqPane.add(approvalLbl, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(NoreqPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel4, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void ApprovalTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ApprovalTblMouseClicked
        ////clearing the products table
        for (int k = 0; k < PurchaseItemsTbl.getRowCount(); k++) {
            for (int r = 0; r < PurchaseItemsTbl.getColumnCount(); r++) {
                PurchaseItemsTbl.getModel().setValueAt(null, k, r);
            }
        }

        ////clear the JTextPane
     //   ReasonPurchaseTxtPane.setText(null);

        //////Fill the PR table and other details
        int rowselect = ApprovalTbl.getSelectedRow();
        String getPr = null;
        getPr = ApprovalTbl.getValueAt(rowselect, 0).toString();
        selectedPR = getPr;

        ////a query to fill the remaining details
        java.sql.Statement stmt;
        try {
            stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("SELECT  cost_center, item_description, \n"
                    + "       units, quantity, date_due, date, status, requisition_no, \n"
                    + "       price, store_name,  balance,reason, \n"
                    + "       terms,item_code\n"
                    + "       \n"
                    + "  FROM st_receive_requisation WHERE requisition_no='" + getPr + "'");
            int rows = 0;
            while (rset.next()) {
                reqDateTxt.setText(rset.getString("date"));
                proDeptTxt.setText(rset.getString("cost_center"));
                reqDeptTxt.setText(rset.getString("store_name"));
                DueDateTxt.setText(rset.getString("date_due"));

//                if(rset.getString("status").equals(FormalCbx.getActionCommand())){
//                    FormalCbx.setSelected(true);
//
//                }
//                else{
//                    EmergencyCbx.setSelected(true);
//                }
                PurchaseItemsTbl.setValueAt(rset.getString("item_description"), rows, 0);
                PurchaseItemsTbl.setValueAt(rset.getString("units"), rows, 1);
                PurchaseItemsTbl.setValueAt(rset.getString("quantity"), rows, 2);
                PurchaseItemsTbl.setValueAt(rset.getString("price"), rows, 3);
                PurchaseItemsTbl.setValueAt(rset.getString("balance"), rows, 4);
                PurchaseItemsTbl.setValueAt(rset.getString("item_code"), rows, 5);
                PurchaseItemsTbl.setValueAt(rset.getString("terms"), rows, 6);

                //incrementing the rows
                rows++;

                // ReasonPurchaseTxtPane.setText(rset.getString("reason"));
            }

            /////refreshing the Approval table
//            ApprovalTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT   requisition_no as \"PR N0:\",    \n" +
//                "       sum(price*quantity) as \"Total Price\"  FROM st_receive_requisation WHERE requisition_no ILIKE '%PRQ%' and approval_status=FALSE \n" +
//                "       GROUP BY requisition_no,cost_center,date_due"));
            refreshItems();

            setColumnAlignmentCenter(ApprovalTbl, 0);

        } catch (SQLException ex) {
            Logger.getLogger(RequisitionApprovalIntFr.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_ApprovalTblMouseClicked

    private void postbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postbtnActionPerformed

        if (buyerCmbx.getSelectedIndex() != 0) {

            java.sql.PreparedStatement pstmt221;
            try {
                java.sql.PreparedStatement pstmt225 = connectDB.prepareStatement("UPDATE st_receive_requisation set processed=true WHERE requisition_no = '" + selectedPR + "'");
                pstmt225.executeUpdate();

                java.sql.PreparedStatement pst = connectDB.prepareStatement("UPDATE st_authorizations SET  sso_awarded='" + buyerCmbx.getSelectedItem().toString() + "',sso_name='" + buyernameCmbx.getSelectedItem().toString() + "',cso_remarks='" + ReasonPurchaseTxtPane.getText() + "'  WHERE requisition_no='" + selectedPR + "';");
                pst.executeUpdate();

                java.sql.PreparedStatement pst3 = connectDB.prepareStatement("UPDATE st_receive_requisation SET  cost_center ='" + buyerCmbx.getSelectedItem().toString() + "'  WHERE requisition_no='" + selectedPR + "';");
                pst3.executeUpdate();

                evaluation_dtls = "INT_PR" + com.afrisoftech.lib.UserName.getLoginName(connectDB).toLowerCase() + "-" + com.afrisoftech.lib.UserName.getServerDate(connectDB);

                TenderTrack.TrackTablePR(connectDB, "assign_buyer", evaluation_dtls, selectedPR);

                JOptionPane.showMessageDialog(null, "  " + selectedPR + " APPROVED FOR ORDER", "CONFIRMATION", JOptionPane.INFORMATION_MESSAGE);

                refreshItems();
                ClearTable.clearthisTable(PurchaseItemsTbl);
                setColumnAlignmentCenter(ApprovalTbl, 0);

                
                approvalLbl.setText(ApprovalTbl.getRowCount() + "  PRs Awaiting to allocate");
                
            } catch (SQLException ex) {
                Logger.getLogger(RequisitionApprovalIntFr.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a section", "Confirmation", JOptionPane.ERROR_MESSAGE);
        }
        // Add your handling code here:
    }//GEN-LAST:event_postbtnActionPerformed

    private void cancelbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelbtnActionPerformed
        for (int k = 0; k < PurchaseItemsTbl.getRowCount(); k++) {
            for (int r = 0; r < PurchaseItemsTbl.getColumnCount(); r++) {
                PurchaseItemsTbl.getModel().setValueAt(null, k, r);
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_cancelbtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int rows2Delete = PurchaseItemsTbl.getSelectedRowCount();

        int[] selectedRows = PurchaseItemsTbl.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) PurchaseItemsTbl.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) PurchaseItemsTbl.getModel();

                defTableModel.removeRow(PurchaseItemsTbl.getSelectedRow());
            }
        }        // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void PurchaseItemsTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PurchaseItemsTblMouseClicked

        // Add your handling code here:
    }//GEN-LAST:event_PurchaseItemsTblMouseClicked

    private void PRQtxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_PRQtxtCaretUpdate
        // TODO add your handling code here:
        ApprovalTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct  re.requisition_no Requisitions,re.requisation from  st_receive_requisation re, st_authorizations au WHERE au.requisition_no=re.requisition_no AND re.approval_status = 'true' AND au.cso_awarded='" + designation + "' AND re.processed='false' AND re.type_of_pr= 'Internal Requisition' AND re.requisition_no ILIKE '%" + PRQtxt.getText() + "%' order by re.requisation asc "));
    }//GEN-LAST:event_PRQtxtCaretUpdate

    private void PRQtxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PRQtxtMouseClicked
        // TODO add your handling code here:
        if (PRQtxt.getText().contains("Search PR...")) {
            PRQtxt.setText("");
        }
    }//GEN-LAST:event_PRQtxtMouseClicked

    private void buyerCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyerCmbxActionPerformed
        // TODO add your handling code here:
        buyernameCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select distinct user_name from section_allocation where section ilike '" + buyerCmbx.getSelectedItem().toString() + "' and status=true"));

    }//GEN-LAST:event_buyerCmbxActionPerformed
    private void refreshItems() {

        ApprovalTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct  re.requisition_no Requisitions,re.requisation from  st_receive_requisation re, st_authorizations au WHERE au.requisition_no=re.requisition_no AND re.approval_status = 'true' AND au.cso_awarded='" + designation + "' AND re.processed='false' AND re.type_of_pr= 'Internal Requisition' order by re.requisation asc "));

    }

    public void setColumnAlignmentCenter(javax.swing.JTable thisOne, int column) {

        /////setting the column 1 alignment to center
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        thisOne.getColumnModel().getColumn(column).setCellRenderer(centerRenderer);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ApprovalTbl;
    private javax.swing.JTextField DueDateTxt;
    private javax.swing.JPanel NoreqPane;
    private javax.swing.JTextField PRQtxt;
    private javax.swing.JTable PurchaseItemsTbl;
    private javax.swing.JTextPane ReasonPurchaseTxtPane;
    private javax.swing.JLabel approvalLbl;
    private javax.swing.JComboBox buyerCmbx;
    private javax.swing.JComboBox buyernameCmbx;
    private javax.swing.JButton cancelbtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton postbtn;
    private javax.swing.JTextField proDeptTxt;
    private javax.swing.JTextField reqDateTxt;
    private javax.swing.JTextField reqDeptTxt;
    // End of variables declaration//GEN-END:variables
}
