/*
 * companyprflintfr.java
 *
 * Created on August 13, 2002, 11:36 AM
 */

package com.afrisoftech.hospinventory;

/**
 *
 * @author  root
 */
public class Stocktransfersintfr extends javax.swing.JInternalFrame {
    
    private  javax.swing.JComboBox cmbox = new javax.swing.JComboBox();
    
    
    
    private javax.swing.JComboBox cmbox2;
    /** Creates new form companyprflintfr */
    java.sql.Connection connectDB = null;
    
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    javax.swing.JSpinner dateSpinner = null;
    javax.swing.JSpinner dateSpinner1 = null;
    
    public Stocktransfersintfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {
        
        connectDB = connDb;
        
        pConnDB = pconnDB;
        
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton9 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jSearchDialog1 = new javax.swing.JDialog();
        jSearchPanel1 = new javax.swing.JPanel();
        jTextField112 = new javax.swing.JTextField();
        jSearchScrollPane1 = new javax.swing.JScrollPane();
        jSearchTable1 = new com.afrisoftech.dbadmin.JTable();
        jButton10 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jButton31 = new javax.swing.JButton();
        jButton512 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new com.afrisoftech.dbadmin.JTable();
        jLabel9 = new javax.swing.JLabel();
        jComboBox13 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jComboBox131 = new javax.swing.JComboBox();
        jTextField4 = new javax.swing.JTextField();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        jLabel21 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jTextField9 = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField111CaretUpdate(evt);
            }
        });
        jTextField111.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField111ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(jTextField111, gridBagConstraints);

        jSearchTable.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });

        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton9.setText("Cancel");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        jSearchDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchDialog1.setModal(true);
        jSearchDialog1.setUndecorated(true);
        jSearchPanel1.setLayout(new java.awt.GridBagLayout());

        jSearchPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTextField112.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField112CaretUpdate(evt);
            }
        });
        jTextField112.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField112ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel1.add(jTextField112, gridBagConstraints);

        jSearchTable1.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable1MouseClicked(evt);
            }
        });

        jSearchScrollPane1.setViewportView(jSearchTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel1.add(jSearchScrollPane1, gridBagConstraints);

        jButton10.setText("Cancel");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel1.add(jButton10, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog1.getContentPane().add(jSearchPanel1, gridBagConstraints);

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Stock Transfer");
        setToolTipText("");
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setVisible(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jSeparator1, gridBagConstraints);

        jButton1.setMnemonic('O');
        jButton1.setText("Ok");
        jButton1.setToolTipText("click to store data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton1, gridBagConstraints);

        jButton4.setMnemonic('C');
        jButton4.setText("Close");
        jButton4.setToolTipText("Click to close");
        jButton4.setSelected(true);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton4, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Utopia", 3, 18));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        getContentPane().add(jLabel12, gridBagConstraints);

        jButton31.setMnemonic('l');
        jButton31.setText("Clear");
        jButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton31ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton31, gridBagConstraints);

        jButton512.setMnemonic('R');
        jButton512.setText("RemoveRow");
        jButton512.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton512ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jButton512, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter items to transfer & their destination here"));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Item Description", "Unit", "Qty. Available", "Quantity Transfered", "Buying Price", "Selling Price", "Category", "Item Id", "New"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(204, 204, 255));
        jTable1.setSurrendersFocusOnKeystroke(true);

        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });

        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 5, 0, 5);
        jPanel1.add(jScrollPane1, gridBagConstraints);

        jLabel9.setText("Source Store");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel1.add(jLabel9, gridBagConstraints);

        jComboBox13.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select store_name from st_stores union all select store_name from st_main_stores order by store_name"));
        jComboBox13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox13ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jComboBox13, gridBagConstraints);

        jLabel1.setText("Destination Store");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel5.setText("Returned By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jTextField2, gridBagConstraints);

        jLabel2.setText("Received By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        jPanel1.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(jTextField3, gridBagConstraints);

        jComboBox131.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select store_name from st_stores union all select store_name from st_main_stores order by store_name"));
        jComboBox131.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox131ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jComboBox131, gridBagConstraints);

        jTextField4.setEditable(false);
        jTextField4.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField4.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel1.add(jTextField4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(datePicker1, gridBagConstraints);

        jLabel21.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel1.add(jLabel21, gridBagConstraints);

        buttonGroup1.add(jCheckBox1);
        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Transfer from on store to another");
        jCheckBox1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel1.add(jCheckBox1, gridBagConstraints);

        buttonGroup1.add(jCheckBox2);
        jCheckBox2.setText("Rectify previous transfer");
        jCheckBox2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jCheckBox2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel1.add(jCheckBox2, gridBagConstraints);

        jLabel3.setText("Transfer No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTextField9.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jTextField9, gridBagConstraints);

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif")));
        searchButton.setToolTipText("Search");
        searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel4.add(searchButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jPanel1, gridBagConstraints);

        jButton2.setMnemonic('h');
        jButton2.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 17;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton2, gridBagConstraints);

        setBounds(0, 0, 790, 459);
    }// </editor-fold>//GEN-END:initComponents
    
    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        jLabel3.setEnabled(true);
        searchButton.setEnabled(true);
// TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed
    
    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        jLabel3.setEnabled(false);
        searchButton.setEnabled(false);
// TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed
    
    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        jSearchDialog1.dispose();
// TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed
    
    private void jSearchTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable1MouseClicked
        
        
        jComboBox131.setSelectedItem(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 2).toString());
        jTextField9.setText(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 0).toString());
        java.text.DateFormat df = java.text.DateFormat.getDateInstance();
        
        java.text.SimpleDateFormat sdf = (java.text.SimpleDateFormat)df;
        
        sdf.applyPattern("yyyy-MM-dd");
        
        try {
            datePicker1.setDate(sdf.parse(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 3).toString()));
        } catch (java.text.ParseException pe) {
            javax.swing.JOptionPane.showMessageDialog(this, pe.getMessage());
        }
        jComboBox13.setSelectedItem(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 1).toString());
        jSearchDialog1.dispose();
// TODO add your handling code here:
    }//GEN-LAST:event_jSearchTable1MouseClicked
    
    private void jTextField112ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField112ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jTextField112ActionPerformed
    
    private void jTextField112CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField112CaretUpdate
        jSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT DISTINCT transaction_no,sub_store,store_name,trans_date FROM st_sub_stores WHERE transaction_no ILIKE '"+jTextField112.getText()+"%' AND receiving > 0 AND (transaction_no ilike 'T%' OR transaction_no ilike 'I%') and trans_date::date = '"+com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate())+"'ORDER BY transaction_no"));
        jSearchTable1.setShowHorizontalLines(false);
        jSearchScrollPane1.setViewportView(jSearchTable1);
        
// TODO add your handling code here:
    }//GEN-LAST:event_jTextField112CaretUpdate
    
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchButtonClicked();
        
        // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed
    private void searchButtonClicked() {
        
        System.out.println("Showing dialog");
        
        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.jTextField9.getLocationOnScreen();
        
        jSearchDialog1.setSize(400,200);
        
        jSearchDialog1.setLocation(point);
        
        jSearchDialog1.setVisible(true);
        
        
        
    }
    private void jComboBox131ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox131ActionPerformed
        try {
            
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select distinct gl_code from st_stock_prices where department ilike '"+jComboBox131.getSelectedItem()+"%'");
            while (rset.next()){
                jTextField4.setText(rset.getObject(1).toString());
                
            }
            
            java.sql.Statement stmt3 = connectDB.createStatement();
            java.sql.ResultSet rset3 = stmt3.executeQuery("select current_user");
            while (rset3.next()){
                jTextField3.setText(rset3.getObject(1).toString());
                
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Insert not successful");
        }        // Add your handling code here:
    }//GEN-LAST:event_jComboBox131ActionPerformed
    
    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate
        if(jTextField111.getCaretPosition() > 2){
            jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select product,units ,transfer_price ,selling_price,category,product_id FROM store_items WHERE product ILIKE '%"+jTextField111.getText()+"%' order by product"));
            
          /*  try {
                searchRowSet.execute("select product,units ,transfer_price ,selling_price,category,product_id FROM st_stock_prices WHERE product ILIKE '"+jTextField111.getText()+"%' and department ilike '"+this.jComboBox13.getSelectedItem().toString()+"%' order by product");
           
                jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("product", "Desc.", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("units", "Units", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("transfer_price", "Buying Price", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Selling Price", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("category", "Category", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("product_id", "Id", false)
                    //  new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl code", false)
                }));
           */
            jSearchScrollPane.setViewportView(jSearchTable);
            System.out.println("Cannot sort out");
            
        }           // Add your handling code here:
    }//GEN-LAST:event_jTextField111CaretUpdate
    
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        jSearchDialog.dispose();         // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed
    
    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),0),jTable1.getSelectedRow(), 0);
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),1),jTable1.getSelectedRow(), 1);
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),2),jTable1.getSelectedRow(), 4);
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),3),jTable1.getSelectedRow(), 5);
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),4),jTable1.getSelectedRow(), 6);
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),5),jTable1.getSelectedRow(), 7);
         jTable1.setValueAt(0.00,jTable1.getSelectedRow(),2);
        jSearchDialog.dispose();
      /*  int i = this.jTable1.getSelectedRow();
        int item = 0;
        try {
            
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select count(product) from st_stock_prices where department ilike '"+jComboBox131.getSelectedItem().toString()+"%' and product ilike '"+jTable1.getValueAt(i, 0).toString()+"'");
            
            while (rset.next()){
                item = rset.getInt(1);
            }
            
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Insert not successful");
            
            
        }
        
        try{
            java.sql.Statement pstmt12 = connectDB.createStatement();
            java.sql.ResultSet rs12 = pstmt12.executeQuery("select sum(qty),1 from stock_balance_qty where description = '"+jTable1.getValueAt(jTable1.getSelectedRow(),0)+"' and department ilike '"+jComboBox13.getSelectedItem().toString()+"%' AND dates <= '"+datePicker1.getDate()+"'");
            
            while (rs12.next()){
                jTable1.setValueAt(rs12.getObject(1),i,2);
                
            }
            
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Insert not successful");
            
            
        }
        
        if (item > 0){
            jTable1.setValueAt("True",i,8);
            try{
                java.sql.Statement pstmt12 = connectDB.createStatement();
                java.sql.ResultSet rs12 = pstmt12.executeQuery("select sum(qty),1 from stock_balance_qty where description = '"+jTable1.getValueAt(jTable1.getSelectedRow(),0)+"' and department ilike '"+jComboBox13.getSelectedItem().toString()+"%' AND dates <= '"+datePicker1.getDate()+"'");
                
                while (rs12.next()){
                    jTable1.setValueAt(rs12.getObject(1),i,2);
                    
                }
                
            } catch(java.sql.SQLException sqlex){
                System.out.println(sqlex.getMessage());
            }
        }else{
            jTable1.setValueAt("False",i,8);
        }
       **/
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked
    
    private void jTextField111ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField111ActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jTextField111ActionPerformed
    
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (jTable1.getSelectedColumn() == 0) {
            
            this.cmbox1MouseClicked();
        }          // Add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked
    private void cmbox1MouseClicked() {
        
        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane1.getLocationOnScreen();
        jSearchDialog.setSize(400,200);
        jSearchDialog.setLocation(point);
        jSearchDialog.setVisible(true);
    }
    private void jComboBox13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox13ActionPerformed
        jButton1.setEnabled(true);
    /*    crset1.setCommand("select distinct item FROM st_sub_stores WHERE store_name = '"+jComboBox13.getSelectedItem()+"' order by item");
        crset1.setConnectionSource(pConnDB);
     
        cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset1, "item", null, null, null));
        javax.swing.table.TableColumn s = this.jTable1.getColumn("Item Description");
        s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
        cmbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxActionPerformed(evt);
            }
        });
     
     */// Add your handling code here:
    }//GEN-LAST:event_jComboBox13ActionPerformed
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        setVisible(false);     // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed
    
    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton31ActionPerformed
        for (int k = 0; k < jTable1.getRowCount(); k++ ) {
            for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                jTable1.getModel().setValueAt(null,k,r);
            }
        }
        //   this.jComboBox1.setSelectedItem(null);
        this.jComboBox13.setSelectedItem(null);
        //        this.jComboBox11.setSelectedItem(null);
        this.jTextField3.setText("");
        this.jTextField2.setText("");
        // Add your handling code here:
    }//GEN-LAST:event_jButton31ActionPerformed
    
    private void jButton512ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton512ActionPerformed
        int rows2Delete = jTable1.getSelectedRowCount();
        
        int[] selectedRows = jTable1.getSelectedRows();
        
        if (rows2Delete < 1) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            
            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");
            
        } else {
            
            if (rows2Delete > 1) {
                
                for (int i = 0; i < selectedRows.length; i++) {
                    
                    
                    
                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable1.getModel();
                    
                    defTableModel.removeRow(selectedRows[i]);
                    
                }
                
                
                
            } else {
                
                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable1.getModel();
                
                defTableModel.removeRow(jTable1.getSelectedRow());
            }
        }  // Add your handling code here:
    }//GEN-LAST:event_jButton512ActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        java.util.Date periodFrom = null;
        java.util.Date periodTo = null;
        
        try {
            
            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open'");
            while (rsetf.next()){
                periodFrom = rsetf.getDate(1);
                periodTo = rsetf.getDate(2);
            }
            
        }   catch(java.sql.SQLException sq){
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());
            
        }
        
        if(datePicker1.getDate().before(periodFrom) || datePicker1.getDate().after(periodTo)){
            javax.swing.JOptionPane.showMessageDialog(this,"You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(),"Caution Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);
            
        }else{
            if(jTable1.isEditing()){
                jTable1.getCellEditor().stopCellEditing();
            }
            java.util.Calendar calendar = java.util.Calendar.getInstance();
            double Total = 0.00;
            double qty = 0.00;
            double price = 0.00;
            
            long dateNow = calendar.getTimeInMillis();
            
            java.sql.Date datenowSql= new java.sql.Date(dateNow);
            try{
                String Stock = null;
                String actCode = null;
                String transNo = null;
                double quantity = 0.00;
                try {
                    connectDB.setAutoCommit(false);
                    if(jCheckBox1.isSelected()){
                        java.sql.Statement ps = connectDB.createStatement();
                        java.sql.ResultSet rs2 = ps.executeQuery("select 'T'||nextval('transfer_seq')");
                        while (rs2.next())
                            transNo = rs2.getObject(1).toString();
                        for (int i = 0; i< jTable1.getRowCount(); i++) {
                            if (jTable1.getModel().getValueAt(i,3) != null){
                                /*
                                if (jTable1.getModel().getValueAt(i,3) != null && jTable1.getModel().getValueAt(i,8) == "False"){
                                    
                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_stock_prices values( ?,?,?,?,?,?,?,?,?,?,?)");
                                    
                                    pstmt.setObject(1,jTable1.getValueAt(i,0).toString());
                                    pstmt.setObject(2,jTable1.getValueAt(i,7).toString());
                                    pstmt.setDouble(4,java.lang.Double.valueOf(jTable1.getValueAt(i,4).toString()));
                                    if(jTable1.getValueAt(i,5) == null){
                                        pstmt.setDouble(3,0.00);
                                    } else{
                                        pstmt.setDouble(3,java.lang.Double.valueOf(jTable1.getValueAt(i,5).toString()));
                                    }
                                    pstmt.setDate(5,com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt.setObject(6,jTable1.getValueAt(i,1).toString());
                                    pstmt.setObject(7,jComboBox131.getSelectedItem().toString());
                                    pstmt.setString(8,jTextField4.getText());
                                    if(jTable1.getValueAt(i,6) == null){
                                        pstmt.setString(9,"");
                                    } else{
                                        pstmt.setObject(9,jTable1.getValueAt(i,6).toString());
                                    }
                                    pstmt.setDouble(10,java.lang.Double.valueOf(jTable1.getValueAt(i,3).toString()));
                                    
                                    pstmt.setDouble(11,0.00);
                                    
                                    pstmt.executeUpdate();
                                    
                                    quantity = Double.parseDouble(jTable1.getModel().getValueAt(i, 3).toString());
                                    
                                    java.sql.PreparedStatement pstmt3 = connectDB.prepareStatement("UPDATE st_stock_prices SET balance = balance - "+new java.lang.Double(quantity)+" WHERE product = '"+jTable1.getValueAt(i,0).toString()+"' and department ilike '"+jComboBox13.getSelectedItem().toString()+"%'");
                                    pstmt3.executeUpdate();
                                }else{
                                    if (jTable1.getModel().getValueAt(i,3) != null && jTable1.getModel().getValueAt(i,8).toString() == "True"){
                                        
                                        
                                        quantity = Double.parseDouble(jTable1.getModel().getValueAt(i, 3).toString());
                                        
                                        java.sql.PreparedStatement pstmt3 = connectDB.prepareStatement("UPDATE st_stock_prices SET balance = balance - "+new java.lang.Double(quantity)+" WHERE product = '"+jTable1.getValueAt(i,0).toString()+"' and department ilike '"+jComboBox13.getSelectedItem().toString()+"%'");
                                        pstmt3.executeUpdate();
                                        java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("UPDATE st_stock_prices SET balance = balance + "+new java.lang.Double(quantity)+" WHERE product = '"+jTable1.getValueAt(i,0).toString()+"' and department ilike '"+jComboBox131.getSelectedItem().toString()+"%'");
                                        pstmt31.executeUpdate();
                                    }
                                }
                               */ 
                                price = Double.parseDouble(jTable1.getModel().getValueAt(i, 4).toString());
                                qty = Double.parseDouble(jTable1.getModel().getValueAt(i, 3).toString());
                                Total = price*qty;
                                java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into st_sub_stores values(?,? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?)");
                                
                                pstmt1.setString(1,jComboBox13.getSelectedItem().toString());
                                pstmt1.setObject(2,jTable1.getValueAt(i,0));
                                pstmt1.setDouble(7,0.00);
                                pstmt1.setDouble(3,0.00);
                                pstmt1.setDouble(5,java.lang.Double.valueOf(jTable1.getValueAt(i,4).toString()));
                                pstmt1.setDouble(6,Total);
                                pstmt1.setDouble(4,java.lang.Double.valueOf(jTable1.getValueAt(i,3).toString()));
                                pstmt1.setObject(8,transNo);
                                pstmt1.setObject(9,null);
                                pstmt1.setDate(10,com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                pstmt1.setString(11,jTextField3.getText());
                                pstmt1.setObject(12,jTable1.getValueAt(i,1));
                                pstmt1.setString(13,jComboBox131.getSelectedItem().toString());
                                pstmt1.setString(14,jTextField2.getText());
                                 pstmt1.setObject(15,jTable1.getValueAt(i,4));
                                pstmt1.executeUpdate();
                                
                                
                                java.sql.PreparedStatement pstmt11 = connectDB.prepareStatement("insert into st_sub_stores values(?,? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?)");
                                pstmt11.setString(1,jComboBox131.getSelectedItem().toString());
                                pstmt11.setObject(2,jTable1.getValueAt(i,0));
                                pstmt11.setDouble(3,java.lang.Double.valueOf(jTable1.getValueAt(i,3).toString()));
                                pstmt11.setDouble(4,0.00);
                                pstmt11.setDouble(5,java.lang.Double.valueOf(jTable1.getValueAt(i,4).toString()));
                                pstmt11.setDouble(6,Total);
                                pstmt11.setDouble(7,0.00);
                                pstmt11.setObject(8,transNo);
                                pstmt11.setObject(9,null);
                                pstmt11.setDate(10,com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                pstmt11.setString(11,jTextField3.getText());
                                pstmt11.setObject(12,jTable1.getValueAt(i,1));
                                pstmt11.setString(13,jComboBox13.getSelectedItem().toString());
                                pstmt11.setString(14,jTextField2.getText());
                                 pstmt11.setObject(15,jTable1.getValueAt(i,4));
                                pstmt11.executeUpdate();
                                
                                
                            }
                        }
                  
                    } else {
                        java.sql.PreparedStatement pstmt3 = connectDB.prepareStatement("UPDATE st_sub_stores SET sub_store = '"+jComboBox131.getSelectedItem().toString()+"',store_name = '"+jComboBox13.getSelectedItem().toString()+"',trans_date = '"+datePicker1.getDate()+"'  WHERE issuing > 0 and transaction_no = '"+jTextField9.getText()+"'");
                        pstmt3.executeUpdate();
                        java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("UPDATE st_sub_stores SET store_name = '"+jComboBox131.getSelectedItem().toString()+"', sub_store = '"+jComboBox131.getSelectedItem().toString()+"',trans_date = '"+datePicker1.getDate()+"'  WHERE receiving > 0 and transaction_no = '"+jTextField9.getText()+"'");
                        pstmt31.executeUpdate();
                    }
                    connectDB.commit();
                    connectDB.setAutoCommit(true);
                    
                    jLabel12.setForeground(java.awt.Color.blue);
                    javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully","Confirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                    for (int k = 0; k < jTable1.getRowCount(); k++ ) {
                        for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                            jTable1.getModel().setValueAt(null,k,r);
                        }
                    }
                    if(jCheckBox1.isSelected()){
                        TransferedItemsPdf policy = new TransferedItemsPdf();
                        policy.TransferedItemsPdf(connectDB,transNo);
                    }else{
                        TransferedItemsPdf policy = new TransferedItemsPdf();
                        policy.TransferedItemsPdf(connectDB,jTextField9.getText());
                    }
                    this.jButton1.setEnabled(false);
                    
                }   catch(java.sql.SQLException sq){
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                    
                    try {
                        connectDB.rollback();
                    }catch (java.sql.SQLException sql){
                        javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                    
                }
            } catch(java.lang.Exception ex) {
                System.out.println(ex.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
                
                
            }
        }
        
        // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
    
    
    
    private void cmboxActionPerformed(java.awt.event.ActionEvent evt) {
        java.lang.Object selectedGuaran = cmbox.getSelectedItem();
        int i = jTable1.getSelectedRow();
        int j = 0;
        if (selectedGuaran != null) {
            
            try {
                java.sql.Statement pstmt = connectDB.createStatement();
                //java.sql.ResultSet rs = pstmt.executeQuery("select sum(quantity_received-quantity_issued) from issiuing where item = '"+cmbox.getSelectedItem()+"'");
                java.sql.ResultSet rs = pstmt.executeQuery("select units,sum(receiving-issuing) from st_sub_stores where item = '"+selectedGuaran+"' and store_name = '"+jComboBox13.getSelectedItem().toString()+"' GROUP BY units");
                
                while (rs.next()){
                    jTable1.setValueAt(rs.getObject(1),i,1);
                    jTable1.setValueAt(rs.getObject(2),i,2);
                    //  jTextField8.setText(rs.getObject(2).toString());
                    
                }
            } catch(java.sql.SQLException sqlex){
                System.out.println(sqlex.getMessage());
            }
            
            // Add your handling code here:
        }
    }
    
    
    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        // Add your handling code here:
    }//GEN-LAST:event_jButton4MouseClicked
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton31;
    public javax.swing.JButton jButton4;
    private javax.swing.JButton jButton512;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JComboBox jComboBox13;
    private javax.swing.JComboBox jComboBox131;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JDialog jSearchDialog1;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jSearchPanel1;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane1;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTable jSearchTable1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JTextField jTextField112;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JButton searchButton;
    // End of variables declaration//GEN-END:variables
    
}
