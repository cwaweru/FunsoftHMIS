/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.afrisoftech.hospinventory;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author SPL7
 */
public class AnnualTenderIntfr extends javax.swing.JInternalFrame {

    /**
     * Creates new form AnnualTenderIntfr
     */
    java.sql.Connection connectDB = null;
    
    public AnnualTenderIntfr(java.sql.Connection connDB) {
        
        connectDB = connDB;
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton9 = new javax.swing.JButton();
        headerPanel = new javax.swing.JPanel();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        financialYearLbl = new javax.swing.JLabel();
        voteAccountLbl = new javax.swing.JLabel();
        finanacialYearCmbx = new javax.swing.JComboBox();
        voteAccountCmbx = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        bodyPanel = new javax.swing.JPanel();
        tenderDataJscrl = new javax.swing.JScrollPane();
        tenderdataTbl = new javax.swing.JTable();
        buttonPanel = new javax.swing.JPanel();
        saveBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        removeRowBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();
        spacerLbl = new javax.swing.JLabel();

        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(jTextField111, gridBagConstraints);

        jSearchTable.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton9.setText("Cancel");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Annual tender data entry form");
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        headerPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(datePicker1, gridBagConstraints);

        financialYearLbl.setText("Financial year");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(financialYearLbl, gridBagConstraints);

        voteAccountLbl.setText("Vote account");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(voteAccountLbl, gridBagConstraints);

        finanacialYearCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select DISTINCT financial_year FROM ac_aie_allocation ORDER BY financial_year"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(finanacialYearCmbx, gridBagConstraints);

        voteAccountCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select DISTINCT aieno FROM ac_aie_allocation ORDER BY aieno"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(voteAccountCmbx, gridBagConstraints);

        jLabel4.setText("Date of data entry");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(jLabel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 1;
        gridBagConstraints.ipady = 1;
        getContentPane().add(headerPanel, gridBagConstraints);

        bodyPanel.setLayout(new java.awt.GridBagLayout());

        tenderdataTbl.setAutoCreateRowSorter(true);
        tenderdataTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Tender Item", "Item code", "First Bidder", "Bid Amount", "Second Bidder", "Bid Amount", "Third Bidder", "Bid Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        javax.swing.JComboBox cmbox5 = new javax.swing.JComboBox();

        cmbox5.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT supplier_name FROM st_suppliers ORDER BY 1"));

        javax.swing.table.TableColumn seditor1 = this.tenderdataTbl.getColumn("First Bidder");
        javax.swing.table.TableColumn seditor2 = this.tenderdataTbl.getColumn("Second Bidder");
        javax.swing.table.TableColumn seditor3 = this.tenderdataTbl.getColumn("Third Bidder");

        seditor1.setCellEditor(new javax.swing.DefaultCellEditor(cmbox5));
        seditor2.setCellEditor(new javax.swing.DefaultCellEditor(cmbox5));
        seditor3.setCellEditor(new javax.swing.DefaultCellEditor(cmbox5));

        // cmbox5.addActionListener(new java.awt.event.ActionListener() {

            //     public void actionPerformed(java.awt.event.ActionEvent evt) {

                //         cmbox5ActionPerformed(evt);
                //     }
            // });
    tenderdataTbl.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            tenderdataTblMouseClicked(evt);
        }
    });
    tenderDataJscrl.setViewportView(tenderdataTbl);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    bodyPanel.add(tenderDataJscrl, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 500.0;
    getContentPane().add(bodyPanel, gridBagConstraints);

    buttonPanel.setLayout(new java.awt.GridBagLayout());

    saveBtn.setText("Save annual tender data");
    saveBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            saveBtnActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    buttonPanel.add(saveBtn, gridBagConstraints);

    editBtn.setText("Edit annual tender data");
    editBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            editBtnActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    buttonPanel.add(editBtn, gridBagConstraints);

    removeRowBtn.setText("Remove row");
    removeRowBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            removeRowBtnActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    buttonPanel.add(removeRowBtn, gridBagConstraints);

    closeBtn.setText("Close form");
    closeBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            closeBtnActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    buttonPanel.add(closeBtn, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 200.0;
    gridBagConstraints.weighty = 1.0;
    buttonPanel.add(spacerLbl, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    getContentPane().add(buttonPanel, gridBagConstraints);

    java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
    setBounds((screenSize.width-664)/2, (screenSize.height-331)/2, 664, 331);
    }// </editor-fold>//GEN-END:initComponents

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        int count = 0;
        try {
            for (int i = 0; i < tenderdataTbl.getRowCount(); i++) {
                if (tenderdataTbl.getValueAt(i, 0) != null) {
                    java.sql.PreparedStatement pstmtCheckCt = connectDB.prepareStatement("SELECT count(description) "
                            + "FROM st_product_list WHERE financial_year = ? AND vote_acc = ? AND description = ?");
                    pstmtCheckCt.setString(1, finanacialYearCmbx.getSelectedItem().toString());
                    pstmtCheckCt.setString(2, voteAccountCmbx.getSelectedItem().toString());
                    pstmtCheckCt.setString(3, tenderdataTbl.getValueAt(i, 0).toString());
                    java.sql.ResultSet rsetCheckCt = pstmtCheckCt.executeQuery();
                    while (rsetCheckCt.next()) {
                        count = rsetCheckCt.getInt(1);
                    }
                    
                    java.sql.PreparedStatement pstmtCheck = connectDB.prepareStatement("SELECT DISTINCT description, "
                            + "item_code FROM st_product_list WHERE financial_year = ? AND vote_acc = ?");
                    pstmtCheck.setString(1, finanacialYearCmbx.getSelectedItem().toString());
                    pstmtCheck.setString(2, voteAccountCmbx.getSelectedItem().toString());
                    java.sql.ResultSet rsetCheck = pstmtCheck.executeQuery();
                    // while (rsetCheck.next()) {
                    //     if ((rsetCheck.getString(1).equalsIgnoreCase(tenderdataTbl.getValueAt(i, 0).toString())) && (rsetCheck.getString(2).equalsIgnoreCase(tenderdataTbl.getValueAt(i, 1).toString()))) {
                    if (count > 0) {
                        java.sql.PreparedStatement pstmtUpdate = connectDB.prepareStatement("UPDATE st_product_list "
                                + " SET price = ? WHERE supplier = ? AND financial_year = ? and vote_acc = ?");
                        pstmtUpdate.setDouble(1, Double.parseDouble(tenderdataTbl.getValueAt(i, 3).toString()));
                        pstmtUpdate.setString(2, tenderdataTbl.getValueAt(i, 2).toString());
                        pstmtUpdate.setString(3, finanacialYearCmbx.getSelectedItem().toString());
                        pstmtUpdate.setString(4, this.voteAccountCmbx.getSelectedItem().toString());
                        pstmtUpdate.executeUpdate();
                        
                        java.sql.PreparedStatement pstmtUpdate1 = connectDB.prepareStatement("UPDATE st_product_list "
                                + " SET price = ? WHERE supplier = ? AND financial_year = ? and vote_acc = ?");
                        pstmtUpdate1.setDouble(1, Double.parseDouble(tenderdataTbl.getValueAt(i, 5).toString()));
                        pstmtUpdate1.setString(2, tenderdataTbl.getValueAt(i, 4).toString());
                        pstmtUpdate1.setString(3, finanacialYearCmbx.getSelectedItem().toString());
                        pstmtUpdate1.setString(4, this.voteAccountCmbx.getSelectedItem().toString());
                        pstmtUpdate1.executeUpdate();
                        
                        java.sql.PreparedStatement pstmtUpdate2 = connectDB.prepareStatement("UPDATE st_product_list "
                                + " SET price = ? WHERE supplier = ? AND financial_year = ? and vote_acc = ?");
                        pstmtUpdate2.setDouble(1, Double.parseDouble(tenderdataTbl.getValueAt(i, 7).toString()));
                        pstmtUpdate2.setString(2, tenderdataTbl.getValueAt(i, 6).toString());
                        pstmtUpdate2.setString(3, finanacialYearCmbx.getSelectedItem().toString());
                        pstmtUpdate2.setString(4, this.voteAccountCmbx.getSelectedItem().toString());
                        pstmtUpdate2.executeUpdate();
                        
                    } else {
                        
                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO st_product_list("
                                + "supplier, discount_rate, fob, item_code, description, unit, price, "
                                + "credit_period, capacity_limit, ex_stock, vat, date, vat_charged, "
                                + "user_name, financial_year, vote_acc)"
                                + "VALUES (?, null, null, ?, ?, null, ?, "
                                + "null, null, null, null, null, null, "
                                + "null, ?, ?)");
                        pstmt.setString(1, tenderdataTbl.getValueAt(i, 2).toString());
                        pstmt.setString(2, tenderdataTbl.getValueAt(i, 1).toString());
                        pstmt.setString(3, tenderdataTbl.getValueAt(i, 0).toString());
                        pstmt.setDouble(4, Double.parseDouble(tenderdataTbl.getValueAt(i, 3).toString()));
                        pstmt.setString(5, finanacialYearCmbx.getSelectedItem().toString());
                        pstmt.setString(6, voteAccountCmbx.getSelectedItem().toString());
                        pstmt.execute();
                        
                        java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("INSERT INTO st_product_list("
                                + "supplier, discount_rate, fob, item_code, description, unit, price, "
                                + "credit_period, capacity_limit, ex_stock, vat, date, vat_charged, "
                                + "user_name, financial_year, vote_acc)"
                                + "VALUES (?, null, null, ?, ?, null, ?, "
                                + "null, null, null, null, null, null, "
                                + "null, ?, ?)");
                        pstmt1.setString(1, tenderdataTbl.getValueAt(i, 4).toString());
                        pstmt1.setString(2, tenderdataTbl.getValueAt(i, 1).toString());
                        pstmt1.setString(3, tenderdataTbl.getValueAt(i, 0).toString());
                        pstmt1.setDouble(4, Double.parseDouble(tenderdataTbl.getValueAt(i, 5).toString()));
                        pstmt1.setString(5, finanacialYearCmbx.getSelectedItem().toString());
                        pstmt1.setString(6, voteAccountCmbx.getSelectedItem().toString());
                        pstmt1.execute();
                        
                        java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("INSERT INTO st_product_list("
                                + "supplier, discount_rate, fob, item_code, description, unit, price, "
                                + "credit_period, capacity_limit, ex_stock, vat, date, vat_charged, "
                                + "user_name, financial_year, vote_acc)"
                                + "VALUES (?, null, null, ?, ?, null, ?, "
                                + "null, null, null, null, null, null, "
                                + "null, ?, ?)");
                        pstmt2.setString(1, tenderdataTbl.getValueAt(i, 6).toString());
                        pstmt2.setString(2, tenderdataTbl.getValueAt(i, 1).toString());
                        pstmt2.setString(3, tenderdataTbl.getValueAt(i, 0).toString());
                        pstmt2.setDouble(4, Double.parseDouble(tenderdataTbl.getValueAt(i, 7).toString()));
                        pstmt2.setString(5, finanacialYearCmbx.getSelectedItem().toString());
                        pstmt2.setString(6, voteAccountCmbx.getSelectedItem().toString());
                        pstmt2.execute();
                    }
                    // }

                }
            }
            javax.swing.JOptionPane.showMessageDialog(this, "Data Saved/Updated successfully");
            // TODO add your handling code here:
        } catch (SQLException ex) {
            ex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(AnnualTenderIntfr.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveBtnActionPerformed
    
    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        
        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_closeBtnActionPerformed
    
    private void removeRowBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRowBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_removeRowBtnActionPerformed
    
    private void tenderdataTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tenderdataTblMouseClicked
        
        if (tenderdataTbl.getSelectedColumn() == 0 || tenderdataTbl.getSelectedColumn() == 1) {
            System.out.println("Showing dialog");
            java.awt.Point point = tenderDataJscrl.getLocationOnScreen();
            jSearchDialog.setSize(500, 200);
            jSearchDialog.setLocation(point);
            jSearchDialog.setVisible(true);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_tenderdataTblMouseClicked
    
    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate
        jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select description,item_code FROM st_stock_item WHERE description ILIKE '%" + jTextField111.getText() + "%' order by description"));
        
        jSearchScrollPane.setViewportView(jSearchTable);
        System.out.println("Cannot sort out");

        // Add your handling code here:
    }//GEN-LAST:event_jTextField111CaretUpdate
    
    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        tenderdataTbl.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0), tenderdataTbl.getSelectedRow(), 0);
        tenderdataTbl.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1), tenderdataTbl.getSelectedRow(), 1);
        // tenderdataTbl.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 2), tenderdataTbl.getSelectedRow(), 3);
        jSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked
    
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        jSearchDialog.dispose();         // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed
    
    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        java.util.Vector tenderVectorHeader = new java.util.Vector(1, 1);
        tenderVectorHeader.addElement("Tender Item");
        tenderVectorHeader.addElement("Item Code");
        tenderVectorHeader.addElement("First Bidder");
        tenderVectorHeader.addElement("Bid Amount");
        tenderVectorHeader.addElement("Second Bidder");
        tenderVectorHeader.addElement("Bid Amount");
        tenderVectorHeader.addElement("Third Bidder");
        tenderVectorHeader.addElement("Bid Amount");
        
        java.util.Vector tenderVectorRow = new java.util.Vector(1, 1);
        int count = 0;
        try {
          //  for (int i = 0; i < tenderdataTbl.getRowCount(); i++) {
          //      if (tenderdataTbl.getValueAt(i, 0) != null) {
                    java.sql.PreparedStatement pstmtCheckCt = connectDB.prepareStatement("SELECT count(DISTINCT description) "
                            + "FROM st_product_list WHERE financial_year = ? AND vote_acc = ?");
                    pstmtCheckCt.setString(1, finanacialYearCmbx.getSelectedItem().toString());
                    pstmtCheckCt.setString(2, voteAccountCmbx.getSelectedItem().toString());
                    // pstmtCheckCt.setString(3, tenderdataTbl.getValueAt(i, 0).toString());
                    java.sql.ResultSet rsetCheckCt = pstmtCheckCt.executeQuery();
                    while (rsetCheckCt.next()) {
                        count = rsetCheckCt.getInt(1);
                    }
                    System.out.println("Counted tendered items ["+count+"]");
                    if (count > 0) {
                        java.sql.PreparedStatement pstmtDesc = connectDB.prepareStatement("SELECT DISTINCT description, item_code FROM st_product_list ORDER BY 1");
                        java.sql.ResultSet rsetDesc = pstmtDesc.executeQuery();
                        while (rsetDesc.next()) {
                            System.out.println("This is one product ["+rsetDesc.getString(1).toString()+"]"); 
                            java.util.Vector coulmnItemsVector = new java.util.Vector(1, 1);
                            coulmnItemsVector.addElement(rsetDesc.getString(1).toString());
                            coulmnItemsVector.addElement(rsetDesc.getString(2).toString());
                            java.sql.PreparedStatement pstmtDescs = connectDB.prepareStatement("SELECT supplier, price FROM st_product_list where item_code = ? order by 2");
                            pstmtDescs.setString(1, rsetDesc.getString(2).toString());
                            java.sql.ResultSet rsetDescs = pstmtDescs.executeQuery();
                            while (rsetDescs.next()) {
                                coulmnItemsVector.addElement(rsetDescs.getString(1));                                
                                coulmnItemsVector.addElement(rsetDescs.getObject(2));                                
                            }
                            tenderVectorRow.addElement(coulmnItemsVector);
                        }
                        
                    } else {
                        javax.swing.JOptionPane.showMessageDialog(this, "Sorry! There are no registered items \n"
                                + "in the annual tender for the [" + this.finanacialYearCmbx.getSelectedItem().toString() + "] "
                                + "financial year");
                    }
             //   }
            //}
            this.tenderdataTbl.setModel(new javax.swing.table.DefaultTableModel(tenderVectorRow, tenderVectorHeader));
            this.tenderDataJscrl.setViewportView(tenderdataTbl);
        } catch (java.sql.SQLException sqEx) {
            sqEx.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqEx.getMessage());
        }


        // TODO add your handling code here:
    }//GEN-LAST:event_editBtnActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bodyPanel;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton closeBtn;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private javax.swing.JButton editBtn;
    private javax.swing.JComboBox finanacialYearCmbx;
    private javax.swing.JLabel financialYearLbl;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JButton removeRowBtn;
    private javax.swing.JButton saveBtn;
    private javax.swing.JLabel spacerLbl;
    private javax.swing.JScrollPane tenderDataJscrl;
    private javax.swing.JTable tenderdataTbl;
    private javax.swing.JComboBox voteAccountCmbx;
    private javax.swing.JLabel voteAccountLbl;
    // End of variables declaration//GEN-END:variables
}
