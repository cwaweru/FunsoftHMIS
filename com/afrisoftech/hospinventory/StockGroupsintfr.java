/*
 * Members.java
 *
 * Created on August 13, 2002, 3:36 PM
 */
package com.afrisoftech.hospinventory;

import com.afrisoftech.lib.ClearTable;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
//

/**
 *
 * @author root
 */
public class StockGroupsintfr extends javax.swing.JInternalFrame {

    public static java.sql.Connection connectDB = null;
    public java.lang.String dbUserName = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    private javax.swing.JComboBox cmbox51;
    private javax.swing.JComboBox cmbox5;
    private javax.swing.JComboBox cmbox6;
    com.afrisoftech.lib.DBObject dbObject;
    public int sel;
    private String code;
    private String category;
    private String sequence;

    /**
     * Creates new form Members
     */
    public StockGroupsintfr(java.sql.Connection connectDb, org.netbeans.lib.sql.pool.PooledConnectionSource pConnDb) {

        connectDB = connectDb;

        pConnDB = pConnDb;
        dbObject = new com.afrisoftech.lib.DBObject();

        initComponents();
        for (int i = 0; i < itemsTable.getRowCount(); i++) {
            itemsTable.setValueAt(false, i, 10);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        servOrStock = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel111 = new javax.swing.JPanel();
        jScrollPane21 = new javax.swing.JScrollPane();
        itemsTable = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Double.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, true, true, true, true, false, true, true, true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        saveBtn = new javax.swing.JButton();
        jButton211 = new javax.swing.JButton();
        jButton512 = new javax.swing.JButton();
        jButton311 = new javax.swing.JButton();
        jButton411 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel111 = new javax.swing.JLabel();
        jComboBox11 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        classificationCmbx = new javax.swing.JComboBox();
        jLabel112 = new javax.swing.JLabel();
        jComboBox112 = new javax.swing.JComboBox();
        jPanel41 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        jTextField21 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel9 = new javax.swing.JPanel();
        mainStoreRdBtn = new javax.swing.JRadioButton();
        subStoreRdBtn = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        storeNameCmbx = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        storeGLCodeTxt = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        broadMainPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        broadCategoriesTable = new javax.swing.JTable();
        broadButtonPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        saveBroadCategoriesButton = new javax.swing.JButton();
        editBroadCategoriesButtton = new javax.swing.JButton();
        broadCatRemoveRowsButton = new javax.swing.JButton();
        broadCategoriesButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new com.afrisoftech.dbadmin.JTable();
        jLabel2 = new javax.swing.JLabel();
        jButton51 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jButton11 = new javax.swing.JButton();
        jButton21 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        jButton41 = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTable11 = new com.afrisoftech.dbadmin.JTable();
        jLabel21 = new javax.swing.JLabel();
        jButton511 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel112 = new javax.swing.JPanel();
        jButton112 = new javax.swing.JButton();
        jButton212 = new javax.swing.JButton();
        jButton312 = new javax.swing.JButton();
        jButton412 = new javax.swing.JButton();
        jScrollPane111 = new javax.swing.JScrollPane();
        jTable111 = new com.afrisoftech.dbadmin.JTable();
        jLabel211 = new javax.swing.JLabel();
        jButton5111 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new com.afrisoftech.dbadmin.JTable();
        jLabel7 = new javax.swing.JLabel();
        jButton52 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        categoryCmbx = new javax.swing.JComboBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        dataTbl = new com.afrisoftech.dbadmin.JTable();
        jTextField3 = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        storesTypeTable = new com.afrisoftech.dbadmin.JTable();
        jPanel12 = new javax.swing.JPanel();
        clearStoresTypeBtn = new javax.swing.JButton();
        closeStoresTypeBtn = new javax.swing.JButton();
        typesClearLbl = new javax.swing.JLabel();
        saveTypeofStoresBtn = new javax.swing.JButton();
        editTypeofStoresBtn = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Stock Categories");
        setFont(new java.awt.Font("SansSerif", 0, 10)); // NOI18N
        setFrameIcon(null);
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel111.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel111.setLayout(new java.awt.GridBagLayout());

        jScrollPane21.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter stock items here e.g. Drugs etc "));

        itemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null,  new Boolean(false), null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Stock Item Code", "Description", "Strength", "Formulation", "Unit(s) Per Pack", "Buying Price", "Min Stock", "Reorder Level", "Max Stock Level", "Item Code", "Enable / Disable", "Price Category", "Mark Up", "Auto Billing", "OID", "Classification"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Double.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, true, true, true, true, false, true, true, true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemsTable.setGridColor(new java.awt.Color(204, 204, 255));
        cmbox5 = new javax.swing.JComboBox();

        cmbox5.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT genre_desc FROM st_packing ORDER BY 1"));

        javax.swing.table.TableColumn seditor1 = this.itemsTable.getColumn("Formulation");

        seditor1.setCellEditor(new javax.swing.DefaultCellEditor(cmbox5));

        cmbox5.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {

                cmbox5ActionPerformed(evt);
            }
        });

        cmbox51 = new javax.swing.JComboBox();

        cmbox51.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT description FROM st_price_category ORDER BY 1"));

        javax.swing.table.TableColumn seditor11 = this.itemsTable.getColumn("Price Category");

        seditor11.setCellEditor(new javax.swing.DefaultCellEditor(cmbox51));

        cmbox51.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {

                cmbox51ActionPerformed(evt);
            }
        });

        javax.swing.JComboBox cmbox5xx = new javax.swing.JComboBox();
        cmbox5xx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-","Common", "Antibiotic", "Special" }));
        javax.swing.table.TableColumn seditor11xx = this.itemsTable.getColumn("Classification");
        seditor11xx.setCellEditor(new javax.swing.DefaultCellEditor(cmbox5xx));
        itemsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemsTableMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                itemsTableMousePressed(evt);
            }
        });
        jScrollPane21.setViewportView(itemsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 15.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel111.add(jScrollPane21, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel111.add(jLabel4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel111.add(jLabel6, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new java.awt.GridBagLayout());

        saveBtn.setMnemonic('S');
        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(saveBtn, gridBagConstraints);

        jButton211.setMnemonic('E');
        jButton211.setText("Edit");
        jButton211.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton211ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jButton211, gridBagConstraints);

        jButton512.setMnemonic('R');
        jButton512.setText("RemoveRow");
        jButton512.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton512ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jButton512, gridBagConstraints);

        jButton311.setMnemonic('l');
        jButton311.setText("Clear");
        jButton311.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton311ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jButton311, gridBagConstraints);

        jButton411.setMnemonic('c');
        jButton411.setText("Close");
        jButton411.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton411ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jButton411, gridBagConstraints);

        jButton5.setMnemonic('D');
        jButton5.setText("Delete");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jButton5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel111.add(jPanel2, gridBagConstraints);

        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.pink, null));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        jLabel11.setText("Genre Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel7.add(jLabel11, gridBagConstraints);

        jLabel111.setText("Main Classification");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel7.add(jLabel111, gridBagConstraints);

        jComboBox11.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select  initcap(genre_desc) as description from st_genre order by genre_desc"));
        jComboBox11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox11ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(jComboBox11, gridBagConstraints);

        jLabel3.setText("Last Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        jPanel7.add(jLabel3, gridBagConstraints);

        jTextField2.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel7.add(jTextField2, gridBagConstraints);

        classificationCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select  description as description from st_main_category order by description"));
        classificationCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classificationCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(classificationCmbx, gridBagConstraints);

        jLabel112.setText("Admin Mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 15, 0, 0);
        jPanel7.add(jLabel112, gridBagConstraints);

        jComboBox112.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select  initcap(admin_mode) as description from st_admin_mode order by admin_mode"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel7.add(jComboBox112, gridBagConstraints);

        jPanel41.setBorder(javax.swing.BorderFactory.createTitledBorder("Tick to list items between the preffered range"));
        jPanel41.setLayout(new java.awt.GridBagLayout());

        jLabel31.setText("From");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel41.add(jLabel31, gridBagConstraints);

        jTextField11.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        jPanel41.add(jTextField11, gridBagConstraints);

        jLabel41.setText("To");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel41.add(jLabel41, gridBagConstraints);

        jTextField21.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel41.add(jTextField21, gridBagConstraints);

        jCheckBox1.setText("Drop list ?");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel41.add(jCheckBox1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel7.add(jPanel41, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        jPanel111.add(jPanel7, gridBagConstraints);

        jPanel9.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 0, 204), null));
        jPanel9.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(mainStoreRdBtn);
        mainStoreRdBtn.setSelected(true);
        mainStoreRdBtn.setText("Main Store");
        mainStoreRdBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainStoreRdBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel9.add(mainStoreRdBtn, gridBagConstraints);

        buttonGroup1.add(subStoreRdBtn);
        subStoreRdBtn.setText("Sub Store");
        subStoreRdBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subStoreRdBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel9.add(subStoreRdBtn, gridBagConstraints);

        jLabel1.setText("Store Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 0, 0);
        jPanel9.add(jLabel1, gridBagConstraints);

        storeNameCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeNameCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel9.add(storeNameCmbx, gridBagConstraints);

        jLabel5.setText("Store Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 0, 0);
        jPanel9.add(jLabel5, gridBagConstraints);

        storeGLCodeTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel9.add(storeGLCodeTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel111.add(jPanel9, gridBagConstraints);

        jTabbedPane1.addTab("Stock Item", jPanel111);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "The is where to register broad stock and and inventory categories like Pharmaceuticals, Foods, Building Materials, Surgicals etc", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(255, 0, 51))); // NOI18N
        jPanel6.setLayout(new java.awt.GridBagLayout());

        broadMainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        broadMainPanel.setLayout(new java.awt.GridBagLayout());

        broadCategoriesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Broad Category Code", "Broad Category Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(broadCategoriesTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        broadMainPanel.add(jScrollPane3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 500.0;
        jPanel6.add(broadMainPanel, gridBagConstraints);

        broadButtonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        broadButtonPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        broadButtonPanel.add(jLabel8, gridBagConstraints);

        saveBroadCategoriesButton.setMnemonic('S');
        saveBroadCategoriesButton.setText("Save Categories");
        saveBroadCategoriesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBroadCategoriesButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        broadButtonPanel.add(saveBroadCategoriesButton, gridBagConstraints);

        editBroadCategoriesButtton.setMnemonic('E');
        editBroadCategoriesButtton.setText("Edit Categories");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        broadButtonPanel.add(editBroadCategoriesButtton, gridBagConstraints);

        broadCatRemoveRowsButton.setMnemonic('R');
        broadCatRemoveRowsButton.setText("Remove Row(s)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        broadButtonPanel.add(broadCatRemoveRowsButton, gridBagConstraints);

        broadCategoriesButton.setMnemonic('H');
        broadCategoriesButton.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        broadButtonPanel.add(broadCategoriesButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(broadButtonPanel, gridBagConstraints);

        jTabbedPane1.addTab("Broad Stock/Inventory Categories", jPanel6);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jButton1.setMnemonic('s');
        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jButton1, gridBagConstraints);

        jButton2.setMnemonic('E');
        jButton2.setText("Edit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jButton2, gridBagConstraints);

        jButton3.setMnemonic('l');
        jButton3.setText("Clear");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jButton3, gridBagConstraints);

        jButton4.setMnemonic('C');
        jButton4.setText("Close");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jButton4, gridBagConstraints);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enter main classification here e.g.  the broadest grouping of the stock i.e Antibiotics", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(0, 0, 102))); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Group Code", "Description", "Markup", "Department"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(204, 204, 255));
        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        jPanel1.add(jScrollPane1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(jLabel2, gridBagConstraints);

        jButton51.setMnemonic('R');
        jButton51.setText("RemoveRow");
        jButton51.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton51ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jButton51, gridBagConstraints);

        jButton6.setMnemonic('d');
        jButton6.setText("Delete");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jButton6, gridBagConstraints);

        servOrStock.add(jCheckBox2);
        jCheckBox2.setSelected(true);
        jCheckBox2.setText("Main Stock Categories");
        jPanel1.add(jCheckBox2, new java.awt.GridBagConstraints());

        servOrStock.add(jCheckBox3);
        jCheckBox3.setText("Service Category");
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox3, new java.awt.GridBagConstraints());

        jTabbedPane1.addTab("Main Stock & Service Classification", jPanel1);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel11.setLayout(new java.awt.GridBagLayout());

        jButton11.setMnemonic('O');
        jButton11.setText("Ok");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jButton11, gridBagConstraints);

        jButton21.setMnemonic('E');
        jButton21.setText("Edit");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jButton21, gridBagConstraints);

        jButton31.setMnemonic('l');
        jButton31.setText("Clear");
        jButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton31ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jButton31, gridBagConstraints);

        jButton41.setMnemonic('C');
        jButton41.setText("Close");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jButton41, gridBagConstraints);

        jScrollPane11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enter sub classification here e.g.  paracetamol,", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(0, 0, 102))); // NOI18N

        jTable11.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Genre Code", "Description"
            }
        ));
        jTable11.setGridColor(new java.awt.Color(204, 204, 255));
        jScrollPane11.setViewportView(jTable11);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        jPanel11.add(jScrollPane11, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel11.add(jLabel21, gridBagConstraints);

        jButton511.setMnemonic('R');
        jButton511.setText("RemoveRow");
        jButton511.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton511ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        jPanel11.add(jButton511, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jPanel11, gridBagConstraints);

        jTabbedPane1.addTab("Genre Name", jPanel3);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel112.setLayout(new java.awt.GridBagLayout());

        jButton112.setMnemonic('O');
        jButton112.setText("Ok");
        jButton112.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton112ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel112.add(jButton112, gridBagConstraints);

        jButton212.setMnemonic('E');
        jButton212.setText("Edit");
        jButton212.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton212ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel112.add(jButton212, gridBagConstraints);

        jButton312.setBackground(new java.awt.Color(204, 204, 204));
        jButton312.setMnemonic('l');
        jButton312.setText("Clear");
        jButton312.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton312ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel112.add(jButton312, gridBagConstraints);

        jButton412.setMnemonic('C');
        jButton412.setText("Close");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel112.add(jButton412, gridBagConstraints);

        jScrollPane111.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enter administration mode here e.g.  tablets,injection etc", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(0, 0, 102))); // NOI18N

        jTable111.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Admin Mode Code", "Administration Mode"
            }
        ));
        jTable111.setGridColor(new java.awt.Color(204, 204, 255));
        jScrollPane111.setViewportView(jTable111);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        jPanel112.add(jScrollPane111, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel112.add(jLabel211, gridBagConstraints);

        jButton5111.setMnemonic('R');
        jButton5111.setText("RemoveRow");
        jButton5111.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5111ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        jPanel112.add(jButton5111, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jPanel112, gridBagConstraints);

        jTabbedPane1.addTab("Administration Mode", jPanel4);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jButton7.setMnemonic('s');
        jButton7.setText("Save");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jButton7, gridBagConstraints);

        jButton8.setMnemonic('E');
        jButton8.setText("Edit");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jButton8, gridBagConstraints);

        jButton9.setMnemonic('l');
        jButton9.setText("Clear");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jButton9, gridBagConstraints);

        jButton10.setMnemonic('C');
        jButton10.setText("Close");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jButton10, gridBagConstraints);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Set price classification here", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(0, 0, 102))); // NOI18N

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Class Code", "Price Classification", "Markup"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable2.setGridColor(new java.awt.Color(204, 204, 255));
        jScrollPane2.setViewportView(jTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        jPanel5.add(jScrollPane2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel5.add(jLabel7, gridBagConstraints);

        jButton52.setMnemonic('R');
        jButton52.setText("RemoveRow");
        jButton52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jButton52, gridBagConstraints);

        jButton12.setMnemonic('d');
        jButton12.setText("Delete");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jButton12, gridBagConstraints);

        jTabbedPane1.addTab("Stock Prices Classification", jPanel5);

        jPanel8.setLayout(new java.awt.GridBagLayout());

        categoryCmbx.setBackground(new java.awt.Color(204, 255, 204));
        categoryCmbx.setForeground(new java.awt.Color(0, 0, 255));
        categoryCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select '-' union select distinct  description as description from st_main_category order by 1"));
        categoryCmbx.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Category to drop item list", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(255, 51, 0))); // NOI18N
        categoryCmbx.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                categoryCmbxItemStateChanged(evt);
            }
        });
        categoryCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jPanel8.add(categoryCmbx, gridBagConstraints);

        dataTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(dataTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jScrollPane4, gridBagConstraints);

        jTextField3.setText("Type Description or code and press enter ...");
        jTextField3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField3MouseClicked(evt);
            }
        });
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField3KeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 300);
        jPanel8.add(jTextField3, gridBagConstraints);

        jTabbedPane1.addTab("Stock Categories", jPanel8);

        jPanel10.setLayout(new java.awt.GridBagLayout());

        storesTypeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Type Code", "Store Type Description", "Comments"
            }
        ));
        jScrollPane5.setViewportView(storesTypeTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        jPanel10.add(jScrollPane5, gridBagConstraints);

        jPanel12.setLayout(new java.awt.GridBagLayout());

        clearStoresTypeBtn.setText("Clear form");
        clearStoresTypeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearStoresTypeBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel12.add(clearStoresTypeBtn, gridBagConstraints);

        closeStoresTypeBtn.setText("Close form");
        closeStoresTypeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeStoresTypeBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel12.add(closeStoresTypeBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 500.0;
        gridBagConstraints.weighty = 1.0;
        jPanel12.add(typesClearLbl, gridBagConstraints);

        saveTypeofStoresBtn.setText("Save type of stores data");
        saveTypeofStoresBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTypeofStoresBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel12.add(saveTypeofStoresBtn, gridBagConstraints);

        editTypeofStoresBtn.setText("Edit type of stores data");
        editTypeofStoresBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editTypeofStoresBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel12.add(editTypeofStoresBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel10.add(jPanel12, gridBagConstraints);

        jTabbedPane1.addTab("Type of stores", jPanel10);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        setBounds(0, 0, 1262, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            connectDB.setAutoCommit(false);
            java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("DELETE from st_main_category WHERE code = '" + jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0).toString() + "'");
            pstmt31.executeUpdate();

            connectDB.commit();
            connectDB.setAutoCommit(true);
            jButton1.setLabel("Save");
        } catch (java.sql.SQLException sq) {
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }

        }
        jButton2ActionPerformed(evt);
// TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        for (int k = 0; k < itemsTable.getRowCount(); k++) {
            for (int r = 0; r < itemsTable.getColumnCount(); r++) {
                itemsTable.getModel().setValueAt(null, k, r);
            }
        }
        int i = 0;

        if (jTextField11.getText().equalsIgnoreCase("-")) {
            itemsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT item_code,description,strength,units AS packing, packaging::numeric AS item_per_pack,buying_price::numeric,min_stock::numeric,reorder_level::integer,max_stock::numeric,item_code,opd::boolean AS enable,prov_code AS price_category,qty_ordered AS markup, automated_billing, oid, item_classification AS  classification FROM st_stock_item WHERE department ilike '" + storeNameCmbx.getSelectedItem() + "%' and sub_cat_code ILIKE '" + classificationCmbx.getSelectedItem().toString() + "%'  order by description"));

        } else {
            itemsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT item_code,description,strength,units AS packing, packaging::numeric AS item_per_pack,buying_price::numeric,min_stock::numeric,reorder_level::integer,max_stock::numeric,item_code,opd::boolean AS enable,prov_code AS price_category,qty_ordered AS markup, automated_billing, oid, item_classification AS  classification FROM st_stock_item WHERE department ilike '" + storeNameCmbx.getSelectedItem() + "%' and sub_cat_code ILIKE '" + classificationCmbx.getSelectedItem().toString() + "%' and (description ILIKE '" + jTextField11.getText() + "%' OR description ILIKE '" + jTextField21.getText() + "%') order by description"));
        }
        
        
        Class[] types = new Class[]{
            java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Object.class
        };
        javax.swing.table.TableColumn column = null;
        for (int l = 0; l < 10; l++) {
            column = itemsTable.getColumnModel().getColumn(l);
            if (l == 1) {

                column.setPreferredWidth(350); //sport column is bigger
            } else {
                //if (i == 2) {
                column.setPreferredWidth(130);
                // }  else
                //column.setPreferredWidth(50);

            }
        }
        cmbox6 = new javax.swing.JComboBox();

        cmbox6.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT genre_desc FROM st_packing ORDER BY 1"));

        javax.swing.table.TableColumn seditor2 = this.itemsTable.getColumn("PACKING");

        seditor2.setCellEditor(new javax.swing.DefaultCellEditor(cmbox6));

        cmbox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {

                cmbox6ActionPerformed(evt);
            }
        });
        
        javax.swing.JComboBox cmbox5xx = new javax.swing.JComboBox();
        cmbox5xx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-","Common", "Antibiotic", "Special" }));
        javax.swing.table.TableColumn seditor11xx = this.itemsTable.getColumn("Classification".toUpperCase());
        seditor11xx.setCellEditor(new javax.swing.DefaultCellEditor(cmbox5xx));


        saveBtn.setLabel("Update");
        saveBtn.setEnabled(true);
        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try {
            connectDB.setAutoCommit(false);
            java.sql.PreparedStatement pstmt311 = connectDB.prepareStatement("DELETE from st_stock_prices WHERE product_id = '" + itemsTable.getValueAt(itemsTable.getSelectedRow(), 0).toString() + "'");
            pstmt311.executeUpdate();
            java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("DELETE from st_stock_item WHERE oid = '" + itemsTable.getValueAt(itemsTable.getSelectedRow(), 14).toString() + "'");
            pstmt31.executeUpdate();
            javax.swing.JOptionPane.showMessageDialog(this, "Item(s) deleted successfully");

            connectDB.commit();
            connectDB.setAutoCommit(true);

        } catch (java.sql.SQLException sq) {
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }

        }
        jButton211ActionPerformed(evt);        // Add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void classificationCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classificationCmbxActionPerformed
        jTextField2.setText("");
        try {
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select item_code from st_stock_item where sub_cat_code ilike '" + classificationCmbx.getSelectedItem() + "%' ORDER BY item_code DESC LIMIT 1");
            while (rset.next()) {
                jTextField2.setText(rset.getObject(1).toString());
            }
            rset.close();
            stmt.close();

        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("selection not successful");
        }
        saveBtn.setEnabled(true);        // Add your handling code here:
    }//GEN-LAST:event_classificationCmbxActionPerformed

    private void jButton5111ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5111ActionPerformed
        int rows2Delete = jTable111.getSelectedRowCount();

        int[] selectedRows = jTable111.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable111.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable111.getModel();

                defTableModel.removeRow(jTable111.getSelectedRow());
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jButton5111ActionPerformed

    private void jButton511ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton511ActionPerformed
        int rows2Delete = jTable11.getSelectedRowCount();

        int[] selectedRows = jTable11.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable11.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable11.getModel();

                defTableModel.removeRow(jTable11.getSelectedRow());
            }
        }   // Add your handling code here:
    }//GEN-LAST:event_jButton511ActionPerformed

    private void jButton312ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton312ActionPerformed
        for (int k = 0; k < jTable111.getRowCount(); k++) {
            for (int r = 0; r < jTable111.getColumnCount(); r++) {
                jTable111.getModel().setValueAt(null, k, r);
            }
        }        // Add your handling code here:
    }//GEN-LAST:event_jButton312ActionPerformed

    private void jButton212ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton212ActionPerformed
        for (int k = 0; k < jTable111.getRowCount(); k++) {
            for (int r = 0; r < jTable111.getColumnCount(); r++) {
                jTable111.getModel().setValueAt(null, k, r);
            }
        }
        int i = 0;

        try {

            java.sql.Statement stmtTable1 = connectDB.createStatement();

            //                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT description, quantity,(amount/quantity)::numeric(10,2),amount,gl_code  FROM hp_pharmacy WHERE patient_name = '"+patient_no+"' AND paid = false UNION SELECT service,
            java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select admin_code,admin_mode from st_admin_mode order by admin_mode");

            while (rsetTable1.next()) {

                System.out.println("Working at table row " + i);
                jTable111.setValueAt(rsetTable1.getObject(1), i, 0);
                jTable111.setValueAt(rsetTable1.getObject(2), i, 1);

                i++;

            }

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        javax.swing.table.TableColumn column = null;
        for (int l = 0; l < 2; l++) {
            column = jTable111.getColumnModel().getColumn(l);
            if (l == 0) {

                column.setPreferredWidth(100); //sport column is bigger
            } else {
                //if (i == 2) {
                column.setPreferredWidth(350);
                // }  else
                //column.setPreferredWidth(50);

            }
        }     // Add your handling code here:
    }//GEN-LAST:event_jButton212ActionPerformed

    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton31ActionPerformed
        for (int k = 0; k < jTable11.getRowCount(); k++) {
            for (int r = 0; r < jTable11.getColumnCount(); r++) {
                jTable11.getModel().setValueAt(null, k, r);
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jButton31ActionPerformed

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed

        for (int k = 0; k < jTable11.getRowCount(); k++) {
            for (int r = 0; r < jTable11.getColumnCount(); r++) {
                jTable11.getModel().setValueAt(null, k, r);
            }
        }
        int i = 0;

        try {

            java.sql.Statement stmtTable1 = connectDB.createStatement();

            //                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT description, quantity,(amount/quantity)::numeric(10,2),amount,gl_code  FROM hp_pharmacy WHERE patient_name = '"+patient_no+"' AND paid = false UNION SELECT service,
            java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select genre_code,genre_desc from st_genre order by genre_desc");

            while (rsetTable1.next()) {

                System.out.println("Working at table row " + i);
                jTable11.setValueAt(rsetTable1.getObject(1), i, 0);
                jTable11.setValueAt(rsetTable1.getObject(2), i, 1);

                i++;

            }

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        javax.swing.table.TableColumn column = null;
        for (int l = 0; l < 2; l++) {
            column = jTable11.getColumnModel().getColumn(l);
            if (l == 0) {

                column.setPreferredWidth(100); //sport column is bigger
            } else {
                //if (i == 2) {
                column.setPreferredWidth(350);
                // }  else
                //column.setPreferredWidth(50);

            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jButton21ActionPerformed

    private void jButton112ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton112ActionPerformed
        String drug = null;
        try {

            for (int i = 0; i < jTable111.getRowCount(); i++) {
                if (jTable111.getModel().getValueAt(i, 0) != null) {
                    java.sql.Statement stmt = connectDB.createStatement();
                    java.sql.ResultSet rset = stmt.executeQuery("select admin_mode from st_admin_mode where admin_mode ilike '" + this.jTable111.getModel().getValueAt(i, 1).toString() + "'");
                    while (rset.next()) {
                        drug = rset.getObject(1).toString();
                    }
                    if (this.jTable111.getModel().getValueAt(i, 0).toString().equalsIgnoreCase(drug)) {
                        javax.swing.JOptionPane.showMessageDialog(this, "Administration mode already Registered", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    } else {
                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_admin_mode values( ?,upper(?))");

                        pstmt.setObject(1, jTable111.getValueAt(i, 0).toString());
                        pstmt.setObject(2, jTable111.getValueAt(i, 1).toString().toUpperCase());
                        pstmt.executeUpdate();

                    }

                }
            }

            javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            for (int k = 0; k < jTable111.getRowCount(); k++) {
                for (int r = 0; r < jTable111.getColumnCount(); r++) {
                    jTable111.getModel().setValueAt(null, k, r);
                }
            }
        } catch (java.sql.SQLException sq) {
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());
            //  jLabel4.setText("Sorry. Another Code already exists");
        }
        // Add your handling code here:
    }//GEN-LAST:event_jButton112ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        String drug = null;
        try {

            for (int i = 0; i < jTable11.getRowCount(); i++) {
                if (jTable11.getModel().getValueAt(i, 0) != null) {
                    java.sql.Statement stmt = connectDB.createStatement();
                    java.sql.ResultSet rset = stmt.executeQuery("select genre_desc from st_genre where genre_desc ilike '" + this.jTable11.getModel().getValueAt(i, 1).toString() + "'");
                    while (rset.next()) {
                        drug = rset.getObject(1).toString();
                    }
                    if (this.jTable11.getModel().getValueAt(i, 0).toString().equalsIgnoreCase(drug)) {
                        javax.swing.JOptionPane.showMessageDialog(this, "Genre already on file", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    } else {
                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_genre values( ?,upper(?))");

                        pstmt.setObject(1, jTable11.getValueAt(i, 0).toString());
                        pstmt.setObject(2, jTable11.getValueAt(i, 1).toString().toUpperCase());
                        pstmt.executeUpdate();

                    }

                }
            }

            javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            for (int k = 0; k < jTable11.getRowCount(); k++) {
                for (int r = 0; r < jTable11.getColumnCount(); r++) {
                    jTable11.getModel().setValueAt(null, k, r);
                }
            }
        } catch (java.sql.SQLException sq) {
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());
            //  jLabel4.setText("Sorry. Another Code already exists");
        }

        // Add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed

    private void mainStoreRdBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainStoreRdBtnActionPerformed
        //  jComboBox1.setM
        storeNameCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select  store_name as name from st_main_stores order by name"));
        storeNameCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeNameCmbxActionPerformed(evt);
            }
        });
        // Add your handling code here:
    }//GEN-LAST:event_mainStoreRdBtnActionPerformed

    private void subStoreRdBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subStoreRdBtnActionPerformed

        storeNameCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select store_name from st_stores ORDER BY store_name"));
        storeNameCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeNameCmbxActionPerformed(evt);
            }
        });     // Add your handling code here:
    }//GEN-LAST:event_subStoreRdBtnActionPerformed

    private void storeNameCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storeNameCmbxActionPerformed

        saveBtn.setEnabled(true);

        storeGLCodeTxt.setText(com.afrisoftech.lib.GLCodesFactory.getStoreSalesGLCode(connectDB, storeNameCmbx.getSelectedItem().toString()));
        // Add your handling code here:
    }//GEN-LAST:event_storeNameCmbxActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        for (int k = 0; k < jTable1.getRowCount(); k++) {
            for (int r = 0; r < jTable1.getColumnCount(); r++) {
                jTable1.getModel().setValueAt(null, k, r);
            }
        }
        for (int i = 0; i < itemsTable.getRowCount(); i++) {
            itemsTable.setValueAt(false, i, 10);
        }
        jButton1.setLabel("Save");
// Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton311ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton311ActionPerformed
        ClearTable.clearthisTable(itemsTable);

        for (int i = 0; i < itemsTable.getRowCount(); i++) {
            itemsTable.setValueAt(false, i, 10);
        }
        this.jComboBox11.setSelectedItem(null);
        jTextField2.setText("");
        saveBtn.setLabel("Save");
        // Add your handling code here:
    }//GEN-LAST:event_jButton311ActionPerformed

    private void cmbox6ActionPerformed(java.awt.event.ActionEvent evt) {
    }

    private void cmbox5ActionPerformed(java.awt.event.ActionEvent evt) {
    }

    private void cmbox51ActionPerformed(java.awt.event.ActionEvent evt) {

        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("SELECT markups FROM st_price_category WHERE description ILIKE '" + cmbox51.getSelectedItem() + "' ");
            while (rset.next()) {
                itemsTable.setValueAt(rset.getObject(1), itemsTable.getSelectedRow(), 12);
            }

        } catch (java.sql.SQLException sq) {
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());
            //  jLabel4.setText("Sorry. Another Code already exists");
        }
    }
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton411ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton411ActionPerformed

//        try {
//
//            java.sql.Statement stmtc = connectDB.createStatement();
//            java.sql.ResultSet rsetc = stmtc.executeQuery("SELECT  item_code, description      department,count(*)  FROM public.st_stock_item group by 1,2 having count(*) > 1 order by 3 desc");
//
//            while (rsetc.next()) {
//                String code = rsetc.getString(1);
//                int h = 0;
//
//                java.sql.Statement stmt = connectDB.createStatement();
//                java.sql.ResultSet rset = stmt.executeQuery("SELECT  item_code, description ,department,oid FROM public.st_stock_item  WHERE item_code = '" + code + "'");
//
//                while (rset.next()) {
//                    if (h == 0) {
//                        System.err.println("Deleting  ---- " + rset.getString(2));
//                        String oid = rset.getString(4);
//
//                        java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("DELETE from st_stock_item where  oid = '" + oid + "' ");
//                        pstmt31.executeUpdate();
//                    } else {
//                        System.err.println("Not Deleting  ---- " + rset.getString(2));
//                    }
//                    h++;
//                }
//
//            }
//
//        } catch (java.sql.SQLException sq) {
//            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
//            System.out.println(sq.getMessage());
//            //  jLabel4.setText("Sorry. Another Code already exists");
//        }

try {

            java.sql.Statement stmtc = connectDB.createStatement();
            java.sql.ResultSet rsetc = stmtc.executeQuery("SELECT   product, product_id,        department,strength ,COUNT(*)  FROM public.st_stock_prices GROUP BY 1,2,3,4  having COUNT(*)>1 ORDER BY 5 DESC ");

            while (rsetc.next()) {
                System.err.println(rsetc.getString(5)+" Working on ---"+rsetc.getString(1));
                String code = rsetc.getString(2);
                String dpt = rsetc.getString(3);
                String str = rsetc.getString(4);
                int h = 0;

                java.sql.Statement stmt = connectDB.createStatement();
                java.sql.ResultSet rset = stmt.executeQuery("SELECT  product_id, product ,department,strength,oid FROM public.st_stock_prices  WHERE product_id = '" + code + "' and department = '" + dpt + "' and strength = '"+str+"' ");

                while (rset.next()) {
                    if (h == 0) {
                        System.err.println("Deleting  ---- " + rset.getString(2));
                        String oid = rset.getString(5);

                        java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("DELETE from st_stock_prices where  oid = '" + oid + "' ");
                        pstmt31.executeUpdate();
                    } else {
                        System.err.println("Not Deleting  ---- " + rset.getString(2));
                    }
                    h++;
                }

            }

        } catch (java.sql.SQLException sq) {
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());
            //  jLabel4.setText("Sorry. Another Code already exists");
        }


        //setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_jButton411ActionPerformed

    private void jButton512ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton512ActionPerformed
        int rows2Delete = itemsTable.getSelectedRowCount();

        int[] selectedRows = itemsTable.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) itemsTable.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) itemsTable.getModel();

                defTableModel.removeRow(itemsTable.getSelectedRow());
            }
        }          // Add your handling code here:
    }//GEN-LAST:event_jButton512ActionPerformed

    private void jButton51ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton51ActionPerformed
        int rows2Delete = jTable1.getSelectedRowCount();

        int[] selectedRows = jTable1.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable1.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable1.getModel();

                defTableModel.removeRow(jTable1.getSelectedRow());
            }
        }         // Add your handling code here:
    }//GEN-LAST:event_jButton51ActionPerformed

    private void jButton211ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton211ActionPerformed

        for (int k = 0; k < itemsTable.getRowCount(); k++) {
            for (int r = 0; r < itemsTable.getColumnCount(); r++) {
                itemsTable.getModel().setValueAt(null, k, r);
            }
        }
        int i = 0;
        itemsTable.setAutoCreateRowSorter(true);
        if (jTextField11.getText().equalsIgnoreCase("-")) {
            itemsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT DISTINCT item_code,description,strength,units AS packing, packaging::numeric AS item_per_pack,buying_price::numeric,min_stock::numeric,reorder_level::integer,max_stock::numeric,item_code,opd::boolean AS enable,prov_code AS price_category,qty_ordered AS markup, automated_billing,oid,item_classification AS  classification FROM st_stock_item WHERE department ilike '" + storeNameCmbx.getSelectedItem() + "%' order by description"));

        } else {
            itemsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT DISTINCT item_code,description,strength,units AS packing, packaging::numeric AS item_per_pack,buying_price::numeric,min_stock::numeric,reorder_level::integer,max_stock::numeric,item_code,opd::boolean AS enable,prov_code AS price_category,qty_ordered AS markup,  automated_billing,oid,item_classification as classification  FROM st_stock_item WHERE department ilike '" + storeNameCmbx.getSelectedItem() + "%' AND (description ILIKE '" + jTextField11.getText() + "%' OR description ILIKE '" + jTextField21.getText() + "%') ORDER BY description"));

        }

        Class[] types = new Class[]{
            java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Double.class
        };

        cmbox6 = new javax.swing.JComboBox();

        cmbox6.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT genre_desc FROM st_packing ORDER BY 1"));

        javax.swing.table.TableColumn seditor2 = this.itemsTable.getColumn("PACKING");

        seditor2.setCellEditor(new javax.swing.DefaultCellEditor(cmbox6));

        cmbox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {

                cmbox6ActionPerformed(evt);
            }
        });

        /*java.lang.Object[] strCmb1 = {"A", "B", "C", "D"};

        javax.swing.JComboBox cmBox1 = new javax.swing.JComboBox(strCmb1);

        javax.swing.table.TableColumn teditor1 = this.itemsTable.getColumn("PRICE_CATEGORY");

        teditor1.setCellEditor(new javax.swing.DefaultCellEditor(cmBox1));
                */
                
                cmbox51 = new javax.swing.JComboBox();

        cmbox51.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT description FROM st_price_category ORDER BY 1"));

        javax.swing.table.TableColumn seditor11 = this.itemsTable.getColumn("PRICE_CATEGORY");

        seditor11.setCellEditor(new javax.swing.DefaultCellEditor(cmbox51));

        cmbox51.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {

                cmbox51ActionPerformed(evt);
            }
        });
        
        javax.swing.JComboBox cmbox5xx = new javax.swing.JComboBox();
        cmbox5xx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-","Common", "Antibiotic", "Special" }));
        javax.swing.table.TableColumn seditor11xx = this.itemsTable.getColumn("Classification".toUpperCase());
        seditor11xx.setCellEditor(new javax.swing.DefaultCellEditor(cmbox5xx));



        /*
         * try {
         *
         * java.sql.Statement stmtTable1 = connectDB.createStatement();
         *
         * // java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT
         * description, quantity,(amount/quantity)::numeric(10,2),amount,gl_code
         * FROM hp_pharmacy WHERE patient_name = '"+patient_no+"' AND paid =
         * false UNION SELECT service, java.sql.ResultSet rsetTable1 =
         * stmtTable1.executeQuery("select
         * item_code,description,packaging,units,buying_price,reorder_level from
         * st_stock_item WHERE sub_cat_code ILIKE
         * '"+jComboBox111.getSelectedItem().toString()+"%' AND genre ILIKE
         * '"+jComboBox11.getSelectedItem().toString()+"%' and admin_mode ILIKE
         * '"+jComboBox112.getSelectedItem().toString()+"%' order by
         * description");
         *
         * while (rsetTable1.next()) {
         *
         * System.out.println("Working at table row "+i);
         * jTable21.setValueAt(rsetTable1.getObject(1), i, 0);
         * jTable21.setValueAt(rsetTable1.getObject(2), i, 1);
         * jTable21.setValueAt(rsetTable1.getObject(3), i, 2);
         * jTable21.setValueAt(rsetTable1.getObject(4), i, 3);
         * jTable21.setValueAt(rsetTable1.getObject(5), i, 4);
         * jTable21.setValueAt(rsetTable1.getObject(6), i, 5); //
         * jTable21.setValueAt(rsetTable1.getObject(4), i, 3);
         *
         * i++;
         *
         * }
         *
         *
         * } catch(java.sql.SQLException sqlExec) {
         *
         * javax.swing.JOptionPane.showMessageDialog(this,
         * sqlExec.getMessage());
         *
         * }
         */
        javax.swing.table.TableColumn column = null;
        for (int l = 0; l < 12; l++) {
            column = itemsTable.getColumnModel().getColumn(l);
            if (l == 1) {

                column.setPreferredWidth(350); //sport column is bigger
            } else {
                //if (i == 2) {
                column.setPreferredWidth(130);
                // }  else
                //column.setPreferredWidth(50);

            }
        }

        saveBtn.setText("Update");
        saveBtn.setEnabled(true);
        // Add your handling code here:
    }//GEN-LAST:event_jButton211ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        for (int k = 0; k < jTable1.getRowCount(); k++) {
            for (int r = 0; r < jTable1.getColumnCount(); r++) {
                jTable1.getModel().setValueAt(null, k, r);
            }
        }
        int i = 0;
        if (jCheckBox2.isSelected()) {
            jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select code,description,markups,department from st_main_category ORDER BY description"));
        } else {
            jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select oid,category_name from service_categories ORDER BY 2"));
        }
        jButton1.setLabel("Update");
        // Add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        java.util.Calendar calendar = java.util.Calendar.getInstance();

        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql = new java.sql.Date(dateNow);

        System.out.println(datenowSql.toString());
        String drug = null;
        String glcode = null;
        float selling = 0;
        float packing = 0;
        float transfer = 0;
        float rates = 0;
        String transNo = null;
        java.sql.Savepoint registerSavePoint = null;
        StringBuffer doubleEntries = new StringBuffer();
        StringBuffer updateBuffer = new StringBuffer();
        java.util.Vector preparedStatementsVector = new java.util.Vector();

        try {
            connectDB.setAutoCommit(false);
            registerSavePoint = connectDB.setSavepoint("registration");

            if (itemsTable.isEditing()) {
                itemsTable.getCellEditor().stopCellEditing();

            }

            for (int i = 0; i < itemsTable.getRowCount(); i++) {
                if (itemsTable.getModel().getValueAt(i, 1) != null) {//item description
                    int stock = 0;
                    if (itemsTable.getModel().getValueAt(i, 0) == null) {//stock item code
                        java.sql.Statement ps = connectDB.createStatement();
                        java.sql.ResultSet rst = ps.executeQuery("select nextval('drug_no_seq'),current_user");
                        while (rst.next()) {

                            transNo = rst.getObject(1).toString();
                        }
                    } else {
                        transNo = itemsTable.getValueAt(i, 0).toString();

                    }
                    java.sql.Statement stmtw = connectDB.createStatement();
                    java.sql.ResultSet rsetw = stmtw.executeQuery("select code from pb_activity where activity ILIKE '" + this.storeNameCmbx.getSelectedItem() + "'");
                    while (rsetw.next()) {
                        glcode = rsetw.getObject(1).toString();
                    }

                    transfer = Float.parseFloat(itemsTable.getModel().getValueAt(i, 5).toString());//buying price
                    packing = Float.parseFloat(itemsTable.getModel().getValueAt(i, 4).toString());//item per pack

                    if (saveBtn.getText().equalsIgnoreCase("Update")) {//if the save button is pressed after edit is pressed

                        java.sql.Statement stmtw1 = connectDB.createStatement();
                        java.sql.ResultSet rsetw1 = stmtw1.executeQuery("select mark_up from st_stores where store_name = '" + this.storeNameCmbx.getSelectedItem() + "'");
                        while (rsetw1.next()) {
                            rates = rsetw1.getFloat(1);
                        }

                        selling = transfer / packing * rates; // (buying price-the whole pack/items per pack)*markup

                        System.out.println(itemsTable.getModel().getValueAt(i, 8).toString());//display max stock stdout

                        if (itemsTable.getModel().getValueAt(i, 8).toString().equalsIgnoreCase("true")) {//the value of max stock will never be true, so the 
                            //code in this block doesn't execute
                            java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("UPDATE st_stock_item "
                                    + "SET description = ?,"
                                    + "buying_price = ?, packaging = ?,"
                                    + "reorder_level = ?,"
                                    + "max_stock = ?,"
                                    + "min_stock = ?,"
                                    + "consumable = true, item_code = ?,"
                                    + "strength = ?,"
                                    + "units = ?, "
                                    + "opd = ?,"
                                    + "prov_code = ?,"
                                    + "markup = ?,"
                                    + "automated_billing = ? "
                                    + "WHERE item_code = ?");
                            pstmt31.setObject(1, itemsTable.getValueAt(i, 1).toString().toUpperCase());
                            pstmt31.setDouble(2, transfer);
                            pstmt31.setDouble(3, packing);
                            pstmt31.setDouble(4, Double.parseDouble(itemsTable.getValueAt(i, 7).toString()));
                            pstmt31.setDouble(5, Double.parseDouble(itemsTable.getValueAt(i, 8).toString()));
                            pstmt31.setDouble(6, Double.parseDouble(itemsTable.getValueAt(i, 6).toString()));
                            pstmt31.setObject(7, itemsTable.getValueAt(i, 0).toString().toUpperCase());
                            pstmt31.setObject(8, itemsTable.getValueAt(i, 2).toString());
                            pstmt31.setObject(9, itemsTable.getValueAt(i, 3).toString());
                            pstmt31.setBoolean(10, Boolean.parseBoolean(itemsTable.getValueAt(i, 10).toString()));
                            pstmt31.setObject(11, itemsTable.getValueAt(i, 11).toString());
                            pstmt31.setDouble(12, Double.parseDouble(itemsTable.getValueAt(i, 12).toString()));
                            pstmt31.setBoolean(13, Boolean.parseBoolean(itemsTable.getValueAt(i, 13).toString()));
                            pstmt31.setObject(14, itemsTable.getModel().getValueAt(i, 0).toString());

                            pstmt31.executeUpdate();

                            java.sql.PreparedStatement pstmt311 = connectDB.prepareStatement("UPDATE st_stock_prices SET "
                                    + "product = ?,"
                                    + "transfer_price = ? ,strength = ?,"
                                    + "units = ? WHERE product_id = ? ");
                            pstmt311.setObject(1, itemsTable.getValueAt(i, 1).toString().toUpperCase());
                            pstmt311.setDouble(2, transfer / packing);
                            pstmt311.setObject(3, itemsTable.getValueAt(i, 2).toString());
                            pstmt311.setObject(4, itemsTable.getValueAt(i, 3).toString());
                            pstmt311.setObject(5, itemsTable.getModel().getValueAt(i, 0).toString());
                            //pstmt311.setObject(6, this.storeNameCmbx.getSelectedItem());
                            pstmt311.executeUpdate();

                        } else {//this always executes because the condition above will never be met

                            String updateChecker = (String) itemsTable.getValueAt(i, 0);
                            java.sql.Statement updateCheckstatement = connectDB.createStatement();
                            java.sql.ResultSet updateCheckRs = updateCheckstatement.executeQuery("SELECT * FROM st_stock_item WHERE item_code ='" + updateChecker.toUpperCase() + "'");

                            int noOfRows = 0;
                            String cl = "";
                            if(itemsTable.getModel().getValueAt(i, 15) != null){
                            cl = itemsTable.getModel().getValueAt(i, 15).toString();
                        }

                            java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("UPDATE st_stock_item "
                                    + "SET description = ?,"
                                    + "buying_price = ?, packaging = ?,"
                                    + "reorder_level = ?,"
                                    + "max_stock = ?,"
                                    + "min_stock = ?,"
                                    + "consumable = false,item_code = ?,"
                                    + "strength = ?,"
                                    + "units = ?, "
                                    + "opd = ?,"
                                    + "prov_code = ?,"
                                    + "markup = ?,"
                                    + "automated_billing = ?, "
                                    + "item_classification = ? "
                                    + "WHERE item_code = ?");
                            pstmt31.setObject(1, itemsTable.getValueAt(i, 1).toString().toUpperCase());
                            pstmt31.setDouble(2, transfer);
                            pstmt31.setDouble(3, packing);
                            pstmt31.setDouble(4, Double.parseDouble(itemsTable.getValueAt(i, 7).toString()));
                            pstmt31.setDouble(5, Double.parseDouble(itemsTable.getValueAt(i, 8).toString()));
                            pstmt31.setDouble(6, Double.parseDouble(itemsTable.getValueAt(i, 6).toString()));
                            pstmt31.setObject(7, itemsTable.getValueAt(i, 0).toString().toUpperCase());
                            pstmt31.setObject(8, itemsTable.getValueAt(i, 2).toString());
                            pstmt31.setObject(9, itemsTable.getValueAt(i, 3).toString());
                            pstmt31.setBoolean(10, Boolean.parseBoolean(itemsTable.getValueAt(i, 10).toString()));
                            pstmt31.setObject(11, itemsTable.getValueAt(i, 11).toString());
                            pstmt31.setDouble(12, Double.parseDouble(itemsTable.getValueAt(i, 12).toString()));
                            pstmt31.setBoolean(13, Boolean.parseBoolean(itemsTable.getValueAt(i, 13).toString()));
                            pstmt31.setObject(14, cl);
                            pstmt31.setObject(15, itemsTable.getModel().getValueAt(i, 0).toString());

                            pstmt31.executeUpdate();

                            java.sql.PreparedStatement pstmt311 = connectDB.prepareStatement("UPDATE st_stock_prices SET "
                                    + "product = ?,"
                                    + "transfer_price = ? ,strength = ?,"
                                    + "units = ? WHERE product_id = ?   ");
                            pstmt311.setObject(1, itemsTable.getValueAt(i, 1).toString().toUpperCase());
                            pstmt311.setDouble(2, transfer / packing);
                            pstmt311.setObject(3, itemsTable.getValueAt(i, 2).toString());
                            pstmt311.setObject(4, itemsTable.getValueAt(i, 3).toString());
                            pstmt311.setObject(5, itemsTable.getModel().getValueAt(i, 0).toString());
                            //pstmt311.setObject(6, this.storeNameCmbx.getSelectedItem());
                            pstmt311.executeUpdate();
                            // preparedStatementsVector.add(pstmt31);

                            //commented out the two lines below because no department in st_stock_prices is present in st_stock_items
                            //the converse is also true. Therefore the lines never affect anything
                            //java.sql.PreparedStatement pstmt311 = connectDB.prepareStatement("UPDATE st_stock_prices SET product = '" + jTable21.getValueAt(i, 1).toString().toUpperCase() + "',transfer_price = '" + transfer / packing + "',strength = '" + jTable21.getValueAt(i, 2).toString() + "',units = '" + jTable21.getValueAt(i, 3).toString() + "' WHERE product_id = '" + jTable21.getModel().getValueAt(i, 0).toString() + "' AND department ilike '" + this.jComboBox1.getSelectedItem() + "'");
                            //pstmt311.executeUpdate();
                            //}
                        }

                    } else {//if jButton111's text reads "Save"
                        if (mainStoreRdBtn.isSelected()) {//if main store radio button is selected

                            String checker = (String) (itemsTable.getValueAt(i, 0));

                            java.sql.Statement statement = connectDB.createStatement();
                            java.sql.ResultSet resultSet = statement.executeQuery("select * from st_stock_item where item_code='" + checker.toUpperCase() + "'");

                            int rowCount = 0;

                            while (resultSet.next()) {
                                doubleEntries.append(rowCount + 1 + ". ").append(resultSet.getString(3)).append("\n");
                                rowCount += 1;
                            }

                            if (rowCount > 0) {

                                JOptionPane.showMessageDialog(null,
                                        "Sorry. Stock Item Code " + checker.toUpperCase() + " already exists!! "
                                        + "\nThe following item(s) has this code "
                                        + "\n" + doubleEntries.toString()
                                        + "\nThe attempted entry using this code has therefore not been added.",
                                        "Error! Please Use a unique item code.",
                                        JOptionPane.ERROR_MESSAGE);
                            } else {

                                System.out.println("Stock Value 1 is " + stock);

                                stock = java.lang.Integer.parseInt(itemsTable.getValueAt(i, 7).toString());//reorder level

                                System.out.println("Stock Value 2 is " + stock);

//                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO "
//                                        + "st_stock_item values( ?,upper(?),upper(?),?,?,upper(?),?,?,?,?,?,"
//                                        + "?,?,initcap(?),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO public.st_stock_item(\n" +
                                "    sub_cat_code, item_code, description, reorder_level, date, units, department, buying_price, quantity_instock, quantity_toorder,"
                                        + " qty_ordered, packaging, old_stock, strength, genre, admin_mode, batch_no, expiry_date, max_stock, old_code, min_stock, consumable,"
                                        + " days, freq, brand, country, prov_code, opd, markup, broad_category, automated_billing,  item_classification)\n" +
                                "    VALUES (?, upper(?), upper(?), ?, ?, upper(?), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);");
                                
                                
                                pstmt.setObject(1, classificationCmbx.getSelectedItem().toString());
                                pstmt.setString(2, transNo);
                                pstmt.setObject(3, itemsTable.getValueAt(i, 1).toString().toUpperCase());
                                pstmt.setInt(4, stock);
                                pstmt.setDate(5, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.util.Calendar.getInstance().getTime()));
                                pstmt.setObject(6, itemsTable.getValueAt(i, 3).toString());
                                pstmt.setObject(7, storeNameCmbx.getSelectedItem().toString());
                                pstmt.setDouble(8, java.lang.Double.valueOf(itemsTable.getValueAt(i, 5).toString()));
                                pstmt.setDouble(9, 0.00);
                                pstmt.setDouble(10, 0.00);
                                pstmt.setDouble(12, java.lang.Double.valueOf(itemsTable.getValueAt(i, 4).toString()));
                                pstmt.setDouble(11, java.lang.Double.valueOf(itemsTable.getValueAt(i, 12).toString()));
                                pstmt.setDouble(13, 0.00);
                                pstmt.setObject(14, itemsTable.getValueAt(i, 2).toString());
                                pstmt.setObject(15, jComboBox11.getSelectedItem());
                                pstmt.setObject(16, jComboBox112.getSelectedItem());
                                pstmt.setObject(17, 0.00);
                                pstmt.setDate(18, null);
                                pstmt.setDouble(19, java.lang.Double.valueOf(itemsTable.getValueAt(i, 8).toString()));
                                pstmt.setObject(20, transNo);
                                pstmt.setDouble(21, java.lang.Double.valueOf(itemsTable.getValueAt(i, 7).toString()));
                                if (itemsTable.getValueAt(i, 8) != null) {
                                    pstmt.setObject(22, true);
                                } else {
                                    pstmt.setObject(22, false);
                                }
                                pstmt.setString(23, "");
                                pstmt.setString(24, "");
                                pstmt.setString(25, "");
                                pstmt.setString(26, "");
                                pstmt.setObject(27, itemsTable.getValueAt(i, 11).toString());
                                if (itemsTable.getValueAt(i, 10) != null) {
                                    pstmt.setBoolean(28, true);
                                } else {
                                    pstmt.setBoolean(28, false);
                                }
                                pstmt.setDouble(29, java.lang.Double.valueOf(itemsTable.getValueAt(i, 12).toString()));
                                pstmt.setObject(30, "");
                                if (itemsTable.getValueAt(i, 13) != null) {
                                    pstmt.setBoolean(31, false); //java.lang.Boolean.parseBoolean(itemsTable.getValueAt(i, 13).toString()));
                                } else {
                                    pstmt.setBoolean(31, false);
                                }//pstmt.executeUpdate();
                                pstmt.setObject(32, itemsTable.getValueAt(i, 15).toString());
                                preparedStatementsVector.add(pstmt);

                            }//ends else if(resultSet.next())

                        }//ends if (jRadioButton2.isSelected()) { 
                        else {
                            if (subStoreRdBtn.isSelected()) {

                                // transfer = Float.parseFloat(jTable21.getModel().getValueAt(i, 5).toString());
                                java.sql.Statement stmtw1 = connectDB.createStatement();
                                java.sql.ResultSet rsetw1 = stmtw1.executeQuery("select mark_up from st_stores where store_name = '" + this.storeNameCmbx.getSelectedItem() + "'");
                                while (rsetw1.next()) {
                                    rates = rsetw1.getFloat(1);
                                }

                                selling = transfer * rates;

                                java.sql.Statement stmt = connectDB.createStatement();
                                java.sql.ResultSet rset = stmt.executeQuery("select description from st_stock_item where description ilike '" + this.itemsTable.getModel().getValueAt(i, 1).toString() + "'");
                                while (rset.next()) {
                                    drug = rset.getObject(1).toString();
                                }
                                stock = java.lang.Integer.parseInt(itemsTable.getValueAt(i, 7).toString());
                                System.out.println(stock);
                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_stock_item "
                                        + "values( ?,upper(?),upper(?),?,?,upper(?),?,?,?,?,?,?,?,"
                                        + "initcap(?),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                pstmt.setObject(1, classificationCmbx.getSelectedItem().toString());
                                pstmt.setString(2, transNo);
                                pstmt.setObject(3, itemsTable.getValueAt(i, 1).toString().toUpperCase());
                                pstmt.setInt(4, stock);
                                pstmt.setDate(5, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.util.Calendar.getInstance().getTime()));
                                pstmt.setObject(6, itemsTable.getValueAt(i, 3).toString());
                                pstmt.setObject(7, storeNameCmbx.getSelectedItem().toString());
                                pstmt.setDouble(8, java.lang.Double.valueOf(itemsTable.getValueAt(i, 5).toString()));
                                pstmt.setDouble(9, 0.00);
                                pstmt.setDouble(10, 0.00);
                                pstmt.setDouble(12, java.lang.Double.valueOf(itemsTable.getValueAt(i, 4).toString()));
                                pstmt.setDouble(11, java.lang.Double.valueOf(itemsTable.getValueAt(i, 12).toString()));
                                pstmt.setDouble(13, 0.00);
                                pstmt.setObject(14, itemsTable.getValueAt(i, 2).toString());
                                pstmt.setObject(15, jComboBox11.getSelectedItem());
                                pstmt.setObject(16, jComboBox112.getSelectedItem());
                                pstmt.setObject(17, 0.00);
                                pstmt.setDate(18, null);
                                pstmt.setDouble(19, java.lang.Double.valueOf(itemsTable.getValueAt(i, 8).toString()));
                                pstmt.setObject(20, transNo);
                                pstmt.setDouble(21, java.lang.Double.valueOf(itemsTable.getValueAt(i, 6).toString()));
                                if (itemsTable.getValueAt(i, 8) != null) {
                                    pstmt.setObject(22, true);
                                } else {
                                    pstmt.setObject(22, false);
                                }
                                pstmt.setString(23, "");
                                pstmt.setString(24, "");
                                pstmt.setString(25, "");
                                pstmt.setString(26, "");
                                pstmt.setObject(27, itemsTable.getValueAt(i, 11).toString());
                                if (itemsTable.getValueAt(i, 10) != null) {
                                    pstmt.setBoolean(28, true);
                                } else {
                                    pstmt.setBoolean(28, false);
                                }
                                pstmt.setDouble(29, java.lang.Double.valueOf(itemsTable.getValueAt(i, 12).toString()));
                                pstmt.setObject(30, "");
                                if (itemsTable.getValueAt(i, 13) != null) {
                                    pstmt.setBoolean(31, false);
                                } else {
                                    pstmt.setBoolean(31, false);
                                }
                                //  pstmt.setBoolean(31, java.lang.Boolean.parseBoolean(itemsTable.getValueAt(i, 13).toString()));
                                pstmt.executeUpdate();
                                //  pstmt.setObject(22,jTable21.getValueAt(i,8).toString());
                                //pstmt.executeUpdate();

                                /*
                                 * java.sql.PreparedStatement pstmtq =
                                 * connectDB.prepareStatement("insert into
                                 * st_stock_prices values(
                                 * upper(?),upper(?),round(?),round(?),?,upper(?),?,?,?,?,?,?)");
                                 * pstmtq.setObject(1,jTable21.getValueAt(i,1).toString().toUpperCase());
                                 * pstmtq.setString(2,transNo);
                                 * pstmtq.setFloat(3,selling);
                                 * pstmtq.setFloat(4,transfer);
                                 * pstmtq.setString(5,"'now'");
                                 * pstmtq.setObject(6,jTable21.getValueAt(i,2).toString());
                                 * pstmtq.setObject(9,jComboBox11.getSelectedItem().toString());
                                 * pstmtq.setObject(8,glcode);
                                 * pstmtq.setObject(7,jComboBox1.getSelectedItem().toString());
                                 * pstmtq.setObject(10,"0");
                                 * pstmtq.setObject(11,"0");
                                 * pstmtq.setObject(12,"0");
                                 * pstmtq.executeUpdate();
                                 */
                                // }
                            }
                        }
                    }
                }

                doubleEntries = new StringBuffer();
                updateBuffer = new StringBuffer();
            }//ends for (int i = 0; i < jTable21.getRowCount(); i++) {

            java.util.Enumeration enumerator = preparedStatementsVector.elements();

            preparedStatementsVector.trimToSize();
            int result = 0;

            for (int i = 0; i < preparedStatementsVector.size(); i++) {
                result += ((java.sql.PreparedStatement) preparedStatementsVector.get(i)).executeUpdate();
                System.err.println("The size of this vector is " + preparedStatementsVector.size());
                System.err.println("The value of result is " + result);

            }

            if ((result == preparedStatementsVector.size() && preparedStatementsVector.size() != 0)) {
                javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully for " + result + " item(s).", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                for (int i = 0; i < itemsTable.getRowCount(); i++) {
                    itemsTable.setValueAt(false, i, 10);
                }
            }

            jLabel6.setForeground(java.awt.Color.white);
            saveBtn.setLabel("Save");
            jTextField11.setText("-");
            jTextField21.setText("-");
            this.saveBtn.setEnabled(false);

            ClearTable.clearthisTable(itemsTable);

            for (int i = 0; i < itemsTable.getRowCount(); i++) {
                itemsTable.setValueAt(false, i, 10);
            }

            connectDB.commit();
            connectDB.setAutoCommit(true);
            javax.swing.JOptionPane.showMessageDialog(this, "Inventory items updated successfully.");

        } catch (java.sql.SQLException sq) {
            sq.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "Check your entries");
            try {
                connectDB.rollback(registerSavePoint);
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());
        }

        // Add your handling code here:
    }//GEN-LAST:event_saveBtnActionPerformed

    private void jComboBox11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox11ActionPerformed

        try {
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select code from st_main_category where description ='" + jComboBox11.getSelectedItem() + "'");
            while (rset.next()) {
                jTextField2.setText(rset.getObject(1).toString());
            }
            rset.close();
            stmt.close();

        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("selection not successful");
        }

        storeGLCodeTxt.setText("");

        // Add your handling code here:
    }//GEN-LAST:event_jComboBox11ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                if (jTable1.getModel().getValueAt(i, 0) != null) {

                    if (jButton1.getLabel().equalsIgnoreCase("Update")) {
                        if (jCheckBox2.isSelected()) {
                            java.sql.PreparedStatement pstmt311 = connectDB.prepareStatement("UPDATE st_main_category SET description = '" + jTable1.getValueAt(i, 1).toString() + "',markups = '" + jTable1.getValueAt(i, 2).toString() + "',department='" + jTable1.getValueAt(i, 3).toString() + "' WHERE code = '" + jTable1.getModel().getValueAt(i, 0).toString() + "' ");
                            pstmt311.executeUpdate();

                        } else {

                            java.sql.PreparedStatement pstmt311 = connectDB.prepareStatement("UPDATE service_categories SET category_name = '" + jTable1.getValueAt(i, 1).toString() + "' WHERE oid = '" + jTable1.getModel().getValueAt(i, 0).toString() + "'");
                            pstmt311.executeUpdate();

                        }
                    } else {
                        System.out.println("IM HERE");
                        if (jCheckBox2.isSelected()) {
                            System.out.println("STOCK");
                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_main_category values( ?, ?,?,?,?)");
                            pstmt.setObject(1, jTable1.getValueAt(i, 0).toString());
                            pstmt.setObject(2, jTable1.getValueAt(i, 1).toString());
                            pstmt.setDate(3, null);
                            pstmt.setDouble(4, java.lang.Double.valueOf(jTable1.getValueAt(i, 2).toString()));
                            pstmt.setObject(5, jTable1.getValueAt(i, 3).toString());
                            pstmt.executeUpdate();

                        } else {
                            System.out.println("SERVICE");
                            System.out.println("insert into service_categories values ( " + jTable1.getValueAt(i, 1).toString() + ")");
                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into service_categories values( ?)");
                            pstmt.setObject(1, jTable1.getValueAt(i, 1).toString());
                            pstmt.executeUpdate();
                        }

                    }
                }
            }

            javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            for (int k = 0; k < jTable1.getRowCount(); k++) {
                for (int r = 0; r < jTable1.getColumnCount(); r++) {
                    jTable1.getModel().setValueAt(null, k, r);
                }
            }
            jButton1.setLabel("Save");
        } catch (java.sql.SQLException sq) {
            javax.swing.JOptionPane.showMessageDialog(this, "ERROR: " + sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());
            jLabel2.setForeground(java.awt.Color.red);
            jLabel2.setText("Sorry. Another Code already exists");
        }

        // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try {
            for (int i = 0; i < jTable2.getRowCount(); i++) {
                if (jTable2.getModel().getValueAt(i, 0) != null) {

                    if (jButton7.getLabel().equalsIgnoreCase("Update")) {
                        java.sql.PreparedStatement pstmt311 = connectDB.prepareStatement("UPDATE st_price_category SET description = '" + jTable2.getValueAt(i, 1).toString() + "',markups = '" + jTable2.getValueAt(i, 2).toString() + "' WHERE code = '" + jTable2.getModel().getValueAt(i, 0).toString() + "'");
                        pstmt311.executeUpdate();

                    } else {
                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into st_price_category values( ?, ?,?,?)");
                        pstmt.setObject(1, jTable2.getValueAt(i, 0).toString());
                        pstmt.setObject(2, jTable2.getValueAt(i, 1).toString());
                        pstmt.setDate(3, null);
                        pstmt.setDouble(4, java.lang.Double.valueOf(jTable2.getValueAt(i, 2).toString()));
                        pstmt.executeUpdate();

                    }
                }
            }
            javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            for (int k = 0; k < jTable2.getRowCount(); k++) {
                for (int r = 0; r < jTable2.getColumnCount(); r++) {
                    jTable2.getModel().setValueAt(null, k, r);
                }
            }
            jButton7.setLabel("Save");
        } catch (java.sql.SQLException sq) {
            javax.swing.JOptionPane.showMessageDialog(this, "ERROR: " + sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());
            jLabel2.setForeground(java.awt.Color.red);
            jLabel2.setText("Sorry. Another Code already exists");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        for (int k = 0; k < jTable2.getRowCount(); k++) {
            for (int r = 0; r < jTable2.getColumnCount(); r++) {
                jTable2.getModel().setValueAt(null, k, r);
            }
        }
        int i = 0;
        jTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select code,description,markups from st_price_category ORDER BY description"));
        jButton7.setLabel("Update");        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        for (int k = 0; k < jTable2.getRowCount(); k++) {
            for (int r = 0; r < jTable2.getColumnCount(); r++) {
                jTable2.getModel().setValueAt(null, k, r);
            }
        }
        jButton7.setLabel("Save");        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        this.setVisible(false);         // TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed
        int rows2Delete = jTable2.getSelectedRowCount();

        int[] selectedRows = jTable2.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable2.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable2.getModel();

                defTableModel.removeRow(jTable2.getSelectedRow());
            }
        }         // TODO add your handling code here:
    }//GEN-LAST:event_jButton52ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        try {
            connectDB.setAutoCommit(false);
            java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("DELETE from st_price_category WHERE code = '" + jTable2.getModel().getValueAt(jTable2.getSelectedRow(), 0).toString() + "'");
            pstmt31.executeUpdate();

            connectDB.commit();
            connectDB.setAutoCommit(true);
            jButton7.setLabel("Save");
        } catch (java.sql.SQLException sq) {
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }

        }
        jButton8ActionPerformed(evt);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton12ActionPerformed

    private void saveBroadCategoriesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBroadCategoriesButtonActionPerformed
        try {

            for (int i = 0; i < broadCategoriesTable.getRowCount(); i++) {
                if (broadCategoriesTable.getValueAt(i, 0) != null) {
                    java.sql.PreparedStatement pstmtBroad = connectDB.prepareStatement("INSERT INTO st_broad_category( "
                            + " broad_category_id, broad_category_description) "
                            + "   VALUES (?, ?)");

                    pstmtBroad.setString(1, broadCategoriesTable.getValueAt(i, 0).toString());
                    pstmtBroad.setString(2, broadCategoriesTable.getValueAt(i, 1).toString());

                    pstmtBroad.execute();
                }
            }
            javax.swing.JOptionPane.showMessageDialog(this, "Stock broad categories registered successfully.");
        } catch (SQLException ex) {
            ex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(StockGroupsintfr.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveBroadCategoriesButtonActionPerformed

    private void categoryCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryCmbxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_categoryCmbxActionPerformed

    private void categoryCmbxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_categoryCmbxItemStateChanged
        // TODO add your handling code here:
        dataTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT DISTINCT item_code,description,units,buying_price FROM st_stock_item WHERE sub_cat_code ilike '" + categoryCmbx.getSelectedItem().toString() + "' order by 1"));

    }//GEN-LAST:event_categoryCmbxItemStateChanged

    private void jTextField3KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyTyped
        // TODO add your handling code here:
        if (evt.getKeyChar() == java.awt.event.KeyEvent.VK_ENTER) {

            dataTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT DISTINCT item_code,description,units,buying_price "
                    + "FROM st_stock_item WHERE (item_code ilike '%" + jTextField3.getText() + "%' or description ilike '%" + jTextField3.getText() + "%') order by 1"));
        }
    }//GEN-LAST:event_jTextField3KeyTyped

    private void jTextField3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField3MouseClicked
        // TODO add your handling code here:
        if (jTextField3.getText().contains("press enter")) {
            jTextField3.setText("");
        }
    }//GEN-LAST:event_jTextField3MouseClicked

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        // TODO add your handling code here:
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null},
                    {null, null, null}
                },
                new String[]{
                    "Group Code", "Service Description", "Markup"
                }
        ) {
            Class[] types = new Class[]{
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });

    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void itemsTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemsTableMousePressed

        // TODO add your handling code here:
        if (saveBtn.getText().equalsIgnoreCase("Save") && itemsTable.getSelectedColumn() == 10) {
            if (storeNameCmbx.getSelectedItem() != null) {
                if (!Boolean.parseBoolean(itemsTable.getValueAt(itemsTable.getSelectedRow(), 10).toString())) {
                    code = "-";
                    this.sel = itemsTable.getSelectedColumn();

                    System.out.println(sel);

                    if (sel == 10 && itemsTable.getValueAt(itemsTable.getSelectedRow(), 0) == null) {
                        System.out.println("The sequence is::" + sequence);

                        PreparedStatement pst;
                        try {
                            pst = connectDB.prepareStatement("select lpad(nextval('item_code_seq')::varchar, 4, '0')");

                            java.sql.ResultSet rst = pst.executeQuery();
                            while (rst.next()) {
                                sequence = rst.getObject(1).toString();

                                System.err.println("The sequence is::" + sequence);
                            }
                        } catch (SQLException ex) {
                            ex.printStackTrace();
                        }
                        category = classificationCmbx.getSelectedItem().toString().substring(0, 4).toUpperCase();

                        code = category + "0" + sequence;

                        itemsTable.setValueAt(code, itemsTable.getSelectedRow(), 0);
                    }
                } else {
                    itemsTable.setValueAt(null, itemsTable.getSelectedRow(), 0);
                }
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "You MUST select at least one store!");
            }

        }
    }//GEN-LAST:event_itemsTableMousePressed

    private void closeStoresTypeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeStoresTypeBtnActionPerformed

        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_closeStoresTypeBtnActionPerformed

    private void editTypeofStoresBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editTypeofStoresBtnActionPerformed

        storesTypeTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT type_code, store_type_description, store_type_remarks"
                + "  FROM st_stores_type"));
        saveTypeofStoresBtn.setText("Update stores type");
        // TODO add your handling code here:
    }//GEN-LAST:event_editTypeofStoresBtnActionPerformed

    private void saveTypeofStoresBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTypeofStoresBtnActionPerformed

        try {
            for (int i = 0; i < storesTypeTable.getRowCount(); i++) {
                if (storesTypeTable.getValueAt(i, 0) != null) {
                    if (saveTypeofStoresBtn.getText().contains("Save")) {
                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO st_stores_type("
                                + "            type_code, store_type_description, store_type_remarks)"
                                + "    VALUES (?, ?, ?)");
                        pstmt.setObject(1, storesTypeTable.getValueAt(i, 0));
                        pstmt.setObject(2, storesTypeTable.getValueAt(i, 1));
                        pstmt.setObject(3, storesTypeTable.getValueAt(i, 2));
                        pstmt.execute();
                        javax.swing.JOptionPane.showConfirmDialog(this, "Store types registered successfully");
                    } else {
                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("UPDATE st_stores_type"
                                + "   SET store_type_description=?, store_type_remarks=?"
                                + " WHERE type_code = ?");
                        pstmt.setObject(3, storesTypeTable.getValueAt(i, 0));
                        pstmt.setObject(1, storesTypeTable.getValueAt(i, 1));
                        pstmt.setObject(2, storesTypeTable.getValueAt(i, 2));
                        pstmt.executeUpdate();
                        javax.swing.JOptionPane.showConfirmDialog(this, "Store types updated successfully");
                    }
                }
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqe.getMessage());
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_saveTypeofStoresBtnActionPerformed

    private void clearStoresTypeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearStoresTypeBtnActionPerformed

        this.getContentPane().removeAll();

        this.initComponents();

        this.setSize(this.getParent().getSize());
        // TODO add your handling code here:
    }//GEN-LAST:event_clearStoresTypeBtnActionPerformed

    private void itemsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemsTableMouseClicked
//
//        // TODO add your handling code here:
//        if (storeNameCmbx.getSelectedItem() != null) {
//            if (Boolean.parseBoolean(itemsTable.getValueAt(itemsTable.getSelectedRow(), 10).toString())) {
//                code = "-";
//                this.sel = itemsTable.getSelectedColumn();
//
//                System.out.println(sel);
//
//                if (sel == 10 && itemsTable.getValueAt(itemsTable.getSelectedRow(), 0) == null) {
//                    System.out.println("The sequence is::" + sequence);
//
//                    PreparedStatement pst;
//                    try {
//                        pst = connectDB.prepareStatement("select lpad(nextval('item_code_seq')::varchar, 4, '0')");
//
//                        java.sql.ResultSet rst = pst.executeQuery();
//                        while (rst.next()) {
//                            sequence = rst.getObject(1).toString();
//
//                            System.err.println("The sequence is::" + sequence);
//                        }
//                    } catch (SQLException ex) {
//                        ex.printStackTrace();
//                    }
//                    category = classificationCmbx.getSelectedItem().toString().substring(0, 4).toUpperCase();
//
//                    code = category + "0" + sequence;
//
//                    itemsTable.setValueAt(code, itemsTable.getSelectedRow(), 0);
//                }
//            } else {
//                itemsTable.setValueAt(null, itemsTable.getSelectedRow(), 0);
//            }
//        } else {
//            javax.swing.JOptionPane.showMessageDialog(this, "You MUST select at least one store!");
//        }
        // TODO add your handling code here:
    }//GEN-LAST:event_itemsTableMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel broadButtonPanel;
    private javax.swing.JButton broadCatRemoveRowsButton;
    private javax.swing.JButton broadCategoriesButton;
    private javax.swing.JTable broadCategoriesTable;
    private javax.swing.JPanel broadMainPanel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox categoryCmbx;
    private javax.swing.JComboBox classificationCmbx;
    private javax.swing.JButton clearStoresTypeBtn;
    private javax.swing.JButton closeStoresTypeBtn;
    private javax.swing.JTable dataTbl;
    private javax.swing.JButton editBroadCategoriesButtton;
    private javax.swing.JButton editTypeofStoresBtn;
    private javax.swing.JTable itemsTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton112;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton211;
    private javax.swing.JButton jButton212;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton jButton311;
    private javax.swing.JButton jButton312;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton41;
    private javax.swing.JButton jButton411;
    private javax.swing.JButton jButton412;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton51;
    private javax.swing.JButton jButton511;
    private javax.swing.JButton jButton5111;
    private javax.swing.JButton jButton512;
    private javax.swing.JButton jButton52;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JComboBox jComboBox11;
    private javax.swing.JComboBox jComboBox112;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JLabel jLabel112;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel211;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel111;
    private javax.swing.JPanel jPanel112;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane111;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable11;
    private javax.swing.JTable jTable111;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField21;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JRadioButton mainStoreRdBtn;
    private javax.swing.JButton saveBroadCategoriesButton;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton saveTypeofStoresBtn;
    private javax.swing.ButtonGroup servOrStock;
    private javax.swing.JTextField storeGLCodeTxt;
    private javax.swing.JComboBox storeNameCmbx;
    private javax.swing.JTable storesTypeTable;
    private javax.swing.JRadioButton subStoreRdBtn;
    private javax.swing.JLabel typesClearLbl;
    // End of variables declaration//GEN-END:variables
}
