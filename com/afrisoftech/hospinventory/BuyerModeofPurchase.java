/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.afrisoftech.hospinventory;

/**
 *
 * @author saleem
 */
import com.afrisoftech.lib.ClearTable;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
public class BuyerModeofPurchase extends javax.swing.JPanel {

    /**
     * Creates new form PROperationpnl
     */
    String selectedPR=null;
    java.sql.Connection connectDB = null;
     JPanel jMainPanelToLoad=null;
     org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    private String subitem;
    private String vote;
    public BuyerModeofPurchase(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {
     
        connectDB = connDb;

        pConnDB = pconnDB;
        
        initComponents();
        jCheckBox2.setEnabled(false);
        
        
        
       
         // ApprovalTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT   P.requisition_no as \"PR N0:\", sum( P.price* P.quantity) as  \"Total Price\" , P.type_of_pr as \"PR Type\" FROM st_receive_requisation as P WHERE P.requisition_no ILIKE '%PRQ%' and P.analysed=true AND P.approval_status=FALSE  GROUP BY P.requisition_no,P.cost_center,P.date_due,P.type_of_pr"));
        refreshTable();
        
        setColumnAlignmentCenter(ApprovalTbl,1);
        
        ////number of PRs awaiting approval
        approvalLbl.setText(ApprovalTbl.getRowCount()+"  PRs Awaiting Approval");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jDialog1 = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel13 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        typeprocureBtnGrp = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        postbtn = new javax.swing.JButton();
        resetbtn = new javax.swing.JButton();
        cancelbtn = new javax.swing.JButton();
        exitbtn = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        PurchaseItemsTbl = new com.afrisoftech.dbadmin.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        FormalCbx = new javax.swing.JCheckBox();
        EmergencyCbx = new javax.swing.JCheckBox();
        jLabel111 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        reqDateTxt = new javax.swing.JTextField();
        reqDeptTxt = new javax.swing.JTextField();
        DueDateTxt = new javax.swing.JTextField();
        proDeptTxt = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        csotoforwardtoCmBx = new javax.swing.JComboBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        votenoTxt = new javax.swing.JTextField();
        jPanel41 = new javax.swing.JPanel();
        jScrollPane21 = new javax.swing.JScrollPane();
        ReasonPurchaseTxtPane = new javax.swing.JTextPane();
        NoreqPane = new javax.swing.JPanel();
        approvalLbl = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        ApprovalTbl = new com.afrisoftech.dbadmin.JTable();
        PRQtxt = new javax.swing.JTextField();

        jDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Requisition Number", "Department raising Requisition", "Item Category", "Mode of Purchase", "Reference No.", "View Progress"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTable1FocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        jDialog1.getContentPane().add(jScrollPane1, gridBagConstraints);

        jCheckBox1.setText(" Select All  ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        jDialog1.getContentPane().add(jCheckBox1, gridBagConstraints);

        jPanel13.setLayout(new java.awt.GridBagLayout());

        jButton5.setText("jButton5");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weighty = 1.0;
        jPanel13.add(jButton5, gridBagConstraints);

        jButton6.setText("jButton6");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weighty = 1.0;
        jPanel13.add(jButton6, gridBagConstraints);

        jButton7.setText("jButton7");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weighty = 1.0;
        jPanel13.add(jButton7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        jDialog1.getContentPane().add(jPanel13, gridBagConstraints);

        setLayout(new java.awt.GridBagLayout());

        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jPanel4.setMinimumSize(new java.awt.Dimension(250, 250));
        jPanel4.setPreferredSize(new java.awt.Dimension(250, 250));
        jPanel4.setRequestFocusEnabled(false);
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setMinimumSize(new java.awt.Dimension(250, 27));
        jPanel6.setPreferredSize(new java.awt.Dimension(250, 27));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        postbtn.setMnemonic('s');
        postbtn.setText("    Save    ");
        postbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(postbtn, gridBagConstraints);

        resetbtn.setText("Reset");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(resetbtn, gridBagConstraints);

        cancelbtn.setMnemonic('l');
        cancelbtn.setText("Clear");
        cancelbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(cancelbtn, gridBagConstraints);

        exitbtn.setMnemonic('c');
        exitbtn.setText("Close");
        exitbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(exitbtn, gridBagConstraints);

        jButton3.setMnemonic('r');
        jButton3.setText("Remove Row");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jButton3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jPanel6, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        PurchaseItemsTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Item Description", "Units", "Quantity", "Price", "Balance", "Code", "Remark"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true, true, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        /*java.lang.Object[] strCmb = {"Normal","Urgent",""};

        javax.swing.JComboBox cmBox = new javax.swing.JComboBox(strCmb);

        javax.swing.table.TableColumn teditor = this.jTable1.getColumn("Status");

        teditor.setCellEditor(new javax.swing.DefaultCellEditor(cmBox));
        */

        javax.swing.table.TableColumn column = null;
        for (int i = 0; i < 4; i++) {
            column = PurchaseItemsTbl.getColumnModel().getColumn(i);
            if (i == 0) {

                column.setPreferredWidth(300); //sport column is bigger
            } else {
                if (i == 1) {
                    column.setPreferredWidth(200);
                } else {
                    //if (i == 2) {
                        column.setPreferredWidth(200);
                        // }  else
                    //column.setPreferredWidth(50);

                }
            }
        }

        PurchaseItemsTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PurchaseItemsTblMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(PurchaseItemsTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        jPanel2.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel4.add(jPanel2, gridBagConstraints);

        /*        javax.swing.SpinnerDateModel spinerDate = new javax.swing.SpinnerDateModel();
        dateSpinner = new javax.swing.JSpinner(spinerDate);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jPanel1.add(dateSpinner, gridBagConstraints);

        */
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("Procuring Department/Store");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Type of Procurement", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 204)));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        typeprocureBtnGrp.add(FormalCbx);
        FormalCbx.setSelected(true);
        FormalCbx.setText("Formal Procurement");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(FormalCbx, gridBagConstraints);

        typeprocureBtnGrp.add(EmergencyCbx);
        EmergencyCbx.setText("Direct Purchase");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(EmergencyCbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel7, gridBagConstraints);

        jLabel111.setText("Requisition Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jLabel111, gridBagConstraints);

        jLabel4.setText("Due Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        jLabel22.setText("Requisitioning Department");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel1.add(jLabel22, gridBagConstraints);

        reqDateTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(reqDateTxt, gridBagConstraints);

        reqDeptTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(reqDeptTxt, gridBagConstraints);

        DueDateTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(DueDateTxt, gridBagConstraints);

        proDeptTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(proDeptTxt, gridBagConstraints);

        jPanel12.setLayout(new java.awt.GridBagLayout());

        jLabel10.setText("Forward To");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel12.add(jLabel10, gridBagConstraints);

        csotoforwardtoCmBx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "(select '-') union (SELECT distinct   buyer_name FROM st_buyers_register WHERE buyer_designation='CSO' ORDER BY 1) ORDER BY 1 asc"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel12.add(csotoforwardtoCmBx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel12, gridBagConstraints);

        jCheckBox2.setText("Reverse Requisition");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        jPanel1.add(jCheckBox2, gridBagConstraints);

        jLabel1.setText("Vote No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        jPanel1.add(jLabel1, gridBagConstraints);

        votenoTxt.setEditable(false);
        votenoTxt.setForeground(java.awt.Color.red);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(votenoTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        jPanel4.add(jPanel1, gridBagConstraints);

        jPanel41.setBorder(javax.swing.BorderFactory.createTitledBorder("Reason for Purchase"));
        jPanel41.setLayout(new java.awt.GridBagLayout());

        jScrollPane21.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        ReasonPurchaseTxtPane.setEditable(false);
        jScrollPane21.setViewportView(ReasonPurchaseTxtPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel41.add(jScrollPane21, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        jPanel4.add(jPanel41, gridBagConstraints);

        NoreqPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(255, 0, 51), null, null));
        NoreqPane.setLayout(new java.awt.GridBagLayout());

        approvalLbl.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        approvalLbl.setForeground(new java.awt.Color(255, 0, 51));
        approvalLbl.setText("No: Of PRs Awaiting Approval");
        NoreqPane.add(approvalLbl, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(NoreqPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jPanel4, gridBagConstraints);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "PRs Awaiting Approval", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanel8.setMinimumSize(new java.awt.Dimension(100, 250));
        jPanel8.setPreferredSize(new java.awt.Dimension(100, 250));
        jPanel8.setLayout(new java.awt.GridBagLayout());

        jScrollPane3.setMinimumSize(new java.awt.Dimension(250, 100));
        jScrollPane3.setPreferredSize(new java.awt.Dimension(250, 100));

        ApprovalTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "PR", "DEPT", "TYPE"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ApprovalTbl.setMinimumSize(new java.awt.Dimension(90, 34));
        ApprovalTbl.setPreferredSize(new java.awt.Dimension(90, 750));
        ApprovalTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ApprovalTblMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(ApprovalTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jScrollPane3, gridBagConstraints);

        PRQtxt.setText("Search PR...");
        PRQtxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                PRQtxtCaretUpdate(evt);
            }
        });
        PRQtxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                PRQtxtMouseClicked(evt);
            }
        });
        PRQtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PRQtxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel8.add(PRQtxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jPanel8, gridBagConstraints);

        jTabbedPane1.addTab("Mode of Purchase", jPanel5);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jTabbedPane1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void postbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postbtnActionPerformed

        if(csotoforwardtoCmBx.getSelectedItem().toString().equalsIgnoreCase("-")){
        
        
        javax.swing.JOptionPane.showMessageDialog(this, "Select Chief Supply Officer To Forward To");
        }
        
        else{    
            
            
        java.sql.PreparedStatement pstmt221;
        
          try {
            
             java.sql.PreparedStatement pstmt7 = connectDB.prepareStatement("UPDATE st_receive_requisation set approval_status=true WHERE requisition_no='"+selectedPR+"'");
              pstmt7.executeUpdate();
            
            
                    pstmt221 = connectDB.prepareStatement("INSERT INTO st_authorizations(requisition_no, scm_forwading,cso_awarded) VALUES (?,?,?)");
                    pstmt221.setObject(1,selectedPR );
                    pstmt221.setObject(2,true );
                    pstmt221.setObject(3,csotoforwardtoCmBx.getSelectedItem().toString() );
                    //pstmt221.setObject(3,selectedPR );
                    pstmt221.executeUpdate();
            
             String str="<html><center><font color=red>HAS BEEN FORWARDED TO '"+csotoforwardtoCmBx.getSelectedItem().toString()+"'</font></center></html>";
            
             JOptionPane.showMessageDialog(null,str,"CONFIRMATION MESSAGE",1,new javax.swing.ImageIcon(getClass().getResource("/Icons/32x32/Recycle Bin Full 1.png")));
           
           
            
                    //java.sql.PreparedStatement pstmt4 = connectDB.prepareStatement("INSERT INTO st_pr_progress(  purchase_req,cso_forwarded_to, forward_to_cso) VALUES (?, ?)");
                     java.sql.PreparedStatement pstmt4 = connectDB.prepareStatement("UPDATE st_pr_progress  SET  forward_to_cso=? WHERE purchase_req ilike '%"+selectedPR+"%'");
                     pstmt4.setObject(1,csotoforwardtoCmBx.getSelectedItem().toString()+"-"+new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                     pstmt4.executeUpdate();
                     
                     System.out.println("Purchase Memo "+selectedPR+ "Progress inserted successfully");

            connectDB.commit();
       
        }
          catch (SQLException ex) {
            try {
                connectDB.rollback();
                ex.printStackTrace();
            } catch (SQLException ex1) {
                ex1.printStackTrace();
                Logger.getLogger(BuyerModeofPurchase.class.getName()).log(Level.SEVERE, null, ex1);
            }
            Logger.getLogger(RequisitionApprovalIntFr.class.getName()).log(Level.SEVERE, null, ex);
        }
    
        ClearTable.clearthisTable(PurchaseItemsTbl);
        refreshTable();
        }
        // Add your handling code here:
    }//GEN-LAST:event_postbtnActionPerformed
    private void refreshTable(){
      
        ApprovalTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT requisition_no REQ, cost_center DEPT , type_of_pr PR  FROM st_receive_requisation WHERE (requisition_no ILIKE '%PRQ%' OR requisition_no ILIKE '%SRQ%') AND analysed=TRUE AND approval_status=FALSE  GROUP BY requisition_no,cost_center,date_due,type_of_pr"));
        approvalLbl.setText(ApprovalTbl.getRowCount()+"  PRs Awaiting Approval");
    
    
    
    }
    private void cancelbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelbtnActionPerformed
        for (int k = 0; k < PurchaseItemsTbl.getRowCount(); k++) {
            for (int r = 0; r < PurchaseItemsTbl.getColumnCount(); r++) {
                PurchaseItemsTbl.getModel().setValueAt(null, k, r);
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_cancelbtnActionPerformed

    private void exitbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitbtnActionPerformed
        this.setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_exitbtnActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int rows2Delete = PurchaseItemsTbl.getSelectedRowCount();

        int[] selectedRows = PurchaseItemsTbl.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) PurchaseItemsTbl.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) PurchaseItemsTbl.getModel();

                defTableModel.removeRow(PurchaseItemsTbl.getSelectedRow());
            }
        }        // Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void PurchaseItemsTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PurchaseItemsTblMouseClicked

        // Add your handling code here:
    }//GEN-LAST:event_PurchaseItemsTblMouseClicked

    private void ApprovalTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ApprovalTblMouseClicked
        ////clearing the products table
        jCheckBox2.setEnabled(true);
        for (int k = 0; k < PurchaseItemsTbl.getRowCount(); k++) {
            for (int r = 0; r < PurchaseItemsTbl.getColumnCount(); r++) {
                PurchaseItemsTbl.getModel().setValueAt(null, k, r);
            }
        }

        ////clear the JTextPane
        ReasonPurchaseTxtPane.setText(null);

        //////Fill the PR table and other details
        int rowselect=ApprovalTbl.getSelectedRow();
        String getPr=null;
        getPr=ApprovalTbl.getValueAt(rowselect,0).toString();
        selectedPR=getPr;

        String type_pr=null;
        
        type_pr=ApprovalTbl.getValueAt(rowselect,2).toString();
        System.out.println(getPr+": :"+type_pr);
        
        try {
            java.sql.PreparedStatement pst = connectDB.prepareStatement("select sub_item  from st_subitems_pr_grouping where pr_no ='"+selectedPR+"'");
            
            ResultSet rsetem = pst.executeQuery();
            while(rsetem.next()){
                
            
            subitem=rsetem.getObject(1).toString(); 
            }
            
            java.sql.PreparedStatement pst2 =connectDB.prepareStatement("select concat((select subhead  from subheads where subheadname='"+proDeptTxt.getText()+"') ,'-',(SELECT subitem from subitems  where subitemname = '"+subitem+"'))");
            ResultSet rsetvote = pst2.executeQuery();
            
            while(rsetvote.next()){
            vote=rsetvote.getObject(1).toString();
                System.out.println(vote);
                
                votenoTxt.setText(vote);
            
            }
            //select concat((select subhead  from subheads where subheadname='"+proDeptTxt.getText()+"') ,'-',(SELECT subitem from subitems  where subitemname = 'Accident and Emergency Consumables'))
        } catch (SQLException ex) {
           ex.printStackTrace();
        }

        
        if(type_pr.equalsIgnoreCase("Internal Requisition")){
         
            PurchaseItemsTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT item_code CODE,item_description ITEM,units UNITS,quantity QTY,balance STOCK_BALANCE,monthly_usage CONSUMPTION,terms REMARKS FROM st_receive_requisation WHERE requisition_no='"+getPr+"'"));
            //query upp;
              
              jScrollPane2.setViewportView(PurchaseItemsTbl);
               ////a query to fill the remaining details
              // "Item Code", "Item Description", "Units", "Quantity", "Monthly Usage", "Stock Balance", "Remark"
        java.sql.Statement stmt;
        try {
            stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("SELECT  cost_center, item_description, \n" +
                "       units, quantity, date_due, date, status, requisition_no, \n" +
                "       price, store_name,  balance,reason, \n" +
                "       terms,item_code,monthly_usage FROM st_receive_requisation WHERE requisition_no='"+getPr+"'");
            int rows=0;
            while (rset.next()) {
                reqDateTxt.setText(rset.getString("date"));
                proDeptTxt.setText(rset.getString("cost_center"));
                reqDeptTxt.setText(rset.getString("store_name"));
                DueDateTxt.setText(rset.getString("date_due"));

                if(rset.getString("status").equalsIgnoreCase(FormalCbx.getActionCommand())){
                    FormalCbx.setSelected(true);
                    //Formal Procurement, Direct Purchase

                }
                else{
                    EmergencyCbx.setSelected(true);
                }
                

                ReasonPurchaseTxtPane.setText(rset.getString("reason"));

            }

            
            refreshTable();

        setColumnAlignmentCenter(ApprovalTbl,1);

        } catch (SQLException ex) {
            Logger.getLogger(RequisitionApprovalIntFr.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        }
        else{
       PurchaseItemsTbl = new com.afrisoftech.dbadmin.JTable();

            PurchaseItemsTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT item_code CODE,item_description ITEM,units UNITS,quantity QTY,balance STOCK_BALANCE, terms REMARKS FROM st_receive_requisation WHERE requisition_no='"+getPr+"'"));
               jScrollPane2.setViewportView(PurchaseItemsTbl);
               
                   
               //"Item Code", "Item Description", "Units", "Quantity", "Stock Balance", "Remark"
        java.sql.Statement stmt;
        try {
            stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("SELECT  cost_center, item_description, \n" +
                "       units, quantity, date_due, date, status, requisition_no, \n" +
                "       price, store_name,  balance,reason, \n" +
                "       terms,item_code\n" +
                "       \n" +
                "  FROM st_receive_requisation WHERE requisition_no='"+getPr+"'");
            int rows=0;
            while (rset.next()) {
                reqDateTxt.setText(rset.getString("date"));
                proDeptTxt.setText(rset.getString("cost_center"));
                reqDeptTxt.setText(rset.getString("store_name"));
                DueDateTxt.setText(rset.getString("date_due"));

                if(rset.getString("status").equals(FormalCbx.getActionCommand())){
                    FormalCbx.setSelected(true);

                }
                else{
                    EmergencyCbx.setSelected(true);
                }
               

                ReasonPurchaseTxtPane.setText(rset.getString("reason"));

            }

          

        setColumnAlignmentCenter(ApprovalTbl,1);
        
        refreshTable();

        }
        
        
        
        catch (SQLException ex) {
            Logger.getLogger(RequisitionApprovalIntFr.class.getName()).log(Level.SEVERE, null, ex);
            
        }
        
        }

    

    }//GEN-LAST:event_ApprovalTblMouseClicked

    private void jTable1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTable1FocusGained
        // should fetch transactionInformation data from database
        
        
    }//GEN-LAST:event_jTable1FocusGained

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
       
        
        try {
            // TODO add your handling code here:
          java.sql.PreparedStatement pst =connectDB.prepareStatement("update st_receive_requisation set analysed=false where requisition_no='"+selectedPR+"'");
        
           pst.executeUpdate();
           javax.swing.JOptionPane.showMessageDialog(this, selectedPR+" Reversed");
          
           for (int k = 0; k < PurchaseItemsTbl.getRowCount(); k++) {
            for (int r = 0; r < PurchaseItemsTbl.getColumnCount(); r++) {
                PurchaseItemsTbl.getModel().setValueAt(null, k, r);
            }
        }
           
           jCheckBox2.setSelected(false);
           jCheckBox2.setEnabled(false);
            ApprovalTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT   P.requisition_no as \"PR N0:\", sum( P.price* P.quantity) as  \"Total Price\" , P.type_of_pr as \"PR Type\" FROM st_receive_requisation as P WHERE P.requisition_no ILIKE '%PRQ%' and P.analysed=true AND P.approval_status=FALSE  GROUP BY P.requisition_no,P.cost_center,P.date_due,P.type_of_pr"));
           
        } catch (SQLException ex) 
        
        
        {
            javax.swing.JOptionPane.showMessageDialog(this,"ERROR:Check your Entries\n"+ ex);
            Logger.getLogger(BuyerModeofPurchase.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        // TODO add your handling code here:
        if(jTabbedPane1.getSelectedIndex()==1){
        jMainPanelToLoad=new JPanel();
                 // jSplitPane1.setDividerLocation(84);
                  jMainPanelToLoad = (JPanel) new UniversalDashboard(connectDB,null);
//                  progressCheckpnl.removeAll();
//                  progressCheckpnl.setLayout(new java.awt.BorderLayout());
//                  progressCheckpnl.add(jMainPanelToLoad, java.awt.BorderLayout.CENTER);
//                  progressCheckpnl.updateUI();
        
        
        
        
        }
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void PRQtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PRQtxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PRQtxtActionPerformed

    private void PRQtxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_PRQtxtCaretUpdate
        // TODO add your handling code here:
        ApprovalTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT requisition_no REQ, cost_center DEPT , type_of_pr PR  FROM st_receive_requisation WHERE requisition_no ILIKE '%PRQ%' AND analysed=TRUE AND approval_status=FALSE and  requisition_no ILIKE '%"+PRQtxt.getText()+"%'  GROUP BY requisition_no,cost_center,date_due,type_of_pr"));
        
    }//GEN-LAST:event_PRQtxtCaretUpdate

    private void PRQtxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_PRQtxtMouseClicked
        // TODO add your handling code here:
         if(PRQtxt.getText().contains("Search PR...")){
            PRQtxt.setText("");
        }
    }//GEN-LAST:event_PRQtxtMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ApprovalTbl;
    private javax.swing.JTextField DueDateTxt;
    private javax.swing.JCheckBox EmergencyCbx;
    private javax.swing.JCheckBox FormalCbx;
    private javax.swing.JPanel NoreqPane;
    private javax.swing.JTextField PRQtxt;
    private javax.swing.JTable PurchaseItemsTbl;
    private javax.swing.JTextPane ReasonPurchaseTxtPane;
    private javax.swing.JLabel approvalLbl;
    private javax.swing.JButton cancelbtn;
    private javax.swing.JComboBox csotoforwardtoCmBx;
    public static javax.swing.JButton exitbtn;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton postbtn;
    private javax.swing.JTextField proDeptTxt;
    private javax.swing.JTextField reqDateTxt;
    private javax.swing.JTextField reqDeptTxt;
    private javax.swing.JButton resetbtn;
    private javax.swing.ButtonGroup typeprocureBtnGrp;
    private javax.swing.JTextField votenoTxt;
    // End of variables declaration//GEN-END:variables

public void setColumnAlignmentCenter(javax.swing.JTable  thisOne,int column){
    
     /////setting the column 1 alignment to center
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        thisOne.getColumnModel().getColumn(column).setCellRenderer( centerRenderer );
    
    }
}

