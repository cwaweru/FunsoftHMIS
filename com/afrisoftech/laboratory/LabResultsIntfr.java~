/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */

package com.afrisoftech.laboratory;

/**
 *
 * @author  root
 */
public class LabResultsIntfr extends javax.swing.JInternalFrame implements java.lang.Runnable{
    
    /** Creates new form loanpymntintfr */
    
    private javax.swing.JComboBox cmbox;
    java.sql.Connection connectDB = null;
    
     private LabResultsIntfr.SearchThread searchThread = null;
    private LabResultsIntfr.SearchServicesThread searchServicesThread = null;
      com.afrisoftech.lib.DBObject dbObject;
  
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    java.lang.Thread getListThread;
    
    boolean getList;
    
    
    public LabResultsIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {
        
        connectDB = connDb;
        
        pConnDB = pconnDB;
              dbObject = new com.afrisoftech.lib.DBObject();
  
         searchThread = new LabResultsIntfr.SearchThread();
        
               getListThread = new java.lang.Thread(this, "Update_discharge");
        
        initComponents();
        
        getList = true;
        
        getListThread.start();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog2 = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        jTextField113 = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        jSearchTable2 = new javax.swing.JTable();
        jButton52 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jSearchDialog21 = new javax.swing.JDialog();
        jSearchPanel21 = new javax.swing.JPanel();
        jTextField1131 = new javax.swing.JTextField();
        jSearchScrollPane21 = new javax.swing.JScrollPane();
        jSearchTable21 = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        };
        jButton521 = new javax.swing.JButton();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField11 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new javax.swing.JTable();
        jButton9 = new javax.swing.JButton();
        jSearchDialog211 = new javax.swing.JDialog();
        jSearchPanel211 = new javax.swing.JPanel();
        jTextField11311 = new javax.swing.JTextField();
        jSearchScrollPane211 = new javax.swing.JScrollPane();
        jSearchTable211 = new com.afrisoftech.dbadmin.JTable();
        jButton5211 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel21 = new javax.swing.JPanel();
        jPanel211 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTable11 = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class,  java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class,java.lang.Object.class,java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false,false, false, true,false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };

        jPanel12 = new javax.swing.JPanel();
        jScrollPane21 = new javax.swing.JScrollPane();
        jTable111 = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class,  java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class,java.lang.Object.class,java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false,false, false, true,false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };

        jSeparator11 = new javax.swing.JSeparator();
        jLabel71 = new javax.swing.JLabel();
        jTextField61 = new javax.swing.JTextField();
        jButton61 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        jButton41 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        jLabel5 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jTextField9 = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jPanel41 = new javax.swing.JPanel();
        jTextField91 = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jPanel411 = new javax.swing.JPanel();
        jTextField911 = new javax.swing.JTextField();
        searchButton11 = new javax.swing.JButton();
        jLabel41 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jTextField12 = new javax.swing.JTextField();
        jPanel31 = new javax.swing.JPanel();
        jCheckBox11 = new javax.swing.JCheckBox();
        jCheckBox21 = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jLabel6 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTable1 = new com.afrisoftech.dbadmin.JTable();
        jLabel11 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new com.afrisoftech.dbadmin.JTable();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jComboBox2 = new javax.swing.JComboBox();
        jPanel8 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton1 = new javax.swing.JButton();
        jTextField10 = new javax.swing.JTextField();
        jPanel22 = new javax.swing.JPanel();
        jPanel212 = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTable12 = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Short.class, java.lang.Object.class, java.lang.Object.class,java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };

        jLabel24 = new javax.swing.JLabel();
        datePicker11 = new com.afrisoftech.lib.DatePicker();
        jButton32 = new javax.swing.JButton();
        jButton42 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jSeparator12 = new javax.swing.JSeparator();
        jTextField62 = new javax.swing.JTextField();
        jPanel221 = new javax.swing.JPanel();
        jPanel2121 = new javax.swing.JPanel();
        jScrollPane131 = new javax.swing.JScrollPane();
        jTable121 = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Short.class, java.lang.Object.class, java.lang.Object.class,java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };

        jLabel241 = new javax.swing.JLabel();
        datePicker111 = new com.afrisoftech.lib.DatePicker();
        jButton321 = new javax.swing.JButton();
        jButton421 = new javax.swing.JButton();
        jSeparator121 = new javax.swing.JSeparator();
        jCheckBox1 = new javax.swing.JCheckBox();

        jSearchDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchDialog2.setModal(true);
        jSearchDialog2.setUndecorated(true);
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(new javax.swing.border.EtchedBorder());
        jTextField113.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField113CaretUpdate(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel2.add(jTextField113, gridBagConstraints);

        jSearchTable2.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable2.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable2MouseClicked(evt);
            }
        });

        jSearchScrollPane2.setViewportView(jSearchTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

        jButton52.setText("Dispose");
        jButton52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton52, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog2.getContentPane().add(jSearchPanel2, gridBagConstraints);

        jSearchDialog21.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchDialog21.setModal(true);
        jSearchDialog21.setUndecorated(true);
        jSearchPanel21.setLayout(new java.awt.GridBagLayout());

        jSearchPanel21.setBorder(new javax.swing.border.EtchedBorder());
        jTextField1131.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1131CaretUpdate(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel21.add(jTextField1131, gridBagConstraints);

        jSearchTable21.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable21.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable21MouseClicked(evt);
            }
        });

        jSearchScrollPane21.setViewportView(jSearchTable21);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel21.add(jSearchScrollPane21, gridBagConstraints);

        jButton521.setText("Dispose");
        jButton521.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton521ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel21.add(jButton521, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog21.getContentPane().add(jSearchPanel21, gridBagConstraints);

        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(new javax.swing.border.EtchedBorder());
        jTextField11.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField11CaretUpdate(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(jTextField11, gridBagConstraints);

        jSearchTable.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });

        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton9.setText("Dispose");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        jSearchDialog211.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchDialog211.setModal(true);
        jSearchDialog211.setUndecorated(true);
        jSearchPanel211.setLayout(new java.awt.GridBagLayout());

        jSearchPanel211.setBorder(new javax.swing.border.EtchedBorder());
        jTextField11311.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField11311CaretUpdate(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel211.add(jTextField11311, gridBagConstraints);

        jSearchTable211.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable211.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable211.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable211MouseClicked(evt);
            }
        });

        jSearchScrollPane211.setViewportView(jSearchTable211);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel211.add(jSearchScrollPane211, gridBagConstraints);

        jButton5211.setText("Dispose");
        jButton5211.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5211ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel211.add(jButton5211, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog211.getContentPane().add(jSearchPanel211, gridBagConstraints);

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Lab Tests Results");
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorPreview.gif")));
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jSeparator1, gridBagConstraints);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jLabel7, gridBagConstraints);

        jTextField6.setEditable(false);
        jTextField6.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField6.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        getContentPane().add(jTextField6, gridBagConstraints);

        jPanel21.setLayout(new java.awt.GridBagLayout());

        jPanel21.setBorder(new javax.swing.border.TitledBorder(""));
        jPanel211.setLayout(new java.awt.GridBagLayout());

        jPanel211.setBorder(new javax.swing.border.TitledBorder(null, "Lab Requests", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(0, 0, 255)));
        jScrollPane12.setAutoscrolls(true);
        jTable11.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Pat No.", "Pat Name", "Mode", "Service", "Qty", "Amount", "No", "Doctor", "Bill", "Bed No", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });

        jTable11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable11MouseClicked(evt);
            }
        });

        jScrollPane12.setViewportView(jTable11);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel211.add(jScrollPane12, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        jPanel21.add(jPanel211, gridBagConstraints);

        jPanel12.setLayout(new java.awt.GridBagLayout());

        jPanel12.setBorder(new javax.swing.border.TitledBorder(null, "External Requests", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(255, 0, 51)));
        jTable111.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Pat No.", "Pat Name", "Mode", "Service", "Qty", "Amount", "No", "Doctor", "Bill", "Bed No", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });

        jScrollPane21.setViewportView(jTable111);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel12.add(jScrollPane21, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel21.add(jPanel12, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        jPanel21.add(jSeparator11, gridBagConstraints);

        jLabel71.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel21.add(jLabel71, gridBagConstraints);

        jTextField61.setEditable(false);
        jTextField61.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField61.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel21.add(jTextField61, gridBagConstraints);

        jButton61.setText("Okay");
        jButton61.setEnabled(false);
        jButton61.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton61MouseClicked(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel21.add(jButton61, gridBagConstraints);

        jButton31.setIcon(new javax.swing.ImageIcon(getClass().getResource("/minusarm.gif")));
        jButton31.setMnemonic('l');
        jButton31.setText("Refresh");
        jButton31.setToolTipText("Click here to clear textfields");
        jButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton31ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel21.add(jButton31, gridBagConstraints);

        jButton41.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BD14755_.GIF")));
        jButton41.setMnemonic('C');
        jButton41.setText("Close");
        jButton41.setToolTipText("Click here to close window");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel21.add(jButton41, gridBagConstraints);

        jTabbedPane1.addTab("Pending Requests", jPanel21);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jCheckBox3.setText("Search By  No.");
        buttonGroup2.add(jCheckBox3);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel3.add(jCheckBox3, gridBagConstraints);

        jCheckBox4.setText("Search By Name");
        buttonGroup2.add(jCheckBox4);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel3.add(jCheckBox4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel6.add(jPanel3, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(new javax.swing.border.MatteBorder(null));
        jLabel9.setText("Patient No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jLabel9, gridBagConstraints);

        jLabel1.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jTextField1, gridBagConstraints);

        jComboBox1.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select first_name||' '||middle_name as name from pb_doctors_list where status ilike 'act%' order by name"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(jComboBox1, gridBagConstraints);

        jLabel2.setText("Doctor");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        jPanel2.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Ext Source");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        jPanel2.add(jLabel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jTextField2, gridBagConstraints);

        jLabel4.setText("Test");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jLabel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        jPanel2.add(datePicker1, gridBagConstraints);

        jLabel5.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        jPanel2.add(jLabel5, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel4.setBorder(new javax.swing.border.EtchedBorder());
        jTextField9.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jTextField9, gridBagConstraints);

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif")));
        searchButton.setToolTipText("Search");
        searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel4.add(searchButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel4, gridBagConstraints);

        jPanel41.setLayout(new java.awt.GridBagLayout());

        jPanel41.setBorder(new javax.swing.border.EtchedBorder());
        jTextField91.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel41.add(jTextField91, gridBagConstraints);

        searchButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif")));
        searchButton1.setToolTipText("Search");
        searchButton1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton1.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton1.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel41.add(searchButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(jPanel41, gridBagConstraints);

        jLabel8.setText("Discipline");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        jPanel2.add(jLabel8, gridBagConstraints);

        jTextField3.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jTextField3, gridBagConstraints);

        jLabel10.setText("Time(Min)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        jPanel2.add(jLabel10, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(jTextField4, gridBagConstraints);

        jLabel12.setText("Age");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        jPanel2.add(jLabel12, gridBagConstraints);

        jTextField5.setText("1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(jTextField5, gridBagConstraints);

        jLabel13.setText("Gender");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        jPanel2.add(jLabel13, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(jTextField7, gridBagConstraints);

        jLabel14.setText("Lab No.");
        jPanel2.add(jLabel14, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(jTextField8, gridBagConstraints);

        jPanel411.setLayout(new java.awt.GridBagLayout());

        jPanel411.setBorder(new javax.swing.border.EtchedBorder());
        jTextField911.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel411.add(jTextField911, gridBagConstraints);

        searchButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif")));
        searchButton11.setToolTipText("Search");
        searchButton11.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton11.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton11.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton11.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton11ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel411.add(searchButton11, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(jPanel411, gridBagConstraints);

        jLabel41.setText("On Line Req.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jLabel41, gridBagConstraints);

        jLabel17.setText("Specimen Time");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        jPanel2.add(jLabel17, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jTextField12, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = -5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        jPanel6.add(jPanel2, gridBagConstraints);

        jPanel31.setLayout(new java.awt.GridBagLayout());

        jPanel31.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jCheckBox11.setForeground(new java.awt.Color(51, 51, 255));
        jCheckBox11.setMnemonic('o');
        jCheckBox11.setText("Out Patients");
        buttonGroup1.add(jCheckBox11);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel31.add(jCheckBox11, gridBagConstraints);

        jCheckBox21.setForeground(new java.awt.Color(255, 0, 51));
        jCheckBox21.setMnemonic('i');
        jCheckBox21.setText("InPatients");
        buttonGroup1.add(jCheckBox21);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel31.add(jCheckBox21, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel6.add(jPanel31, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jScrollPane1.setViewportView(jEditorPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 8.0;
        gridBagConstraints.weighty = 20.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel1.add(jScrollPane1, gridBagConstraints);

        jLabel6.setText("Comments");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jLabel6, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jPanel11.setLayout(new java.awt.GridBagLayout());

        jPanel11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0)));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Test", "Result", "Units", "Lower", "Upper"
            }
        ));

        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });

        jScrollPane11.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jScrollPane11, gridBagConstraints);

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel11.setText("Normal Range");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 70);
        jPanel11.add(jLabel11, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 50.0;
        jPanel5.add(jPanel11, gridBagConstraints);

        jPanel7.setLayout(new java.awt.GridBagLayout());

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Test", "Result"
            }
        ));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });

        jScrollPane2.setViewportView(jTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 50.0;
        jPanel5.add(jPanel7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 50.0;
        jPanel1.add(jPanel5, gridBagConstraints);

        jLabel15.setText("Performed By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        jPanel1.add(jLabel15, gridBagConstraints);

        jLabel16.setText("Confirmed By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jLabel16, gridBagConstraints);

        jComboBox3.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select agent_name from pb_agents where category ilike 'lab%' order by agent_name"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(jComboBox3, gridBagConstraints);

        jComboBox2.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select agent_name from pb_agents where category ilike 'tech%' order by agent_name"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jComboBox2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        jPanel6.add(jPanel1, gridBagConstraints);

        jPanel8.setLayout(new java.awt.GridBagLayout());

        jButton6.setMnemonic('r');
        jButton6.setText("Remove Row");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jButton6, gridBagConstraints);

        jButton5.setMnemonic('h');
        jButton5.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jButton5, gridBagConstraints);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BD14755_.GIF")));
        jButton4.setMnemonic('C');
        jButton4.setText("Close");
        jButton4.setToolTipText("Click here to close window");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jButton4, gridBagConstraints);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/minusarm.gif")));
        jButton3.setMnemonic('l');
        jButton3.setText("Clear");
        jButton3.setToolTipText("Click here to clear textfields");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jButton3, gridBagConstraints);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/note[1].gif")));
        jButton2.setMnemonic('E');
        jButton2.setText("Edit");
        jButton2.setToolTipText("Click here to edit data");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jButton2, gridBagConstraints);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/check.gif")));
        jButton1.setMnemonic('O');
        jButton1.setText("Ok");
        jButton1.setToolTipText("Click here enter data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jPanel8, gridBagConstraints);

        jTextField10.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel6.add(jTextField10, gridBagConstraints);

        jTabbedPane1.addTab("Lab Results", jPanel6);

        jPanel22.setLayout(new java.awt.GridBagLayout());

        jPanel22.setBorder(new javax.swing.border.TitledBorder(""));
        jPanel212.setLayout(new java.awt.GridBagLayout());

        jScrollPane13.setAutoscrolls(true);
        jTable12.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Date", "Pat No", "Name", "No", "Read"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });

        jTable12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable12MouseClicked(evt);
            }
        });

        jScrollPane13.setViewportView(jTable12);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel212.add(jScrollPane13, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 7.0;
        jPanel22.add(jPanel212, gridBagConstraints);

        jLabel24.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel22.add(jLabel24, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel22.add(datePicker11, gridBagConstraints);

        jButton32.setIcon(new javax.swing.ImageIcon(getClass().getResource("/minusarm.gif")));
        jButton32.setMnemonic('l');
        jButton32.setText("Clear");
        jButton32.setToolTipText("Click here to clear textfields");
        jButton32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton32ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel22.add(jButton32, gridBagConstraints);

        jButton42.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BD14755_.GIF")));
        jButton42.setMnemonic('C');
        jButton42.setText("Close");
        jButton42.setToolTipText("Click here to close window");
        jButton42.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton42ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel22.add(jButton42, gridBagConstraints);

        jLabel18.setFont(new java.awt.Font("Dialog", 1, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel22.add(jLabel18, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        jPanel22.add(jSeparator12, gridBagConstraints);

        jTextField62.setEditable(false);
        jTextField62.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField62.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel22.add(jTextField62, gridBagConstraints);

        jTabbedPane1.addTab("Pending Results", jPanel22);

        jPanel221.setLayout(new java.awt.GridBagLayout());

        jPanel221.setBorder(new javax.swing.border.TitledBorder(""));
        jPanel2121.setLayout(new java.awt.GridBagLayout());

        jScrollPane131.setAutoscrolls(true);
        jTable121.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Date", "Pat No", "Name", "No", "Read"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });

        jTable121.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable121MouseClicked(evt);
            }
        });

        jScrollPane131.setViewportView(jTable121);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel2121.add(jScrollPane131, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel221.add(jPanel2121, gridBagConstraints);

        jLabel241.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel221.add(jLabel241, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel221.add(datePicker111, gridBagConstraints);

        jButton321.setIcon(new javax.swing.ImageIcon(getClass().getResource("/minusarm.gif")));
        jButton321.setMnemonic('l');
        jButton321.setText("Clear");
        jButton321.setToolTipText("Click here to clear textfields");
        jButton321.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton321ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel221.add(jButton321, gridBagConstraints);

        jButton421.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BD14755_.GIF")));
        jButton421.setMnemonic('C');
        jButton421.setText("Close");
        jButton421.setToolTipText("Click here to close window");
        jButton421.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton421ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel221.add(jButton421, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        jPanel221.add(jSeparator121, gridBagConstraints);

        jCheckBox1.setText("View");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel221.add(jCheckBox1, gridBagConstraints);

        jTabbedPane1.addTab("View Results", jPanel221);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        setBounds(0, 0, 697, 496);
    }//GEN-END:initComponents

    private void jButton421ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton421ActionPerformed
         this.setVisible(false);   // Add your handling code here:
 
 // Add your handling code here:
    }//GEN-LAST:event_jButton421ActionPerformed

    private void jButton321ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton321ActionPerformed
     
      for (int k = 0; k < jTable121.getRowCount(); k++ ) {
                for (int r = 0; r < jTable121.getColumnCount(); r++ ) {
                    jTable121.getModel().setValueAt(null,k,r);
                }
            }   // Add your handling code here:
    }//GEN-LAST:event_jButton321ActionPerformed

    private void jTable121MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable121MouseClicked
       String receiptNo = null;
     
        // if (Boolean.valueOf(jTable1.getModel().getValueAt(jTable1.getSelectedRow(),4).toString()) == java.lang.Boolean.TRUE) {
              receiptNo =  jTable121.getValueAt(jTable121.getSelectedRow(), 3).toString();
      com.afrisoftech.reports.PatientLabResultsPdf policy = new com.afrisoftech.reports.PatientLabResultsPdf();
                
                policy.PatientLabResultsPdf(connectDB, receiptNo, receiptNo);  // Add your handling code here:
    }//GEN-LAST:event_jTable121MouseClicked

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
       String labNo= null; 
         String patientNo= null; 
        int j = 0;
        int i = 0;
        int n = 0;
        int patNo = 0;
       int Total1 =0;
       int Total =0;
       int labNo1 = 0;
       
       
       
       // String labNo= null; 
        // String patientNo= null; 
       // int j = 0;
       // int i = 0;
       // int n = 0;
      //  int patNo = 0;
      // int Total1 =0;
      // int Total =0;
      /// int labNo1 = 0;
        try {
               java.sql.Statement stmtTable113 = connectDB.createStatement();
            
            java.sql.ResultSet rsetTable113 = stmtTable113.executeQuery("select count(distinct lab_no) from hp_lab_results where date ='"+datePicker11.getDate().toString()+"' and lab_no !='null' and lab_no is not null");
         
              while (rsetTable113.next()) {
                labNo1 = rsetTable113.getInt(1);
                        System.out.println("Lab no is "+labNo1);
            }   
            
            if(labNo1>0){
             
            // for (int l = 0; l < listofDays.length; l++) {
            
                
              //   jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select distinct date,patient_no,patient_name,lab_no,doc_read from hp_lab_results where doc_read = false AND date >='"+datePicker1.getDate().toString()+"'  ORDER BY date,lab_no"));
                    
            
            java.sql.Statement stmtTable1 = connectDB.createStatement();
            
            java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select distinct date,patient_no,patient_name,lab_no,doc_read from hp_lab_results where date >='"+datePicker11.getDate().toString()+"'  ORDER BY date,lab_no");
            
            
            while (rsetTable1.next()) {
                
                jTable121.setValueAt(rsetTable1.getObject(1), i, 0);
                jTable121.setValueAt(rsetTable1.getObject(2), i, 1);
                jTable121.setValueAt(rsetTable1.getObject(3), i, 2);
                jTable121.setValueAt(rsetTable1.getObject(4), i, 3);
               jTable121.setValueAt(rsetTable1.getObject(5), i, 4);
               
                i++;
               
            }
                   
            //}
            
            } 
            
        } catch(java.sql.SQLException sqlExec) {
            
            sqlExec.printStackTrace();
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
            
        }  // Add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jTable12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable12MouseClicked
    String receiptNo = null;
     
        // if (Boolean.valueOf(jTable1.getModel().getValueAt(jTable1.getSelectedRow(),4).toString()) == java.lang.Boolean.TRUE) {
              receiptNo =  jTable12.getValueAt(jTable12.getSelectedRow(), 3).toString();
      com.afrisoftech.reports.PatientLabResultsPdf policy = new com.afrisoftech.reports.PatientLabResultsPdf();
                
                policy.PatientLabResultsPdf(connectDB, receiptNo, receiptNo);
        
        //}  // Add your handling code here:
    }//GEN-LAST:event_jTable12MouseClicked

    private void jButton42ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton42ActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jButton42ActionPerformed

    private void jButton62ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton62ActionPerformed
      this.setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_jButton62ActionPerformed

    private void jButton32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton32ActionPerformed
     for (int k = 0; k < jTable12.getRowCount(); k++ ) {
                for (int r = 0; r < jTable12.getColumnCount(); r++ ) {
                    jTable12.getModel().setValueAt(null,k,r);
                }
            }   // Add your handling code here:
    }//GEN-LAST:event_jButton32ActionPerformed

    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton31ActionPerformed
          for (int k = 0; k < jTable11.getRowCount(); k++ ) {
            for (int r = 0; r < jTable11.getColumnCount(); r++ ) {
                jTable11.getModel().setValueAt(null,k,r);
            }
        }
          
          
           for (int k = 0; k < jTable111.getRowCount(); k++ ) {
            for (int r = 0; r < jTable111.getColumnCount(); r++ ) {
                jTable111.getModel().setValueAt(null,k,r);
            }
        }
                 int j = 0;
        int i = 0;
        int n = 0;
         int k = 0;
        try {
            
            // for (int l = 0; l < listofDays.length; l++) {
            
            java.sql.Statement stmtTable1 = connectDB.createStatement();
            
            java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select trans_date,patient_no,patient_name,payment_mode,service,quantity,amount,inv_no,doctor,'false' as bill,bed_no,curr_date::time(0) from pb_doctors_request where revenue_code ilike 'lab%' and paid = false AND collected = false and trans_date>=current_date -1 ORDER BY trans_date asc");
            
            
            while (rsetTable1.next()) {
                
                jTable11.setValueAt(rsetTable1.getObject(1), i, 0);
                jTable11.setValueAt(rsetTable1.getObject(2), i, 1);
                jTable11.setValueAt(rsetTable1.getObject(3), i, 2);
                jTable11.setValueAt(rsetTable1.getObject(4), i, 3);
                jTable11.setValueAt(rsetTable1.getObject(5), i, 4);
                jTable11.setValueAt(rsetTable1.getObject(6), i, 5);
                jTable11.setValueAt(rsetTable1.getObject(7), i, 6);
                 jTable11.setValueAt(rsetTable1.getObject(8), i, 7);
                   jTable11.setValueAt(rsetTable1.getObject(9), i, 8);
                  jTable11.setValueAt(java.lang.Boolean.valueOf(false), i, 9);
                   jTable11.setValueAt(rsetTable1.getObject(11), i, 10);
                   jTable11.setValueAt(rsetTable1.getObject(12), i, 11);
               
                
                i++;
                
            }
            
         java.sql.Statement stmtTable11 = connectDB.createStatement();
            
            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("select trans_date,patient_no,patient_name,payment_mode,service,quantity,amount,inv_no,doctor,'false' as bill,bed_no,curr_date::time(0) from pb_doctors_request where revenue_code ilike 'ext%' and paid = false AND collected = false and trans_date>=current_date -1 ORDER BY trans_date asc");
            
            
            while (rsetTable11.next()) {
                
                jTable111.setValueAt(rsetTable11.getObject(1), k, 0);
                jTable111.setValueAt(rsetTable11.getObject(2), k, 1);
                jTable111.setValueAt(rsetTable11.getObject(3), k, 2);
                jTable111.setValueAt(rsetTable11.getObject(4), k, 3);
                jTable111.setValueAt(rsetTable11.getObject(5), k, 4);
                jTable111.setValueAt(rsetTable11.getObject(6), k, 5);
                jTable111.setValueAt(rsetTable11.getObject(7), k, 6);
                 jTable111.setValueAt(rsetTable11.getObject(8), k, 7);
                   jTable111.setValueAt(rsetTable11.getObject(9), k, 8);
                  jTable111.setValueAt(java.lang.Boolean.valueOf(false), k, 9);
                   jTable111.setValueAt(rsetTable11.getObject(11), k, 10);
                   jTable111.setValueAt(rsetTable11.getObject(12), k, 11);
               
                
                k++;
                
            }
           
            
        } catch(java.sql.SQLException sqlExec) {
            
            sqlExec.printStackTrace();
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
            
        }    // Add your handling code here:
    }//GEN-LAST:event_jButton31ActionPerformed

    private void jButton61MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton61MouseClicked
      java.util.Calendar calendar = java.util.Calendar.getInstance();
        
        long dateNow = calendar.getTimeInMillis();
        
        java.sql.Date datenowSql1= new java.sql.Date(dateNow);
        
        System.out.println(datenowSql1.toString());
        
        java.sql.Timestamp datenowSql= new java.sql.Timestamp(dateNow);
        
        System.out.println(datenowSql.toString());
        //   try{
        String billNo = null;
        String transNo = null;
        String payMode = null;
        String patientAcc = null;
        String cardNo = null;
        String AccDesc = null;
        String scheme = null;
        String cardName = null;
        String isurer = null;
        String expDate = null;
        String staffNo = null;
        String glAcc = null;
        String user = null;
        String accDesc1 = null;
        String glAcc1 = null;
        String chbox = null;
        String units = null;
        String gacc = null;
        String request = null;
        int itemInt = 0;
        double price = 0.00;
        String Store = null;
        double qty = 0.00;
        String glCode = null;
        String actCode = null;
        double amount = 0.00;
        double sellPrice = 0.00;
        java.util.Date admDate=null;
        String visitid = "-";
           java.util.Date adDate=null;
            String opvisitid = "-";           
           
        try {
            connectDB.setAutoCommit(false);
             java.sql.Statement stm12t = connectDB.createStatement();
           
            java.sql.Statement stm12 = connectDB.createStatement();
            java.sql.Statement stm121 = connectDB.createStatement();
            java.sql.Statement stm1211 = connectDB.createStatement();
            java.sql.Statement stm122 = connectDB.createStatement();
            java.sql.Statement stm122x = connectDB.createStatement();
            java.sql.Statement stm1 = connectDB.createStatement();
            
            java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
            
            
            while (rse12.next()){
                
                patientAcc = rse12.getObject(1).toString();
                AccDesc = rse12.getObject(2).toString();
            }
                  java.sql.Statement stm121q = connectDB.createStatement();
           
            
             java.sql.ResultSet rse121 = stm121q.executeQuery("select distinct gl_account,main_service from pb_operating_parameters where main_service ilike 'lab%'");
                        
                        while (rse121.next()){
                            
                            actCode = rse121.getObject(1).toString();
                            glAcc = rse121.getObject(2).toString();
                        }
            
              
                for (int i = 0; i < jTable1.getRowCount(); i++){
                    if (jTable1.getValueAt(i,9) != null){
                    if (Boolean.valueOf(jTable1.getModel().getValueAt(i, 9).toString()) == java.lang.Boolean.TRUE) {
                       
   
                            java.sql.Statement ps11 = connectDB.createStatement();
            java.sql.ResultSet rst11 = ps11.executeQuery("select nextval('lab_request'),current_user");
            while (rst11.next()){
                rst11.getObject(1).toString();
                
                billNo = rst11.getObject(1).toString();
                user = rst11.getObject(2).toString();
                                
                           }
            
            request =jTable1.getValueAt(i, 7).toString();
            if(request.startsWith("I")){
                 java.sql.ResultSet rse12t = stm12t.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
            
            java.sql.Statement pst = connectDB.createStatement();
            java.sql.ResultSet rstt = pst.executeQuery("select nextval('transaction_no_seq')");
            
            while (rse12t.next()){
                
                patientAcc = rse12t.getObject(1).toString();
                AccDesc = rse12t.getObject(2).toString();
            }
            while (rstt.next()){
                rstt.getObject(1).toString();
                
                transNo = rstt.getObject(1).toString();
            }
            
               java.sql.Statement stm121t = connectDB.createStatement();
          
              java.sql.Statement stm12n = connectDB.createStatement();
                    java.sql.ResultSet rse12n = stm12n.executeQuery("select adm_date from hp_inpatient_register where patient_no ='"+jTable1.getValueAt(i,1).toString()+"'");
                    while (rse12n.next()){
                        admDate = rse12n.getDate(1);
                    }
                    java.sql.Statement ps11w1 = connectDB.createStatement();
                    java.sql.ResultSet rst11w1 = ps11w1.executeQuery("select visit_id from hp_admission where patient_no = '"+jTable1.getValueAt(i,1).toString()+"' and check_out = false");
                    while (rst11w1.next()){
                        
                        
                        visitid = rst11w1.getObject(1).toString();
                    }
                    
                     
                    System.out.println(admDate);
                    // if (exp.before(date)){
                  //  if (adDate.before(admDate)){
                    //    javax.swing.JOptionPane.showMessageDialog(this, "Admission date is : " +admDate +" CHECK billing date","Date Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                   // }else{
                        
                        if (!(jTable1.getValueAt(i,3).toString().equals("Cash"))){
                            java.sql.ResultSet rse1 = stm1.executeQuery("select pay_mode,account_no,description,payer,payer,expiry_date,account_no from hp_inpatient_register where patient_no ='"+jTable1.getValueAt(i,1).toString()+"'");
                            while (rse1.next()){
                                payMode = dbObject.getDBObject(rse1.getObject(1), "-");
                    cardNo = dbObject.getDBObject(rse1.getObject(2), "-");
                    scheme = dbObject.getDBObject(rse1.getObject(3), "-");
                    cardName = dbObject.getDBObject(rse1.getObject(4), "-");
                    isurer = dbObject.getDBObject(rse1.getObject(5), "-");
                    expDate = dbObject.getDBObject(rse1.getObject(6), "NULL");
                    staffNo = dbObject.getDBObject(rse1.getObject(7), "-");
                            }
                        }
                                      
                                    java.sql.ResultSet rse121t = stm121t.executeQuery("select activity from pb_activity where code ='"+actCode+"'");
                                    while (rse121.next()){
                                        
                                        glAcc = rse121t.getObject(1).toString();
                                        
                                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                                        //1 for (int i = 0; i < jTable1.getRowCount(); i++){
                                        pstmt.setString(1,jTable1.getValueAt(i,1).toString());
                                        pstmt.setObject(2,jTable1.getValueAt(i,4).toString());
                                        pstmt.setString(3,"General");
                                        pstmt.setString(4,jTable1.getValueAt(i,3).toString());
                                        pstmt.setString(5,transNo);
                                        pstmt.setString(7,scheme);
                                        pstmt.setString(6,cardNo);
                                        pstmt.setString(8,cardName);
                                        pstmt.setString(9,isurer);
                                        pstmt.setString(10,expDate);
                                        pstmt.setString(11,"");
                                        pstmt.setObject(12,jTable1.getValueAt(i,6).toString());
                                        pstmt.setString(13,"0.00");
                                        pstmt.setString(14,jTable1.getValueAt(i,0).toString());
                                        pstmt.setObject(15,patientAcc);
                                        pstmt.setString(16,glAcc);
                                        pstmt.setObject(17,jTable1.getValueAt(i,5).toString());
                                        pstmt.setObject(18,staffNo);
                                        pstmt.setBoolean(19,false);
                                        pstmt.setString(20,"Billing");
                                        pstmt.setBoolean(21,false);
                                        pstmt.setString(22,AccDesc);
                                        pstmt.setString(23,visitid);
                                        pstmt.setString(24,user);
                                        pstmt.setString(25,billNo);
                                        pstmt.setString(26,"IP");
                                        pstmt.setString(27,"'now'");
                                        pstmt.setString(28,visitid);
                                        pstmt.executeUpdate();
                                        
                                        
                                        java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                        pstmt2.setObject(1,actCode);
                                        pstmt2.setString(2,glAcc);
                                        pstmt2.setString(3,jTable1.getValueAt(i,1).toString());
                                        pstmt2.setString(4,jTable1.getValueAt(i,2).toString());
                                        pstmt2.setString(5,"");
                                        pstmt2.setString(6,cardNo);
                                        pstmt2.setString(7,cardName);
                                        pstmt2.setString(8,"IP");
                                        pstmt2.setString(9,jTable1.getValueAt(i,8).toString());
                                        pstmt2.setString(10,jTable1.getValueAt(i,3).toString());
                                        pstmt2.setString(11,"");
                                        pstmt2.setString(12,"");
                                        pstmt2.setString(13,"");
                                        pstmt2.setString(14,jTable1.getValueAt(i,4).toString());
                                        pstmt2.setString(15,"Revenue");
                                        pstmt2.setString(16,"0.00");
                                        pstmt2.setObject(17,jTable1.getValueAt(i,6).toString());
                                        pstmt2.setString(18,jTable1.getValueAt(i,0).toString());
                                        pstmt2.setString(19,transNo);
                                        pstmt2.setString(20,"false");
                                        pstmt2.setString(21,"false");
                                        pstmt2.setString(22,"false");
                                        pstmt2.setString(23,user);
                                        pstmt2.executeUpdate();
                                        
                                        
                                    //}
                                //}
                           // }
                        }
                          
                             java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request SET paid = true,collected = false where inv_no = '"+jTable1.getValueAt(jTable1.getSelectedRow(),7).toString()+"' AND service = '"+jTable1.getValueAt(jTable1.getSelectedRow(),4).toString()+"'");
                    pstmt46.executeUpdate();
                   
            
            
            
            }else{
                  java.sql.Statement ps11w1 = connectDB.createStatement();
                    java.sql.ResultSet rst11w1 = ps11w1.executeQuery("select distinct slip_no from credit_acc_slip where patient_no = '"+jTable1.getValueAt(jTable1.getSelectedRow(),1).toString()+"' order by date desc limit 1");
                    while (rst11w1.next()){
                        
                        
                        opvisitid = rst11w1.getObject(1).toString();
                    }
                    
            java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into hp_patient_billing values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,trim(?))");
                            
                            pstmt2.setString(1,jTable1.getValueAt(i,1).toString());
                           
                            pstmt2.setString(2,jTable1.getValueAt(i,2).toString());
                            pstmt2.setString(3,jTable1.getValueAt(i,3).toString());
                            pstmt2.setString(4,"General");
                            pstmt2.setString(5,jTable1.getValueAt(i,4).toString());
                            pstmt2.setString(6,jTable1.getValueAt(i,5).toString());
                            pstmt2.setString(7,jTable1.getValueAt(i,6).toString());
                            pstmt2.setObject(8,actCode);
                            pstmt2.setString(9,jTable1.getValueAt(i,0).toString());
                             pstmt2.setString(10,billNo);
                           
                            pstmt2.setString(11,user);
                             pstmt2.setString(12,"false");
                            pstmt2.setString(13,glAcc);
                            pstmt2.setString(14,billNo);
                            pstmt2.setString(15,jTable1.getValueAt(i,7).toString());
                            pstmt2.executeUpdate();
                            java.sql.Statement pstm121t = connectDB.createStatement();
                             java.sql.ResultSet rse121t = pstm121t.executeQuery("select activity from pb_activity where code ='"+actCode+"'");
                                    while (rse121.next()){
                                        
                                        glAcc = rse121t.getObject(1).toString();
                                        
                                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                                        //1 for (int i = 0; i < jTable1.getRowCount(); i++){
                                        pstmt.setString(1,jTable1.getValueAt(i,1).toString());
                                        pstmt.setObject(2,jTable1.getValueAt(i,4).toString());
                                        pstmt.setString(3,"General");
                                        pstmt.setString(4,jTable1.getValueAt(i,3).toString());
                                        pstmt.setString(5,transNo);
                                        pstmt.setString(7,scheme);
                                        pstmt.setString(6,cardNo);
                                        pstmt.setString(8,cardName);
                                        pstmt.setString(9,isurer);
                                        pstmt.setString(10,expDate);
                                        pstmt.setString(11,"");
                                        pstmt.setObject(12,jTable1.getValueAt(i,6).toString());
                                        pstmt.setString(13,"0.00");
                                        pstmt.setString(14,jTable1.getValueAt(i,0).toString());
                                        pstmt.setObject(15,patientAcc);
                                        pstmt.setString(16,glAcc);
                                        pstmt.setObject(17,jTable1.getValueAt(i,5).toString());
                                        pstmt.setObject(18,staffNo);
                                        pstmt.setBoolean(19,false);
                                        pstmt.setString(20,"Billing");
                                        pstmt.setBoolean(21,false);
                                        pstmt.setString(22,AccDesc);
                                        pstmt.setString(23,visitid);
                                        pstmt.setString(24,user);
                                        pstmt.setString(25,billNo);
                                        pstmt.setString(26,"OP");
                                        pstmt.setString(27,"'now'");
                                        pstmt.setString(28,visitid);
                                        pstmt.executeUpdate();
                                        
                                        
                                        java.sql.PreparedStatement pstmt2v = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                        pstmt2v.setObject(1,actCode);
                                        pstmt2v.setString(2,glAcc);
                                        pstmt2v.setString(3,jTable1.getValueAt(i,1).toString());
                                        pstmt2v.setString(4,jTable1.getValueAt(i,2).toString());
                                        pstmt2v.setString(5,"");
                                        pstmt2v.setString(6,cardNo);
                                        pstmt2v.setString(7,cardName);
                                        pstmt2v.setString(8,"OP");
                                        pstmt2v.setString(9,jTable1.getValueAt(i,8).toString());
                                        pstmt2v.setString(10,jTable1.getValueAt(i,3).toString());
                                        pstmt2v.setString(11,"");
                                        pstmt2v.setString(12,"");
                                        pstmt2v.setString(13,"");
                                        pstmt2v.setString(14,jTable1.getValueAt(i,4).toString());
                                        pstmt2v.setString(15,"Revenue");
                                        pstmt2v.setString(16,"0.00");
                                        pstmt2v.setObject(17,jTable1.getValueAt(i,6).toString());
                                        pstmt2v.setString(18,jTable1.getValueAt(i,0).toString());
                                        pstmt2v.setString(19,transNo);
                                        pstmt2v.setString(20,"false");
                                        pstmt2v.setString(21,"false");
                                        pstmt2v.setString(22,"false");
                                        pstmt2v.setString(23,user);
                                        pstmt2v.executeUpdate();
                                    }
                             java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request SET paid = true,collected = false where inv_no = '"+jTable1.getValueAt(jTable1.getSelectedRow(),7).toString()+"' AND service = '"+jTable1.getValueAt(jTable1.getSelectedRow(),4).toString()+"'");
                    pstmt46.executeUpdate();
           // }     
                    }
                }
                
                }
                }
                
                javax.swing.JOptionPane.showMessageDialog(this,"Insert Successful","Confirmation Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                
            //}
            connectDB.commit();
            connectDB.setAutoCommit(true);
            
             for (int k = 0; k < jTable1.getRowCount(); k++ ) {
            for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                jTable1.getModel().setValueAt(null,k,r);
            }
        }
           
        }catch(java.sql.SQLException sq){
            
            try {
                connectDB.rollback();
            }catch (java.sql.SQLException sql){
                javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this,sq.getMessage(), "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            
        }   // Add your handling code here:
    }//GEN-LAST:event_jButton61MouseClicked

    private void jTable11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable11MouseClicked

      java.util.Calendar calendar = java.util.Calendar.getInstance();
        
        long dateNow = calendar.getTimeInMillis();
        
        java.sql.Date datenowSql1= new java.sql.Date(dateNow);
        
        System.out.println(datenowSql1.toString());
        
        java.sql.Timestamp datenowSql= new java.sql.Timestamp(dateNow);
        
        System.out.println(datenowSql.toString());
        //   try{
        String billNo = null;
        String transNo = null;
        String payMode = null;
        String patientAcc = null;
        String cardNo = null;
        String AccDesc = null;
        String scheme = null;
        String cardName = null;
        String isurer = null;
        String expDate = null;
        String staffNo = null;
        String glAcc = null;
        String user = null;
        String accDesc1 = null;
        String glAcc1 = null;
        String chbox = null;
        String units = null;
        String gacc = null;
        String request = null;
        int itemInt = 0;
        double price = 0.00;
        String Store = null;
        double qty = 0.00;
        String glCode = null;
        String actCode = null;
        double amount = 0.00;
        double sellPrice = 0.00;
        java.util.Date admDate=null;
        String visitid = "-";
           java.util.Date adDate=null;
            String opvisitid = "-";           
           
        try {
            connectDB.setAutoCommit(false);
             java.sql.Statement stm12t = connectDB.createStatement();
           
            java.sql.Statement stm12 = connectDB.createStatement();
            java.sql.Statement stm121 = connectDB.createStatement();
            java.sql.Statement stm1211 = connectDB.createStatement();
            java.sql.Statement stm122 = connectDB.createStatement();
            java.sql.Statement stm122x = connectDB.createStatement();
            java.sql.Statement stm1 = connectDB.createStatement();
                java.sql.Statement pst = connectDB.createStatement();
       
             java.sql.ResultSet rstt = pst.executeQuery("select nextval('transaction_no_seq')");
            
           
            while (rstt.next()){
                rstt.getObject(1).toString();
                
                transNo = rstt.getObject(1).toString();
            }
            java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
            
            
            while (rse12.next()){
                
                patientAcc = rse12.getObject(1).toString();
                AccDesc = rse12.getObject(2).toString();
            }
                  java.sql.Statement stm121q = connectDB.createStatement();
           
            
             java.sql.ResultSet rse121 = stm121q.executeQuery("select distinct gl_account,main_service from pb_operating_parameters where main_service ilike 'lab%'");
                        
                        while (rse121.next()){
                            
                            actCode = rse121.getObject(1).toString();
                            glAcc = rse121.getObject(2).toString();
                        }
            
              int i = jTable11.getSelectedRow();
               // for (int i = 0; i < jTable1.getRowCount(); i++){
                    if (jTable11.getValueAt(i,9) != null){
                    if (Boolean.valueOf(jTable11.getModel().getValueAt(i, 9).toString()) == java.lang.Boolean.TRUE) {
                       
           System.out.println("Count"+i);
                            java.sql.Statement ps11 = connectDB.createStatement();
            java.sql.ResultSet rst11 = ps11.executeQuery("select nextval('lab_request'),current_user");
            while (rst11.next()){
                rst11.getObject(1).toString();
                
                billNo = rst11.getObject(1).toString();
                user = rst11.getObject(2).toString();
                                
                           }
            
            request =jTable1.getValueAt(i, 7).toString();
            if(request.startsWith("I")){
                 java.sql.ResultSet rse12t = stm12t.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
               
            while (rse12t.next()){
                
                patientAcc = rse12t.getObject(1).toString();
                AccDesc = rse12t.getObject(2).toString();
            }
          
            
               java.sql.Statement stm121t = connectDB.createStatement();
          
              java.sql.Statement stm12n = connectDB.createStatement();
                    java.sql.ResultSet rse12n = stm12n.executeQuery("select adm_date from hp_inpatient_register where patient_no ='"+jTable11.getValueAt(i,1).toString()+"'");
                    while (rse12n.next()){
                        admDate = rse12n.getDate(1);
                    }
                    java.sql.Statement ps11w1 = connectDB.createStatement();
                    java.sql.ResultSet rst11w1 = ps11w1.executeQuery("select visit_id,date_admitted from hp_admission where patient_no = '"+jTable11.getValueAt(i,1).toString()+"' order by date_admitted desc limit 1");
                    while (rst11w1.next()){
                        
                        
                        visitid = rst11w1.getObject(1).toString();
                    }
                    
                     
                    System.out.println(admDate);
                    // if (exp.before(date)){
                  //  if (adDate.before(admDate)){
                    //    javax.swing.JOptionPane.showMessageDialog(this, "Admission date is : " +admDate +" CHECK billing date","Date Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                   // }else{
                        
                        if (!(jTable11.getValueAt(i,3).toString().equals("Cash"))){
                            java.sql.ResultSet rse1 = stm1.executeQuery("select pay_mode,account_no,description,payer,payer,expiry_date,account_no from hp_inpatient_register where patient_no ='"+jTable11.getValueAt(i,1).toString()+"'");
                            while (rse1.next()){
                                payMode = dbObject.getDBObject(rse1.getObject(1), "-");
                    cardNo = dbObject.getDBObject(rse1.getObject(2), "-");
                    scheme = dbObject.getDBObject(rse1.getObject(3), "-");
                    cardName = dbObject.getDBObject(rse1.getObject(4), "-");
                    isurer = dbObject.getDBObject(rse1.getObject(5), "-");
                    expDate = dbObject.getDBObject(rse1.getObject(6), "NULL");
                    staffNo = dbObject.getDBObject(rse1.getObject(7), "-");
                            }
                        }
                                      
                                    java.sql.ResultSet rse121t = stm121t.executeQuery("select activity from pb_activity where code ='"+actCode+"'");
                                    while (rse121.next()){
                                        
                                        glAcc = rse121t.getObject(1).toString();
                                    }
                                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                                        //1 for (int i = 0; i < jTable1.getRowCount(); i++){
                                        pstmt.setString(1,jTable11.getValueAt(i,1).toString());
                                        pstmt.setObject(2,jTable11.getValueAt(i,4).toString());
                                        pstmt.setString(3,"General");
                                        pstmt.setString(4,jTable11.getValueAt(i,3).toString());
                                        pstmt.setString(5,transNo);
                                        pstmt.setString(7,scheme);
                                        pstmt.setString(6,cardNo);
                                        pstmt.setString(8,cardName);
                                        pstmt.setString(9,isurer);
                                        pstmt.setString(10,expDate);
                                        pstmt.setString(11,"");
                                        pstmt.setObject(12,jTable11.getValueAt(i,6).toString());
                                        pstmt.setString(13,"0.00");
                                        pstmt.setString(14,jTable11.getValueAt(i,0).toString());
                                        pstmt.setObject(15,patientAcc);
                                        pstmt.setString(16,glAcc);
                                        pstmt.setObject(17,jTable11.getValueAt(i,5).toString());
                                        pstmt.setObject(18,staffNo);
                                        pstmt.setBoolean(19,false);
                                        pstmt.setString(20,"Billing");
                                        pstmt.setBoolean(21,false);
                                        pstmt.setString(22,AccDesc);
                                        pstmt.setString(23,visitid);
                                        pstmt.setString(24,user);
                                        pstmt.setString(25,billNo);
                                        pstmt.setString(26,"IP");
                                        pstmt.setString(27,"'now'");
                                        pstmt.setString(28,visitid);
                                        pstmt.executeUpdate();
                                        
                                        
                                        java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                        pstmt2.setObject(1,actCode);
                                        pstmt2.setString(2,glAcc);
                                        pstmt2.setString(3,jTable11.getValueAt(i,1).toString());
                                        pstmt2.setString(4,jTable11.getValueAt(i,2).toString());
                                        pstmt2.setString(5,"");
                                        pstmt2.setString(6,cardNo);
                                        pstmt2.setString(7,cardName);
                                        pstmt2.setString(8,"IP");
                                        pstmt2.setString(9,jTable11.getValueAt(i,8).toString());
                                        pstmt2.setString(10,jTable11.getValueAt(i,3).toString());
                                        pstmt2.setString(11,"");
                                        pstmt2.setString(12,"");
                                        pstmt2.setString(13,"");
                                        pstmt2.setString(14,jTable11.getValueAt(i,4).toString());
                                        pstmt2.setString(15,"Revenue");
                                        pstmt2.setString(16,"0.00");
                                        pstmt2.setObject(17,jTable11.getValueAt(i,6).toString());
                                        pstmt2.setString(18,jTable11.getValueAt(i,0).toString());
                                        pstmt2.setString(19,transNo);
                                        pstmt2.setString(20,"false");
                                        pstmt2.setString(21,"false");
                                        pstmt2.setString(22,"false");
                                        pstmt2.setString(23,user);
                                        pstmt2.executeUpdate();
                                        
                                        
                                    //}
                                //}
                           // }
                        
                          
                             java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request SET paid = true,collected = false where inv_no = '"+jTable11.getValueAt(jTable11.getSelectedRow(),7).toString()+"' AND service = '"+jTable11.getValueAt(jTable11.getSelectedRow(),4).toString()+"'");
                    pstmt46.executeUpdate();
                   
            
            
            
            }else{
                 java.sql.Statement ps11w1 = connectDB.createStatement();
                    java.sql.ResultSet rst11w1 = ps11w1.executeQuery("select visit_id from hp_admission where patient_no = '"+jTable11.getValueAt(i,1).toString()+"' and check_out = false");
                    while (rst11w1.next()){
                        
                        
                        visitid = rst11w1.getObject(1).toString();
                    }
                    
                  java.sql.Statement ps11w11 = connectDB.createStatement();
                    java.sql.ResultSet rst11w11 = ps11w11.executeQuery("select distinct slip_no,date from credit_acc_slip where patient_no = '"+jTable11.getValueAt(jTable11.getSelectedRow(),1).toString()+"' order by date desc limit 1");
                    while (rst11w11.next()){
                        
                        
                        opvisitid = rst11w11.getObject(1).toString();
                    }
                    
            java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into hp_patient_billing values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,trim(?))");
                            
                            pstmt2.setString(1,jTable11.getValueAt(i,1).toString());
                           
                            pstmt2.setString(2,jTable11.getValueAt(i,2).toString());
                            pstmt2.setString(3,jTable11.getValueAt(i,3).toString());
                            pstmt2.setString(4,"General");
                            pstmt2.setString(5,jTable11.getValueAt(i,4).toString());
                            pstmt2.setString(6,jTable11.getValueAt(i,5).toString());
                            pstmt2.setString(7,jTable11.getValueAt(i,6).toString());
                            pstmt2.setObject(8,actCode);
                            pstmt2.setString(9,jTable11.getValueAt(i,0).toString());
                             pstmt2.setString(10,opvisitid);
                           
                            pstmt2.setString(11,user);
                             pstmt2.setString(12,"false");
                            pstmt2.setString(13,glAcc);
                            pstmt2.setString(14,billNo);
                            pstmt2.setString(15,jTable11.getValueAt(i,7).toString());
                            pstmt2.executeUpdate();
                            java.sql.Statement pstm121t = connectDB.createStatement();
                             java.sql.ResultSet rse121t = pstm121t.executeQuery("select activity from pb_activity where code ='"+actCode+"'");
                                    while (rse121.next()){
                                        
                                        glAcc = rse121t.getObject(1).toString();
                                    }
                                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                                        //1 for (int i = 0; i < jTable1.getRowCount(); i++){
                                        pstmt.setString(1,jTable11.getValueAt(i,1).toString());
                                        pstmt.setObject(2,jTable11.getValueAt(i,4).toString());
                                        pstmt.setString(3,"General");
                                        pstmt.setString(4,jTable11.getValueAt(i,3).toString());
                                        pstmt.setString(5,transNo);
                                        pstmt.setString(7,scheme);
                                        pstmt.setString(6,cardNo);
                                        pstmt.setString(8,cardName);
                                        pstmt.setString(9,isurer);
                                        pstmt.setString(10,expDate);
                                        pstmt.setString(11,"");
                                        pstmt.setObject(12,jTable11.getValueAt(i,6).toString());
                                        pstmt.setString(13,"0.00");
                                        pstmt.setString(14,jTable11.getValueAt(i,0).toString());
                                        pstmt.setObject(15,patientAcc);
                                        pstmt.setString(16,glAcc);
                                        pstmt.setObject(17,jTable11.getValueAt(i,5).toString());
                                        pstmt.setObject(18,staffNo);
                                        pstmt.setBoolean(19,false);
                                        pstmt.setString(20,"Billing");
                                        pstmt.setBoolean(21,false);
                                        pstmt.setString(22,AccDesc);
                                        pstmt.setString(23,opvisitid);
                                        pstmt.setString(24,user);
                                        pstmt.setString(25,billNo);
                                        pstmt.setString(26,"OP");
                                        pstmt.setString(27,"'now'");
                                        pstmt.setString(28,opvisitid);
                                        pstmt.executeUpdate();
                                        
                                        
                                        java.sql.PreparedStatement pstmt2v = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                        pstmt2v.setObject(1,actCode);
                                        pstmt2v.setString(2,glAcc);
                                        pstmt2v.setString(3,jTable11.getValueAt(i,1).toString());
                                        pstmt2v.setString(4,jTable11.getValueAt(i,2).toString());
                                        pstmt2v.setString(5,"");
                                        pstmt2v.setString(6,cardNo);
                                        pstmt2v.setString(7,cardName);
                                        pstmt2v.setString(8,"OP");
                                        pstmt2v.setString(9,jTable11.getValueAt(i,8).toString());
                                        pstmt2v.setString(10,jTable11.getValueAt(i,3).toString());
                                        pstmt2v.setString(11,"");
                                        pstmt2v.setString(12,"");
                                        pstmt2v.setString(13,"");
                                        pstmt2v.setString(14,jTable11.getValueAt(i,4).toString());
                                        pstmt2v.setString(15,"Revenue");
                                        pstmt2v.setString(16,"0.00");
                                        pstmt2v.setObject(17,jTable11.getValueAt(i,6).toString());
                                        pstmt2v.setString(18,jTable11.getValueAt(i,0).toString());
                                        pstmt2v.setString(19,transNo);
                                        pstmt2v.setString(20,"false");
                                        pstmt2v.setString(21,"false");
                                        pstmt2v.setString(22,"false");
                                        pstmt2v.setString(23,user);
                                        pstmt2v.executeUpdate();
                                    //}
                             java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request SET paid = true,collected = false where inv_no = '"+jTable11.getValueAt(jTable11.getSelectedRow(),7).toString()+"' AND service = '"+jTable11.getValueAt(jTable11.getSelectedRow(),4).toString()+"'");
                    pstmt46.executeUpdate();
           // }     
                    }
                }
                
                }
               // }
                
                javax.swing.JOptionPane.showMessageDialog(this,"Insert Successful","Confirmation Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                
            //}
            connectDB.commit();
            connectDB.setAutoCommit(true);
            
           
            
            
           
          
              
            
            
            
            
            
            
           
        }catch(java.sql.SQLException sq){
            
            try {
                connectDB.rollback();
            }catch (java.sql.SQLException sql){
                javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this,sq.getMessage(), "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            
        }
            
            
                    for (int k = 0; k < jTable11.getRowCount(); k++ ) {
            for (int r = 0; r < jTable11.getColumnCount(); r++ ) {
                jTable11.getModel().setValueAt(null,k,r);
            }
        }
                 int j = 0;
        int i = 0;
        int n = 0;
         int k = 0;
        try {
            
            // for (int l = 0; l < listofDays.length; l++) {
            
            java.sql.Statement stmtTable1 = connectDB.createStatement();
            
            java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select trans_date,patient_no,patient_name,payment_mode,service,quantity,amount,inv_no,doctor,'false' as bill,bed_no,curr_date::time(0) from pb_doctors_request where revenue_code ilike 'lab%' and paid = false AND collected = false and trans_date>=current_date -1 ORDER BY trans_date asc");
            
            
            while (rsetTable1.next()) {
                
                jTable11.setValueAt(rsetTable1.getObject(1), i, 0);
                jTable11.setValueAt(rsetTable1.getObject(2), i, 1);
                jTable11.setValueAt(rsetTable1.getObject(3), i, 2);
                jTable11.setValueAt(rsetTable1.getObject(4), i, 3);
                jTable11.setValueAt(rsetTable1.getObject(5), i, 4);
                jTable11.setValueAt(rsetTable1.getObject(6), i, 5);
                jTable11.setValueAt(rsetTable1.getObject(7), i, 6);
                 jTable11.setValueAt(rsetTable1.getObject(8), i, 7);
                   jTable11.setValueAt(rsetTable1.getObject(9), i, 8);
                  jTable11.setValueAt(java.lang.Boolean.valueOf(false), i, 9);
                   jTable11.setValueAt(rsetTable1.getObject(11), i, 10);
                   jTable11.setValueAt(rsetTable1.getObject(12), i, 11);
               
                
                i++;
                
            }
            
         java.sql.Statement stmtTable11 = connectDB.createStatement();
            
            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("select trans_date,patient_no,patient_name,payment_mode,service,quantity,amount,inv_no,doctor,'false' as bill,bed_no,curr_date::time(0) from pb_doctors_request where revenue_code ilike 'ext%' and paid = false AND collected = false and trans_date>=current_date -1 ORDER BY trans_date asc");
            
            
            while (rsetTable11.next()) {
                
                jTable111.setValueAt(rsetTable11.getObject(1), k, 0);
                jTable111.setValueAt(rsetTable11.getObject(2), k, 1);
                jTable111.setValueAt(rsetTable11.getObject(3), k, 2);
                jTable111.setValueAt(rsetTable11.getObject(4), k, 3);
                jTable111.setValueAt(rsetTable11.getObject(5), k, 4);
                jTable111.setValueAt(rsetTable11.getObject(6), k, 5);
                jTable111.setValueAt(rsetTable11.getObject(7), k, 6);
                 jTable111.setValueAt(rsetTable11.getObject(8), k, 7);
                   jTable111.setValueAt(rsetTable11.getObject(9), k, 8);
                  jTable111.setValueAt(java.lang.Boolean.valueOf(false), k, 9);
                   jTable111.setValueAt(rsetTable11.getObject(11), k, 10);
                   jTable111.setValueAt(rsetTable11.getObject(12), k, 11);
               
                
                k++;
                
            }
           
            
        } catch(java.sql.SQLException sqlExec) {
            
            sqlExec.printStackTrace();
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
            
        }          // Add your handling code here:
    }//GEN-LAST:event_jTable11MouseClicked

    private void jSearchTable211MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable211MouseClicked
           // jTextField1.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
        jTextField91.setText(jSearchTable211.getValueAt(jSearchTable211.getSelectedRow(), 0).toString());
        jTextField3.setText(jSearchTable211.getValueAt(jSearchTable211.getSelectedRow(), 1).toString());
         jTextField10.setText(jSearchTable211.getValueAt(jSearchTable211.getSelectedRow(), 2).toString());
        jTextField911.setText(jSearchTable211.getValueAt(jSearchTable211.getSelectedRow(), 0).toString());
     
         for (int k = 0; k < jTable1.getRowCount(); k++ ) {
                for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                    jTable1.getModel().setValueAt(null,k,r);
                }
            }
             for (int m = 0; m < jTable2.getRowCount(); m++ ) {
                for (int j = 0; j < jTable2.getColumnCount(); j++ ) {
                    jTable2.getModel().setValueAt(null,m,j);
                }
            }
        this.jSearchDialog21.dispose();
        int i = 0;
        if(this.jTextField10.getText().toLowerCase().startsWith("t")){
             this.jPanel11.setVisible(true);
        this.jPanel7.setVisible(false);
            try {
                java.sql.Statement stmt = connectDB.createStatement();
                
                
                java.sql.Statement stmtTable1 = connectDB.createStatement();
                
                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT typeof_test,units,lower_limit,upper_limit FROM pb_lab_standards where test = '"+this.jTextField91.getText()+"' and status = true");
                
                while (rsetTable1.next()) {
                    
                    System.out.println("Working at table row "+i);
                    jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                    jTable1.setValueAt(rsetTable1.getObject(2), i, 2);
                    jTable1.setValueAt(rsetTable1.getObject(3), i, 3);
                    jTable1.setValueAt(rsetTable1.getObject(4), i, 4);
                    
                    
                    i++;
                    
                    //                i = i + i;
                    //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                }
                
                
            } catch(java.sql.SQLException sqlExec) {
                
                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
                
            }
        }else{
            try {
                 this.jPanel7.setVisible(true);
        this.jPanel11.setVisible(false);
                java.sql.Statement stmt = connectDB.createStatement();
                
                
                java.sql.Statement stmtTable1 = connectDB.createStatement();
                
                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT typeof_test,status FROM pb_lab_standards where test = '"+this.jTextField91.getText()+"' and status = false");
                
                while (rsetTable1.next()) {
                    
                    System.out.println("Working at table row "+i);
                    jTable2.setValueAt(rsetTable1.getObject(1), i, 0);
                   // jTable2.setValueAt(rsetTable1.getObject(2), i, 1);
                    //  jTable2.setValueAt(rsetTable1.getObject(3), i, 2);
                    //jTable1.setValueAt(rsetTable1.getObject(4), i, 3);
                    
                    
                    i++;
                    
                    //                i = i + i;
                    //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                }
                
                
            } catch(java.sql.SQLException sqlExec) {
                
                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
                
            }
        }  // Add your handling code here:
    }//GEN-LAST:event_jSearchTable211MouseClicked

    private void jButton5211ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5211ActionPerformed
       this.jSearchDialog211.dispose();  // Add your handling code here:
    }//GEN-LAST:event_jButton5211ActionPerformed

    private void jTextField11311CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11311CaretUpdate
                 jSearchTable211.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT distinct dr.service as test,pb.specimen as name,pb.status as status from pb_lab_standards pb ,pb_doctors_request dr where dr.service ILIKE '"+jTextField11311.getText()+"%' and collected =false and patient_no = '"+jTextField9.getText()+"' and dr.service = pb.test order by dr.service"));
          
             //   searchRowSet211.execute("SELECT distinct test,specimen as name,status from pb_lab_standards where test ILIKE '"+jTextField11311.getText()+"%' order by test");
               // searchRowSet211.execute("SELECT distinct dr.service as test,pb.specimen as name,pb.status as status from pb_lab_standards pb ,pb_doctors_request dr where dr.service ILIKE '"+jTextField11311.getText()+"%' and collected =false and patient_no = '"+jTextField9.getText()+"' and dr.service = pb.test order by dr.service");
               
                jSearchTable211.setShowHorizontalLines(false);
                jSearchScrollPane211.setViewportView(jSearchTable211);
                
                
             // Add your handling code here:
    }//GEN-LAST:event_jTextField11311CaretUpdate

    private void searchButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton11ActionPerformed
       searchButtonClicked211();  // Add your handling code here:
    }//GEN-LAST:event_searchButton11ActionPerformed
 private void searchButtonClicked211() {
        
        System.out.println("Showing dialog");
        
        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.jTextField911.getLocationOnScreen();
        
        jSearchDialog211.setSize(400,200);
        
        jSearchDialog211.setLocation(point);
        
        jSearchDialog211.show();
        
        
        
    }
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
      jSearchDialog.dispose();      // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
     if (jTable1.getSelectedColumn() == 0) {
            
            this.cmboxMouseClicked2();
        }       // Add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
if(this.jPanel11.isVisible()){
       // if(this.jCheckBox1.isSelected()){
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),0),jTable1.getSelectedRow(), 0);
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),1),jTable1.getSelectedRow(), 3);
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),2),jTable1.getSelectedRow(), 4);
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),3),jTable1.getSelectedRow(), 2);

}else{
  jTable2.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),0),jTable2.getSelectedRow(), 0);
        
}
        jSearchDialog.dispose();           // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked

    private void jTextField11CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11CaretUpdate
if(this.jPanel11.isVisible()){
        if(jTextField11.getCaretPosition() < 3){
                
                System.out.println("Nothing");
            }else{
       // try {
              jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select typeof_test ,lower_limit,upper_limit,units FROM pb_lab_test WHERE typeof_test ILIKE '"+jTextField11.getText()+"%' and status = true order by typeof_test"));
         
            
           
            jSearchScrollPane.setViewportView(jSearchTable);
            System.out.println("Cannot sort out");
      
 }
}else{
     if(jTextField11.getCaretPosition() < 3){
                
                System.out.println("Nothing");
            }else{
             jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select typeof_test  FROM pb_lab_test WHERE typeof_test ILIKE '"+jTextField11.getText()+"%' AND  status = false order by typeof_test"));
         
              
           
            jSearchScrollPane.setViewportView(jSearchTable);
            System.out.println("Cannot sort out");
        
            }  
 }        // Add your handling code here:
    }//GEN-LAST:event_jTextField11CaretUpdate
private void cmboxMouseClicked2() {
        
        System.out.println("Showing dialog");
        java.awt.Point point = jTable2.getLocationOnScreen();
        jSearchDialog.setSize(400,200);
        jSearchDialog.setLocation(point);
        jSearchDialog.show();
    }
    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked

        if (jTable2.getSelectedColumn() == 0) {
            
            this.cmboxMouseClicked2();
        }         // Add your handling code here:
    }//GEN-LAST:event_jTable2MouseClicked
            
    private void jButton521ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton521ActionPerformed
        this.jSearchDialog21.dispose();   // Add your handling code here:
    }//GEN-LAST:event_jButton521ActionPerformed
    
    private void jSearchTable21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable21MouseClicked
        // jTextField1.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
        jTextField91.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 0).toString());
        jTextField3.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 1).toString());
      //   jTextField10.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 2).toString());
      
         for (int k = 0; k < jTable1.getRowCount(); k++ ) {
                for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                    jTable1.getModel().setValueAt(null,k,r);
                }
            }
             for (int m = 0; m < jTable2.getRowCount(); m++ ) {
                for (int j = 0; j < jTable2.getColumnCount(); j++ ) {
                    jTable2.getModel().setValueAt(null,m,j);
                }
            }
        this.jSearchDialog21.dispose();
        
         try {
            java.sql.Statement stmt = connectDB.createStatement();
          java.sql.Statement stmtTable1 = connectDB.createStatement();
                
                java.sql.ResultSet rset = stmtTable1.executeQuery("SELECT status FROM pb_lab_standards where test = '"+this.jTextField91.getText()+"'");
                  
            while (rset.next()){
                
                jTextField10.setText(rset.getObject(1).toString());
                      }
        } catch(java.sql.SQLException sqlExec) {
                
                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
                
            }
        int i = 0;
        if(this.jTextField10.getText().toLowerCase().startsWith("t")){
             this.jPanel11.setVisible(true);
        this.jPanel7.setVisible(false);
            try {
                java.sql.Statement stmt = connectDB.createStatement();
                
                
                java.sql.Statement stmtTable1 = connectDB.createStatement();
                
                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT typeof_test,units,lower_limit,upper_limit FROM pb_lab_standards where test = '"+this.jTextField91.getText()+"' and status = true order by oid asc");
                
                while (rsetTable1.next()) {
                    
                    System.out.println("Working at table row "+i);
                    jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                    jTable1.setValueAt(rsetTable1.getObject(2), i, 2);
                    jTable1.setValueAt(rsetTable1.getObject(3), i, 3);
                    jTable1.setValueAt(rsetTable1.getObject(4), i, 4);
                    
                    
                    i++;
                    
                    //                i = i + i;
                    //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                }
                
                
            } catch(java.sql.SQLException sqlExec) {
                
                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
                
            }
        }else{
            try {
                 this.jPanel7.setVisible(true);
        this.jPanel11.setVisible(false);
                java.sql.Statement stmt = connectDB.createStatement();
                
                
                java.sql.Statement stmtTable1 = connectDB.createStatement();
                
                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT typeof_test,status FROM pb_lab_standards where test = '"+this.jTextField91.getText()+"' and status = false");
                
                while (rsetTable1.next()) {
                    
                    System.out.println("Working at table row "+i);
                    jTable2.setValueAt(rsetTable1.getObject(1), i, 0);
                   // jTable2.setValueAt(rsetTable1.getObject(2), i, 1);
                    //  jTable2.setValueAt(rsetTable1.getObject(3), i, 2);
                    //jTable1.setValueAt(rsetTable1.getObject(4), i, 3);
                    
                    
                    i++;
                    
                    //                i = i + i;
                    //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                }
                
                
            } catch(java.sql.SQLException sqlExec) {
                
                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
                
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable21MouseClicked
    
    private void jTextField1131CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1131CaretUpdate
                  jSearchTable21.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT distinct test,specimen as name from pb_lab_standards where test ILIKE '"+jTextField1131.getText()+"%' order by test"));
          
             //   searchRowSet21.execute("SELECT distinct test,specimen as name,status from pb_lab_standards where test ILIKE '"+jTextField1131.getText()+"%' order by test");
                
                
             //   jSearchTable21.setShowHorizontalLines(false);
                jSearchScrollPane21.setViewportView(jSearchTable21);
                
                
            
        
        // Add your handling code here:
    }//GEN-LAST:event_jTextField1131CaretUpdate
    
    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        searchButtonClicked21(); // Add your handling code here:
    }//GEN-LAST:event_searchButton1ActionPerformed
    // Add your handling code here:
    
    private void searchButtonClicked21() {
        
        System.out.println("Showing dialog");
        
        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.jTextField91.getLocationOnScreen();
        
        jSearchDialog21.setSize(400,200);
        
        jSearchDialog21.setLocation(point);
        
        jSearchDialog21.show();
        
        
        
    }
    private void jSearchTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2MouseClicked
        jTextField1.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
        jTextField9.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0).toString());
        this.jSearchDialog2.dispose();
        if(this.jCheckBox11.isSelected()){
            try {
                
                
                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode,year_of_birth,sex from hp_patient_register where patient_no  ='"+jTextField9.getText()+"'");
                while (rset1.next()){
                    jTextField2.setText(rset1.getObject(2).toString());
                     jTextField5.setText(rset1.getObject(3).toString());
                      jTextField7.setText(rset1.getObject(4).toString());
                   
                    // jTextField7.setText(rset1.getObject(2).toString());
                }
            } catch (java.sql.SQLException sqe) {
                sqe.printStackTrace();
                //  System.out.println("Insert not successful");
            }
        }else{
            
            try {
                
                
                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode,year_of_birth,sex from hp_inpatient_register where patient_no  ='"+jTextField9.getText()+"'");
                while (rset1.next()){
                    jTextField2.setText(rset1.getObject(2).toString());
                     jTextField5.setText(rset1.getObject(3).toString());
                      jTextField7.setText(rset1.getObject(4).toString());
                   
                   
                    //  jTextField7.setText(rset1.getObject(2).toString());
                }
            } catch (java.sql.SQLException sqe) {
                sqe.printStackTrace();
                //  System.out.println("Insert not successful");
            }
        }        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable2MouseClicked
    
    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed
        this.jSearchDialog2.dispose();   // Add your handling code here:
    }//GEN-LAST:event_jButton52ActionPerformed
    
    private void jTextField113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField113CaretUpdate
        if(this.jCheckBox11.isSelected() && this.jCheckBox3.isSelected()){
            
            if(jTextField113.getCaretPosition() < 3){
                System.out.println("Nothing");
            }else{
                        jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT patient_no, (upper(second_name||' '||first_name)) as name, year_of_birth, residence from hp_patient_register where patient_no ILIKE '%"+jTextField113.getText()+"%' and last_visit > current_date - 10 order by second_name"));
          
                    
                     
                    jSearchTable2.setShowHorizontalLines(false);
                    jSearchScrollPane2.setViewportView(jSearchTable2);
                    
                    
               
            }
        }else{
            if(this.jCheckBox11.isSelected() && this.jCheckBox4.isSelected()){
                if(jTextField113.getCaretPosition() < 3){
                    System.out.println("Nothing");
                }else{
                               jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT patient_no, (upper(second_name||' '||first_name)) as name, year_of_birth, residence from hp_patient_register where second_name||' '||first_name ILIKE '%"+jTextField113.getText()+"%' and last_visit > current_date - 10 order by second_name"));
          
                     
                        jSearchTable2.setShowHorizontalLines(false);
                        jSearchScrollPane2.setViewportView(jSearchTable2);
                        
                        
                    }
                }
            }
        
        // }else{
        if(this.jCheckBox21.isSelected() && this.jCheckBox3.isSelected()){
            
            // if(this.jCheckBox21.isSelected()){
            //   if( jTextField113.getCaretPosition() > 3){
            
            if(jTextField113.getCaretPosition() < 3){
                System.out.println("Nothing");
            }else{
                           jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT patient_no, (upper(second_name||' '||first_name)) as name from hp_inpatient_register where patient_no ILIKE '"+jTextField113.getText()+"%' order by second_name"));
          
                   // searchRowSet2.execute("SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name from hp_inpatient_register where patient_no ILIKE '"+jTextField113.getText()+"%' order by second_name");
                  
                    jSearchTable2.setShowHorizontalLines(false);
                    jSearchScrollPane2.setViewportView(jSearchTable2);
                    
                    
                
            }
        }else{
            if(this.jCheckBox21.isSelected() && this.jCheckBox4.isSelected()){
                         jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT patient_no, (upper(second_name||' '||first_name)) as name, year_of_birth, residence from hp_inpatient_register where second_name||' '||first_name ILIKE '%"+jTextField113.getText()+"%' order by second_name"));
          
                 
                    jSearchTable2.setShowHorizontalLines(false);
                    jSearchScrollPane2.setViewportView(jSearchTable2);
                    
                    
               
            }
        }        // Add your handling code here:
    }//GEN-LAST:event_jTextField113CaretUpdate
    
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchButtonClicked2();         // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed
    private void searchButtonClicked2() {
        
        System.out.println("Showing dialog");
        
        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.jTextField9.getLocationOnScreen();
        
        jSearchDialog2.setSize(400,200);
        
        jSearchDialog2.setLocation(point);
        
        jSearchDialog2.show();
        
        
        
    }
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
if(this.jPanel11.isVisible()){
        int rows2Delete = jTable1.getSelectedRowCount();
        
        int[] selectedRows = jTable1.getSelectedRows();
        
        if (rows2Delete < 1) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            
            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");
            
        } else {
            
            if (rows2Delete > 1) {
                
                for (int i = 0; i < selectedRows.length; i++) {
                    
                    
                    
                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable1.getModel();
                    
                    defTableModel.removeRow(selectedRows[i]);
                    
                }
                
                
                
            } else {
                
                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable1.getModel();
                
                defTableModel.removeRow(jTable1.getSelectedRow());
            }
        } 
}else{
     int rows2Delete = jTable2.getSelectedRowCount();
        
        int[] selectedRows = jTable2.getSelectedRows();
        
        if (rows2Delete < 1) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            
            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");
            
        } else {
            
            if (rows2Delete > 1) {
                
                for (int i = 0; i < selectedRows.length; i++) {
                    
                    
                    
                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable2.getModel();
                    
                    defTableModel.removeRow(selectedRows[i]);
                    
                }
                
                
                
            } else {
                
                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable2.getModel();
                
                defTableModel.removeRow(jTable2.getSelectedRow());
            }
        }   
}// Add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed
    private void cmboxActionPerformed(java.awt.event.ActionEvent evt){
        int i = jTable1.getSelectedRow();
        
    }
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.getContentPane().removeAll();
        this.initComponents();
        // Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
                javax.swing.JFrame other = new Labresults(connectDB, pConnDB);
            other.setVisible(true);  // Add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        java.util.Calendar calendar = java.util.Calendar.getInstance();
        
        long dateNow = calendar.getTimeInMillis();
        
        java.sql.Date datenowSql1= new java.sql.Date(dateNow);
        
        System.out.println(datenowSql1.toString());
        
        java.sql.Timestamp datenowSql= new java.sql.Timestamp(dateNow);
        
        System.out.println(datenowSql.toString());
        String user = null;
        String cat = null;
        
       if(this.jPanel11.isVisible()){
            cat = "OP";
        }else{
            cat = "IP";
        }
         if(jTextField8.getText()=="" || jTextField8.getText()== null){
                           java.awt.Toolkit.getDefaultToolkit().beep();
            
            javax.swing.JOptionPane.showMessageDialog(this, "Lab No Missing!");
                          }else{
        
        try {
            
             if(jTextField12.getText()==""){
                           java.awt.Toolkit.getDefaultToolkit().beep();
            
            javax.swing.JOptionPane.showMessageDialog(this, "Specimen Time Missing!");
                          }else{
             connectDB.setAutoCommit(false);
            java.sql.Statement stm121 = connectDB.createStatement();
            java.sql.ResultSet rse121 = stm121.executeQuery("select current_user");
            while (rse121.next()){
                
                // glAcc = rse121.getObject(1).toString();
                user = rse121.getObject(1).toString();
            }
            
           
                           
            if(this.jPanel11.isVisible()){
                for (int i = 0; i < jTable1.getRowCount(); i++){
                    if (jTable1.getModel().getValueAt(i,0) != null){
                          java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("UPDATE pb_doctors_request set collected = true WHERE service = '"+jTable1.getValueAt(i,0).toString()+"' and patient_no ='"+jTextField9.getText()+"'");
                        pstmt31.executeUpdate();
                        java.sql.PreparedStatement pstmt21 = connectDB.prepareStatement("insert into hp_lab_results values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?)");
                        if(jTextField9.getText()=="" || jTextField9.getText()== null){
                            pstmt21.setString(1,jTextField8.getText());
                        }else{
        
                        pstmt21.setString(1,jTextField9.getText());
                        }
                        
                        pstmt21.setString(2,jTextField1.getText());
                        pstmt21.setString(3,jTextField8.getText());
                        pstmt21.setString(4,jTextField5.getText());
                        pstmt21.setString(5,jTextField7.getText());
                        pstmt21.setString(8,jTable1.getValueAt(i,2).toString());
                        // pstmt21.setString(6,jTable1.getValueAt(i,0).toString());
                        pstmt21.setString(6,jTextField91.getText());
                        pstmt21.setString(7,jTable1.getValueAt(i,0).toString());
                        //pstmt21.setString(10,jTable1.getValueAt(i,0).toString());
                        pstmt21.setString(10,jTable1.getValueAt(i,3).toString());
                        
                        pstmt21.setString(13,datePicker1.getDate().toString());
                    
                        pstmt21.setObject(9,jTable1.getValueAt(i,4).toString());
                        pstmt21.setString(18,jComboBox2.getSelectedItem().toString());
                        pstmt21.setString(11,jTable1.getValueAt(i,1).toString());
                          pstmt21.setString(12,jTable1.getValueAt(i,1).toString());
                       
                        pstmt21.setString(20,user);
                        pstmt21.setString(17,jComboBox3.getSelectedItem().toString());
                        pstmt21.setString(14,"'now'");
                        pstmt21.setString(16,jTextField2.getText());
                        pstmt21.setString(15,jTextField4.getText());
                       // pstmt21.setString(18," ");
                        // pstmt21.setString(20,jTable1.getValueAt(i,0).toString());
                        pstmt21.setString(19,jEditorPane1.getText());
                          pstmt21.setString(21,jComboBox1.getSelectedItem().toString());
                          pstmt21.setString(22,"false");
                          pstmt21.setString(23,"false");
                    
                             pstmt21.setString(24,jTextField12.getText());
                     
                        pstmt21.executeUpdate();
                    }
                }
            }else{
                
                
                for (int i = 0; i < jTable2.getRowCount(); i++){
                    if (jTable2.getModel().getValueAt(i,0) != null){
                        java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("UPDATE pb_doctors_request set collected = true WHERE service = '"+jTable2.getValueAt(i,0).toString()+"' and patient_no ='"+jTextField9.getText()+"'");
                        pstmt31.executeUpdate();
                        java.sql.PreparedStatement pstmt21 = connectDB.prepareStatement("insert into hp_lab_results values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?)");
                           
                   if(jTextField9.getText()=="" || jTextField9.getText()== null){
                            pstmt21.setString(1,jTextField8.getText());
                        }else{
        
                        pstmt21.setString(1,jTextField9.getText());
                        }
                       // pstmt21.setString(1,jTextField9.getText());
                        //pstmt21.setString(10,"");
                        
                        pstmt21.setString(2,jTextField1.getText());
                        pstmt21.setString(3,jTextField8.getText());
                        pstmt21.setString(4,jTextField5.getText());
                        pstmt21.setString(5,jTextField7.getText());
                        pstmt21.setString(8,"-");
                        // pstmt21.setString(6,jTable1.getValueAt(i,0).toString());
                        pstmt21.setString(6,jTextField91.getText());
                        pstmt21.setString(7,jTable2.getValueAt(i,0).toString());
                        //pstmt21.setString(10,jTable1.getValueAt(i,0).toString());
                        pstmt21.setString(10,"0");
                        
                        pstmt21.setString(13,datePicker1.getDate().toString());
                    
                        pstmt21.setObject(9,"0");
                        pstmt21.setString(18,jComboBox2.getSelectedItem().toString());
                        pstmt21.setString(11,"0");
                          pstmt21.setString(12,jTable2.getValueAt(i,1).toString());
                       
                        pstmt21.setString(20,user);
                        pstmt21.setString(17,jComboBox3.getSelectedItem().toString());
                        pstmt21.setString(14,"'now'");
                        pstmt21.setString(16,jTextField2.getText());
                        pstmt21.setString(15,jTextField4.getText());
                       // pstmt21.setString(18," ");
                        // pstmt21.setString(20,jTable1.getValueAt(i,0).toString());
                        pstmt21.setString(19,jEditorPane1.getText());
                          pstmt21.setString(21,jComboBox1.getSelectedItem().toString());
                           pstmt21.setString(22,"false");
                          pstmt21.setString(23,"false");
                             pstmt21.setString(24,jTextField12.getText());
                        pstmt21.executeUpdate();
                    }
                }
            }
            
            connectDB.commit();
            connectDB.setAutoCommit(true);
            javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully","Confirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
         //   String other1 = null;
           // other1= javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully","Confirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
        
      /*     javax.swing.JInternalFrame other = new LabPendingresultsIntfr(connectDB, pConnDB);
        this.getParent().add(other, javax.swing.JLayeredPane.DEFAULT_LAYER);
        try {
            
               //  other.javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully","Confirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
       
            other.setSelected(true);
        } catch(java.beans.PropertyVetoException pvt){}
        other.setVisible(true);  
       */
            
            for (int k = 0; k < jTable1.getRowCount(); k++ ) {
                for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
                    jTable1.getModel().setValueAt(null,k,r);
                }
            }
             for (int m = 0; m < jTable2.getRowCount(); m++ ) {
                for (int j = 0; j < jTable2.getColumnCount(); j++ ) {
                    jTable2.getModel().setValueAt(null,m,j);
                }
            }
                          }
            
            //  jComboBox2.setSelectedItem(null);
        }catch(java.sql.SQLException sq){
            
            try {
                connectDB.rollback();
            }catch (java.sql.SQLException sql){
                javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this,sq.getMessage(), "Error",javax.swing.JOptionPane.ERROR_MESSAGE);
            
        } 
                          }// Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
        private class SearchThread extends java.lang.Thread {
        
        public void SearchThread(){}
        
        public void run(){
            
            searchNames();
            
        }
        
    }
    private class SearchServicesThread extends java.lang.Thread {
        
        public void SearchServicesThread(){}
        
        public void run(){
            
            searchServices();
            
        }
        
    }
    
    public void searchNames(){
        int j = 0;
        int i = 0;
    }
 public void run() {
        
        while(getList) {
            
            runGetListThread();
            
            try {
                
                Thread.currentThread().sleep(10000);
                
            } catch(java.lang.InterruptedException IntExec){
                
                javax.swing.JOptionPane.showMessageDialog(this, IntExec.getMessage(), "Interruption Error!", javax.swing.JOptionPane.ERROR_MESSAGE);
                
            }
            
            // getList = false;
            
        }
        
    }
    
    public void runGetListThread() {
        String labNo= null; 
         String patientNo= null; 
        int j = 0;
        int i = 0;
        int n = 0;
        int patNo = 0;
       int Total1 =0;
       int Total =0;
       int labNo1 = 0;
       
       
       
       // String labNo= null; 
        // String patientNo= null; 
       // int j = 0;
       // int i = 0;
       // int n = 0;
      //  int patNo = 0;
      // int Total1 =0;
      // int Total =0;
      /// int labNo1 = 0;
        try {
               java.sql.Statement stmtTable113 = connectDB.createStatement();
            
            java.sql.ResultSet rsetTable113 = stmtTable113.executeQuery("select count(distinct lab_no) from hp_lab_results where doc_read = false  and result_shown = false AND date >='"+datePicker11.getDate().toString()+"' and lab_no !='null' and lab_no is not null");
         
              while (rsetTable113.next()) {
                labNo1 = rsetTable113.getInt(1);
                        System.out.println("Lab no is "+labNo1);
            }   
            
            if(labNo1>0){
              java.sql.Statement stmtTable112 = connectDB.createStatement();
            
            java.sql.ResultSet rsetTable112 = stmtTable112.executeQuery("select distinct lab_no,patient_name from hp_lab_results where doc_read = false and result_shown = false AND date >='"+datePicker11.getDate().toString()+"' and lab_no is not null and lab_no !='null' order by lab_no desc limit 1 ");
            
            
             while (rsetTable112.next()) {
                labNo = rsetTable112.getString(1);
                patientNo = rsetTable112.getString(2);
                System.out.println("Lab no2 is "+patientNo);
            }    
            }else{
            }
            
            // for (int l = 0; l < listofDays.length; l++) {
              java.sql.Statement stmtTable11 = connectDB.createStatement();
            
            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("select count(distinct lab_no) from hp_lab_results where doc_read = false  AND date >='"+datePicker11.getDate().toString()+"'");
            
            
             while (rsetTable11.next()) {
                patNo = rsetTable11.getInt(1);
                
            }    
                
              //   jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select distinct date,patient_no,patient_name,lab_no,doc_read from hp_lab_results where doc_read = false AND date >='"+datePicker1.getDate().toString()+"'  ORDER BY date,lab_no"));
                    
            
            java.sql.Statement stmtTable1 = connectDB.createStatement();
            
            java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select distinct date,patient_no,patient_name,lab_no,doc_read from hp_lab_results where doc_read = false AND date >='"+datePicker11.getDate().toString()+"'  ORDER BY date,lab_no");
            
            
            while (rsetTable1.next()) {
                
                jTable12.setValueAt(rsetTable1.getObject(1), i, 0);
                jTable12.setValueAt(rsetTable1.getObject(2), i, 1);
                jTable12.setValueAt(rsetTable1.getObject(3), i, 2);
                jTable12.setValueAt(rsetTable1.getObject(4), i, 3);
               jTable12.setValueAt(rsetTable1.getObject(5), i, 4);
               
                i++;
               
            }
                   
            //}
            
             
            
        } catch(java.sql.SQLException sqlExec) {
            
            sqlExec.printStackTrace();
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
            
        }
        
     if(patNo >5){
            
          this.jLabel18.setText("You Have '"+patNo+"' Results  Unread"); 
              this.jLabel18.setForeground(new java.awt.Color(255,0,51));
        }else{
                   this.jLabel18.setText("You Have '"+patNo+"' Results  Unread");   
    
               
               this.jLabel18.setForeground(new java.awt.Color(51,51,255));
        }
       
       //for(patNo=0;patNo>i;patNo++){
       
     //  if(patNo>=patNo+1){
       
       // if(labNo.equalsIgnoreCase(null)){
            
       // }else{
           
  
         
       
    
       
       
       
       
       
       
      String DiscNo= null;
         String DiscName= null;
        
        //int DiscNo = 0;
      
       int Disch1 = 0;
        try {
               java.sql.Statement stmtTable113 = connectDB.createStatement();
  
            java.sql.ResultSet rsetTable113 = stmtTable113.executeQuery("select count(patient_no) from hp_pending_discharge where disc_read = false  ");
  
              while (rsetTable113.next()) {
                Disch1 = rsetTable113.getInt(1);
                        System.out.println("Lab no is "+Disch1);
            }
  
            if(Disch1>0){
              java.sql.Statement stmtTable112 = connectDB.createStatement();
  
            java.sql.ResultSet rsetTable112 = stmtTable112.executeQuery("select distinct patient_no,patient_name from hp_pending_discharge where disc_read = false  ");
  
  
             while (rsetTable112.next()) {
                DiscNo = rsetTable112.getString(1);
                DiscName = rsetTable112.getString(2);
                System.out.println("Pat no2 is "+DiscNo);
            }
            }else{
            }
  
            
  
  
        } catch(java.sql.SQLException sqlExec) {
  
            sqlExec.printStackTrace();
  
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
  
        }
  
  
  
  
  if(Disch1>0){
       java.awt.Toolkit.getDefaultToolkit().beep();
              javax.swing.JOptionPane.showMessageDialog(this, "Patient No. '"+DiscNo+"' Name '"+DiscName+"' has been Discharged \n Speed up Discharge process at your station","Information Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
  
    try {
  
                    java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE hp_pending_discharge SET disc_read = true where patient_no = '"+labNo+"'");
                    pstmt46.executeUpdate();
  
  
                } catch(java.sql.SQLException sqlExec) {
  
                    sqlExec.printStackTrace();
  
                    javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
  
                }
        }else{
  
        }
  
  
    }
    
    public void searchServices(){
        
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jTextField6;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JButton searchButton;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JTextField jTextField61;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTable jTable111;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JCheckBox jCheckBox21;
    private javax.swing.JTextField jTextField62;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JTextField jTextField2;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JTextField jTextField113;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton jButton32;
    private com.afrisoftech.lib.DatePicker datePicker111;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JButton jButton421;
    private javax.swing.JButton searchButton1;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel211;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JTable jSearchTable21;
    private javax.swing.JTable jSearchTable211;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton jButton5211;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JTextField jTextField11311;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTable jTable11;
    private javax.swing.JTextField jTextField1131;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JPanel jPanel221;
    private javax.swing.JSeparator jSeparator121;
    private javax.swing.JButton jButton6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel2121;
    private javax.swing.JTable jTable12;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JButton jButton41;
    private javax.swing.JLabel jLabel7;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JPanel jPanel21;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private javax.swing.JScrollPane jScrollPane131;
    private javax.swing.JPanel jSearchPanel211;
    private javax.swing.JTextField jTextField911;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jSearchScrollPane21;
    private javax.swing.JTextField jTextField91;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JDialog jSearchDialog211;
    private javax.swing.JButton jButton521;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel411;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JPanel jSearchPanel21;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel241;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JButton jButton52;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton searchButton11;
    private javax.swing.JButton jButton42;
    private javax.swing.JDialog jSearchDialog21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jButton321;
    private javax.swing.JButton jButton61;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel jPanel212;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JDialog jSearchDialog2;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jSearchScrollPane211;
    private javax.swing.JTable jTable121;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JTextField jTextField4;
    private com.afrisoftech.lib.DatePicker datePicker11;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jSearchTable2;
    // End of variables declaration//GEN-END:variables
    
}
