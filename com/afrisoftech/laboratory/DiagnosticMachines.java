/*
 * Members.java
 *
 * Created on August 13, 2002, 3:36 PM
 */
package com.afrisoftech.laboratory;

import java.sql.SQLException;
//

/**
 *
 * @author root
 */
public class DiagnosticMachines extends javax.swing.JInternalFrame {

    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    private String labProcedureCode;
    private javax.swing.JComboBox cmbox56;
    private javax.swing.JComboBox cmbox5;
    private javax.swing.JComboBox cmbox6;

    public DiagnosticMachines(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jSearchDialog2 = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        jTextField113 = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        jSearchTable2 = new com.afrisoftech.dbadmin.JTable();
        jButton52 = new javax.swing.JButton();
        jSearchDialog21 = new javax.swing.JDialog();
        jSearchPanel21 = new javax.swing.JPanel();
        jTextField1131 = new javax.swing.JTextField();
        jSearchScrollPane21 = new javax.swing.JScrollPane();
        jSearchTable21 = new com.afrisoftech.dbadmin.JTable();
        jButton521 = new javax.swing.JButton();
        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton92 = new javax.swing.JButton();
        labProceduresHierarchyTabbedPane = new javax.swing.JTabbedPane();
        mainCategoryPanel = new javax.swing.JPanel();
        saveMainCategoryBtn = new javax.swing.JButton();
        editMainCategoryBtn = new javax.swing.JButton();
        clearMainCategoryBtn = new javax.swing.JButton();
        closeMainFormBtn = new javax.swing.JButton();
        mainCategoryScrollPane = new javax.swing.JScrollPane();
        machineTable = new com.afrisoftech.dbadmin.JTable();
        removeRowMainBtn = new javax.swing.JButton();
        helpMainBtn = new javax.swing.JButton();
        mainCategorySpacerLbl = new javax.swing.JLabel();
        deleteDataMainCmbx = new javax.swing.JButton();
        groupingsPanel = new javax.swing.JPanel();
        saveGroupingBtn = new javax.swing.JButton();
        editGroupingBtn = new javax.swing.JButton();
        clearGroupingBtn = new javax.swing.JButton();
        closeGroupingBtn = new javax.swing.JButton();
        groupingSpacerLbl = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        machineNameCmbx = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        machineIDTxt = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        racksTable = new com.afrisoftech.dbadmin.JTable();
        parametersHelpBtn = new javax.swing.JButton();
        parametersSpacerLabel = new javax.swing.JLabel();
        deleteGroupingBtn = new javax.swing.JButton();

        jSearchDialog2.setModal(true);
        jSearchDialog2.setUndecorated(true);
        jSearchDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        jTextField113.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField113CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel2.add(jTextField113, gridBagConstraints);

        jSearchTable2.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable2.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable2MouseClicked(evt);
            }
        });
        jSearchScrollPane2.setViewportView(jSearchTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

        jButton52.setText("Dispose");
        jButton52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton52, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog2.getContentPane().add(jSearchPanel2, gridBagConstraints);

        jSearchDialog21.setModal(true);
        jSearchDialog21.setUndecorated(true);
        jSearchDialog21.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel21.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel21.setLayout(new java.awt.GridBagLayout());

        jTextField1131.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1131CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel21.add(jTextField1131, gridBagConstraints);

        jSearchTable21.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable21.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable21MouseClicked(evt);
            }
        });
        jSearchScrollPane21.setViewportView(jSearchTable21);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel21.add(jSearchScrollPane21, gridBagConstraints);

        jButton521.setText("Dispose");
        jButton521.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton521ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel21.add(jButton521, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog21.getContentPane().add(jSearchPanel21, gridBagConstraints);

        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(jTextField111, gridBagConstraints);

        jSearchTable.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton92.setText("Dispose");
        jButton92.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton92ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton92, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Diagnostic Machine Setup");
        setFont(new java.awt.Font("SansSerif", 0, 10)); // NOI18N
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        labProceduresHierarchyTabbedPane.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        labProceduresHierarchyTabbedPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        labProceduresHierarchyTabbedPane.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        mainCategoryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter Machine details"));
        mainCategoryPanel.setLayout(new java.awt.GridBagLayout());

        saveMainCategoryBtn.setMnemonic('o');
        saveMainCategoryBtn.setText("Save data");
        saveMainCategoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMainCategoryBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainCategoryPanel.add(saveMainCategoryBtn, gridBagConstraints);

        editMainCategoryBtn.setMnemonic('e');
        editMainCategoryBtn.setText("Edit existing data");
        editMainCategoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMainCategoryBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainCategoryPanel.add(editMainCategoryBtn, gridBagConstraints);

        clearMainCategoryBtn.setMnemonic('l');
        clearMainCategoryBtn.setText("Clear form");
        clearMainCategoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearMainCategoryBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainCategoryPanel.add(clearMainCategoryBtn, gridBagConstraints);

        closeMainFormBtn.setMnemonic('c');
        closeMainFormBtn.setText("Close form");
        closeMainFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMainFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainCategoryPanel.add(closeMainFormBtn, gridBagConstraints);

        machineTable.setAutoCreateRowSorter(true);
        machineTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Machine Name", "Model", "Serial No.", "DEPARTMENT", "SECTION", "IP Address", "Port", "COMMUNICATION_TYPE", "Set_Specimen_position"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        java.lang.Object[] strCmb3 = {"HL7", "ASTM"};

        javax.swing.JComboBox cmBox3 = new javax.swing.JComboBox(strCmb3);

        cmBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //cmBox3ActionPerformed(evt);
            }
        });
        javax.swing.table.TableColumn teditor3 = this.machineTable.getColumn("COMMUNICATION_TYPE");

        teditor3.setCellEditor(new javax.swing.DefaultCellEditor(cmBox3));

        cmbox5 = new javax.swing.JComboBox();

        cmbox5.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select DISTINCT department_name from pb_departments  ORDER BY 1"));

        javax.swing.table.TableColumn seditor1 = this.machineTable.getColumn("DEPARTMENT");

        seditor1.setCellEditor(new javax.swing.DefaultCellEditor(cmbox5));

        cmbox5.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {

                //  cmbox5ActionPerformed(evt);
            }
        });

        cmbox56 = new javax.swing.JComboBox();

        cmbox56.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT category_description FROM pb_lab_maincategory ORDER BY 1"));

        javax.swing.table.TableColumn seditor16 = this.machineTable.getColumn("SECTION");

        seditor16.setCellEditor(new javax.swing.DefaultCellEditor(cmbox56));

        cmbox56.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {

                //  cmbox5ActionPerformed(evt);
            }
        });
        machineTable.setRowHeight(25);
        for (int i = 0; i < machineTable.getRowCount(); i++) {
            machineTable.setValueAt(false, i, 8);
        }
        mainCategoryScrollPane.setViewportView(machineTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 500.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainCategoryPanel.add(mainCategoryScrollPane, gridBagConstraints);

        removeRowMainBtn.setMnemonic('r');
        removeRowMainBtn.setText("Remove row");
        removeRowMainBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRowMainBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        mainCategoryPanel.add(removeRowMainBtn, gridBagConstraints);

        helpMainBtn.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainCategoryPanel.add(helpMainBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        mainCategoryPanel.add(mainCategorySpacerLbl, gridBagConstraints);

        deleteDataMainCmbx.setText("Delete data");
        deleteDataMainCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDataMainCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainCategoryPanel.add(deleteDataMainCmbx, gridBagConstraints);

        labProceduresHierarchyTabbedPane.addTab("Machine Setup", mainCategoryPanel);

        groupingsPanel.setLayout(new java.awt.GridBagLayout());

        saveGroupingBtn.setMnemonic('o');
        saveGroupingBtn.setText("Save data");
        saveGroupingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveGroupingBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        groupingsPanel.add(saveGroupingBtn, gridBagConstraints);

        editGroupingBtn.setMnemonic('e');
        editGroupingBtn.setText("Edit Racks");
        editGroupingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editGroupingBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        groupingsPanel.add(editGroupingBtn, gridBagConstraints);

        clearGroupingBtn.setMnemonic('l');
        clearGroupingBtn.setText("Clear");
        clearGroupingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearGroupingBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        groupingsPanel.add(clearGroupingBtn, gridBagConstraints);

        closeGroupingBtn.setMnemonic('c');
        closeGroupingBtn.setText("Close");
        closeGroupingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeGroupingBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        groupingsPanel.add(closeGroupingBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        groupingsPanel.add(groupingSpacerLbl, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Machine"));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Select Machine");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jLabel1, gridBagConstraints);

        machineNameCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select '-' union select  machine_name from hp_diagnostic_machine ORDER BY 1 "));
        machineNameCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                machineNameCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(machineNameCmbx, gridBagConstraints);

        jLabel6.setText("Machine ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jLabel6, gridBagConstraints);

        machineIDTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(machineIDTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        groupingsPanel.add(jPanel2, gridBagConstraints);

        jButton6.setMnemonic('r');
        jButton6.setText("Remove Row");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        groupingsPanel.add(jButton6, gridBagConstraints);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter Racks here"));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        racksTable.setAutoCreateRowSorter(true);
        racksTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Rack No"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        racksTable.setRowHeight(20);
        racksTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                racksTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(racksTable);
        if (racksTable.getColumnModel().getColumnCount() > 0) {
            racksTable.getColumnModel().getColumn(1).setResizable(false);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 500.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel5.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 500.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        groupingsPanel.add(jPanel5, gridBagConstraints);

        parametersHelpBtn.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        groupingsPanel.add(parametersHelpBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        groupingsPanel.add(parametersSpacerLabel, gridBagConstraints);

        deleteGroupingBtn.setText("Delete");
        deleteGroupingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteGroupingBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        groupingsPanel.add(deleteGroupingBtn, gridBagConstraints);

        labProceduresHierarchyTabbedPane.addTab("Machine Racks", groupingsPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(labProceduresHierarchyTabbedPane, gridBagConstraints);

        setBounds(0, 0, 1174, 495);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton92ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton92ActionPerformed
        jSearchDialog.dispose();    // Add your handling code here:
    }//GEN-LAST:event_jButton92ActionPerformed
//
    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
//        labProcedureGrooupingTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0), labProcedureGrooupingTable.getSelectedRow(), 0);
//        labProcedureGrooupingTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1), labProcedureGrooupingTable.getSelectedRow(), 1);
//        labProcedureGrooupingTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 2), labProcedureGrooupingTable.getSelectedRow(), 2);
//
//        jSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked

    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate
        jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select code,service_type,rate as price FROM pb_operating_parameters WHERE service_type ILIKE '" + jTextField111.getText() + "%' AND main_service ilike 'Lab%' order by service_type"));

        jSearchScrollPane.setViewportView(jSearchTable);
        System.out.println("Cannot sort out");   // Add your handling code here:
    }//GEN-LAST:event_jTextField111CaretUpdate
    private void cmboxMouseClicked2() {
//
//        System.out.println("Showing dialog");
//        java.awt.Point point = labProcedureGrooupingTable.getLocationOnScreen();
//        jSearchDialog.setSize(400, 200);
//        jSearchDialog.setLocation(point);
//        jSearchDialog.setVisible(true);
    }
    private void jSearchTable21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable21MouseClicked
//        specimentCodeTxt.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 0).toString());
//        specimenNameTxt.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 1).toString());
        jSearchDialog21.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable21MouseClicked

    private void jButton521ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton521ActionPerformed
        jSearchDialog21.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jButton521ActionPerformed

    private void jTextField1131CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1131CaretUpdate
        jSearchTable21.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT code,specimen from pb_lab_specimen where specimen ILIKE '" + jTextField1131.getText() + "%' order by specimen"));

        jSearchTable21.setShowHorizontalLines(false);
        jSearchScrollPane21.setViewportView(jSearchTable21);

        // Add your handling code here:
    }//GEN-LAST:event_jTextField1131CaretUpdate
    private void searchButtonClicked22() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
//        java.awt.Point point = this.specimenNameTxt.getLocationOnScreen();
//
//        jSearchDialog21.setSize(700, 200);
//
//        jSearchDialog21.setLocation(point);

        jSearchDialog21.setVisible(true);

    }
    private void jSearchTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2MouseClicked
//        procedureGroupTxt.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
//        labProcedureNameTxt.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0).toString());
//        labProcedureCode = jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 3).toString();
//        labProcedureCodeTxt.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 3).toString());
//        jSearchDialog2.dispose();    // Add your handling code here:
    }//GEN-LAST:event_jSearchTable2MouseClicked

    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed
        jSearchDialog2.dispose();         // Add your handling code here:
    }//GEN-LAST:event_jButton52ActionPerformed

    private void jTextField113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField113CaretUpdate
        //  if(this.jCheckBox1.isSelected()){

        jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT typeof_test,specimen,units,lab_procedure_code from pb_lab_test where typeof_test ILIKE '" + jTextField113.getText() + "%' order by typeof_test"));

        jSearchTable2.setShowHorizontalLines(false);
        jSearchScrollPane2.setViewportView(jSearchTable2);

        // Add your handling code here:
    }//GEN-LAST:event_jTextField113CaretUpdate
    private void searchButtonClicked2() {

//        System.out.println("Showing dialog");
//
//        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
//        java.awt.Point point = this.labProcedureNameTxt.getLocationOnScreen();
//
//        jSearchDialog2.setSize(700, 200);
//
//        jSearchDialog2.setLocation(point);
//
//        jSearchDialog2.setVisible(true);

    }
    private void closeMainFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeMainFormBtnActionPerformed
        this.setVisible(false);
        dispose();// Add your handling code here:
    }//GEN-LAST:event_closeMainFormBtnActionPerformed

    private void removeRowMainBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRowMainBtnActionPerformed

        int rows2Delete = machineTable.getSelectedRowCount();

        int[] selectedRows = machineTable.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) machineTable.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) machineTable.getModel();

                defTableModel.removeRow(machineTable.getSelectedRow());
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_removeRowMainBtnActionPerformed

    private void clearMainCategoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearMainCategoryBtnActionPerformed
        for (int k = 0; k < machineTable.getRowCount(); k++) {
            for (int r = 0; r < machineTable.getColumnCount(); r++) {
                machineTable.getModel().setValueAt(null, k, r);
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_clearMainCategoryBtnActionPerformed

    private void editMainCategoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMainCategoryBtnActionPerformed

        machineTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT machine_name, model, serial_no, department, section, ip_address,        port, type_of_communication AS COMMUNICATION_TYPE,id, set_positioning \n" +
                "  FROM hp_diagnostic_machine  ORDER BY 1"));

        saveMainCategoryBtn.setText("Update");
        
        java.lang.Object[] strCmb3 = {"HL7", "ASTM"};

        javax.swing.JComboBox cmBox3 = new javax.swing.JComboBox(strCmb3);

        cmBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                //cmBox3ActionPerformed(evt);
            }
        });
javax.swing.table.TableColumn teditor3 = this.machineTable.getColumn("COMMUNICATION_TYPE");

teditor3.setCellEditor(new javax.swing.DefaultCellEditor(cmBox3));



cmbox5 = new javax.swing.JComboBox();

        cmbox5.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select DISTINCT department_name from pb_departments  ORDER BY 1"));

        javax.swing.table.TableColumn seditor1 = this.machineTable.getColumn("DEPARTMENT");

        seditor1.setCellEditor(new javax.swing.DefaultCellEditor(cmbox5));

        cmbox5.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {

              //  cmbox5ActionPerformed(evt);
            }
        });

cmbox56 = new javax.swing.JComboBox();

        cmbox56.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT category_description FROM pb_lab_maincategory ORDER BY 1"));

        javax.swing.table.TableColumn seditor16 = this.machineTable.getColumn("SECTION");

        seditor16.setCellEditor(new javax.swing.DefaultCellEditor(cmbox56));

        cmbox56.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {

              //  cmbox5ActionPerformed(evt);
            }
        });
    }//GEN-LAST:event_editMainCategoryBtnActionPerformed

    private void saveMainCategoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMainCategoryBtnActionPerformed
        if (machineTable.getModel().getValueAt(0, 0) != null) {

            try {
                if (saveMainCategoryBtn.getText().contains("Save data")) {
                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO hp_diagnostic_machine( machine_name, model, serial_no, department, section, ip_address, \n" +
"            port, type_of_communication,set_positioning) VALUES (?, ?, ?, ?, ?, ?, ?,  ?,?); ");

                    for (int i = 0; i < machineTable.getRowCount(); i++) {
                        if (machineTable.getModel().getValueAt(i, 0) != null) {

                            pstmt.setObject(1, machineTable.getValueAt(i, 0).toString());
                            pstmt.setObject(2, machineTable.getValueAt(i, 1).toString());
                            pstmt.setObject(3, machineTable.getValueAt(i, 2));
                            pstmt.setObject(4, machineTable.getValueAt(i, 3));
                            pstmt.setObject(5, machineTable.getValueAt(i, 4));
                            pstmt.setObject(6, machineTable.getValueAt(i, 5));
                            pstmt.setObject(7, machineTable.getValueAt(i, 6));
                            pstmt.setObject(8, machineTable.getValueAt(i, 7));
                            pstmt.setBoolean(9, Boolean.valueOf(machineTable.getValueAt(i, 8).toString()));
                            

                            pstmt.executeUpdate();
                        }
                    }
                    // pstmt.executeUpdate();
                    javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully", "Confirmation", javax.swing.JOptionPane.INFORMATION_MESSAGE);

//                crset1.execute();
                    for (int k = 0; k < machineTable.getRowCount(); k++) {
                        for (int r = 0; r < machineTable.getColumnCount(); r++) {
                            machineTable.getModel().setValueAt(null, k, r);
                        }
                    }
                } else {
                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("UPDATE hp_diagnostic_machine   SET machine_name=?, model=?, "
                        + "serial_no=?, department=?, section=?,  ip_address=?, port=?, type_of_communication=?,set_positioning=? WHERE id=?");
                    
                    java.sql.PreparedStatement pstmtx = connectDB.prepareStatement("UPDATE hp_diagnostic_machine_racks   SET  machine_name=?  WHERE machine_id=?");

                    for (int i = 0; i < machineTable.getRowCount(); i++) {
                        if (machineTable.getModel().getValueAt(i, 0) != null) {

                            pstmt.setObject(1, machineTable.getValueAt(i, 0).toString());
                            pstmt.setObject(2, machineTable.getValueAt(i, 1).toString());
                            pstmt.setObject(3, machineTable.getValueAt(i, 2));
                            pstmt.setObject(4, machineTable.getValueAt(i, 3));
                            pstmt.setObject(5, machineTable.getValueAt(i, 4));
                            pstmt.setObject(6, machineTable.getValueAt(i, 5));
                            pstmt.setObject(7, machineTable.getValueAt(i, 6));
                            pstmt.setObject(8, machineTable.getValueAt(i, 7));
                            pstmt.setBoolean(9, Boolean.valueOf(machineTable.getValueAt(i, 9).toString()));
                            pstmt.setInt(10, Integer.valueOf(machineTable.getValueAt(i, 8).toString()));
                            

                            pstmt.executeUpdate();
                            
                             pstmtx.setObject(1, machineTable.getValueAt(i, 0).toString());
                             pstmtx.setString(2, (machineTable.getValueAt(i, 8).toString()));
                              pstmtx.executeUpdate();
                            
                            
                        }
                    }
                    // pstmt.executeUpdate();
                    javax.swing.JOptionPane.showMessageDialog(this, "Update Done Successfully", "Confirmation", javax.swing.JOptionPane.INFORMATION_MESSAGE);

//                crset1.execute();
                    for (int k = 0; k < machineTable.getRowCount(); k++) {
                        for (int r = 0; r < machineTable.getColumnCount(); r++) {
                            machineTable.getModel().setValueAt(null, k, r);
                        }
                    }
                }
                this.saveMainCategoryBtn.setText("Save data");
            } catch (java.sql.SQLException sq) {
                sq.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage() + " : " + "Error", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                System.out.println(sq.getMessage());
                // jLabel2.setForeground(java.awt.Color.red);
                // jLabel2.setText("Sorry. Another Code already exists");
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Insert not successful!  Check Your Entries", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

        }
        this.clearForm();
        this.labProceduresHierarchyTabbedPane.setSelectedIndex(0);
        // Add your handling code here:
    }//GEN-LAST:event_saveMainCategoryBtnActionPerformed

    private void deleteDataMainCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDataMainCmbxActionPerformed

        try {
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("DELETE FROM hp_diagnostic_machine WHERE id = ?");
            pstmt.setObject(1, machineTable.getValueAt(machineTable.getSelectedRow(), 8));
            pstmt.executeUpdate();
        } catch (java.sql.SQLException sq) {
            sq.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage());
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_deleteDataMainCmbxActionPerformed

    private void saveGroupingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveGroupingBtnActionPerformed
        java.util.Calendar calendar = java.util.Calendar.getInstance();

        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql = new java.sql.Date(dateNow);

        if(saveGroupingBtn.getText().equalsIgnoreCase("Update")){
            try {
                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("UPDATE hp_diagnostic_machine_racks   SET  rack_no=? WHERE id = ?  and machine_id = ? ");
                for (int i = 0; i < racksTable.getRowCount(); i++) {
                    if (racksTable.getModel().getValueAt(i, 0) != null) {
                        pstmt.setObject(1, racksTable.getValueAt(i, 1).toString());
                         pstmt.setInt(2, Integer.valueOf(racksTable.getValueAt(i, 0).toString()));
                       pstmt.setString(3, machineNameCmbx.getSelectedItem().toString());
                        
                        pstmt.setString(3, machineIDTxt.getText());
                        pstmt.executeUpdate();
                    }
                }
                javax.swing.JOptionPane.showMessageDialog(this, "Update Done Successfully", "Comfirmation", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            
                //                crset11.execute();
                for (int k = 0; k < racksTable.getRowCount(); k++) {
                    for (int r = 0; r < racksTable.getColumnCount(); r++) {
                        racksTable.getModel().setValueAt(null, k, r);
                    }
                }
                
            } catch (java.sql.SQLException sq) {
                sq.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, "ERROR: " + sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                System.out.println(sq.getMessage());
                groupingSpacerLbl.setForeground(java.awt.Color.red);
                //  jLabel4.setText("Sorry. Another Code already exists");
            }
        }else{
        System.out.println(datenowSql.toString());
        if (racksTable.getModel().getValueAt(0, 1) != null) {

            try {
                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO hp_diagnostic_machine_racks(machine_name, rack_no,  machine_id) VALUES (?, ?, ?) ");
                for (int i = 0; i < racksTable.getRowCount(); i++) {
                    if (racksTable.getModel().getValueAt(i, 1) != null) {
                        pstmt.setObject(2, racksTable.getValueAt(i, 1).toString());
                        pstmt.setString(1, machineNameCmbx.getSelectedItem().toString());
                        
                        pstmt.setString(3, machineIDTxt.getText());
                        pstmt.executeUpdate();
                    }
                }
                javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully", "Comfirmation", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            
                //                crset11.execute();
                for (int k = 0; k < racksTable.getRowCount(); k++) {
                    for (int r = 0; r < racksTable.getColumnCount(); r++) {
                        racksTable.getModel().setValueAt(null, k, r);
                    }
                }
                machineNameCmbx.setSelectedItem("-");
                machineIDTxt.setText("");
            } catch (java.sql.SQLException sq) {
                sq.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, "ERROR: " + sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                System.out.println(sq.getMessage());
                groupingSpacerLbl.setForeground(java.awt.Color.red);
                //  jLabel4.setText("Sorry. Another Code already exists");
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Insert Not Successful!  Check Your Entries", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

        }
        
        }
        //this.clearForm();
       // this.labProceduresHierarchyTabbedPane.setSelectedIndex(2);
        // Add your handling code here:
    }//GEN-LAST:event_saveGroupingBtnActionPerformed

    private void editGroupingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editGroupingBtnActionPerformed
        if(machineIDTxt.getText().isEmpty()){
             javax.swing.JOptionPane.showMessageDialog(this, "Select the machine First! ", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

        }else{
            racksTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, " SELECT id,  rack_no  FROM hp_diagnostic_machine_racks WHERE machine_id =  '" + machineIDTxt.getText()+ "'"));
            saveGroupingBtn.setText("Update");
        }
    // Add your handling code here:
    }//GEN-LAST:event_editGroupingBtnActionPerformed

    private void clearGroupingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearGroupingBtnActionPerformed
        for (int k = 0; k < racksTable.getRowCount(); k++) {
            for (int r = 0; r < racksTable.getColumnCount(); r++) {
                racksTable.getModel().setValueAt(null, k, r);
            }
        }
        machineNameCmbx.setSelectedItem(null);
        machineIDTxt.setText("");
        this.clearForm();
        this.labProceduresHierarchyTabbedPane.setSelectedIndex(1);
        // Add your handling code here:
    }//GEN-LAST:event_clearGroupingBtnActionPerformed

    private void closeGroupingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeGroupingBtnActionPerformed
        this.setVisible(false);
        dispose();

        // Add your handling code here:
    }//GEN-LAST:event_closeGroupingBtnActionPerformed

    private void machineNameCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_machineNameCmbxActionPerformed
        machineIDTxt.setText("");
        try {
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("SELECT id  FROM hp_diagnostic_machine WHERE machine_name ILIKE '" + machineNameCmbx.getSelectedItem() + "'");
            while (rset.next()) {
                machineIDTxt.setText(rset.getObject(1).toString());
            }

        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Insert not successful");
        }

        // Add your handling code here:
    }//GEN-LAST:event_machineNameCmbxActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        int rows2Delete = racksTable.getSelectedRowCount();

        int[] selectedRows = racksTable.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) racksTable.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) racksTable.getModel();

                defTableModel.removeRow(racksTable.getSelectedRow());
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void racksTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_racksTableMouseClicked
        if (racksTable.getSelectedColumn() == 0) {

            this.cmboxMouseClicked2();
        }         // Add your handling code here:
    }//GEN-LAST:event_racksTableMouseClicked

    private void deleteGroupingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteGroupingBtnActionPerformed

        try {
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("DELETE FROM hp_diagnostic_machine_racks WHERE id =  ? and machine_id =  ?");
            pstmt.setInt(1, Integer.valueOf(racksTable.getValueAt(racksTable.getSelectedRow(), 0).toString()));
            pstmt.setObject(2, machineIDTxt.getText());
            pstmt.executeUpdate();
        } catch (java.sql.SQLException sq) {
            sq.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage());
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_deleteGroupingBtnActionPerformed

    void clearForm() {
        this.getContentPane().removeAll();
        this.initComponents();
        this.validate();
////        saveParametersBtn.setText("Save data");
//        saveGroupingBtn.setText("Save data");
        saveMainCategoryBtn.setText("Save data");
        this.setSize(this.getParent().getSize());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton clearGroupingBtn;
    private javax.swing.JButton clearMainCategoryBtn;
    private javax.swing.JButton closeGroupingBtn;
    private javax.swing.JButton closeMainFormBtn;
    private javax.swing.JButton deleteDataMainCmbx;
    private javax.swing.JButton deleteGroupingBtn;
    private javax.swing.JButton editGroupingBtn;
    private javax.swing.JButton editMainCategoryBtn;
    private javax.swing.JLabel groupingSpacerLbl;
    private javax.swing.JPanel groupingsPanel;
    private javax.swing.JButton helpMainBtn;
    private javax.swing.JButton jButton52;
    private javax.swing.JButton jButton521;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton92;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JDialog jSearchDialog2;
    private javax.swing.JDialog jSearchDialog21;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JPanel jSearchPanel21;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JScrollPane jSearchScrollPane21;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTable jSearchTable2;
    private javax.swing.JTable jSearchTable21;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JTextField jTextField113;
    private javax.swing.JTextField jTextField1131;
    private javax.swing.JTabbedPane labProceduresHierarchyTabbedPane;
    private javax.swing.JTextField machineIDTxt;
    private javax.swing.JComboBox machineNameCmbx;
    private javax.swing.JTable machineTable;
    private javax.swing.JPanel mainCategoryPanel;
    private javax.swing.JScrollPane mainCategoryScrollPane;
    private javax.swing.JLabel mainCategorySpacerLbl;
    private javax.swing.JButton parametersHelpBtn;
    private javax.swing.JLabel parametersSpacerLabel;
    private javax.swing.JTable racksTable;
    private javax.swing.JButton removeRowMainBtn;
    private javax.swing.JButton saveGroupingBtn;
    private javax.swing.JButton saveMainCategoryBtn;
    // End of variables declaration//GEN-END:variables
}
