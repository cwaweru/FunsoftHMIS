/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */
package com.afrisoftech.laboratory;

import java.beans.PropertyVetoException;
import java.io.IOException;
import java.security.GeneralSecurityException;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.web.WebView;
import javafx.application.Platform;
//import javafx.embed.swing.JFXPanel;
import javafx.scene.Scene;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
//

/**
 *
 * @author root
 */
public class XrayResIntfr extends javax.swing.JInternalFrame {

    com.afrisoftech.lib.DBObject dbObject;
    private javax.swing.JComboBox cmbox;
    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    java.lang.Thread getListThread;
    boolean getList;
    private String paidPatients;
    private String pendingPatients;
    javax.swing.JInternalFrame pacsInternalFrame = com.afrisoftech.hospital.HospitalMain.pacsViewerIntfr;
    private int pacsCount = 0;
    private WebView webView;
    String uuid = null;
    //javax.swing.JTextField patientNameTxt = null;
    //javax.swing.JTextField uidTxt = null;
    //final JFXPanel jfxPanel = new JFXPanel();

    public XrayResIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;
        dbObject = new com.afrisoftech.lib.DBObject();

        //   getListThread = new java.lang.Thread(this, "Update_Lab_Tests");
        initComponents();

        getList = true;

        // getListThread.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        matchPatientDialog = new javax.swing.JDialog();
        jSearchPanel3 = new javax.swing.JPanel();
        jButton53 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        uuidMatchTxt = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jButton54 = new javax.swing.JButton();
        uidMatchTxt = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        currentNoTxt = new javax.swing.JTextField();
        currentNameTxt = new javax.swing.JTextField();
        searchTextField1 = new javax.swing.JTextField();
        paidScrollPane1 = new javax.swing.JScrollPane();
        paidResultsTable1 = new com.afrisoftech.dbadmin.JXTable() ;
        radiographerTabbedPane = new javax.swing.JTabbedPane();
        waitList2ConfirmPanel = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        confirmScrollPane = new javax.swing.JScrollPane();
        confirmRequestsTable = new com.afrisoftech.dbadmin.JXTable() ;

        waitingListActionsPanel = new javax.swing.JPanel();
        paySpacerLbl = new javax.swing.JLabel();
        submitForPayBtn = new javax.swing.JButton();
        cancleBtn = new javax.swing.JButton();
        paidPendingPanel = new javax.swing.JPanel();
        jPanel211 = new javax.swing.JPanel();
        paidScrollPane = new javax.swing.JScrollPane();
        paidResultsTable = new com.afrisoftech.dbadmin.JXTable() ;

        jLabel14 = new javax.swing.JLabel();
        reportingPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jComboBox41 = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        xrayTestTable = new com.afrisoftech.dbadmin.JTable();
        jLabel13 = new javax.swing.JLabel();
        nooffilmTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        xrayTextField = new javax.swing.JTextField();
        uidTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        radiographerReportTxt = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        patientNoTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        patientNameTxt = new javax.swing.JTextField();
        maleCheckBox = new javax.swing.JCheckBox();
        femaleCheckBox = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        ageTxt = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        receiptTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel62 = new javax.swing.JPanel();
        doctorTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel621 = new javax.swing.JPanel();
        jTextField3621 = new javax.swing.JTextField();
        try {

            java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rset1 = stmt1.executeQuery("select DISTINCT f_name||' '||l_name as name FROM secure_menu_access WHERE login_name = current_user");
            while (rset1.next()) {
                jTextField3621.setText(rset1.getObject(1).toString());

            }

        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }
        jLabel7 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        clinicalHistoryTxt = new javax.swing.JTextArea();
        jScrollPane7 = new javax.swing.JScrollPane();
        physicalExamTxt = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        provisionalDiagnosisTxt = new javax.swing.JTextArea();
        jScrollPane9 = new javax.swing.JScrollPane();
        otherInformationTxt = new javax.swing.JTextArea();
        actionPanel = new javax.swing.JPanel();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        saveresultsButton = new javax.swing.JButton();
        patientCardBtn = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        pacsDicomViewerBtn1 = new javax.swing.JButton();
        resultsPanel = new javax.swing.JPanel();
        radiographerResultsJscrl = new javax.swing.JScrollPane();
        radiologyResultsTable = new com.afrisoftech.dbadmin.JXTable();
        pacsDicomViewerBtn = new javax.swing.JButton();
        resultsButtonPanel = new javax.swing.JPanel();
        closeFormBtn = new javax.swing.JButton();
        refreshResultsListingBtn = new javax.swing.JButton();
        spacerLbl = new javax.swing.JLabel();
        radiographerHeaderPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        xrayEndDatePicker = new com.afrisoftech.lib.DatePicker();
        refreshbutton = new javax.swing.JButton();
        searchTextField = new javax.swing.JTextField();
        outPatientChkbx = new javax.swing.JCheckBox();
        inPatientChkbx = new javax.swing.JCheckBox();
        jLabel15 = new javax.swing.JLabel();
        xrayStartDatePicker = new com.afrisoftech.lib.DatePicker();

        matchPatientDialog.setModal(true);
        matchPatientDialog.setUndecorated(true);
        matchPatientDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel3.setLayout(new java.awt.GridBagLayout());

        jButton53.setText("Save Details");
        jButton53.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton53ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel3.add(jButton53, gridBagConstraints);

        jLabel12.setText("UUID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jSearchPanel3.add(jLabel12, gridBagConstraints);

        uuidMatchTxt.setEditable(false);
        uuidMatchTxt.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel3.add(uuidMatchTxt, gridBagConstraints);

        jLabel17.setText("UID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jSearchPanel3.add(jLabel17, gridBagConstraints);

        jButton54.setText("Dispose");
        jButton54.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton54ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel3.add(jButton54, gridBagConstraints);

        uidMatchTxt.setEditable(false);
        uidMatchTxt.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel3.add(uidMatchTxt, gridBagConstraints);

        jLabel33.setFont(new java.awt.Font("Dialog", 3, 14)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(51, 51, 255));
        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel33.setText("Match Dicom to Request Form");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jSearchPanel3.add(jLabel33, gridBagConstraints);

        jLabel27.setText("Current Patient No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jSearchPanel3.add(jLabel27, gridBagConstraints);

        jLabel34.setText("Current Patient Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jSearchPanel3.add(jLabel34, gridBagConstraints);

        currentNoTxt.setEditable(false);
        currentNoTxt.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel3.add(currentNoTxt, gridBagConstraints);

        currentNameTxt.setEditable(false);
        currentNameTxt.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel3.add(currentNameTxt, gridBagConstraints);

        searchTextField1.setBorder(javax.swing.BorderFactory.createTitledBorder("Search patient by number/Name"));
        searchTextField1.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchTextField1CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel3.add(searchTextField1, gridBagConstraints);

        paidScrollPane1.setAutoscrolls(true);

        paidResultsTable1.setRowHeight(26);
        javax.swing.table.TableColumn column2s = null;
        for (int i = 0; i < paidResultsTable.getColumnCount(); i++) {
            column2s = paidResultsTable.getColumnModel().getColumn(i);
            if (i == 0) {

                column2s.setPreferredWidth(500); // item description column is bigger
            } else {

                column2s.setPreferredWidth(100);

            }
        }

        paidScrollPane.setViewportView(paidResultsTable);
        paidResultsTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paidResultsTable1MouseClicked(evt);
            }
        });
        paidScrollPane1.setViewportView(paidResultsTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 30.0;
        jSearchPanel3.add(paidScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        matchPatientDialog.getContentPane().add(jSearchPanel3, gridBagConstraints);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Radiology & Imaging requests and results processing - Radiographer Report");
        setFrameIcon(null);
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        radiographerTabbedPane.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        radiographerTabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radiographerTabbedPaneMouseClicked(evt);
            }
        });

        waitList2ConfirmPanel.setLayout(new java.awt.GridBagLayout());

        jPanel22.setLayout(new java.awt.GridBagLayout());

        confirmScrollPane.setAutoscrolls(true);

        confirmRequestsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        confirmRequestsTable.setRowHeight(26);

        javax.swing.table.TableColumn column = null;
        for (int i = 0; i < confirmRequestsTable.getColumnCount(); i++) {
            column = confirmRequestsTable.getColumnModel().getColumn(i);
            if (i == 2) {

                column.setPreferredWidth(500); // item description column is bigger
            } else {

                column.setPreferredWidth(100);

            }
        }

        confirmScrollPane.setViewportView(confirmRequestsTable);
        confirmRequestsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                confirmRequestsTableMouseClicked(evt);
            }
        });
        confirmScrollPane.setViewportView(confirmRequestsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        jPanel22.add(confirmScrollPane, gridBagConstraints);

        waitingListActionsPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        waitingListActionsPanel.add(paySpacerLbl, gridBagConstraints);

        submitForPayBtn.setText("Submit request for payment");
        submitForPayBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitForPayBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        waitingListActionsPanel.add(submitForPayBtn, gridBagConstraints);

        cancleBtn.setText("Cancel request");
        cancleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancleBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        waitingListActionsPanel.add(cancleBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel22.add(waitingListActionsPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        waitList2ConfirmPanel.add(jPanel22, gridBagConstraints);

        radiographerTabbedPane.addTab("CONFIRM X-RAY REQUESTS", waitList2ConfirmPanel);

        paidPendingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        paidPendingPanel.setLayout(new java.awt.GridBagLayout());

        jPanel211.setLayout(new java.awt.GridBagLayout());

        paidScrollPane.setAutoscrolls(true);

        paidResultsTable.setRowHeight(26);

        javax.swing.table.TableColumn column2 = null;
        for (int i = 0; i < paidResultsTable.getColumnCount(); i++) {
            column2 = paidResultsTable.getColumnModel().getColumn(i);
            if (i == 0) {

                column2.setPreferredWidth(500); // item description column is bigger
            } else {

                column2.setPreferredWidth(100);

            }
        }

        paidScrollPane.setViewportView(paidResultsTable);
        paidResultsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paidResultsTableMouseClicked(evt);
            }
        });
        paidScrollPane.setViewportView(paidResultsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel211.add(paidScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        paidPendingPanel.add(jPanel211, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        paidPendingPanel.add(jLabel14, gridBagConstraints);

        radiographerTabbedPane.addTab("PENDING PAID X-RAY REQUESTS", paidPendingPanel);

        reportingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "X-RAY POSTING", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(0, 0, 255))); // NOI18N
        reportingPanel.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Select patient here"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jComboBox41.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT film_type_desc FROM xray_films ORDER BY 1")
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jComboBox41, gridBagConstraints);

        jLabel5.setText("Film Size");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(jLabel5, gridBagConstraints);

        jScrollPane6.setBorder(javax.swing.BorderFactory.createTitledBorder("Xray Test Requested"));

        xrayTestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Test Requested", "Amount", "Tick To Report"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        xrayTestTable.setRowHeight(22);
        xrayTestTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                xrayTestTableMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(xrayTestTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel2.add(jScrollPane6, gridBagConstraints);

        jLabel13.setText("No. of Film");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(jLabel13, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(nooffilmTextField, gridBagConstraints);

        jLabel3.setText("Xray No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(jLabel3, gridBagConstraints);

        xrayTextField.setEditable(false);
        xrayTextField.setBackground(new java.awt.Color(255, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(xrayTextField, gridBagConstraints);

        uidTxt.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(uidTxt, gridBagConstraints);

        jLabel11.setText("UID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel2.add(jLabel11, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel1.add(jPanel2, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Notes"));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Radiographer Notes/Comments", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 14), new java.awt.Color(0, 0, 255))); // NOI18N
        jScrollPane1.setViewportView(radiographerReportTxt);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel1.add(jPanel3, gridBagConstraints);

        jLabel9.setText("Patient No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabel9, gridBagConstraints);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setMinimumSize(new java.awt.Dimension(82, 37));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        patientNoTxt.setEditable(false);
        patientNoTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientNoTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(patientNoTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel6, gridBagConstraints);

        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabel1, gridBagConstraints);

        patientNameTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(patientNameTxt, gridBagConstraints);

        buttonGroup3.add(maleCheckBox);
        maleCheckBox.setText("MALE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(maleCheckBox, gridBagConstraints);

        buttonGroup3.add(femaleCheckBox);
        femaleCheckBox.setText("FEMALE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(femaleCheckBox, gridBagConstraints);

        jLabel8.setText("Age");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabel8, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(ageTxt, gridBagConstraints);

        jLabel10.setText("Receipt No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabel10, gridBagConstraints);

        receiptTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(receiptTxt, gridBagConstraints);

        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("Doctor Refering");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabel2, gridBagConstraints);

        jPanel62.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel62.setMinimumSize(new java.awt.Dimension(82, 37));
        jPanel62.setLayout(new java.awt.GridBagLayout());

        doctorTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel62.add(doctorTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel62, gridBagConstraints);

        jLabel4.setForeground(new java.awt.Color(255, 0, 51));
        jLabel4.setText("Radiographer");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabel4, gridBagConstraints);

        jPanel621.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel621.setMinimumSize(new java.awt.Dimension(82, 37));
        jPanel621.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel621.add(jTextField3621, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel621, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabel7, gridBagConstraints);

        jScrollPane5.setViewportBorder(javax.swing.BorderFactory.createTitledBorder("Clinical History"));

        clinicalHistoryTxt.setColumns(20);
        clinicalHistoryTxt.setRows(5);
        jScrollPane5.setViewportView(clinicalHistoryTxt);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        jPanel1.add(jScrollPane5, gridBagConstraints);

        jScrollPane7.setViewportBorder(javax.swing.BorderFactory.createTitledBorder("Physical Examination"));

        physicalExamTxt.setColumns(20);
        physicalExamTxt.setRows(5);
        jScrollPane7.setViewportView(physicalExamTxt);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        jPanel1.add(jScrollPane7, gridBagConstraints);

        jScrollPane8.setViewportBorder(javax.swing.BorderFactory.createTitledBorder("Provisional Diagnosis"));

        provisionalDiagnosisTxt.setColumns(20);
        provisionalDiagnosisTxt.setRows(5);
        jScrollPane8.setViewportView(provisionalDiagnosisTxt);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        jPanel1.add(jScrollPane8, gridBagConstraints);

        jScrollPane9.setViewportBorder(javax.swing.BorderFactory.createTitledBorder("Other Information"));

        otherInformationTxt.setColumns(20);
        otherInformationTxt.setRows(5);
        jScrollPane9.setViewportView(otherInformationTxt);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        jPanel1.add(jScrollPane9, gridBagConstraints);

        actionPanel.setLayout(new java.awt.GridBagLayout());

        saveresultsButton.setMnemonic('O');
        saveresultsButton.setText("Save Radiology/Imaging procedure results");
        saveresultsButton.setToolTipText("Click here enter data");
        saveresultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveresultsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        actionPanel.add(saveresultsButton, gridBagConstraints);

        patientCardBtn.setText("Patient Card");
        patientCardBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientCardBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        actionPanel.add(patientCardBtn, gridBagConstraints);

        clearButton.setMnemonic('l');
        clearButton.setText("Clear form");
        clearButton.setToolTipText("Click here to clear textfields");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        actionPanel.add(clearButton, gridBagConstraints);

        jButton4.setMnemonic('C');
        jButton4.setText("Close form");
        jButton4.setToolTipText("Click here to close window");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        actionPanel.add(jButton4, gridBagConstraints);

        jButton5.setMnemonic('h');
        jButton5.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        actionPanel.add(jButton5, gridBagConstraints);

        pacsDicomViewerBtn1.setText("PACS/Dicom Viewer");
        pacsDicomViewerBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pacsDicomViewerBtn1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        actionPanel.add(pacsDicomViewerBtn1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 7;
        jPanel1.add(actionPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 20.0;
        reportingPanel.add(jPanel1, gridBagConstraints);

        radiographerTabbedPane.addTab("POST X-Ray/Radiology Results - Radiographer Report", reportingPanel);

        resultsPanel.setLayout(new java.awt.GridBagLayout());

        radiologyResultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        radiologyResultsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                radiologyResultsTableMouseClicked(evt);
            }
        });
        radiographerResultsJscrl.setViewportView(radiologyResultsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        resultsPanel.add(radiographerResultsJscrl, gridBagConstraints);

        pacsDicomViewerBtn.setText("Click to view Dicom images");
        pacsDicomViewerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pacsDicomViewerBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        resultsPanel.add(pacsDicomViewerBtn, gridBagConstraints);

        resultsButtonPanel.setLayout(new java.awt.GridBagLayout());

        closeFormBtn.setText("Close form");
        closeFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        resultsButtonPanel.add(closeFormBtn, gridBagConstraints);

        refreshResultsListingBtn.setText("Refresh results listing");
        refreshResultsListingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshResultsListingBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        resultsButtonPanel.add(refreshResultsListingBtn, gridBagConstraints);

        spacerLbl.setForeground(new java.awt.Color(0, 51, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.weighty = 1.0;
        resultsButtonPanel.add(spacerLbl, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        resultsPanel.add(resultsButtonPanel, gridBagConstraints);

        radiographerTabbedPane.addTab("Results Listing", resultsPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 500.0;
        getContentPane().add(radiographerTabbedPane, gridBagConstraints);

        radiographerHeaderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tick category...", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11), new java.awt.Color(0, 0, 153))); // NOI18N
        radiographerHeaderPanel.setLayout(new java.awt.GridBagLayout());

        jLabel6.setText("End Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        radiographerHeaderPanel.add(jLabel6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        radiographerHeaderPanel.add(xrayEndDatePicker, gridBagConstraints);

        refreshbutton.setText("Refresh Requests Listing");
        refreshbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshbuttonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        radiographerHeaderPanel.add(refreshbutton, gridBagConstraints);

        searchTextField.setBorder(javax.swing.BorderFactory.createTitledBorder("Search patient by number"));
        searchTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchTextFieldCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        radiographerHeaderPanel.add(searchTextField, gridBagConstraints);

        buttonGroup4.add(outPatientChkbx);
        outPatientChkbx.setSelected(true);
        outPatientChkbx.setText("OUT-Patient");
        outPatientChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        radiographerHeaderPanel.add(outPatientChkbx, gridBagConstraints);

        buttonGroup4.add(inPatientChkbx);
        inPatientChkbx.setText("IN-Patient");
        inPatientChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        radiographerHeaderPanel.add(inPatientChkbx, gridBagConstraints);

        jLabel15.setText("Begin Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        radiographerHeaderPanel.add(jLabel15, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        radiographerHeaderPanel.add(xrayStartDatePicker, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(radiographerHeaderPanel, gridBagConstraints);

        setBounds(0, 0, 1244, 499);
    }// </editor-fold>//GEN-END:initComponents

    private void paidResultsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paidResultsTableMouseClicked

        System.err.println("Name again " + paidResultsTable.getValueAt(0, 2).toString());
        System.err.println("Select Row " + paidResultsTable.getSelectedRow());

        System.err.println("Name " + paidResultsTable.getValueAt(paidResultsTable.getSelectedRow(), 2).toString());
        String patientNames = paidResultsTable.getValueAt(paidResultsTable.getSelectedRow(), 2).toString();

        patientNoTxt.setText(paidResultsTable.getValueAt(paidResultsTable.getSelectedRow(), 1).toString());
        patientNameTxt.setText(paidResultsTable.getValueAt(paidResultsTable.getSelectedRow(), 2).toString());
        receiptTxt.setText(paidResultsTable.getValueAt(paidResultsTable.getSelectedRow(), 12).toString());
        xrayTextField.setText(paidResultsTable.getValueAt(paidResultsTable.getSelectedRow(), 7).toString());
        doctorTextField.setText(paidResultsTable.getValueAt(paidResultsTable.getSelectedRow(), 8).toString());
        if (paidResultsTable.getValueAt(paidResultsTable.getSelectedRow(), 14) != null) {
            uidTxt.setText(paidResultsTable.getValueAt(paidResultsTable.getSelectedRow(), 14).toString());
        }
        getList = false;
        try {

            //        connectDB.setAutoCommit(false);
            int i = paidResultsTable.getSelectedRow();

            if (paidResultsTable.getValueAt(i, 0) != null) {
                //   connectDB.setAutoCommit(false);
                if (Boolean.valueOf(paidResultsTable.getModel().getValueAt(i, 9).toString()) == java.lang.Boolean.TRUE) {

                    String Sex = "";
                    // Get bio data for OUT-Patient
                    if (outPatientChkbx.isSelected()) {
                        java.sql.Statement stmtTable113 = connectDB.createStatement();

                        java.sql.ResultSet rsetTable113 = stmtTable113.executeQuery("SELECT DISTINCT  funsoft_patient_age(pr.year_of_birth::date) as age, pb.gender,pb.diagnosis FROM  pb_doctors_request pb, hp_patient_register pr WHERE  "
                                + "  pb.paid = true and"
                                + " pb.patient_no = pr.patient_no AND request_id  = '" + paidResultsTable.getValueAt(paidResultsTable.getSelectedRow(), 10).toString().trim() + "'");

                        while (rsetTable113.next()) {
                            ageTxt.setText(rsetTable113.getString("age"));
                            Sex = rsetTable113.getString("gender");
                            if (Sex.equalsIgnoreCase("male")) {
                                this.maleCheckBox.setSelected(true);
                            } else {
                                this.femaleCheckBox.setSelected(true);
                            }
                            otherInformationTxt.setText((rsetTable113.getString("diagnosis")));
                        }

                    }
                    // Get age and gender for IN-patient
                    if (inPatientChkbx.isSelected()) {
                        java.sql.PreparedStatement pstmtIPBio = connectDB.prepareStatement("SELECT funsoft_patient_age(pr.year_of_birth::date), hp.gender FROM hp_admission hp, hp_inpatient_register pr WHERE patient_no = ? AND hp.patient_no = pr.patient_no ORDER BY hp.date_admitted DESC LIMIT 1");
                        pstmtIPBio.setString(1, paidResultsTable.getValueAt(paidResultsTable.getSelectedRow(), 1).toString());
                        java.sql.ResultSet rsetIPBio = pstmtIPBio.executeQuery();
                        while (rsetIPBio.next()) {
                            ageTxt.setText(rsetIPBio.getString(1));
                            Sex = rsetIPBio.getString("gender");
                            if (Sex.equalsIgnoreCase("male")) {
                                this.maleCheckBox.setSelected(true);
                            } else {
                                this.femaleCheckBox.setSelected(true);
                            }
                        }
                    }
// Commented by Charles :: Only posting of results should change colleted status of request to true
//                    java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request "
//                            + "SET collected = true where "
//                            + " request_id  = '" + pendingresultsTable.getValueAt(pendingresultsTable.getSelectedRow(), 10).toString().trim() + "'");
//                    pstmt46.executeUpdate();
                    System.out.println("SELECT service,amount,false as Report,inv_no as Receipt_No "
                            + " FROM pb_doctors_request  WHERE  collected = true and "
                            + " posted_to_lab='XRAY POSTING' and paid =true and "
                            + " patient_no = '" + paidResultsTable.getValueAt(paidResultsTable.getSelectedRow(), 1).toString() + "' "
                            + " and bed_no = '" + paidResultsTable.getValueAt(paidResultsTable.getSelectedRow(), 7).toString() + "' "
                            + " AND service = '" + paidResultsTable.getValueAt(paidResultsTable.getSelectedRow(), 4).toString() + "'"
                            + " and inv_no='" + paidResultsTable.getValueAt(paidResultsTable.getSelectedRow(), 10).toString() + "' "
                            + " and trans_date::date = '" + paidResultsTable.getValueAt(paidResultsTable.getSelectedRow(), 0).toString() + "'::date ORDER BY trans_date asc");

                    PreparedStatement pstmt411 = connectDB.prepareStatement("UPDATE hp_patient_billing SET  collected = true WHERE "
                            + " patient_no = '" + paidResultsTable.getValueAt(paidResultsTable.getSelectedRow(), 1).toString() + "' AND "
                            + " service = '" + paidResultsTable.getValueAt(paidResultsTable.getSelectedRow(), 4).toString() + "' and "
                            + " doctor='" + paidResultsTable.getValueAt(paidResultsTable.getSelectedRow(), 7).toString() + "' ");
                    pstmt411.executeUpdate();

                }

                javax.swing.JOptionPane.showMessageDialog(this, "DONE Successful", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                //    connectDB.commit();
                //    connectDB.setAutoCommit(true);
                this.xrayTestTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                        + "SELECT service,amount,true as Report,request_id as Request_ID,bed_no as Order "
                        + " FROM pb_doctors_request  WHERE    request_id  = '" + paidResultsTable.getValueAt(paidResultsTable.getSelectedRow(), 10).toString().trim() + "' UNION "
                        + " SELECT description as service, debit as amount,true as Report,receipt_no as Request_ID, receipt_no as Order "
                        + " FROM ac_cash_collection  WHERE    receipt_no  = '" + paidResultsTable.getValueAt(paidResultsTable.getSelectedRow(), 10).toString().trim() + "' UNION"
                        + " SELECT service, debit as amount, true as Report, reference as Request_ID, reference as Order "
                        + " FROM hp_patient_card  WHERE (main_service ILIKE '%ray%' OR main_service ILIKE '%rad%') AND  reference  = '" + paidResultsTable.getValueAt(paidResultsTable.getSelectedRow(), 10).toString().trim() + "'"));

                for (int k = 0; k < paidResultsTable.getRowCount(); k++) {
                    for (int r = 0; r < paidResultsTable.getColumnCount(); r++) {
                        paidResultsTable.getModel().setValueAt(null, k, r);
                    }
                }
            }
            java.sql.PreparedStatement pstmtClinicals = connectDB.prepareStatement("SELECT typeof_test, comments, description FROM hp_clinical_results WHERE patient_no = '" + patientNoTxt.getText() + "' AND date::date > '" + xrayEndDatePicker.getDate() + "'::date - 2 ORDER BY input_date DESC LIMIT 1");

            java.sql.ResultSet rsetClinical = pstmtClinicals.executeQuery();

            while (rsetClinical.next()) {
                clinicalHistoryTxt.setText(rsetClinical.getString(2));
                physicalExamTxt.setText(rsetClinical.getString(1));
                provisionalDiagnosisTxt.setText(rsetClinical.getString(3));
            }
        } catch (Exception sq) {
            sq.printStackTrace();
            // clearButton.doClick();
//            try {
//                connectDB.rollback();
//            } catch (java.sql.SQLException sql) {
//                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
//            }
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }
        getList = true;
        refreshbutton.doClick();
        radiographerTabbedPane.setSelectedIndex(2);
        //   this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        // Add your handling code here:
    }//GEN-LAST:event_paidResultsTableMouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed
    private void cmboxActionPerformed(java.awt.event.ActionEvent evt) {
        java.lang.Object selectedGuaran = cmbox.getSelectedItem();
        /*  int i = jTable1.getSelectedRow();

         if (selectedGuaran != null) {

         try {
         //java.sql.Connection con = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/hospital","postgres","pilsiner");
         java.sql.Statement pstmt = connectDB.createStatement();
         java.sql.ResultSet rs = pstmt.executeQuery("select rate,gl_account from pb_operating_parameters where service_type = '"+selectedGuaran+"' UNION ALL select sp.selling_price,ac.code from st_stock_prices sp,pb_activity ac where ac.activity ='Stock' AND product = '"+selectedGuaran+"'");
         while (rs.next()){
         //jTextField4.setText(rs.getObject(1).toString());
         jTable1.setValueAt(rs.getObject(1),i,3);
         jTable1.setValueAt(rs.getObject(2),i,5);
         }
         } catch(java.sql.SQLException sqlex){
         System.out.println(sqlex.getMessage());
         }
         }

         */
    }

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        this.getContentPane().removeAll();

        initComponents();
        this.updateUI();
        //  getList = true;

        // getListThread.start();
        // Add your handling code here:
    }//GEN-LAST:event_clearButtonActionPerformed

    private void saveresultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveresultsButtonActionPerformed
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
//        try {
//            if (java.lang.Double.valueOf(nooffilmTextField.getText()) > 0) {

        boolean addPdfToDicom = false;
        if (!patientNoTxt.getText().isEmpty()) {
            if (uuid != null) {
                if (!uuid.isEmpty()) {
                    uuid = com.afrisoftech.lib.RadiologyRequestJSON.getOrthanoSystemUUID(connectDB, uidTxt.getText());
                    addPdfToDicom = true;
                }
            }
            if (nooffilmTextField.getText().isEmpty()) {
                javax.swing.JOptionPane.showMessageDialog(this, "Enter the number of films used", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            } else {
                java.util.Calendar calendar = java.util.Calendar.getInstance();

                long dateNow = calendar.getTimeInMillis();

                java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

                System.out.println(datenowSql1.toString());

                java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

                System.out.println(datenowSql.toString());

                String billNo = null;

                String transNo = null;
                String User = null;
                String patientAcc = null;
                String cardNo = null;
                String AccDesc = null;
                String scheme = null;
                String cardName = null;
                String isurer = null;
                String expDate = null;
                String code = null;

                String Categ = null;
                String Sex = null, request = xrayTextField.getText();
                if (this.femaleCheckBox.isSelected()) {
                    Sex = this.femaleCheckBox.getText();
                } else {
                    Sex = this.maleCheckBox.getText();
                }

                if ((request.startsWith("O"))) {
                    Categ = "OP";
                } else if ((request.startsWith("I"))) {
                    Categ = "IP";

                }

                try {
                    connectDB.setAutoCommit(false);

                    java.sql.Statement stm121 = connectDB.createStatement();
                    java.sql.Statement ps11 = connectDB.createStatement();
                    java.sql.ResultSet rst11 = ps11.executeQuery("select 'X'||nextval('xray_no_seq'),current_user");
                    while (rst11.next()) {
                        rst11.getObject(1).toString();

                        billNo = rst11.getObject(1).toString();
                        User = rst11.getObject(2).toString();
                    }
                    if (xrayTestTable.isEditing()) {
                        xrayTestTable.getCellEditor().stopCellEditing();
                    }

                    String xrayNo = null;
                    for (int i = 0; i < xrayTestTable.getRowCount(); i++) {
                        if (xrayTestTable.getModel().getValueAt(0, 2) != null) {
                            if (Boolean.parseBoolean(xrayTestTable.getValueAt(0, 2).toString())) {
                                int docCount = 0;
                                java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("SELECT count(patient_no),xray_no  FROM hp_xray_results WHERE patient_no = ? AND examination ilike ? AND ((doc_no = ? AND  doc_no != '') or uuid = '" + uuid + "') AND (notes IS NULL or notes = '') GROUP BY 2");
                                pstmt1.setString(1, patientNoTxt.getText());
                                pstmt1.setString(3, receiptTxt.getText());
                                pstmt1.setObject(2, xrayTestTable.getValueAt(0, 0));
                                java.sql.ResultSet rset1 = pstmt1.executeQuery();
                                while (rset1.next()) {
                                    docCount = rset1.getInt(1);
                                    xrayNo = rset1.getString(2);
                                }
                                System.err.println("SELECT count(patient_no) FROM hp_xray_results WHERE patient_no = '" + patientNoTxt.getText() + "' AND examination ilike '" + xrayTestTable.getValueAt(0, 0) + "' AND ((doc_no = '" + receiptTxt.getText() + "' AND  doc_no != '') or uuid = '" + uuid + "') AND (notes IS NULL or notes = '')");
                                System.out.println("Doc Count : [" + docCount + "]");
                                if (docCount < 1) {
                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO hp_xray_results VALUES("
                                            + "?,?,?,?,?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

                                    pstmt.setString(1, patientNoTxt.getText());
                                    pstmt.setString(2, patientNameTxt.getText());
                                    pstmt.setString(3, billNo);
                                    xrayNo = billNo;
                                    pstmt.setObject(4, ageTxt.getText());
                                    pstmt.setObject(5, Sex);
                                    pstmt.setString(6, radiographerReportTxt.getText());
                                    pstmt.setString(7, xrayTestTable.getValueAt(i, 0).toString());
                                    pstmt.setDate(8, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
                                    //                           pstmt.setDate(8, com.afrisoftech.lib.SQLDateFormat.getSQLDate(xraydatePicker.getDate()));
                                    pstmt.setTimestamp(9, com.afrisoftech.lib.ServerTime.getSQLTimeStamp(connectDB));
                                    pstmt.setDouble(10, java.lang.Double.valueOf(xrayTestTable.getValueAt(0, 1).toString()));
                                    pstmt.setString(11, Categ);
                                    pstmt.setString(12, jTextField3621.getText());
                                    pstmt.setString(13, User);
                                    pstmt.setString(14, doctorTextField.getText());
                                    pstmt.setBoolean(15, false);
                                    pstmt.setBoolean(16, false);
                                    pstmt.setString(17, receiptTxt.getText());
                                    pstmt.setDouble(18, java.lang.Double.valueOf(nooffilmTextField.getText()));
                                    pstmt.setString(19, jComboBox41.getSelectedItem().toString());
                                    pstmt.setObject(20, null);
                                    pstmt.setObject(21, null);
                                    pstmt.setObject(22, null);
                                    pstmt.setObject(23, null);
                                    pstmt.setObject(24, null);
                                    pstmt.setObject(25, null);
                                    pstmt.setObject(26, null);
                                    pstmt.setObject(27, null);
                                    pstmt.setObject(28, null);
                                    pstmt.setObject(29, null);
                                    pstmt.setObject(30, null);
                                    //pstmt.setObject(31, "");
                                    pstmt.execute();

                                } else {
                                    java.sql.PreparedStatement pstmtUpdate = connectDB.prepareStatement("UPDATE hp_xray_results SET notes = ?, user_name = current_user WHERE patient_no = ? AND ((doc_no = ? AND doc_no IS NOT NULL AND doc_no != '') OR uuid = '" + uuid + "' )");
                                    pstmtUpdate.setString(1, radiographerReportTxt.getText());
                                    pstmtUpdate.setString(2, patientNoTxt.getText());
                                    pstmtUpdate.setString(3, receiptTxt.getText());
                                    pstmtUpdate.executeUpdate();

                                }

                                System.out.println("\n\n\n\n\n\n\n\n\nUPDATE pb_doctors_request "
                                        + "SET results = true,posted_to_lab='" + xrayTextField.getText() + "' WHERE "
                                        + " requisition_no='X-RAY' and request_id  = '" + xrayTestTable.getValueAt(0, 3).toString().trim() + "'");

                                java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request "
                                        + "SET results = true,posted_to_lab='" + xrayTextField.getText() + "' WHERE "
                                        + " requisition_no='X-RAY'  and request_id  = '" + xrayTestTable.getValueAt(0, 3).toString().trim() + "'");
                                pstmt46.executeUpdate();

                                java.sql.PreparedStatement pstmt462 = connectDB.prepareStatement("UPDATE hp_patient_billing SET collected = true "
                                        + "WHERE "
                                        + " service = '" + xrayTestTable.getValueAt(0, 0).toString() + "' "
                                        + "AND patient_no = '" + patientNoTxt.getText() + "' and "
                                        + " doctor = '" + xrayTestTable.getValueAt(0, 4).toString() + "' ");
                                pstmt462.executeUpdate();

                                java.sql.PreparedStatement pstmtPatientCard = connectDB.prepareStatement("UPDATE hp_patient_card SET collected = true "
                                        + "WHERE "
                                        + " upper(service) = '" + xrayTestTable.getValueAt(0, 0).toString().toUpperCase() + "' "
                                        + "AND patient_no = '" + patientNoTxt.getText() + "' AND reference = '" + xrayTestTable.getValueAt(0, 3).toString() + "' "
                                        + "  ");
                                pstmtPatientCard.executeUpdate();

                            }
                        }
                    }
                    connectDB.commit();
                    connectDB.setAutoCommit(true);
                    this.saveresultsButton.setEnabled(false);

                    System.err.println("Xray No " + xrayNo);
                    System.err.println("Xray date " + xrayEndDatePicker.getDate());
                    System.err.println("Xray date 2 " + xrayEndDatePicker.getDate());
                    System.err.println("Xray  uuid " + uuid);
                    System.err.println("Xray pat no  " + patientNoTxt.getText());

                    com.afrisoftech.reports.XrayResultPdf policy = new com.afrisoftech.reports.XrayResultPdf();

                    policy.XrayResultPdf(connectDB, xrayEndDatePicker.getDate(), xrayEndDatePicker.getDate(), patientNoTxt.getText(), addPdfToDicom, uuid, xrayNo);

                    javax.swing.JOptionPane.showMessageDialog(this, "X-RAY report posted successfully", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    //System.err.println("+++"+com.afrisoftech.hospital.HospitalMain.radiologyPdfPath);
                    //com.afrisoftech.lib.RadiologyRequestJSON.addPdfToUUID(connectDB, uuid, com.afrisoftech.hospital.HospitalMain.radiologyPdfPath, doctorTextField.getText(), patientNameTxt.getText());
                    this.saveresultsButton.setEnabled(true);
                    patientNoTxt.setText("");

                    patientNameTxt.setText("");
                    //jTextField2.setText("");

                    ageTxt.setText("");
                    nooffilmTextField.setText("");
                    // clearButton.doClick();
                } catch (Exception sq) {
                    this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
                    clearButton.doClick();
                    try {
                        connectDB.rollback();
                    } catch (java.sql.SQLException sql) {
                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                    sq.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                }
            }

        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "YOU CANNOT SAVE WITHOUT PATIENT NUMBER  ", "Caution Message!", javax.swing.JOptionPane.WARNING_MESSAGE);

        }
//            } else {
//                javax.swing.JOptionPane.showMessageDialog(this, "Enter a digit numbers without characterrs for no of films", "Caution Message!", javax.swing.JOptionPane.WARNING_MESSAGE);
//
//            }
//        } catch (Exception numberformat) {
//            numberformat.printStackTrace();
//            javax.swing.JOptionPane.showMessageDialog(this, "YOU CANNOT SAVE WITHOUT PATIENT NUMBER \nand entered the number of films used", "Caution Message!", javax.swing.JOptionPane.WARNING_MESSAGE);
//
//        }
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_saveresultsButtonActionPerformed

    private void xrayTestTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_xrayTestTableMouseClicked
        // jTextField1.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
        //        jTextField91.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 0).toString());
        //   jTextField10.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 2).toString());

        /*   for (int k = 0; k < jTable1.getRowCount(); k++) {
         for (int r = 0; r < jTable1.getColumnCount(); r++) {
         jTable1.getModel().setValueAt(null, k, r);
         }
         }


         try {
         java.sql.Statement stmt = connectDB.createStatement();
         java.sql.Statement stmtTable1 = connectDB.createStatement();

         java.sql.ResultSet rset = stmtTable1.executeQuery("SELECT DISTINCT status,specimen FROM pb_lab_standards where code = '" + this.jTable3.getValueAt(jTable3.getSelectedRow(), 1) + "'");

         while (rset.next()) {

         jTextField10.setText(rset.getObject(1).toString());
         jTextField3.setText(rset.getObject(2).toString());
         }
         } catch (java.sql.SQLException sqlExec) {

         javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

         }
         int i = 0;
         if (this.jTextField10.getText().toLowerCase().startsWith("t")) {
         this.jPanel11.setVisible(true);
         this.jPanel7.setVisible(false);
         try {
         java.sql.Statement stmt = connectDB.createStatement();


         java.sql.Statement stmtTable1 = connectDB.createStatement();

         java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT typeof_test,units,lower_limit,upper_limit FROM pb_lab_standards WHERE code = '" + this.jTable3.getValueAt(jTable3.getSelectedRow(), 1) + "' AND status = true ORDER BY oid asc");

         while (rsetTable1.next()) {

         System.out.println("Working at table row " + i);
         jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
         jTable1.setValueAt(rsetTable1.getObject(2), i, 2);
         jTable1.setValueAt(rsetTable1.getObject(3), i, 3);
         jTable1.setValueAt(rsetTable1.getObject(4), i, 4);


         i++;

         //                i = i + i;
         //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
         }


         } catch (java.sql.SQLException sqlExec) {

         javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

         }
         } else {
         try {
         this.jPanel7.setVisible(true);
         this.jPanel11.setVisible(false);
         java.sql.Statement stmt = connectDB.createStatement();


         java.sql.Statement stmtTable1 = connectDB.createStatement();

         java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT typeof_test,status FROM pb_lab_standards where code = '" + this.jTable3.getValueAt(jTable3.getSelectedRow(), 1) + "' and status = false");

         while (rsetTable1.next()) {

         System.out.println("Working at table row " + i);
         jTable2.setValueAt(rsetTable1.getObject(1), i, 0);
         // jTable2.setValueAt(rsetTable1.getObject(2), i, 1);
         //  jTable2.setValueAt(rsetTable1.getObject(3), i, 2);
         //jTable1.setValueAt(rsetTable1.getObject(4), i, 3);


         i++;

         //                i = i + i;
         //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
         }


         } catch (java.sql.SQLException sqlExec) {

         javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

         }
         }   */     // TODO add your handling code here:
}//GEN-LAST:event_xrayTestTableMouseClicked

    private void confirmRequestsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_confirmRequestsTableMouseClicked
//        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
//        getList = false;
//        if (this.confirmrequeststable.getValueAt(this.confirmrequeststable.getSelectedRow(), 12) == Boolean.TRUE) {
//            try {
//                java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request "
//                        + "SET collected = true  ,posted_to_lab='CANCELLED POSTING' ,paid =true,collected=true,results=true where "
//                        + "  request_id  = '" + confirmrequeststable.getValueAt(confirmrequeststable.getSelectedRow(), 10).toString().trim() + "'");
//                pstmt46.executeUpdate();
//
//                javax.swing.JOptionPane.showMessageDialog(this, "CANCEL Successful", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
//            } catch (SQLException ex) {
//                Logger.getLogger(XrayResIntfr.class.getName()).log(Level.SEVERE, null, ex);
//            }
//
//        } else if (this.confirmrequeststable.getValueAt(this.confirmrequeststable.getSelectedRow(), 9) == Boolean.TRUE) {
//            java.util.Calendar calendar = java.util.Calendar.getInstance();
//
//            long dateNow = calendar.getTimeInMillis();
//
//            java.sql.Date datenowSql1 = new java.sql.Date(dateNow);
//
//            System.out.println(datenowSql1.toString());
//
//            java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);
//
//            System.out.println(datenowSql.toString());
//            //   try{
//            String billNo = null;
//            String transNo = null;
//            String payMode = null;
//            String patientAcc = null;
//            String cardNo = null;
//            String AccDesc = null;
//            String scheme = null;
//            String cardName = null;
//            String isurer = null;
//            String expDate = null;
//            String staffNo = null;
//
//            String user = null;
//            String accDesc1 = null;
//            String glAcc1 = null;
//            String chbox = null;
//            String units = null;
//            String gacc = null;
//            String request = null;
//            int itemInt = 0;
//            double price = 0.00;
//            String Store = null;
//            double qty = 0.00;
//
//            double amount = 0.00;
//            double sellPrice = 0.00;
//            java.util.Date admDate = null;
//            String visitid = "-";
//            java.util.Date adDate = null;
//            String opvisitid = "-";
//
//            try {
//                connectDB.setAutoCommit(false);
//                java.sql.Statement stm12t = connectDB.createStatement();
//
//                java.sql.Statement stm12 = connectDB.createStatement();
//                java.sql.Statement stm121 = connectDB.createStatement();
//                java.sql.Statement stm1211 = connectDB.createStatement();
//                java.sql.Statement stm122 = connectDB.createStatement();
//                java.sql.Statement stm122x = connectDB.createStatement();
//                java.sql.Statement stm1 = connectDB.createStatement();
//
//                java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
//
//                while (rse12.next()) {
//
//                    patientAcc = rse12.getObject(1).toString();
//                    AccDesc = rse12.getObject(2).toString();
//                }
//
//                java.sql.ResultSet rse12t = stm12t.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
//                while (rse12t.next()) {
//
//                    patientAcc = rse12t.getObject(1).toString();
//                    AccDesc = rse12t.getObject(2).toString();
//                }
//
//                for (int i = confirmrequeststable.getSelectedRow(); i <= confirmrequeststable.getSelectedRow(); i++) {
//                    if (confirmrequeststable.getValueAt(i, 9) != null) {
//                        if (confirmrequeststable.getModel().getValueAt(i, 9) == java.lang.Boolean.TRUE) {
//                            String revCode = (String) confirmrequeststable.getValueAt(i, 13);
//                            String glCode = (String) confirmrequeststable.getValueAt(i, 14);
//                            System.out.println("Count" + i);
//                            java.sql.Statement ps11 = connectDB.createStatement();
//                            java.sql.ResultSet rst11 = ps11.executeQuery("select nextval('lab_request'),current_user");
//                            while (rst11.next()) {
//                                rst11.getObject(1).toString();
//
//                                billNo = rst11.getObject(1).toString();
//                                user = rst11.getObject(2).toString();
//
//                            }
//
//                            request = confirmrequeststable.getValueAt(i, 7).toString();
//                            if (request.startsWith("I")) {
//
//                                java.sql.Statement pst = connectDB.createStatement();
//                                java.sql.ResultSet rstt = pst.executeQuery("select nextval('transaction_no_seq')");
//
//                                while (rstt.next()) {
//                                    rstt.getObject(1).toString();
//
//                                    transNo = rstt.getObject(1).toString();
//                                }
//
//                                java.sql.Statement stm121t = connectDB.createStatement();
//
//                                java.sql.Statement stm12n = connectDB.createStatement();
//                                java.sql.ResultSet rse12n = stm12n.executeQuery("select adm_date from hp_inpatient_register where patient_no ='" + confirmrequeststable.getValueAt(i, 1).toString() + "'");
//                                while (rse12n.next()) {
//                                    admDate = rse12n.getDate(1);
//                                }
//                                java.sql.Statement ps11w1 = connectDB.createStatement();
//                                java.sql.ResultSet rst11w1 = ps11w1.executeQuery("select visit_id from hp_admission where patient_no = '" + confirmrequeststable.getValueAt(i, 1).toString() + "' and check_out = false");
//                                while (rst11w1.next()) {
//
//                                    visitid = rst11w1.getObject(1).toString();
//                                }
//
//                                System.out.println(admDate);
//                                // if (exp.before(date)){
//                                //  if (adDate.before(admDate)){
//                                //    javax.swing.JOptionPane.showMessageDialog(this, "Admission date is : " +admDate +" CHECK billing date","Date Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);
//                                // }else{
//
//                                if (!(confirmrequeststable.getValueAt(i, 3).toString().equals("Cash"))) {
//                                    java.sql.ResultSet rse1 = stm1.executeQuery("select pay_mode,account_no,description,payer,payer,expiry_date,"
//                                            + "account_no from hp_inpatient_register where patient_no ='" + confirmrequeststable.getValueAt(i, 1).toString() + "'");
//                                    while (rse1.next()) {
//                                        payMode = dbObject.getDBObject(rse1.getObject(1), "-");
//                                        cardNo = dbObject.getDBObject(rse1.getObject(2), "-");
//                                        scheme = dbObject.getDBObject(rse1.getObject(3), "-");
//                                        cardName = dbObject.getDBObject(rse1.getObject(4), "-");
//                                        isurer = dbObject.getDBObject(rse1.getObject(5), "-");
//                                        expDate = dbObject.getDBObject(rse1.getObject(6), "NULL");
//                                        staffNo = dbObject.getDBObject(rse1.getObject(7), "-");
//                                    }
//                                }
//
//                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
//                                //  for (int i = 0; i < confirmrequeststable.getRowCount(); i++)
//                                {
//                                    pstmt.setString(1, confirmrequeststable.getValueAt(i, 1).toString());
//                                    pstmt.setObject(2, confirmrequeststable.getValueAt(i, 4).toString());
//                                    pstmt.setString(3, "General");
//                                    pstmt.setString(4, confirmrequeststable.getValueAt(i, 3).toString());
//                                    pstmt.setString(5, transNo);
//                                    pstmt.setString(7, scheme);
//                                    pstmt.setString(6, cardNo);
//                                    pstmt.setString(8, cardName);
//                                    pstmt.setString(9, isurer);
//                                    pstmt.setDate(10, null);
//                                    pstmt.setString(11, "");
//                                    pstmt.setDouble(12, java.lang.Double.valueOf(confirmrequeststable.getValueAt(i, 6).toString()));
//                                    pstmt.setDouble(13, 0.00);
//                                    pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(confirmrequeststable.getValueAt(i, 0).toString())));
//                                    pstmt.setObject(15, patientAcc);
//                                    pstmt.setString(16, revCode);
//                                    pstmt.setDouble(17, java.lang.Double.valueOf(confirmrequeststable.getValueAt(i, 5).toString()));
//                                    pstmt.setObject(18, staffNo);
//                                    pstmt.setBoolean(19, false);
//                                    pstmt.setString(20, "Billing");
//                                    pstmt.setBoolean(21, false);
//                                    pstmt.setString(22, AccDesc);
//                                    pstmt.setString(23, visitid);
//                                    pstmt.setString(24, user);
//                                    pstmt.setString(25, billNo);
//                                    pstmt.setString(26, "IP");
//                                    pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
//                                    pstmt.setString(28, visitid);
//                                    pstmt.executeUpdate();
//
//                                    java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
//                                    pstmt2.setObject(1, glCode);
//                                    pstmt2.setString(2, revCode);
//                                    pstmt2.setString(3, confirmrequeststable.getValueAt(i, 1).toString());
//                                    pstmt2.setString(4, confirmrequeststable.getValueAt(i, 2).toString());
//                                    pstmt2.setString(5, "");
//                                    pstmt2.setString(6, cardNo);
//                                    pstmt2.setString(7, cardName);
//                                    pstmt2.setString(8, "IP");
//                                    pstmt2.setString(9, confirmrequeststable.getValueAt(i, 8).toString());
//                                    pstmt2.setString(10, confirmrequeststable.getValueAt(i, 3).toString());
//                                    pstmt2.setString(11, "");
//                                    pstmt2.setString(12, "");
//                                    pstmt2.setString(13, "");
//                                    pstmt2.setString(14, confirmrequeststable.getValueAt(i, 4).toString());
//                                    pstmt2.setString(15, "Revenue");
//                                    pstmt2.setDouble(16, 0.00);
//                                    pstmt2.setDouble(17, java.lang.Double.valueOf(confirmrequeststable.getValueAt(i, 6).toString()));
//                                    pstmt2.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(confirmrequeststable.getValueAt(i, 0).toString())));
//                                    pstmt2.setString(19, transNo);
//                                    pstmt2.setBoolean(20, false);
//                                    pstmt2.setBoolean(21, false);
//                                    pstmt2.setBoolean(22, false);
//                                    pstmt2.setString(23, user);
//                                    pstmt2.executeUpdate();
//
//                                }
//                                //}
//                                // }
//
//                                java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request"
//                                        + " SET paid=true,posted_to_lab='XRAY POSTING' "
//                                        + "where  request_id  = '" + confirmrequeststable.getValueAt(confirmrequeststable.getSelectedRow(), 10).toString().trim() + "'");
//                                pstmt46.executeUpdate();
//
////end of inpatients
//                            } else {//OUT PATIENTS
//
//                                java.sql.Statement ps11w1 = connectDB.createStatement();
//                                java.sql.ResultSet rst11w1 = ps11w1.executeQuery("select distinct slip_no,date from credit_acc_slip where patient_no = '" + confirmrequeststable.getValueAt(confirmrequeststable.getSelectedRow(), 1).toString() + "' order by date desc limit 1");
//                                while (rst11w1.next()) {
//
//                                    opvisitid = rst11w1.getObject(1).toString();
//                                }
//                                if (confirmrequeststable.getValueAt(i, 3).toString().trim().toLowerCase().startsWith("cash")) {
//                                    java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into hp_patient_billing values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,trim(?))");
//
//                                    pstmt2.setString(1, confirmrequeststable.getValueAt(i, 1).toString());
//
//                                    pstmt2.setString(2, confirmrequeststable.getValueAt(i, 2).toString());
//                                    pstmt2.setString(3, confirmrequeststable.getValueAt(i, 3).toString());
//                                    pstmt2.setString(4, "General");
//                                    pstmt2.setString(5, confirmrequeststable.getValueAt(i, 4).toString());
//                                    pstmt2.setDouble(6, java.lang.Double.valueOf(confirmrequeststable.getValueAt(i, 5).toString()));
//                                    pstmt2.setDouble(7, java.lang.Double.valueOf(confirmrequeststable.getValueAt(i, 6).toString()));
//                                    pstmt2.setObject(8, glCode);
//                                    pstmt2.setDate(9, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(datenowSql1.toString())));
//                                    pstmt2.setString(10, opvisitid);
//
//                                    pstmt2.setString(11, user);
//                                    pstmt2.setBoolean(12, false);
//                                    pstmt2.setString(13, revCode);
//                                    pstmt2.setString(14, billNo);
//                                    pstmt2.setString(15, confirmrequeststable.getValueAt(i, 7).toString());
//                                    pstmt2.executeUpdate();
//
//                                    java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request"
//                                            + " SET posted_to_lab='XRAY POSTING' "
//                                            + "where  request_id  = '" + confirmrequeststable.getValueAt(confirmrequeststable.getSelectedRow(), 10).toString().trim() + "'");
//                                    pstmt46.executeUpdate();
//
//                                } else if (confirmrequeststable.getValueAt(i, 3).toString().trim().toLowerCase().startsWith("scheme")) {
//
//                                    java.sql.ResultSet rse1 = stm1.executeQuery("select pay_mode,account_no,description,payer,payer,expiry_date,"
//                                            + "account_no from hp_inpatient_register where patient_no ='" + confirmrequeststable.getValueAt(i, 1).toString() + "'");
//                                    while (rse1.next()) {
//                                        payMode = dbObject.getDBObject(rse1.getObject(1), "-");
//                                        cardNo = dbObject.getDBObject(rse1.getObject(2), "-");
//                                        scheme = dbObject.getDBObject(rse1.getObject(3), "-");
//                                        cardName = dbObject.getDBObject(rse1.getObject(4), "-");
//                                        isurer = dbObject.getDBObject(rse1.getObject(5), "-");
//                                        expDate = dbObject.getDBObject(rse1.getObject(6), "NULL");
//                                        staffNo = dbObject.getDBObject(rse1.getObject(7), "-");
//                                    }
//
//                                    java.sql.Statement pstm121t = connectDB.createStatement();
//                                    java.sql.ResultSet rse121t = pstm121t.executeQuery("select activity from pb_activity where code ='" + glCode + "'");
//
//                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
//                                    pstmt.setString(1, confirmrequeststable.getValueAt(i, 1).toString());
//                                    pstmt.setObject(2, confirmrequeststable.getValueAt(i, 4).toString());
//                                    pstmt.setString(3, "General");
//                                    pstmt.setString(4, confirmrequeststable.getValueAt(i, 3).toString());
//                                    pstmt.setString(5, transNo);
//                                    pstmt.setString(7, scheme);
//                                    pstmt.setString(6, cardNo);
//                                    pstmt.setString(8, cardName);
//                                    pstmt.setString(9, isurer);
//                                    pstmt.setDate(10, null);
//                                    pstmt.setString(11, "");
//                                    pstmt.setDouble(12, java.lang.Double.valueOf(confirmrequeststable.getValueAt(i, 6).toString()));
//                                    pstmt.setDouble(13, 0.00);
//                                    pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(confirmrequeststable.getValueAt(i, 0).toString())));
//                                    pstmt.setObject(15, patientAcc);
//                                    pstmt.setString(16, revCode);
//                                    pstmt.setDouble(17, java.lang.Double.valueOf(confirmrequeststable.getValueAt(i, 5).toString()));
//                                    pstmt.setObject(18, staffNo);
//                                    pstmt.setBoolean(19, false);
//                                    pstmt.setString(20, "Billing");
//                                    pstmt.setBoolean(21, false);
//                                    pstmt.setString(22, AccDesc);
//                                    pstmt.setString(23, opvisitid);
//                                    pstmt.setString(24, user);
//                                    pstmt.setString(25, billNo);
//                                    pstmt.setString(26, "OP");
//                                    pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
//                                    pstmt.setString(28, opvisitid);
//                                    pstmt.executeUpdate();
//
//                                    java.sql.PreparedStatement pstmt2v = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
//                                    pstmt2v.setObject(1, glCode);
//                                    pstmt2v.setString(2, revCode);
//                                    pstmt2v.setString(3, confirmrequeststable.getValueAt(i, 1).toString());
//                                    pstmt2v.setString(4, confirmrequeststable.getValueAt(i, 2).toString());
//                                    pstmt2v.setString(5, "");
//                                    pstmt2v.setString(6, cardNo);
//                                    pstmt2v.setString(7, cardName);
//                                    pstmt2v.setString(8, "OP");
//                                    pstmt2v.setString(9, confirmrequeststable.getValueAt(i, 8).toString());
//                                    pstmt2v.setString(10, confirmrequeststable.getValueAt(i, 3).toString());
//                                    pstmt2v.setString(11, "");
//                                    pstmt2v.setString(12, "");
//                                    pstmt2v.setString(13, "");
//                                    pstmt2v.setString(14, confirmrequeststable.getValueAt(i, 4).toString());
//                                    pstmt2v.setString(15, "Revenue");
//                                    pstmt2v.setDouble(16, 0.00);
//                                    pstmt2v.setDouble(17, java.lang.Double.valueOf(confirmrequeststable.getValueAt(i, 6).toString()));
//                                    pstmt2v.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(confirmrequeststable.getValueAt(i, 0).toString())));
//                                    pstmt2v.setString(19, transNo);
//                                    pstmt2v.setBoolean(20, false);
//                                    pstmt2v.setBoolean(21, false);
//                                    pstmt2v.setBoolean(22, false);
//                                    pstmt2v.setString(23, user);
//                                    pstmt2v.executeUpdate();
//                                    java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request"
//                                            + " SET paid=true,posted_to_lab='XRAY POSTING' "
//                                            + "where  request_id  = '" + confirmrequeststable.getValueAt(confirmrequeststable.getSelectedRow(), 10).toString().trim() + "'");
//                                    pstmt46.executeUpdate();
//                                }
//
//                            }
//                        }
//
//                    }
//                }
//
//                javax.swing.JOptionPane.showMessageDialog(this, "X-RAY BILL RAISED Successfully", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
//
//                //}
//                connectDB.commit();
//                connectDB.setAutoCommit(true);
//
//                for (int k = 0; k < confirmrequeststable.getRowCount(); k++) {
//                    for (int r = 0; r < confirmrequeststable.getColumnCount(); r++) {
//                        confirmrequeststable.getModel().setValueAt(null, k, r);
//                    }
//                }
//
//            } catch (Exception sq) {
//
//                try {
//                    connectDB.rollback();
//                } catch (java.sql.SQLException sql) {
//                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
//                }
//                sq.printStackTrace();
//                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
//
//            }
//        }
//        refreshbutton.doClick();
//        jTabbedPane1.setSelectedIndex(1);
//        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
//        getList = true;

    }//GEN-LAST:event_confirmRequestsTableMouseClicked

    private void radiographerTabbedPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radiographerTabbedPaneMouseClicked
        if (radiographerTabbedPane.getSelectedIndex() == 2) {
            getList = false;
        } else {
            getList = true;
        }
    }//GEN-LAST:event_radiographerTabbedPaneMouseClicked

    private void refreshbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshbuttonActionPerformed
        runGetListThread();
//        Thread getListThread = new GetListThread();
//        getListThread.start();

//        Thread getConfirmListThread = new GetConfirmListThread();
//        getConfirmListThread.start();
        runconfirmGetListThread();
        radiologyResultsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT date, patient_no, patient_name, xray_no, examination, ( doctor) AS doctor_requesting, user_name as radiologist,uid,uuid, doc_read as read,false as match_patient FROM hp_xray_results WHERE date::date BETWEEN '" + xrayStartDatePicker.getDate() + "' AND '" + xrayEndDatePicker.getDate() + "' ORDER BY 1,3,4"));

        spacerLbl.setText("Displaying " + radiologyResultsTable.getRowCount() + " reported procedures.");

    }//GEN-LAST:event_refreshbuttonActionPerformed

    class GetListThread extends Thread {

        @Override
        public void run() {
            runGetListThread();
        }
    }

    class GetConfirmListThread extends Thread {

        @Override
        public void run() {
            runconfirmGetListThread();
        }
    }

    private void searchTextFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchTextFieldCaretUpdate
        if (outPatientChkbx.isSelected()) {
            if (searchTextField.getCaretPosition() >= 3) {
                /*this.paidResultsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                        + "SELECT DISTINCT trans_date,patient_no,patient_name,pb.payment_mode,service,quantity,amount,bed_no as Request_No,( doctor) AS doctor,"
                        + "false as Approve,request_id as Request_id,time_due,notes ,  (SELECT uid FROM hp_lims_request hlr WHERE bed_no = request_no and hlr.patient_no = pb.patient_no and test ilike  service  LIMIT 1 ) as uid "
                        + " FROM pb_doctors_request pb WHERE"
                        + " (pb.revenue_code ilike 'X-RAY%' OR pb.revenue_code ilike 'XRAY%') and  paid = true AND"
                        + " collected = false and trans_date  > '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(xrayEndDatePicker.getDate()) + "'::date - 60 "
                        + "and patient_no ilike '%" + searchTextField.getText() + "%' AND patient_no IN (SELECT patient_no FROM hp_patient_visit WHERE patient_no ILIKE '%" + searchTextField.getText() + "%') "
                        + " UNION "
                        + "SELECT DISTINCT date as trans_date,patient_no, dealer as patient_name,payment_mode,description as service,quantity, debit as amount, patient_no as  Request_No,'' as doctor,"
                        + "false as Approve, receipt_no as Request_id,now()::time(0)::varchar as time_due, '' as notes , (SELECT uid FROM hp_lims_request hlr WHERE ac_cash_collection.receipt_no = hlr.request_id and hlr.patient_no = ac_cash_collection.patient_no and test ilike  description  LIMIT 1 )  AS uid"
                        + " FROM ac_cash_collection  WHERE  patient_no ilike '%" + searchTextField.getText() + "%' and "
                        + " ((SELECT activity FROM pb_activity WHERE ac_cash_collection.activity_code = pb_activity.code) ilike 'X-RAY' or (SELECT activity FROM pb_activity WHERE ac_cash_collection.activity_code = pb_activity.code) ilike 'XRAY') AND "
                        + "  patient_no NOT IN (SELECT patient_no FROM pb_doctors_request WHERE trans_date  > '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(xrayEndDatePicker.getDate()) + "'::date - 2 ) AND date  > '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(xrayEndDatePicker.getDate()) + "'::date - 2 "
                        + " UNION "
                        + "SELECT date as trans_date, patient_no, dealer as patient_name, payment_mode, description as service, quantity, debit, "
                        + "receipt_no as Request_no, '' as doctor, false as Approve, receipt_no as Request_id, now()::time(0)::varchar as time_due, '' as notes, '' as uid from ac_cash_collection WHERE patient_no ilike '%" + searchTextField.getText() + "%' AND "
                        + "date > '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(xrayEndDatePicker.getDate()) + "'::date - 4 AND patient_no NOT IN (SELECT DISTINCT patient_no FROM pb_doctors_request WHERE "
                        + "(revenue_code ilike 'X-RAY%' OR revenue_code ilike 'XRAY%') and  paid = true AND trans_date > '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(xrayEndDatePicker.getDate()) + "'::date - 60) AND "
                        + " ((SELECT activity FROM pb_activity where ac_cash_collection.activity_code = pb_activity.code) "
                        + " ILIKE 'X-RAY%' OR (SELECT activity FROM pb_activity where ac_cash_collection.activity_code = pb_activity.code) ilike 'XRAY%') "
                        + "ORDER BY trans_date asc"));*/

                this.paidResultsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                        + "SELECT DISTINCT trans_date,patient_no,patient_name,pb.payment_mode,service,quantity,amount,(SELECT bed_no FROM pb_doctors_request pr WHERE pr.trans_date = pb.trans_date AND pr.patient_no = pb.patient_no AND pr.service = pb.service ORDER BY pr.trans_date DESC LIMIT 1) as Request_No,  doctor  AS doctor,"
                        + "false as Approve,(SELECT request_id FROM pb_doctors_request pr WHERE pr.trans_date = pb.trans_date AND pr.patient_no = pb.patient_no AND pr.service = pb.service ORDER BY pr.trans_date DESC LIMIT 1) as Request_id,time_due,(SELECT doctor FROM hp_patient_billing WHERE hp_patient_billing.patient_no = pb.patient_no AND pb.inv_no = hp_patient_billing.inpatient_no LIMIT 1) as receipt_no,notes, "
                        + "(SELECT uid FROM hp_lims_request hlr WHERE (pb.bed_no = hlr.request_id OR hlr.request_id = (SELECT doctor FROM hp_patient_billing WHERE hp_patient_billing.patient_no = pb.patient_no AND pb.inv_no = hp_patient_billing.inpatient_no LIMIT 1) ) and hlr.patient_no = pb.patient_no and test ilike  service  LIMIT 1 ) as uid "
                        + " FROM pb_doctors_request pb WHERE"
                        + " (pb.requisition_no ilike 'X-RAY' or pb.requisition_no ilike 'XRAY') AND paid = true AND"
                        + " results = false and trans_date::date  > current_date - 2 and patient_no ilike '%" + searchTextField.getText() + "%' "
                        + " UNION "
                        + "SELECT DISTINCT date as trans_date,patient_no, dealer as patient_name,payment_mode,description as service,quantity, debit as amount, patient_no as  Request_No,'' as doctor,"
                        + "false as Approve, receipt_no as Request_id,now()::time(0)::varchar as time_due,receipt_no, '' as notes , (SELECT uid FROM hp_lims_request hlr WHERE ac_cash_collection.receipt_no = hlr.request_id and hlr.patient_no = ac_cash_collection.patient_no and test ilike  description  LIMIT 1 ) AS uid"
                        + " FROM ac_cash_collection WHERE"
                        + " ((SELECT department FROM pb_activity WHERE ac_cash_collection.activity_code = pb_activity.code) ilike 'XRY' ) AND "
                        + "  UPPER(patient_no || '' ||description) NOT IN (SELECT UPPER(patient_no || '' || service) FROM pb_doctors_request WHERE trans_date::date  > current_date - 2) and patient_no ilike '%" + searchTextField.getText() + "%' AND date > current_date -2"
                        + " UNION "
                        + "SELECT DISTINCT date::date as trans_date,patient_no, funsoft_get_patient_name(patient_no) as patient_name,payment_mode, service as service, dosage as quantity, debit as amount, patient_no as  Request_No,'' as doctor,"
                        + "false as Approve, reference as Request_id, now()::time(0)::varchar as time_due, reference as receipt_no, '' as notes , (SELECT uid FROM hp_lims_request hlr WHERE hpc.reference = request_no and hlr.patient_no = hpc.patient_no and test ilike  service  LIMIT 1 ) as uid "
                        + " FROM hp_patient_card hpc WHERE collected = false AND "
                        + " upper(main_service) IN (SELECT upper(activity) FROM pb_activity WHERE upper(department) = upper('XRY')) AND "
                        + "  patient_no NOT IN (SELECT patient_no FROM pb_doctors_request WHERE trans_date::date  > current_date - 2) AND date::date > current_date -2  and patient_no ilike '%" + searchTextField.getText() + "%'"
                        + "ORDER BY 1 asc"));

                this.confirmRequestsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                        + "select DISTINCT trans_date,patient_no,patient_name,pb.payment_mode,service,quantity,amount,inv_no,doctor,false as bill,"
                        + "request_id as Request_id,time_due,false as cancel,revenue_code,gl_code  from pb_doctors_request pb"
                        + " WHERE (pb.revenue_code ilike 'X-RAY%' OR pb.revenue_code ilike 'XRAY%')"
                        + " and paid = false AND collected = false and trans_date  > '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(xrayEndDatePicker.getDate()) + "'::date - 2"
                        + " and patient_no ilike '%" + searchTextField.getText() + "%' AND patient_no IN (SELECT patient_no FROM hp_patient_visit WHERE patient_no ILIKE '%" + searchTextField.getText() + "%') ORDER BY trans_date asc"));

            }
        } else {
            if (searchTextField.getCaretPosition() >= 3) {
                this.paidResultsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                        + "SELECT DISTINCT trans_date,patient_no,patient_name,pb.payment_mode,service,quantity,amount,(SELECT bed_no FROM pb_doctors_request pr WHERE pr.trans_date = pb.trans_date AND pr.patient_no = pb.patient_no AND pr.service = pb.service ORDER BY pr.trans_date DESC LIMIT 1) as Request_No,  doctor  AS doctor,"
                        + "false as Approve,(SELECT request_id FROM pb_doctors_request pr WHERE pr.trans_date = pb.trans_date AND pr.patient_no = pb.patient_no AND pr.service = pb.service ORDER BY pr.trans_date DESC LIMIT 1) as Request_id,time_due,(SELECT doctor FROM hp_patient_billing WHERE hp_patient_billing.patient_no = pb.patient_no AND pb.inv_no = hp_patient_billing.inpatient_no LIMIT 1) as receipt_no,notes, (SELECT uid FROM hp_lims_request hlr WHERE pb.bed_no = hlr.request_id and hlr.patient_no = pb.patient_no and test ilike  service  LIMIT 1 ) as uid "
                        + " FROM pb_doctors_request pb WHERE"
                        + " (pb.requisition_no ilike 'X-RAY' or pb.requisition_no ilike 'XRAY') AND paid = true AND"
                        + " results = false and trans_date::date  > current_date - 2 and patient_no ilike '%" + searchTextField.getText() + "%' "
                        + " UNION "
                        + "SELECT DISTINCT date as trans_date,patient_no, dealer as patient_name,payment_mode,description as service,quantity, debit as amount, patient_no as  Request_No,'' as doctor,"
                        + "false as Approve, receipt_no as Request_id,now()::time(0)::varchar as time_due,receipt_no, '' as notes , (SELECT uid FROM hp_lims_request hlr WHERE ac_cash_collection.receipt_no = hlr.request_id and hlr.patient_no = ac_cash_collection.patient_no and test ilike  description  LIMIT 1 ) AS uid"
                        + " FROM ac_cash_collection WHERE"
                        + " ((SELECT department FROM pb_activity WHERE ac_cash_collection.activity_code = pb_activity.code) ilike 'XRY' ) AND "
                        + "  UPPER(patient_no || '' ||description) NOT IN (SELECT UPPER(patient_no || '' || service) FROM pb_doctors_request WHERE trans_date::date  > current_date - 2) and patient_no ilike '%" + searchTextField.getText() + "%' AND date > current_date -2"
                        + " UNION "
                        + "SELECT DISTINCT date::date as trans_date,patient_no, funsoft_get_patient_name(patient_no) as patient_name,payment_mode, service as service, dosage as quantity, debit as amount, patient_no as  Request_No,'' as doctor,"
                        + "false as Approve, reference as Request_id, now()::time(0)::varchar as time_due, reference as receipt_no, '' as notes , (SELECT uid FROM hp_lims_request hlr WHERE hpc.reference = request_no and hlr.patient_no = hpc.patient_no and test ilike  service  LIMIT 1 ) as uid "
                        + " FROM hp_patient_card hpc WHERE collected = false AND "
                        + " upper(main_service) IN (SELECT upper(activity) FROM pb_activity WHERE upper(department) = upper('XRY')) AND "
                        + "  patient_no NOT IN (SELECT patient_no FROM pb_doctors_request WHERE trans_date::date  > current_date - 2) AND date::date > current_date -2  and patient_no ilike '%" + searchTextField.getText() + "%'"
                        + "ORDER BY 1 asc"));

//                this.confirmrequeststable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
//                        + "select DISTINCT trans_date,patient_no,patient_name,pb.payment_mode,service,quantity,amount,inv_no,doctor,false as bill,"
//                        + "request_id as Request_id,time_due,false as cancel,revenue_code,gl_code  from pb_doctors_request pb"
//                        + " WHERE (pb.revenue_code ilike 'X-RAY' OR pb.revenue_code ilike 'XRAY')"
//                        + " and paid = false AND collected = false and trans_date  > '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(xraydatePicker.getDate()) + "'::date - 2"
//                        + " and patient_no ilike '%" + searchTextField.getText() + "%' AND patient_no IN (SELECT patient_no FROM hp_admission WHERE patient_no ILIKE '%"+ searchTextField.getText() +"%' AND discharge = false) ORDER BY trans_date asc"));
            }
        }
    }//GEN-LAST:event_searchTextFieldCaretUpdate

    private void patientCardBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientCardBtnActionPerformed
        com.afrisoftech.reports.PatientCardPdf policyReport = new com.afrisoftech.reports.PatientCardPdf();//connectDB, transdatePicker.getDate(), transdatePicker.getDate(),nameNoTxt.getText());
//
        policyReport.PatientCardPdf(connectDB, xrayEndDatePicker.getDate(), xrayEndDatePicker.getDate(), patientNoTxt.getText(), false);
        // TODO add your handling code here:
    }//GEN-LAST:event_patientCardBtnActionPerformed

    private void patientNoTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientNoTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientNoTxtActionPerformed

    
    private void setDetails() {
        uidMatchTxt.setText(radiologyResultsTable.getValueAt(radiologyResultsTable.getSelectedRow(), 7).toString());
        uuidMatchTxt.setText(radiologyResultsTable.getValueAt(radiologyResultsTable.getSelectedRow(), 8).toString());
        currentNoTxt.setText(radiologyResultsTable.getValueAt(radiologyResultsTable.getSelectedRow(), 1).toString());
        currentNameTxt.setText(radiologyResultsTable.getValueAt(radiologyResultsTable.getSelectedRow(), 2).toString());
        
    }
    private void radiologyResultsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_radiologyResultsTableMouseClicked

        if (radiologyResultsTable.getSelectedColumn() == 10) {

            setDetails();

            System.out.println("Showing dialog");
            matchPatientDialog.setSize(800, 500);
            matchPatientDialog.setLocationRelativeTo(null);
            matchPatientDialog.setVisible(true);

        }else{
        java.util.Date dates = null;
        uuid = radiologyResultsTable.getValueAt(radiologyResultsTable.getSelectedRow(), 8).toString();

        try {
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT ?::date");
            pstmt.setObject(1, radiologyResultsTable.getValueAt(radiologyResultsTable.getSelectedRow(), 0));
            java.sql.ResultSet rset = pstmt.executeQuery();

            while (rset.next()) {
                dates = rset.getDate(1);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();             //ex.printStackTrace();
        }
        com.afrisoftech.reports.XrayResultPdf policy = new com.afrisoftech.reports.XrayResultPdf();

        policy.XrayResultPdf(connectDB, dates, dates, radiologyResultsTable.getValueAt(radiologyResultsTable.getSelectedRow(), 1).toString(), false, "", radiologyResultsTable.getValueAt(radiologyResultsTable.getSelectedRow(), 3).toString());

        pacsDicomViewerBtn.doClick();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_radiologyResultsTableMouseClicked

    private void submitForPayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitForPayBtnActionPerformed
        for (int i = 0; i < confirmRequestsTable.getRowCount(); i++) {
            if (Boolean.parseBoolean(confirmRequestsTable.getValueAt(i, 9).toString())) {
                try {
                    java.sql.PreparedStatement pstmt4611 = connectDB.prepareStatement("UPDATE hp_patient_billing"
                            + " SET collected = true  "
                            + " where inpatient_no = ? "
                            + " AND upper(service) = ?");
                    pstmt4611.setObject(1, confirmRequestsTable.getValueAt(i, 7).toString().trim());
                    pstmt4611.setString(2, confirmRequestsTable.getValueAt(i, 4).toString().toUpperCase());
                    pstmt4611.executeUpdate();

                } catch (java.sql.SQLException sqe) {
                    sqe.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(this, sqe.getMessage());
                }
            }
        }
        javax.swing.JOptionPane.showMessageDialog(this, "Request(s) submitted to pay point.");
        refreshbutton.doClick();
        radiographerTabbedPane.setSelectedIndex(1);
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getList = true;
        pacsDicomViewerBtn.doClick();
// TODO add your handling code here:
    }//GEN-LAST:event_submitForPayBtnActionPerformed

    private void cancleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancleBtnActionPerformed
        for (int i = 0; i < confirmRequestsTable.getRowCount(); i++) {
            if (Boolean.parseBoolean(confirmRequestsTable.getValueAt(i, 12).toString())) {
                try {
                    java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request "
                            + "SET collected = true  ,posted_to_lab='CANCELLED POSTING' ,paid =true,collected=true,results=true where "
                            + "  request_id  = '" + confirmRequestsTable.getValueAt(i, 10).toString().trim() + "'");
                    pstmt46.executeUpdate();

                    javax.swing.JOptionPane.showMessageDialog(this, "CANCEL Successful", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                } catch (SQLException ex) {
                    Logger.getLogger(XrayResIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
        refreshbutton.doClick();
        radiographerTabbedPane.setSelectedIndex(1);
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getList = true;// TODO add your handling code here:
    }//GEN-LAST:event_cancleBtnActionPerformed

    private void pacsDicomViewerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pacsDicomViewerBtnActionPerformed

        if (uuid != null && !uuid.isEmpty()) {

            if (java.awt.Desktop.isDesktopSupported()) {

                String PacsServerIP = com.afrisoftech.lib.RadiologyRequestJSON.getPacsServerIPAdd(connectDB);
                String PacsPort = com.afrisoftech.lib.RadiologyRequestJSON.getPacsServerPort(connectDB);

                try {
                    //                    java.awt.Desktop.getDesktop().browse(java.net.URI.create("http://" + PacsServerIP + ":" + PacsPort + "/osimis-viewer/app/index.html?study=" + uuid));
                    java.awt.Desktop.getDesktop().browse(java.net.URI.create("http://pacs:Password_123@" + PacsServerIP + ":" + PacsPort + "/osimis-viewer/app/index.html?study=" + uuid));
                } catch (IOException ex) {
                    Logger.getLogger(ConsultationIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {

//                //        SwingUtilities.invokeLater(() -> {
//                    // PacsViewerMain jFrameTest = new PacsViewerMain();
//                    //new javax.swing.JInternalFrame("Pulseset HMIS :: Orthanc Dicom/PACS Viewer");
//                    // jFrameTest.setTitle("Orthanc Dicom/PACS Viewer");
//                    // jFrameTest.setDefaultCloseOperation(EXIT_ON_CLOSE);
//                    //        pacsInternalFrame = new javax.swing.JInternalFrame("Pulseset HMIS PACS/Dicom Viewer");
//                    //        com.afrisoftech.hospital.HospitalMain.saccopn.add(pacsInternalFrame);//, javax.swing.JLayeredPane.DEFAULT_LAYER);
//                //        try {
//                    //            pacsInternalFrame.setSelected(true);
//                    //        } catch (java.beans.PropertyVetoException pvt) {
//                    //        }
//                //        pacsInternalFrame.setVisible(false);
//                pacsInternalFrame.setDefaultCloseOperation(javax.swing.JInternalFrame.HIDE_ON_CLOSE);
//
//                pacsCount = pacsCount++;
//                pacsInternalFrame.setSize(com.afrisoftech.hospital.HospitalMain.saccopn.getSize());
//
//                Platform.runLater(() -> {
//
//                    //  jFrameTest.setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
//                    if (pacsCount < 1) {
//                        // jfxPanel =
//                        //  jFrameTest.add(jfxPanel);
//                        pacsInternalFrame.add(jfxPanel);
//                        webView = new WebView();
//                        jfxPanel.setScene(new Scene(webView));
//                    }
//                    //jFrameTest.setMaximumSize(Toolkit.getDefaultToolkit().getScreenSize());
//                    //    jFrameTest.setVisible(true);
//                    pacsInternalFrame.setVisible(true);
//                    pacsInternalFrame.setEnabled(true);
//                    pacsInternalFrame.setMaximizable(true);
//                    pacsInternalFrame.setClosable(true);
//                    pacsInternalFrame.setResizable(true);
//                    pacsInternalFrame.setIconifiable(true);
//                    //            try {
//                        //                pacsInternalFrame.setSelected(true);
//                        //            } catch (PropertyVetoException ex) {
//                        //                ex.printStackTrace();
//                        //            }
//                    try {
//                        pacsInternalFrame.setMaximum(true);
//                    } catch (PropertyVetoException ex) {
//                        ex.printStackTrace();
//                    }
//                    //            try {
//                        //                pacsInternalFrame.setIcon(true);
//                        //            } catch (PropertyVetoException ex) {
//                        //                ex.printStackTrace();
//                        //            }
//                    //);
//                // Create a trust manager that does not validate certificate chains
//                TrustManager[] trustAllCerts = new TrustManager[]{
//                    new X509TrustManager() {
//                        public java.security.cert.X509Certificate[] getAcceptedIssuers() {
//                            return null;
//                        }
//
//                        public void checkClientTrusted(
//                            java.security.cert.X509Certificate[] certs, String authType) {
//                        }
//
//                        public void checkServerTrusted(
//                            java.security.cert.X509Certificate[] certs, String authType) {
//                        }
//                    }
//                };
//
//                // Install the all-trusting trust manager
//                try {
//                    SSLContext sc = SSLContext.getInstance("SSL");
//                    sc.init(null, trustAllCerts, new java.security.SecureRandom());
//                    HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
//                } catch (GeneralSecurityException e) {
//                }
//                webView.getEngine().setJavaScriptEnabled(true);
//                webView.getEngine().getCreatePopupHandler(); //setOnAlert(null);
//                //webView.getEngine().load("http://localhost:8042/");
//
//                String PacsServerIP = com.afrisoftech.lib.RadiologyRequestJSON.getPacsServerIPAdd(connectDB);
//                String PacsPort = com.afrisoftech.lib.RadiologyRequestJSON.getPacsServerPort(connectDB);
//                //String uuid = radiologyResultsTbl.getValueAt(radiologyResultsTbl.getSelectedRow(), 5).toString();
//
//                System.out.println("Selected study UUID [" + uuid + "]");
//
//                webView.getEngine().load("http://" + PacsServerIP + ":" + PacsPort + "/osimis-viewer/app/index.html?study=" + uuid);
//            });
//            //        });
//
//    //      com.afrisoftech.laboratory.PatHistIntfr comp = new com.afrisoftech.laboratory.PatHistIntfr(connectDB, pConnDB);
//    //       if (!pacsInternalFrame.isClosed()) {
//        //       } else {
//        pacsInternalFrame.setVisible(true);
//
//        //       }
//        this.invalidate();
//        this.validate();
//        this.updateUI();
            }

        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a patient Dicom study to view", "Error selecting Dicom study", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_pacsDicomViewerBtnActionPerformed

    private void refreshResultsListingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshResultsListingBtnActionPerformed

        radiologyResultsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT date, patient_no, patient_name, xray_no, examination, ( doctor) AS doctor_requesting, user_name as radiologist,uid,uuid, doc_read as read,false as match_patient FROM hp_xray_results WHERE date::date BETWEEN '" + xrayStartDatePicker.getDate() + "' AND '" + xrayEndDatePicker.getDate() + "' ORDER BY 1,3,4"));

        spacerLbl.setText("Displaying " + radiologyResultsTable.getRowCount() + " reported procedures.");
        // TODO add your handling code here:
    }//GEN-LAST:event_refreshResultsListingBtnActionPerformed

    private void closeFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFormBtnActionPerformed

        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_closeFormBtnActionPerformed

    private void pacsDicomViewerBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pacsDicomViewerBtn1ActionPerformed
        if (!uidTxt.getText().trim().isEmpty()) {

            uuid = com.afrisoftech.lib.RadiologyRequestJSON.getOrthanoSystemUUID(connectDB, uidTxt.getText());

            System.err.println(">>>>" + uuid);

            if (uuid != null && !uuid.isEmpty()) {
                pacsDicomViewerBtn.doClick();
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "UID "+uidTxt.getText()+" has no associated image on the PACs server", "Error selecting Dicom study", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "The selected request is has no UID to link to the PACs server", "Error selecting Dicom study", javax.swing.JOptionPane.ERROR_MESSAGE);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_pacsDicomViewerBtn1ActionPerformed

    private void jButton54ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton54ActionPerformed
        //System.err.println(""+sampleRegDialog.getSize());
        radiologyResultsTable.setValueAt(false, radiologyResultsTable.getSelectedRow(), 10);
        matchPatientDialog.dispose();// TODO add your handling code here:
    }//GEN-LAST:event_jButton54ActionPerformed

    private void jButton53ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton53ActionPerformed
        String pattNo = paidResultsTable1.getValueAt(paidResultsTable1.getSelectedRow(), 1).toString();
        String pattName = paidResultsTable1.getValueAt(paidResultsTable1.getSelectedRow(), 2).toString();
        String examm = paidResultsTable1.getValueAt(paidResultsTable1.getSelectedRow(), 4).toString();
        int openShift = javax.swing.JOptionPane.showConfirmDialog(this, "Update dicom to patient "+pattName, "Confirm..", javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);

                    if (openShift == javax.swing.JOptionPane.YES_OPTION) {
        try {
            java.sql.PreparedStatement pstmtUpdate = connectDB.prepareStatement("UPDATE hp_xray_results SET patient_no = ?, patient_name = ?, examination = ? WHERE uuid = ?  ");
            pstmtUpdate.setString(1, pattNo);
            pstmtUpdate.setString(2, pattName);
            pstmtUpdate.setString(3, examm);
             pstmtUpdate.setString(4, uuidMatchTxt.getText());
            pstmtUpdate.executeUpdate();
           

            javax.swing.JOptionPane.showMessageDialog(this, "Update  Successful.", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

           
            matchPatientDialog.dispose();
             radiologyResultsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT date, patient_no, patient_name, xray_no, examination, ( doctor) AS doctor_requesting, user_name as radiologist,uid,uuid, doc_read as read,false as match_patient FROM hp_xray_results WHERE date::date BETWEEN '" + xrayStartDatePicker.getDate() + "' AND '" + xrayEndDatePicker.getDate() + "' ORDER BY 1,3,4"));


        } catch (java.sql.SQLException e) {
            e.printStackTrace();
        }
                    }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton53ActionPerformed

    private void searchTextField1CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchTextField1CaretUpdate
        if (searchTextField1.getCaretPosition() >= 3) {
            this.paidResultsTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                        + "SELECT DISTINCT trans_date,patient_no,patient_name,pb.payment_mode,service,quantity,amount,(SELECT bed_no FROM pb_doctors_request pr WHERE pr.trans_date = pb.trans_date AND pr.patient_no = pb.patient_no AND pr.service = pb.service ORDER BY pr.trans_date DESC LIMIT 1) as Request_No,  doctor  AS doctor,"
                        + "false as Approve,(SELECT request_id FROM pb_doctors_request pr WHERE pr.trans_date = pb.trans_date AND pr.patient_no = pb.patient_no AND pr.service = pb.service ORDER BY pr.trans_date DESC LIMIT 1) as Request_id,time_due,(SELECT doctor FROM hp_patient_billing WHERE hp_patient_billing.patient_no = pb.patient_no AND pb.inv_no = hp_patient_billing.inpatient_no LIMIT 1) as receipt_no,notes, "
                        + "(SELECT uid FROM hp_lims_request hlr WHERE (pb.bed_no = hlr.request_id OR hlr.request_id = (SELECT doctor FROM hp_patient_billing WHERE hp_patient_billing.patient_no = pb.patient_no AND pb.inv_no = hp_patient_billing.inpatient_no LIMIT 1) ) and hlr.patient_no = pb.patient_no and test ilike  service  LIMIT 1 ) as uid "
                        + " FROM pb_doctors_request pb WHERE"
                        + " (pb.requisition_no ilike 'X-RAY' or pb.requisition_no ilike 'XRAY') AND paid = true AND"
                        + " results = false and trans_date::date  > current_date - 2 and (patient_no ilike '%" + searchTextField1.getText() + "%' or patient_name ilike '%" + searchTextField1.getText() + "%' )  "
                        + " UNION "
                        + "SELECT DISTINCT date as trans_date,patient_no, dealer as patient_name,payment_mode,description as service,quantity, debit as amount, patient_no as  Request_No,'' as doctor,"
                        + "false as Approve, receipt_no as Request_id,now()::time(0)::varchar as time_due,receipt_no, '' as notes , (SELECT uid FROM hp_lims_request hlr WHERE ac_cash_collection.receipt_no = hlr.request_id and hlr.patient_no = ac_cash_collection.patient_no and test ilike  description  LIMIT 1 ) AS uid"
                        + " FROM ac_cash_collection WHERE"
                        + " ((SELECT department FROM pb_activity WHERE ac_cash_collection.activity_code = pb_activity.code) ilike 'XRY' ) AND "
                        + "  UPPER(patient_no || '' ||description) NOT IN (SELECT UPPER(patient_no || '' || service) FROM pb_doctors_request WHERE trans_date::date  > current_date - 2) and ( patient_no ilike '%" + searchTextField1.getText() + "%' or dealer ilike '%" + searchTextField1.getText() + "%' ) AND date > current_date -2"
                        + " UNION "
                        + "SELECT DISTINCT date::date as trans_date,patient_no, funsoft_get_patient_name(patient_no) as patient_name,payment_mode, service as service, dosage as quantity, debit as amount, patient_no as  Request_No,'' as doctor,"
                        + "false as Approve, reference as Request_id, now()::time(0)::varchar as time_due, reference as receipt_no, '' as notes , (SELECT uid FROM hp_lims_request hlr WHERE hpc.reference = request_no and hlr.patient_no = hpc.patient_no and test ilike  service  LIMIT 1 ) as uid "
                        + " FROM hp_patient_card hpc WHERE collected = false AND "
                        + " upper(main_service) IN (SELECT upper(activity) FROM pb_activity WHERE upper(department) = upper('XRY')) AND "
                        + "  patient_no NOT IN (SELECT patient_no FROM pb_doctors_request WHERE trans_date::date  > current_date - 2) AND date::date > current_date -2  and  ( patient_no ilike '%" + searchTextField1.getText() + "%' or funsoft_get_patient_name(patient_no) ilike '%" + searchTextField1.getText() + "%' ) "
                
                        + "ORDER BY 1 asc"));
        }// TODO add your handling code here:
    }//GEN-LAST:event_searchTextField1CaretUpdate

    private void paidResultsTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paidResultsTable1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_paidResultsTable1MouseClicked
    private void populateTable1(java.lang.String patient_no) {
    }

//    public void run() {
//
//        while (getList) {
//
//            runGetListThread();
//            runconfirmGetListThread();
//            this.listTextField.setText("PATIENTS TESTS PENDING CONFIRMATION IS :-" + pendingPatients + " AND PENDING RESULTS IS :-" + paidPatients);
//
//            try {
//
//                Thread.currentThread().sleep(10000);
//
//            } catch (java.lang.InterruptedException IntExec) {
//
//                javax.swing.JOptionPane.showMessageDialog(this, IntExec.getMessage(), "Interruption Error!", javax.swing.JOptionPane.ERROR_MESSAGE);
//
//            }
//
//            // getList = false;
//        }
//
//    }
    public void runGetListThread() {

        int j = 0;
        int i = 0;
        int n = 0;
        int patNo = 0;
        try {

            java.sql.Statement stmtTable11 = connectDB.createStatement();

            // java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select date,patient_no,name,payment,'false' as bill from hp_patient_visit where transaction_type ilike 'reg%' and date = current_date  ORDER BY date");
//            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT DISTINCT count(patient_no) FROM  pb_doctors_request pb, pb_activity pa"
//                    + " WHERE pb.requisition_no ilike 'X-RAY' "
//                    + " and paid = true AND collected = false and trans_date  BETWEEN '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(xraydatePicker.getDate()) + "' AND '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(xrayenddatePicker.getDate()) + "' ");
//
//            while (rsetTable11.next()) {
//                patNo = rsetTable11.getInt(1);
//                paidPatients = rsetTable11.getString(1);
//
//            }
            System.out.println("SELECT DISTINCT trans_date,patient_no,patient_name,pb.payment_mode,service,quantity,amount,(SELECT bed_no FROM pb_doctors_request pr WHERE pr.trans_date = pb.trans_date AND pr.patient_no = pb.patient_no AND pr.service = pb.service ORDER BY pr.trans_date DESC LIMIT 1) as Request_No,  doctor  AS doctor,"
                    + "false as Approve,(SELECT request_id FROM pb_doctors_request pr WHERE pr.trans_date = pb.trans_date AND pr.patient_no = pb.patient_no AND pr.service = pb.service ORDER BY pr.trans_date DESC LIMIT 1) as Request_id,time_due,(SELECT doctor FROM hp_patient_billing WHERE hp_patient_billing.patient_no = pb.patient_no AND pb.inv_no = hp_patient_billing.inpatient_no LIMIT 1) as receipt_no,notes, (SELECT uid FROM hp_lims_request hlr WHERE pb.bed_no = hlr.request_id and hlr.patient_no = pb.patient_no and test ilike  service  LIMIT 1 ) as uid "
                    + " FROM pb_doctors_request pb WHERE"
                    + " (pb.requisition_no ilike 'X-RAY' or pb.requisition_no ilike 'XRAY') AND paid = true AND"
                    + " results = false and trans_date::date  > current_date - 2 "
                    + " UNION "
                    + "SELECT DISTINCT date as trans_date,patient_no, dealer as patient_name,payment_mode,description as service,quantity, debit as amount, patient_no as  Request_No,'' as doctor,"
                    + "false as Approve, receipt_no as Request_id,now()::time(0)::varchar as time_due,receipt_no, '' as notes , (SELECT uid FROM hp_lims_request hlr WHERE ac_cash_collection.receipt_no = hlr.request_id and hlr.patient_no = ac_cash_collection.patient_no and test ilike  description  LIMIT 1 ) AS uid"
                    + " FROM ac_cash_collection WHERE"
                    + " ((SELECT activity FROM pb_activity WHERE ac_cash_collection.activity_code = pb_activity.code) ilike 'X-RAY' or (SELECT activity FROM pb_activity WHERE ac_cash_collection.activity_code = pb_activity.code) ilike 'XRAY') AND "
                    + "  patient_no NOT IN (SELECT patient_no FROM pb_doctors_request WHERE trans_date::date  > current_date - 2) AND date > current_date -2"
                    + " UNION "
                    + "SELECT DISTINCT date::date as trans_date,patient_no, funsoft_get_patient_name(patient_no) as patient_name,payment_mode, service as service, dosage as quantity, debit as amount, patient_no as  Request_No,'' as doctor,"
                    + "false as Approve, reference as Request_id, now()::time(0)::varchar as time_due, reference as receipt_no, '' as notes , (SELECT uid FROM hp_lims_request hlr WHERE hpc.reference = request_no and hlr.patient_no = hpc.patient_no and test ilike  service  LIMIT 1 ) as uid "
                    + " FROM hp_patient_card hpc WHERE collected = false AND "
                    + " upper(main_service) IN (SELECT upper(activity) FROM pb_activity WHERE upper(department) = upper('XRY')) AND "
                    + "  patient_no NOT IN (SELECT patient_no FROM pb_doctors_request WHERE trans_date::date  > current_date - 2) AND date::date > current_date -2 "
                    + "ORDER BY 1 asc");
            this.paidResultsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                    + "SELECT DISTINCT trans_date,patient_no,patient_name,pb.payment_mode,service,quantity,amount,(SELECT bed_no FROM pb_doctors_request pr WHERE pr.trans_date = pb.trans_date AND pr.patient_no = pb.patient_no AND pr.service = pb.service ORDER BY pr.trans_date DESC LIMIT 1) as Request_No,  doctor  AS doctor,"
                    + "false as Approve,(SELECT request_id FROM pb_doctors_request pr WHERE pr.trans_date = pb.trans_date AND pr.patient_no = pb.patient_no AND pr.service = pb.service ORDER BY pr.trans_date DESC LIMIT 1) as Request_id,time_due,"
                    + "(SELECT doctor FROM hp_patient_billing WHERE hp_patient_billing.patient_no = pb.patient_no AND pb.inv_no = hp_patient_billing.inpatient_no LIMIT 1) as receipt_no,notes, "
                    + "(SELECT uid FROM hp_lims_request hlr WHERE (pb.bed_no = hlr.request_id OR hlr.request_id = (SELECT doctor FROM hp_patient_billing WHERE hp_patient_billing.patient_no = pb.patient_no AND pb.inv_no = hp_patient_billing.inpatient_no LIMIT 1) ) and hlr.patient_no = pb.patient_no and test ilike  service  LIMIT 1 ) as uid "
                    + " FROM pb_doctors_request pb WHERE"
                    + " (pb.requisition_no ilike 'X-RAY' or pb.requisition_no ilike 'XRAY') AND paid = true AND"
                    + " results = false and trans_date::date  > current_date - 2 "
                    + " UNION "
                    + "SELECT DISTINCT date as trans_date,patient_no, dealer as patient_name,payment_mode,description as service,quantity, debit as amount, receipt_no as  Request_No,'' as doctor,"
                    + "false as Approve, receipt_no as Request_id,now()::time(0)::varchar as time_due,receipt_no, '' as notes , (SELECT uid FROM hp_lims_request hlr WHERE ac_cash_collection.receipt_no = hlr.request_id and hlr.patient_no = ac_cash_collection.patient_no and test ilike  description  LIMIT 1 ) AS uid"
                    + " FROM ac_cash_collection WHERE"
                    + " ((SELECT department FROM pb_activity WHERE ac_cash_collection.activity_code = pb_activity.code) ilike 'XRY' ) AND "
                    + "  UPPER(patient_no || '' ||description) NOT IN (SELECT UPPER(patient_no || '' || service) FROM pb_doctors_request WHERE trans_date::date  > current_date - 2) AND date > current_date -2"
                    + " UNION "
                    + "SELECT DISTINCT date::date as trans_date,patient_no, funsoft_get_patient_name(patient_no) as patient_name,payment_mode, service as service, dosage as quantity, debit as amount, reference as  Request_No,'' as doctor,"
                    + "false as Approve, reference as Request_id, now()::time(0)::varchar as time_due, reference as receipt_no, '' as notes , (SELECT uid FROM hp_lims_request hlr WHERE hpc.reference = request_no and hlr.patient_no = hpc.patient_no and test ilike  service  LIMIT 1 ) as uid "
                    + " FROM hp_patient_card hpc WHERE collected = false AND "
                    + " upper(main_service) IN (SELECT upper(activity) FROM pb_activity WHERE upper(department) = upper('XRY')) AND "
                    + "  patient_no NOT IN (SELECT patient_no FROM pb_doctors_request WHERE trans_date::date  > current_date - 2) AND date::date > current_date -2 "
                    + "ORDER BY 1 asc"));

            javax.swing.table.TableColumn column2 = null;
            for (int l = 0; l < paidResultsTable.getColumnCount(); l++) {
                column2 = paidResultsTable.getColumnModel().getColumn(l);
                if (l == 2) {

                    column2.setPreferredWidth(300); // item description column is bigger
                } else if (i == 1 || i == 4) {

                    column2.setPreferredWidth(150);

                } else {
                    column2.setPreferredWidth(100);
                }
            }

            paidScrollPane.setViewportView(paidResultsTable);
            //}
            if (patNo > 5) {

                this.jLabel14.setText("Queue Long '" + paidResultsTable.getRowCount() + "' Patients are waiting for radiology services");
                this.jLabel14.setForeground(new java.awt.Color(255, 0, 51));
            } else {
                this.jLabel14.setText("Queue has '" + paidResultsTable.getRowCount() + "' patients waiting");
                this.jLabel14.addNotify();

                this.jLabel14.setForeground(new java.awt.Color(51, 51, 255));
            }

        } catch (Exception sqlExec) {

            sqlExec.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

    }

    public void runconfirmGetListThread() {

        int j = 0;
        int i = 0;
        int n = 0;
        int patNo = 0;
        try {

//            java.sql.Statement stmtTable11 = connectDB.createStatement();
//
//            // java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select date,patient_no,name,payment,'false' as bill from hp_patient_visit where transaction_type ilike 'reg%' and date = current_date  ORDER BY date");
//            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT DISTINCT count(patient_no) from pb_doctors_request pb, pb_activity pa"
//                    + " WHERE  pb.posted_to_lab='DOC POSTING' and  "
//                    + " pb.requisition_no='X-RAY' and pb.gl_code = pa.code AND pa.department ILIKE 'XRY' and paid = false AND collected = false "
//                    + "and trans_date ='" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(xrayEndDatePicker.getDate()) + "' ");
//
//            while (rsetTable11.next()) {
//                patNo = rsetTable11.getInt(1);
//                pendingPatients = rsetTable11.getString(1);
//
//            }
            System.out.println("select trans_date,patient_no,patient_name,pb.payment_mode,service,quantity,amount,inv_no,doctor,false as bill,"
                    + "bed_no  as Request_No,time_due,false as cancel,revenue_code,gl_code  from pb_doctors_request pb, pb_activity pa"
                    + " WHERE pb.posted_to_lab='DOC POSTING' and pb.requisition_no='X-RAY' and pb.gl_code = pa.code AND pa.department ILIKE 'XRY' and paid = false AND collected = false and trans_date >= "
                    + "(select current_timestamp(0)::date -2) ORDER BY trans_date asc");
            this.confirmRequestsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                    + "select DISTINCT trans_date,patient_no,patient_name,pb.payment_mode,service,quantity,amount,inv_no,doctor,false as bill,"
                    + "request_id as Request_id,time_due,false as cancel,revenue_code,gl_code  from pb_doctors_request pb "
                    + " WHERE (pb.requisition_no ilike 'X-RAY' OR pb.requisition_no ilike 'XRAY') "
                    + " and paid = false AND collected = false and trans_date::date  BETWEEN '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(xrayStartDatePicker.getDate()) + "'::date AND  '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(xrayEndDatePicker.getDate()) + "'::date "
                    + " AND pb.bed_no NOT IN (SELECT DISTINCT inpatient_no FROM hp_patient_billing hp WHERE hp.inpatient_no = pb.bed_no AND hp.collected = true AND UPPER(pb.service) = UPPER(hp.service)) ORDER BY trans_date asc"));

        } catch (Exception sqlExec) {

            sqlExec.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
//
//        javax.swing.table.TableColumn column2 = null;
//        for (int l = 0; l < paidResultsTable.getColumnCount(); l++) {
//            column2 = paidResultsTable.getColumnModel().getColumn(l);
//            if (l == 2) {
//
//                column2.setPreferredWidth(300); // item description column is bigger
//            } else if (i == 1 || i == 4) {
//
//                column2.setPreferredWidth(150);
//
//            } else {
//                column2.setPreferredWidth(100);
//            }
//        }
//
//        paidScrollPane.setViewportView(paidResultsTable);

        javax.swing.table.TableColumn column = null;
        for (int m = 0; m < confirmRequestsTable.getColumnCount(); m++) {
            column = confirmRequestsTable.getColumnModel().getColumn(m);
            if (m == 2) {

                column.setPreferredWidth(300); // item description column is bigger
            } else if (i == 1 || i == 4) {

                column.setPreferredWidth(150);

            } else {
                column.setPreferredWidth(100);
            }
        }

        confirmScrollPane.setViewportView(confirmRequestsTable);

        if (patNo > 5) {

            this.jLabel1.setText("Long queue, " + confirmRequestsTable.getRowCount() + " patients are waiting for radiology services.");
            this.jLabel1.setForeground(new java.awt.Color(255, 0, 51));
        } else {
            this.jLabel1.setText("Queue has " + confirmRequestsTable.getRowCount() + " patients are waiting for radiology services");
            this.jLabel1.addNotify();

            this.jLabel1.setForeground(new java.awt.Color(51, 51, 255));
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionPanel;
    private javax.swing.JTextField ageTxt;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JButton cancleBtn;
    private javax.swing.JButton clearButton;
    private javax.swing.JTextArea clinicalHistoryTxt;
    private javax.swing.JButton closeFormBtn;
    private javax.swing.JTable confirmRequestsTable;
    private javax.swing.JScrollPane confirmScrollPane;
    private javax.swing.JTextField currentNameTxt;
    private javax.swing.JTextField currentNoTxt;
    private javax.swing.JTextField doctorTextField;
    private javax.swing.JCheckBox femaleCheckBox;
    private javax.swing.JCheckBox inPatientChkbx;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton53;
    private javax.swing.JButton jButton54;
    private javax.swing.JComboBox jComboBox41;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel211;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel62;
    private javax.swing.JPanel jPanel621;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JPanel jSearchPanel3;
    private javax.swing.JTextField jTextField3621;
    private javax.swing.JCheckBox maleCheckBox;
    private javax.swing.JDialog matchPatientDialog;
    private javax.swing.JTextField nooffilmTextField;
    private javax.swing.JTextArea otherInformationTxt;
    private javax.swing.JCheckBox outPatientChkbx;
    private javax.swing.JButton pacsDicomViewerBtn;
    private javax.swing.JButton pacsDicomViewerBtn1;
    private javax.swing.JPanel paidPendingPanel;
    private javax.swing.JTable paidResultsTable;
    private javax.swing.JTable paidResultsTable1;
    private javax.swing.JScrollPane paidScrollPane;
    private javax.swing.JScrollPane paidScrollPane1;
    private javax.swing.JButton patientCardBtn;
    private javax.swing.JTextField patientNameTxt;
    private javax.swing.JTextField patientNoTxt;
    private javax.swing.JLabel paySpacerLbl;
    private javax.swing.JTextArea physicalExamTxt;
    private javax.swing.JTextArea provisionalDiagnosisTxt;
    private javax.swing.JPanel radiographerHeaderPanel;
    private javax.swing.JTextArea radiographerReportTxt;
    private javax.swing.JScrollPane radiographerResultsJscrl;
    private javax.swing.JTabbedPane radiographerTabbedPane;
    private javax.swing.JTable radiologyResultsTable;
    private javax.swing.JTextField receiptTxt;
    private javax.swing.JButton refreshResultsListingBtn;
    private javax.swing.JButton refreshbutton;
    private javax.swing.JPanel reportingPanel;
    private javax.swing.JPanel resultsButtonPanel;
    private javax.swing.JPanel resultsPanel;
    private javax.swing.JButton saveresultsButton;
    private javax.swing.JTextField searchTextField;
    private javax.swing.JTextField searchTextField1;
    private javax.swing.JLabel spacerLbl;
    private javax.swing.JButton submitForPayBtn;
    private javax.swing.JTextField uidMatchTxt;
    private javax.swing.JTextField uidTxt;
    private javax.swing.JTextField uuidMatchTxt;
    private javax.swing.JPanel waitList2ConfirmPanel;
    private javax.swing.JPanel waitingListActionsPanel;
    private com.afrisoftech.lib.DatePicker xrayEndDatePicker;
    private com.afrisoftech.lib.DatePicker xrayStartDatePicker;
    private javax.swing.JTable xrayTestTable;
    private javax.swing.JTextField xrayTextField;
    // End of variables declaration//GEN-END:variables
}
