/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */

package com.afrisoftech.laboratory;

/**
 *
 * @author  root
 */
public class CentralIntfr extends javax.swing.JInternalFrame implements java.lang.Runnable {
    
    /** Creates new form loanpymntintfr */
    
    private javax.swing.JComboBox cmbox;
    java.sql.Connection connectDB = null;
    java.lang.Thread getListThread;
    java.lang.Thread getListThread1;
    boolean getList;
    boolean getList1;
    com.afrisoftech.lib.DBObject dbObject;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    
    
    public CentralIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {
        
        connectDB = connDb;
        dbObject = new com.afrisoftech.lib.DBObject();
        pConnDB = pconnDB;
        
        getListThread = new java.lang.Thread(this, "Update_Lab_Tests");
        getListThread1 = new java.lang.Thread(this, "Update_Lab_Tests1");
        
        initComponents();
        
        getList = true;
        
        getListThread.start();
        getList1 = true;
        
        getListThread1.start();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel221 = new javax.swing.JPanel();
        jPanel2121 = new javax.swing.JPanel();
        jScrollPane131 = new javax.swing.JScrollPane();
        jTable121 = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Short.class, java.lang.Object.class, java.lang.Object.class,java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };

        jButton321 = new javax.swing.JButton();
        jButton421 = new javax.swing.JButton();
        jLabel181 = new javax.swing.JLabel();
        jSeparator121 = new javax.swing.JSeparator();
        jTextField621 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jComboBox11 = new javax.swing.JComboBox();
        jPanel21211 = new javax.swing.JPanel();
        jScrollPane1311 = new javax.swing.JScrollPane();
        jTable1211 = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Short.class, java.lang.Object.class, java.lang.Object.class,java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };

        jLabel19 = new javax.swing.JLabel();
        jPanel22 = new javax.swing.JPanel();
        jPanel212 = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTable12 = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Short.class, java.lang.Object.class, java.lang.Object.class,java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };

        jLabel24 = new javax.swing.JLabel();
        datePicker11 = new com.afrisoftech.lib.DatePicker();
        jButton32 = new javax.swing.JButton();
        jButton42 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jSeparator12 = new javax.swing.JSeparator();
        jTextField62 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Centre");
        setToolTipText("Vital Signs");
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/ColorPreview.gif")));
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        jPanel221.setLayout(new java.awt.GridBagLayout());

        jPanel221.setBorder(new javax.swing.border.TitledBorder(""));
        jPanel2121.setLayout(new java.awt.GridBagLayout());

        jPanel2121.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 51, 51), 2), "Pending Obs.", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 11), new java.awt.Color(0, 0, 255)));
        jScrollPane131.setAutoscrolls(true);
        jTable121.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Date", "Pat No", "Name", "No"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });

        jTable121.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable121MouseClicked(evt);
            }
        });

        jScrollPane131.setViewportView(jTable121);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel2121.add(jScrollPane131, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 7.0;
        jPanel221.add(jPanel2121, gridBagConstraints);

        jButton321.setIcon(new javax.swing.ImageIcon(getClass().getResource("/minusarm.gif")));
        jButton321.setMnemonic('l');
        jButton321.setText("Clear");
        jButton321.setToolTipText("Click here to clear textfields");
        jButton321.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton321ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel221.add(jButton321, gridBagConstraints);

        jButton421.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BD14755_.GIF")));
        jButton421.setMnemonic('C');
        jButton421.setText("Close");
        jButton421.setToolTipText("Click here to close window");
        jButton421.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton421ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel221.add(jButton421, gridBagConstraints);

        jLabel181.setFont(new java.awt.Font("Dialog", 1, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel221.add(jLabel181, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        jPanel221.add(jSeparator121, gridBagConstraints);

        jTextField621.setEditable(false);
        jTextField621.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField621.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel221.add(jTextField621, gridBagConstraints);

        jLabel21.setText("Choose Clinic");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel221.add(jLabel21, gridBagConstraints);

        jComboBox11.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT Clinics FROM pb_clinics ORDER BY code asc"));

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel221.add(jComboBox11, gridBagConstraints);

        jPanel21211.setLayout(new java.awt.GridBagLayout());

        jPanel21211.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 102), 2, true), "Pending Cons.", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 11), new java.awt.Color(0, 0, 255)));
        jScrollPane1311.setAutoscrolls(true);
        jTable1211.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Date", "Pat No", "Name", "Pay Mode"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });

        jScrollPane1311.setViewportView(jTable1211);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel21211.add(jScrollPane1311, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 7.0;
        jPanel221.add(jPanel21211, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel221.add(jLabel19, gridBagConstraints);

        jTabbedPane1.addTab("Pending Obs", jPanel221);

        jPanel22.setLayout(new java.awt.GridBagLayout());

        jPanel22.setBorder(new javax.swing.border.TitledBorder(""));
        jPanel212.setLayout(new java.awt.GridBagLayout());

        jScrollPane13.setAutoscrolls(true);
        jTable12.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Date", "Pat No", "Name", "No", "Read"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });

        jTable12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable12MouseClicked(evt);
            }
        });

        jScrollPane13.setViewportView(jTable12);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel212.add(jScrollPane13, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 7.0;
        jPanel22.add(jPanel212, gridBagConstraints);

        jLabel24.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel22.add(jLabel24, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel22.add(datePicker11, gridBagConstraints);

        jButton32.setIcon(new javax.swing.ImageIcon(getClass().getResource("/minusarm.gif")));
        jButton32.setMnemonic('l');
        jButton32.setText("Clear");
        jButton32.setToolTipText("Click here to clear textfields");
        jButton32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton32ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel22.add(jButton32, gridBagConstraints);

        jButton42.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BD14755_.GIF")));
        jButton42.setMnemonic('C');
        jButton42.setText("Close");
        jButton42.setToolTipText("Click here to close window");
        jButton42.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton42ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel22.add(jButton42, gridBagConstraints);

        jLabel18.setFont(new java.awt.Font("Dialog", 1, 14));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel22.add(jLabel18, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        jPanel22.add(jSeparator12, gridBagConstraints);

        jTextField62.setEditable(false);
        jTextField62.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField62.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel22.add(jTextField62, gridBagConstraints);

        jTabbedPane1.addTab("Pending Results", jPanel22);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14));
        jLabel1.setText("Undispatched");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jLabel1, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14));
        jLabel2.setText("Admissions");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14));
        jLabel3.setText("Pending Obs");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jLabel3, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14));
        jLabel4.setText("Pending Results");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jLabel4, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 14));
        jLabel5.setText("Discharges");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jLabel5, gridBagConstraints);

        jButton1.setText("View");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jButton1, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 14));
        jLabel7.setText("Pending Cons");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jLabel7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel2, gridBagConstraints);

        jTabbedPane1.addTab("Others", jPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        setBounds(0, 0, 726, 460);
    }//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
              for (int k = 0; k < jTable121.getRowCount(); k++ ) {
                for (int r = 0; r < jTable121.getColumnCount(); r++ ) {
                    jTable121.getModel().setValueAt(null,k,r);
                }
            }
        
        String vNo= null;
        String vpatientNo= null;
        int lNo = 0;
        int i = 0;
        int n = 0;
        int patNo = 0;
        int Total1 =0;
        int Total =0;
        int labNo1 = 0;
         int patNoc = 0;
          int vpatNo = 0;
           int admNo = 0;
            int disNo = 0;
            int dispNo = 0;
            double amt = 0.00;
        try {
            java.sql.Statement stmtTable11 = connectDB.createStatement();
            
            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("select count(distinct lab_no) from hp_lab_results where doc_read = false  AND date >='"+datePicker11.getDate().toString()+"'");
            
            
            while (rsetTable11.next()) {
                lNo = rsetTable11.getInt(1);
                
            }
            
          
        
             
           
            
            // for (int l = 0; l < listofDays.length; l++) {
             
         java.sql.Statement stmtTablec = connectDB.createStatement();
            
            java.sql.ResultSet rsetTablec = stmtTablec.executeQuery("select distinct count(hp_patient_visit.patient_no) from hp_patient_visit,hp_patient_register where hp_patient_visit.transaction_type ilike 'reg%' and hp_patient_visit.date = current_date and nature ='1' and hp_patient_visit.comments = '"+this.jComboBox11.getSelectedItem().toString()+"' and hp_patient_visit.patient_no=hp_patient_register.patient_no");
            //   java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("select distinct count(patient_no) from hp_patient_visit where transaction_type ilike 'reg%' and date = current_date and nature is null");
            
            while (rsetTablec.next()) {
                patNoc = rsetTablec.getInt(1);
                
            }
             java.sql.Statement stmtTable111 = connectDB.createStatement();
            
            java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("select count(distinct patient_no) from hp_patient_visit where status = 'false'  and date =current_date and transaction_type ilike 'regi%' and comments = '"+this.jComboBox11.getSelectedItem().toString()+"'");
            
            
            while (rsetTable111.next()) {
                vpatNo = rsetTable111.getInt(1);
                System.out.println("Lab no2 is "+vpatNo);
            }
            
             java.sql.Statement stmtTablead = connectDB.createStatement();
            
            java.sql.ResultSet rsetTablead = stmtTablead.executeQuery("select count(distinct patient_no) from hp_admission where  date_admitted =current_date ");
            
            
            while (rsetTablead.next()) {
                admNo = rsetTablead.getInt(1);
               // System.out.println("Lab no2 is "+patNo);
            }
             java.sql.Statement stmtTabledis = connectDB.createStatement();
            
            java.sql.ResultSet rsetTabledis = stmtTablead.executeQuery("select count(distinct patient_no) from hp_patient_discharge where  discharge_date =current_date ");
            
            
            while (rsetTabledis.next()) {
                disNo = rsetTabledis.getInt(1);
               // System.out.println("Lab no2 is "+patNo);
            }
            
             java.sql.Statement stmtTabledisp = connectDB.createStatement();
            
            java.sql.ResultSet rsetTabledisp = stmtTablead.executeQuery("select count(invoice_no),sum(debit) from ac_debtors where  sent=false ");
            
            
            while (rsetTabledisp.next()) {
                dispNo = rsetTabledisp.getInt(1);
               amt = rsetTabledisp.getDouble(2);
            }
            
        } catch(java.sql.SQLException sqlExec) {
            
            sqlExec.printStackTrace();
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
            
        }
        
        
          this.jLabel2.setText("Total Admissions for Today are '"+admNo+"' ");
            this.jLabel2.setForeground(new java.awt.Color(255,0,51));
     
        this.jLabel5.setText("Total Discharges for Today are '"+disNo+"' ");
            this.jLabel5.setForeground(new java.awt.Color(255,0,51));
     
       
        
            this.jLabel7.setText("You Have '"+patNoc+"' Patients Waiting for Consultation.");
            this.jLabel7.setForeground(new java.awt.Color(255,0,51));
   
         this.jLabel3.setText("You Have '"+vpatNo+"' Patients Waiting for To be observed.");
            this.jLabel3.setForeground(new java.awt.Color(255,0,51));
            
             this.jLabel4.setText("You Have '"+lNo+"' lab Results  Unread");
            this.jLabel4.setForeground(new java.awt.Color(255,0,51));
     
             this.jLabel1.setText("You Have '"+dispNo+"' invoices Undispatched worth '"+amt+"'");
            this.jLabel1.setForeground(new java.awt.Color(255,0,51));
        // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable121MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable121MouseClicked
      
        
        
        // Add your handling code here:
    }//GEN-LAST:event_jTable121MouseClicked

    private void jButton32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton32ActionPerformed
        for (int k = 0; k < jTable12.getRowCount(); k++ ) {
                for (int r = 0; r < jTable12.getColumnCount(); r++ ) {
                    jTable12.getModel().setValueAt(null,k,r);
                }
            } // Add your handling code here:
    }//GEN-LAST:event_jButton32ActionPerformed

    private void jButton421ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton421ActionPerformed
     this.setVisible(false);     // Add your handling code here:
    }//GEN-LAST:event_jButton421ActionPerformed

    private void jButton42ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton42ActionPerformed
      this.setVisible(false);    // Add your handling code here:
    }//GEN-LAST:event_jButton42ActionPerformed
    
    private void jButton321ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton321ActionPerformed

        
         for (int k = 0; k < jTable121.getRowCount(); k++ ) {
                for (int r = 0; r < jTable121.getColumnCount(); r++ ) {
                    jTable121.getModel().setValueAt(null,k,r);
                }
            }
        
        String vNo= null;
        String vpatientNo= null;
        int j = 0;
        int i = 0;
        int n = 0;
        int patNo = 0;
        int Total1 =0;
        int Total =0;
        int labNo1 = 0;
        try {
            
            
            // for (int l = 0; l < listofDays.length; l++) {
            java.sql.Statement stmtTable11 = connectDB.createStatement();
            
            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("select count(distinct patient_no) from hp_patient_visit where status = 'false'  and date =current_date and transaction_type ilike 'regi%'");
            
            
            while (rsetTable11.next()) {
                patNo = rsetTable11.getInt(1);
                System.out.println("Lab no2 is "+patNo);
            }
            
            //   jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select distinct date,patient_no,patient_name,lab_no,doc_read from hp_lab_results where doc_read = false AND date >='"+datePicker1.getDate().toString()+"'  ORDER BY date,lab_no"));
            
            
            java.sql.Statement stmtTable1 = connectDB.createStatement();
            
            java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select  input_date::time(0), patient_no,name,payment from hp_patient_visit where status = 'false' and date =current_date and transaction_type ilike 'regi%' order by input_date::time(0)");
            
            
            while (rsetTable1.next()) {
                
                jTable121.setValueAt(rsetTable1.getObject(1), i, 0);
                jTable121.setValueAt(rsetTable1.getObject(2), i, 1);
                jTable121.setValueAt(rsetTable1.getObject(3), i, 2);
                jTable121.setValueAt(rsetTable1.getObject(4), i, 3);
                //   jTable12.setValueAt(rsetTable1.getObject(5), i, 4);
                
                i++;
                
            }
            
            //}
            
            
            
        } catch(java.sql.SQLException sqlExec) {
            
            sqlExec.printStackTrace();
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
            
        }   // Add your handling code here:
    }//GEN-LAST:event_jButton321ActionPerformed
    
    private void jTable12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable12MouseClicked
        String receiptNo = null;
        
        // if (Boolean.valueOf(jTable1.getModel().getValueAt(jTable1.getSelectedRow(),4).toString()) == java.lang.Boolean.TRUE) {
        receiptNo =  jTable12.getValueAt(jTable12.getSelectedRow(), 3).toString();
        com.afrisoftech.reports.PatientLabResultsPdf policy = new com.afrisoftech.reports.PatientLabResultsPdf();
        
        policy.PatientLabResultsPdf(connectDB, receiptNo, receiptNo,jTable12.getValueAt(jTable12.getSelectedRow(), 0).toString());
        // Add your handling code here:
    }//GEN-LAST:event_jTable12MouseClicked
      private void cmboxActionPerformed(java.awt.event.ActionEvent evt){
    }
            private void populateTable1(java.lang.String patient_no) {
        
        
    }
    
    
    public void run() {
        
        while(getList1) {
            
            runGetListThread1();
            
            try {
                
                Thread.currentThread().sleep(30000);
                
            } catch(java.lang.InterruptedException IntExec){
                
                javax.swing.JOptionPane.showMessageDialog(this, IntExec.getMessage(), "Interruption Error!", javax.swing.JOptionPane.ERROR_MESSAGE);
                
            }
            
            // getList = false;
            
        }
        
    }
    
    public void runGetListThread1() {
        String vNo= null;
        String vpatientNo= null;
        int v = 0;
         int c = 0;
         int patNoc = 0;
        int vpatNo = 0;
         for (int k = 0; k < jTable121.getRowCount(); k++ ) {
                for (int r = 0; r < jTable121.getColumnCount(); r++ ) {
                    jTable121.getModel().setValueAt(null,k,r);
                }
            }
        for (int l = 0; l < jTable1211.getRowCount(); l++ ) {
                for (int y = 0; y < jTable1211.getColumnCount(); y++ ) {
                    jTable1211.getModel().setValueAt(null,l,y);
                }
            }
        try {
            
            
            // for (int l = 0; l < listofDays.length; l++) {
            java.sql.Statement stmtTable111 = connectDB.createStatement();
            
            java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("select count(distinct patient_no) from hp_patient_visit where status = 'false'  and date =current_date and transaction_type ilike 'regi%' and comments = '"+this.jComboBox11.getSelectedItem().toString()+"'");
            
            
            while (rsetTable111.next()) {
                vpatNo = rsetTable111.getInt(1);
                System.out.println("Lab no2 is "+vpatNo);
            }
            
            //   jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select distinct date,patient_no,patient_name,lab_no,doc_read from hp_lab_results where doc_read = false AND date >='"+datePicker1.getDate().toString()+"'  ORDER BY date,lab_no"));
            
            
            java.sql.Statement stmtTable1v = connectDB.createStatement();
            
            java.sql.ResultSet rsetTable1v = stmtTable1v.executeQuery("select  input_date::time(0), patient_no,name,payment from hp_patient_visit where status = 'false' and date =current_date and transaction_type ilike 'regi%' and comments = '"+this.jComboBox11.getSelectedItem().toString()+"' order by input_date::time(0)");
            
            
            while (rsetTable1v.next()) {
                
                jTable121.setValueAt(rsetTable1v.getObject(1), v, 0);
                jTable121.setValueAt(rsetTable1v.getObject(2), v, 1);
                jTable121.setValueAt(rsetTable1v.getObject(3), v, 2);
                jTable121.setValueAt(rsetTable1v.getObject(4), v, 3);
                //   jTable12.setValueAt(rsetTable1.getObject(5), i, 4);
                
                v++;
                
            }
            
            //}
            
            
            
        } catch(java.sql.SQLException sqlExec) {
            
            sqlExec.printStackTrace();
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
            
        }
        
        if(vpatNo >5){
            
            this.jLabel181.setText("You Have '"+vpatNo+"' Patients Waiting for Obs.");
            this.jLabel181.setForeground(new java.awt.Color(255,0,51));
        }else{
            this.jLabel181.setText("You Have '"+vpatNo+"' Patients Waiting for Obs.");
            
            
            this.jLabel181.setForeground(new java.awt.Color(51,51,255));
        }
        
        
   try {
        
        
         java.sql.Statement stmtTablec = connectDB.createStatement();
            
            java.sql.ResultSet rsetTablec = stmtTablec.executeQuery("select distinct count(hp_patient_visit.patient_no) from hp_patient_visit,hp_patient_register where hp_patient_visit.transaction_type ilike 'reg%' and hp_patient_visit.date = current_date and nature ='1' and hp_patient_visit.comments = '"+this.jComboBox11.getSelectedItem().toString()+"' and hp_patient_visit.patient_no=hp_patient_register.patient_no");
            //   java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("select distinct count(patient_no) from hp_patient_visit where transaction_type ilike 'reg%' and date = current_date and nature is null");
            
            while (rsetTablec.next()) {
                patNoc = rsetTablec.getInt(1);
                
            }
            
            
            java.sql.Statement stmtTable1c = connectDB.createStatement();
            
            java.sql.ResultSet rsetTable1c = stmtTable1c.executeQuery("select distinct hp_patient_visit.patient_no,hp_patient_visit.input_date::timestamp(0),hp_patient_visit.name,pay_mode from hp_patient_visit,hp_patient_register where transaction_type ilike 'reg%' and hp_patient_visit.date = current_date and nature ='1' and hp_patient_visit.patient_no=hp_patient_register.patient_no and hp_patient_visit.comments = '"+this.jComboBox11.getSelectedItem().toString()+"' ORDER BY input_date");
            //java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select distinct date,input_date::timestamp(0),patient_no,name,'false' as bill from hp_patient_visit where transaction_type ilike 'reg%' and date = current_date and nature is null ORDER BY input_date");
            
            while (rsetTable1c.next()) {
                
                jTable1211.setValueAt(rsetTable1c.getObject(2), c, 0);
                jTable1211.setValueAt(rsetTable1c.getObject(3), c, 1);
                jTable1211.setValueAt(rsetTable1c.getObject(1), c, 2);
                jTable1211.setValueAt(rsetTable1c.getObject(4), c, 3);
                  
                  
                c++;
                
            }
            stmtTable1c.close();
            rsetTable1c.close();
            
            stmtTablec.close();
            rsetTablec.close();
        } catch(java.sql.SQLException sqlExec) {
            
            sqlExec.printStackTrace();
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
            
        }
        
        
        
        
          if(patNoc >5){
            
            this.jLabel19.setText("You Have '"+patNoc+"' Patients Waiting for Cons.");
            this.jLabel19.setForeground(new java.awt.Color(255,0,51));
        }else{
            this.jLabel19.setText("You Have '"+patNoc+"' Patients Waiting for Cons.");
            
            
            this.jLabel19.setForeground(new java.awt.Color(51,51,255));
        }
        
        
        
        
   /* 
    
    public void run() {
        
        while(getList) {
            
            runGetListThread();
            
            try {
                
                Thread.currentThread().sleep(10000);
                
            } catch(java.lang.InterruptedException IntExec){
                
                javax.swing.JOptionPane.showMessageDialog(this, IntExec.getMessage(), "Interruption Error!", javax.swing.JOptionPane.ERROR_MESSAGE);
                
            }
            
            // getList = false;
            
        }
    */
        
        
   // }
    
  //  public void runGetListThread() {
        String labNo= null;
        String patientNo= null;
        int j = 0;
        int i = 0;
        int n = 0;
        int patNo = 0;
        int Total1 =0;
        int Total =0;
        int labNo1 = 0;
        try {
            java.sql.Statement stmtTable113 = connectDB.createStatement();
           /*
            java.sql.ResultSet rsetTable113 = stmtTable113.executeQuery("select count(distinct lab_no) from hp_lab_results where doc_read = false  and result_shown = false AND date >='"+datePicker11.getDate().toString()+"' and lab_no !='null' and lab_no is not null");
            
              while (rsetTable113.next()) {
                labNo1 = rsetTable113.getInt(1);
                        System.out.println("Lab no is "+labNo1);
            }
            
            if(labNo1>0){
              java.sql.Statement stmtTable112 = connectDB.createStatement();
            
            java.sql.ResultSet rsetTable112 = stmtTable112.executeQuery("select distinct lab_no,patient_name from hp_lab_results where doc_read = false and result_shown = false AND date >='"+datePicker11.getDate().toString()+"' and lab_no is not null and lab_no !='null' order by lab_no desc limit 1 ");
            
            
             while (rsetTable112.next()) {
                labNo = rsetTable112.getString(1);
                patientNo = rsetTable112.getString(2);
                System.out.println("Lab no2 is "+patientNo);
            }
            }else{
            }
            */
            
            // for (int l = 0; l < listofDays.length; l++) {
            java.sql.Statement stmtTable11 = connectDB.createStatement();
            
            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("select count(distinct lab_no) from hp_lab_results where doc_read = false  AND date >='"+datePicker11.getDate().toString()+"'");
            
            
            while (rsetTable11.next()) {
                patNo = rsetTable11.getInt(1);
                
            }
            
            //   jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select distinct date,patient_no,patient_name,lab_no,doc_read from hp_lab_results where doc_read = false AND date >='"+datePicker1.getDate().toString()+"'  ORDER BY date,lab_no"));
            
            
            java.sql.Statement stmtTable1 = connectDB.createStatement();
            
            java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select distinct date,patient_no,patient_name,lab_no,doc_read from hp_lab_results where doc_read = false AND date >='"+datePicker11.getDate().toString()+"'  ORDER BY date,lab_no");
            
            
            while (rsetTable1.next()) {
                
                jTable12.setValueAt(rsetTable1.getObject(1), i, 0);
                jTable12.setValueAt(rsetTable1.getObject(2), i, 1);
                jTable12.setValueAt(rsetTable1.getObject(3), i, 2);
                jTable12.setValueAt(rsetTable1.getObject(4), i, 3);
                jTable12.setValueAt(rsetTable1.getObject(5), i, 4);
                
                i++;
                
            }
            
            //}
            
            
            
        } catch(java.sql.SQLException sqlExec) {
            
            sqlExec.printStackTrace();
            
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
            
        }
        
        if(patNo >5){
            
            this.jLabel18.setText("You Have '"+patNo+"' Results  Unread");
            this.jLabel18.setForeground(new java.awt.Color(255,0,51));
        }else{
            this.jLabel18.setText("You Have '"+patNo+"' Results  Unread");
            
            
            this.jLabel18.setForeground(new java.awt.Color(51,51,255));
        }
    }
        //for(patNo=0;patNo>i;patNo++){
        
        //  if(patNo>=patNo+1){
        
        // if(labNo.equalsIgnoreCase(null)){
        
        // }else{
        
 /* if(labNo1>0){
       java.awt.Toolkit.getDefaultToolkit().beep();
              javax.swing.JOptionPane.showMessageDialog(this, "Result No. '"+labNo+"' for '"+patientNo+"' are out","Information Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
  
    try {
  
                    java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE hp_lab_results SET result_shown = true where lab_no = '"+labNo+"'");
                    pstmt46.executeUpdate();
  
  
                } catch(java.sql.SQLException sqlExec) {
  
                    sqlExec.printStackTrace();
  
                    javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
  
                }
        }else{
  
        }
  */
    //}  
        
   // }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jTextField62;
    private javax.swing.JButton jButton32;
    private javax.swing.JButton jButton421;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel21211;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JComboBox jComboBox11;
    private javax.swing.JPanel jPanel221;
    private javax.swing.JSeparator jSeparator121;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JTable jTable12;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel2121;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane131;
    private javax.swing.JTable jTable1211;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JLabel jLabel181;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton jButton42;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jButton321;
    private javax.swing.JPanel jPanel212;
    private javax.swing.JTable jTable121;
    private javax.swing.JTextField jTextField621;
    private com.afrisoftech.lib.DatePicker datePicker11;
    private javax.swing.JScrollPane jScrollPane1311;
    // End of variables declaration//GEN-END:variables
    
}
