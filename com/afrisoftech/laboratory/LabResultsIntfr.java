/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */
package com.afrisoftech.laboratory;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author saqlever
 */
public class LabResultsIntfr extends javax.swing.JInternalFrame implements java.lang.Runnable {

    /**
     * Creates new form loanpymntintfr
     */
    private javax.swing.JComboBox cmbox;
    java.sql.Connection connectDB = null;
    private LabResultsIntfr.SearchThread searchThread = null;
    private LabResultsIntfr.SearchServicesThread searchServicesThread = null;
    com.afrisoftech.lib.DBObject dbObject;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    java.lang.Thread getListThread;
    boolean getList;

    public LabResultsIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;
        dbObject = new com.afrisoftech.lib.DBObject();

//        searchThread = new LabResultsIntfr.SearchThread();
//
//        getListThread = new java.lang.Thread(this, "Update_discharge");
        initComponents();
        try {
            java.sql.Statement stm121 = connectDB.createStatement();
            java.sql.ResultSet rse121 = stm121.executeQuery("select current_user");
            while (rse121.next()) {

                resultsVerifierCmbx.setSelectedItem(dbObject.getDBObject(rse121.getObject(1).toString().trim(), "-"));;
            }
//        getList = true;
//
//        getListThread.start();
        } catch (SQLException ex) {
            Logger.getLogger(LabResultsIntfr.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog2 = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        jTextField113 = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        jSearchTable2 = new javax.swing.JTable();
        jButton52 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jSearchDialog21 = new javax.swing.JDialog();
        jSearchPanel21 = new javax.swing.JPanel();
        jTextField1131 = new javax.swing.JTextField();
        jSearchScrollPane21 = new javax.swing.JScrollPane();
        jSearchTable21 = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        };
        jButton521 = new javax.swing.JButton();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField11 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new javax.swing.JTable();
        jButton9 = new javax.swing.JButton();
        jSearchDialog211 = new javax.swing.JDialog();
        jSearchPanel211 = new javax.swing.JPanel();
        jTextField11311 = new javax.swing.JTextField();
        jSearchScrollPane211 = new javax.swing.JScrollPane();
        jSearchTable211 = new com.afrisoftech.dbadmin.JTable();
        jButton5211 = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane21 = new javax.swing.JScrollPane();
        jTable111 = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class,  java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class,java.lang.Object.class,java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false,false, false, true,false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };

        labreportingTabbedPane = new javax.swing.JTabbedPane();
        clinicianOrdersWaitingPanel = new javax.swing.JPanel();
        jScrollPane14 = new javax.swing.JScrollPane();
        pendingTable = new com.afrisoftech.dbadmin.JTable();
        jTextField63 = new javax.swing.JTextField();
        jSeparator13 = new javax.swing.JSeparator();
        raiserequestsButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        paidUpOrdersPanel = new javax.swing.JPanel();
        paidupPanel = new javax.swing.JPanel();
        paidupScrollPane = new javax.swing.JScrollPane();
        paidTable = new com.afrisoftech.dbadmin.JTable();
        jLabel71 = new javax.swing.JLabel();
        jTextField61 = new javax.swing.JTextField();
        jButton61 = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        labReportingTabPanel = new javax.swing.JPanel();
        reportingHeaderPanel = new javax.swing.JPanel();
        patientNumberLabel = new javax.swing.JLabel();
        patientNameLabel = new javax.swing.JLabel();
        patientNameTxt = new javax.swing.JTextField();
        resultsVerifierCmbx = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        externalSourceTxt = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        patientNumberTxt = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        labDisciplineTxt = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        labRequestTimeTxt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        ageTxt = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        genderTxt = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        labNumberTxt = new javax.swing.JTextField();
        jPanel411 = new javax.swing.JPanel();
        reqidTextField = new javax.swing.JTextField();
        searchButton11 = new javax.swing.JButton();
        jLabel41 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        specimenTimeTxt = new javax.swing.JTextField();
        jScrollPane6 = new javax.swing.JScrollPane();
        labTestTable = new com.afrisoftech.dbadmin.JTable();
        jLabel21 = new javax.swing.JLabel();
        generalResultChkbx = new javax.swing.JCheckBox();
        culturedChkbx = new javax.swing.JCheckBox();
        referralCmbx = new javax.swing.JComboBox();
        jLabel23 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        specimenCmbx = new javax.swing.JComboBox();
        specimenConditionCmbx = new javax.swing.JComboBox();
        cancerInfectiveStatusChkbx = new javax.swing.JCheckBox();
        cancerStatusInfectiveCmbx = new javax.swing.JComboBox();
        referralResultsChkbx = new javax.swing.JCheckBox();
        specimenSourceCmbx = new javax.swing.JComboBox();
        labStationCmbx = new javax.swing.JComboBox();
        labDomainCmbx = new javax.swing.JComboBox();
        resultsMainPanel = new javax.swing.JPanel();
        commentsScrollPane = new javax.swing.JScrollPane();
        pathologistCommentsTxt = new javax.swing.JEditorPane();
        commentsLabel = new javax.swing.JLabel();
        resultsPanel = new javax.swing.JPanel();
        resultsSIPanel = new javax.swing.JPanel();
        resultsSIScrollPane = new javax.swing.JScrollPane();
        resultsSITable = new com.afrisoftech.dbadmin.JTable();
        normalRangeLbl = new javax.swing.JLabel();
        resultsNarrativePanel = new javax.swing.JPanel();
        resultsNarrativeTableScrollPane = new javax.swing.JScrollPane();
        resultsNarrativeTable = new com.afrisoftech.dbadmin.JTable();
        buttonPanel = new javax.swing.JPanel();
        removeRowBtn = new javax.swing.JButton();
        helpBtn = new javax.swing.JButton();
        closeFormBtn = new javax.swing.JButton();
        clearFormBtn = new javax.swing.JButton();
        editResultsBtn = new javax.swing.JButton();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        saveResultsBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        patientCardBtn = new javax.swing.JButton();
        jTextField10 = new javax.swing.JTextField();
        jTextField82 = new javax.swing.JTextField();
        try {

            java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rset1 = stmt1.executeQuery("select DISTINCT f_name||' '||l_name as name FROM secure_menu_access WHERE login_name = current_user");
            while (rset1.next()) {
                jTextField82.setText(rset1.getObject(1).toString());

            }

        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }
        verificationPanel = new javax.swing.JPanel();
        jPanel212 = new javax.swing.JPanel();
        verifyScrollPane = new javax.swing.JScrollPane();
        posted2verifyTable = new com.afrisoftech.dbadmin.JXTable();
        jLabel24 = new javax.swing.JLabel();
        datePicker11 = new com.afrisoftech.lib.DatePicker();
        jButton32 = new javax.swing.JButton();
        jButton42 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        jSeparator12 = new javax.swing.JSeparator();
        jTextField62 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        verifiedResultsPanel = new javax.swing.JPanel();
        releasedResultsPanel = new javax.swing.JPanel();
        verifiedScrollPane = new javax.swing.JScrollPane();
        releasedResultsTable = new com.afrisoftech.dbadmin.JXTable();

        jLabel241 = new javax.swing.JLabel();
        verifiedDatePicker = new com.afrisoftech.lib.DatePicker();
        clearVerifiedListingBtn = new javax.swing.JButton();
        colseVerifiedBtn = new javax.swing.JButton();
        jSeparator121 = new javax.swing.JSeparator();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel15 = new javax.swing.JLabel();
        endDatePicker = new com.afrisoftech.lib.DatePicker();
        jPanel9 = new javax.swing.JPanel();
        jPanel31 = new javax.swing.JPanel();
        outpatientCheckBox = new javax.swing.JCheckBox();
        inpatientCheckBox = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        mainDatePicker = new com.afrisoftech.lib.DatePicker();
        jLabel5 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        searchpatienttxtfld = new javax.swing.JTextField();
        refreshListingsBtn = new javax.swing.JButton();

        jSearchDialog2.setModal(true);
        jSearchDialog2.setUndecorated(true);
        jSearchDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        jTextField113.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField113CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel2.add(jTextField113, gridBagConstraints);

        jSearchTable2.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable2.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable2MouseClicked(evt);
            }
        });
        jSearchScrollPane2.setViewportView(jSearchTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

        jButton52.setText("Dispose");
        jButton52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton52, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog2.getContentPane().add(jSearchPanel2, gridBagConstraints);

        jSearchDialog21.setModal(true);
        jSearchDialog21.setUndecorated(true);
        jSearchDialog21.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel21.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel21.setLayout(new java.awt.GridBagLayout());

        jTextField1131.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1131CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel21.add(jTextField1131, gridBagConstraints);

        jSearchTable21.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable21.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable21MouseClicked(evt);
            }
        });
        jSearchScrollPane21.setViewportView(jSearchTable21);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel21.add(jSearchScrollPane21, gridBagConstraints);

        jButton521.setText("Dispose");
        jButton521.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton521ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel21.add(jButton521, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog21.getContentPane().add(jSearchPanel21, gridBagConstraints);

        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jTextField11.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField11CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(jTextField11, gridBagConstraints);

        jSearchTable.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton9.setText("Dispose");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        jSearchDialog211.setModal(true);
        jSearchDialog211.setUndecorated(true);
        jSearchDialog211.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel211.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel211.setLayout(new java.awt.GridBagLayout());

        jTextField11311.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField11311CaretUpdate(evt);
            }
        });
        jTextField11311.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField11311ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel211.add(jTextField11311, gridBagConstraints);

        jSearchTable211.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable211.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable211.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable211MouseClicked(evt);
            }
        });
        jSearchScrollPane211.setViewportView(jSearchTable211);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel211.add(jSearchScrollPane211, gridBagConstraints);

        jButton5211.setText("Dispose");
        jButton5211.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5211ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel211.add(jButton5211, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog211.getContentPane().add(jSearchPanel211, gridBagConstraints);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "External Requests", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 0, 51))); // NOI18N
        jPanel12.setLayout(new java.awt.GridBagLayout());

        jTable111.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Pat No.", "Pat Name", "Mode", "Service", "Qty", "Amount", "No", "Doctor", "Bill", "Bed No", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });

        jScrollPane21.setViewportView(jTable111);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel12.add(jScrollPane21, gridBagConstraints);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Laboratory Procedures/Tests Results");
        setFrameIcon(null);
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        clinicianOrdersWaitingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Lab Requests", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(0, 0, 255))); // NOI18N
        clinicianOrdersWaitingPanel.setLayout(new java.awt.GridBagLayout());

        jScrollPane14.setAutoscrolls(true);

        pendingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Pat No.", "Pat Name", "Mode", "Service", "Qty", "Amount", "No", "Doctor", "Bill", "Request No", "Time", "Receipt No"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        pendingTable.setRowHeight(26);
        jScrollPane14.setViewportView(pendingTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        clinicianOrdersWaitingPanel.add(jScrollPane14, gridBagConstraints);

        jTextField63.setEditable(false);
        jTextField63.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField63.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        clinicianOrdersWaitingPanel.add(jTextField63, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        clinicianOrdersWaitingPanel.add(jSeparator13, gridBagConstraints);

        raiserequestsButton.setText("Submit queueing requests for payment");
        raiserequestsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                raiserequestsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        clinicianOrdersWaitingPanel.add(raiserequestsButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.weighty = 1.0;
        clinicianOrdersWaitingPanel.add(jLabel7, gridBagConstraints);

        labreportingTabbedPane.addTab("Wait-listed and pending Requests", clinicianOrdersWaitingPanel);

        paidUpOrdersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        paidUpOrdersPanel.setLayout(new java.awt.GridBagLayout());

        paidupPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Lab Requests", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14), new java.awt.Color(0, 0, 255))); // NOI18N
        paidupPanel.setLayout(new java.awt.GridBagLayout());

        paidupScrollPane.setAutoscrolls(true);

        paidTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Pat No.", "Pat Name", "Mode", "Service", "Qty", "Amount", "No", "Doctor", "Bill", "Request No", "Time", "Receipt No", "Scheme Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        paidTable.setRowHeight(26);
        paidTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paidTableMouseClicked(evt);
            }
        });
        paidupScrollPane.setViewportView(paidTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        paidupPanel.add(paidupScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        paidUpOrdersPanel.add(paidupPanel, gridBagConstraints);

        jLabel71.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        paidUpOrdersPanel.add(jLabel71, gridBagConstraints);

        jTextField61.setEditable(false);
        jTextField61.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField61.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        paidUpOrdersPanel.add(jTextField61, gridBagConstraints);

        jButton61.setText("Submit procedure request for reporting results");
        jButton61.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton61MouseClicked(evt);
            }
        });
        jButton61.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton61ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        paidUpOrdersPanel.add(jButton61, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        paidUpOrdersPanel.add(jLabel19, gridBagConstraints);

        labreportingTabbedPane.addTab("Paid up requests", paidUpOrdersPanel);

        labReportingTabPanel.setLayout(new java.awt.GridBagLayout());

        reportingHeaderPanel.setBorder(new javax.swing.border.MatteBorder(null));
        reportingHeaderPanel.setLayout(new java.awt.GridBagLayout());

        patientNumberLabel.setText("Patient No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        reportingHeaderPanel.add(patientNumberLabel, gridBagConstraints);

        patientNameLabel.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        reportingHeaderPanel.add(patientNameLabel, gridBagConstraints);

        patientNameTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        reportingHeaderPanel.add(patientNameTxt, gridBagConstraints);

        resultsVerifierCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '-' UNION Select INITCAP(f_name||' '||l_name) FROM secure_menu_access WHERE group_name ILIKE '%lab%' ORDER BY 1"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        reportingHeaderPanel.add(resultsVerifierCmbx, gridBagConstraints);

        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("Results Verified By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        reportingHeaderPanel.add(jLabel2, gridBagConstraints);

        jLabel3.setText("Ext Source");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        reportingHeaderPanel.add(jLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        reportingHeaderPanel.add(externalSourceTxt, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setLayout(new java.awt.GridBagLayout());

        patientNumberTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(patientNumberTxt, gridBagConstraints);

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton.setToolTipText("Search");
        searchButton.setEnabled(false);
        searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel4.add(searchButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        reportingHeaderPanel.add(jPanel4, gridBagConstraints);

        jLabel8.setText("Discipline");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        reportingHeaderPanel.add(jLabel8, gridBagConstraints);

        labDisciplineTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        reportingHeaderPanel.add(labDisciplineTxt, gridBagConstraints);

        jLabel10.setText("Request Time");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        reportingHeaderPanel.add(jLabel10, gridBagConstraints);

        labRequestTimeTxt.setEditable(false);
        labRequestTimeTxt.setText("1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        reportingHeaderPanel.add(labRequestTimeTxt, gridBagConstraints);

        jLabel12.setText("Age");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        reportingHeaderPanel.add(jLabel12, gridBagConstraints);

        ageTxt.setText("1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        reportingHeaderPanel.add(ageTxt, gridBagConstraints);

        jLabel13.setText("Gender");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        reportingHeaderPanel.add(jLabel13, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        reportingHeaderPanel.add(genderTxt, gridBagConstraints);

        jLabel14.setText("Lab No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        reportingHeaderPanel.add(jLabel14, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        reportingHeaderPanel.add(labNumberTxt, gridBagConstraints);

        jPanel411.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel411.setLayout(new java.awt.GridBagLayout());

        reqidTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel411.add(reqidTextField, gridBagConstraints);

        searchButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton11.setToolTipText("Search");
        searchButton11.setEnabled(false);
        searchButton11.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton11.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton11.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton11.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton11ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel411.add(searchButton11, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        reportingHeaderPanel.add(jPanel411, gridBagConstraints);

        jLabel41.setText("Request Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        reportingHeaderPanel.add(jLabel41, gridBagConstraints);

        jLabel17.setText("Specimen Time");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        reportingHeaderPanel.add(jLabel17, gridBagConstraints);

        specimenTimeTxt.setText("1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        reportingHeaderPanel.add(specimenTimeTxt, gridBagConstraints);

        jScrollPane6.setBorder(javax.swing.BorderFactory.createTitledBorder("Lab test"));

        labTestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Test Requested", "Code", "Category"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        labTestTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labTestTableMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(labTestTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        reportingHeaderPanel.add(jScrollPane6, gridBagConstraints);

        jLabel21.setText("General Result");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        reportingHeaderPanel.add(jLabel21, gridBagConstraints);

        generalResultChkbx.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        generalResultChkbx.setForeground(new java.awt.Color(255, 0, 51));
        generalResultChkbx.setText("Tick if result is positive or outside normal range");
        generalResultChkbx.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        generalResultChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        reportingHeaderPanel.add(generalResultChkbx, gridBagConstraints);

        culturedChkbx.setForeground(new java.awt.Color(0, 0, 255));
        culturedChkbx.setText("Tick if procedure done through culture process");
        culturedChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        culturedChkbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                culturedChkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        reportingHeaderPanel.add(culturedChkbx, gridBagConstraints);

        referralCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "Referred to County or Regional Hospital", "Referred to National Hospital", "Referred to National Reference Lab", "Referred to KEMRI", "Referred for Quality Analysis", "From Other Facility", "From Blood Transfusion Centre", "Result received from referred samples", " " }));
        referralCmbx.setBorder(javax.swing.BorderFactory.createTitledBorder("Laboratory Specimen Referrals"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        reportingHeaderPanel.add(referralCmbx, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        reportingHeaderPanel.add(jLabel23, gridBagConstraints);

        jLabel22.setText("Specimen Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        reportingHeaderPanel.add(jLabel22, gridBagConstraints);

        specimenCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '-' AS specimen UNION SELECT DISTINCT specimen FROM pb_lab_specimen ORDER BY 1")
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        reportingHeaderPanel.add(specimenCmbx, gridBagConstraints);

        specimenConditionCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Good", "Bad" }));
        specimenConditionCmbx.setBorder(javax.swing.BorderFactory.createTitledBorder("Specimen Condition"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        reportingHeaderPanel.add(specimenConditionCmbx, gridBagConstraints);

        cancerInfectiveStatusChkbx.setText("Cancer Infective");
        cancerInfectiveStatusChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        reportingHeaderPanel.add(cancerInfectiveStatusChkbx, gridBagConstraints);

        cancerStatusInfectiveCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "Benign", "Infective", "Malignant" }));
        cancerStatusInfectiveCmbx.setBorder(javax.swing.BorderFactory.createTitledBorder("Cancer State (Non Infective)"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        reportingHeaderPanel.add(cancerStatusInfectiveCmbx, gridBagConstraints);

        referralResultsChkbx.setText("Results from referral");
        referralResultsChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        reportingHeaderPanel.add(referralResultsChkbx, gridBagConstraints);

        specimenSourceCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '-' AS specimen_source UNION SELECT DISTINCT specimen_source_description AS specimen_source FROM pb_lab_specimen_source ORDER BY 1")
        );
        specimenSourceCmbx.setBorder(javax.swing.BorderFactory.createTitledBorder("Specimen source"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        reportingHeaderPanel.add(specimenSourceCmbx, gridBagConstraints);

        labStationCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT '-' AS stores UNION SELECT DISTINCT stores FROM store_allocation WHERE user_name ilike current_user ORDER BY 1")
        );
        labStationCmbx.setBorder(javax.swing.BorderFactory.createTitledBorder("Laboratory Station"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        reportingHeaderPanel.add(labStationCmbx, gridBagConstraints);

        labDomainCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '-' AS category_description UNION SELECT DISTINCT category_description FROM pb_lab_maincategory ORDER BY 1")
        );
        labDomainCmbx.setBorder(javax.swing.BorderFactory.createTitledBorder("Laboratory Domain"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        reportingHeaderPanel.add(labDomainCmbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = -5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        labReportingTabPanel.add(reportingHeaderPanel, gridBagConstraints);

        resultsMainPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        resultsMainPanel.setLayout(new java.awt.GridBagLayout());

        commentsScrollPane.setViewportView(pathologistCommentsTxt);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 8.0;
        gridBagConstraints.weighty = 20.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        resultsMainPanel.add(commentsScrollPane, gridBagConstraints);

        commentsLabel.setText("Comments");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        resultsMainPanel.add(commentsLabel, gridBagConstraints);

        resultsPanel.setLayout(new java.awt.GridBagLayout());

        resultsSIPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        resultsSIPanel.setLayout(new java.awt.GridBagLayout());

        resultsSITable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Test", "Result", "Units", "Lower", "Upper"
            }
        ));

        resultsSITable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultsSITableMouseClicked(evt);
            }
        });
        resultsSIScrollPane.setViewportView(resultsSITable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        resultsSIPanel.add(resultsSIScrollPane, gridBagConstraints);

        normalRangeLbl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        normalRangeLbl.setText("Normal Range");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 70);
        resultsSIPanel.add(normalRangeLbl, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 50.0;
        resultsPanel.add(resultsSIPanel, gridBagConstraints);

        resultsNarrativePanel.setLayout(new java.awt.GridBagLayout());

        resultsNarrativeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Test", "Result"
            }
        ));
        resultsNarrativeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultsNarrativeTableMouseClicked(evt);
            }
        });
        resultsNarrativeTableScrollPane.setViewportView(resultsNarrativeTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        resultsNarrativePanel.add(resultsNarrativeTableScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 50.0;
        resultsPanel.add(resultsNarrativePanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 50.0;
        resultsMainPanel.add(resultsPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 50.0;
        labReportingTabPanel.add(resultsMainPanel, gridBagConstraints);

        buttonPanel.setLayout(new java.awt.GridBagLayout());

        removeRowBtn.setMnemonic('r');
        removeRowBtn.setText("Remove row");
        removeRowBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRowBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(removeRowBtn, gridBagConstraints);

        helpBtn.setMnemonic('h');
        helpBtn.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(helpBtn, gridBagConstraints);

        closeFormBtn.setMnemonic('C');
        closeFormBtn.setText("Close form");
        closeFormBtn.setToolTipText("Click here to close window");
        closeFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(closeFormBtn, gridBagConstraints);

        clearFormBtn.setMnemonic('l');
        clearFormBtn.setText("Clear form");
        clearFormBtn.setToolTipText("Click here to clear textfields");
        clearFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(clearFormBtn, gridBagConstraints);

        editResultsBtn.setMnemonic('E');
        editResultsBtn.setText("Edit laboratory results");
        editResultsBtn.setToolTipText("Click here to edit data");
        editResultsBtn.setEnabled(false);
        editResultsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editResultsBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(editResultsBtn, gridBagConstraints);

        saveResultsBtn.setMnemonic('O');
        saveResultsBtn.setText("Save laboratory results");
        saveResultsBtn.setToolTipText("Click here enter data");
        saveResultsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveResultsBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(saveResultsBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(jLabel4, gridBagConstraints);

        patientCardBtn.setText("Patient Card");
        patientCardBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientCardBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(patientCardBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        labReportingTabPanel.add(buttonPanel, gridBagConstraints);

        jTextField10.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        labReportingTabPanel.add(jTextField10, gridBagConstraints);

        jTextField82.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        labReportingTabPanel.add(jTextField82, gridBagConstraints);

        labreportingTabbedPane.addTab("Reporting Laboratory procedure results", labReportingTabPanel);

        verificationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        verificationPanel.setLayout(new java.awt.GridBagLayout());

        jPanel212.setLayout(new java.awt.GridBagLayout());

        verifyScrollPane.setAutoscrolls(true);

        posted2verifyTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                posted2verifyTableMouseClicked(evt);
            }
        });
        verifyScrollPane.setViewportView(posted2verifyTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        jPanel212.add(verifyScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        verificationPanel.add(jPanel212, gridBagConstraints);

        jLabel24.setText("Start date for displayed listing of results");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        verificationPanel.add(jLabel24, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        verificationPanel.add(datePicker11, gridBagConstraints);

        jButton32.setMnemonic('l');
        jButton32.setText("Refresh listing of results to verify");
        jButton32.setToolTipText("Click here to clear textfields");
        jButton32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton32ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        verificationPanel.add(jButton32, gridBagConstraints);

        jButton42.setMnemonic('C');
        jButton42.setText("Close form");
        jButton42.setToolTipText("Click here to close window");
        jButton42.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton42ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        verificationPanel.add(jButton42, gridBagConstraints);

        jLabel18.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        verificationPanel.add(jLabel18, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        verificationPanel.add(jSeparator12, gridBagConstraints);

        jTextField62.setEditable(false);
        jTextField62.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField62.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        verificationPanel.add(jTextField62, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        verificationPanel.add(jLabel16, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        verificationPanel.add(jLabel20, gridBagConstraints);

        jButton1.setText("Verify Results highlighted results");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        verificationPanel.add(jButton1, gridBagConstraints);

        labreportingTabbedPane.addTab("List of processed results", verificationPanel);

        verifiedResultsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        verifiedResultsPanel.setLayout(new java.awt.GridBagLayout());

        releasedResultsPanel.setLayout(new java.awt.GridBagLayout());

        verifiedScrollPane.setAutoscrolls(true);

        releasedResultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Date", "Patient No", "Patient Name", "Lab Procedure No.", "Read"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });

        releasedResultsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                releasedResultsTableMouseClicked(evt);
            }
        });
        verifiedScrollPane.setViewportView(releasedResultsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        releasedResultsPanel.add(verifiedScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        verifiedResultsPanel.add(releasedResultsPanel, gridBagConstraints);

        jLabel241.setText("Start date for displayed results");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        verifiedResultsPanel.add(jLabel241, gridBagConstraints);

        verifiedDatePicker.setBorder(javax.swing.BorderFactory.createTitledBorder("Start Date"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        verifiedResultsPanel.add(verifiedDatePicker, gridBagConstraints);

        clearVerifiedListingBtn.setMnemonic('l');
        clearVerifiedListingBtn.setText("Clear displayed listing");
        clearVerifiedListingBtn.setToolTipText("Click here to clear textfields");
        clearVerifiedListingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearVerifiedListingBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        verifiedResultsPanel.add(clearVerifiedListingBtn, gridBagConstraints);

        colseVerifiedBtn.setMnemonic('C');
        colseVerifiedBtn.setText("Close form");
        colseVerifiedBtn.setToolTipText("Click here to close window");
        colseVerifiedBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colseVerifiedBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        verifiedResultsPanel.add(colseVerifiedBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        verifiedResultsPanel.add(jSeparator121, gridBagConstraints);

        jCheckBox1.setText("Click to display results listing");
        jCheckBox1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        verifiedResultsPanel.add(jCheckBox1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        verifiedResultsPanel.add(jLabel15, gridBagConstraints);

        endDatePicker.setBorder(javax.swing.BorderFactory.createTitledBorder("End Date"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        verifiedResultsPanel.add(endDatePicker, gridBagConstraints);

        labreportingTabbedPane.addTab("View released results", verifiedResultsPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(labreportingTabbedPane, gridBagConstraints);

        jPanel9.setLayout(new java.awt.GridBagLayout());

        jPanel31.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel31.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(outpatientCheckBox);
        outpatientCheckBox.setForeground(new java.awt.Color(51, 51, 255));
        outpatientCheckBox.setMnemonic('o');
        outpatientCheckBox.setSelected(true);
        outpatientCheckBox.setText("OUT-Patients");
        outpatientCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel31.add(outpatientCheckBox, gridBagConstraints);

        buttonGroup1.add(inpatientCheckBox);
        inpatientCheckBox.setForeground(new java.awt.Color(255, 0, 51));
        inpatientCheckBox.setMnemonic('i');
        inpatientCheckBox.setText("IN-Patients");
        inpatientCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel31.add(inpatientCheckBox, gridBagConstraints);

        buttonGroup1.add(jCheckBox2);
        jCheckBox2.setForeground(new java.awt.Color(0, 153, 0));
        jCheckBox2.setText("MCH/FP");
        jCheckBox2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jCheckBox2.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel31.add(jCheckBox2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel9.add(jPanel31, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel9.add(mainDatePicker, gridBagConstraints);

        jLabel5.setText("Date of laboratory procedure");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel9.add(jLabel5, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        buttonGroup2.add(jCheckBox3);
        jCheckBox3.setSelected(true);
        jCheckBox3.setText("Search By  No.");
        jCheckBox3.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel3.add(jCheckBox3, gridBagConstraints);

        buttonGroup2.add(jCheckBox4);
        jCheckBox4.setText("Search By Name");
        jCheckBox4.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel3.add(jCheckBox4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel9.add(jPanel3, gridBagConstraints);

        searchpatienttxtfld.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search patient laboratory requests (Type patient number or names)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 102, 255))); // NOI18N
        searchpatienttxtfld.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchpatienttxtfldCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel9.add(searchpatienttxtfld, gridBagConstraints);

        refreshListingsBtn.setBackground(new java.awt.Color(153, 255, 153));
        refreshListingsBtn.setForeground(new java.awt.Color(255, 0, 0));
        refreshListingsBtn.setMnemonic('l');
        refreshListingsBtn.setText("Refresh form for updated waiting lists");
        refreshListingsBtn.setToolTipText("Click here to clear textfields");
        refreshListingsBtn.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        refreshListingsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshListingsBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 0.2;
        jPanel9.add(refreshListingsBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(jPanel9, gridBagConstraints);

        getAccessibleContext().setAccessibleName("Laboratory procedure/Tests Results");

        setBounds(0, 0, 823, 496);
    }// </editor-fold>//GEN-END:initComponents

    private void colseVerifiedBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colseVerifiedBtnActionPerformed
        this.setVisible(false);   // Add your handling code here:

        // Add your handling code here:
    }//GEN-LAST:event_colseVerifiedBtnActionPerformed

    private void clearVerifiedListingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearVerifiedListingBtnActionPerformed

        for (int k = 0; k < releasedResultsTable.getRowCount(); k++) {
            for (int r = 0; r < releasedResultsTable.getColumnCount(); r++) {
                releasedResultsTable.getModel().setValueAt(null, k, r);
            }
        }   // Add your handling code here:
    }//GEN-LAST:event_clearVerifiedListingBtnActionPerformed

    private void releasedResultsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_releasedResultsTableMouseClicked
        String receiptNo = null;

        // if (Boolean.valueOf(jTable1.getModel().getValueAt(jTable1.getSelectedRow(),4).toString()) == java.lang.Boolean.TRUE) {
        receiptNo = releasedResultsTable.getValueAt(releasedResultsTable.getSelectedRow(), 3).toString();
        com.afrisoftech.reports.PatientLabResultsPdf policy = new com.afrisoftech.reports.PatientLabResultsPdf();

        policy.PatientLabResultsPdf(connectDB, receiptNo, receiptNo);  // Add your handling code here:
    }//GEN-LAST:event_releasedResultsTableMouseClicked

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        releasedResultsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct date,patient_no,patient_name,lab_no, false as results_read from hp_lab_results where date  BETWEEN '" + verifiedDatePicker.getDate() + "' AND '" + endDatePicker.getDate() + "'  ORDER BY date,lab_no"));
        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void posted2verifyTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_posted2verifyTableMouseClicked
        String receiptNo = null;

        // if (Boolean.valueOf(jTable1.getModel().getValueAt(jTable1.getSelectedRow(),4).toString()) == java.lang.Boolean.TRUE) {
        receiptNo = posted2verifyTable.getValueAt(posted2verifyTable.getSelectedRow(), 3).toString();
        com.afrisoftech.reports.PatientLabResultsPdf policy = new com.afrisoftech.reports.PatientLabResultsPdf();

        policy.PatientLabResultsPdf(connectDB, receiptNo, receiptNo);

        //}  // Add your handling code here:
    }//GEN-LAST:event_posted2verifyTableMouseClicked

    private void jButton42ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton42ActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jButton42ActionPerformed

    private void raiserequestsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_raiserequestsButtonActionPerformed
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        try {
            String user = null, patCategory = null, department = null;
            connectDB.setAutoCommit(false);
            java.sql.Statement ps11 = connectDB.createStatement(), ps = connectDB.createStatement();
            java.sql.ResultSet rse121 = null, rst = null;;
            java.sql.Statement stm121q = connectDB.createStatement();
            ResultSet rst11 = ps11.executeQuery("select current_user");
            while (rst11.next()) {
                rst11.getObject(1).toString();
                // billNo = rst11.getObject(1).toString();
                user = rst11.getObject(1).toString();

            }
            int transNo = 0;

            for (int t = 0; t < this.pendingTable.getRowCount(); t++) {
                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select gender,age,department from hp_patient_visit where "
                        + "patient_no ='" + pendingTable.getValueAt(t, 1).toString() + "' ORDER BY age desc LIMIT 1 ");
                while (rset1.next()) {
                    patCategory = rset1.getObject(3).toString();

                }

                if (this.pendingTable.getValueAt(t, 9) == Boolean.TRUE) {
                    rse121 = stm121q.executeQuery("select activity from pb_activity where code ='" + pendingTable.getValueAt(t, 14).toString() + "'");

                    if (rse121.next()) {
                        if (pendingTable.getValueAt(t, 3).toString().trim().startsWith("Cash")
                                && (pendingTable.getValueAt(t, 7).toString().trim().startsWith("O"))) {
                            PreparedStatement pstmt2f = connectDB.prepareStatement("insert into hp_patient_billing values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,trim(?),?)");

                            pstmt2f.setString(1, pendingTable.getValueAt(t, 1).toString());
                            pstmt2f.setString(2, pendingTable.getValueAt(t, 2).toString());
                            pstmt2f.setString(3, pendingTable.getValueAt(t, 3).toString());
                            pstmt2f.setString(4, patCategory);
                            pstmt2f.setString(5, pendingTable.getValueAt(t, 4).toString());
                            pstmt2f.setDouble(6, java.lang.Double.valueOf(pendingTable.getValueAt(t, 5).toString()));
                            pstmt2f.setDouble(7, java.lang.Double.valueOf(pendingTable.getValueAt(t, 6).toString()));
                            pstmt2f.setObject(8, pendingTable.getValueAt(t, 14).toString());
                            pstmt2f.setDate(9, com.afrisoftech.lib.SQLDateFormat.getSQLDate(mainDatePicker.getDate()));//java.sql.Date.valueOf(String.format("%1$tY-%1$tm-%1$te",datePicker1.getDate())));
                            pstmt2f.setString(10, pendingTable.getValueAt(t, 10).toString());
                            pstmt2f.setString(11, user);
                            pstmt2f.setBoolean(12, false);
                            pstmt2f.setString(13, rse121.getString(1));
                            pstmt2f.setString(14, pendingTable.getValueAt(t, 12).toString());
                            pstmt2f.setString(15, pendingTable.getValueAt(t, 8).toString());
                            pstmt2f.setBoolean(16, false);
                            pstmt2f.executeUpdate();
                            java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request"
                                    + " SET posted_to_lab='LAB POSTING' "
                                    + " where request_id = '" + pendingTable.getValueAt(t, 10).toString().trim() + "'");
                            pstmt46.executeUpdate();
                        } else if (pendingTable.getValueAt(t, 3).toString().trim().startsWith("Scheme")
                                || (pendingTable.getValueAt(t, 7).toString().trim().startsWith("I") == Boolean.TRUE)) {
                            //in patient and outpatient scheme
                            ////************************************
                            ////************************************

                            String payMode = null;
                            String patientAcc = null;
                            String cardNo = null;
                            String AccDesc = null;
                            String scheme = pendingTable.getValueAt(t, 3).toString();
                            String cardName = null;
                            String isurer = null;
                            String expDate = null;
                            String staffNo = null;

                            java.sql.Statement stm1 = connectDB.createStatement();
                            java.sql.ResultSet rse1 = stm1.executeQuery("select pay_mode,account_no,description,payer,payer,expiry_date,"
                                    + "account_no from hp_inpatient_register where patient_no ='" + pendingTable.getValueAt(t, 1).toString() + "'");
                            while (rse1.next()) {
                                cardNo = dbObject.getDBObject(rse1.getObject(2), "-");
                                scheme = dbObject.getDBObject(rse1.getObject(3), "-");
                                cardName = dbObject.getDBObject(rse1.getObject(4), "-");
                                isurer = dbObject.getDBObject(rse1.getObject(5), "-");
                                expDate = rse1.getString(6);
                                staffNo = dbObject.getDBObject(rse1.getObject(7), "-");

                            }

                            java.sql.Statement stm12p = connectDB.createStatement();
                            java.sql.ResultSet rse12p = stm12p.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                            while (rse12p.next()) {

                                patientAcc = rse12p.getObject(1).toString();
                                AccDesc = rse12p.getObject(2).toString();
                            }

                            rst = ps.executeQuery("select nextval('transaction_no_seq')");

                            while (rst.next()) {
                                rst.getObject(1).toString();

                                transNo = rst.getInt(1);
                            }

                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                            pstmt.setString(1, pendingTable.getValueAt(t, 1).toString());
                            pstmt.setObject(2, pendingTable.getValueAt(t, 4).toString());
                            pstmt.setString(3, patCategory);
                            pstmt.setString(4, pendingTable.getValueAt(t, 3).toString());
                            pstmt.setString(5, String.valueOf(transNo));
                            pstmt.setString(7, scheme);
                            pstmt.setString(6, cardNo);
                            pstmt.setString(8, cardName);
                            pstmt.setString(9, isurer);
                            pstmt.setDate(10, null);//java.sql.Date.valueOf(expDate.toString()));
                            pstmt.setString(11, "");
                            pstmt.setDouble(12, java.lang.Double.valueOf(pendingTable.getValueAt(t, 6).toString()));
                            pstmt.setDouble(13, 0.00);
                            pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()));
                            pstmt.setObject(15, patientAcc);
                            pstmt.setString(16, rse121.getString(1));
                            pstmt.setDouble(17, java.lang.Double.valueOf(pendingTable.getValueAt(t, 5).toString()));
                            pstmt.setObject(18, staffNo);
                            pstmt.setBoolean(19, false);
                            pstmt.setString(20, "Billing");
                            pstmt.setBoolean(21, false);
                            pstmt.setString(22, AccDesc);
                            pstmt.setObject(23, pendingTable.getValueAt(t, 12).toString());
                            pstmt.setString(24, user);
                            pstmt.setString(25, pendingTable.getValueAt(t, 10).toString());
                            if (pendingTable.getValueAt(t, 7).toString().trim().startsWith("O")) {
                                pstmt.setString(26, "OP");
                            } else if (pendingTable.getValueAt(t, 7).toString().trim().startsWith("I") == Boolean.TRUE) {
                                pstmt.setString(26, "IP");
                            }
                            pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));//com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.util.Calendar.getInstance().getTime()));
                            pstmt.setObject(28, pendingTable.getValueAt(t, 12).toString());
                            pstmt.executeUpdate();

                            java.sql.PreparedStatement pstmt24 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                            pstmt24.setObject(1, pendingTable.getValueAt(t, 14).toString());
                            pstmt24.setString(2, rse121.getString(1));
                            pstmt24.setString(3, pendingTable.getValueAt(t, 1).toString());
                            pstmt24.setString(4, pendingTable.getValueAt(t, 1).toString());
                            pstmt24.setString(5, "");
                            pstmt24.setString(6, cardNo);
                            pstmt24.setString(7, cardName);
                            if (pendingTable.getValueAt(t, 7).toString().trim().startsWith("O")) {
                                pstmt24.setString(8, "OP");
                            } else if (pendingTable.getValueAt(t, 7).toString().trim().startsWith("I") == Boolean.TRUE) {
                                pstmt24.setString(8, "IP");
                            }
                            pstmt24.setString(9, "");
                            pstmt24.setObject(10, pendingTable.getValueAt(t, 3).toString());
                            pstmt24.setString(11, "");
                            pstmt24.setString(12, "");
                            pstmt24.setString(13, "");
                            pstmt24.setString(14, pendingTable.getValueAt(t, 4).toString());
                            pstmt24.setString(15, "Revenue");
                            pstmt24.setDouble(16, 0.00);
                            pstmt24.setDouble(17, java.lang.Double.valueOf(pendingTable.getValueAt(t, 6).toString()));
                            pstmt24.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()));
                            pstmt24.setObject(19, transNo);
                            pstmt24.setBoolean(20, false);
                            pstmt24.setBoolean(21, false);
                            pstmt24.setBoolean(22, false);
                            pstmt24.setString(23, user);
                            pstmt24.executeUpdate();

                            //in patient and outpatient scheme
                            ////************************************
                            ////************************************
                            ////************************************
                            java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request"
                                    + " SET posted_to_lab='LAB POSTING',paid = true  "
                                    + " where request_id = '" + pendingTable.getValueAt(t, 10).toString().trim() + "'");
                            pstmt46.executeUpdate();
                        }

                    }
                }
            }

            javax.swing.JOptionPane.showMessageDialog(this, "Insert Successful", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            connectDB.commit();
            connectDB.setAutoCommit(true);
            this.refreshListingsBtn.doClick();

        } catch (java.sql.SQLException sq) {

            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            Logger.getLogger(LabResultsIntfr.class.getName()).log(Level.SEVERE, null, sq);
        }
        labreportingTabbedPane.setSelectedIndex(1);
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_raiserequestsButtonActionPerformed

    private void jButton32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton32ActionPerformed

        posted2verifyTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT date, patient_no, patient_name, lab_no, request_id, typeof_test, lab_domain, lab_station, false as verify FROM hp_lab_results WHERE verified = false ORDER BY 1,4"));

        // Add your handling code here:
    }//GEN-LAST:event_jButton32ActionPerformed

    private void refreshListingsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshListingsBtnActionPerformed
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        for (int k = 0; k < paidTable.getRowCount(); k++) {
            for (int r = 0; r < paidTable.getColumnCount(); r++) {
                paidTable.getModel().setValueAt(null, k, r);
            }
        }

        for (int k = 0; k < jTable111.getRowCount(); k++) {
            for (int r = 0; r < jTable111.getColumnCount(); r++) {
                jTable111.getModel().setValueAt(null, k, r);
            }
        }

        try {

            {
                System.out.println("SELECT pb_doctors_request.trans_date,patient_no, patient_name, payment_mode,service,quantity,amount,inv_no,doctor,"
                        + "false as Carry_Test,request_id as Request_No,curr_date::time(0),visit_id,notes as Test_notes "
                        + "  FROM pb_doctors_request where "
                        + "requisition_no='LAB' AND pb_doctors_request.trans_date='" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(mainDatePicker.getDate()) + "' and "
                        + "   pb_doctors_request.paid=true and \n"
                        + "  pb_doctors_request.collected=false order by 1,12 ");

                this.paidTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,
                        "SELECT pb_doctors_request.trans_date,patient_no, patient_name, payment_mode,service,quantity,amount,inv_no,doctor,"
                        + "false as Carry_Test,request_id as Request_No,curr_date::time(0),visit_id,diagnosis as Specimen,notes as Test_notes, "
                                + "(SELECT doctor FROM hp_patient_billing WHERE hp_patient_billing.patient_no = pb_doctors_request.patient_no AND pb_doctors_request.inv_no = hp_patient_billing.inpatient_no LIMIT 1) as receipt_no,"
                        + " (CASE WHEN payment_mode ilike 'scheme' THEN (SELECT description FROM (select date,description from hp_patient_register WHERE hp_patient_register.patient_no = pb_doctors_request.patient_no UNION select date,description from hp_inpatient_register WHERE hp_inpatient_register.patient_no = pb_doctors_request.patient_no ORDER BY date DESC LIMIT 1) as foo) ELSE '' END) as scheme_name FROM pb_doctors_request where "
                        + "requisition_no='LAB' AND pb_doctors_request.trans_date='" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(mainDatePicker.getDate()) + "' and "
                        + "   pb_doctors_request.paid=true and \n"
                        + "  pb_doctors_request.collected=false order by 1,12 "));

                this.pendingTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,
                        "SELECT pb_doctors_request.trans_date,patient_no, patient_name, payment_mode,service,quantity,amount,inv_no,doctor,"
                        + "false as Raise_Bill,request_id as Request_No,curr_date::time(0),visit_id,diagnosis as Specimen,notes as Test_notes,gl_code "
                        + "  FROM pb_doctors_request where"
                        + "   requisition_no='LAB' AND pb_doctors_request.trans_date='" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(mainDatePicker.getDate()) + "' and "
                        + "   pb_doctors_request.paid=false and \n"
                        + "  pb_doctors_request.collected=false order by 1,12 "));

                this.posted2verifyTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT trans_date,patient_no,patient_name, payment_mode,service,quantity,amount,inv_no,doctor,false as Approve,request_id as Request_No,curr_date::time(0)       \n"
                        + ",visit_id,doctor "
                        + "  FROM pb_doctors_request where"
                        + " requisition_no='LAB' and results=true and "
                        + "paid=true and collected=true  "
                        + "and trans_date >='(" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(mainDatePicker.getDate()) + ")-1' "
                        + "ORDER BY trans_date asc"));

            }

        } catch (Exception sqlExec) {

            sqlExec.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_refreshListingsBtnActionPerformed

    private void jButton61MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton61MouseClicked

//            
//            java.sql.ResultSet rstt = pst.executeQuery("select nextval('transaction_no_seq')");
//
//
//            while (rstt.next()) {
//                rstt.getObject(1).toString();
//
//                transNo = rstt.getObject(1).toString();
//            }
//            java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
//
//
//            while (rse12.next()) {
//
//                patientAcc = rse12.getObject(1).toString();
//                AccDesc = rse12.getObject(2).toString();
//            }
//            java.sql.Statement stm121q = connectDB.createStatement();
//
//
//            
//
//            int i = jTable11.getSelectedRow();
//            // for (int i = 0; i < jTable1.getRowCount(); i++){
        // if (jTable11.getValueAt(i, 9) != null)
//    {
//                if (Boolean.valueOf(jTable11.getModel().getValueAt(t, 9).toString()) == java.lang.Boolean.TRUE) {
//                    java.sql.ResultSet rse121 = stm121q.executeQuery("SELECT DISTINCT gl_account,main_service FROM pb_operating_parameters pb,pb_activity pa WHERE pb.gl_account = pa.code AND pa.department ILIKE 'LAB' AND service_type ILIKE '"+jTable11.getValueAt(i, 4)+"'");
//
//            while (rse121.next()) {
//
//                actCode = rse121.getObject(1).toString();
//                glAcc = rse121.getObject(2).toString();
//            }
//
//                    System.out.println("Count" + i);
//                    java.sql.Statement ps11 = connectDB.createStatement();
//                    java.sql.ResultSet rst11 = ps11.executeQuery("select nextval('lab_request'),current_user");
//                    while (rst11.next()) {
//                        rst11.getObject(1).toString();
//
//                        billNo = rst11.getObject(1).toString();
//                        user = rst11.getObject(2).toString();
//
//                    }
//
//                    request = jTable11.getValueAt(i, 7).toString();
//                    if (request.startsWith("I")) {
//                        java.sql.ResultSet rse12t = stm12t.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
//
//                        while (rse12t.next()) {
//
//                            patientAcc = rse12t.getObject(1).toString();
//                            AccDesc = rse12t.getObject(2).toString();
//                        }
//
//
//                        java.sql.Statement stm121t = connectDB.createStatement();
//
//                        java.sql.Statement stm12n = connectDB.createStatement();
//                        java.sql.ResultSet rse12n = stm12n.executeQuery("select adm_date from hp_inpatient_register where patient_no ='" + jTable11.getValueAt(i, 1).toString() + "'");
//                        while (rse12n.next()) {
//                            admDate = rse12n.getDate(1);
//                        }
//                        java.sql.Statement ps11w1 = connectDB.createStatement();
//                        java.sql.ResultSet rst11w1 = ps11w1.executeQuery("select visit_id,date_admitted from hp_admission where patient_no = '" + jTable11.getValueAt(i, 1).toString() + "' order by date_admitted desc limit 1");
//                        while (rst11w1.next()) {
//
//
//                            visitid = rst11w1.getObject(1).toString();
//                        }
//
//
//                        System.out.println(admDate);
//                   
// 
// }
//
////                    else {
////                        java.sql.Statement ps11w1 = connectDB.createStatement();
////                        java.sql.ResultSet rst11w1 = ps11w1.executeQuery("select visit_id from hp_admission where patient_no = '" + jTable11.getValueAt(i, 1).toString() + "' and check_out = false");
////                        while (rst11w1.next()) {
////
////
////                            visitid = rst11w1.getObject(1).toString();
////                        }
////
////                        java.sql.Statement ps11w11 = connectDB.createStatement();
////                        java.sql.ResultSet rst11w11 = ps11w11.executeQuery("select distinct slip_no,date from credit_acc_slip where patient_no = '" + jTable11.getValueAt(jTable11.getSelectedRow(), 1).toString() + "' order by date desc limit 1");
////                        while (rst11w11.next()) {
////
////
////                            opvisitid = rst11w11.getObject(1).toString();
////                        }
//// 
////
////                        java.sql.Statement pstm121t = connectDB.createStatement();
////                        java.sql.ResultSet rse121t = pstm121t.executeQuery("select activity from pb_activity where code ='" + actCode + "'");
////                        while (rse121.next()) {
////
////                            glAcc = rse121t.getObject(1).toString();
////                        }
////                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
////                        //1 for (int i = 0; i < jTable1.getRowCount(); i++){
////                        pstmt.setString(1, jTable11.getValueAt(i, 1).toString());
////                        pstmt.setObject(2, jTable11.getValueAt(i, 4).toString());
////                        pstmt.setString(3, "General");
////                        pstmt.setString(4, jTable11.getValueAt(i, 3).toString());
////                        pstmt.setString(5, transNo);
////                        pstmt.setString(7, scheme);
////                        pstmt.setString(6, cardNo);
////                        pstmt.setString(8, cardName);
////                        pstmt.setString(9, isurer);
////                        pstmt.setDate(10, null);
////                        pstmt.setString(11, "");
////                        pstmt.setDouble(12, java.lang.Double.valueOf(jTable11.getValueAt(i, 6).toString()));
////                        pstmt.setDouble(13, 0.00);
////                        pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(jTable11.getValueAt(i, 0).toString())));
////                        pstmt.setObject(15, patientAcc);
////                        pstmt.setString(16, glAcc);
////                        pstmt.setDouble(17, java.lang.Double.valueOf(jTable11.getValueAt(i, 5).toString()));
////                        pstmt.setObject(18, staffNo);
////                        pstmt.setBoolean(19, false);
////                        pstmt.setString(20, "Billing");
////                        pstmt.setBoolean(21, false);
////                        pstmt.setString(22, AccDesc);
////                        pstmt.setString(23, opvisitid);
////                        pstmt.setString(24, user);
////                        pstmt.setString(25, billNo);
////                        pstmt.setString(26, "OP");
////                        pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
////                        pstmt.setString(28, opvisitid);
////                        pstmt.executeUpdate();
////
////
////                        java.sql.PreparedStatement pstmt2v = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
////                        pstmt2v.setObject(1, actCode);
////                        pstmt2v.setString(2, glAcc);
////                        pstmt2v.setString(3, jTable11.getValueAt(i, 1).toString());
////                        pstmt2v.setString(4, jTable11.getValueAt(i, 2).toString());
////                        pstmt2v.setString(5, "");
////                        pstmt2v.setString(6, cardNo);
////                        pstmt2v.setString(7, cardName);
////                        pstmt2v.setString(8, "OP");
////                        pstmt2v.setString(9, jTable11.getValueAt(i, 8).toString());
////                        pstmt2v.setString(10, jTable11.getValueAt(i, 3).toString());
////                        pstmt2v.setString(11, "");
////                        pstmt2v.setString(12, "");
////                        pstmt2v.setString(13, "");
////                        pstmt2v.setString(14, jTable11.getValueAt(i, 4).toString());
////                        pstmt2v.setString(15, "Revenue");
////                        pstmt2v.setDouble(16, 0.00);
////                        pstmt2v.setDouble(17, java.lang.Double.valueOf(jTable11.getValueAt(i, 6).toString()));
////                        pstmt2v.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(jTable11.getValueAt(i, 0).toString())));
////                        pstmt2v.setString(19, transNo);
////                        pstmt2v.setBoolean(20, false);
////                        pstmt2v.setBoolean(21, false);
////                        pstmt2v.setBoolean(22, false);
////                        pstmt2v.setString(23, user);
////                        pstmt2v.executeUpdate();
////                        //}
////                        java.sql.PreparedStatement pstmt46c = connectDB.prepareStatement("UPDATE hp_patient_billing SET collected = true where inpatient_no = '" + jTable11.getValueAt(jTable11.getSelectedRow(), 7).toString() + "' AND service = '" + jTable11.getValueAt(jTable11.getSelectedRow(), 4).toString() + "'");
////                        pstmt46c.executeUpdate();
////                        java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request SET collected = true where requisition_no='LAB' and inv_no = '" + jTable11.getValueAt(jTable11.getSelectedRow(), 7).toString() + "' AND service = '" + jTable11.getValueAt(jTable11.getSelectedRow(), 4).toString() + "'");
////                        pstmt46.executeUpdate();
////                        // }
////                    }
//                }
    }//GEN-LAST:event_jButton61MouseClicked

    private void paidTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paidTableMouseClicked

        // Add your handling code here:
    }//GEN-LAST:event_paidTableMouseClicked

    private void jSearchTable211MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable211MouseClicked
        // jTextField1.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
//        jTextField91.setText(jSearchTable211.getValueAt(jSearchTable211.getSelectedRow(), 0).toString());
        labDisciplineTxt.setText(jSearchTable211.getValueAt(jSearchTable211.getSelectedRow(), 1).toString());
        jTextField10.setText(jSearchTable211.getValueAt(jSearchTable211.getSelectedRow(), 2).toString());
        reqidTextField.setText(jSearchTable211.getValueAt(jSearchTable211.getSelectedRow(), 0).toString());

        for (int k = 0; k < resultsSITable.getRowCount(); k++) {
            for (int r = 0; r < resultsSITable.getColumnCount(); r++) {
                resultsSITable.getModel().setValueAt(null, k, r);
            }
        }
        for (int m = 0; m < resultsNarrativeTable.getRowCount(); m++) {
            for (int j = 0; j < resultsNarrativeTable.getColumnCount(); j++) {
                resultsNarrativeTable.getModel().setValueAt(null, m, j);
            }
        }
        this.jSearchDialog21.dispose();
        int i = 0;
        if (this.jTextField10.getText().toLowerCase().startsWith("t")) {
            // this.jPanel11.setVisible(true);
            this.resultsNarrativePanel.setVisible(false);
            try {
                java.sql.Statement stmt = connectDB.createStatement();

                java.sql.Statement stmtTable1 = connectDB.createStatement();

                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT typeof_test,units,lower_limit,upper_limit FROM pb_lab_standards where test = '" + this.labTestTable.getValueAt(labTestTable.getSelectedRow(), 0) + "' and status = true");

                while (rsetTable1.next()) {

                    System.out.println("Working at table row " + i);
                    resultsSITable.setValueAt(rsetTable1.getObject(1), i, 0);
                    resultsSITable.setValueAt(rsetTable1.getObject(2), i, 2);
                    resultsSITable.setValueAt(rsetTable1.getObject(3), i, 3);
                    resultsSITable.setValueAt(rsetTable1.getObject(4), i, 4);

                    i++;

                    //                i = i + i;
                    //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                }

            } catch (java.sql.SQLException sqlExec) {

                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

            }
        } else {
            try {
                this.resultsNarrativePanel.setVisible(true);
                //   this.jPanel11.setVisible(false);
                java.sql.Statement stmt = connectDB.createStatement();

                java.sql.Statement stmtTable1 = connectDB.createStatement();

                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT typeof_test,status FROM pb_lab_standards where test = '" + this.labTestTable.getValueAt(labTestTable.getSelectedRow(), 0) + "' and status = false");

                while (rsetTable1.next()) {

                    System.out.println("Working at table row " + i);
                    resultsNarrativeTable.setValueAt(rsetTable1.getObject(1), i, 0);
                    // jTable2.setValueAt(rsetTable1.getObject(2), i, 1);
                    //  jTable2.setValueAt(rsetTable1.getObject(3), i, 2);
                    //jTable1.setValueAt(rsetTable1.getObject(4), i, 3);

                    i++;

                    //                i = i + i;
                    //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                }

            } catch (java.sql.SQLException sqlExec) {

                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

            }
        }  // Add your handling code here:
    }//GEN-LAST:event_jSearchTable211MouseClicked

    private void jButton5211ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5211ActionPerformed
        this.jSearchDialog211.dispose();  // Add your handling code here:
    }//GEN-LAST:event_jButton5211ActionPerformed

    private void jTextField11311CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11311CaretUpdate
        jSearchTable211.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT distinct dr.service as test,pb.specimen as name,pb.status as status from pb_lab_standards pb ,pb_doctors_request dr where dr.service ILIKE '" + jTextField11311.getText() + "%' and collected =false and patient_no = '" + patientNumberTxt.getText() + "' order by dr.service"));

        //   searchRowSet211.execute("SELECT distinct test,specimen as name,status from pb_lab_standards where test ILIKE '"+jTextField11311.getText()+"%' order by test");
        // searchRowSet211.execute("SELECT distinct dr.service as test,pb.specimen as name,pb.status as status from pb_lab_standards pb ,pb_doctors_request dr where dr.service ILIKE '"+jTextField11311.getText()+"%' and collected =false and patient_no = '"+jTextField9.getText()+"' and dr.service = pb.test order by dr.service");
        jSearchTable211.setShowHorizontalLines(false);
        jSearchScrollPane211.setViewportView(jSearchTable211);

        // Add your handling code here:
    }//GEN-LAST:event_jTextField11311CaretUpdate

    private void searchButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton11ActionPerformed
        searchButtonClicked211();  // Add your handling code here:
    }//GEN-LAST:event_searchButton11ActionPerformed
    private void searchButtonClicked211() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.reqidTextField.getLocationOnScreen();

        jSearchDialog211.setSize(400, 200);

        jSearchDialog211.setLocation(point);

        jSearchDialog211.setVisible(true);

    }
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        jSearchDialog.dispose();      // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void resultsSITableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultsSITableMouseClicked
//        if (jTable1.getSelectedColumn() == 0) {
//
//            this.cmboxMouseClicked2();
//        }       // Add your handling code here:
    }//GEN-LAST:event_resultsSITableMouseClicked

    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        if (this.resultsSIPanel.isVisible()) {
            // if(this.jCheckBox1.isSelected()){
            resultsSITable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0), resultsSITable.getSelectedRow(), 0);
            resultsSITable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1), resultsSITable.getSelectedRow(), 3);
            resultsSITable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 2), resultsSITable.getSelectedRow(), 4);
            resultsSITable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 3), resultsSITable.getSelectedRow(), 2);

        } else {
            resultsNarrativeTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0), resultsNarrativeTable.getSelectedRow(), 0);

        }
        jSearchDialog.dispose();           // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked

    private void jTextField11CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11CaretUpdate
        if (this.resultsSIPanel.isVisible()) {
            if (jTextField11.getCaretPosition() < 3) {

                System.out.println("Nothing");
            } else {
                // try {
                jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select typeof_test ,lower_limit,upper_limit,units FROM pb_lab_test WHERE typeof_test ILIKE '" + jTextField11.getText() + "%' and status = true order by typeof_test"));

                jSearchScrollPane.setViewportView(jSearchTable);
                System.out.println("Cannot sort out");

            }
        } else {
            if (jTextField11.getCaretPosition() < 3) {

                System.out.println("Nothing");
            } else {
                jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select typeof_test  FROM pb_lab_test WHERE typeof_test ILIKE '" + jTextField11.getText() + "%' AND  status = false order by typeof_test"));

                jSearchScrollPane.setViewportView(jSearchTable);
                System.out.println("Cannot sort out");

            }
        }        // Add your handling code here:
    }//GEN-LAST:event_jTextField11CaretUpdate
    private void cmboxMouseClicked2() {

        System.out.println("Showing dialog");
        java.awt.Point point = resultsNarrativeTable.getLocationOnScreen();
        jSearchDialog.setSize(400, 200);
        jSearchDialog.setLocation(point);
        jSearchDialog.setVisible(true);
    }
    private void resultsNarrativeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultsNarrativeTableMouseClicked
//
//        if (jTable2.getSelectedColumn() == 0) {
//
//            this.cmboxMouseClicked2();
//        }         // Add your handling code here:
    }//GEN-LAST:event_resultsNarrativeTableMouseClicked

    private void jButton521ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton521ActionPerformed
        this.jSearchDialog21.dispose();   // Add your handling code here:
    }//GEN-LAST:event_jButton521ActionPerformed

    private void jSearchTable21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable21MouseClicked
        // jTextField1.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
        // jTextField91.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 0).toString());
        labDisciplineTxt.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 1).toString());
        //   jTextField10.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 2).toString());

        for (int k = 0; k < resultsSITable.getRowCount(); k++) {
            for (int r = 0; r < resultsSITable.getColumnCount(); r++) {
                resultsSITable.getModel().setValueAt(null, k, r);
            }
        }
        for (int m = 0; m < resultsNarrativeTable.getRowCount(); m++) {
            for (int j = 0; j < resultsNarrativeTable.getColumnCount(); j++) {
                resultsNarrativeTable.getModel().setValueAt(null, m, j);
            }
        }
        this.jSearchDialog21.dispose();

        try {
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.Statement stmtTable1 = connectDB.createStatement();

            java.sql.ResultSet rset = stmtTable1.executeQuery("SELECT status FROM pb_lab_standards where test = '" + this.labTestTable.getValueAt(labTestTable.getSelectedRow(), 0) + "'");

            while (rset.next()) {

                jTextField10.setText(rset.getObject(1).toString());
            }
        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
        int i = 0;
        if (this.jTextField10.getText().toLowerCase().startsWith("t")) {
            // this.jPanel11.setVisible(true);
            this.resultsNarrativePanel.setVisible(false);
            try {
                java.sql.Statement stmt = connectDB.createStatement();

                java.sql.Statement stmtTable1 = connectDB.createStatement();

                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT typeof_test,units,lower_limit,upper_limit FROM pb_lab_standards where test = '" + this.labTestTable.getValueAt(labTestTable.getSelectedRow(), 0) + "' and status = true order by oid asc");

                while (rsetTable1.next()) {

                    System.out.println("Working at table row " + i);
                    resultsSITable.setValueAt(rsetTable1.getObject(1), i, 0);
                    resultsSITable.setValueAt(rsetTable1.getObject(2), i, 2);
                    resultsSITable.setValueAt(rsetTable1.getObject(3), i, 3);
                    resultsSITable.setValueAt(rsetTable1.getObject(4), i, 4);

                    i++;

                    //                i = i + i;
                    //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                }

            } catch (java.sql.SQLException sqlExec) {

                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

            }
        } else {
            try {
                this.resultsNarrativePanel.setVisible(true);
                //      this.jPanel11.setVisible(false);
                java.sql.Statement stmt = connectDB.createStatement();

                java.sql.Statement stmtTable1 = connectDB.createStatement();

                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT typeof_test,status FROM pb_lab_standards where test = '" + this.labTestTable.getValueAt(labTestTable.getSelectedRow(), 0) + "' and status = false");

                while (rsetTable1.next()) {

                    System.out.println("Working at table row " + i);
                    resultsNarrativeTable.setValueAt(rsetTable1.getObject(1), i, 0);
                    // jTable2.setValueAt(rsetTable1.getObject(2), i, 1);
                    //  jTable2.setValueAt(rsetTable1.getObject(3), i, 2);
                    //jTable1.setValueAt(rsetTable1.getObject(4), i, 3);

                    i++;

                    //                i = i + i;
                    //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                }

            } catch (java.sql.SQLException sqlExec) {

                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable21MouseClicked

    private void jTextField1131CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1131CaretUpdate
        jSearchTable21.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT distinct test,specimen as name from pb_lab_standards where test ILIKE '" + jTextField1131.getText() + "%' order by test"));

        //   searchRowSet21.execute("SELECT distinct test,specimen as name,status from pb_lab_standards where test ILIKE '"+jTextField1131.getText()+"%' order by test");
        //   jSearchTable21.setShowHorizontalLines(false);
        jSearchScrollPane21.setViewportView(jSearchTable21);

        // Add your handling code here:
    }//GEN-LAST:event_jTextField1131CaretUpdate
    // Add your handling code here:

    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed
        this.jSearchDialog2.dispose();   // Add your handling code here:
    }//GEN-LAST:event_jButton52ActionPerformed

    private void jTextField113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField113CaretUpdate
        if (this.outpatientCheckBox.isSelected() && this.jCheckBox3.isSelected()) {

            if (jTextField113.getCaretPosition() < 3) {
                System.out.println("Nothing");
            } else {
                //'WK'||''||
                jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                        + "SELECT DISTINCT patient_no, patient_name as name, age, gender FROM "
                        + "pb_doctors_request WHERE patient_no ILIKE '" + jTextField113.getText() + "%' "
                        + "AND paid = true and collected = false AND curr_date >= CURRENT_DATE - 15 AND revenue_code ILIKE '%LAB%'"
                        + "UNION ALL SELECT DISTINCT patient_no, dealer as name, '1', receipt_no FROM "
                        + "ac_cash_collection WHERE receipt_no ILIKE '" + jTextField113.getText() + "%' AND "
                        + "date > (CURRENT_DATE - 5) AND receipt_source = 'LAB' ORDER BY  1 LIMIT 20"));
                jSearchTable2.setShowHorizontalLines(false);
                jSearchScrollPane2.setViewportView(jSearchTable2);

            }
        } else {
            if (this.outpatientCheckBox.isSelected() && this.jCheckBox4.isSelected()) {
                if (jTextField113.getCaretPosition() < 3) {
                    System.out.println("Nothing");
                } else {
                    jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT DISTINCT patient_no, patient_name as name, age, gender FROM pb_doctors_request WHERE patient_name ILIKE '" + jTextField113.getText() + "%' AND paid = true and collected = false AND curr_date >= CURRENT_DATE - 15 ORDER BY patient_name LIMIT 20"));

                    jSearchTable2.setShowHorizontalLines(false);
                    jSearchScrollPane2.setViewportView(jSearchTable2);

                }
            }
        }

        // }else{
        if (this.inpatientCheckBox.isSelected() && this.jCheckBox3.isSelected()) {

            // if(this.jCheckBox21.isSelected()){
            //   if( jTextField113.getCaretPosition() > 3){
            if (jTextField113.getCaretPosition() < 3) {
                System.out.println("Nothing");
            } else {
                jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, patient_name AS name,pat_age,visit_id FROM hp_admission WHERE patient_no ILIKE '%" + jTextField113.getText() + "%' AND discharge = false ORDER BY 1"));

                // searchRowSet2.execute("SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name from hp_inpatient_register where patient_no ILIKE '"+jTextField113.getText()+"%' order by second_name");
                jSearchTable2.setShowHorizontalLines(false);
                jSearchScrollPane2.setViewportView(jSearchTable2);

            }
        } else {
            if (this.inpatientCheckBox.isSelected() && this.jCheckBox4.isSelected()) {
                jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, patient_name AS name,pat_age,visit_id FROM hp_admission WHERE patient_name ILIKE '%" + jTextField113.getText() + "%' AND discharge = false ORDER BY 2"));

                jSearchTable2.setShowHorizontalLines(false);
                jSearchScrollPane2.setViewportView(jSearchTable2);

            }
        }        // Add your handling code here:
    }//GEN-LAST:event_jTextField113CaretUpdate

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchButtonClicked2();         // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed
    private void searchButtonClicked2() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.patientNumberTxt.getLocationOnScreen();

        jSearchDialog2.setSize(600, 200);

        jSearchDialog2.setLocation(point);

        jSearchDialog2.setVisible(true);

    }
    private void removeRowBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRowBtnActionPerformed
        if (this.resultsSIPanel.isVisible()) {
            int rows2Delete = resultsSITable.getSelectedRowCount();

            int[] selectedRows = resultsSITable.getSelectedRows();

            if (rows2Delete < 1) {

                java.awt.Toolkit.getDefaultToolkit().beep();

                javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

            } else {

                if (rows2Delete > 1) {

                    for (int i = 0; i < selectedRows.length; i++) {

                        javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) resultsSITable.getModel();

                        defTableModel.removeRow(selectedRows[i]);

                    }

                } else {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) resultsSITable.getModel();

                    defTableModel.removeRow(resultsSITable.getSelectedRow());
                }
            }
        } else {
            int rows2Delete = resultsNarrativeTable.getSelectedRowCount();

            int[] selectedRows = resultsNarrativeTable.getSelectedRows();

            if (rows2Delete < 1) {

                java.awt.Toolkit.getDefaultToolkit().beep();

                javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

            } else {

                if (rows2Delete > 1) {

                    for (int i = 0; i < selectedRows.length; i++) {

                        javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) resultsNarrativeTable.getModel();

                        defTableModel.removeRow(selectedRows[i]);

                    }

                } else {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) resultsNarrativeTable.getModel();

                    defTableModel.removeRow(resultsNarrativeTable.getSelectedRow());
                }
            }
        }// Add your handling code here:
    }//GEN-LAST:event_removeRowBtnActionPerformed

    private void closeFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFormBtnActionPerformed
        this.setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_closeFormBtnActionPerformed
    private void cmboxActionPerformed(java.awt.event.ActionEvent evt) {
        int i = resultsSITable.getSelectedRow();

    }

    private void clearFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFormBtnActionPerformed
        this.getContentPane().removeAll();
        this.initComponents();
        this.setSize(this.getParent().getSize());
        // Add your handling code here:
    }//GEN-LAST:event_clearFormBtnActionPerformed

    private void editResultsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editResultsBtnActionPerformed
//        javax.swing.JFrame other = new Labresults(connectDB, pConnDB);
//        other.setVisible(true);  // Add your handling code here:
    }//GEN-LAST:event_editResultsBtnActionPerformed

    private void saveResultsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveResultsBtnActionPerformed
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        if (resultsVerifierCmbx.getSelectedItem().toString().equalsIgnoreCase("-")) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please Select RESULTS VERIFIED BY in red", "Information Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        } else {
            if (resultsSITable.isEditing()) {
                resultsSITable.getCellEditor().stopCellEditing();
            }

            if (resultsNarrativeTable.isEditing()) {
                resultsNarrativeTable.getCellEditor().stopCellEditing();
            }
            refreshListingsBtnActionPerformed(evt);
            java.util.Calendar calendar = java.util.Calendar.getInstance();

            long dateNow = calendar.getTimeInMillis();

            java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

            System.out.println(datenowSql1.toString());

            java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

            System.out.println(datenowSql.toString());
            String user = null;
            String cat = null;
            String labNo = null;

            if (this.resultsSIPanel.isVisible()) {
                cat = "OP";
            } else {
                cat = "IP";
            }
            String specTime = "";
            try {

                java.sql.Statement ps = connectDB.createStatement();
                java.sql.ResultSet rst = ps.executeQuery("select lpad(nextval('labbill_no_seq')::text, 6, 0::text)");
                while (rst.next()) {

                    labNo = rst.getObject(1).toString();
                    labNumberTxt.setText(labNo);
                }

                if (inpatientCheckBox.isSelected()) {
                    java.sql.Statement psf = connectDB.createStatement();
                    java.sql.ResultSet rstf = psf.executeQuery("SELECT curr_date FROM pb_doctors_request WHERE service ILIKE '" + this.labTestTable.getValueAt(labTestTable.getSelectedRow(), 0).toString() + "' AND patient_no ='" + patientNumberTxt.getText() + "'  AND (curr_date::date >= current_date - 2) ORDER BY curr_date::date DESC LIMIT 1");
                    while (rstf.next()) {

                        specTime = rstf.getObject(1).toString();

                    }
                } else {
                    java.sql.Statement psf = connectDB.createStatement();
                    java.sql.ResultSet rstf = psf.executeQuery("SELECT receipt_time FROM ac_cash_collection WHERE description = '" + this.labTestTable.getValueAt(labTestTable.getSelectedRow(), 0).toString() + "' AND patient_no ='" + patientNumberTxt.getText() + "' AND (receipt_time::date > current_date - 2) ORDER BY receipt_time::date DESC LIMIT 1");
                    while (rstf.next()) {

                        specTime = rstf.getObject(1).toString();

                    }
                }
                if (specimenTimeTxt.getText() == "") {
                    java.awt.Toolkit.getDefaultToolkit().beep();

                    javax.swing.JOptionPane.showMessageDialog(this, "Specimen Time Missing!");
                } else {
                    connectDB.setAutoCommit(false);
                    java.sql.Statement stm121 = connectDB.createStatement();
                    java.sql.ResultSet rse121 = stm121.executeQuery("select current_user");
                    while (rse121.next()) {

                        user = rse121.getObject(1).toString();
                    }

                    if (this.resultsSIPanel.isVisible()) {
                        for (int i = 0; i < resultsSITable.getRowCount(); i++) {
                            if (resultsSITable.getModel().getValueAt(i, 0) != null) {

                                java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("UPDATE pb_doctors_request set results=true, posted_to_lab='" + labNumberTxt.getText().trim() + "' WHERE collected=true and "
                                        + " curr_date::time(0)='" + labRequestTimeTxt.getText().trim() + "' and service = '" + this.labTestTable.getValueAt(labTestTable.getSelectedRow(), 0).toString() + "' and patient_no ='" + patientNumberTxt.getText() + "'");
                                pstmt31.executeUpdate();
                                java.sql.PreparedStatement pstmt21 = connectDB.prepareStatement("INSERT INTO hp_lab_results VALUES(?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?,?,?)");
                                if (patientNumberTxt.getText() == "" || patientNumberTxt.getText() == null) {
                                    pstmt21.setString(1, labNumberTxt.getText());
                                } else {

                                    pstmt21.setString(1, patientNumberTxt.getText());
                                }

                                pstmt21.setString(2, patientNameTxt.getText());
                                pstmt21.setString(3, labNumberTxt.getText());
                                pstmt21.setDouble(4, java.lang.Double.valueOf(ageTxt.getText()));
                                pstmt21.setString(5, genderTxt.getText());
                                pstmt21.setString(6, this.labTestTable.getValueAt(labTestTable.getSelectedRow(), 0).toString());
                                pstmt21.setString(7, resultsSITable.getValueAt(i, 0).toString());
                                pstmt21.setString(8, resultsSITable.getValueAt(i, 2).toString());
                                pstmt21.setDouble(9, java.lang.Double.valueOf(resultsSITable.getValueAt(i, 4).toString()));
                                pstmt21.setDouble(10, java.lang.Double.valueOf(resultsSITable.getValueAt(i, 3).toString()));
                                pstmt21.setDouble(11, java.lang.Double.valueOf(resultsSITable.getValueAt(i, 1).toString()));
                                pstmt21.setString(12, resultsSITable.getValueAt(i, 1).toString());
                                pstmt21.setTimestamp(14, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                pstmt21.setDate(13, com.afrisoftech.lib.SQLDateFormat.getSQLDate(mainDatePicker.getDate()));
                                pstmt21.setString(16, externalSourceTxt.getText());
                                pstmt21.setObject(15, 1.00);
                                pstmt21.setString(20, user);
                                pstmt21.setObject(17, resultsVerifierCmbx.getSelectedItem().toString());
                                pstmt21.setObject(18, jTextField82.getText());
                                pstmt21.setString(19, pathologistCommentsTxt.getText());
                                pstmt21.setString(21, "");
                                pstmt21.setBoolean(22, false);
                                pstmt21.setBoolean(23, false);
                                pstmt21.setString(24, com.afrisoftech.lib.ServerTime.serverDate(connectDB));
                                pstmt21.setString(25, "LAB");
                                pstmt21.setString(26, this.labTestTable.getValueAt(0, 1).toString());
                                pstmt21.setString(27, reqidTextField.getText());
                                pstmt21.setString(28, reqidTextField.getText());
                                pstmt21.setObject(29, specimenCmbx.getSelectedItem());
                                pstmt21.setObject(30, specimenConditionCmbx.getSelectedItem());
                                pstmt21.setString(31, pathologistCommentsTxt.getText());
                                pstmt21.setBoolean(32, generalResultChkbx.isSelected());
                                pstmt21.setBoolean(33, culturedChkbx.isSelected());
                                pstmt21.setObject(34, referralCmbx.getSelectedItem());
                                pstmt21.setBoolean(35, referralResultsChkbx.isSelected());
                                pstmt21.setBoolean(36, cancerInfectiveStatusChkbx.isSelected());
                                pstmt21.setObject(37, cancerStatusInfectiveCmbx.getSelectedItem());
                                pstmt21.setObject(38, specimenSourceCmbx.getSelectedItem());
                                pstmt21.setObject(39, labDomainCmbx.getSelectedItem());
                                pstmt21.setObject(40, labStationCmbx.getSelectedItem());
                                pstmt21.executeUpdate();
                                java.sql.PreparedStatement pstmt311 = connectDB.prepareStatement("UPDATE pb_doctors_request set results=true, posted_to_lab='" + labNumberTxt.getText().trim() + "',collected = true WHERE "
                                        + " curr_date::time(0)='" + labRequestTimeTxt.getText().trim() + "' "
                                        + "and service = '" + this.labTestTable.getValueAt(labTestTable.getSelectedRow(), 0).toString() + "'"
                                        + " and patient_no ='" + patientNumberTxt.getText() + "'");
                                pstmt311.executeUpdate();
                                java.sql.PreparedStatement pstmt31xx = connectDB.prepareStatement("UPDATE hp_patient_billing set collected = true,paid = true WHERE service = '" + labTestTable.getValueAt(labTestTable.getSelectedRow(), 0).toString() + "' AND patient_no ='" + patientNumberTxt.getText() + "'");
                                pstmt31xx.executeUpdate();
                            }
                        }
                    } else {

                        for (int i = 0; i < resultsNarrativeTable.getRowCount(); i++) {
                            if (resultsNarrativeTable.getModel().getValueAt(i, 0) != null) {

                                java.sql.PreparedStatement pstmt21 = connectDB.prepareStatement("INSERT INTO hp_lab_results values(?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

                                if (patientNumberTxt.getText() == "" || patientNumberTxt.getText() == null) {
                                    pstmt21.setString(1, labNumberTxt.getText());
                                } else {

                                    pstmt21.setString(1, patientNumberTxt.getText());
                                }
                                pstmt21.setString(2, patientNameTxt.getText());
                                pstmt21.setString(3, labNumberTxt.getText());
                                pstmt21.setDouble(4, java.lang.Double.valueOf(ageTxt.getText()));
                                pstmt21.setString(5, genderTxt.getText());
                                pstmt21.setString(6, this.labTestTable.getValueAt(labTestTable.getSelectedRow(), 0).toString());
                                pstmt21.setString(7, resultsNarrativeTable.getValueAt(i, 0).toString());
                                pstmt21.setString(8, "-");
                                pstmt21.setDouble(9, 0);
                                pstmt21.setDouble(10, 0);
                                pstmt21.setDouble(11, 0);
                                pstmt21.setDate(13, com.afrisoftech.lib.SQLDateFormat.getSQLDate(mainDatePicker.getDate()));
                                pstmt21.setObject(18, jTextField82.getText());
                                pstmt21.setString(12, resultsNarrativeTable.getValueAt(i, 1).toString());
                                pstmt21.setString(20, user);
                                pstmt21.setObject(17, resultsVerifierCmbx.getSelectedItem().toString());
                                pstmt21.setTimestamp(14, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                pstmt21.setString(16, externalSourceTxt.getText());
                                pstmt21.setObject(15, 1.0);
                                pstmt21.setString(19, pathologistCommentsTxt.getText());
                                pstmt21.setString(21, "");
                                pstmt21.setBoolean(22, false);
                                pstmt21.setBoolean(23, false);
                                pstmt21.setString(24, specTime);
                                pstmt21.setString(25, "LAB");
                                pstmt21.setString(26, this.labTestTable.getValueAt(0, 1).toString());
                                pstmt21.setString(27, reqidTextField.getText());
                                pstmt21.setString(28, reqidTextField.getText());
                                pstmt21.setObject(29, specimenCmbx.getSelectedItem());
                                pstmt21.setObject(30, specimenConditionCmbx.getSelectedItem());
                                pstmt21.setString(31, pathologistCommentsTxt.getText());
                                pstmt21.setBoolean(32, generalResultChkbx.isSelected());
                                pstmt21.setBoolean(33, culturedChkbx.isSelected());
                                pstmt21.setObject(34, referralCmbx.getSelectedItem());
                                pstmt21.setBoolean(35, referralResultsChkbx.isSelected());
                                pstmt21.setBoolean(36, cancerInfectiveStatusChkbx.isSelected());
                                pstmt21.setObject(37, cancerStatusInfectiveCmbx.getSelectedItem());
                                pstmt21.setObject(38, specimenSourceCmbx.getSelectedItem());
                                pstmt21.setObject(39, labDomainCmbx.getSelectedItem());
                                pstmt21.setObject(40, labStationCmbx.getSelectedItem());
                                pstmt21.executeUpdate();

                                java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("UPDATE pb_doctors_request set results=true, posted_to_lab='" + labNumberTxt.getText().trim() + "',collected = true WHERE "
                                        + " curr_date::time(0)='" + labRequestTimeTxt.getText().trim() + "' "
                                        + "and service = '" + this.labTestTable.getValueAt(labTestTable.getSelectedRow(), 0).toString() + "'"
                                        + " and patient_no ='" + patientNumberTxt.getText() + "'");
                                pstmt31.executeUpdate();
                                java.sql.PreparedStatement pstmt31xx = connectDB.prepareStatement("UPDATE hp_patient_billing set collected = true,paid = true WHERE service = '" + labTestTable.getValueAt(labTestTable.getSelectedRow(), 0).toString() + "' AND patient_no ='" + patientNumberTxt.getText() + "'");
                                pstmt31xx.executeUpdate();
                            }
                        }
                    }
                    System.out.println("Lab results progress");
//                    if (ipatCheckBox.isSelected()) {
//                        System.out.println(datenowSql.toString());
//                        //   try{
//                        String billNo = null;
//                        String transNo = null;
//                        String payMode = null;
//                        String patientAcc = null;
//                        String cardNo = null;
//                        String AccDesc = null;
//                        String scheme = null;
//                        String cardName = null;
//                        String isurer = null;
//                        String expDate = null;
//                        String staffNo = null;
//                        String glAcc = null;
//
//                        String actCode = null;
//                        double amount = 0.00;
//                        java.util.Date admDate = null;
//                        String visitid = "-";
//                        // java.util.Date adDate = null;
//
//                        // connectDB.setAutoCommit(false);
//                        java.sql.Statement stm12t = connectDB.createStatement();
//
//                        java.sql.Statement stm12 = connectDB.createStatement();
//                        // java.sql.Statement stm121 = connectDB.createStatement();
//                        java.sql.Statement stm1211 = connectDB.createStatement();
//                        java.sql.Statement stm122 = connectDB.createStatement();
//                        java.sql.Statement stm122x = connectDB.createStatement();
//                        java.sql.Statement stm1 = connectDB.createStatement();
//
//                        java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
//
//                        while (rse12.next()) {
//
//                            patientAcc = rse12.getObject(1).toString();
//                            AccDesc = rse12.getObject(2).toString();
//                        }
//                        java.sql.Statement stm121q = connectDB.createStatement();
//
//                        java.sql.ResultSet rse121X = stm122.executeQuery("SELECT DISTINCT gl_account,main_service,rate "
//                                + "FROM pb_operating_parameters WHERE code ilike "
//                                + "'" + jTable3.getValueAt(jTable3.getSelectedRow(), 1) + "'");
//
//                        while (rse121X.next()) {
//
//                            actCode = rse121X.getObject(1).toString();
//                            glAcc = rse121X.getObject(2).toString();
//                            amount = rse121X.getDouble(3);
//                        }
//
//                        java.sql.Statement pst = connectDB.createStatement();
//                        java.sql.ResultSet rstt = pst.executeQuery("select nextval('transaction_no_seq')");
//
//                        while (rstt.next()) {
//                            rstt.getObject(1).toString();
//
//                            transNo = rstt.getObject(1).toString();
//                        }
//
//                        java.sql.Statement stm12n = connectDB.createStatement();
//                        java.sql.ResultSet rse12n = stm12n.executeQuery("SELECT date_admitted,mode_of_payment FROM hp_admission WHERE visit_id ='" + jTextField911.getText() + "'");
//                        while (rse12n.next()) {
//                            admDate = rse12n.getDate(1);
//                            payMode = rse12n.getString(2);
//                        }
//                        java.sql.Statement ps11w1 = connectDB.createStatement();
//                        java.sql.ResultSet rst11w1 = ps11w1.executeQuery("select visit_id from hp_admission where  visit_id ='" + jTextField911.getText() + "'");
//                        while (rst11w1.next()) {
//
//                            visitid = rst11w1.getObject(1).toString();
//                        }
//
//                        System.out.println("This is the adm date   " + admDate + " Visit Id " + visitid);
//
//                        java.sql.ResultSet rse121t = stm1211.executeQuery("select activity from pb_activity where code ='" + actCode + "'");
//                        while (rse121t.next()) {
//
//                            glAcc = rse121t.getObject(1).toString();
//
//                            java.sql.PreparedStatement pstmtd = connectDB.prepareStatement("INSERT INTO hp_patient_card VALUES(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
//                            //1 for (int i = 0; i < jTable1.getRowCount(); i++){
//                            pstmtd.setString(1, jTextField9.getText());
//                            pstmtd.setObject(2, jTable3.getValueAt(jTable3.getSelectedRow(), 0).toString());
//                            pstmtd.setString(3, "General");
//                            pstmtd.setString(4, payMode);
//                            pstmtd.setString(5, transNo);
//                            pstmtd.setString(7, scheme);
//                            pstmtd.setString(6, cardNo);
//                            pstmtd.setString(8, cardName);
//                            pstmtd.setString(9, isurer);
//                            pstmtd.setDate(10, null);
//                            pstmtd.setString(11, "");
//                            pstmtd.setDouble(12, amount);
//                            pstmtd.setDouble(13, 0.00);
//                            pstmtd.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
//                            pstmtd.setObject(15, patientAcc);
//                            pstmtd.setString(16, glAcc);
//                            pstmtd.setDouble(17, 1);
//                            pstmtd.setObject(18, staffNo);
//                            pstmtd.setBoolean(19, false);
//                            pstmtd.setString(20, "Billing");
//                            pstmtd.setBoolean(21, false);
//                            pstmtd.setString(22, AccDesc);
//                            pstmtd.setString(23, visitid);
//                            pstmtd.setString(24, user);
//                            pstmtd.setString(25, billNo);
//                            pstmtd.setString(26, "IP");
//                            pstmtd.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
//                            pstmtd.setString(28, visitid);
//                            pstmtd.executeUpdate();
//
//                            java.sql.PreparedStatement pstmt2d = connectDB.prepareStatement("INSERT INTO ac_ledger VALUES(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
//                            pstmt2d.setObject(1, actCode);
//                            pstmt2d.setString(2, glAcc);
//                            pstmt2d.setString(3, jTextField9.getText());
//                            pstmt2d.setString(4, jTextField1.getText());
//                            pstmt2d.setString(5, "");
//                            pstmt2d.setString(6, cardNo);
//                            pstmt2d.setString(7, cardName);
//                            pstmt2d.setString(8, "IP");
//                            pstmt2d.setString(9, jComboBox1.getSelectedItem().toString());
//                            pstmt2d.setString(10, payMode);
//                            pstmt2d.setString(11, "");
//                            pstmt2d.setString(12, "");
//                            pstmt2d.setString(13, "");
//                            pstmt2d.setString(14, jTable3.getValueAt(jTable3.getSelectedRow(), 0).toString());
//                            pstmt2d.setString(15, "Revenue");
//                            pstmt2d.setDouble(16, 0.00);
//                            pstmt2d.setDouble(17, amount);
//                            pstmt2d.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
//                            pstmt2d.setString(19, transNo);
//                            pstmt2d.setBoolean(20, false);
//                            pstmt2d.setBoolean(21, false);
//                            pstmt2d.setBoolean(22, false);
//                            pstmt2d.setString(23, user);
//                            pstmt2d.executeUpdate();
//
//                        }
//                        java.sql.PreparedStatement pstmt46c = connectDB.prepareStatement("UPDATE hp_patient_billing SET collected = true where patient_no = '" + jTextField9.getText() + "' AND service = '" + jTable3.getValueAt(jTable3.getSelectedRow(), 1).toString() + "'");
//                        pstmt46c.executeUpdate();
//                        java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request SET paid = true,collected = true where patient_no = '" + jTextField9.getText() + "' AND service = '" + jTable3.getValueAt(jTable3.getSelectedRow(), 1).toString() + "'");
//                        pstmt46.executeUpdate();
//
//                    }

                    connectDB.commit();
                    connectDB.setAutoCommit(true);
                    refreshListingsBtn.doClick();
                    javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    String receiptNo = null;

                    // if (Boolean.valueOf(jTable1.getModel().getValueAt(jTable1.getSelectedRow(),4).toString()) == java.lang.Boolean.TRUE) {
                    receiptNo = labNumberTxt.getText();

                    com.afrisoftech.reports.PatientLabResultsPdf policy = new com.afrisoftech.reports.PatientLabResultsPdf();

                    policy.PatientLabResultsPdf(connectDB, receiptNo, receiptNo);

                    for (int k = 0; k < resultsSITable.getRowCount(); k++) {
                        for (int r = 0; r < resultsSITable.getColumnCount(); r++) {
                            resultsSITable.getModel().setValueAt(null, k, r);
                        }
                    }
                    for (int m = 0; m < resultsNarrativeTable.getRowCount(); m++) {
                        for (int j = 0; j < resultsNarrativeTable.getColumnCount(); j++) {
                            resultsNarrativeTable.getModel().setValueAt(null, m, j);
                        }
                    }
                }

                //  jComboBox2.setSelectedItem(null);
            } catch (java.sql.SQLException sq) {
                sq.printStackTrace();
                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }
        }
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_saveResultsBtnActionPerformed

    private void jTextField11311ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField11311ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField11311ActionPerformed

    private void labTestTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labTestTableMouseClicked
        // jTextField1.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
//        jTextField91.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 0).toString());
        //   jTextField10.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 2).toString());

        for (int k = 0; k < resultsSITable.getRowCount(); k++) {
            for (int r = 0; r < resultsSITable.getColumnCount(); r++) {
                resultsSITable.getModel().setValueAt(null, k, r);
            }
        }
        for (int m = 0; m < resultsNarrativeTable.getRowCount(); m++) {
            for (int j = 0; j < resultsNarrativeTable.getColumnCount(); j++) {
                resultsNarrativeTable.getModel().setValueAt(null, m, j);
            }
        }
        this.jSearchDialog21.dispose();

        try {
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.Statement stmtTable1 = connectDB.createStatement();

            java.sql.ResultSet rset = stmtTable1.executeQuery("SELECT DISTINCT status,specimen FROM pb_lab_standards where code = '" + this.labTestTable.getValueAt(labTestTable.getSelectedRow(), 1) + "'");

            while (rset.next()) {

                jTextField10.setText(rset.getObject(1).toString());
                labDisciplineTxt.setText(rset.getObject(2).toString());
            }
        } catch (java.sql.SQLException sqlExec) {
            sqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
        int i = 0;
        if (this.jTextField10.getText().toLowerCase().startsWith("t")) {
            this.resultsSIPanel.setVisible(true);
            this.resultsNarrativePanel.setVisible(false);
            try {
                java.sql.Statement stmt = connectDB.createStatement();

                java.sql.Statement stmtTable1 = connectDB.createStatement();

                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT typeof_test,units,lower_limit,upper_limit FROM pb_lab_standards WHERE code = '" + this.labTestTable.getValueAt(labTestTable.getSelectedRow(), 1) + "' AND status = true ORDER BY oid asc");

                while (rsetTable1.next()) {
                    System.out.println("Working at table row " + i);
                    resultsSITable.setValueAt(rsetTable1.getObject(1), i, 0);
                    resultsSITable.setValueAt(rsetTable1.getObject(2), i, 2);
                    resultsSITable.setValueAt(rsetTable1.getObject(3), i, 3);
                    resultsSITable.setValueAt(rsetTable1.getObject(4), i, 4);
                    i++;
                }

            } catch (java.sql.SQLException sqlExec) {
                sqlExec.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

            }
        } else {
            try {
                this.resultsNarrativePanel.setVisible(true);
                this.resultsSIPanel.setVisible(false);
                this.saveResultsBtn.setVisible(true);
                java.sql.Statement stmt = connectDB.createStatement();

                java.sql.Statement stmtTable1 = connectDB.createStatement();

                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT typeof_test,status FROM pb_lab_standards where code = '" + this.labTestTable.getValueAt(labTestTable.getSelectedRow(), 1) + "' and status = false");

                while (rsetTable1.next()) {
                    System.out.println("Working at table row " + i);
                    resultsNarrativeTable.setValueAt(rsetTable1.getObject(1), i, 0);
                    i++;
                }

            } catch (java.sql.SQLException sqlExec) {
                sqlExec.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

            }
        }        // TODO add your handling code here:
}//GEN-LAST:event_labTestTableMouseClicked

    /* private void searchButtonClicked21() {
    
     System.out.println("Showing dialog");
    
     // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
     java.awt.Point point = this.jTextField91.getLocationOnScreen();
    
     jSearchDialog21.setSize(400, 200);
    
     jSearchDialog21.setLocation(point);
    
     jSearchDialog21.setVisible(true);
    
    
    
     }*/
    private void jSearchTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2MouseClicked
        for (int m = 0; m < labTestTable.getRowCount(); m++) {
            for (int j = 0; j < labTestTable.getColumnCount(); j++) {
                labTestTable.getModel().setValueAt(null, m, j);
            }
        }

        for (int m = 0; m < resultsSITable.getRowCount(); m++) {
            for (int j = 0; j < resultsSITable.getColumnCount(); j++) {
                resultsSITable.getModel().setValueAt(null, m, j);
            }
        }

        for (int m = 0; m < resultsNarrativeTable.getRowCount(); m++) {
            for (int j = 0; j < resultsNarrativeTable.getColumnCount(); j++) {
                resultsNarrativeTable.getModel().setValueAt(null, m, j);
            }
        }

        patientNameTxt.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
        patientNumberTxt.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0).toString());
        reqidTextField.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 3).toString());
        if (patientNumberTxt.getText().equalsIgnoreCase("")) {
            patientNumberTxt.setText("WK" + reqidTextField.getText());
        }
        this.jSearchDialog2.dispose();
        int k = 0;
        if (this.outpatientCheckBox.isSelected()) {
            try {

                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode,ROUND((current_date - year_of_birth::date)/365) AS age,sex from hp_patient_register where patient_no  ='" + patientNumberTxt.getText() + "'");
                while (rset1.next()) {
                    externalSourceTxt.setText(rset1.getObject(2).toString());
                    ageTxt.setText(rset1.getObject(3).toString());
                    genderTxt.setText(rset1.getObject(4).toString());

                    // jTextField7.setText(rset1.getObject(2).toString());
                }
                System.out.println("Test is here");
                java.sql.Statement stmtTable1 = connectDB.createStatement();

                java.sql.Statement stmt1xv = connectDB.createStatement();
                java.sql.ResultSet rset1xv = stmt1xv.executeQuery("SELECT DISTINCT pb.service FROM "
                        + "hp_patient_billing pb, pb_activity pa WHERE patient_no = '" + patientNumberTxt.getText() + "' AND "
                        + "pb.gl_code = pa.code AND pa.department ILIKE 'LAB' AND paid = true and collected = false "
                        + "UNION ALL SELECT DISTINCT description FROM ac_cash_collection WHERE"
                        + " patient_no = '" + patientNumberTxt.getText() + "' AND description ILIKE '%Sugar%' "
                        + "UNION ALL SELECT DISTINCT description FROM ac_cash_collection WHERE "
                        + "receipt_no = '" + reqidTextField.getText() + "' AND receipt_source = 'LAB'");

                while (rset1xv.next()) {
                    labTestTable.setValueAt(rset1xv.getObject(1), k, 0);

                    java.sql.ResultSet rsetd = stmtTable1.executeQuery("SELECT DISTINCT lb.code,lb.status FROM pb_lab_standards lb, pb_operating_parameters op WHERE lb.code = op.code AND op.service_type ILIKE '" + rset1xv.getObject(1) + "'");

                    while (rsetd.next()) {

                        labTestTable.setValueAt(rsetd.getObject(1), k, 1);
                        labTestTable.setValueAt(rsetd.getObject(2), k, 2);

                        System.out.println("Test is here no 2");

                        k++;
                    }
                }

            } catch (java.sql.SQLException sqe) {
                sqe.printStackTrace();
                //  System.out.println("Insert not successful");
            }
        } else {

            try {

                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode,ROUND((current_date - year_of_birth::date)/365) AS age,sex from hp_inpatient_register where patient_no  ='" + patientNumberTxt.getText() + "'");
                while (rset1.next()) {
                    externalSourceTxt.setText(rset1.getObject(2).toString());
                    ageTxt.setText(rset1.getObject(3).toString());
                    genderTxt.setText(rset1.getObject(4).toString());

                }
                java.sql.Statement stmtTable1 = connectDB.createStatement();

                java.sql.Statement stmt1xv = connectDB.createStatement();
                java.sql.ResultSet rset1xv = stmt1xv.executeQuery("SELECT DISTINCT service FROM hp_patient_billing pb,pb_activity pa WHERE patient_no = '" + patientNumberTxt.getText() + "' AND collected = false AND pb.gl_code = pa.code AND pa.department ILIKE 'LAB'");

                while (rset1xv.next()) {
                    labTestTable.setValueAt(rset1xv.getObject(1), k, 0);

                    java.sql.ResultSet rsetd = stmtTable1.executeQuery("SELECT DISTINCT lb.code,lb.status FROM pb_lab_standards lb, pb_operating_parameters op WHERE lb.code = op.code AND op.service_type ILIKE '" + rset1xv.getObject(1) + "'");

                    while (rsetd.next()) {

                        labTestTable.setValueAt(rsetd.getObject(1), k, 1);
                        labTestTable.setValueAt(rsetd.getObject(2), k, 2);

                        System.out.println("Test is here no 2");

                        k++;
                    }
                }

                //  jTextField7.setText(rset1.getObject(2).toString());
            } catch (java.sql.SQLException sqe) {
                sqe.printStackTrace();
                //  System.out.println("Insert not successful");
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable2MouseClicked

    private void searchpatienttxtfldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchpatienttxtfldCaretUpdate
        if (searchpatienttxtfld.getCaretPosition() >= 4) {

            this.paidTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,
                    "SELECT pb_doctors_request.trans_date,patient_no, patient_name, payment_mode,service,quantity,amount,inv_no,doctor,false as Carry_Test,request_id as Request_No,curr_date::time(0),visit_id,notes as Test_notes\n"
                    + "  FROM pb_doctors_request where requisition_no='LAB' AND pb_doctors_request.trans_date>='(" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(mainDatePicker.getDate()) + ")-1' and "
                    + "   pb_doctors_request.paid=true and \n"
                    + "  pb_doctors_request.collected=false AND (patient_no ilike '" + this.searchpatienttxtfld.getText().trim() + "%' OR patient_name ilike '" + this.searchpatienttxtfld.getText().trim() + "%') "
                    + " order by 1,12 "));

            this.pendingTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,
                    "SELECT pb_doctors_request.trans_date,patient_no, patient_name, payment_mode,service,quantity,amount,inv_no,doctor,"
                    + "false as Raise_Bill,request_id as Request_No,curr_date::time(0),visit_id,notes as Test_notes,gl_code  "
                    + "  FROM pb_doctors_request where posted_to_lab='DOC POSTING' and requisition_no='LAB' AND pb_doctors_request.trans_date>='(" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(mainDatePicker.getDate()) + ")-1' and "
                    + "   pb_doctors_request.paid=false and \n"
                    + "  pb_doctors_request.collected=false AND (patient_no ilike '" + this.searchpatienttxtfld.getText().trim() + "%' OR patient_name ilike '" + this.searchpatienttxtfld.getText().trim() + "%') "
                    + " order by 1,12 "));

            this.posted2verifyTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT trans_date,patient_no,patient_name, payment_mode,service,quantity,amount,inv_no,doctor,false as Approve,request_id as Request_No,curr_date::time(0)       \n"
                    + ",visit_id,doctor "
                    + "  FROM pb_doctors_request where"
                    + " requisition_no='LAB' and results=true and "
                    + "paid=true and collected=true  "
                    + "and trans_date >='(" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(mainDatePicker.getDate()) + ")-1' "
                    + "and (patient_no ilike '" + this.searchpatienttxtfld.getText().trim() + "%' OR patient_name ilike '" + this.searchpatienttxtfld.getText().trim() + "%') "
                    + " ORDER BY trans_date asc"));

        }
    }//GEN-LAST:event_searchpatienttxtfldCaretUpdate

    private void jButton61ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton61ActionPerformed
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        for (int t = 0; t < paidTable.getRowCount(); t++) {
            if (this.paidTable.getValueAt(t, 9) == Boolean.TRUE) {
                if (paidTable.getValueAt(t, 9) == Boolean.TRUE) {
                    this.patientNumberTxt.setText(paidTable.getValueAt(t, 1).toString());
                    this.patientNameTxt.setText(paidTable.getValueAt(t, 2).toString());
                    this.labTestTable.setValueAt(paidTable.getValueAt(t, 4).toString(), 0, 0);
                    this.reqidTextField.setText(paidTable.getValueAt(t, 10).toString().trim());
                    this.labRequestTimeTxt.setText(paidTable.getValueAt(t, 11).toString().trim());
                    this.resultsSITable.setValueAt(paidTable.getValueAt(t, 4).toString(), 0, 0);

                }

                try {

                    java.sql.Statement stmt1x = connectDB.createStatement();
                    java.sql.ResultSet rset1x = stmt1x.executeQuery("SELECT DISTINCT code,main_service FROM pb_operating_parameters "
                            + "WHERE service_type = '" + paidTable.getValueAt(t, 4).toString().trim() + "'");
                    while (rset1x.next()) {
                        labTestTable.setValueAt(rset1x.getObject(1), 0, 1);
                        labTestTable.setValueAt(rset1x.getObject(2), 0, 2);

                    }

                    if (this.outpatientCheckBox.isSelected()) {

                        java.sql.Statement stmt1 = connectDB.createStatement();
                        java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode,ROUND((current_date - year_of_birth::date)/365) AS age,sex from hp_patient_register where patient_no  ='" + patientNumberTxt.getText() + "'");
                        while (rset1.next()) {
                            externalSourceTxt.setText(rset1.getObject(2).toString());
                            ageTxt.setText(rset1.getObject(3).toString());
                            genderTxt.setText(rset1.getObject(4).toString());

                            // jTextField7.setText(rset1.getObject(2).toString());
                        }

                    } else {

                        java.sql.Statement stmt1 = connectDB.createStatement();
                        java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode,ROUND((current_date - year_of_birth::date)/365) AS age,sex from hp_inpatient_register where patient_no  ='" + patientNumberTxt.getText() + "'");
                        while (rset1.next()) {
                            externalSourceTxt.setText(rset1.getObject(2).toString());
                            ageTxt.setText(rset1.getObject(3).toString());
                            genderTxt.setText(rset1.getObject(4).toString());

                            //  jTextField7.setText(rset1.getObject(2).toString());
                        }

                    }

                } catch (java.sql.SQLException sqe) {
                    sqe.printStackTrace();
                    //  System.out.println("Insert not successful");
                }
                java.util.Calendar calendar = java.util.Calendar.getInstance();

                long dateNow = calendar.getTimeInMillis();

                java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

                System.out.println(datenowSql1.toString());

                java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

                System.out.println(datenowSql.toString());
                //   try{
                String billNo = null;
                String transNo = null;
                String payMode = null;
                String patientAcc = null;
                String cardNo = null;
                String AccDesc = null;
                String scheme = null;
                String cardName = null;
                String isurer = null;
                String expDate = null;
                String staffNo = null;
                String glAcc = null;
                String user = null;
                String accDesc1 = null;
                String glAcc1 = null;
                String chbox = null;
                String units = null;
                String gacc = null;
                String request = null;
                int itemInt = 0;
                double price = 0.00;
                String Store = null;
                double qty = 0.00;
                String glCode = null;
                String actCode = null;
                double amount = 0.00;
                double sellPrice = 0.00;
                java.util.Date admDate = null;
                String visitid = "-";
                java.util.Date adDate = null;
                String opvisitid = "-";

                try {
                    connectDB.setAutoCommit(false);
                    java.sql.Statement stm12t = connectDB.createStatement();

                    java.sql.Statement stm12 = connectDB.createStatement();
                    java.sql.Statement stm121 = connectDB.createStatement();
                    java.sql.Statement stm1211 = connectDB.createStatement();
                    java.sql.Statement stm122 = connectDB.createStatement();
                    java.sql.Statement stm122x = connectDB.createStatement();
                    java.sql.Statement stm1 = connectDB.createStatement();
                    java.sql.Statement pst = connectDB.createStatement();

                    java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request SET "
                            + " collected = false where paid =true and  requisition_no='LAB' and "
                            + "inv_no = '" + paidTable.getValueAt(paidTable.getSelectedRow(), 7).toString() + "' AND "
                            + "service = '" + paidTable.getValueAt(paidTable.getSelectedRow(), 4).toString() + "'");
                    pstmt46.executeUpdate();

                    // }
                    // }connectDB.setAutoCommit(false);
                    javax.swing.JOptionPane.showMessageDialog(this, "Insert Successful", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    //}
                    this.setTitle("PATIENT DETAILS :-" + this.paidTable.getValueAt(paidTable.getSelectedRow(), 1) + " " + this.paidTable.getValueAt(paidTable.getSelectedRow(), 2) + "  for SERVICE :'" + paidTable.getValueAt(paidTable.getSelectedRow(), 4) + "'");
                    connectDB.commit();
                    connectDB.setAutoCommit(true);

                } catch (java.sql.SQLException sq) {

                    try {
                        connectDB.rollback();
                    } catch (java.sql.SQLException sql) {
                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                    System.out.println(sq.getMessage());
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                }

                int j = 0;
                int i = 0;
                int n = 0;
                int k = 0;

                for (int r = 0; r < resultsSITable.getRowCount(); r++) {
                    for (int b = 0; b < resultsSITable.getColumnCount(); b++) {
                        resultsSITable.getModel().setValueAt(null, r, b);
                    }
                }
                for (int m = 0; m < resultsNarrativeTable.getRowCount(); m++) {
                    for (int z = 0; z < resultsNarrativeTable.getColumnCount(); z++) {
                        resultsNarrativeTable.getModel().setValueAt(null, m, z);
                    }
                }

                try {
                    java.sql.Statement stmt = connectDB.createStatement();
                    java.sql.Statement stmtTable1 = connectDB.createStatement();

                    java.sql.ResultSet rset = stmtTable1.executeQuery("SELECT DISTINCT status,specimen FROM pb_lab_standards where code = '" + this.labTestTable.getValueAt(0, 1) + "'");

                    while (rset.next()) {

                        jTextField10.setText(rset.getObject(1).toString());
                        labDisciplineTxt.setText(rset.getObject(2).toString());
                    }
                } catch (java.sql.SQLException sqlExec) {

                    javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

                }
                int s = 0;
                if (this.jTextField10.getText().toLowerCase().startsWith("t")) {
                    // this.jPanel11.setVisible(true);
                    this.resultsNarrativePanel.setVisible(false);
                    try {
                        java.sql.Statement stmt = connectDB.createStatement();

                        java.sql.Statement stmtTable1 = connectDB.createStatement();

                        java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT typeof_test,units,lower_limit,upper_limit FROM pb_lab_standards WHERE code = '" + this.labTestTable.getValueAt(0, 1) + "' AND status = true ORDER BY oid asc");

                        while (rsetTable1.next()) {

                            System.out.println("Working at table row " + s);
                            resultsSITable.setValueAt(rsetTable1.getObject(1), s, 0);
                            resultsSITable.setValueAt(rsetTable1.getObject(2), s, 2);
                            resultsSITable.setValueAt(rsetTable1.getObject(3), s, 3);
                            resultsSITable.setValueAt(rsetTable1.getObject(4), s, 4);

                            s++;

                            //                i = i + i;
                            //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                        }

                    } catch (java.sql.SQLException sqlExec) {

                        javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

                    }
                } else {
                    try {
                        this.resultsNarrativePanel.setVisible(true);
                        // this.jPanel11.setVisible(false);
                        java.sql.Statement stmt = connectDB.createStatement();

                        java.sql.Statement stmtTable1 = connectDB.createStatement();

                        java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT typeof_test,status FROM pb_lab_standards where code = '" + this.labTestTable.getValueAt(0, 1) + "' and status = false");

                        while (rsetTable1.next()) {

                            System.out.println("Working at table row " + s);
                            resultsNarrativeTable.setValueAt(rsetTable1.getObject(1), s, 0);
                            // jTable2.setValueAt(rsetTable1.getObject(2), i, 1);
                            //  jTable2.setValueAt(rsetTable1.getObject(3), i, 2);
                            //jTable1.setValueAt(rsetTable1.getObject(4), i, 3);

                            s++;

                            //                i = i + i;
                            //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                        }

                    } catch (java.sql.SQLException sqlExec) {
                        sqlExec.printStackTrace();
                        javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

                    }
                }
                t = paidTable.getRowCount();
                this.refreshListingsBtn.doClick();
            }
        }
        labreportingTabbedPane.setSelectedIndex(2);
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_jButton61ActionPerformed

    private void patientCardBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientCardBtnActionPerformed
        if (patientNumberTxt.getText().length() > 2) {
            com.afrisoftech.reports.PatientCardPdf policyReport = new com.afrisoftech.reports.PatientCardPdf();//connectDB, transdatePicker.getDate(), transdatePicker.getDate(),nameNoTxt.getText());
//
            policyReport.PatientCardPdf(connectDB, mainDatePicker.getDate(), mainDatePicker.getDate(), patientNumberTxt.getText());
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "You MUST select a patient file in order to view the patient card.");
        }

// TODO add your handling code here:
    }//GEN-LAST:event_patientCardBtnActionPerformed

    private void culturedChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_culturedChkbxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_culturedChkbxActionPerformed
    private class SearchThread extends java.lang.Thread {

        public void SearchThread() {
        }

        public void run() {

            searchNames();

        }
    }

    private class SearchServicesThread extends java.lang.Thread {

        public void SearchServicesThread() {
        }

        public void run() {

            searchServices();

        }
    }

    public void searchNames() {
        int j = 0;
        int i = 0;
    }

    public void run() {

        while (getList) {

            runGetListThread();

            try {

                Thread.currentThread().sleep(10000);

            } catch (java.lang.InterruptedException IntExec) {

                javax.swing.JOptionPane.showMessageDialog(this, IntExec.getMessage(), "Interruption Error!", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

            // getList = false;
        }

    }

    public void runGetListThread() {
        String labNo = null;
        String patientNo = null;
        int j = 0;
        int i = 0;
        int n = 0;
        int patNo = 0;
        int Total1 = 0;
        int Total = 0;
        int labNo1 = 0;

        // String labNo= null;
        // String patientNo= null; 
        // int j = 0;
        // int i = 0;
        // int n = 0;
        //  int patNo = 0;
        // int Total1 =0;
        // int Total =0;
        /// int labNo1 = 0;
        try {
            java.sql.Statement stmtTable113 = connectDB.createStatement();

            java.sql.ResultSet rsetTable113 = stmtTable113.executeQuery("select count(distinct lab_no) from hp_lab_results where doc_read = false  and result_shown = false AND date >='" + mainDatePicker.getDate().toString() + "' and lab_no !='null' and lab_no is not null");

            while (rsetTable113.next()) {
                labNo1 = rsetTable113.getInt(1);
                System.out.println("Lab no is " + labNo1);
            }

            if (labNo1 > 0) {
                java.sql.Statement stmtTable112 = connectDB.createStatement();

                java.sql.ResultSet rsetTable112 = stmtTable112.executeQuery("select distinct lab_no,patient_name from hp_lab_results where doc_read = false and result_shown = false AND date >='" + mainDatePicker.getDate().toString() + "' and lab_no is not null and lab_no !='null' order by lab_no desc limit 1 ");

                while (rsetTable112.next()) {
                    labNo = rsetTable112.getString(1);
                    patientNo = rsetTable112.getString(2);
                    System.out.println("Lab no2 is " + patientNo);
                }
            } else {
            }

            // for (int l = 0; l < listofDays.length; l++) {
            java.sql.Statement stmtTable11 = connectDB.createStatement();

            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("select count(distinct lab_no) from hp_lab_results where doc_read = false  AND date >='" + datePicker11.getDate().toString() + "'");

            while (rsetTable11.next()) {
                patNo = rsetTable11.getInt(1);

            }

            //   jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select distinct date,patient_no,patient_name,lab_no,doc_read from hp_lab_results where doc_read = false AND date >='"+datePicker1.getDate().toString()+"'  ORDER BY date,lab_no"));
            java.sql.Statement stmtTable1 = connectDB.createStatement();

            java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select distinct date,patient_no,patient_name,lab_no,doc_read from hp_lab_results where doc_read = false AND date >='" + datePicker11.getDate().toString() + "'  ORDER BY date,lab_no");

            while (rsetTable1.next()) {

                posted2verifyTable.setValueAt(rsetTable1.getObject(1), i, 0);
                posted2verifyTable.setValueAt(rsetTable1.getObject(2), i, 1);
                posted2verifyTable.setValueAt(rsetTable1.getObject(3), i, 2);
                posted2verifyTable.setValueAt(rsetTable1.getObject(4), i, 3);
                posted2verifyTable.setValueAt(rsetTable1.getObject(5), i, 4);

                i++;

            }

            //}
        } catch (java.sql.SQLException sqlExec) {

            sqlExec.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        if (patNo > 5) {

            this.jLabel18.setText("You Have '" + patNo + "' Results  Unread");
            this.jLabel18.setForeground(new java.awt.Color(255, 0, 51));
        } else {
            this.jLabel18.setText("You Have '" + patNo + "' Results  Unread");

            this.jLabel18.setForeground(new java.awt.Color(51, 51, 255));
        }

        //for(patNo=0;patNo>i;patNo++){
        //  if(patNo>=patNo+1){
        // if(labNo.equalsIgnoreCase(null)){
        // }else{
        String DiscNo = null;
        String DiscName = null;

        //int DiscNo = 0;
        int Disch1 = 0;
        try {
            java.sql.Statement stmtTable113 = connectDB.createStatement();

            java.sql.ResultSet rsetTable113 = stmtTable113.executeQuery("select count(patient_no) from hp_pending_discharge where disc_read = false  ");

            while (rsetTable113.next()) {
                Disch1 = rsetTable113.getInt(1);
                System.out.println("Lab no is " + Disch1);
            }

            if (Disch1 > 0) {
                java.sql.Statement stmtTable112 = connectDB.createStatement();

                java.sql.ResultSet rsetTable112 = stmtTable112.executeQuery("select distinct patient_no,patient_name from hp_pending_discharge where disc_read = false  ");

                while (rsetTable112.next()) {
                    DiscNo = rsetTable112.getString(1);
                    DiscName = rsetTable112.getString(2);
                    System.out.println("Pat no2 is " + DiscNo);
                }
            } else {
            }

        } catch (java.sql.SQLException sqlExec) {

            sqlExec.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        if (Disch1 > 0) {
            java.awt.Toolkit.getDefaultToolkit().beep();
            javax.swing.JOptionPane.showMessageDialog(this, "Patient No. '" + DiscNo + "' Name '" + DiscName + "' has been Discharged \n Speed up Discharge process at your station", "Information Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            try {

                java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE hp_pending_discharge SET disc_read = true where patient_no = '" + labNo + "'");
                pstmt46.executeUpdate();

            } catch (java.sql.SQLException sqlExec) {

                sqlExec.printStackTrace();

                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

            }
        } else {
        }

    }

    public void searchServices() {
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ageTxt;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JCheckBox cancerInfectiveStatusChkbx;
    private javax.swing.JComboBox cancerStatusInfectiveCmbx;
    private javax.swing.JButton clearFormBtn;
    private javax.swing.JButton clearVerifiedListingBtn;
    private javax.swing.JPanel clinicianOrdersWaitingPanel;
    private javax.swing.JButton closeFormBtn;
    private javax.swing.JButton colseVerifiedBtn;
    private javax.swing.JLabel commentsLabel;
    private javax.swing.JScrollPane commentsScrollPane;
    private javax.swing.JCheckBox culturedChkbx;
    private com.afrisoftech.lib.DatePicker datePicker11;
    private javax.swing.JButton editResultsBtn;
    private com.afrisoftech.lib.DatePicker endDatePicker;
    private javax.swing.JTextField externalSourceTxt;
    private javax.swing.JTextField genderTxt;
    private javax.swing.JCheckBox generalResultChkbx;
    private javax.swing.JButton helpBtn;
    private javax.swing.JCheckBox inpatientCheckBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton32;
    private javax.swing.JButton jButton42;
    private javax.swing.JButton jButton52;
    private javax.swing.JButton jButton521;
    private javax.swing.JButton jButton5211;
    private javax.swing.JButton jButton61;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel241;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel212;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel411;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JDialog jSearchDialog2;
    private javax.swing.JDialog jSearchDialog21;
    private javax.swing.JDialog jSearchDialog211;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JPanel jSearchPanel21;
    private javax.swing.JPanel jSearchPanel211;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JScrollPane jSearchScrollPane21;
    private javax.swing.JScrollPane jSearchScrollPane211;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTable jSearchTable2;
    private javax.swing.JTable jSearchTable21;
    private javax.swing.JTable jSearchTable211;
    private javax.swing.JSeparator jSeparator12;
    private javax.swing.JSeparator jSeparator121;
    private javax.swing.JSeparator jSeparator13;
    private javax.swing.JTable jTable111;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField113;
    private javax.swing.JTextField jTextField1131;
    private javax.swing.JTextField jTextField11311;
    private javax.swing.JTextField jTextField61;
    private javax.swing.JTextField jTextField62;
    private javax.swing.JTextField jTextField63;
    private javax.swing.JTextField jTextField82;
    private javax.swing.JTextField labDisciplineTxt;
    private javax.swing.JComboBox labDomainCmbx;
    private javax.swing.JTextField labNumberTxt;
    private javax.swing.JPanel labReportingTabPanel;
    private javax.swing.JTextField labRequestTimeTxt;
    private javax.swing.JComboBox labStationCmbx;
    private javax.swing.JTable labTestTable;
    private javax.swing.JTabbedPane labreportingTabbedPane;
    private com.afrisoftech.lib.DatePicker mainDatePicker;
    private javax.swing.JLabel normalRangeLbl;
    private javax.swing.JCheckBox outpatientCheckBox;
    private javax.swing.JTable paidTable;
    private javax.swing.JPanel paidUpOrdersPanel;
    private javax.swing.JPanel paidupPanel;
    private javax.swing.JScrollPane paidupScrollPane;
    private javax.swing.JEditorPane pathologistCommentsTxt;
    private javax.swing.JButton patientCardBtn;
    private javax.swing.JLabel patientNameLabel;
    private javax.swing.JTextField patientNameTxt;
    private javax.swing.JLabel patientNumberLabel;
    private javax.swing.JTextField patientNumberTxt;
    private javax.swing.JTable pendingTable;
    private javax.swing.JTable posted2verifyTable;
    private javax.swing.JButton raiserequestsButton;
    private javax.swing.JComboBox referralCmbx;
    private javax.swing.JCheckBox referralResultsChkbx;
    private javax.swing.JButton refreshListingsBtn;
    private javax.swing.JPanel releasedResultsPanel;
    private javax.swing.JTable releasedResultsTable;
    private javax.swing.JButton removeRowBtn;
    private javax.swing.JPanel reportingHeaderPanel;
    private javax.swing.JTextField reqidTextField;
    private javax.swing.JPanel resultsMainPanel;
    private javax.swing.JPanel resultsNarrativePanel;
    private javax.swing.JTable resultsNarrativeTable;
    private javax.swing.JScrollPane resultsNarrativeTableScrollPane;
    private javax.swing.JPanel resultsPanel;
    private javax.swing.JPanel resultsSIPanel;
    private javax.swing.JScrollPane resultsSIScrollPane;
    private javax.swing.JTable resultsSITable;
    private javax.swing.JComboBox resultsVerifierCmbx;
    private javax.swing.JButton saveResultsBtn;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchButton11;
    private javax.swing.JTextField searchpatienttxtfld;
    private javax.swing.JComboBox specimenCmbx;
    private javax.swing.JComboBox specimenConditionCmbx;
    private javax.swing.JComboBox specimenSourceCmbx;
    private javax.swing.JTextField specimenTimeTxt;
    private javax.swing.JPanel verificationPanel;
    private com.afrisoftech.lib.DatePicker verifiedDatePicker;
    private javax.swing.JPanel verifiedResultsPanel;
    private javax.swing.JScrollPane verifiedScrollPane;
    private javax.swing.JScrollPane verifyScrollPane;
    // End of variables declaration//GEN-END:variables
}
