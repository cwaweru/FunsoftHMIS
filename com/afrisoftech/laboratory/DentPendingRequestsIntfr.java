/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */
package com.afrisoftech.laboratory;

/** 
 *
 * @author  root
 */
public class DentPendingRequestsIntfr extends javax.swing.JInternalFrame implements java.lang.Runnable {

    /** Creates new form loanpymntintfr */
    javax.swing.table.TableModel tableModel = null;
    java.sql.Connection connectDB = null;
    com.afrisoftech.lib.DBObject dbObject;
    private javax.swing.JComboBox cmbox5;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    java.lang.Thread getListThread;
    boolean getList;

    public DentPendingRequestsIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;
        dbObject = new com.afrisoftech.lib.DBObject();
        getListThread = new java.lang.Thread(this, "Update_Lab_Tests");

        initComponents();

        getList = true;

        getListThread.start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton9 = new javax.swing.JButton();
        jSearchDialog1 = new javax.swing.JDialog();
        jSearchPanel1 = new javax.swing.JPanel();
        jTextField1111 = new javax.swing.JTextField();
        jSearchScrollPane1 = new javax.swing.JScrollPane();
        jSearchTable1 = new com.afrisoftech.dbadmin.JTable();
        jButton91 = new javax.swing.JButton();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jSearchDialog2 = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        jTextField1112 = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        jSearchTable2 = new com.afrisoftech.dbadmin.JTable();
        jButton92 = new javax.swing.JButton();
        jSearchDialog3 = new javax.swing.JDialog();
        jSearchPanel3 = new javax.swing.JPanel();
        jTextField1113 = new javax.swing.JTextField();
        jSearchScrollPane3 = new javax.swing.JScrollPane();
        jSearchTable3 = new com.afrisoftech.dbadmin.JTable();
        jButton93 = new javax.swing.JButton();
        jSearchDialog4 = new javax.swing.JDialog();
        jSearchPanel4 = new javax.swing.JPanel();
        jTextField112 = new javax.swing.JTextField();
        jSearchScrollPane4 = new javax.swing.JScrollPane();
        jSearchTable4 = new com.afrisoftech.dbadmin.JTable();
        jButton911 = new javax.swing.JButton();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel11 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jCheckBox5 = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jCheckBox6 = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jTextField36 = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel121 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jPanel31 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox31 = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        datePicker11 = new com.afrisoftech.lib.DatePicker();
        jButton7 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTextPane12 = new javax.swing.JTextPane();
        jScrollPane14 = new javax.swing.JScrollPane();
        jTextPane14 = new javax.swing.JTextPane();
        jScrollPane16 = new javax.swing.JScrollPane();
        jTextPane16 = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane18 = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane121 = new javax.swing.JTextPane();
        jComboBox3 = new javax.swing.JComboBox();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel34 = new javax.swing.JPanel();
        this.jPanel34.setVisible(false);

        jScrollPane4 = new javax.swing.JScrollPane();
        jTable13 = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jPanel5 = new javax.swing.JPanel();
        jCheckBox15 = new javax.swing.JCheckBox();
        jCheckBox212 = new javax.swing.JCheckBox();
        jCheckBox22 = new javax.swing.JCheckBox();
        jCheckBox61 = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jPanel72 = new javax.swing.JPanel();
        this.jPanel72.setVisible(false);
        jScrollPane15 = new javax.swing.JScrollPane();
        jTable111 = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class,java.lang.Object.class,java.lang.Object.class,java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true,true,false,false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        jPanel82 = new javax.swing.JPanel();
        jLabel113 = new javax.swing.JLabel();
        jTextField121 = new javax.swing.JTextField();
        jLabel131 = new javax.swing.JLabel();
        datePicker2 = new com.afrisoftech.lib.DatePicker();
        jPanel7 = new javax.swing.JPanel();
        jCheckBox71 = new javax.swing.JCheckBox();
        jCheckBox81 = new javax.swing.JCheckBox();
        jTextField7 = new javax.swing.JTextField();
        jList1 = new javax.swing.JList();
        jPanel4 = new javax.swing.JPanel();
        jTextField9 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel62 = new javax.swing.JPanel();
        jTextField362 = new javax.swing.JTextField();
        searchButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextField21 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        jComboBox1 = new javax.swing.JComboBox();
        jComboBox2 = new javax.swing.JComboBox();
        jPanel8 = new javax.swing.JPanel();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        jButton63 = new javax.swing.JButton();
        jButton41 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class,  java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class,java.lang.Object.class,java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false,false, false, true,false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };

        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel23 = new javax.swing.JPanel();
        jPanel211 = new javax.swing.JPanel();
        jScrollPane17 = new javax.swing.JScrollPane();
        jTable11 = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class,java.lang.Object.class,  java.lang.Object.class,  java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false,false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };

        jLabel61 = new javax.swing.JLabel();
        datePicker111 = new com.afrisoftech.lib.DatePicker();
        jCheckBox11 = new javax.swing.JCheckBox();
        jButton42 = new javax.swing.JButton();
        jButton32 = new javax.swing.JButton();

        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(jTextField111, gridBagConstraints);

        jSearchTable.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton9.setText("Cancel");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        jSearchDialog1.setModal(true);
        jSearchDialog1.setUndecorated(true);
        jSearchDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel1.setLayout(new java.awt.GridBagLayout());

        jTextField1111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel1.add(jTextField1111, gridBagConstraints);

        jSearchTable1.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable1MouseClicked(evt);
            }
        });
        jSearchScrollPane1.setViewportView(jSearchTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel1.add(jSearchScrollPane1, gridBagConstraints);

        jButton91.setText("Cancel");
        jButton91.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton91ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel1.add(jButton91, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog1.getContentPane().add(jSearchPanel1, gridBagConstraints);

        jSearchDialog2.setModal(true);
        jSearchDialog2.setUndecorated(true);
        jSearchDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        jTextField1112.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1112CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jSearchPanel2.add(jTextField1112, gridBagConstraints);

        jSearchTable2.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable2MouseClicked(evt);
            }
        });
        jSearchScrollPane2.setViewportView(jSearchTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

        jButton92.setText("Cancel");
        jButton92.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton92ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton92, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog2.getContentPane().add(jSearchPanel2, gridBagConstraints);

        jSearchDialog3.setModal(true);
        jSearchDialog3.setUndecorated(true);
        jSearchDialog3.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel3.setLayout(new java.awt.GridBagLayout());

        jTextField1113.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1113CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel3.add(jTextField1113, gridBagConstraints);

        jSearchTable3.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jSearchTable3MouseEntered(evt);
            }
        });
        jSearchScrollPane3.setViewportView(jSearchTable3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel3.add(jSearchScrollPane3, gridBagConstraints);

        jButton93.setText("Cancel");
        jButton93.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton93ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel3.add(jButton93, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog3.getContentPane().add(jSearchPanel3, gridBagConstraints);

        jSearchDialog4.setModal(true);
        jSearchDialog4.setUndecorated(true);
        jSearchDialog4.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel4.setLayout(new java.awt.GridBagLayout());

        jTextField112.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField112CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel4.add(jTextField112, gridBagConstraints);

        jSearchScrollPane4.setDoubleBuffered(true);

        jSearchTable4.setDoubleBuffered(true);
        jSearchTable4.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable4MouseClicked(evt);
            }
        });
        jSearchScrollPane4.setViewportView(jSearchTable4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel4.add(jSearchScrollPane4, gridBagConstraints);

        jButton911.setText("Cancel");
        jButton911.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton911ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel4.add(jButton911, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog4.getContentPane().add(jSearchPanel4, gridBagConstraints);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Dental Requests");
        setFrameIcon(null);
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jSeparator1, gridBagConstraints);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jLabel7, gridBagConstraints);

        jTextField6.setEditable(false);
        jTextField6.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField6.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jTextField6, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jLabel1, gridBagConstraints);

        jPanel11.setLayout(new java.awt.GridBagLayout());

        jPanel22.setBorder(javax.swing.BorderFactory.createTitledBorder("Patient Details"));
        jPanel22.setLayout(new java.awt.GridBagLayout());

        jLabel9.setText("Service No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel22.add(jLabel9, gridBagConstraints);

        buttonGroup3.add(jCheckBox5);
        jCheckBox5.setText("MALE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel22.add(jCheckBox5, gridBagConstraints);

        jLabel4.setText("Payment Mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        jPanel22.add(jLabel4, gridBagConstraints);

        jTextField2.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel22.add(jTextField2, gridBagConstraints);

        buttonGroup3.add(jCheckBox6);
        jCheckBox6.setText("FEMALE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        jPanel22.add(jCheckBox6, gridBagConstraints);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel6.setMinimumSize(new java.awt.Dimension(82, 37));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        jTextField36.setEditable(false);
        jTextField36.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField36ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jTextField36, gridBagConstraints);

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton.setToolTipText("Search");
        searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jPanel6.add(searchButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel22.add(jPanel6, gridBagConstraints);

        jLabel12.setForeground(new java.awt.Color(255, 0, 0));
        jLabel12.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel22.add(jLabel12, gridBagConstraints);

        jTextField1.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel22.add(jTextField1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel22.add(jTextField3, gridBagConstraints);

        jLabel8.setText("Age");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        jPanel22.add(jLabel8, gridBagConstraints);

        jLabel121.setText("Category");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        jPanel22.add(jLabel121, gridBagConstraints);

        jTextField5.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel22.add(jTextField5, gridBagConstraints);

        jButton5.setText("Current Notes");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        jPanel22.add(jButton5, gridBagConstraints);

        jPanel31.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(jCheckBox1);
        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Out Patient");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel31.add(jCheckBox1, gridBagConstraints);

        buttonGroup1.add(jCheckBox2);
        jCheckBox2.setText("In Patients");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel31.add(jCheckBox2, gridBagConstraints);

        buttonGroup1.add(jCheckBox3);
        jCheckBox3.setText("Other Patients");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel31.add(jCheckBox3, gridBagConstraints);

        buttonGroup2.add(jCheckBox4);
        jCheckBox4.setText("Search By name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel31.add(jCheckBox4, gridBagConstraints);

        buttonGroup2.add(jCheckBox31);
        jCheckBox31.setSelected(true);
        jCheckBox31.setText("Search No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel31.add(jCheckBox31, gridBagConstraints);

        jLabel6.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel31.add(jLabel6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel31.add(datePicker11, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel22.add(jPanel31, gridBagConstraints);

        jButton7.setText("Patient Card/Notes");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weighty = 1.0;
        jPanel22.add(jButton7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jPanel22, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("NOTES"));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jTextPane12.setBorder(javax.swing.BorderFactory.createTitledBorder("PDHX"));
        jScrollPane12.setViewportView(jTextPane12);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jScrollPane12, gridBagConstraints);

        jTextPane14.setBorder(javax.swing.BorderFactory.createTitledBorder("Clinical Examination"));
        jScrollPane14.setViewportView(jTextPane14);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jScrollPane14, gridBagConstraints);

        jTextPane16.setBorder(javax.swing.BorderFactory.createTitledBorder("Investigation"));
        jScrollPane16.setViewportView(jTextPane16);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jScrollPane16, gridBagConstraints);

        jTextPane18.setBorder(javax.swing.BorderFactory.createTitledBorder("Inv. Findings"));
        jScrollPane2.setViewportView(jTextPane18);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jScrollPane2, gridBagConstraints);

        jTextPane121.setBorder(javax.swing.BorderFactory.createTitledBorder("PMHX"));
        jScrollPane3.setViewportView(jTextPane121);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jScrollPane3, gridBagConstraints);

        jComboBox3.setEditable(true);
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1 Day", "2 Days", "3 Days", "4 Days", "5 Days", "6 Days", "1 Week", "2 Weeks", "3 Weeks", "> than 3 Weeks ", " ", " " }));
        jComboBox3.setBorder(javax.swing.BorderFactory.createTitledBorder("HPC"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel3.add(jComboBox3, gridBagConstraints);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, ""},
                {null, ""},
                {null, ""},
                {null, ""},
                {null, ""},
                {null, ""},
                {null, ""},
                {null, ""},
                {null, ""},
                {null, ""}
            },
            new String [] {
                "Code", "Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setUpdateSelectionOnSort(false);
        javax.swing.table.TableColumn column3x = null;
        for (int i = 0; i < 2; i++) {
            column3x = jTable2.getColumnModel().getColumn(i);
            if (i == 1) {

                column3x.setPreferredWidth(300); //sport column is bigger
            } else {

                column3x.setPreferredWidth(50);
            }
        }
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(jScrollPane5, gridBagConstraints);

        jPanel34.setLayout(new java.awt.GridBagLayout());

        jTable13.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", null, null, null, null},
                {"", null, null, null, null},
                {"", null, null, null, null},
                {"", null, null, null, null},
                {"", null, null, null, null},
                {"", null, null, null, null},
                {null, null, null, null, null},
                {"", null, null, null, null},
                {"", null, null, null, null},
                {"", null, null, null, null}
            },
            new String [] {
                "Service", "Quantity", "Price", "Amount", "GL"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable13.setDragEnabled(true);
        jTable13.setGridColor(new java.awt.Color(204, 204, 255));
        javax.swing.table.TableColumn column = null;
        for (int i = 0; i < 5; i++) {
            column = jTable13.getColumnModel().getColumn(i);
            if (i == 0) {

                column.setPreferredWidth(500); //sport column is bigger
            } else {
                if(i == 1){
                    column.setPreferredWidth(50);
                }else{
                    if(i == 5){
                        column.setPreferredWidth(250);
                    }else{
                        //if (i == 2) {
                            column.setPreferredWidth(100);
                            // }  else
                        //column.setPreferredWidth(50);
                    }
                }
            }
        }
        jTable13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable13MouseClicked(evt);
            }
        });
        jTable13.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable13KeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(jTable13);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 30;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel34.add(jScrollPane4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        jPanel3.add(jPanel34, gridBagConstraints);

        jScrollPane6.setBorder(null);

        jTextPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("PC"));
        jScrollPane6.setViewportView(jTextPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 1;
        gridBagConstraints.weightx = 1.3;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        jPanel3.add(jScrollPane6, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        buttonGroup4.add(jCheckBox15);
        jCheckBox15.setForeground(new java.awt.Color(0, 0, 255));
        jCheckBox15.setSelected(true);
        jCheckBox15.setText("General");
        jCheckBox15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox15ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jCheckBox15, gridBagConstraints);

        buttonGroup4.add(jCheckBox212);
        jCheckBox212.setForeground(new java.awt.Color(0, 0, 255));
        jCheckBox212.setText("Laboratory");
        jCheckBox212.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox212ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jCheckBox212, gridBagConstraints);

        buttonGroup4.add(jCheckBox22);
        jCheckBox22.setForeground(new java.awt.Color(0, 0, 255));
        jCheckBox22.setText("Pharmacy");
        jCheckBox22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox22ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jCheckBox22, gridBagConstraints);

        buttonGroup4.add(jCheckBox61);
        jCheckBox61.setForeground(new java.awt.Color(51, 0, 255));
        jCheckBox61.setText("Radiological");
        jCheckBox61.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox61ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jCheckBox61, gridBagConstraints);

        jLabel11.setText("Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        jPanel5.add(jLabel11, gridBagConstraints);

        jTextField8.setEditable(false);
        jTextField8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTextField8.setForeground(new java.awt.Color(255, 0, 0));
        jTextField8.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField8.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jTextField8, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jPanel5, gridBagConstraints);

        jPanel72.setLayout(new java.awt.GridBagLayout());

        jTable111.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Drug", "Cost", "Route", "Freqcy", "No.of Days", "Dosage", "Gl Code", "Code"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable111.setGridColor(new java.awt.Color(204, 204, 255));
        javax.swing.table.TableColumn column1 = null;
        for (int i = 0; i < 5; i++) {
            column1 = jTable111.getColumnModel().getColumn(i);
            if (i == 0) {

                column1.setPreferredWidth(200); //sport column is bigger
            } else {
                if (i == 1) {
                    column1.setPreferredWidth(100);
                } else {
                    if (i == 6) {
                        column1.setPreferredWidth(100);
                    } else {
                        //if (i == 2) {
                            column1.setPreferredWidth(100);
                            // }  else
                        //column.setPreferredWidth(50);
                    }
                }
            }
        }

        java.lang.Object[] strCmb2 = {"Oral", "I.M", "I.V", "Intramuscular", "Topical", "Vaginal", "Rectal", "Sublingual", "Subcutaneuos", "Intrathical", "Intradermal"};

        javax.swing.JComboBox cmBox2 = new javax.swing.JComboBox(strCmb2);

        javax.swing.table.TableColumn teditor2 = this.jTable111.getColumn("Route");

        teditor2.setCellEditor(new javax.swing.DefaultCellEditor(cmBox2));

        java.lang.Object[] strCmb1 = {"OD", "BD", "TID", "QID", "Stat", "Mane", "Nocte", "Prn"};

        javax.swing.JComboBox cmBox1 = new javax.swing.JComboBox(strCmb1);

        javax.swing.table.TableColumn teditor1 = this.jTable111.getColumn("Freqcy");

        teditor1.setCellEditor(new javax.swing.DefaultCellEditor(cmBox1));

        java.lang.Object[] strCmb3 = {"Once", "1", "3", "5", "7", "14", "30", "90"};

        javax.swing.JComboBox cmBox3 = new javax.swing.JComboBox(strCmb3);
        cmBox3.setEditable(true);
        javax.swing.table.TableColumn teditor3 = this.jTable111.getColumn("No.of Days");

        teditor3.setCellEditor(new javax.swing.DefaultCellEditor(cmBox3));

        jTable111.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable111MouseClicked(evt);
            }
        });
        jTable111.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable111KeyReleased(evt);
            }
        });
        jScrollPane15.setViewportView(jTable111);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 100;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel72.add(jScrollPane15, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        jPanel3.add(jPanel72, gridBagConstraints);

        jPanel82.setLayout(new java.awt.GridBagLayout());

        jLabel113.setText("Provisional Diagnosis");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel82.add(jLabel113, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel82.add(jTextField121, gridBagConstraints);

        jLabel131.setText("LMP");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel82.add(jLabel131, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel82.add(datePicker2, gridBagConstraints);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Has the patient Been Previously X-rayed", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BELOW_TOP));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        jCheckBox71.setText("Yes");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel7.add(jCheckBox71, gridBagConstraints);

        jCheckBox81.setText("No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel7.add(jCheckBox81, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel82.add(jPanel7, gridBagConstraints);

        jTextField7.setBorder(javax.swing.BorderFactory.createTitledBorder("Dental Xray"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel82.add(jTextField7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jPanel82, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 100;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        jPanel11.add(jPanel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        jPanel11.add(jList1, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Medical History"));
        jPanel4.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jTextField9, gridBagConstraints);

        jLabel13.setText("Allergy");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jLabel13, gridBagConstraints);

        jLabel14.setText("Disease");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jLabel14, gridBagConstraints);

        jLabel15.setText("Others");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jLabel15, gridBagConstraints);

        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("Doctor");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jPanel4.add(jLabel2, gridBagConstraints);

        jPanel62.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel62.setMinimumSize(new java.awt.Dimension(82, 37));
        jPanel62.setLayout(new java.awt.GridBagLayout());

        try {

            java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rset1 = stmt1.executeQuery("select DISTINCT f_name||' '||l_name as name FROM secure_menu_access WHERE login_name = current_user");
            while (rset1.next()) {
                jTextField362.setText(rset1.getObject(1).toString());

            }

        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel62.add(jTextField362, gridBagConstraints);

        searchButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton2.setToolTipText("Search");
        searchButton2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton2.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton2.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jPanel62.add(searchButton2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jPanel62, gridBagConstraints);

        jLabel3.setText("Dental No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jLabel3, gridBagConstraints);

        jTextField21.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jTextField21, gridBagConstraints);

        jLabel5.setText("Review Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jLabel5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(datePicker1, gridBagConstraints);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Yes", "No" }));
        jComboBox1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jComboBox1KeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jComboBox1, gridBagConstraints);

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Diabeties", "Hypertension", "Coagulopathy", "Others" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jComboBox2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jPanel4, gridBagConstraints);

        jPanel8.setLayout(new java.awt.GridBagLayout());

        jButton1.setMnemonic('O');
        jButton1.setText("Save Data");
        jButton1.setToolTipText("Click here enter data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jButton1, gridBagConstraints);

        jButton2.setText("Reprint");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        jPanel8.add(jButton2, gridBagConstraints);

        jButton31.setMnemonic('l');
        jButton31.setText("Clear");
        jButton31.setToolTipText("Click here to clear textfields");
        jButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton31ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jButton31, gridBagConstraints);

        jButton63.setMnemonic('r');
        jButton63.setText("Remove Row");
        jButton63.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton63ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jButton63, gridBagConstraints);

        jButton41.setMnemonic('C');
        jButton41.setText("Close");
        jButton41.setToolTipText("Click here to close window");
        jButton41.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton41ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jButton41, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jPanel8, gridBagConstraints);

        jTabbedPane1.addTab("Dental Requests", jPanel11);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel21.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setAutoscrolls(true);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Pat No.", "Pat Name", "Mode", "Service", "Qty", "Amount", "No", "Doctor", "Seen", "Bed No", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });

        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel21.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        jPanel2.add(jPanel21, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPanel2, gridBagConstraints);

        jButton3.setMnemonic('l');
        jButton3.setText("Clear");
        jButton3.setToolTipText("Click here to clear textfields");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jButton3, gridBagConstraints);

        jButton4.setMnemonic('C');
        jButton4.setText("Close");
        jButton4.setToolTipText("Click here to close window");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jButton4, gridBagConstraints);

        jButton6.setText("Okay");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jButton6, gridBagConstraints);

        jTabbedPane1.addTab("Pending Requests", jPanel1);

        jPanel23.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel23.setLayout(new java.awt.GridBagLayout());

        jPanel211.setLayout(new java.awt.GridBagLayout());

        jScrollPane17.setAutoscrolls(true);

        jTable11.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Service No.", "Name", "No", "Unit", "Service", "Doctor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });

        jTable11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable11MouseClicked(evt);
            }
        });
        jScrollPane17.setViewportView(jTable11);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel211.add(jScrollPane17, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        jPanel23.add(jPanel211, gridBagConstraints);

        jLabel61.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        jPanel23.add(jLabel61, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel23.add(datePicker111, gridBagConstraints);

        jCheckBox11.setText("View");
        jCheckBox11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox11ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        jPanel23.add(jCheckBox11, gridBagConstraints);

        jButton42.setMnemonic('C');
        jButton42.setText("Close");
        jButton42.setToolTipText("Click here to close window");
        jButton42.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton42ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel23.add(jButton42, gridBagConstraints);

        jButton32.setMnemonic('l');
        jButton32.setText("Clear");
        jButton32.setToolTipText("Click here to clear textfields");
        jButton32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton32ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel23.add(jButton32, gridBagConstraints);

        jTabbedPane1.addTab("Results List", jPanel23);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        setBounds(0, 0, 864, 552);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField36ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField36ActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jTextField36ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        String receiptNo = null;
        receiptNo = this.jTextField36.getText().toString();

        com.afrisoftech.reports.DentalResPdf policy = new com.afrisoftech.reports.DentalResPdf();

        policy.DentalResPdf(connectDB, receiptNo);  // Add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed
    private void cmbox5KeyReleased(java.awt.event.KeyEvent evt) {
        cmbox5.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT symptom FROM hp_symptoms WHERE symptom ILIKE '" + cmbox5.getSelectedItem() + "%' ORDER BY 1"));
        cmbox5.setEditable(true);
        // com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT symptom FROM hp_symptoms WHERE symptom ILIKE '"+cmbox5.getSelectedItem()+"%' ORDER BY 1");
    }
    private void jTable11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable11MouseClicked
        int i = jTable11.getSelectedRow();
        // for (int i = 0; i < jTable1.getRowCount(); i++){
        if (jTable11.getValueAt(i, 0) != null) {
            //    if (Boolean.valueOf(jTable1.getModel().getValueAt(i, 9).toString()) == java.lang.Boolean.TRUE) {
            com.afrisoftech.reports.DentalResSlipPdf pol = new com.afrisoftech.reports.DentalResSlipPdf();
            pol.DentalResSlipPdf(connectDB, jTable11.getValueAt(i, 3).toString());


        }  // Add your handling code here:
    }//GEN-LAST:event_jTable11MouseClicked

    private void jButton42ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton42ActionPerformed
        this.setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_jButton42ActionPerformed

    private void jButton32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton32ActionPerformed
        for (int k = 0; k < jTable11.getRowCount(); k++) {
            for (int r = 0; r < jTable11.getColumnCount(); r++) {
                jTable11.getModel().setValueAt(null, k, r);
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jButton32ActionPerformed

    private void jCheckBox11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox11ActionPerformed
        int j = 0;
        int i = 0;
        int n = 0;
        int patNo = 0;
        try {

            java.sql.Statement stmtTable11 = connectDB.createStatement();

            // java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select date,patient_no,name,payment,'false' as bill from hp_patient_visit where transaction_type ilike 'reg%' and date = current_date  ORDER BY date");
            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("select distinct count(xray_no) from hp_xray_results where date = '" + datePicker111.getDate().toString() + "'");

            while (rsetTable11.next()) {
                patNo = rsetTable11.getInt(1);

            }

            java.sql.Statement stmtTable1 = connectDB.createStatement();

            java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select input_date::timestamp(0),patient_no,initcap(patient_name),xray_no,1,initcap(examination),user_name from hp_xray_results where  date = '" + datePicker111.getDate().toString() + "' and xray_no ilike 'D%' order by input_date::timestamp(0)");


            while (rsetTable1.next()) {

                jTable11.setValueAt(rsetTable1.getObject(1), i, 0);
                jTable11.setValueAt(rsetTable1.getObject(2), i, 1);
                jTable11.setValueAt(rsetTable1.getObject(3), i, 2);
                jTable11.setValueAt(rsetTable1.getObject(4), i, 3);
                jTable11.setValueAt(rsetTable1.getObject(5), i, 4);
                jTable11.setValueAt(rsetTable1.getObject(6), i, 5);
                jTable11.setValueAt(rsetTable1.getObject(7), i, 6);


                i++;

            }

            //}




        } catch (java.sql.SQLException sqlExec) {

            sqlExec.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }   // Add your handling code here:
    }//GEN-LAST:event_jCheckBox11ActionPerformed

    private void jButton41ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton41ActionPerformed
        this.setVisible(false);    // Add your handling code here:
    }//GEN-LAST:event_jButton41ActionPerformed

    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton31ActionPerformed
        this.getContentPane().removeAll();
        this.initComponents(); // Add your handling code here:
    }//GEN-LAST:event_jButton31ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String billNo = null;
        billNo = this.jTextField21.getText().toString();

        com.afrisoftech.reports.DentalResSlipPdf pol = new com.afrisoftech.reports.DentalResSlipPdf();
        pol.DentalResSlipPdf(connectDB, billNo);   // Add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        java.util.Calendar calendar = java.util.Calendar.getInstance();

        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

        System.out.println(datenowSql1.toString());

        java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

        System.out.println(datenowSql.toString());

        String billNo = null;

        String transNo = null;
        String User = null;
        int vid = 0;
        String cardNo = null;
        String AccDesc = null;
        String scheme = null;
        String cardName = null;
        String isurer = null;
        String expDate = null;
        String Diagnosis = null;
        String glAcc = null;
        String glCode = null;
        String Categ = null;
        String rank = null;
        String Sex = null;
        String symptoms = "-";
        String Xray = null;
        String plan = null;
        double price = 0.00;
        String Store = null;
        String units = null;
        if (jCheckBox71.isSelected()) {
            Xray = "Yes";
        } else {
            Xray = "No";
        }


        if (jTable1.isEditing()) {
            jTable1.getCellEditor().stopCellEditing();
        }

        if (jTable2.isEditing()) {
            jTable2.getCellEditor().stopCellEditing();
        }

        if (jTable13.isEditing()) {
            jTable13.getCellEditor().stopCellEditing();
        }

        // if (jTable3.isEditing()) {
        //     jTable3.getCellEditor().stopCellEditing();
        // }
        if (jTable111.isEditing()) {
            jTable111.getCellEditor().stopCellEditing();
        }
        // if (jTable3.isEditing()) {
        //     jTable3.getCellEditor().stopCellEditing();
        // }

        if (jCheckBox22.isSelected()) {
            plan = jTable111.getValueAt(0, 0) + " " + jTable111.getValueAt(1, 0) + " " + jTable111.getValueAt(2, 0);
        } else {
            plan = jTable13.getValueAt(0, 0) + " " + jTable13.getValueAt(1, 0) + " " + jTable13.getValueAt(2, 0);

        }
        symptoms = jTextPane1.getText();

        Diagnosis = jTable2.getValueAt(0, 1) + " " + jTable2.getValueAt(1, 1) + " " + jTextField7.getText();

        if (this.jCheckBox6.isSelected()) {
            Categ = this.jCheckBox6.getText();
        } else {
            Categ = this.jCheckBox5.getText();
        }

        if (jCheckBox6.isSelected()) {
            Sex = this.jCheckBox6.getText();
        } else {
            Sex = this.jCheckBox5.getText();
        }
        String Gender = null;
        if (jCheckBox5.isSelected()) {
            Gender = "Male";
        } else {
            Gender = "Female";
        }
        try {
            java.sql.Statement stm12 = connectDB.createStatement();

            java.sql.ResultSet rse12 = stm12.executeQuery("select comments,date from hp_patient_visit where patient_no ='" + jTextField36.getText() + "' ORDER BY date DESC LIMIT 1");

            while (rse12.next()) {
                rank = rse12.getString(1);
            }
            java.sql.Statement stm121 = connectDB.createStatement();
            java.sql.Statement ps11 = connectDB.createStatement();
            java.sql.ResultSet rst11 = ps11.executeQuery("select 'D'||nextval('dental_no_seq'),current_user");
            while (rst11.next()) {
                rst11.getObject(1).toString();

                billNo = rst11.getObject(1).toString();
                User = rst11.getObject(2).toString();
                this.jTextField21.setText(billNo);
            }

            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO hp_xray_results values(?,?,?,?,?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

            pstmt.setString(1, jTextField36.getText());
            if (jTextField1.getText().equals("")) {
                javax.swing.JOptionPane.showMessageDialog(this, "Patient Name missing", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            } else {

                pstmt.setString(2, jTextField1.getText());
            }
            // pstmt.setString(2,jTextField1.getText());
            pstmt.setString(3, billNo);
            pstmt.setObject(4, jTextField3.getText());
            pstmt.setObject(5, Categ);

            pstmt.setString(6, jTextField9.getText());
            pstmt.setString(7, plan);
            // pstmt.setString(7,jTextField361.getText());
            pstmt.setDate(8, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()));
            pstmt.setTimestamp(9, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
            pstmt.setDouble(10, java.lang.Double.valueOf(jTextField8.getText()));
            pstmt.setObject(11, jComboBox1.getSelectedItem());
            pstmt.setString(12, jComboBox2.getSelectedItem().toString());
            pstmt.setString(13, jTextField362.getText());
            pstmt.setString(14, jTextField362.getText());
            pstmt.setBoolean(15, false);
            pstmt.setBoolean(16, false);
            pstmt.setString(17, "0");
            pstmt.setInt(18, 0);
            pstmt.setString(19, "0");
            pstmt.setString(20, symptoms);
            pstmt.setString(21, jComboBox2.getSelectedItem().toString());
            pstmt.setString(22, jTextPane16.getText());
            pstmt.setString(23, jTextPane12.getText());
            pstmt.setString(24, jTextPane121.getText());
            pstmt.setString(25, jTextPane16.getText());
            pstmt.setString(26, jTextPane14.getText());
            pstmt.setString(27, jTextPane18.getText());
            pstmt.setString(28, Diagnosis);
            pstmt.setString(29, plan);
            pstmt.executeUpdate();
            for (int i = 0; i < jTable13.getRowCount(); i++) {
                if (jTable13.getValueAt(i, 0) != null) {



                    java.sql.ResultSet rse121 = stm121.executeQuery("Select main_service,gl_account from pb_operating_parameters WHERE service_type ILIKE '" + jTable13.getValueAt(i, 0).toString() + "'");

                    while (rse121.next()) {

                        glAcc = rse121.getObject(1).toString();
                        glCode = rse121.getObject(2).toString();
                    }
                    java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("INSERT INTO pb_doctors_request VALUES(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,trim(?), ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");

                    pstmt2.setString(1, jTextField36.getText());

                    if (jTextField1.getText().equals("")) {
                        javax.swing.JOptionPane.showMessageDialog(this, "Patient Name missing", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    } else {

                        pstmt2.setString(2, jTextField1.getText());
                    }
                    // pstmt2.setString(2,jTextField1.getText());
                    pstmt2.setString(3, jTextField2.getText());
                    if (jTextField362.getText().equals("")) {
                        javax.swing.JOptionPane.showMessageDialog(this, "Doctor's Name missing", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    } else {

                        pstmt2.setString(4, jTextField362.getText());
                    }
                    //  pstmt2.setString(4,jTextField8.getText());
                    pstmt2.setString(5, jTable13.getValueAt(i, 0).toString());
                    pstmt2.setDouble(6, 1);
                    pstmt2.setDouble(7, java.lang.Double.valueOf(jTable13.getValueAt(i, 3).toString()));
                    pstmt2.setString(8, glCode);
                    pstmt2.setDate(9, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()));
                    pstmt2.setString(10, billNo);
                    pstmt2.setString(11, User);
                    if (jTextField2.getText().startsWith("Scheme")) {
                        pstmt2.setBoolean(12, true);
                    } else {
                        pstmt2.setBoolean(12, false);
                    }
                    pstmt2.setString(13, glAcc);
                    pstmt2.setString(14, billNo);
                    pstmt2.setString(15, Sex);
                    pstmt2.setBoolean(16, false);
                    pstmt2.setBoolean(17, false);
                    pstmt2.setString(18, Xray);
                    pstmt2.setDate(19, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()));
                    pstmt2.setTimestamp(20, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                    pstmt2.setString(21, jTextField5.getText().toString());
                    pstmt2.setString(22, rank);
                    pstmt2.setString(23, jTextField3.getText().toString());
                    pstmt2.setString(24, jTextPane121.getText().toString());
                    pstmt2.setString(25, "DENTAL");
                    pstmt2.setString(26, Diagnosis);
                    pstmt2.setString(27, Gender);
                    pstmt2.executeUpdate();


                    java.sql.PreparedStatement pstmt2f = connectDB.prepareStatement("insert into hp_patient_billing values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,trim(?),?)");

                    pstmt2f.setString(1, jTextField36.getText());
                    pstmt2f.setString(2, jTextField1.getText());
                    pstmt2f.setString(3, jTextField2.getText());
                    pstmt2f.setString(4, jTextField5.getText());
                    pstmt2f.setObject(5, jTable13.getValueAt(i, 0));
                    pstmt2f.setDouble(6, java.lang.Double.valueOf(jTable13.getValueAt(i, 1).toString()));
                    pstmt2f.setDouble(7, java.lang.Double.valueOf(jTable13.getValueAt(i, 3).toString()));
                    pstmt2f.setObject(8, glCode);
                    pstmt2f.setDate(9, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()));//java.sql.Date.valueOf(String.format("%1$tY-%1$tm-%1$te",datePicker1.getDate())));
                    pstmt2f.setString(10, billNo);
                    pstmt2f.setString(11, User);
                    if (jTextField2.getText().startsWith("Scheme")) {
                        pstmt2f.setBoolean(12, true);
                    } else {
                        pstmt2f.setBoolean(12, false);
                    }
                    // pstmt2f.setBoolean(12, false);
                    pstmt2f.setString(13, glAcc);
                    pstmt2f.setInt(14, vid);
                    pstmt2f.setString(15, billNo);
                    pstmt2f.setBoolean(16, false);
                    pstmt2f.executeUpdate();
                }
            }
            java.sql.Statement stm121q = connectDB.createStatement();
            for (int i = 0; i < jTable111.getRowCount(); i++) {
                if (jTable111.getValueAt(i, 0) != null) {
                    this.jTable111.setCellSelectionEnabled(false);
                    java.sql.ResultSet rse121d = stm121.executeQuery("Select department,gl_code from st_stock_prices WHERE product_id ILIKE '" + jTable111.getValueAt(i, 7).toString() + "'");

                    while (rse121d.next()) {

                        glAcc = rse121d.getObject(1).toString();
                        glCode = rse121d.getObject(2).toString();
                    }
                    //this.jTextField9.setHighlighter().;
                    //this.jTextField9.setOpaque(true);

                    java.sql.ResultSet rse121 = stm121q.executeQuery("select activity from pb_activity where code ='" + jTable111.getValueAt(i, 6) + "'");

                    while (rse121.next()) {

                        glAcc = rse121.getObject(1).toString();

                        java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("INSERT INTO pb_doctors_request VALUES(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,trim(?),?, ?, ?, ?,?,?,?,?,?,?,?,?)");
                        pstmt2.setString(1, jTextField36.getText());
                        if (jTextField1.getText().equals("")) {
                            javax.swing.JOptionPane.showMessageDialog(this, "Patient Name missing", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                        } else {
                            pstmt2.setString(2, jTextField1.getText());
                        }
                        // pstmt2.setString(2,jTextField1.getText());
                        pstmt2.setString(3, jTextField2.getText());
                        if (jTextField362.getText().equals("")) {
                            javax.swing.JOptionPane.showMessageDialog(this, "Doctor's Name missing", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                        } else {

                            pstmt2.setString(4, jTextField362.getText());
                        }
                        pstmt2.setString(5, jTable111.getValueAt(i, 0).toString());
                        pstmt2.setDouble(6, 1);
                        pstmt2.setDouble(7, java.lang.Double.valueOf(jTable111.getValueAt(i, 1).toString()));
                        pstmt2.setString(8, jTable111.getValueAt(i, 7).toString());
                        pstmt2.setDate(9, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()));
                        pstmt2.setString(10, billNo);
                        pstmt2.setString(11, User);
                        if (jTextField2.getText().startsWith("Scheme")) {
                            pstmt2.setBoolean(12, true);
                        } else {
                            pstmt2.setBoolean(12, false);
                        }
                        pstmt2.setString(13, glAcc);
                        pstmt2.setString(14, billNo);
                        pstmt2.setString(15, jTable111.getValueAt(i, 2).toString());
                        pstmt2.setBoolean(16, false);
                        pstmt2.setBoolean(17, false);
                        pstmt2.setObject(18, jTable111.getValueAt(i, 3).toString());
                        pstmt2.setString(19, jTable111.getValueAt(i, 4).toString());
                        pstmt2.setTimestamp(20, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                        pstmt2.setObject(21, jTable111.getValueAt(i, 5).toString());
                        pstmt2.setString(22, rank);
                        pstmt2.setString(23, jTextField3.getText().toString());
                        pstmt2.setString(24, jTextPane121.getText().toString());
                        pstmt2.setString(25, "DENTAL");
                        pstmt2.setString(26, Diagnosis);
                        pstmt2.setString(27, Gender);
                        pstmt2.executeUpdate();


                        java.sql.Statement pstB = connectDB.createStatement();
                        java.sql.ResultSet rsB = pstB.executeQuery("SELECT transfer_price,units,department FROM st_stock_prices WHERE product_id = '" + jTable111.getValueAt(i, 7) + "' and gl_code =  '" + jTable111.getValueAt(i, 6) + "'");

                        while (rsB.next()) {
                            price = rsB.getDouble(1);
                            units = rsB.getString(2);
                            Store = rsB.getString(3);
                        }
                        java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("INSERT INTO hp_pharmacy VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                        pstmt1.setString(1, jTextField36.getText());
                        pstmt1.setString(2, jTextField1.getText());
                        pstmt1.setDouble(4, java.lang.Double.valueOf(jTable111.getValueAt(i, 1).toString()));
                        pstmt1.setDouble(3, 1);
                        pstmt1.setObject(5, jTable111.getValueAt(i, 0).toString());
                        if (jTextField2.getText().startsWith("Scheme")) {
                            pstmt1.setBoolean(6, true);
                        } else {
                            pstmt1.setBoolean(6, false);
                        }
                        //  pstmt1.setBoolean(6, false);
                        pstmt1.setDouble(7, java.lang.Double.valueOf(jTable111.getValueAt(i, 1).toString()));
                        pstmt1.setObject(8, jTable111.getValueAt(i, 6).toString());
                        pstmt1.setString(9, "" + transNo);
                        pstmt1.setObject(10, jTextField362.getText());
                        pstmt1.setBoolean(11, false);
                        pstmt1.setString(12, units);
                        pstmt1.setDate(13, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()));
                        pstmt1.setObject(14, Store);
                        pstmt1.setString(15, "");
                        pstmt1.setString(16, jTextField2.getText());
                        pstmt1.setObject(17, jTable111.getValueAt(i, 7).toString());
                        pstmt1.setDouble(18, 0.00);
                        pstmt1.setString(19, User);
                        pstmt1.setObject(20, "");
                        pstmt1.executeUpdate();
                    }
                }


            }
            //String user = null;
            String cat = null;
            float diagnosed = 0;
            int incDays = 0;
            //  String Sex = null;
            String marital = null;

            for (int i = 0; i < jTable2.getRowCount(); i++) {
                if (jTable2.getModel().getValueAt(i, 1) != null) {
                    java.sql.Statement stm121b = connectDB.createStatement();

                    java.sql.ResultSet rset24bx = stm121b.executeQuery("SELECT COUNT(main_service) FROM hp_patient_diagnosis WHERE patient_no = '" + jTextField36.getText() + "' AND main_service = '" + jTable2.getValueAt(i, 0).toString() + "' AND date_recorded = '" + datePicker11.getDate() + "'");
                    while (rset24bx.next()) {
                        diagnosed = rset24bx.getFloat(1);
                    }
                    if (diagnosed > 0) {
                    } else {
                        String categ = "";
                        java.sql.Statement st = connectDB.createStatement();
                        java.sql.ResultSet rs = st.executeQuery("SELECT ('" + datePicker11.getDate() + "')::date-('" + datePicker11.getDate() + "')::date");
                        while (rs.next()) {
                            incDays = rs.getInt(1) + 1;
                        }

                        java.sql.Statement sts = connectDB.createStatement();
                        java.sql.ResultSet rss = sts.executeQuery("SELECT drug_time_limit FROM hp_diseases WHERE code = '" + jTable2.getValueAt(i, 0) + "'");
                        while (rss.next()) {
                            categ = rss.getString(1);
                        }
                        java.sql.PreparedStatement pstmth = connectDB.prepareStatement("INSERT INTO hp_patient_diagnosis VALUES(?,?,?,?,?, ?,?,?,?,?,?,?,?,?,?,?, ?,?,?,?,?,?,?,?,?)");
                        pstmth.setString(1, jTextField36.getText());
                        pstmth.setString(2, jTextField1.getText());
                        pstmth.setObject(3, jTable2.getValueAt(i, 0).toString());
                        pstmth.setObject(4, jTable2.getValueAt(i, 1).toString());
                        pstmth.setInt(5, 1);
                        pstmth.setString(6, jTextField362.getText());
                        pstmth.setDouble(7, 0.00);
                        pstmth.setString(8, this.jTextPane121.getText());
                        pstmth.setDate(9, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()));
                        pstmth.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()));
                        pstmth.setString(11, "Discharge");
                        pstmth.setString(12, "");
                        pstmth.setString(13, categ);
                        pstmth.setString(14, "");
                        pstmth.setString(15, "DENTAL");
                        pstmth.setString(16, this.jTextPane14.getText());
                        pstmth.setString(17, "OP");
                        pstmth.setDouble(18, java.lang.Double.valueOf(jTextField8.getText()));
                        pstmth.setString(19, Sex);
                        pstmth.setString(20, "-");
                        pstmth.setDate(21, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()));
                        pstmth.setDate(22, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()));
                        pstmth.setTimestamp(23, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                        pstmth.setString(24, User);
                        pstmth.setInt(25, incDays);
                        pstmth.executeUpdate();
                    }
                }
            }
            /* for (int i = 0; i < jTable3.getRowCount(); i++) {
            if (jTable3.getValueAt(i, 0) != null) {
            java.sql.Statement stx1 = connectDB.createStatement();
            java.sql.ResultSet rsx1 = stx1.executeQuery("SELECT COUNT(symptom) FROM hp_symptoms WHERE symptom ILIKE '" + jTable3.getValueAt(i, 0).toString() + "'");
            while (rsx1.next()) {
            
            if (rsx1.getInt(1) < 1) {
            java.sql.PreparedStatement pstmt2f = connectDB.prepareStatement("INSERT INTO hp_symptoms(symptom) VALUES (?)");
            pstmt2f.setString(1, jTable3.getValueAt(i, 0).toString());
            
            pstmt2f.executeUpdate();
            }
            }
            }
            }*/
            connectDB.commit();
            connectDB.setAutoCommit(true);
            this.jButton1.setEnabled(false);
            javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            /*  com.afrisoftech.reports.DentalResSlipPdf pol = new com.afrisoftech.reports.DentalResSlipPdf();
            pol.DentalResSlipPdf(connectDB, billNo);
             */


            this.jButton1.setEnabled(true);
            jTextPane1.setText("");
            jTextField121.setText("");

            for (int k = 0; k < jTable2.getRowCount(); k++) {
                for (int r = 0; r < jTable2.getColumnCount(); r++) {
                    jTable2.setValueAt(null, k, r);
                }
            }

            for (int k = 0; k < jTable13.getRowCount(); k++) {
                for (int r = 0; r < jTable13.getColumnCount(); r++) {
                    jTable13.setValueAt(null, k, r);
                }
            }

            for (int k = 0; k < jTable111.getRowCount(); k++) {
                for (int r = 0; r < jTable111.getColumnCount(); r++) {
                    jTable111.setValueAt(null, k, r);
                }
            }

            this.jTextPane12.setText("");
            this.jTextPane121.setText("");
            this.jTextPane14.setText("");
            this.jTextPane16.setText("");
            this.jTextPane18.setText("");
            this.jTextField7.setText("");
            this.jTextPane121.setText("");
            //  jComboBox2.setSelectedItem(null);
        } catch (java.sql.SQLException sq) {

            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }        // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jSearchTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2MouseClicked
        jTable13.setValueAt(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0), jTable13.getSelectedRow(), 0);
        jTable13.setValueAt(1, jTable13.getSelectedRow(), 1);
        jTable13.setValueAt(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1), jTable13.getSelectedRow(), 2);
        jTable13.setValueAt(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 2), jTable13.getSelectedRow(), 4);

        double floatCol2 = java.lang.Double.parseDouble(jTable13.getValueAt(jTable13.getSelectedRow(), 1).toString());

        double floatCol3 = java.lang.Double.parseDouble(jTable13.getValueAt(jTable13.getSelectedRow(), 2).toString());

        double resVal = floatCol2 * floatCol3;


        jTable13.setValueAt(new java.lang.Float(resVal), jTable13.getSelectedRow(), 3);
        double resFloat = 0.00;
        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable13, 3);
        jTextField8.setText(java.lang.String.valueOf(totalSum));

        /* for (int i = 0; i < jTable13.getRowCount(); i++) {
        
        if (jTable13.getValueAt(i, 0) != null) {//toString().compareToIgnoreCase(null) {
        
        resFloat = resFloat + Double.parseDouble(jTable13.getValueAt(i, 3));
        
        
        jTextField4.setText(java.lang.String.valueOf(resFloat));
        
        }
        }*/


        jSearchDialog2.dispose();  // Add your handling code here:
    }//GEN-LAST:event_jSearchTable2MouseClicked

    private void jButton92ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton92ActionPerformed
        jSearchDialog2.dispose();   // Add your handling code here:
    }//GEN-LAST:event_jButton92ActionPerformed

    private void jTextField1112CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1112CaretUpdate
        //if (this.jCheckBox51.isSelected()) {

        if (this.jCheckBox61.isSelected()) {

            if (jTextField1112.getCaretPosition() < 3) {

                System.out.println("Nothing");
            } else {
                jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select service_type,rate as price,gl_account as gl_code FROM pb_operating_parameters WHERE service_type ILIKE '%" + jTextField1112.getText() + "%' AND main_service ilike 'x%'  order by service_type"));



                jSearchScrollPane2.setViewportView(jSearchTable2);


            }
        } else {
            if (this.jCheckBox212.isSelected()) {
                if (jTextField1112.getCaretPosition() < 3) {

                    System.out.println("Nothing");
                } else {
                    jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select service_type,rate as price,gl_account as gl_code FROM pb_operating_parameters WHERE  service_type ILIKE '%" + jTextField1112.getText() + "%' AND main_service ILIKE 'l%'  order by service_type"));


                    jSearchScrollPane2.setViewportView(jSearchTable2);
                    System.out.println("Cannot sort out");

                }

            } else {
                if (this.jCheckBox22.isSelected()) {
                    if (jTextField1112.getCaretPosition() < 3) {

                        System.out.println("Nothing");
                    } else {
                        jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select product as service_type,selling_price as price,gl_code as gl_code,product_id FROM st_stock_prices,st_stock_item WHERE product ILIKE '%" + jTextField1112.getText() + "%' AND opd = true and product ilike description order by service_type"));


                        jSearchScrollPane2.setViewportView(jSearchTable2);
                        // System.out.println("Cannot sort out");

                    }

                } else {
                    if (jTextField1112.getCaretPosition() < 3) {

                        System.out.println("Nothing");
                    } else {
                        jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select service_type,rate as price,gl_account as gl_code FROM pb_operating_parameters WHERE service_type ILIKE '%" + jTextField1112.getText() + "%' order by service_type"));



                        jSearchScrollPane2.setViewportView(jSearchTable2);


                    }
                }

            }

        }


        /* if (this.jCheckBox42.isSelected()) {
        
        if (this.jCheckBox61.isSelected()) {
        
        
        if (jTextField112.getCaretPosition() < 2) {
        
        System.out.println("Nothing");
        } else {
        jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select service_type,rate as price,gl_account as gl_code FROM pb_operating_parameters WHERE code ILIKE '%" + jTextField112.getText() + "%' AND main_service ilike 'x%'  order by service_type LIMIT 10"));
        
        
        
        jSearchScrollPane.setViewportView(jSearchTable);
        
        
        }
        } else {
        if (this.jCheckBox212.isSelected()) {
        if (jTextField112.getCaretPosition() < 2) {
        
        System.out.println("Nothing");
        } else {
        jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select service_type,rate as price,gl_account as gl_code FROM pb_operating_parameters WHERE code ILIKE '%" + jTextField112.getText() + "%' AND main_service ILIKE 'l%'  order by service_type  LIMIT 10"));
        
        
        jSearchScrollPane.setViewportView(jSearchTable);
        System.out.println("Cannot sort out");
        
        }
        } else {
        
        
        if (jTextField112.getCaretPosition() < 2) {
        
        System.out.println("Nothing");
        } else {
        jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select service_type,rate as price,gl_account as gl_code FROM pb_operating_parameters WHERE code ILIKE '%" + jTextField112.getText() + "%' AND main_service  NOT ILIKE 'ward%'  order by service_type LIMIT 10"));
        
        
        
        jSearchScrollPane.setViewportView(jSearchTable);
        
        
        }
        }
        }
        }*
        
        jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select service_type,rate as price,gl_account as gl_code FROM pb_operating_parameters WHERE service_type ILIKE '%" + jTextField1112.getText() + "%' AND main_service ilike 'Dent%'  order by service_type"));
        
        jSearchTable2.setShowHorizontalLines(false);
        jSearchScrollPane2.setViewportView(jSearchTable2);
         */
        // Add your handling code here:
    }//GEN-LAST:event_jTextField1112CaretUpdate
    /* private void cmbox1MouseClicked() {
    
    System.out.println("Showing dialog");
    java.awt.Point point = this.jTextField361.getLocationOnScreen();
    
    jSearchDialog2.setSize(400, 200);
    jSearchDialog2.setLocation(point);
    jSearchDialog2.setVisible(true);
    }*/
    private void jSearchTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable1MouseClicked
        jTextField362.setText(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 0).toString());
        jSearchDialog1.dispose();    // Add your handling code here:
    }//GEN-LAST:event_jSearchTable1MouseClicked

    private void jButton91ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton91ActionPerformed
        jSearchDialog1.dispose();  // Add your handling code here:
    }//GEN-LAST:event_jButton91ActionPerformed

    private void jTextField1111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1111CaretUpdate
        jSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select first_name||' '||middle_name as name from pb_doctors_list where first_name||' '||middle_name ILIKE '%" + jTextField1111.getText() + "%' order by first_name||' '||middle_name"));
        jSearchTable1.setShowHorizontalLines(false);
        jSearchScrollPane1.setViewportView(jSearchTable1); // Add your handling code here:
    }//GEN-LAST:event_jTextField1111CaretUpdate

    private void searchButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton2ActionPerformed
        cmbox2MouseClicked();    // Add your handling code here:
    }//GEN-LAST:event_searchButton2ActionPerformed
    private void cmbox2MouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = this.jTextField362.getLocationOnScreen();

        jSearchDialog1.setSize(400, 200);
        jSearchDialog1.setLocation(point);
        jSearchDialog1.setVisible(true);
    }
    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked

        for (int k = 0; k < jTable2.getRowCount(); k++) {
            for (int r = 0; r < jTable2.getColumnCount(); r++) {
                jTable2.setValueAt(null, k, r);
            }
        }

        for (int k = 0; k < jTable13.getRowCount(); k++) {
            for (int r = 0; r < jTable13.getColumnCount(); r++) {
                jTable13.setValueAt(null, k, r);
            }
        }

        for (int k = 0; k < jTable111.getRowCount(); k++) {
            for (int r = 0; r < jTable111.getColumnCount(); r++) {
                jTable111.setValueAt(null, k, r);
            }
        }

        this.jTextPane12.setText("");
        this.jTextPane121.setText("");
        this.jTextPane14.setText("");
        this.jTextPane16.setText("");
        this.jTextPane18.setText("");
        jTextField1.setText("");
        jTextField36.setText("");
        //   this.jTextPane1.setText("");
        this.jButton1.setVisible(true);
        //  this.jComboBox131.setSelectedItem(null);
        jLabel7.setText("");
        // jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),0),jTable1.getSelectedRow(), 0);
        //jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),1),jTable1.getSelectedRow(), 1);
        this.jSearchDialog.dispose();
        //if(this.jCheckBox1.isSelected()){
        jTextField36.setText(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0).toString());
        jTextField1.setText(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1).toString());
        if (this.jCheckBox1.isSelected()) {
            try {

                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode from hp_patient_register where patient_no ='" + jTextField36.getText() + "'");
                while (rset1.next()) {
                    jTextField5.setText(rset1.getObject(1).toString());
                    jTextField2.setText(rset1.getObject(2).toString());
                }

                String Sex = null;

                java.sql.Statement stmt11 = connectDB.createStatement();
                java.sql.ResultSet rset11 = stmt11.executeQuery("select gender,age,department from hp_patient_visit where patient_no ='" + jTextField36.getText() + "' ORDER BY age desc LIMIT 1 ");
                while (rset11.next()) {

                    jTextField3.setText(rset11.getObject(2).toString());
                    jTextField5.setText(rset11.getObject(3).toString());

                    Sex = rset11.getObject(1).toString();

                    if (Sex.equalsIgnoreCase("Female")) {

                        this.jCheckBox6.setSelected(true);

                    } else {
                        this.jCheckBox5.setSelected(true);
                    }
                }

            } catch (java.sql.SQLException sqe) {
                sqe.printStackTrace();
                //  System.out.println("Insert not successful");
            }



        } else {
            if (jCheckBox2.isSelected()) {

                try {
                    // if(this.jCheckBox1.isSelected()){
                    java.sql.Statement stmt1 = connectDB.createStatement();
                    java.sql.ResultSet rset1 = stmt1.executeQuery("select pay_mode,category from hp_inpatient_register where patient_no ='" + jTextField36.getText() + "'");
                    while (rset1.next()) {
                        jTextField2.setText(rset1.getObject(1).toString());
                        jTextField5.setText(rset1.getObject(2).toString());
                    }


                    String Sex = null;
                    java.sql.Statement stmt11 = connectDB.createStatement();
                    java.sql.ResultSet rset11 = stmt11.executeQuery("select gender,pat_age,'IP' from hp_admission where patient_no ='" + jTextField36.getText() + "' ORDER BY age desc LIMIT 1 ");
                    while (rset11.next()) {

                        jTextField3.setText(rset11.getObject(2).toString());
                        jTextField5.setText(rset11.getObject(3).toString());

                        Sex = rset11.getObject(1).toString();

                        if (Sex.equalsIgnoreCase("Female")) {

                            this.jCheckBox6.setSelected(true);

                        } else {
                            this.jCheckBox5.setSelected(true);
                        }
                    }
                } catch (java.sql.SQLException sqe) {
                    sqe.printStackTrace();
                    //  System.out.println("Insert not successful");
                }
            }

        }

        jSearchDialog.dispose();    // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        this.jSearchDialog.dispose();      // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate
        if (this.jCheckBox1.isSelected() && this.jCheckBox31.isSelected()) {

            if (jTextField111.getCaretPosition() < 3) {
                System.out.println("Nothing");
            } else {
                jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, (upper(second_name||' '||first_name)) as name from hp_patient_register where patient_no ILIKE '%" + jTextField111.getText() + "%' and last_visit >= (select current_timestamp(0)::date -2) order by PATIENT_NO"));

                jSearchTable.setShowHorizontalLines(false);
                jSearchScrollPane.setViewportView(jSearchTable);



            }
        } else {
            if (this.jCheckBox1.isSelected() && this.jCheckBox4.isSelected()) {
                if (jTextField111.getCaretPosition() < 2) {
                    System.out.println("Nothing");
                } else {
                    jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, (upper(second_name||' '||first_name)) as name from hp_patient_register where second_name||' '||first_name ILIKE '%" + jTextField111.getText() + "%' and last_visit >= (select current_timestamp(0)::date -2) order by second_name"));

                    /*    searchRowSet.execute("SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register where second_name||' '||first_name||' '||last_name ILIKE '"+jTextField111.getText()+"%' and last_visit > current_date - 60 order by second_name");
                    
                    jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient no", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false)
                    //  new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Year of birth", false),
                    //  new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", false)
                    }));
                     */
                    jSearchTable.setShowHorizontalLines(false);
                    jSearchScrollPane.setViewportView(jSearchTable);



                }
            }
        }
        // }else{
        if (this.jCheckBox2.isSelected() && this.jCheckBox31.isSelected()) {

            // if(this.jCheckBox21.isSelected()){
            //   if( jTextField113.getCaretPosition() > 3){

            if (jTextField111.getCaretPosition() < 3) {
                System.out.println("Nothing");
            } else {
                jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, (upper(second_name||' '||first_name)) as name from hp_inpatient_register where patient_no ILIKE '%" + jTextField111.getText() + "%' order by PATIENT_NO"));

                /*   searchRowSet.execute("SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name from hp_inpatient_register where patient_no ILIKE '"+jTextField111.getText()+"%' order by second_name");
                
                jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient no", false),
                new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false)
                //   new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Year of birth", false),
                //  new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", false)
                }));
                 */
                jSearchTable.setShowHorizontalLines(false);
                jSearchScrollPane.setViewportView(jSearchTable);


            }
        } else {
            if (this.jCheckBox2.isSelected() && this.jCheckBox4.isSelected()) {
                jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, (upper(second_name||' '||first_name)) as name from hp_inpatient_register where second_name||' '||first_name ILIKE '%" + jTextField111.getText() + "%' order by second_name"));

                /*    searchRowSet.execute("SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, year_of_birth, residence from hp_inpatient_register where second_name||' '||first_name||' '||last_name ILIKE '"+jTextField111.getText()+"%' order by second_name");
                
                jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient no", false),
                new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false)
                // new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Year of birth", false),
                // new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", false)
                }));
                 */
                jSearchTable.setShowHorizontalLines(false);
                jSearchScrollPane.setViewportView(jSearchTable);


            }
        }  // Add your handling code here:
    }//GEN-LAST:event_jTextField111CaretUpdate

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        jPanel34.setVisible(false);
        jPanel72.setVisible(false);
        searchButton11Clicked();   // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed
    private void searchButton11Clicked() {

        System.out.println("Showing dialog");
        if (jCheckBox1.isSelected()) {
            // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
            java.awt.Point point = this.jTextField36.getLocationOnScreen();

            jSearchDialog.setSize(400, 200);

            jSearchDialog.setLocation(point);
            jSearchDialog.setVisible(true);
        } else if (jCheckBox2.isSelected()) {
            jSearchDialog.dispose();
            java.awt.Point point = this.jTextField36.getLocationOnScreen();

            jSearchDialog.setSize(400, 200);

            jSearchDialog.setLocation(point);
            jSearchDialog.setVisible(true);
        }

    }
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        java.util.Calendar calendar = java.util.Calendar.getInstance();

        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

        System.out.println(datenowSql1.toString());

        java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

        System.out.println(datenowSql.toString());
        //   try{
        String billNo = null;
        String transNo = null;
        String payMode = null;
        String patientAcc = null;
        String cardNo = null;
        String AccDesc = null;
        String scheme = null;
        String cardName = null;
        String isurer = null;
        String expDate = null;
        String staffNo = null;
        String glAcc = null;
        String user = null;
        String accDesc1 = null;
        String glAcc1 = null;
        String chbox = null;
        String units = null;
        String gacc = null;
        String request = null;
        int itemInt = 0;
        double price = 0.00;
        String Store = null;
        double qty = 0.00;
        String glCode = null;
        String actCode = null;
        double amount = 0.00;
        double sellPrice = 0.00;
        java.util.Date admDate = null;
        String visitid = "-";
        java.util.Date adDate = null;
        String opvisitid = "-";

        try {
            connectDB.setAutoCommit(false);
            java.sql.Statement stm12t = connectDB.createStatement();

            java.sql.Statement stm12 = connectDB.createStatement();
            java.sql.Statement stm121 = connectDB.createStatement();
            java.sql.Statement stm1211 = connectDB.createStatement();
            java.sql.Statement stm122 = connectDB.createStatement();
            java.sql.Statement stm122x = connectDB.createStatement();
            java.sql.Statement stm1 = connectDB.createStatement();

            java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");


            while (rse12.next()) {

                patientAcc = rse12.getObject(1).toString();
                AccDesc = rse12.getObject(2).toString();
            }
            java.sql.Statement stm121q = connectDB.createStatement();


            java.sql.ResultSet rse121 = stm121q.executeQuery("select distinct gl_account,main_service from pb_operating_parameters where main_service ilike 'lab%'");

            while (rse121.next()) {

                actCode = rse121.getObject(1).toString();
                glAcc = rse121.getObject(2).toString();
            }


            for (int i = 0; i < jTable1.getRowCount(); i++) {
                if (jTable1.getValueAt(i, 9) != null) {
                    if (Boolean.valueOf(jTable1.getModel().getValueAt(i, 9).toString()) == java.lang.Boolean.TRUE) {


                        java.sql.Statement ps11 = connectDB.createStatement();
                        java.sql.ResultSet rst11 = ps11.executeQuery("select nextval('lab_request'),current_user");
                        while (rst11.next()) {
                            rst11.getObject(1).toString();

                            billNo = rst11.getObject(1).toString();
                            user = rst11.getObject(2).toString();

                        }

                        request = jTable1.getValueAt(i, 7).toString();
                        if (request.startsWith("I")) {
                            java.sql.ResultSet rse12t = stm12t.executeQuery("select code,activity from pb_activity where activity_category ='PR'");

                            java.sql.Statement pst = connectDB.createStatement();
                            java.sql.ResultSet rstt = pst.executeQuery("select nextval('transaction_no_seq')");

                            while (rse12t.next()) {

                                patientAcc = rse12t.getObject(1).toString();
                                AccDesc = rse12t.getObject(2).toString();
                            }
                            while (rstt.next()) {
                                rstt.getObject(1).toString();

                                transNo = rstt.getObject(1).toString();
                            }

                            java.sql.Statement stm121t = connectDB.createStatement();

                            java.sql.Statement stm12n = connectDB.createStatement();
                            java.sql.ResultSet rse12n = stm12n.executeQuery("select adm_date from hp_inpatient_register where patient_no ='" + jTable1.getValueAt(i, 1).toString() + "'");
                            while (rse12n.next()) {
                                admDate = rse12n.getDate(1);
                            }
                            java.sql.Statement ps11w1 = connectDB.createStatement();
                            java.sql.ResultSet rst11w1 = ps11w1.executeQuery("select visit_id from hp_admission where patient_no = '" + jTable1.getValueAt(i, 1).toString() + "' and check_out = false");
                            while (rst11w1.next()) {


                                visitid = rst11w1.getObject(1).toString();
                            }


                            System.out.println(admDate);
                            // if (exp.before(date)){
                            //  if (adDate.before(admDate)){
                            //    javax.swing.JOptionPane.showMessageDialog(this, "Admission date is : " +admDate +" CHECK billing date","Date Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                            // }else{

                            if (!(jTable1.getValueAt(i, 3).toString().equals("Cash"))) {
                                java.sql.ResultSet rse1 = stm1.executeQuery("select pay_mode,account_no,description,payer,payer,expiry_date,account_no from hp_inpatient_register where patient_no ='" + jTable1.getValueAt(i, 1).toString() + "'");
                                while (rse1.next()) {
                                    payMode = dbObject.getDBObject(rse1.getObject(1), "-");
                                    cardNo = dbObject.getDBObject(rse1.getObject(2), "-");
                                    scheme = dbObject.getDBObject(rse1.getObject(3), "-");
                                    cardName = dbObject.getDBObject(rse1.getObject(4), "-");
                                    isurer = dbObject.getDBObject(rse1.getObject(5), "-");
                                    expDate = dbObject.getDBObject(rse1.getObject(6), "NULL");
                                    staffNo = dbObject.getDBObject(rse1.getObject(7), "-");
                                }
                            }

                            java.sql.ResultSet rse121t = stm121t.executeQuery("select activity from pb_activity where code ='" + actCode + "'");
                            while (rse121.next()) {

                                glAcc = rse121t.getObject(1).toString();

                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                                //1 for (int i = 0; i < jTable1.getRowCount(); i++){
                                pstmt.setString(1, jTable1.getValueAt(i, 1).toString());
                                pstmt.setObject(2, jTable1.getValueAt(i, 4).toString());
                                pstmt.setString(3, "General");
                                pstmt.setString(4, jTable1.getValueAt(i, 3).toString());
                                pstmt.setString(5, transNo);
                                pstmt.setString(7, scheme);
                                pstmt.setString(6, cardNo);
                                pstmt.setString(8, cardName);
                                pstmt.setString(9, isurer);
                                pstmt.setString(10, expDate);
                                pstmt.setString(11, "");
                                pstmt.setObject(12, jTable1.getValueAt(i, 6).toString());
                                pstmt.setString(13, "0.00");
                                pstmt.setString(14, jTable1.getValueAt(i, 0).toString());
                                pstmt.setObject(15, patientAcc);
                                pstmt.setString(16, glAcc);
                                pstmt.setObject(17, jTable1.getValueAt(i, 5).toString());
                                pstmt.setObject(18, staffNo);
                                pstmt.setBoolean(19, false);
                                pstmt.setString(20, "Billing");
                                pstmt.setBoolean(21, false);
                                pstmt.setString(22, AccDesc);
                                pstmt.setString(23, visitid);
                                pstmt.setString(24, user);
                                pstmt.setString(25, billNo);
                                pstmt.setString(26, "IP");
                                pstmt.setString(27, "'now'");
                                pstmt.setString(28, visitid);
                                pstmt.executeUpdate();


                                java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                pstmt2.setObject(1, actCode);
                                pstmt2.setString(2, glAcc);
                                pstmt2.setString(3, jTable1.getValueAt(i, 1).toString());
                                pstmt2.setString(4, jTable1.getValueAt(i, 2).toString());
                                pstmt2.setString(5, "");
                                pstmt2.setString(6, cardNo);
                                pstmt2.setString(7, cardName);
                                pstmt2.setString(8, "IP");
                                pstmt2.setString(9, jTable1.getValueAt(i, 8).toString());
                                pstmt2.setString(10, jTable1.getValueAt(i, 3).toString());
                                pstmt2.setString(11, "");
                                pstmt2.setString(12, "");
                                pstmt2.setString(13, "");
                                pstmt2.setString(14, jTable1.getValueAt(i, 4).toString());
                                pstmt2.setString(15, "Revenue");
                                pstmt2.setString(16, "0.00");
                                pstmt2.setObject(17, jTable1.getValueAt(i, 6).toString());
                                pstmt2.setString(18, jTable1.getValueAt(i, 0).toString());
                                pstmt2.setString(19, transNo);
                                pstmt2.setString(20, "false");
                                pstmt2.setString(21, "false");
                                pstmt2.setString(22, "false");
                                pstmt2.setString(23, user);
                                pstmt2.executeUpdate();


                                //}
                                //}
                                // }
                            }

                            java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request SET paid = true,collected = false where inv_no = '" + jTable1.getValueAt(jTable1.getSelectedRow(), 7).toString() + "' AND service = '" + jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString() + "'");
                            pstmt46.executeUpdate();




                        } else {
                            java.sql.Statement ps11w1 = connectDB.createStatement();
                            java.sql.ResultSet rst11w1 = ps11w1.executeQuery("select distinct slip_no from credit_acc_slip where patient_no = '" + jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString() + "' order by date desc limit 1");
                            while (rst11w1.next()) {


                                opvisitid = rst11w1.getObject(1).toString();
                            }

                            java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into hp_patient_billing values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,trim(?),?)");

                            pstmt2.setString(1, jTable1.getValueAt(i, 1).toString());

                            pstmt2.setString(2, jTable1.getValueAt(i, 2).toString());
                            pstmt2.setString(3, jTable1.getValueAt(i, 3).toString());
                            pstmt2.setString(4, "General");
                            pstmt2.setString(5, jTable1.getValueAt(i, 4).toString());
                            pstmt2.setString(6, jTable1.getValueAt(i, 5).toString());
                            pstmt2.setString(7, jTable1.getValueAt(i, 6).toString());
                            pstmt2.setObject(8, actCode);
                            pstmt2.setString(9, jTable1.getValueAt(i, 0).toString());
                            pstmt2.setString(10, billNo);

                            pstmt2.setString(11, user);
                            pstmt2.setBoolean(12, false);
                            pstmt2.setString(13, glAcc);
                            pstmt2.setString(14, billNo);
                            pstmt2.setString(15, jTable1.getValueAt(i, 7).toString());
                            pstmt2.setBoolean(16, false);
                            pstmt2.executeUpdate();
                            java.sql.Statement pstm121t = connectDB.createStatement();
                            java.sql.ResultSet rse121t = pstm121t.executeQuery("select activity from pb_activity where code ='" + actCode + "'");
                            while (rse121.next()) {

                                glAcc = rse121t.getObject(1).toString();

                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                                //1 for (int i = 0; i < jTable1.getRowCount(); i++){
                                pstmt.setString(1, jTable1.getValueAt(i, 1).toString());
                                pstmt.setObject(2, jTable1.getValueAt(i, 4).toString());
                                pstmt.setString(3, "General");
                                pstmt.setString(4, jTable1.getValueAt(i, 3).toString());
                                pstmt.setString(5, transNo);
                                pstmt.setString(7, scheme);
                                pstmt.setString(6, cardNo);
                                pstmt.setString(8, cardName);
                                pstmt.setString(9, isurer);
                                pstmt.setString(10, expDate);
                                pstmt.setString(11, "");
                                pstmt.setObject(12, jTable1.getValueAt(i, 6).toString());
                                pstmt.setString(13, "0.00");
                                pstmt.setString(14, jTable1.getValueAt(i, 0).toString());
                                pstmt.setObject(15, patientAcc);
                                pstmt.setString(16, glAcc);
                                pstmt.setObject(17, jTable1.getValueAt(i, 5).toString());
                                pstmt.setObject(18, staffNo);
                                pstmt.setBoolean(19, false);
                                pstmt.setString(20, "Billing");
                                pstmt.setBoolean(21, false);
                                pstmt.setString(22, AccDesc);
                                pstmt.setString(23, visitid);
                                pstmt.setString(24, user);
                                pstmt.setString(25, billNo);
                                pstmt.setString(26, "OP");
                                pstmt.setString(27, "'now'");
                                pstmt.setString(28, visitid);
                                pstmt.executeUpdate();


                                java.sql.PreparedStatement pstmt2v = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                pstmt2v.setObject(1, actCode);
                                pstmt2v.setString(2, glAcc);
                                pstmt2v.setString(3, jTable1.getValueAt(i, 1).toString());
                                pstmt2v.setString(4, jTable1.getValueAt(i, 2).toString());
                                pstmt2v.setString(5, "");
                                pstmt2v.setString(6, cardNo);
                                pstmt2v.setString(7, cardName);
                                pstmt2v.setString(8, "OP");
                                pstmt2v.setString(9, jTable1.getValueAt(i, 8).toString());
                                pstmt2v.setString(10, jTable1.getValueAt(i, 3).toString());
                                pstmt2v.setString(11, "");
                                pstmt2v.setString(12, "");
                                pstmt2v.setString(13, "");
                                pstmt2v.setString(14, jTable1.getValueAt(i, 4).toString());
                                pstmt2v.setString(15, "Revenue");
                                pstmt2v.setString(16, "0.00");
                                pstmt2v.setObject(17, jTable1.getValueAt(i, 6).toString());
                                pstmt2v.setString(18, jTable1.getValueAt(i, 0).toString());
                                pstmt2v.setString(19, transNo);
                                pstmt2v.setString(20, "false");
                                pstmt2v.setString(21, "false");
                                pstmt2v.setString(22, "false");
                                pstmt2v.setString(23, user);
                                pstmt2v.executeUpdate();
                            }
                            java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request SET paid = true,collected = false where inv_no = '" + jTable1.getValueAt(jTable1.getSelectedRow(), 7).toString() + "' AND service = '" + jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString() + "'");
                            pstmt46.executeUpdate();
                            // }
                        }
                    }

                }
            }

            javax.swing.JOptionPane.showMessageDialog(this, "Insert Successful", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            //}
            connectDB.commit();
            connectDB.setAutoCommit(true);

            for (int k = 0; k < jTable1.getRowCount(); k++) {
                for (int r = 0; r < jTable1.getColumnCount(); r++) {
                    jTable1.getModel().setValueAt(null, k, r);
                }
            }

        } catch (java.sql.SQLException sq) {

            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }


        // Add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

        java.util.Calendar calendar = java.util.Calendar.getInstance();

        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

        System.out.println(datenowSql1.toString());

        java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

        System.out.println(datenowSql.toString());
        //   try{
        String billNo = null;
        String transNo = null;
        String payMode = null;
        String patientAcc = null;
        String cardNo = null;
        String AccDesc = null;
        String scheme = null;
        String cardName = null;
        String isurer = null;
        String expDate = null;
        String staffNo = null;
        String glAcc = null;
        String user = null;
        String accDesc1 = null;
        String glAcc1 = null;
        String chbox = null;
        String units = null;
        String gacc = null;
        String request = null;
        int itemInt = 0;
        double price = 0.00;
        String Store = null;
        double qty = 0.00;
        String glCode = null;
        String actCode = null;
        double amount = 0.00;
        double sellPrice = 0.00;
        java.util.Date admDate = null;
        String visitid = "-";
        java.util.Date adDate = null;
        String opvisitid = "-";
        String Xrayed = null;
        jTextField36.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString());
        jTextField1.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString());
        // jTextField16.setText(jTable1.getValueAt(jTable1.getSelectedRow(),4).toString());
        // jTextField2.setText(jTable11.getValueAt(jTable11.getSelectedRow(),3).toString());

//        jTextField361.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString());
        jTextField362.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 8).toString());
        jTextField8.setText(jTable1.getValueAt(jTable1.getSelectedRow(), 6).toString());




        try {

            java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rset1 = stmt1.executeQuery("select category,department,sex from hp_patient_register where patient_no ='" + jTextField36.getText() + "'");
            while (rset1.next()) {
                jTextField5.setText(rset1.getObject(1).toString());
                jTextField2.setText(rset1.getObject(2).toString());

                Xrayed = rset1.getObject(3).toString();
            }

            if (Xrayed.equalsIgnoreCase("female")) {

                this.jCheckBox6.setSelected(true);

            } else {
                this.jCheckBox5.setSelected(true);
            }


        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }
        try {
            connectDB.setAutoCommit(false);
            java.sql.Statement stm12t = connectDB.createStatement();

            java.sql.Statement stm12 = connectDB.createStatement();
            java.sql.Statement stm121 = connectDB.createStatement();
            java.sql.Statement stm1211 = connectDB.createStatement();
            java.sql.Statement stm122 = connectDB.createStatement();
            java.sql.Statement stm122x = connectDB.createStatement();
            java.sql.Statement stm1 = connectDB.createStatement();

            java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");


            while (rse12.next()) {

                patientAcc = rse12.getObject(1).toString();
                AccDesc = rse12.getObject(2).toString();
            }
            java.sql.Statement stm121q = connectDB.createStatement();


            java.sql.ResultSet rse121 = stm121q.executeQuery("select distinct gl_account,main_service from pb_operating_parameters where main_service ilike 'lab%'");

            while (rse121.next()) {

                actCode = rse121.getObject(1).toString();
                glAcc = rse121.getObject(2).toString();
            }

            int i = jTable1.getSelectedRow();
            // for (int i = 0; i < jTable1.getRowCount(); i++){
            if (jTable1.getValueAt(i, 9) != null) {
                if (Boolean.valueOf(jTable1.getModel().getValueAt(i, 9).toString()) == java.lang.Boolean.TRUE) {

                    System.out.println("Count" + i);
                    java.sql.Statement ps11 = connectDB.createStatement();
                    java.sql.ResultSet rst11 = ps11.executeQuery("select nextval('lab_request'),current_user");
                    while (rst11.next()) {
                        rst11.getObject(1).toString();

                        billNo = rst11.getObject(1).toString();
                        user = rst11.getObject(2).toString();

                    }

                    request = jTable1.getValueAt(i, 7).toString();
                    if (request.startsWith("I")) {
                        java.sql.ResultSet rse12t = stm12t.executeQuery("select code,activity from pb_activity where activity_category ='PR'");

                        java.sql.Statement pst = connectDB.createStatement();
                        java.sql.ResultSet rstt = pst.executeQuery("select nextval('transaction_no_seq')");

                        while (rse12t.next()) {

                            patientAcc = rse12t.getObject(1).toString();
                            AccDesc = rse12t.getObject(2).toString();
                        }
                        while (rstt.next()) {
                            rstt.getObject(1).toString();

                            transNo = rstt.getObject(1).toString();
                        }

                        java.sql.Statement stm121t = connectDB.createStatement();

                        java.sql.Statement stm12n = connectDB.createStatement();
                        java.sql.ResultSet rse12n = stm12n.executeQuery("select adm_date from hp_inpatient_register where patient_no ='" + jTable1.getValueAt(i, 1).toString() + "'");
                        while (rse12n.next()) {
                            admDate = rse12n.getDate(1);
                        }
                        java.sql.Statement ps11w1 = connectDB.createStatement();
                        java.sql.ResultSet rst11w1 = ps11w1.executeQuery("select visit_id from hp_admission where patient_no = '" + jTable1.getValueAt(i, 1).toString() + "' and check_out = false");
                        while (rst11w1.next()) {


                            visitid = rst11w1.getObject(1).toString();
                        }


                        System.out.println(admDate);
                        // if (exp.before(date)){
                        //  if (adDate.before(admDate)){
                        //    javax.swing.JOptionPane.showMessageDialog(this, "Admission date is : " +admDate +" CHECK billing date","Date Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                        // }else{

                        if (!(jTable1.getValueAt(i, 3).toString().equals("Cash"))) {
                            java.sql.ResultSet rse1 = stm1.executeQuery("select pay_mode,account_no,description,payer,payer,expiry_date,account_no from hp_inpatient_register where patient_no ='" + jTable1.getValueAt(i, 1).toString() + "'");
                            while (rse1.next()) {
                                payMode = dbObject.getDBObject(rse1.getObject(1), "-");
                                cardNo = dbObject.getDBObject(rse1.getObject(2), "-");
                                scheme = dbObject.getDBObject(rse1.getObject(3), "-");
                                cardName = dbObject.getDBObject(rse1.getObject(4), "-");
                                isurer = dbObject.getDBObject(rse1.getObject(5), "-");
                                expDate = dbObject.getDBObject(rse1.getObject(6), "NULL");
                                staffNo = dbObject.getDBObject(rse1.getObject(7), "-");
                            }
                        }

                        java.sql.ResultSet rse121t = stm121t.executeQuery("select activity from pb_activity where code ='" + actCode + "'");
                        while (rse121.next()) {

                            glAcc = rse121t.getObject(1).toString();
                        }
                        /* java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                        //1 for (int i = 0; i < jTable1.getRowCount(); i++){
                        pstmt.setString(1, jTable1.getValueAt(i, 1).toString());
                        pstmt.setObject(2, jTable1.getValueAt(i, 4).toString());
                        pstmt.setString(3, "General");
                        pstmt.setString(4, jTable1.getValueAt(i, 3).toString());
                        pstmt.setString(5, transNo);
                        pstmt.setString(7, scheme);
                        pstmt.setString(6, cardNo);
                        pstmt.setString(8, cardName);
                        pstmt.setString(9, isurer);
                        pstmt.setDate(10, null);
                        pstmt.setString(11, "");
                        pstmt.setDouble(12, java.lang.Double.valueOf(jTable1.getValueAt(i, 6).toString()));
                        pstmt.setDouble(13, 0.00);
                        pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(jTable1.getValueAt(i, 0).toString())));
                        pstmt.setObject(15, patientAcc);
                        pstmt.setString(16, glAcc);
                        pstmt.setDouble(17, java.lang.Double.valueOf(jTable1.getValueAt(i, 5).toString()));
                        pstmt.setObject(18, staffNo);
                        pstmt.setBoolean(19, false);
                        pstmt.setString(20, "Billing");
                        pstmt.setBoolean(21, false);
                        pstmt.setString(22, AccDesc);
                        pstmt.setString(23, visitid);
                        pstmt.setString(24, user);
                        pstmt.setString(25, billNo);
                        pstmt.setString(26, "IP");
                        pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                        pstmt.setString(28, visitid);
                        pstmt.executeUpdate();
                        
                        
                        java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("INSERT INTO ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                        pstmt2.setObject(1, actCode);
                        pstmt2.setString(2, glAcc);
                        pstmt2.setString(3, jTable1.getValueAt(i, 1).toString());
                        pstmt2.setString(4, jTable1.getValueAt(i, 2).toString());
                        pstmt2.setString(5, "");
                        pstmt2.setString(6, cardNo);
                        pstmt2.setString(7, cardName);
                        pstmt2.setString(8, "IP");
                        pstmt2.setString(9, jTable1.getValueAt(i, 8).toString());
                        pstmt2.setString(10, jTable1.getValueAt(i, 3).toString());
                        pstmt2.setString(11, "");
                        pstmt2.setString(12, "");
                        pstmt2.setString(13, "");
                        pstmt2.setString(14, jTable1.getValueAt(i, 4).toString());
                        pstmt2.setString(15, "Revenue");
                        pstmt2.setDouble(16, 0.00);
                        pstmt2.setDouble(17, java.lang.Double.valueOf(jTable1.getValueAt(i, 6).toString()));
                        pstmt2.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(jTable1.getValueAt(i, 0).toString())));
                        pstmt2.setString(19, transNo);
                        pstmt2.setBoolean(20, false);
                        pstmt2.setBoolean(21, false);
                        pstmt2.setBoolean(22, false);
                        pstmt2.setString(23, user);
                        pstmt2.executeUpdate();
                        
                        
                        //}
                        //}
                        // }
                         */

                        java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request SET paid = true,collected = true where inv_no = '" + jTable1.getValueAt(jTable1.getSelectedRow(), 7).toString() + "' AND service = '" + jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString() + "'");
                        pstmt46.executeUpdate();




                    } else {

                        /* java.sql.Statement ps11w1 = connectDB.createStatement();
                        java.sql.ResultSet rst11w1 = ps11w1.executeQuery("select distinct slip_no,date from credit_acc_slip where patient_no = '" + jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString() + "' order by date desc limit 1");
                        while (rst11w1.next()) {
                        
                        
                        opvisitid = rst11w1.getObject(1).toString();
                        }
                        
                        java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("INSERT INTO hp_patient_billing values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,trim(?))");
                        
                        pstmt2.setString(1, jTable1.getValueAt(i, 1).toString());
                        
                        pstmt2.setString(2, jTable1.getValueAt(i, 2).toString());
                        pstmt2.setString(3, jTable1.getValueAt(i, 3).toString());
                        pstmt2.setString(4, "General");
                        pstmt2.setString(5, jTable1.getValueAt(i, 4).toString());
                        pstmt2.setDouble(6, java.lang.Double.valueOf(jTable1.getValueAt(i, 5).toString()));
                        pstmt2.setDouble(7, java.lang.Double.valueOf(jTable1.getValueAt(i, 6).toString()));
                        pstmt2.setObject(8, actCode);
                        pstmt2.setDate(9, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(jTable1.getValueAt(i, 0).toString())));
                        pstmt2.setString(10, opvisitid);
                        
                        pstmt2.setString(11, user);
                        pstmt2.setBoolean(12, false);
                        pstmt2.setString(13, glAcc);
                        pstmt2.setString(14, billNo);
                        pstmt2.setString(15, jTable1.getValueAt(i, 7).toString());
                        pstmt2.executeUpdate();
                        java.sql.Statement pstm121t = connectDB.createStatement();
                        java.sql.ResultSet rse121t = pstm121t.executeQuery("select activity from pb_activity where code ='" + actCode + "'");
                        while (rse121.next()) {
                        
                        glAcc = rse121t.getObject(1).toString();
                        }
                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                        //1 for (int i = 0; i < jTable1.getRowCount(); i++){
                        pstmt.setString(1, jTable1.getValueAt(i, 1).toString());
                        pstmt.setObject(2, jTable1.getValueAt(i, 4).toString());
                        pstmt.setString(3, "General");
                        pstmt.setString(4, jTable1.getValueAt(i, 3).toString());
                        pstmt.setString(5, transNo);
                        pstmt.setString(7, scheme);
                        pstmt.setString(6, cardNo);
                        pstmt.setString(8, cardName);
                        pstmt.setString(9, isurer);
                        pstmt.setDate(10, null);
                        pstmt.setString(11, "");
                        pstmt.setDouble(12, java.lang.Double.valueOf(jTable1.getValueAt(i, 6).toString()));
                        pstmt.setDouble(13, 0.00);
                        pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(jTable1.getValueAt(i, 0).toString())));
                        pstmt.setObject(15, patientAcc);
                        pstmt.setString(16, glAcc);
                        pstmt.setDouble(17, java.lang.Double.valueOf(jTable1.getValueAt(i, 5).toString()));
                        pstmt.setObject(18, staffNo);
                        pstmt.setBoolean(19, false);
                        pstmt.setString(20, "Billing");
                        pstmt.setBoolean(21, false);
                        pstmt.setString(22, AccDesc);
                        pstmt.setString(23, opvisitid);
                        pstmt.setString(24, user);
                        pstmt.setString(25, billNo);
                        pstmt.setString(26, "OP");
                        pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                        pstmt.setString(28, opvisitid);
                        pstmt.executeUpdate();
                        
                        
                        java.sql.PreparedStatement pstmt2v = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                        pstmt2v.setObject(1, actCode);
                        pstmt2v.setString(2, glAcc);
                        pstmt2v.setString(3, jTable1.getValueAt(i, 1).toString());
                        pstmt2v.setString(4, jTable1.getValueAt(i, 2).toString());
                        pstmt2v.setString(5, "");
                        pstmt2v.setString(6, cardNo);
                        pstmt2v.setString(7, cardName);
                        pstmt2v.setString(8, "OP");
                        pstmt2v.setString(9, jTable1.getValueAt(i, 8).toString());
                        pstmt2v.setString(10, jTable1.getValueAt(i, 3).toString());
                        pstmt2v.setString(11, "");
                        pstmt2v.setString(12, "");
                        pstmt2v.setString(13, "");
                        pstmt2v.setString(14, jTable1.getValueAt(i, 4).toString());
                        pstmt2v.setString(15, "Revenue");
                        pstmt2v.setDouble(16, 0.00);
                        pstmt2v.setDouble(17, java.lang.Double.valueOf(jTable1.getValueAt(i, 6).toString()));
                        pstmt2v.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(jTable1.getValueAt(i, 0).toString())));
                        pstmt2v.setString(19, transNo);
                        pstmt2v.setBoolean(20, false);
                        pstmt2v.setBoolean(21, false);
                        pstmt2v.setBoolean(22, false);
                        pstmt2v.setString(23, user);
                        pstmt2v.executeUpdate();
                        //}*/
                        java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request SET paid = true,collected = true where inv_no = '" + jTable1.getValueAt(jTable1.getSelectedRow(), 7).toString() + "' AND service = '" + jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString() + "'");
                        pstmt46.executeUpdate();
                        // }
                    }
                }

            }
            // }

            javax.swing.JOptionPane.showMessageDialog(this, "Insert Successful", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            //}
            connectDB.commit();
            connectDB.setAutoCommit(true);

            for (int k = 0; k < jTable1.getRowCount(); k++) {
                for (int r = 0; r < jTable1.getColumnCount(); r++) {
                    jTable1.getModel().setValueAt(null, k, r);
                }
            }

        } catch (java.sql.SQLException sq) {

            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_jTable1MouseClicked
    private void searchButtonClicked() {
        /*      System.out.println("Showing dialog");
        
        java.awt.Point point = this.jTextField7.getLocationOnScreen();
        
        jSearchDialog11.setSize(400,200);
        
        jSearchDialog11.setLocation(point);
        
        jSearchDialog11.setVisible(true);
         */
    }
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        for (int k = 0; k < jTable1.getRowCount(); k++) {
            for (int r = 0; r < jTable1.getColumnCount(); r++) {
                jTable1.getModel().setValueAt(null, k, r);
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed
    private void cmbox1MouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane14.getLocationOnScreen();
        jSearchDialog3.setSize(600, 200);
        jSearchDialog3.setLocation(point);
        jSearchDialog3.setVisible(true);
    }
    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        /*if (jTable1.getSelectedColumn() == 3) {
        
        this.cmbox2MouseClicked();
        }
         */
        if (jTable2.getSelectedColumn() == 0) {

            this.cmbox1MouseClicked();
        }
        /*
        if (jTable1.getSelectedColumn() == 2) {
        
        this.cmbox3MouseClicked();
        }
         */
        // Add your handling code here:
}//GEN-LAST:event_jTable2MouseClicked
    private void cmboxMouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane12.getLocationOnScreen();
        jSearchDialog2.setSize(600, 200);
        jSearchDialog2.setLocation(point);
        jSearchDialog2.setVisible(true);
    }
    private void jTable13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable13MouseClicked
        if (jTable13.getSelectedColumn() == 0) {

            this.cmboxMouseClicked();
        }    // Add your handling code here:
}//GEN-LAST:event_jTable13MouseClicked

    private void jTextField1113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1113CaretUpdate


        // if (jCheckBox51.isSelected()) {
        if (jTextField1113.getCaretPosition() > 3) {
            jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT (upper(disease_name)) as name,code from hp_diseases where disease_name ILIKE '%" + jTextField1113.getText() + "%' ORDER BY disease_name  LIMIT 12"));

            jSearchTable3.setShowHorizontalLines(false);
            jSearchScrollPane3.setViewportView(jSearchTable3);
        }
        /*} else {
        if (jTextField1112.getCaretPosition() > 2) {
        jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT (upper(disease_name)) as name,code from hp_diseases where code ILIKE '" + jTextField1112.getText() + "%' ORDER BY code"));
        
        jSearchTable3.setShowHorizontalLines(false);
        jSearchScrollPane3.setViewportView(jSearchTable3);
        }
        }*/

        // Add your handling code here:
}//GEN-LAST:event_jTextField1113CaretUpdate

    private void jSearchTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable3MouseClicked

        jTable2.setValueAt(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 0), jTable2.getSelectedRow(), 1);
        jTable2.setValueAt(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 1), jTable2.getSelectedRow(), 0);
        jSearchDialog3.dispose();
        jTextField1112.setText("");
        /* int CountNo = 1;
        
        jTable1.setValueAt(""+CountNo,jTable1.getSelectedRow(), 1);
         */
        // Add your handling code here:
}//GEN-LAST:event_jSearchTable3MouseClicked

    private void jSearchTable3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable3MouseEntered
        // TODO add your handling code here:
}//GEN-LAST:event_jSearchTable3MouseEntered

    private void jButton93ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton93ActionPerformed
        jSearchDialog3.dispose();  // Add your handling code here:
}//GEN-LAST:event_jButton93ActionPerformed

    private void jTable13KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable13KeyReleased
        if (jTable13.getModel().getValueAt(jTable13.getSelectedRow(), 1) != null) {
            if (jTable13.getSelectedColumn() == jTable13.getSelectedColumn()) {
                float qty = java.lang.Float.parseFloat(jTable13.getValueAt(jTable13.getSelectedRow(), 1).toString());
                float price = java.lang.Float.parseFloat(jTable13.getValueAt(jTable13.getSelectedRow(), 2).toString());
                float total = qty * price;
                jTable13.setValueAt(total, jTable13.getSelectedRow(), 3);
                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable13, 3);
                jTextField8.setText(java.lang.String.valueOf(totalSum));
            }

        }        // TODO add your handling code here:
    }//GEN-LAST:event_jTable13KeyReleased

    private void jCheckBox15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox15ActionPerformed
        this.jPanel34.setVisible(true);
        this.jPanel72.setVisible(false);
        // this.jPanel82.setVisible(false);
        for (int k = 0; k < jTable111.getRowCount(); k++) {
            for (int r = 0; r < jTable111.getColumnCount(); r++) {
                jTable111.setValueAt(null, k, r);
            }
        }
        // Add your handling code here:
}//GEN-LAST:event_jCheckBox15ActionPerformed

    private void jCheckBox212ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox212ActionPerformed
        this.jPanel34.setVisible(true);
        this.jPanel72.setVisible(false);
        this.jPanel82.setVisible(false);
        for (int k = 0; k < jTable111.getRowCount(); k++) {
            for (int r = 0; r < jTable111.getColumnCount(); r++) {
                jTable111.setValueAt(null, k, r);
            }
        }
        // Add your handling code here:
}//GEN-LAST:event_jCheckBox212ActionPerformed

    private void jCheckBox22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox22ActionPerformed
        this.jPanel72.setVisible(true);
        this.jPanel34.setVisible(false);
        this.jPanel82.setVisible(false);
        for (int k = 0; k < jTable13.getRowCount(); k++) {
            for (int r = 0; r < jTable13.getColumnCount(); r++) {
                jTable13.setValueAt(null, k, r);
            }
        }

        // Add your handling code here:
}//GEN-LAST:event_jCheckBox22ActionPerformed

    private void jCheckBox61ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox61ActionPerformed
        this.jPanel82.setVisible(true);
        this.jPanel34.setVisible(true);
        this.jPanel72.setVisible(false);
        for (int k = 0; k < jTable111.getRowCount(); k++) {
            for (int r = 0; r < jTable111.getColumnCount(); r++) {
                jTable111.setValueAt(null, k, r);
            }
        }
        // Add your handling code here:
}//GEN-LAST:event_jCheckBox61ActionPerformed
    private void cmboxMouseClickedd() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane12.getLocationOnScreen();
        jSearchDialog4.setSize(600, 200);
        jSearchDialog4.setLocation(point);
        jSearchDialog4.setVisible(true);
    }
    private void jTable111MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable111MouseClicked
        if (jTable111.getSelectedColumn() == 0) {

            this.cmboxMouseClickedd();
        }  // Add your handling code here:
}//GEN-LAST:event_jTable111MouseClicked

    private void jTable111KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable111KeyReleased
        if (jTable111.getModel().getValueAt(jTable111.getSelectedRow(), 1) != null) {
            if (jTable111.getSelectedColumn() == jTable111.getSelectedColumn()) {
                float qty = 1;
                float price = java.lang.Float.parseFloat(jTable111.getValueAt(jTable111.getSelectedRow(), 1).toString());
                float total = qty * price;
                jTable111.setValueAt(total, jTable111.getSelectedRow(), 1);
                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable111, 1);
                jTextField8.setText(java.lang.String.valueOf(totalSum));
            }

        }       // TODO add your handling code here:
}//GEN-LAST:event_jTable111KeyReleased

    private void jTextField112CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField112CaretUpdate
        // if (this.jCheckBox42.isSelected()) {

        if (jTextField112.getCaretPosition() < 3) {

            System.out.println("Nothing");
        } else {
            jSearchTable4.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select product as service_type,selling_price as price,gl_code as gl_code,product_id FROM st_stock_prices,st_stock_item WHERE product_id ILIKE '%" + jTextField112.getText() + "%' AND opd = true and product ilike description order by service_type"));
            //  select product as service_type,selling_price as price,gl_code FROM st_stock_prices WHERE product ILIKE '%"+jTextField11.getText()+"%' AND department ilike '"+jComboBox1.getSelectedItem()+"%' order by service_type


            jSearchScrollPane4.setViewportView(jSearchTable4);


        }
        // } else {
        if (jTextField112.getCaretPosition() < 3) {

            System.out.println("Nothing");
        } else {
            jSearchTable4.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select product as service_type,selling_price as price,gl_code,product_id FROM st_stock_prices,st_stock_item WHERE product ILIKE '%" + jTextField112.getText() + "%'  and opd = true and product ilike description order by service_type"));


            jSearchScrollPane4.setViewportView(jSearchTable4);
            System.out.println("Cannot sort out");

            // }
        }/// Add your handling code here:
}//GEN-LAST:event_jTextField112CaretUpdate

    private void jSearchTable4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable4MouseClicked
        jTable111.setValueAt(jSearchTable4.getValueAt(jSearchTable4.getSelectedRow(), 0), jTable111.getSelectedRow(), 0);
        // jTable11.setValueAt(1,jTable11.getSelectedRow(), 4);
        // jTable11.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(),2),jTable11.getSelectedRow(), 5);
        jTable111.setValueAt(jSearchTable4.getValueAt(jSearchTable4.getSelectedRow(), 1), jTable111.getSelectedRow(), 1);
        jTable111.setValueAt(jSearchTable4.getValueAt(jSearchTable4.getSelectedRow(), 2), jTable111.getSelectedRow(), 6);
        jTable111.setValueAt(jSearchTable4.getValueAt(jSearchTable4.getSelectedRow(), 3), jTable111.getSelectedRow(), 7);

        //jTextField10.setText(jSearchTable4.getValueAt(jSearchTable4.getSelectedRow(), 2).toString());

        jSearchDialog4.dispose();
        int i = jTable111.getSelectedRow();
        try {


            java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rset1 = stmt1.executeQuery("select admin_mode,genre,days,strength from st_stock_item where description ilike '" + jTable111.getValueAt(i, 0) + "'");
            while (rset1.next()) {
                jTable111.setValueAt(rset1.getObject(1), i, 2);
                jTable111.setValueAt(rset1.getObject(2), i, 3);
                jTable111.setValueAt(rset1.getObject(3), i, 4);
                jTable111.setValueAt(rset1.getObject(4), i, 5);
            }

        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }

        /*for (int k = 0; k < jSearchTable1.getRowCount(); k++) {
        for (int r = 0; r < jSearchTable1.getColumnCount(); r++) {
        jSearchTable1.setValueAt(null, k, r);
        }
        }*/

        jTextField112.setText("");  // Add your handling code here:
}//GEN-LAST:event_jSearchTable4MouseClicked

    private void jButton911ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton911ActionPerformed
        jSearchDialog4.dispose();  // Add your handling code here:
}//GEN-LAST:event_jButton911ActionPerformed

    private void jButton63ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton63ActionPerformed
        if (this.jPanel34.isVisible()) {
            int rows2Delete = jTable13.getSelectedRowCount();

            int[] selectedRows = jTable13.getSelectedRows();

            if (rows2Delete < 1) {

                java.awt.Toolkit.getDefaultToolkit().beep();

                javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

            } else {

                if (rows2Delete > 1) {

                    for (int i = 0; i < selectedRows.length; i++) {



                        javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable13.getModel();

                        defTableModel.removeRow(selectedRows[i]);

                    }



                } else {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable13.getModel();

                    defTableModel.removeRow(jTable13.getSelectedRow());
                }
            }

//            tableModelTableChanged();
        } else {

            int rows2Delete = jTable111.getSelectedRowCount();

            int[] selectedRows = jTable111.getSelectedRows();

            if (rows2Delete < 1) {

                java.awt.Toolkit.getDefaultToolkit().beep();

                javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

            } else {

                if (rows2Delete > 1) {

                    for (int i = 0; i < selectedRows.length; i++) {



                        javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable111.getModel();

                        defTableModel.removeRow(selectedRows[i]);

                    }



                } else {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable111.getModel();

                    defTableModel.removeRow(jTable111.getSelectedRow());
                }
            }

//            tableModelTableChanged();


        }


        int rows2Delete = jTable2.getSelectedRowCount();

        int[] selectedRows = jTable2.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            //javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {



                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable2.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }



            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable2.getModel();

                defTableModel.removeRow(jTable2.getSelectedRow());
            }
        }


        /*    int rows2Delete3 = jTable3.getSelectedRowCount();
        
        int[] selectedRows3 = jTable3.getSelectedRows();
        
        if (rows2Delete3 < 1) {
        
        //java.awt.Toolkit.getDefaultToolkit().beep();
        
        //javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");
        } else {
        
        if (rows2Delete3 > 1) {
        
        for (int i = 0; i < selectedRows3.length; i++) {
        
        
        
        javax.swing.table.DefaultTableModel defTableModel3 = (javax.swing.table.DefaultTableModel) jTable3.getModel();
        
        defTableModel3.removeRow(selectedRows3[i]);
        
        }
        
        
        
        } else {
        
        javax.swing.table.DefaultTableModel defTableModel3 = (javax.swing.table.DefaultTableModel) jTable3.getModel();
        
        defTableModel3.removeRow(jTable3.getSelectedRow());
        }
        }
         */

        // Add your handling code here:
}//GEN-LAST:event_jButton63ActionPerformed

    private void jComboBox1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jComboBox1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1KeyReleased

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        com.afrisoftech.laboratory.PatientcardPdf policy = new com.afrisoftech.laboratory.PatientcardPdf();

        policy.PatientcardPdf(connectDB, datePicker11.getDate(), datePicker11.getDate(), jTextField36.getText());

        // Add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed
    public void tableModelTableChanged(javax.swing.event.TableModelEvent evt) {
        /*
        // double totals = 0.00;
        double totals = Double.parseDouble(jTextField1.getText());
        int i = 0;
        
        for (int j = 0; j < jTable1.getRowCount(); j++) {
        
        System.out.println(jTable1.getModel().getValueAt(j, 4).toString());
        
        if (Boolean.valueOf(jTable1.getModel().getValueAt(j, 4).toString()) == java.lang.Boolean.FALSE) {
        
        totals = totals - Double.parseDouble(jTable1.getModel().getValueAt(j, 3).toString());
        
        i++;
        }
        }
        
        jTextField1.setText(Double.toString(totals));
        
        //   jTextField2.setText(Integer.toString(i));
        
        System.out.println(totals);
        
        System.out.println(i);
        
        System.out.println("This table has changed");
         */
    }

    private void populateTable1(java.lang.String patient_no) {
    }

    public void run() {

        while (getList) {

            runGetListThread();

            try {

                Thread.currentThread().sleep(10000);

            } catch (java.lang.InterruptedException IntExec) {

                javax.swing.JOptionPane.showMessageDialog(this, IntExec.getMessage(), "Interruption Error!", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

            // getList = false;

        }

    }

    public void runGetListThread() {

        int j = 0;
        int i = 0;
        int n = 0;
        int patNo = 0;
        try {

            java.sql.Statement stmtTable11 = connectDB.createStatement();

            // java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select date,patient_no,name,payment,'false' as bill from hp_patient_visit where transaction_type ilike 'reg%' and date = current_date  ORDER BY date");
            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("select distinct count(patient_no) from hp_patient_billing where revenue_code ilike 'dent%' and paid = false AND collected = false and trans_date >= (select current_timestamp(0)::date -2) ");

            while (rsetTable11.next()) {
                patNo = rsetTable11.getInt(1);

            }

            java.sql.Statement stmtTable1 = connectDB.createStatement();

            java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select trans_date,patient_no,patient_name,payment_mode,service,quantity,amount,inv_no,doctor,'false' as bill,bed_no,time_due from pb_doctors_request where revenue_code ilike 'den%' and paid = true AND collected = false and trans_date >= (select current_timestamp(0)::date -2) ORDER BY trans_date asc");


            while (rsetTable1.next()) {

                jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                jTable1.setValueAt(rsetTable1.getObject(2), i, 1);
                jTable1.setValueAt(rsetTable1.getObject(3), i, 2);
                jTable1.setValueAt(rsetTable1.getObject(4), i, 3);
                jTable1.setValueAt(rsetTable1.getObject(5), i, 4);
                jTable1.setValueAt(rsetTable1.getObject(6), i, 5);
                jTable1.setValueAt(rsetTable1.getObject(7), i, 6);
                jTable1.setValueAt(rsetTable1.getObject(8), i, 7);
                jTable1.setValueAt(rsetTable1.getObject(9), i, 8);
                jTable1.setValueAt(java.lang.Boolean.valueOf(false), i, 9);
                jTable1.setValueAt(rsetTable1.getObject(11), i, 10);
                jTable1.setValueAt(rsetTable1.getObject(12), i, 11);


                i++;

            }

            //}




        } catch (java.sql.SQLException sqlExec) {

            sqlExec.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
        if (patNo > 5) {

            this.jLabel1.setText("Queue Long '" + patNo + "' Patients Are Waiting");
            this.jLabel1.setForeground(new java.awt.Color(255, 0, 51));
        } else {
            this.jLabel1.setText("Queue Going Smoothly Only '" + patNo + "' Patients Waiting");
            this.jLabel1.addNotify();


            this.jLabel1.setForeground(new java.awt.Color(51, 51, 255));
        }





    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private com.afrisoftech.lib.DatePicker datePicker11;
    private com.afrisoftech.lib.DatePicker datePicker111;
    private com.afrisoftech.lib.DatePicker datePicker2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton jButton32;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton41;
    private javax.swing.JButton jButton42;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton63;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButton91;
    private javax.swing.JButton jButton911;
    private javax.swing.JButton jButton92;
    private javax.swing.JButton jButton93;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox15;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox212;
    private javax.swing.JCheckBox jCheckBox22;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox31;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox61;
    private javax.swing.JCheckBox jCheckBox71;
    private javax.swing.JCheckBox jCheckBox81;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel113;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel121;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel131;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel211;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel62;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel72;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel82;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JDialog jSearchDialog1;
    private javax.swing.JDialog jSearchDialog2;
    private javax.swing.JDialog jSearchDialog3;
    private javax.swing.JDialog jSearchDialog4;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jSearchPanel1;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JPanel jSearchPanel3;
    private javax.swing.JPanel jSearchPanel4;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane1;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JScrollPane jSearchScrollPane3;
    private javax.swing.JScrollPane jSearchScrollPane4;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTable jSearchTable1;
    private javax.swing.JTable jSearchTable2;
    private javax.swing.JTable jSearchTable3;
    private javax.swing.JTable jSearchTable4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable11;
    private javax.swing.JTable jTable111;
    private javax.swing.JTable jTable13;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JTextField jTextField1111;
    private javax.swing.JTextField jTextField1112;
    private javax.swing.JTextField jTextField1113;
    private javax.swing.JTextField jTextField112;
    private javax.swing.JTextField jTextField121;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField21;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField36;
    private javax.swing.JTextField jTextField362;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane12;
    private javax.swing.JTextPane jTextPane121;
    private javax.swing.JTextPane jTextPane14;
    private javax.swing.JTextPane jTextPane16;
    private javax.swing.JTextPane jTextPane18;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchButton2;
    // End of variables declaration//GEN-END:variables
}
