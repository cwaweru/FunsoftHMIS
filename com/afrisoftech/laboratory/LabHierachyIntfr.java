/*
 * Members.java
 *
 * Created on August 13, 2002, 3:36 PM
 */
package com.afrisoftech.laboratory;

import java.sql.SQLException;
import org.openide.util.Exceptions;

/**
 *
 * @author root
 */
public class LabHierachyIntfr extends javax.swing.JInternalFrame {

    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    private String labProcedureCode;

    public LabHierachyIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jSearchDialog2 = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        jTextField113 = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        jSearchTable2 = new com.afrisoftech.dbadmin.JTable();
        jButton52 = new javax.swing.JButton();
        jSearchDialog21 = new javax.swing.JDialog();
        jSearchPanel21 = new javax.swing.JPanel();
        jTextField1131 = new javax.swing.JTextField();
        jSearchScrollPane21 = new javax.swing.JScrollPane();
        jSearchTable21 = new com.afrisoftech.dbadmin.JTable();
        jButton521 = new javax.swing.JButton();
        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton92 = new javax.swing.JButton();
        labProceduresHierarchyTabbedPane = new javax.swing.JTabbedPane();
        mainCategoryPanel = new javax.swing.JPanel();
        saveMainCategoryBtn = new javax.swing.JButton();
        editMainCategoryBtn = new javax.swing.JButton();
        clearMainCategoryBtn = new javax.swing.JButton();
        closeMainFormBtn = new javax.swing.JButton();
        mainCategoryScrollPane = new javax.swing.JScrollPane();
        mainCategoryTable = new com.afrisoftech.dbadmin.JTable();
        removeRowMainBtn = new javax.swing.JButton();
        helpMainBtn = new javax.swing.JButton();
        mainCategorySpacerLbl = new javax.swing.JLabel();
        deleteDataMainCmbx = new javax.swing.JButton();
        groupingsPanel = new javax.swing.JPanel();
        saveGroupingBtn = new javax.swing.JButton();
        editGroupingBtn = new javax.swing.JButton();
        clearGroupingBtn = new javax.swing.JButton();
        closeGroupingBtn = new javax.swing.JButton();
        groupingSpacerLbl = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        labCategoryCmbx = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        labCategoryCodeTxt = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        labProcedureGrooupingTable = new com.afrisoftech.dbadmin.JTable();
        parametersHelpBtn = new javax.swing.JButton();
        parametersSpacerLabel = new javax.swing.JLabel();
        deleteGroupingBtn = new javax.swing.JButton();
        jPanel111 = new javax.swing.JPanel();
        saveParametersBtn = new javax.swing.JButton();
        editParametersBtn = new javax.swing.JButton();
        clearParametersFormBtn = new javax.swing.JButton();
        closeParametersFormBtn = new javax.swing.JButton();
        parametersSapacerLbl = new javax.swing.JLabel();
        parametersHeaderPanel = new javax.swing.JPanel();
        specimenNameLbl = new javax.swing.JLabel();
        specimenCodeLbl = new javax.swing.JLabel();
        specimentCodeTxt = new javax.swing.JTextField();
        testDescriptionLbl = new javax.swing.JLabel();
        testCodeLbl = new javax.swing.JLabel();
        procedureGroupTxt = new javax.swing.JTextField();
        genderPanel = new javax.swing.JPanel();
        femaleRdbtn = new javax.swing.JRadioButton();
        maleRdbtn = new javax.swing.JRadioButton();
        otherGenderRdbtn = new javax.swing.JRadioButton();
        parameterTypePanel = new javax.swing.JPanel();
        siParametersChkbx = new javax.swing.JCheckBox();
        booleanParametersChkbx = new javax.swing.JCheckBox();
        phraseParametersChkbx = new javax.swing.JCheckBox();
        testDescriptionSearchPanel = new javax.swing.JPanel();
        labProcedureNameTxt = new javax.swing.JTextField();
        testDescriptionSeacrhBtn = new javax.swing.JButton();
        specimenNameSeacrhPanel = new javax.swing.JPanel();
        specimenNameTxt = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        labProcedureCodeTxt = new javax.swing.JTextField();
        parametersPanel = new javax.swing.JPanel();
        parametersScrollPane = new javax.swing.JScrollPane();
        siParametersTable = new com.afrisoftech.dbadmin.JTable();
        phraseParametersTable = new javax.swing.JTable();
        removeRowParametersBtn = new javax.swing.JButton();
        helpParametersBtn = new javax.swing.JButton();
        deleteParametersBtn = new javax.swing.JButton();
        reportPanel = new javax.swing.JPanel();
        reportBodyPanel = new javax.swing.JPanel();
        parametersReportScrollPane = new javax.swing.JScrollPane();
        parametersReportTable = new com.afrisoftech.dbadmin.JXTable();
        buttonPanel = new javax.swing.JPanel();
        refreshBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();
        spacerLbl = new javax.swing.JLabel();

        jSearchDialog2.setModal(true);
        jSearchDialog2.setUndecorated(true);
        jSearchDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        jTextField113.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField113CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel2.add(jTextField113, gridBagConstraints);

        jSearchTable2.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable2.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable2MouseClicked(evt);
            }
        });
        jSearchScrollPane2.setViewportView(jSearchTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

        jButton52.setText("Dispose");
        jButton52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton52, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog2.getContentPane().add(jSearchPanel2, gridBagConstraints);

        jSearchDialog21.setModal(true);
        jSearchDialog21.setUndecorated(true);
        jSearchDialog21.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel21.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel21.setLayout(new java.awt.GridBagLayout());

        jTextField1131.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1131CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel21.add(jTextField1131, gridBagConstraints);

        jSearchTable21.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable21.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable21MouseClicked(evt);
            }
        });
        jSearchScrollPane21.setViewportView(jSearchTable21);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel21.add(jSearchScrollPane21, gridBagConstraints);

        jButton521.setText("Dispose");
        jButton521.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton521ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel21.add(jButton521, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog21.getContentPane().add(jSearchPanel21, gridBagConstraints);

        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(jTextField111, gridBagConstraints);

        jSearchTable.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton92.setText("Dispose");
        jButton92.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton92ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton92, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Laboratory Parameters Hierarchy Setup");
        setFont(new java.awt.Font("SansSerif", 0, 10)); // NOI18N
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        labProceduresHierarchyTabbedPane.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        labProceduresHierarchyTabbedPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        labProceduresHierarchyTabbedPane.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        mainCategoryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter Test Category"));
        mainCategoryPanel.setLayout(new java.awt.GridBagLayout());

        saveMainCategoryBtn.setMnemonic('o');
        saveMainCategoryBtn.setText("Save data");
        saveMainCategoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMainCategoryBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainCategoryPanel.add(saveMainCategoryBtn, gridBagConstraints);

        editMainCategoryBtn.setMnemonic('e');
        editMainCategoryBtn.setText("Edit existing data");
        editMainCategoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMainCategoryBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainCategoryPanel.add(editMainCategoryBtn, gridBagConstraints);

        clearMainCategoryBtn.setMnemonic('l');
        clearMainCategoryBtn.setText("Clear form");
        clearMainCategoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearMainCategoryBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainCategoryPanel.add(clearMainCategoryBtn, gridBagConstraints);

        closeMainFormBtn.setMnemonic('c');
        closeMainFormBtn.setText("Close form");
        closeMainFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeMainFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainCategoryPanel.add(closeMainFormBtn, gridBagConstraints);

        mainCategoryTable.setAutoCreateRowSorter(true);
        mainCategoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Code", "Main Dategory"
            }
        ));
        mainCategoryScrollPane.setViewportView(mainCategoryTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 500.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainCategoryPanel.add(mainCategoryScrollPane, gridBagConstraints);

        removeRowMainBtn.setMnemonic('r');
        removeRowMainBtn.setText("Remove row");
        removeRowMainBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRowMainBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        mainCategoryPanel.add(removeRowMainBtn, gridBagConstraints);

        helpMainBtn.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainCategoryPanel.add(helpMainBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        mainCategoryPanel.add(mainCategorySpacerLbl, gridBagConstraints);

        deleteDataMainCmbx.setText("Delete data");
        deleteDataMainCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDataMainCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainCategoryPanel.add(deleteDataMainCmbx, gridBagConstraints);

        labProceduresHierarchyTabbedPane.addTab("Main Category", mainCategoryPanel);

        groupingsPanel.setLayout(new java.awt.GridBagLayout());

        saveGroupingBtn.setMnemonic('o');
        saveGroupingBtn.setText("Save data");
        saveGroupingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveGroupingBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        groupingsPanel.add(saveGroupingBtn, gridBagConstraints);

        editGroupingBtn.setMnemonic('e');
        editGroupingBtn.setText("Edit grouping");
        editGroupingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editGroupingBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        groupingsPanel.add(editGroupingBtn, gridBagConstraints);

        clearGroupingBtn.setMnemonic('l');
        clearGroupingBtn.setText("Clear");
        clearGroupingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearGroupingBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        groupingsPanel.add(clearGroupingBtn, gridBagConstraints);

        closeGroupingBtn.setMnemonic('c');
        closeGroupingBtn.setText("Close");
        closeGroupingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeGroupingBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        groupingsPanel.add(closeGroupingBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        groupingsPanel.add(groupingSpacerLbl, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Main Category"));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Main Category");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jLabel1, gridBagConstraints);

        labCategoryCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select  category_description from pb_lab_maincategory ORDER BY category_description "));
        labCategoryCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labCategoryCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(labCategoryCmbx, gridBagConstraints);

        jLabel6.setText("Main Category Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jLabel6, gridBagConstraints);

        labCategoryCodeTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(labCategoryCodeTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        groupingsPanel.add(jPanel2, gridBagConstraints);

        jButton6.setMnemonic('r');
        jButton6.setText("Remove Row");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        groupingsPanel.add(jButton6, gridBagConstraints);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter lab test here"));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        labProcedureGrooupingTable.setAutoCreateRowSorter(true);
        labProcedureGrooupingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Test Code", "Test Description", "Amount Charged"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        labProcedureGrooupingTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                labProcedureGrooupingTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(labProcedureGrooupingTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 500.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel5.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 500.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        groupingsPanel.add(jPanel5, gridBagConstraints);

        parametersHelpBtn.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        groupingsPanel.add(parametersHelpBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        groupingsPanel.add(parametersSpacerLabel, gridBagConstraints);

        deleteGroupingBtn.setText("Delete from group");
        deleteGroupingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteGroupingBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        groupingsPanel.add(deleteGroupingBtn, gridBagConstraints);

        labProceduresHierarchyTabbedPane.addTab("Lab Tests", groupingsPanel);

        jPanel111.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jPanel111.setLayout(new java.awt.GridBagLayout());

        saveParametersBtn.setMnemonic('o');
        saveParametersBtn.setText("Save data");
        saveParametersBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveParametersBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel111.add(saveParametersBtn, gridBagConstraints);

        editParametersBtn.setMnemonic('e');
        editParametersBtn.setText("Edit parameters");
        editParametersBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editParametersBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel111.add(editParametersBtn, gridBagConstraints);

        clearParametersFormBtn.setMnemonic('l');
        clearParametersFormBtn.setText("Clear");
        clearParametersFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearParametersFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel111.add(clearParametersFormBtn, gridBagConstraints);

        closeParametersFormBtn.setMnemonic('c');
        closeParametersFormBtn.setText("Close");
        closeParametersFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeParametersFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel111.add(closeParametersFormBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel111.add(parametersSapacerLbl, gridBagConstraints);

        parametersHeaderPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        parametersHeaderPanel.setLayout(new java.awt.GridBagLayout());

        specimenNameLbl.setText("Specimen Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        parametersHeaderPanel.add(specimenNameLbl, gridBagConstraints);

        specimenCodeLbl.setText("Specimen Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        parametersHeaderPanel.add(specimenCodeLbl, gridBagConstraints);

        specimentCodeTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        parametersHeaderPanel.add(specimentCodeTxt, gridBagConstraints);

        testDescriptionLbl.setText("Test Description");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        parametersHeaderPanel.add(testDescriptionLbl, gridBagConstraints);

        testCodeLbl.setText("Procedure Group");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        parametersHeaderPanel.add(testCodeLbl, gridBagConstraints);

        procedureGroupTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        parametersHeaderPanel.add(procedureGroupTxt, gridBagConstraints);

        genderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Tick where applicable"));
        genderPanel.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(femaleRdbtn);
        femaleRdbtn.setText("Female");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        genderPanel.add(femaleRdbtn, gridBagConstraints);

        buttonGroup1.add(maleRdbtn);
        maleRdbtn.setText("Male");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        genderPanel.add(maleRdbtn, gridBagConstraints);

        buttonGroup1.add(otherGenderRdbtn);
        otherGenderRdbtn.setSelected(true);
        otherGenderRdbtn.setText("Either");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        genderPanel.add(otherGenderRdbtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weightx = 1.0;
        parametersHeaderPanel.add(genderPanel, gridBagConstraints);

        parameterTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Tick mode of Results"));
        parameterTypePanel.setLayout(new java.awt.GridBagLayout());

        buttonGroup2.add(siParametersChkbx);
        siParametersChkbx.setSelected(true);
        siParametersChkbx.setText("Has SI values");
        siParametersChkbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siParametersChkbxActionPerformed(evt);
            }
        });
        parameterTypePanel.add(siParametersChkbx, new java.awt.GridBagConstraints());

        buttonGroup2.add(booleanParametersChkbx);
        booleanParametersChkbx.setText("Result Positive or Negative");
        booleanParametersChkbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                booleanParametersChkbxActionPerformed(evt);
            }
        });
        parameterTypePanel.add(booleanParametersChkbx, new java.awt.GridBagConstraints());

        buttonGroup2.add(phraseParametersChkbx);
        phraseParametersChkbx.setText("Phrase");
        phraseParametersChkbx.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                phraseParametersChkbxMouseClicked(evt);
            }
        });
        parameterTypePanel.add(phraseParametersChkbx, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        parametersHeaderPanel.add(parameterTypePanel, gridBagConstraints);

        testDescriptionSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        testDescriptionSearchPanel.setLayout(new java.awt.GridBagLayout());

        labProcedureNameTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        testDescriptionSearchPanel.add(labProcedureNameTxt, gridBagConstraints);

        testDescriptionSeacrhBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        testDescriptionSeacrhBtn.setToolTipText("Search");
        testDescriptionSeacrhBtn.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        testDescriptionSeacrhBtn.setMaximumSize(new java.awt.Dimension(74, 53));
        testDescriptionSeacrhBtn.setMinimumSize(new java.awt.Dimension(74, 53));
        testDescriptionSeacrhBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        testDescriptionSeacrhBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testDescriptionSeacrhBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        testDescriptionSearchPanel.add(testDescriptionSeacrhBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        parametersHeaderPanel.add(testDescriptionSearchPanel, gridBagConstraints);

        specimenNameSeacrhPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        specimenNameSeacrhPanel.setLayout(new java.awt.GridBagLayout());

        specimenNameTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        specimenNameSeacrhPanel.add(specimenNameTxt, gridBagConstraints);

        searchButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton1.setToolTipText("Search");
        searchButton1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton1.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton1.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        specimenNameSeacrhPanel.add(searchButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        parametersHeaderPanel.add(specimenNameSeacrhPanel, gridBagConstraints);

        jLabel7.setText("Laboratory Procedure Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        parametersHeaderPanel.add(jLabel7, gridBagConstraints);

        labProcedureCodeTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        parametersHeaderPanel.add(labProcedureCodeTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel111.add(parametersHeaderPanel, gridBagConstraints);

        parametersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Set SI standards here"));
        parametersPanel.setLayout(new java.awt.GridBagLayout());

        siParametersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Parameter", "Lower Limit", "Upper Limit", "Standard", "Units", "Comments"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        siParametersTable.setGridColor(new java.awt.Color(204, 204, 255));

        parametersScrollPane.setViewportView(siParametersTable);

        phraseParametersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Parameter", "Expected Phrase", "Standard", "Comments"
            }
        ));
        parametersScrollPane.setViewportView(phraseParametersTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        parametersPanel.add(parametersScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel111.add(parametersPanel, gridBagConstraints);

        removeRowParametersBtn.setMnemonic('R');
        removeRowParametersBtn.setText("Remove Row");
        removeRowParametersBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRowParametersBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        jPanel111.add(removeRowParametersBtn, gridBagConstraints);

        helpParametersBtn.setMnemonic('H');
        helpParametersBtn.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel111.add(helpParametersBtn, gridBagConstraints);

        deleteParametersBtn.setText("Delete parameters");
        deleteParametersBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteParametersBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel111.add(deleteParametersBtn, gridBagConstraints);

        labProceduresHierarchyTabbedPane.addTab("Specimen", jPanel111);

        reportPanel.setLayout(new java.awt.GridBagLayout());

        reportBodyPanel.setLayout(new java.awt.GridBagLayout());

        parametersReportTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT typeof_test, lower_limit, upper_limit, units, date, specimen, \n" +
            "       status, test, notes, code, specimen_source, \"parameter_ID\", parameter_order\n" +
            "  FROM pb_lab_standards"));
    parametersReportScrollPane.setViewportView(parametersReportTable);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    reportBodyPanel.add(parametersReportScrollPane, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 200.0;
    reportPanel.add(reportBodyPanel, gridBagConstraints);

    buttonPanel.setLayout(new java.awt.GridBagLayout());

    refreshBtn.setText("Refresh report");
    refreshBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            refreshBtnActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    buttonPanel.add(refreshBtn, gridBagConstraints);

    closeBtn.setText("Close form");
    closeBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            closeBtnActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    buttonPanel.add(closeBtn, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 200.0;
    gridBagConstraints.weighty = 1.0;
    buttonPanel.add(spacerLbl, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    reportPanel.add(buttonPanel, gridBagConstraints);

    labProceduresHierarchyTabbedPane.addTab("Registered Parameters Report", reportPanel);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = 5;
    gridBagConstraints.gridheight = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
    getContentPane().add(labProceduresHierarchyTabbedPane, gridBagConstraints);

    setBounds(0, 0, 750, 450);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton92ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton92ActionPerformed
        jSearchDialog.dispose();    // Add your handling code here:
    }//GEN-LAST:event_jButton92ActionPerformed

    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        labProcedureGrooupingTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0), labProcedureGrooupingTable.getSelectedRow(), 0);
        labProcedureGrooupingTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1), labProcedureGrooupingTable.getSelectedRow(), 1);
        labProcedureGrooupingTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 2), labProcedureGrooupingTable.getSelectedRow(), 2);

        jSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked

    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate
        jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select code,service_type,rate as price FROM pb_operating_parameters WHERE service_type ILIKE '" + jTextField111.getText() + "%' AND main_service ilike 'Lab%' order by service_type"));

        jSearchScrollPane.setViewportView(jSearchTable);
        System.out.println("Cannot sort out");   // Add your handling code here:
    }//GEN-LAST:event_jTextField111CaretUpdate

    private void labProcedureGrooupingTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_labProcedureGrooupingTableMouseClicked
        if (labProcedureGrooupingTable.getSelectedColumn() == 0) {

            this.cmboxMouseClicked2();
        }         // Add your handling code here:
    }//GEN-LAST:event_labProcedureGrooupingTableMouseClicked
    private void cmboxMouseClicked2() {

        System.out.println("Showing dialog");
        java.awt.Point point = labProcedureGrooupingTable.getLocationOnScreen();
        jSearchDialog.setSize(400, 200);
        jSearchDialog.setLocation(point);
        jSearchDialog.setVisible(true);
    }
    private void phraseParametersChkbxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_phraseParametersChkbxMouseClicked

        parametersPanel.setVisible(true);
        this.invalidate();
        phraseParametersTable.grabFocus();
        this.siParametersTable.setVisible(true);
        this.parametersScrollPane.setViewportView(phraseParametersTable);
        this.validate();
        /*
         * jPanel4.setVisible(true); jTable11.setVisible(false);
         * jTable3.setVisible(true);
         */
        // Add your handling code here:
    }//GEN-LAST:event_phraseParametersChkbxMouseClicked

    private void booleanParametersChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_booleanParametersChkbxActionPerformed
        parametersPanel.setVisible(false);          // Add your handling code here:
    }//GEN-LAST:event_booleanParametersChkbxActionPerformed

    private void jSearchTable21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable21MouseClicked
        specimentCodeTxt.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 0).toString());
        specimenNameTxt.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 1).toString());
        jSearchDialog21.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable21MouseClicked

    private void jButton521ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton521ActionPerformed
        jSearchDialog21.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jButton521ActionPerformed

    private void jTextField1131CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1131CaretUpdate
        jSearchTable21.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT code,specimen from pb_lab_specimen where specimen ILIKE '" + jTextField1131.getText() + "%' order by specimen"));

        jSearchTable21.setShowHorizontalLines(false);
        jSearchScrollPane21.setViewportView(jSearchTable21);

        // Add your handling code here:
    }//GEN-LAST:event_jTextField1131CaretUpdate

    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        searchButtonClicked22();   // Add your handling code here:
    }//GEN-LAST:event_searchButton1ActionPerformed
    private void searchButtonClicked22() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.specimenNameTxt.getLocationOnScreen();

        jSearchDialog21.setSize(700, 200);

        jSearchDialog21.setLocation(point);

        jSearchDialog21.setVisible(true);

    }
    private void jSearchTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2MouseClicked
        procedureGroupTxt.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
        labProcedureNameTxt.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0).toString());
        labProcedureCode = jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 3).toString();
        labProcedureCodeTxt.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 3).toString());
        jSearchDialog2.dispose();    // Add your handling code here:
    }//GEN-LAST:event_jSearchTable2MouseClicked

    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed
        jSearchDialog2.dispose();         // Add your handling code here:
    }//GEN-LAST:event_jButton52ActionPerformed

    private void jTextField113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField113CaretUpdate
        //  if(this.jCheckBox1.isSelected()){

        jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT typeof_test,specimen,units,lab_procedure_code from pb_lab_test where typeof_test ILIKE '" + jTextField113.getText() + "%' order by typeof_test"));

        jSearchTable2.setShowHorizontalLines(false);
        jSearchScrollPane2.setViewportView(jSearchTable2);

        // Add your handling code here:
    }//GEN-LAST:event_jTextField113CaretUpdate

    private void testDescriptionSeacrhBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testDescriptionSeacrhBtnActionPerformed
        searchButtonClicked2();         // Add your handling code here:
    }//GEN-LAST:event_testDescriptionSeacrhBtnActionPerformed
    private void searchButtonClicked2() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.labProcedureNameTxt.getLocationOnScreen();

        jSearchDialog2.setSize(700, 200);

        jSearchDialog2.setLocation(point);

        jSearchDialog2.setVisible(true);

    }
    private void siParametersChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siParametersChkbxActionPerformed
        parametersPanel.setVisible(true);
        this.invalidate();
        siParametersTable.grabFocus();
        this.siParametersTable.setVisible(true);
        this.parametersScrollPane.setViewportView(siParametersTable);
        this.validate();
        // jTable3.setVisible(false);

        // Add your handling code here:
    }//GEN-LAST:event_siParametersChkbxActionPerformed

    private void closeParametersFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeParametersFormBtnActionPerformed
        this.setVisible(false);
        dispose();

        // Add your handling code here:
    }//GEN-LAST:event_closeParametersFormBtnActionPerformed

    private void closeGroupingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeGroupingBtnActionPerformed
        this.setVisible(false);
        dispose();

        // Add your handling code here:
    }//GEN-LAST:event_closeGroupingBtnActionPerformed

    private void closeMainFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeMainFormBtnActionPerformed
        this.setVisible(false);
        dispose();// Add your handling code here:
    }//GEN-LAST:event_closeMainFormBtnActionPerformed

    private void removeRowMainBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRowMainBtnActionPerformed

        int rows2Delete = mainCategoryTable.getSelectedRowCount();

        int[] selectedRows = mainCategoryTable.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) mainCategoryTable.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) mainCategoryTable.getModel();

                defTableModel.removeRow(mainCategoryTable.getSelectedRow());
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_removeRowMainBtnActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        int rows2Delete = labProcedureGrooupingTable.getSelectedRowCount();

        int[] selectedRows = labProcedureGrooupingTable.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) labProcedureGrooupingTable.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) labProcedureGrooupingTable.getModel();

                defTableModel.removeRow(labProcedureGrooupingTable.getSelectedRow());
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void removeRowParametersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRowParametersBtnActionPerformed

        int rows2Delete = siParametersTable.getSelectedRowCount();

        int[] selectedRows = siParametersTable.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) siParametersTable.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) siParametersTable.getModel();

                defTableModel.removeRow(siParametersTable.getSelectedRow());
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_removeRowParametersBtnActionPerformed

    private void clearParametersFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearParametersFormBtnActionPerformed
        for (int k = 0; k < siParametersTable.getRowCount(); k++) {
            for (int r = 0; r < siParametersTable.getColumnCount(); r++) {
                siParametersTable.getModel().setValueAt(null, k, r);
            }
        }

        specimentCodeTxt.setText("");

        this.clearForm();
        this.labProceduresHierarchyTabbedPane.setSelectedIndex(2);
        // Add your handling code here:
    }//GEN-LAST:event_clearParametersFormBtnActionPerformed

    private void clearGroupingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearGroupingBtnActionPerformed
        for (int k = 0; k < labProcedureGrooupingTable.getRowCount(); k++) {
            for (int r = 0; r < labProcedureGrooupingTable.getColumnCount(); r++) {
                labProcedureGrooupingTable.getModel().setValueAt(null, k, r);
            }
        }
        labCategoryCmbx.setSelectedItem(null);
        labCategoryCodeTxt.setText("");
        this.clearForm();
        this.labProceduresHierarchyTabbedPane.setSelectedIndex(1);
        // Add your handling code here:
    }//GEN-LAST:event_clearGroupingBtnActionPerformed

    private void clearMainCategoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearMainCategoryBtnActionPerformed
        for (int k = 0; k < mainCategoryTable.getRowCount(); k++) {
            for (int r = 0; r < mainCategoryTable.getColumnCount(); r++) {
                mainCategoryTable.getModel().setValueAt(null, k, r);
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_clearMainCategoryBtnActionPerformed

    private void editParametersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editParametersBtnActionPerformed
        if (procedureGroupTxt.getText().length() > 0) {
            siParametersTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT typeof_test, lower_limit, upper_limit, units, date, specimen, "
                    + "       status, notes, code, specimen_source, \"parameter_ID\""
                    + "  FROM pb_lab_standards WHERE code = '" + labProcedureCodeTxt.getText() + "' ORDER BY 1"));
            javax.swing.JComboBox cmBox1 = new javax.swing.JComboBox(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT initcap(specimen) as specimen FROM pb_lab_specimen ORDER BY 1"));

            javax.swing.table.TableColumn teditor1 = this.siParametersTable.getColumn("SPECIMEN_SOURCE");

            teditor1.setCellEditor(new javax.swing.DefaultCellEditor(cmBox1));
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a procedure to edit.");
        }
        parametersPanel.setVisible(true);
        this.invalidate();
        siParametersTable.grabFocus();
        this.siParametersTable.setVisible(true);
        this.parametersScrollPane.setViewportView(siParametersTable);
        this.validate();
        saveParametersBtn.setText("Update");
        //   javax.swing.JFrame lpay = new Activities(connectDB, pConnDB, jTextField2.getText().toString());
        // lpay.setVisible(true); // Add your handling code here:
    }//GEN-LAST:event_editParametersBtnActionPerformed

    private void editGroupingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editGroupingBtnActionPerformed

        labProcedureGrooupingTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT typeof_test, status, date, lower_limit, upper_limit, "
                + "       lab_procedure_code, units"
                + "  FROM pb_lab_test WHERE specimen ilike '" + labCategoryCmbx.getSelectedItem() + "'"));

// Add your handling code here:
    }//GEN-LAST:event_editGroupingBtnActionPerformed

    private void editMainCategoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMainCategoryBtnActionPerformed

        mainCategoryTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT category_code, category_description, department\n"
                + "  FROM pb_lab_maincategory ORDER BY 2"));

        saveMainCategoryBtn.setText("Update");
    }//GEN-LAST:event_editMainCategoryBtnActionPerformed

    private void saveParametersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveParametersBtnActionPerformed
        java.util.Calendar calendar = java.util.Calendar.getInstance();

        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql = new java.sql.Date(dateNow);

        System.out.println(datenowSql.toString());
        try {
            if (saveParametersBtn.getText().contains("Save data")) {
                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into pb_lab_standards values(?,?,?,?,?,?,?,?,?,?,?)");

                if (siParametersChkbx.isSelected()) {
                    for (int i = 0; i < siParametersTable.getRowCount(); i++) {
                        if (siParametersTable.getModel().getValueAt(i, 0) != null) {
                            pstmt.setObject(1, siParametersTable.getValueAt(i, 0).toString());
                            pstmt.setDouble(2, java.lang.Double.parseDouble(siParametersTable.getValueAt(i, 1).toString()));
                            pstmt.setDouble(3, java.lang.Double.parseDouble(siParametersTable.getValueAt(i, 2).toString()));
                            pstmt.setString(4, siParametersTable.getValueAt(i, 4).toString());
                            pstmt.setDate(5, new java.sql.Date(java.util.Calendar.getInstance().getTimeInMillis()));
                            pstmt.setObject(6, procedureGroupTxt.getText());
                            if (siParametersChkbx.isSelected()) {
                                pstmt.setBoolean(7, true);
                            } else {
                                pstmt.setBoolean(7, false);
                            }
                            pstmt.setObject(8, labProcedureNameTxt.getText());
                            pstmt.setObject(9, siParametersTable.getValueAt(i, 5));
                            pstmt.setString(10, labProcedureCodeTxt.getText());
                            pstmt.setString(11, this.specimenNameTxt.getText());
                            pstmt.execute();
                        }
                    }
                } else {
                    if (booleanParametersChkbx.isSelected()) {
                        pstmt.setObject(1, labProcedureNameTxt.getText());
                        pstmt.setDouble(2, java.lang.Double.parseDouble("0.00"));
                        pstmt.setDouble(3, java.lang.Double.parseDouble("0.00"));
                        pstmt.setString(4, "-");
                        pstmt.setDate(5, new java.sql.Date(java.util.Calendar.getInstance().getTimeInMillis()));
                        pstmt.setObject(6, procedureGroupTxt.getText());
                        pstmt.setBoolean(7, false);
                        pstmt.setObject(8, labProcedureNameTxt.getText());
                        pstmt.setString(9, "Positive or Negative");
                        pstmt.setString(10, labProcedureCode);
                        pstmt.setString(11, "Negative");
                        pstmt.execute();
                    } else {
                        if (phraseParametersChkbx.isSelected()) {
                            for (int i = 0; i < phraseParametersTable.getRowCount(); i++) {
                                if (phraseParametersTable.getModel().getValueAt(i, 0) != null) {

                                    pstmt.setObject(1, phraseParametersTable.getValueAt(i, 0).toString());
                                    pstmt.setDouble(2, java.lang.Double.parseDouble("0.00"));
                                    pstmt.setDouble(3, java.lang.Double.parseDouble("0.00"));
                                    pstmt.setObject(4, phraseParametersTable.getValueAt(i, 1).toString());
                                    pstmt.setDate(5, new java.sql.Date(java.util.Calendar.getInstance().getTimeInMillis()));
                                    pstmt.setObject(6, procedureGroupTxt.getText());
                                    pstmt.setBoolean(7, false);
                                    pstmt.setObject(8, labProcedureNameTxt.getText());
                                    pstmt.setString(9, phraseParametersTable.getValueAt(i, 3).toString());
                                    pstmt.setString(10, labProcedureCode);
                                    pstmt.setString(11, phraseParametersTable.getValueAt(i, 2).toString());
                                    pstmt.execute();
                                }
                            }
                        }
                    }
                }

                //  pstmt.executeUpdate();
                javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully", "Comfirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                for (int k = 0; k < siParametersTable.getRowCount(); k++) {
                    for (int r = 0; r < siParametersTable.getColumnCount(); r++) {
                        siParametersTable.getModel().setValueAt(null, k, r);
                    }
                }
                specimentCodeTxt.setText("");
            } else {
                for (int j = 0; j < siParametersTable.getRowCount(); j++) {
                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("UPDATE pb_lab_standards"
                            + "   SET typeof_test=?, lower_limit=?, upper_limit=?, units=?, "
                            + "       specimen=?, status=?, notes=?, specimen_source=? "
                            + " WHERE \"parameter_ID\"= ? ");
                    pstmt.setObject(1, siParametersTable.getValueAt(j, 0));
                    pstmt.setObject(2, siParametersTable.getValueAt(j, 1));
                    pstmt.setObject(3, siParametersTable.getValueAt(j, 2));
                    pstmt.setObject(4, siParametersTable.getValueAt(j, 3));
                    // pstmt.setDate(5, com.afrisoftech.lib.SQLDateFormat.getSQLDate(new java.util.Date(siParametersTable.getValueAt(j, 4).toString())));
                    pstmt.setObject(5, procedureGroupTxt.getText());
                    pstmt.setObject(6, siParametersTable.getValueAt(j, 6));
                    pstmt.setObject(7, siParametersTable.getValueAt(j, 7));
                    pstmt.setObject(8, specimenNameTxt.getText());
                    pstmt.setObject(9, siParametersTable.getValueAt(j, 10));
                    pstmt.executeUpdate();
                }
            }
            this.clearForm();
            this.labProceduresHierarchyTabbedPane.setSelectedIndex(2);
        } catch (java.sql.SQLException sq) {
            sq.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "ERROR: " + sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());
            parametersSapacerLbl.setForeground(java.awt.Color.red);
            //  jLabel4.setText("Sorry. Another Code already exists");
        }

        // Add your handling code here:
    }//GEN-LAST:event_saveParametersBtnActionPerformed

    private void labCategoryCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_labCategoryCmbxActionPerformed

        try {
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select category_code from pb_lab_maincategory where category_description ='" + labCategoryCmbx.getSelectedItem() + "'");
            while (rset.next()) {
                labCategoryCodeTxt.setText(rset.getObject(1).toString());
            }

        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Insert not successful");
        }

        // Add your handling code here:
    }//GEN-LAST:event_labCategoryCmbxActionPerformed

    private void saveMainCategoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMainCategoryBtnActionPerformed
        if (mainCategoryTable.getModel().getValueAt(0, 0) != null) {

            try {
                if (saveMainCategoryBtn.getText().contains("Save data")) {
                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into pb_lab_maincategory values( ?, initcap(?))");

                    for (int i = 0; i < mainCategoryTable.getRowCount(); i++) {
                        if (mainCategoryTable.getModel().getValueAt(i, 0) != null) {

                            pstmt.setObject(1, mainCategoryTable.getValueAt(i, 0).toString());
                            if (mainCategoryTable.getModel().getValueAt(i, 1) != null) {
                                pstmt.setObject(2, mainCategoryTable.getValueAt(i, 1).toString());
                            } else {
                                javax.swing.JOptionPane.showMessageDialog(this, "You must enter Main account name", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                            }
                            //  pstmt.setObject(2,jTable1.getValueAt(i,1).toString());

                            pstmt.executeUpdate();
                        }
                    }
                    // pstmt.executeUpdate();
                    javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully", "Confirmation", javax.swing.JOptionPane.INFORMATION_MESSAGE);

//                crset1.execute();
                    for (int k = 0; k < mainCategoryTable.getRowCount(); k++) {
                        for (int r = 0; r < mainCategoryTable.getColumnCount(); r++) {
                            mainCategoryTable.getModel().setValueAt(null, k, r);
                        }
                    }
                } else {
                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("UPDATE pb_lab_maincategory set category_description = initcap(?) WHERE category_code = ?");

                    for (int i = 0; i < mainCategoryTable.getRowCount(); i++) {
                        if (mainCategoryTable.getModel().getValueAt(i, 0) != null) {

                            pstmt.setObject(1, mainCategoryTable.getValueAt(i, 1).toString());
                            if (mainCategoryTable.getModel().getValueAt(i, 1) != null) {
                                pstmt.setObject(2, mainCategoryTable.getValueAt(i, 0).toString());
                            } else {
                                javax.swing.JOptionPane.showMessageDialog(this, "You must enter Main account name", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                            }
                            //  pstmt.setObject(2,jTable1.getValueAt(i,1).toString());

                            pstmt.executeUpdate();
                        }
                    }
                    // pstmt.executeUpdate();
                    javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully", "Confirmation", javax.swing.JOptionPane.INFORMATION_MESSAGE);

//                crset1.execute();
                    for (int k = 0; k < mainCategoryTable.getRowCount(); k++) {
                        for (int r = 0; r < mainCategoryTable.getColumnCount(); r++) {
                            mainCategoryTable.getModel().setValueAt(null, k, r);
                        }
                    }
                }
                this.saveMainCategoryBtn.setText("Save data");
            } catch (java.sql.SQLException sq) {
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage() + " : " + "Sorry. Another Code already exists", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                System.out.println(sq.getMessage());
                // jLabel2.setForeground(java.awt.Color.red);
                // jLabel2.setText("Sorry. Another Code already exists");
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Insert not successful!  Check Your Entries", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

        }
        this.clearForm();
        this.labProceduresHierarchyTabbedPane.setSelectedIndex(0);
        // Add your handling code here:
    }//GEN-LAST:event_saveMainCategoryBtnActionPerformed

    private void saveGroupingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveGroupingBtnActionPerformed
        java.util.Calendar calendar = java.util.Calendar.getInstance();

        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql = new java.sql.Date(dateNow);

        System.out.println(datenowSql.toString());
        if (labProcedureGrooupingTable.getModel().getValueAt(0, 0) != null) {

            try {
                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into pb_lab_test values( initcap(?), ?, ?,?,?,?,?,?)");
                for (int i = 0; i < labProcedureGrooupingTable.getRowCount(); i++) {
                    if (labProcedureGrooupingTable.getModel().getValueAt(i, 0) != null) {
                        pstmt.setObject(1, labProcedureGrooupingTable.getValueAt(i, 1).toString());
                        pstmt.setString(2, labCategoryCmbx.getSelectedItem().toString());
                        pstmt.setBoolean(3, false);
                        pstmt.setDate(4, new java.sql.Date(java.util.Calendar.getInstance().getTimeInMillis()));
                        pstmt.setDouble(5, 0.00);
                        pstmt.setDouble(6, 0.00);
                        pstmt.setString(7, "");
                        pstmt.setString(8, labProcedureGrooupingTable.getValueAt(i, 0).toString());
                        pstmt.executeUpdate();
                    }
                }
                javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully", "Comfirmation", javax.swing.JOptionPane.INFORMATION_MESSAGE);

//                crset11.execute();
                for (int k = 0; k < labProcedureGrooupingTable.getRowCount(); k++) {
                    for (int r = 0; r < labProcedureGrooupingTable.getColumnCount(); r++) {
                        labProcedureGrooupingTable.getModel().setValueAt(null, k, r);
                    }
                }
                labCategoryCmbx.setSelectedItem(null);
                labCategoryCodeTxt.setText("");
            } catch (java.sql.SQLException sq) {
                sq.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, "ERROR: " + sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                System.out.println(sq.getMessage());
                groupingSpacerLbl.setForeground(java.awt.Color.red);
                //  jLabel4.setText("Sorry. Another Code already exists");
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Insert Not Successful!  Check Your Entries", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

        }
        this.clearForm();
        this.labProceduresHierarchyTabbedPane.setSelectedIndex(2);
        // Add your handling code here:

    }//GEN-LAST:event_saveGroupingBtnActionPerformed

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed

        this.dispose();

// TODO add your handling code here:
    }//GEN-LAST:event_closeBtnActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed

        this.parametersReportTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT typeof_test, lower_limit, upper_limit, units, date, specimen, \n"
                + "       status, test, notes, code, specimen_source, \"parameter_ID\", parameter_order\n"
                + "  FROM pb_lab_standards"));
        // TODO add your handling code here:
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void deleteDataMainCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDataMainCmbxActionPerformed

        try {
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("DELETE FROM pb_lab_maincategory WHERE category_code = ?");
            pstmt.setObject(1, mainCategoryTable.getValueAt(mainCategoryTable.getSelectedRow(), 0));
            pstmt.executeUpdate();
        } catch (java.sql.SQLException sq) {
            sq.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage());
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_deleteDataMainCmbxActionPerformed

    private void deleteGroupingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteGroupingBtnActionPerformed

        try {
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("DELETE FROM pb_lab_test WHERE lab_procedure_code ilike ? AND specimen ilike ?");
            pstmt.setObject(1, labProcedureGrooupingTable.getValueAt(labProcedureGrooupingTable.getSelectedRow(), 5));
            pstmt.setObject(2, labCategoryCmbx.getSelectedItem());
            pstmt.executeUpdate();
        } catch (java.sql.SQLException sq) {
            sq.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage());
        }

// TODO add your handling code here:
    }//GEN-LAST:event_deleteGroupingBtnActionPerformed

    private void deleteParametersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteParametersBtnActionPerformed

        try {
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("DELETE FROM pb_lab_standards WHERE \"paramater_ID\" = ?");
            pstmt.setInt(1, Integer.parseInt(siParametersTable.getValueAt(siParametersTable.getSelectedRow(), 10).toString()));
            pstmt.executeUpdate();
            javax.swing.JOptionPane.showMessageDialog(this, "Parameters adjusted successfully.");
        } catch (java.sql.SQLException sq) {
            sq.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage());
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_deleteParametersBtnActionPerformed

    void clearForm() {
        this.getContentPane().removeAll();
        this.initComponents();
        this.validate();
        saveParametersBtn.setText("Save data");
        saveGroupingBtn.setText("Save data");
        saveMainCategoryBtn.setText("Save data");
        this.setSize(this.getParent().getSize());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox booleanParametersChkbx;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton clearGroupingBtn;
    private javax.swing.JButton clearMainCategoryBtn;
    private javax.swing.JButton clearParametersFormBtn;
    private javax.swing.JButton closeBtn;
    private javax.swing.JButton closeGroupingBtn;
    private javax.swing.JButton closeMainFormBtn;
    private javax.swing.JButton closeParametersFormBtn;
    private javax.swing.JButton deleteDataMainCmbx;
    private javax.swing.JButton deleteGroupingBtn;
    private javax.swing.JButton deleteParametersBtn;
    private javax.swing.JButton editGroupingBtn;
    private javax.swing.JButton editMainCategoryBtn;
    private javax.swing.JButton editParametersBtn;
    private javax.swing.JRadioButton femaleRdbtn;
    private javax.swing.JPanel genderPanel;
    private javax.swing.JLabel groupingSpacerLbl;
    private javax.swing.JPanel groupingsPanel;
    private javax.swing.JButton helpMainBtn;
    private javax.swing.JButton helpParametersBtn;
    private javax.swing.JButton jButton52;
    private javax.swing.JButton jButton521;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton92;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel111;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JDialog jSearchDialog2;
    private javax.swing.JDialog jSearchDialog21;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JPanel jSearchPanel21;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JScrollPane jSearchScrollPane21;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTable jSearchTable2;
    private javax.swing.JTable jSearchTable21;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JTextField jTextField113;
    private javax.swing.JTextField jTextField1131;
    private javax.swing.JComboBox labCategoryCmbx;
    private javax.swing.JTextField labCategoryCodeTxt;
    private javax.swing.JTextField labProcedureCodeTxt;
    private javax.swing.JTable labProcedureGrooupingTable;
    private javax.swing.JTextField labProcedureNameTxt;
    private javax.swing.JTabbedPane labProceduresHierarchyTabbedPane;
    private javax.swing.JPanel mainCategoryPanel;
    private javax.swing.JScrollPane mainCategoryScrollPane;
    private javax.swing.JLabel mainCategorySpacerLbl;
    private javax.swing.JTable mainCategoryTable;
    private javax.swing.JRadioButton maleRdbtn;
    private javax.swing.JRadioButton otherGenderRdbtn;
    private javax.swing.JPanel parameterTypePanel;
    private javax.swing.JPanel parametersHeaderPanel;
    private javax.swing.JButton parametersHelpBtn;
    private javax.swing.JPanel parametersPanel;
    private javax.swing.JScrollPane parametersReportScrollPane;
    private javax.swing.JTable parametersReportTable;
    private javax.swing.JLabel parametersSapacerLbl;
    private javax.swing.JScrollPane parametersScrollPane;
    private javax.swing.JLabel parametersSpacerLabel;
    private javax.swing.JCheckBox phraseParametersChkbx;
    private javax.swing.JTable phraseParametersTable;
    private javax.swing.JTextField procedureGroupTxt;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton removeRowMainBtn;
    private javax.swing.JButton removeRowParametersBtn;
    private javax.swing.JPanel reportBodyPanel;
    private javax.swing.JPanel reportPanel;
    private javax.swing.JButton saveGroupingBtn;
    private javax.swing.JButton saveMainCategoryBtn;
    private javax.swing.JButton saveParametersBtn;
    private javax.swing.JButton searchButton1;
    private javax.swing.JCheckBox siParametersChkbx;
    private javax.swing.JTable siParametersTable;
    private javax.swing.JLabel spacerLbl;
    private javax.swing.JLabel specimenCodeLbl;
    private javax.swing.JLabel specimenNameLbl;
    private javax.swing.JPanel specimenNameSeacrhPanel;
    private javax.swing.JTextField specimenNameTxt;
    private javax.swing.JTextField specimentCodeTxt;
    private javax.swing.JLabel testCodeLbl;
    private javax.swing.JLabel testDescriptionLbl;
    private javax.swing.JButton testDescriptionSeacrhBtn;
    private javax.swing.JPanel testDescriptionSearchPanel;
    // End of variables declaration//GEN-END:variables
}
