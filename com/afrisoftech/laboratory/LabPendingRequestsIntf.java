/*
 *
 * Created on August 13, 2002, 1:09 PM
 */
package com.afrisoftech.laboratory;

/**
 *
 * @author root
 */
public class LabPendingRequestsIntf extends javax.swing.JInternalFrame implements java.lang.Runnable {

    javax.swing.table.TableModel tableModel = null;
    java.sql.Connection connectDB = null;
    com.afrisoftech.lib.DBObject dbObject;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    java.lang.Thread getListThread;
    boolean getList;

    public LabPendingRequestsIntf(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;
        dbObject = new com.afrisoftech.lib.DBObject();

        getListThread = new java.lang.Thread(this, "Update_Lab_Tests");

        initComponents();

        getList = true;

        getListThread.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog2 = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        jTextField113 = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        jSearchTable2 = new com.afrisoftech.dbadmin.JTable();
        jButton52 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField112 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton92 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jTextField9 = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel131 = new javax.swing.JLabel();
        jTextField141 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jCheckBox31 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        jScrollPane4 = new javax.swing.JScrollPane();
        jEditorPane2 = new javax.swing.JEditorPane();
        jLabel53 = new javax.swing.JLabel();
        jTextField15 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jSearchDialog2.setModal(true);
        jSearchDialog2.setUndecorated(true);
        jSearchDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        jTextField113.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField113CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel2.add(jTextField113, gridBagConstraints);

        jSearchTable2.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable2.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable2MouseClicked(evt);
            }
        });
        jSearchScrollPane2.setViewportView(jSearchTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

        jButton52.setText("Cancel");
        jButton52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton52, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog2.getContentPane().add(jSearchPanel2, gridBagConstraints);

        jSearchDialog.setMinimumSize(new java.awt.Dimension(600, 200));
        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jTextField112.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField112CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(jTextField112, gridBagConstraints);

        jSearchScrollPane.setDoubleBuffered(true);

        jSearchTable.setDoubleBuffered(true);
        jSearchTable.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton92.setText("Cancel");
        jButton92.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton92ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton92, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Pending Lab Requests");
        setFrameIcon(null);
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jButton3.setMnemonic('l');
        jButton3.setText("Clear");
        jButton3.setToolTipText("Click here to clear textfields");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton3, gridBagConstraints);

        jButton4.setMnemonic('C');
        jButton4.setText("Close");
        jButton4.setToolTipText("Click here to close window");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jSeparator1, gridBagConstraints);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jLabel7, gridBagConstraints);

        jTextField6.setEditable(false);
        jTextField6.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField6.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jTextField6, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel21.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setAutoscrolls(true);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Pat No.", "Pat Name", "Mode", "Service", "Qty", "Amount", "No", "Doctor", "Bill", "Bed No", "Time", "Total Bill"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true, false, false, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });

        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel21.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        jPanel2.add(jPanel21, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel9.setForeground(new java.awt.Color(255, 0, 51));
        jLabel9.setText("Patient No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel9, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jTextField9.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jTextField9, gridBagConstraints);

        searchButton.setToolTipText("Search");
        searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel4.add(searchButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel4, gridBagConstraints);

        jLabel2.setForeground(new java.awt.Color(255, 0, 51));
        jLabel2.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);

        jTextField1.setEditable(false);
        jTextField1.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(jTextField1, gridBagConstraints);

        jLabel131.setText("Age");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel1.add(jLabel131, gridBagConstraints);

        jTextField141.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(jTextField141, gridBagConstraints);

        jLabel4.setForeground(new java.awt.Color(255, 0, 51));
        jLabel4.setText("Payment Mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        jTextField5.setEditable(false);
        jTextField5.setDoubleBuffered(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jTextField5, gridBagConstraints);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 255, 153), 2), "Patient category", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(51, 0, 255)));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(jCheckBox1);
        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Out Patient");
        jCheckBox1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jCheckBox1, gridBagConstraints);

        buttonGroup1.add(jCheckBox2);
        jCheckBox2.setText("Walk In Patient");
        jCheckBox2.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jCheckBox2, gridBagConstraints);

        buttonGroup1.add(jCheckBox3);
        jCheckBox3.setText("In Patient");
        jCheckBox3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jCheckBox3.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jCheckBox3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        jPanel1.add(jPanel6, gridBagConstraints);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        buttonGroup2.add(jCheckBox31);
        jCheckBox31.setSelected(true);
        jCheckBox31.setText("Search By  No.");
        jCheckBox31.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel7.add(jCheckBox31, gridBagConstraints);

        buttonGroup2.add(jCheckBox4);
        jCheckBox4.setText("Search By Name");
        jCheckBox4.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel7.add(jCheckBox4, gridBagConstraints);

        jLabel10.setForeground(new java.awt.Color(255, 0, 51));
        jLabel10.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel7.add(jLabel10, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(datePicker1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jPanel7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(jPanel1, gridBagConstraints);

        jEditorPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Diagnosis", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jEditorPane2.setEditable(false);
        jEditorPane2.setAutoscrolls(false);
        jScrollPane4.setViewportView(jEditorPane2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(jScrollPane4, gridBagConstraints);

        jLabel53.setText("Amount KShs.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jLabel53, gridBagConstraints);

        jTextField15.setEditable(false);
        jTextField15.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField15.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel2.add(jTextField15, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jPanel2, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jLabel1, gridBagConstraints);

        jButton1.setText("Send Bill");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton1, gridBagConstraints);

        setBounds(0, 0, 849, 428);
    }// </editor-fold>//GEN-END:initComponents

    private void cmboxMouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane1.getLocationOnScreen();
        jSearchDialog.setSize(600, 200);
        jSearchDialog.setLocation(point);
        jSearchDialog.setVisible(true);
    }
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (jCheckBox2.isSelected()) {
            if (jTable1.getSelectedColumn() == 4) {

                this.cmboxMouseClicked();
            }
        }

    }//GEN-LAST:event_jTable1MouseClicked
    private void searchButtonClicked() {
        System.out.println("Showing dialog");

        java.awt.Point point = this.jTextField9.getLocationOnScreen();

        jSearchDialog2.setSize(400, 200);

        jSearchDialog2.setLocation(point);

        jSearchDialog2.setVisible(true);

    }
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        for (int k = 0; k < jTable1.getRowCount(); k++) {
            for (int r = 0; r < jTable1.getColumnCount(); r++) {
                jTable1.getModel().setValueAt(null, k, r);
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        for (int k = 0; k < jSearchTable2.getRowCount(); k++) {
            for (int r = 0; r < jSearchTable2.getColumnCount(); r++) {
                jSearchTable2.getModel().setValueAt(null, k, r);
            }
        }
        this.jTextField113.setText("");
        searchButtonClicked();
        // Add your handling code here:
}//GEN-LAST:event_searchButtonActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        jTextField9.setEditable(false);
        jTextField1.setEditable(false);
        jTextField5.setEditable(false);
        jTextField141.setEditable(false);

        //        jPanel1.setVisible(true);
    /*
         * try { java.sql.Statement pstmt = connectDB.createStatement();
         * java.sql.ResultSet rs = pstmt.executeQuery("select store_name from
         * st_stores where store_code = 'OP'");
         *
         * while (rs.next()){ jTextField4.setText(rs.getObject(1).toString());
         * // jTextField2.setText(rs.getObject(2).toString());
         *
         * }
         * } catch(java.sql.SQLException sqlex){
         * System.out.println(sqlex.getMessage()); }
         */
        // Add your handling code here:
}//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
//        jTextField9.setEditable(true);
        jTextField1.setEditable(true);
        jTextField1.setText("");
        jTextField5.setEditable(true);
        jTextField5.setText("Cash");
        jTextField141.setEditable(true);
        jTextField141.setText("");
        // jPanel11.setVisible(true)// Add your handling code here:
}//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        jTextField9.setEditable(false);
        jTextField1.setEditable(false);
        jTextField5.setEditable(false);
        jTextField141.setEditable(false);
        //        jPanel1.setVisible(false);
        /*
         * try { java.sql.Statement pstmt = connectDB.createStatement();
         * java.sql.ResultSet rs = pstmt.executeQuery("select store_name from
         * st_stores where store_code = 'IP'");
         *
         * while (rs.next()) { jTextField42.setText(rs.getObject(1).toString());
         * // jTextField2.setText(rs.getObject(2).toString());
         *
         * }
         * } catch (java.sql.SQLException sqlex) {
         * System.out.println(sqlex.getMessage()); }
         */
        //jPanel11.setVisible(true)// Add your handling code here:
}//GEN-LAST:event_jCheckBox3ActionPerformed

    private void jTextField113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField113CaretUpdate

        if (this.jCheckBox1.isSelected() && this.jCheckBox31.isSelected()) {

            if (jTextField113.getCaretPosition() < 5) {
                System.out.println("Nothing");
            } else {
                jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register WHERE patient_no ILIKE '" + jTextField113.getText() + "%' AND last_visit::DATE >= (select current_timestamp(0)::date -2) order by patient_no LIMIT 10"));

                /*
                 * try {
                 *
                 * // searchRowSet2.execute("SELECT patient_no,
                 * (upper(second_name||' '||first_name||' '||last_name)) as
                 * name, year_of_birth, residence from hp_patient_register where
                 * patient_no ILIKE '"+jTextField113.getText()+"%' and
                 * last_visit > '"+datePicker1.getDate()+"'::DATE - 100 order by
                 * second_name"); searchRowSet2.execute("SELECT patient_no,
                 * name, year_of_birth, residence from patient_select where
                 * patient_no ILIKE '"+jTextField113.getText()+"%' order by
                 * patient_no");
                 *
                 * jSearchTable2.setModel(new
                 * org.netbeans.lib.sql.models.TableModel(searchRowSet2, new
                 * org.netbeans.lib.sql.models.TableModel.Column[] { new
                 * org.netbeans.lib.sql.models.TableModel.Column("patient_no",
                 * "Patient no", false), new
                 * org.netbeans.lib.sql.models.TableModel.Column("name", "Name",
                 * false) // new
                 * org.netbeans.lib.sql.models.TableModel.Column("year_of_birth",
                 * "Year of birth", false), // new
                 * org.netbeans.lib.sql.models.TableModel.Column("residence",
                 * "Residence", false) }));
                 */
                jSearchTable2.setShowHorizontalLines(false);
                jSearchScrollPane2.setViewportView(jSearchTable2);



            }
        } else {
            if (this.jCheckBox1.isSelected() && this.jCheckBox4.isSelected()) {
                if (jTextField113.getCaretPosition() < 3) {
                    System.out.println("Nothing");
                } else {
                    jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register where (upper(second_name||' '||first_name||' '||last_name)) ILIKE '%" + jTextField113.getText() + "%' AND last_visit::DATE >= (select current_timestamp(0)::date -2) order by name LIMIT 10"));

                    /*
                     * try {
                     *
                     * // searchRowSet2.execute("SELECT patient_no,
                     * (upper(second_name||' '||first_name||' '||last_name)) as
                     * name, year_of_birth, residence from hp_patient_register
                     * where second_name||' '||first_name||' '||last_name ILIKE
                     * '"+jTextField113.getText()+"%' and last_visit >
                     * '"+datePicker1.getDate()+"'::DATE - 100 order by
                     * second_name"); searchRowSet2.execute("SELECT patient_no,
                     * name, year_of_birth, residence from patient_select where
                     * name ILIKE '"+jTextField113.getText()+"%' order by
                     * name");
                     *
                     * jSearchTable2.setModel(new
                     * org.netbeans.lib.sql.models.TableModel(searchRowSet2, new
                     * org.netbeans.lib.sql.models.TableModel.Column[] { new
                     * org.netbeans.lib.sql.models.TableModel.Column("patient_no",
                     * "Patient no", false), new
                     * org.netbeans.lib.sql.models.TableModel.Column("name",
                     * "Name", false) // new
                     * org.netbeans.lib.sql.models.TableModel.Column("year_of_birth",
                     * "Year of birth", false), // new
                     * org.netbeans.lib.sql.models.TableModel.Column("residence",
                     * "Residence", false) }));
                     */
                    jSearchTable2.setShowHorizontalLines(false);
                    jSearchScrollPane2.setViewportView(jSearchTable2);



                }
            }
        }

        /*
         * if(jTextField113.getCaretPosition() > 3){ try {
         *
         * searchRowSet2.execute("SELECT patient_no, (upper(second_name||'
         * '||first_name||' '||last_name)) as name, year_of_birth, residence
         * from hp_patient_register where second_name||' '||first_name||'
         * '||last_name ILIKE '"+jTextField113.getText()+"%' and last_visit >
         * '"+datePicker1.getDate()+"'::DATE - 5 order by second_name");
         *
         * jSearchTable2.setModel(new
         * org.netbeans.lib.sql.models.TableModel(searchRowSet2, new
         * org.netbeans.lib.sql.models.TableModel.Column[] { new
         * org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient
         * no", false), new
         * org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),
         * new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth",
         * "Year of birth", false), new
         * org.netbeans.lib.sql.models.TableModel.Column("residence",
         * "Residence", false) })); jSearchTable2.setShowHorizontalLines(false);
         * jSearchScrollPane2.setViewportView(jSearchTable2);
         *
         *
         * } catch(java.sql.SQLException sqlExec) {
         *
         * javax.swing.JOptionPane.showMessageDialog(this,
         * sqlExec.getMessage());
         *
         * }
         * }
         */// Add your handling code here:
}//GEN-LAST:event_jTextField113CaretUpdate

    private void jSearchTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2MouseClicked

        dates();

        for (int k = 0; k < jTable1.getRowCount(); k++) {
            for (int r = 0; r < jTable1.getColumnCount(); r++) {
                jTable1.getModel().setValueAt(null, k, r);
            }
        }        //        this.jComboBox131.setSelectedItem(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());

        jEditorPane2.setText("");
        String Paymode = null;

        jTextField5.setText("");
        jTextField141.setText("0");

        jTextField1.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
        jTextField9.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0).toString());

        jSearchDialog2.dispose();
        try {




            java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode,residence,((select current_timestamp(0)::date) - year_of_birth::date)/365 from hp_patient_register where patient_no  ='" + jTextField9.getText() + "'");
            while (rset1.next()) {
                jTextField141.setText(rset1.getObject(3).toString());
                jTextField5.setText(rset1.getObject(2).toString());
                jTextField141.setText(rset1.getObject(4).toString());
            }

            java.sql.Statement stmt1c = connectDB.createStatement();
            java.sql.ResultSet rset1c = stmt1c.executeQuery("select initcap(diagnosis),initcap(disease) from hp_patient_diagnosis where patient_no  ='" + jTextField9.getText() + "' AND date_recorded::DATE = (select current_timestamp(0)::date)");
            while (rset1c.next()) {
                jEditorPane2.setText(rset1c.getObject(1).toString() + "\n" + rset1c.getObject(2).toString());

            }

            /*
             * java.sql.Statement stmt1x = connectDB.createStatement();
             * java.sql.ResultSet rset1x = stmt1x.executeQuery("select doctor
             * FROM pb_doctors_request where patient_no ='" +
             * jTextField9.getText() + "' AND trans_date >
             * ('"+datePicker1.getDate()+"'::DATE - 2)"); while (rset1x.next())
             * { jTextField36.setText(rset1x.getObject(1).toString());
             *
             * }
             */
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }

        if (this.jTextField5.getText().toString().equalsIgnoreCase("Scheme")) {
            try {


                java.sql.Statement stmt1 = connectDB.createStatement();
                // java.sql.ResultSet rset1 = stmt1.executeQuery("select slip_no,nr_no from credit_acc_slip where patient_no  ='"+jTextField9.getText()+"' and date ='"+datePicker1.getDate()+"'::DATE");


            } catch (java.sql.SQLException sqe) {
                sqe.printStackTrace();
                //  System.out.println("Insert not successful");
            }

        }

        if (this.jTextField5.getText().equals("Cash")) {
        } else {
            /*
             * if(!(this.jTextField5.getText().equals("Cash"))){
             * this.jButton1.setVisible(false);
             * this.jButton13.setVisible(false);
             * this.jButton14.setVisible(false); this.jButton2.setVisible(true);
             * this.jButton21.setVisible(true);
             * this.jButton211.setVisible(true); }
             */
        }

        /*
         * try {
         *
         *
         * java.sql.Statement stmt1 = connectDB.createStatement();
         * java.sql.ResultSet rset1 = stmt1.executeQuery("select sum(amount)
         * from hp_pharmacy where patient_no ='" + jTextField9.getText() + "'
         * and paid = false"); while (rset1.next()) {
         * jTextField3.setText(rset1.getObject(1).toString());
         * //jTextField5.setText(rset1.getObject(2).toString()); } } catch
         * (java.sql.SQLException sqe) { sqe.printStackTrace(); //
         * System.out.println("Insert not successful"); }
         */
        this.populateTable1(this.jTextField9.getText());

        // Add your handling code here:
}//GEN-LAST:event_jSearchTable2MouseClicked

    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed
        this.jSearchDialog2.dispose();           // Add your handling code here:
}//GEN-LAST:event_jButton52ActionPerformed

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        if (jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 1) != null) {
            if (jTable1.getSelectedColumn() == jTable1.getSelectedColumn()) {
                float qty = java.lang.Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());
                float price = java.lang.Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 6).toString());
                float total = qty * price;
                jTable1.setValueAt(total, jTable1.getSelectedRow(), 12);
                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable1, 12);
                jTextField15.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                jTextField15.setText(java.lang.String.valueOf(totalSum));
            }

        }        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1KeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        java.util.Calendar calendar = java.util.Calendar.getInstance();

        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

        System.out.println(datenowSql1.toString());

        java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

        System.out.println(datenowSql.toString());
        //   try{
        String billNo = null;
        String transNo = null;
        String payMode = null;
        String patientAcc = null;
        String cardNo = null;
        String AccDesc = null;
        String scheme = null;
        String cardName = null;
        String isurer = null;
        String expDate = null;
        String staffNo = null;
        String glAcc = null;
        String user = null;
        String accDesc1 = null;
        String glAcc1 = null;
        String chbox = null;
        String units = null;
        String gacc = null;
        String request = null;
        int itemInt = 0;
        double price = 0.00;
        String Store = null;
        double qty = 0.00;
        String glCode = null;
        String actCode = null;
        double amount = 0.00;
        double sellPrice = 0.00;
        java.util.Date admDate = null;
        String visitid = "-";
        java.util.Date adDate = null;
        String opvisitid = "-";

        try {
            connectDB.setAutoCommit(false);
            java.sql.Statement stm12t = connectDB.createStatement();

            java.sql.Statement stm12 = connectDB.createStatement();
            java.sql.Statement stm121 = connectDB.createStatement();
            java.sql.Statement stm1211 = connectDB.createStatement();
            java.sql.Statement stm122 = connectDB.createStatement();
            java.sql.Statement stm122x = connectDB.createStatement();
            java.sql.Statement stm1 = connectDB.createStatement();


            java.sql.Statement ps11 = connectDB.createStatement();
            java.sql.ResultSet rst11 = ps11.executeQuery("SELECT current_user");
            while (rst11.next()) {
                user = rst11.getObject(1).toString();
            }

            java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
            while (rse12.next()) {
                patientAcc = rse12.getObject(1).toString();
                AccDesc = rse12.getObject(2).toString();
            }
            java.sql.Statement stm121q = connectDB.createStatement();


            
            if (jTable1.isEditing()) {
                jTable1.getCellEditor().stopCellEditing();
            }
            //int i = jTable1.getSelectedRow();
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                if (jTable1.getModel().getValueAt(i, 7) != null) {
                    if (Boolean.valueOf(jTable1.getModel().getValueAt(i, 9).toString()) == java.lang.Boolean.TRUE) {

                        java.sql.ResultSet rse121 = stm121q.executeQuery("SELECT DISTINCT gl_account,main_service FROM pb_operating_parameters pb, pb_activity pa WHERE pb.gl_account = pa.code AND pa.department ILIKE 'LAB' AND service_type = '"+jTable1.getModel().getValueAt(i, 4)+"'");

            while (rse121.next()) {

                actCode = rse121.getObject(1).toString();
                glAcc = rse121.getObject(2).toString();
            }
                        java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("INSERT INTO "
                                + " hp_patient_billing VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,trim(?))");

                        pstmt2.setString(1, jTable1.getValueAt(i, 1).toString());
                        pstmt2.setString(2, jTable1.getValueAt(i, 2).toString());
                        pstmt2.setString(3, jTable1.getValueAt(i, 3).toString());
                        pstmt2.setString(4, "General");
                        pstmt2.setString(5, jTable1.getValueAt(i, 4).toString());
                        pstmt2.setDouble(6, java.lang.Double.valueOf(jTable1.getValueAt(i, 5).toString()));
                        pstmt2.setDouble(7, java.lang.Double.valueOf(jTable1.getValueAt(i, 6).toString()));
                        pstmt2.setObject(8, actCode);
                        pstmt2.setDate(9, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(jTable1.getValueAt(i, 0).toString())));
                        pstmt2.setString(10, jTable1.getValueAt(i, 7).toString());
                        pstmt2.setString(11, user);
                        pstmt2.setBoolean(12, false);
                        pstmt2.setString(13, glAcc);
                        pstmt2.setString(14, "");
                        pstmt2.setString(15, jTable1.getValueAt(i, 7).toString());
                        pstmt2.executeUpdate();


                        java.sql.PreparedStatement pstmt46c = connectDB.prepareStatement("UPDATE hp_patient_billing SET collected = true,paid = false where inpatient_no = '" + jTable1.getValueAt(i, 7).toString() + "' AND service = '" + jTable1.getValueAt(i, 4).toString() + "'");
                        pstmt46c.executeUpdate();

                    } else {
                        java.sql.PreparedStatement pstmt46c = connectDB.prepareStatement("UPDATE hp_patient_billing SET quantity = '" + jTable1.getValueAt(i, 5) + "', amount = '" + jTable1.getValueAt(i, 12) + "', collected = true,paid = true  WHERE inpatient_no = '" + jTable1.getValueAt(i, 7).toString() + "' AND service = '" + jTable1.getValueAt(i, 4).toString() + "'");
                        pstmt46c.executeUpdate();
                        java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_doctors_request SET paid = false,collected = false,"
                                + "amount = '" + jTable1.getValueAt(i, 6).toString() + "',quantity = '" + jTable1.getValueAt(i, 5).toString() + "' where inv_no = '" + jTable1.getValueAt(i, 7).toString() + "' AND service = '" + jTable1.getValueAt(i, 4).toString() + "'");
                        pstmt46.executeUpdate();
                    }
                }
            }
            //}
            javax.swing.JOptionPane.showMessageDialog(this, "Insert Successful", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            for (int k = 0; k < jTable1.getRowCount(); k++) {
                for (int r = 0; r < jTable1.getColumnCount(); r++) {
                    jTable1.getModel().setValueAt(null, k, r);
                }
            }

            // }


            //}
            connectDB.commit();
            connectDB.setAutoCommit(true);



        } catch (java.sql.SQLException sq) {

            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField112CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField112CaretUpdate

        if (jTextField112.getCaretPosition() < 2) {

            System.out.println("Nothing");
        } else {
            jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select service_type,rate as price,gl_account as gl_code FROM pb_operating_parameters WHERE  service_type ILIKE '%" + jTextField112.getText() + "%' AND main_service ILIKE '%lab%'"));


            jSearchScrollPane.setViewportView(jSearchTable);
            System.out.println("Cannot sort out");

        }


        // Add your handling code here:
    }//GEN-LAST:event_jTextField112CaretUpdate

    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0), jTable1.getSelectedRow(), 4);
        jTable1.setValueAt(1, jTable1.getSelectedRow(), 5);
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1), jTable1.getSelectedRow(), 6);
        //jTable1.setValueAt(jTextField9.getText(), jTable1.getSelectedRow(), 1);
        jTable1.setValueAt(jTextField1.getText(), jTable1.getSelectedRow(), 2);
        jTable1.setValueAt(jTextField5.getText(), jTable1.getSelectedRow(), 3);

        try {

            java.sql.Statement stmtTable1 = connectDB.createStatement();

            java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT current_time::TIME(0),current_user,"
                    + "'O'||nextval('billing_no_seq'),'" + this.datePicker1.getDate() + "'::date,"
                    + "'WK'||nextval('prescription_no')");

            while (rsetTable1.next()) {
                jTable1.setValueAt(rsetTable1.getObject(5), jTable1.getSelectedRow(), 1);
                jTextField9.setText(rsetTable1.getString(5));
                jTable1.setValueAt(rsetTable1.getObject(4), jTable1.getSelectedRow(), 0);
                jTable1.setValueAt(rsetTable1.getObject(1), jTable1.getSelectedRow(), 11);
                jTable1.setValueAt(rsetTable1.getObject(2), jTable1.getSelectedRow(), 8);
                jTable1.setValueAt(rsetTable1.getObject(3), jTable1.getSelectedRow(), 7);

            }
        } catch (java.sql.SQLException sql) {
            javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        double floatCol2 = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());

        double floatCol3 = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 6).toString());

        double resVal = floatCol2 * floatCol3;


        jTable1.setValueAt(new java.lang.Float(resVal), jTable1.getSelectedRow(), 12);
        double resFloat = 0.00;


        for (int i = 0; i < jTable1.getRowCount(); i++) {

            if (jTable1.getValueAt(i, 0) != null) {//toString().compareToIgnoreCase(null) {

                resFloat = resFloat + Double.parseDouble(jTable1.getValueAt(i, 12).toString());


                jTextField15.setText(java.lang.String.valueOf(resFloat));

            }
        }


        // resFloat = resVal+resFloat + Double.parseDouble(jTable1.getValueAt( jTable1.getSelectedRow(), 3).toString());

        for (int k = 0; k < jSearchTable.getRowCount(); k++) {
            for (int r = 0; r < jSearchTable.getColumnCount(); r++) {
                jSearchTable.setValueAt(null, k, r);
            }
        }

        jSearchDialog.dispose();   // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked

    private void jButton92ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton92ActionPerformed
        jSearchDialog.dispose(); // Add your handling code here:
    }//GEN-LAST:event_jButton92ActionPerformed
    public void tableModelTableChanged(javax.swing.event.TableModelEvent evt) {
        /*
         * // double totals = 0.00; double totals =
         * Double.parseDouble(jTextField1.getText()); int i = 0;
         *
         * for (int j = 0; j < jTable1.getRowCount(); j++) {
         *
         * System.out.println(jTable1.getModel().getValueAt(j, 4).toString());
         *
         * if (Boolean.valueOf(jTable1.getModel().getValueAt(j, 4).toString())
         * == java.lang.Boolean.FALSE) {
         *
         * totals = totals - Double.parseDouble(jTable1.getModel().getValueAt(j,
         * 3).toString());
         *
         * i++; } }
         *
         * jTextField1.setText(Double.toString(totals));
         *
         * // jTextField2.setText(Integer.toString(i));
         *
         * System.out.println(totals);
         *
         * System.out.println(i);
         *
         * System.out.println("This table has changed");
         */
    }

    private void populateTable1(java.lang.String patient_no) {
        int j = 0;
        int i = 0;
        int n = 0;

        try {
            java.sql.Statement stmtTable1 = connectDB.createStatement();

            // java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select trans_date,patient_no,patient_name,payment_mode,service,quantity,amount,inv_no,doctor,'false' as bill,bed_no,time_due from pb_doctors_request pb, pb_operating_parameters op WHERE pb.service = op.service_type AND op.category ILIKE 'Pop' AND paid = false AND collected = false and trans_date>=  (select current_timestamp(0)::date -2) ORDER BY trans_date asc");
            java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT trans_date::DATE,patient_no,patient_name,pb.payment_mode,service,quantity,amount/quantity,inpatient_no,user_name,paid as seen,visit_id,trans_date::DATE,amount FROM hp_patient_billing pb, pb_activity pa WHERE pb.gl_code = pa.code AND pa.department ILIKE 'LAB' AND collected = false AND pb.trans_date::DATE  >=  (select current_timestamp(0)::date -2) AND patient_no = '" + jTextField9.getText() + "' ORDER BY trans_date::DATE asc");


            while (rsetTable1.next()) {

                jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                jTable1.setValueAt(rsetTable1.getObject(2), i, 1);
                jTable1.setValueAt(rsetTable1.getObject(3), i, 2);
                jTable1.setValueAt(rsetTable1.getObject(4), i, 3);
                jTable1.setValueAt(rsetTable1.getObject(5), i, 4);
                jTable1.setValueAt(rsetTable1.getObject(6), i, 5);
                jTable1.setValueAt(rsetTable1.getObject(7), i, 6);
                jTable1.setValueAt(rsetTable1.getObject(8), i, 7);
                jTable1.setValueAt(rsetTable1.getObject(9), i, 8);
                jTable1.setValueAt(rsetTable1.getObject(10), i, 9);
                jTable1.setValueAt(rsetTable1.getObject(11), i, 10);
                jTable1.setValueAt(rsetTable1.getObject(12), i, 11);
                jTable1.setValueAt(rsetTable1.getObject(13), i, 12);

                i++;

            }

            //}




        } catch (java.sql.SQLException sqlExec) {

            sqlExec.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
    }

    public void run() {

        while (getList) {

            runGetListThread();

            try {

                Thread.currentThread().sleep(10000);

            } catch (java.lang.InterruptedException IntExec) {

                javax.swing.JOptionPane.showMessageDialog(this, IntExec.getMessage(), "Interruption Error!", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

            // getList = false;

        }

    }

    public void runGetListThread() {

        int j = 0;
        int i = 0;
        int n = 0;
        int patNo = 0;
        try {

            java.sql.Statement stmtTable11 = connectDB.createStatement();

            // java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select date,patient_no,name,payment,'false' as bill from hp_patient_visit where transaction_type ilike 'reg%' and date = '"+datePicker1.getDate()+"'::DATE  ORDER BY date");
            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT DISTINCT count(patient_no) FROM hp_patient_billing pb,pb_activity pa WHERE pb.gl_code = pa.code AND pa.department ILIKE 'LAB' AND collected = false AND trans_date::DATE > (select current_timestamp(0)::date - 2)");

            while (rsetTable11.next()) {
                patNo = rsetTable11.getInt(1);

            }


        } catch (java.sql.SQLException sqlExec) {

            sqlExec.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
        if (patNo > 5) {

            this.jLabel1.setText("Queue Long '" + patNo + "' Patients Are Waiting For Lab Test");
            this.jLabel1.setForeground(new java.awt.Color(255, 0, 51));
        } else {
            this.jLabel1.setText("Queue Going Smoothly Only '" + patNo + "' Patients Waiting for Lab Test");
            this.jLabel1.addNotify();


            this.jLabel1.setForeground(new java.awt.Color(51, 51, 255));
        }

    }

    public void dates() {
        try {
            String dates = null;
            java.sql.Statement ps11w1 = connectDB.createStatement();
            java.sql.ResultSet rst11w1 = ps11w1.executeQuery("  (select current_timestamp(0)::date -2)");
            while (rst11w1.next()) {


                dates = rst11w1.getObject(1).toString();

                System.out.println("What is the day today " + dates);
            }
        } catch (java.sql.SQLException sqlExec) {

            sqlExec.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }


    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton52;
    private javax.swing.JButton jButton92;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox31;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JEditorPane jEditorPane2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel131;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JDialog jSearchDialog2;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTable jSearchTable2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField112;
    private javax.swing.JTextField jTextField113;
    private javax.swing.JTextField jTextField141;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JButton searchButton;
    // End of variables declaration//GEN-END:variables
}
