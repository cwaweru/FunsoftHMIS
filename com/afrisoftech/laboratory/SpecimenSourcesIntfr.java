/*
 * offintfr.java
 *
 * Created on August 13, 2002, 1:55 AM
 */
package com.afrisoftech.laboratory;

/**
 *
 * @author root
 */
public class SpecimenSourcesIntfr extends javax.swing.JInternalFrame {

    /**
     * Creates new form offintfr
     */
    private javax.swing.JComboBox cmbox;
    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;

    public SpecimenSourcesIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        try{
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }
        saveDataBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        closeFormBtn = new javax.swing.JButton();
        clearFormBtn = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        specimenSourcesScrollPane = new javax.swing.JScrollPane();
        specimenSourceTable = new com.afrisoftech.dbadmin.JTable();
        removeRowBtn = new javax.swing.JButton();
        spacerLabel = new javax.swing.JLabel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setTitle("Laboratory Specimens Sources");
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        saveDataBtn.setMnemonic('O');
        saveDataBtn.setText("Save specimen sources data");
        saveDataBtn.setToolTipText("Click here to enter data");
        saveDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDataBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(saveDataBtn, gridBagConstraints);

        editBtn.setMnemonic('E');
        editBtn.setText("Edit data");
        editBtn.setToolTipText("click to edit&update");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(editBtn, gridBagConstraints);

        closeFormBtn.setMnemonic('C');
        closeFormBtn.setText("Close form");
        closeFormBtn.setToolTipText("click to close");
        closeFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(closeFormBtn, gridBagConstraints);

        clearFormBtn.setMnemonic('l');
        clearFormBtn.setText("Clear form");
        clearFormBtn.setToolTipText("Click to clear fields");
        clearFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(clearFormBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jSeparator1, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Utopia", 3, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jLabel4, gridBagConstraints);

        mainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Set  lab specimen sources here.", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(0, 51, 255))); // NOI18N
        mainPanel.setLayout(new java.awt.GridBagLayout());

        specimenSourceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Specimen Source Code", "Specimen Source Description", "Specimen Source Comments"
            }
        ));

        specimenSourcesScrollPane.setViewportView(specimenSourceTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainPanel.add(specimenSourcesScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 500.0;
        getContentPane().add(mainPanel, gridBagConstraints);

        removeRowBtn.setMnemonic('R');
        removeRowBtn.setText("Remove row");
        removeRowBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRowBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(removeRowBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(spacerLabel, gridBagConstraints);

        setBounds(0, 0, 600, 350);
    }// </editor-fold>//GEN-END:initComponents

    private void removeRowBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRowBtnActionPerformed
        int rows2Delete = specimenSourceTable.getSelectedRowCount();

        int[] selectedRows = specimenSourceTable.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) specimenSourceTable.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) specimenSourceTable.getModel();

                defTableModel.removeRow(specimenSourceTable.getSelectedRow());
            }
        } // Add your handling code here:
    }//GEN-LAST:event_removeRowBtnActionPerformed
    private void cmboxActionPerformed(java.awt.event.ActionEvent evt) {
        int i = specimenSourceTable.getSelectedRow();

        try {
            //java.sql.Connection con = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/hospital","postgres","pilsiner");
            java.sql.Statement pstmt = connectDB.createStatement();
            java.sql.ResultSet rs = pstmt.executeQuery("select first_name||' '||middle_name||' '||last_name from member where m_number = '" + cmbox.getSelectedItem() + "'");
            while (rs.next()) {
                //jTextField4.setText(rs.getObject(1).toString());
                specimenSourceTable.setValueAt(rs.getObject(1), i, 1);
            }
        } catch (java.sql.SQLException sqlex) {
            sqlex.printStackTrace();
            System.out.println(sqlex.getMessage());
        }

    }
    private void closeFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFormBtnActionPerformed
        setVisible(false);  // Add your handling code here:
    }//GEN-LAST:event_closeFormBtnActionPerformed

    private void clearFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFormBtnActionPerformed
        for (int k = 0; k < specimenSourceTable.getRowCount(); k++) {
            for (int r = 0; r < specimenSourceTable.getColumnCount(); r++) {
                specimenSourceTable.getModel().setValueAt(null, k, r);
            }
        }// Add your handling code here:
    }//GEN-LAST:event_clearFormBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        specimenSourceTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT specimen_source_code,specimen_source_description,specimen_source_comment FROM pb_lab_specimen_source ORDER BY 2"));

        saveDataBtn.setText("Update");
//              javax.swing.JFrame off = new com.afrisoftech.laboratory.Specimen(connectDB, pConnDB);
//          off.setVisible(true);  // Add your handling code here:
    }//GEN-LAST:event_editBtnActionPerformed

    private void saveDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDataBtnActionPerformed
        java.util.Calendar calendar = java.util.Calendar.getInstance();

        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql = new java.sql.Date(dateNow);

        System.out.println(datenowSql.toString());

        try {


            if (saveDataBtn.getText().equalsIgnoreCase("update")) {

                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("UPDATE pb_lab_specimen_source SET specimen_source_description = ? , specimen_source_comment = ? WHERE specimen_source_code = ?");
                for (int i = 0; i < specimenSourceTable.getRowCount(); i++) {
                    if (specimenSourceTable.getModel().getValueAt(i, 0) != null) {
                        pstmt.setObject(1, specimenSourceTable.getValueAt(i, 1));
                        pstmt.setObject(2, specimenSourceTable.getValueAt(i, 2));
                        pstmt.setObject(3, specimenSourceTable.getValueAt(i, 0));
                    }
                    pstmt.executeUpdate();
                }

                
                jLabel4.setForeground(java.awt.Color.blue);
                javax.swing.JOptionPane.showMessageDialog(this, "UPDATE SUCCESSFUL", "Information Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            } else {
                for (int i = 0; i < specimenSourceTable.getRowCount(); i++) {

                    if (specimenSourceTable.getModel().getValueAt(i, 0) != null) {
                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into pb_lab_specimen_source (specimen_source_code, specimen_source_description, \n"
                                + "            specimen_source_comment) values(?,?,?)");
                        pstmt.setObject(1, specimenSourceTable.getValueAt(i, 0).toString());
                        pstmt.setObject(2, specimenSourceTable.getValueAt(i, 1).toString());
                        pstmt.setObject(3, specimenSourceTable.getValueAt(i, 2).toString());
                        pstmt.execute();
                    }

                }

                jLabel4.setForeground(java.awt.Color.blue);
                javax.swing.JOptionPane.showMessageDialog(this, "Data registered successfully", "Information Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (java.sql.SQLException sq) {
            sq.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

        } // Add your handling code here:
    }//GEN-LAST:event_saveDataBtnActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearFormBtn;
    private javax.swing.JButton closeFormBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton removeRowBtn;
    private javax.swing.JButton saveDataBtn;
    private javax.swing.JLabel spacerLabel;
    private javax.swing.JTable specimenSourceTable;
    private javax.swing.JScrollPane specimenSourcesScrollPane;
    // End of variables declaration//GEN-END:variables
}
