/*
 * offintfr.java
 *
 * Created on August 13, 2002, 1:55 AM
 */

package com.afrisoftech.laboratory;

import static com.afrisoftech.hospinventory.StockGroupsintfr.connectDB;

/**
 *
 * @author  root
 */
public class LabParametersIntfr extends javax.swing.JInternalFrame {
    
    /** Creates new form offintfr */
    private javax.swing.JComboBox cmbox;
   private javax.swing.JComboBox   cmbox6;
    private javax.swing.JComboBox   cmbox7;
    java.sql.Connection connectDB = null;
    
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    
    
    public LabParametersIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {
        
        connectDB = connDb;
        
        pConnDB = pconnDB;
        
        initComponents();
       
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog2 = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        jTextField113 = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        jSearchTable2 = new com.afrisoftech.dbadmin.JTable();
        jButton52 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        try{
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new com.afrisoftech.dbadmin.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new com.afrisoftech.dbadmin.JTable();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        jSearchDialog2.setModal(true);
        jSearchDialog2.setUndecorated(true);
        jSearchDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        jTextField113.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField113CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel2.add(jTextField113, gridBagConstraints);

        jSearchTable2.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable2.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable2MouseClicked(evt);
            }
        });
        jSearchScrollPane2.setViewportView(jSearchTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

        jButton52.setText("Dispose");
        jButton52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton52, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog2.getContentPane().add(jSearchPanel2, gridBagConstraints);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Lab Parameters");
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jButton1.setMnemonic('O');
        jButton1.setText("Save");
        jButton1.setToolTipText("Click here to enter data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton1, gridBagConstraints);

        jButton2.setMnemonic('E');
        jButton2.setText("Edit");
        jButton2.setToolTipText("click to edit&update");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton2, gridBagConstraints);

        jButton3.setMnemonic('C');
        jButton3.setText("Close");
        jButton3.setToolTipText("click to close");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton3, gridBagConstraints);

        jButton4.setMnemonic('l');
        jButton4.setText("Clear");
        jButton4.setToolTipText("Click to clear fields");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jSeparator1, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Utopia", 3, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jLabel4, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Set lab parameters and their standards  here.", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(0, 0, 255))); // NOI18N
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Test Code", "Test", "Parameter", "Lower Limit", "Upper Limit", "Units", "Discipline", "Status", "Specimen", "Parameter Order", "Code"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true, true, true, true, true, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cmbox6 = new javax.swing.JComboBox();
        cmbox6.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT discipline from pb_lab_disciplines ORDER BY 1"));
        javax.swing.table.TableColumn seditor2 = this.jTable2.getColumn("Discipline");
        seditor2.setCellEditor(new javax.swing.DefaultCellEditor(cmbox6));

        cmbox7 = new javax.swing.JComboBox();
        cmbox7.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT specimen from pb_lab_specimen ORDER BY 1"));
        javax.swing.table.TableColumn seditor21 = this.jTable2.getColumn("Specimen");
        seditor21.setCellEditor(new javax.swing.DefaultCellEditor(cmbox7));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jScrollPane2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jPanel3, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Parameter"
            }
        ));

        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jScrollPane1, gridBagConstraints);

        jLabel1.setText("Normal Range");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 100, 0, 0);
        jPanel2.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jPanel1.add(jPanel4, gridBagConstraints);

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("DISCIPLINE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 36, 0, 0);
        jPanel5.add(jLabel3, gridBagConstraints);

        jComboBox1.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT discipline FROM pb_lab_disciplines order by 1"));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 10, 0, 0);
        jPanel5.add(jComboBox1, gridBagConstraints);

        jLabel5.setText("Last Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 36, 0, 0);
        jPanel5.add(jLabel5, gridBagConstraints);

        jTextField1.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 10);
        jPanel5.add(jTextField1, gridBagConstraints);

        jPanel6.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        buttonGroup3.add(jCheckBox2);
        jCheckBox2.setText("Without Values");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jCheckBox2, gridBagConstraints);

        buttonGroup3.add(jCheckBox1);
        jCheckBox1.setSelected(true);
        jCheckBox1.setText("With Values");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jCheckBox1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        jPanel5.add(jPanel6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(jPanel1, gridBagConstraints);

        jButton5.setMnemonic('R');
        jButton5.setText("RemoveRow");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jButton5, gridBagConstraints);

        jButton6.setText("Delete");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton6, gridBagConstraints);

        jButton7.setText("Reset order");
        jButton7.setEnabled(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 6;
        getContentPane().add(jButton7, gridBagConstraints);

        setBounds(0, 0, 928, 472);
    }// </editor-fold>//GEN-END:initComponents
    
    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed
        jSearchDialog2.dispose();      // Add your handling code here:
    }//GEN-LAST:event_jButton52ActionPerformed
    
    private void jSearchTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2MouseClicked
if(jCheckBox1.isSelected()){
      jTable2.setValueAt(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0).toString(),jTable2.getSelectedRow(),1);
      jTable2.setValueAt(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString(),jTable2.getSelectedRow(),10);
}  else{
   jTable2.setValueAt(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0).toString(),jTable2.getSelectedRow(),1);
      jTable2.setValueAt(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString(),jTable2.getSelectedRow(),7);
 
}
//    jTextField9.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0).toString());
        jSearchDialog2.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable2MouseClicked
    
    private void jTextField113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField113CaretUpdate
        if(jTextField113.getCaretPosition()<2) {}
        else{
            jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT service_type,code from pb_operating_parameters where service_type ILIKE '"+jTextField113.getText()+"%' and main_service ilike '%lab%' "));
            
            
            jSearchTable2.setShowHorizontalLines(false);
            jSearchScrollPane2.setViewportView(jSearchTable2);
            
        }
                 // Add your handling code here:
    }//GEN-LAST:event_jTextField113CaretUpdate
        private void searchButtonClicked2() {
        
        System.out.println("Showing dialog");
        
        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.jLabel3.getLocationOnScreen();
        
        jSearchDialog2.setSize(400,200);
        
        jSearchDialog2.setLocation(point);
        
        jSearchDialog2.show();
        
        
        
    }        
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        int rows2Delete = jTable2.getSelectedRowCount();
        
        int[] selectedRows = jTable2.getSelectedRows();
        
        if (rows2Delete < 1) {
            
            java.awt.Toolkit.getDefaultToolkit().beep();
            
            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");
            
        } else {
            
            if (rows2Delete > 1) {
                
                for (int i = 0; i < selectedRows.length; i++) {
                    
                    
                    
                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable2.getModel();
                    
                    defTableModel.removeRow(selectedRows[i]);
                    
                }
                
                
                
            } else {
                
                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable2.getModel();
                
                defTableModel.removeRow(jTable2.getSelectedRow());
            }
        } // Add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed
    private void cmboxActionPerformed(java.awt.event.ActionEvent evt){
        int i = jTable1.getSelectedRow();
        
        
        
        try {
            //java.sql.Connection con = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/hospital","postgres","pilsiner");
            java.sql.Statement pstmt = connectDB.createStatement();
            java.sql.ResultSet rs = pstmt.executeQuery("select first_name||' '||middle_name||' '||last_name from member where m_number = '"+cmbox.getSelectedItem()+"'");
            while (rs.next()){
                //jTextField4.setText(rs.getObject(1).toString());
                jTable1.setValueAt(rs.getObject(1),i,1);
            }
        } catch(java.sql.SQLException sqlex){
            System.out.println(sqlex.getMessage());
        }
        
        
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
//try {
//        java.sql.Statement stmtw1 = connectDB.createStatement();
//        java.sql.Statement stmtw1x = connectDB.createStatement();
//                        String code=null;
//                                java.sql.ResultSet rsetw1 = stmtw1.executeQuery(" select test from pb_lab_standards where test ilike 'Albumen'");
//                                while (rsetw1.next()) {
//                                    System.out.println( "The test...... "+rsetw1.getString(1));
//                                    
//                                     java.sql.ResultSet rsetw1x = stmtw1x.executeQuery(" select code from pb_operating_parameters where service_type ilike '"+ rsetw1.getString(1)+"' limit 1 ");
//                                      while (rsetw1x.next()) {
//                                          System.out.print( "The Code...... "+rsetw1x.getString(1));
//                                          java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_lab_standards SET code = '"+ rsetw1x.getString(1)+"' where test ilike '"+ rsetw1.getString(1)+"' ");
//                    pstmt46.executeUpdate();
//                                      }
//                                  
//                                }
//}
//catch (java.sql.SQLException sqlex){
//            System.out.println(sqlex.getMessage());
//        }
//        

                setVisible(false);  // Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        for (int k = 0; k < jTable2.getRowCount(); k++ ) {
            for (int r = 0; r < jTable2.getColumnCount(); r++ ) {
                jTable2.getModel().setValueAt(null,k,r);
            }
        }// Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
jButton1.setText("Update");

  for (int k = 0; k < jTable2.getRowCount(); k++) {
            for (int r = 0; r < jTable2.getColumnCount(); r++) {
                jTable2.getModel().setValueAt(null, k, r);
            }
        }
        int i = 0;
        if(jComboBox1.getSelectedItem().toString().equals("-")){
        if(jCheckBox1.isSelected()){
        jTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT \"paramater_ID\" as Parameter_ID,test, typeof_test as Parameter, lower_limit, upper_limit, units, specimen as Discipline, \n" +
"       status,specimen_source as Specimen ,parameter_order,code \n" +
"  FROM pb_lab_standards where status=true order by test,parameter_order   ;"));
        }
        else{
           jTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT \"paramater_ID\" as Parameter_ID,test, typeof_test as Parameter, specimen as Discipline, \n" +
"       status,specimen_source as Specimen ,parameter_order,code \n" +
"  FROM pb_lab_standards where status=false order by test,parameter_order   ;"));
        
        }
            
        }
        else{
             if(jCheckBox1.isSelected()){
            jTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT \"paramater_ID\" as Parameter_ID,test, typeof_test as Parameter, lower_limit, upper_limit, units, specimen as Discipline, \n" +
"       status,specimen_source as Specimen,parameter_order,code \n" +
"  FROM pb_lab_standards where specimen='"+jComboBox1.getSelectedItem().toString()+"' and status=true order by test,parameter_order "));
        }
             else{
                
            jTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT \"paramater_ID\" as Parameter_ID,test, typeof_test as Parameter,  specimen as Discipline, \n" +
"       status,specimen_source as Specimen,parameter_order,code  \n" +
"  FROM pb_lab_standards where specimen='"+jComboBox1.getSelectedItem().toString()+"' and status=false order by test,parameter_order "));
        
             }
        }
        
        
        
        cmbox6 = new javax.swing.JComboBox();
        cmbox6.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT discipline from pb_lab_disciplines ORDER BY 1"));
        javax.swing.table.TableColumn seditor2 = this.jTable2.getColumn("DISCIPLINE");
        seditor2.setCellEditor(new javax.swing.DefaultCellEditor(cmbox6));
       
       
       // javax.swing.table.TableColumn seditor2 = this.jTable2.getColumn("DISCIPLINE");
       //seditor2.setCellEditor(new javax.swing.DefaultCellEditor(cmbox6));
        
       //  javax.swing.table.TableColumn seditor21 = this.jTable2.getColumn("SPECIMEN");
       // seditor21.setCellEditor(new javax.swing.DefaultCellEditor(cmbox7));


        
        
        //       javax.swing.JFrame off = new Officials(connectDB, pConnDB);
        //  off.setVisible(true);  // Add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        java.util.Calendar calendar = java.util.Calendar.getInstance();
        
        long dateNow = calendar.getTimeInMillis();
        
        java.sql.Date datenowSql= new java.sql.Date(dateNow);
        
        System.out.println(datenowSql.toString());
        if(jButton1.getText().equals("Update")){
             
                      try
                      {
                          for (int i = 0; i < jTable2.getRowCount(); i++){
                    if (jTable2.getModel().getValueAt(i,0) != null){
                          if(jCheckBox1.isSelected()){
                         java.sql.PreparedStatement pstmt311 = connectDB.prepareStatement("UPDATE pb_lab_standards SET "
                                    + "test = '" + jTable2.getValueAt(i, 1).toString()+ "',"
                                    + "typeof_test = '" + jTable2.getValueAt(i, 2).toString() + "',lower_limit= '" + jTable2.getValueAt(i, 3).toString() + "',code= '" + jTable2.getValueAt(i, 10).toString() + "',upper_limit = '" + jTable2.getValueAt(i, 4).toString() + "',"
                                    + "units = '" + jTable2.getValueAt(i, 5).toString() + "',specimen = '" + jTable2.getValueAt(i, 6).toString() + "',status = '" + jTable2.getValueAt(i, 7) + "',parameter_order = '" + jTable2.getValueAt(i, 9) + "',specimen_source = '" + jTable2.getValueAt(i, 8).toString() + "' WHERE  \"paramater_ID\"= '" + jTable2.getModel().getValueAt(i, 0).toString() + "' ");
                          
                            pstmt311.executeUpdate();
                            
                          }
                          else{
                              System.out.println("Update for " + jTable2.getModel().getValueAt(i, 0).toString()+"     "+jTable2.getValueAt(i, 1).toString());
                              java.sql.PreparedStatement pstmt311 = connectDB.prepareStatement("UPDATE pb_lab_standards SET "
                                    + "test = '" + jTable2.getValueAt(i, 1).toString()+ "',"
                                    + "typeof_test = '" + jTable2.getValueAt(i, 2).toString() + "',"
                                    + "specimen = '" + jTable2.getValueAt(i, 3).toString() + "',status = '" + jTable2.getValueAt(i, 4) + "',code= '" + jTable2.getValueAt(i, 7).toString() + "',parameter_order = '" + jTable2.getValueAt(i, 6) + "',specimen_source = '" + jTable2.getValueAt(i, 5).toString() + "' WHERE  \"paramater_ID\"= '" + jTable2.getModel().getValueAt(i, 0).toString() + "' ");
                          
                            pstmt311.executeUpdate();
                          }
                           }
                    }
                           javax.swing.JOptionPane.showMessageDialog(this,"Update Done Successfully","Information Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                
                          jButton1.setText("Save");
                        
                          for (int k = 0; k < jTable2.getRowCount(); k++) {
                                    for (int r = 0; r < jTable2.getColumnCount(); r++) {
                                    jTable2.getModel().setValueAt(null, k, r);
                                    }
                                 }
                      }
                      catch(java.sql.SQLException sq){
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                      }
                   
            
        }
    else    { 
        if(this.jCheckBox1.isSelected()){
            try {
                connectDB.setAutoCommit(false);
                
                
                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into pb_lab_standards (typeof_test, lower_limit, upper_limit, units, date, specimen, \n" +
"            status, test, notes, code, specimen_source, parameter_order) values(?,?,?,?,?,?,?,?,?,?,?,?)");
                for (int i = 0; i < jTable2.getRowCount(); i++){
                    if (jTable2.getModel().getValueAt(i,0) != null && jTable2.getModel().getValueAt(i,1) != null){
                        if (jTable2.getModel().getValueAt(i,2) == null){
                            
                            javax.swing.JOptionPane.showMessageDialog(this,"Enter type of test","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                        }else{
                            pstmt.setObject(1,jTable2.getValueAt(i,2).toString());
                        }
                        if (jTable2.getModel().getValueAt(i,3) == null){
                            
                            javax.swing.JOptionPane.showMessageDialog(this,"Enter Lower Limit","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                        }else{
                            pstmt.setDouble(2,Double.valueOf(jTable2.getValueAt(i,3).toString()));
                            
                        }
                        pstmt.setDouble(3,Double.valueOf(jTable2.getValueAt(i,4).toString()));
                        
                        pstmt.setObject(4,jTable2.getValueAt(i,5).toString());
                        
                        
                        
                        pstmt.setDate(5, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.util.Calendar.getInstance().getTime()));
                        pstmt.setObject(6,jTable2.getValueAt(i,6).toString());
                        if(this.jCheckBox1.isSelected()){
                            pstmt.setBoolean(7,true);
                        }else{
                            
                            pstmt.setBoolean(7,false);
                        }
                        pstmt.setObject(8,jTable2.getValueAt(i,1).toString());
                        
                        java.sql.Statement stmtw1 = connectDB.createStatement();
                        String code=null;
                                java.sql.ResultSet rsetw1 = stmtw1.executeQuery("select code from pb_operating_parameters where service_type = '" +jTable2.getValueAt(i,1).toString() + "'");
                                while (rsetw1.next()) {
                                    code = rsetw1.getString(1);
                                }
                        
                         pstmt.setObject(10,jTable2.getValueAt(i,10).toString());
                         pstmt.setObject(9,"");
                         pstmt.setObject(11,jTable2.getValueAt(i,8).toString());
                         pstmt.setInt(12,Integer.valueOf((jTable2.getValueAt(i,9).toString())));
                        // javax.swing.JOptionPane.showMessageDialog(this,"Enter Machine No.","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                        pstmt.executeUpdate();
                        
                    }
                }
                
                connectDB.commit();
                connectDB.setAutoCommit(true);
                for (int k = 0; k < jTable2.getRowCount(); k++) {
                                    for (int r = 0; r < jTable2.getColumnCount(); r++) {
                                    jTable2.getModel().setValueAt(null, k, r);
                                    }
                                 }
                
                javax.swing.JOptionPane.showMessageDialog(this,"Insert Successful","Information Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                
            }   catch(java.sql.SQLException sq){
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                try {
                    connectDB.rollback();
                }catch (java.sql.SQLException sql){
                    javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }
            
        }else{
            
            try {
                connectDB.setAutoCommit(false);
                
                
                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into pb_lab_standards(typeof_test, lower_limit, upper_limit, units, date, specimen, \n" +
"            status, test, notes, code, specimen_source, parameter_order) values(?,?,?,?,?,?,?,?,?,?,?,?)");
                for (int i = 0; i < jTable2.getRowCount(); i++){
                    if (jTable2.getModel().getValueAt(i,0) != null && jTable2.getModel().getValueAt(i,1) != null){
                        if (jTable2.getModel().getValueAt(i,2) == null){
                            
                            javax.swing.JOptionPane.showMessageDialog(this,"Enter type of test","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                        }else{
                            pstmt.setObject(1,jTable2.getValueAt(i,2).toString());
                        }
                        
                        pstmt.setDouble(2,0.00);
                        
                        
                        pstmt.setDouble(3,0.00);
                        
                        pstmt.setObject(4,"-");
                        
                        
                        
                       
                        pstmt.setDate(5, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.util.Calendar.getInstance().getTime()));
                      //  pstmt.setObject(6,jTextField1.getText());
                        pstmt.setObject(6,jTable2.getValueAt(i,3).toString());
                        if(this.jCheckBox1.isSelected()){
                            pstmt.setBoolean(7,true);
                        }else{
                            
                            pstmt.setBoolean(7,false);
                        }
                        pstmt.setObject(8,jTable2.getValueAt(i,1).toString());
                        pstmt.setObject(9,"");
                        
                        
//                        java.sql.Statement stmtw1 = connectDB.createStatement();
//                        String code=null;
//                                java.sql.ResultSet rsetw1 = stmtw1.executeQuery("select code from pb_operating_parameters where service_type = '" +jTable2.getValueAt(i,1).toString() + "'");
//                                while (rsetw1.next()) {
//                                    code = rsetw1.getString(1);
//                                }
                        
                         pstmt.setObject(10,jTable2.getValueAt(i,7).toString());
                        
                        pstmt.setObject(11,jTable2.getValueAt(i,5).toString());
                         pstmt.setInt(12,Integer.valueOf((jTable2.getValueAt(i,6).toString())));
                        // javax.swing.JOptionPane.showMessageDialog(this,"Enter Machine No.","Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                        pstmt.executeUpdate();
                        
                    }
                }
                
                connectDB.commit();
                connectDB.setAutoCommit(true);
                
                javax.swing.JOptionPane.showMessageDialog(this,"Insert Successful","Information Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);
              
                for (int k = 0; k < jTable2.getRowCount(); k++) {
                                    for (int r = 0; r < jTable2.getColumnCount(); r++) {
                                    jTable2.getModel().setValueAt(null, k, r);
                                    }
                                 }
                      
            }   catch(java.sql.SQLException sq){
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                try {
                    connectDB.rollback();
                }catch (java.sql.SQLException sql){
                    javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }
        // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
 try {
            //java.sql.Connection con = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/hospital","postgres","pilsiner");
      java.sql.Statement pstmt = connectDB.createStatement();
            java.sql.ResultSet rs = pstmt.executeQuery("  SELECT \"paramater_ID\" FROM pb_lab_standards  order by 1 desc limit 1 ");
            while (rs.next()){
                jTextField1.setText(rs.getObject(1).toString());
                
            }
        } catch(java.sql.SQLException sqlex){
            System.out.println(sqlex.getMessage());
        }
        
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed

        for (int k = 0; k < jTable2.getRowCount(); k++) {
            for (int r = 0; r < jTable2.getColumnCount(); r++) {
                jTable2.getModel().setValueAt(null, k, r);
            }
        }
   jButton1.setText("Save");
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
    new Object [][] {
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null}
    },
    new String [] {
        "Test Code", "Test", "Parameter", "Lower Limit", "Upper Limit", "Units", "Discipline", "Status", "Specimen","Parameter Order","Code"
    }
) {
    Class[] types = new Class [] {
        java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class,java.lang.Object.class,java.lang.Object.class
    };
    boolean[] canEdit = new boolean [] {
        true, false, true, true, true, true, true, true, true,true,false
    };

    public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
    }

    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
    }
});
        
        javax.swing.table.TableColumn seditor2 = this.jTable2.getColumn("Discipline");
        seditor2.setCellEditor(new javax.swing.DefaultCellEditor(cmbox6));
        
         javax.swing.table.TableColumn seditor21 = this.jTable2.getColumn("Specimen");
        seditor21.setCellEditor(new javax.swing.DefaultCellEditor(cmbox7));

        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed

         for (int k = 0; k < jTable2.getRowCount(); k++) {
            for (int r = 0; r < jTable2.getColumnCount(); r++) {
                jTable2.getModel().setValueAt(null, k, r);
            }
        }
        jButton1.setText("Save");
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
    new Object [][] {
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null},
        {null, null, null, null, null, null, null, null, null}
        
    },
    new String [] {
        "Test Code", "Test", "Parameter",  "Discipline", "Status", "Specimen","Parameter Order","Code"
    }
) {
    Class[] types = new Class [] {
         java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class,java.lang.Object.class
    };
    boolean[] canEdit = new boolean [] {
            true, false, true, true, true, true,true
        };

    public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
    }

    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
    }
});
        
       javax.swing.table.TableColumn seditor2 = this.jTable2.getColumn("Discipline");
        seditor2.setCellEditor(new javax.swing.DefaultCellEditor(cmbox6));
        
         javax.swing.table.TableColumn seditor21 = this.jTable2.getColumn("Specimen");
        seditor21.setCellEditor(new javax.swing.DefaultCellEditor(cmbox7));

        
    
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
if(jTable2.getSelectedColumn()==1)
    searchButtonClicked2();
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable2MouseClicked

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
 int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "Do you want to Delete the Selected Test?", "Caution before Deleting!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

                if (exitOption == javax.swing.JOptionPane.YES_OPTION) {
        try{
          java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("DELETE FROM pb_lab_standards where \"paramater_ID\" = '"+jTable2.getValueAt(jTable2.getSelectedRow(), 0)+"' ");
                    pstmt46.executeUpdate();
                    

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)jTable2.getModel();
                     defTableModel.removeRow(jTable2.getSelectedRow());
                   
                     javax.swing.JOptionPane.showMessageDialog(this,"Deleted Successfully","Information Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                
                    
      }
    catch(java.sql.SQLException sqlex){
            System.out.println(sqlex.getMessage());
        }
                }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
try{
        java.sql.Statement pst = connectDB.createStatement();
        java.sql.Statement pstf = connectDB.createStatement();
        java.sql.ResultSet rstt = pst.executeQuery("SELECT distinct test  FROM pb_lab_standards  order by 1 ");
int i=0;
                        while (rstt.next()) {
                            i=1;
                            java.sql.ResultSet rsttf = pstf.executeQuery("SELECT typeof_test  FROM pb_lab_standards where test ='"+rstt.getString(1)+"'  order by 1 ");
                            while (rsttf.next()) {
                             java.sql.PreparedStatement pstmt46 = connectDB.prepareStatement("UPDATE pb_lab_standards SET parameter_order = '"+i+"' where typeof_test ='"+rsttf.getString(1)+"' ");
                         pstmt46.executeUpdate();
                         i++;
                            }
                        }
}
                   catch(java.sql.SQLException sqlex){
            System.out.println(sqlex.getMessage());
        }     
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton52;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JDialog jSearchDialog2;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JTable jSearchTable2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField113;
    // End of variables declaration//GEN-END:variables
    
}
