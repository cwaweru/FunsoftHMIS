/*
 * TableView.java
 *
 * Created on March 23, 2004, 9:30 AM
 */

package com.afrisoftech.nursingreports;

import com.afrisoftech.dbadmin.*;

/**
 *
 * @author  root
 */
public class NursingGraphicalView extends javax.swing.JInternalFrame implements java.lang.Runnable {
    
    /** Creates new form TableView */
    public boolean pieChart = false;
    
    public boolean xyChart = false;
    
    public boolean barChart = false;
    
    javax.swing.JTable columnSelectorTable = null;
    
    java.lang.String tableName = null;
    
    boolean dateFilterBoolean = false;
    
    java.lang.String customQueryString = null;
    
    javax.swing.JTable exportTable;
    
    java.lang.String chartQueryString;
    
    boolean exportTableBoolean = true;
    
    java.lang.Thread threadExportTable = null;
    
    java.awt.GridBagConstraints gridBagConstraints;
    
    java.sql.Connection connectDB = null;
    
    javax.swing.JTable dataViewTable = null;
    
    java.util.Vector dataViewVector;
    
    java.util.Vector columnVector;
    
    com.afrisoftech.lib.DBObject dbObject;
    
    java.util.Vector childVector;
    
    java.lang.String[] dataViewTableHeader;
    
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    
    com.afrisoftech.dbadmin.XMLExport xmlExport;
    
    com.afrisoftech.dbadmin.ExcelExport excelExport;
    
    com.afrisoftech.dbadmin.HTMLExport htmlExport;
    
    com.afrisoftech.dbadmin.PDFExport pdfExport;
    
    com.afrisoftech.hospital.HospitalMain hospitalMain = null;
    
    org.jfree.chart.ChartPanel chartPanel = null;
    
    public String chartTitle;
    
    public String xAxis = "X - Axis";
    
    public String yAxis = "Y - Axis";
      private final String ward;
    private  String patientNO="";
    private  java.lang.String type;
    private final String patientType;
    public NursingGraphicalView(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB, java.lang.String typee, java.lang.String wardd, java.lang.String patNO, java.lang.String patYPE) {
       ward = wardd;
         patientNO = patNO;
        patientType = patYPE;
        type = typee;
        this.setTitle("Charting for :- "+ward); 
        dbObject = new com.afrisoftech.lib.DBObject();
        
        connectDB = connDb;
        
        pConnDB = pconnDB;
       
        initComponents();
         nameNoTxt.setText(patientNO);
        datesPanel.setVisible(false);
         LoadTable();
/*        datePickerBegin.setVisible(false);
 
        datePickerEnd.setVisible(false);
 */
    
    
    }
    
     public void LoadTable() {
        switch (type) {
            case "out":
                occupancytable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                        + "SELECT patient_no AS Patient_No, name AS Name,comments as Patient_Visist,age,gender,urgency\n"
                        + "From  hp_patient_visit   \n"
                        + " where date::date>='" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(headerDatePicker.getDate()) + "'  and hp_patient_visit.clinic='" + ward + "'   AND discharge is null ORDER BY 1"
                ));
                occupyno.setText("No of Patients in " + ward + " is :" + occupancytable.getRowCount());
                break;
            case "in":
                occupancytable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, patient_name, bed_no, wing, date_admitted, admission_no FROM hp_admission  where discharge=false and ward='" + ward + "' and check_out=false;"));
                occupyno.setText("No of Patients in " + ward + " is :" + occupancytable.getRowCount());
                break;
        }
     }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroupGraphicalView = new javax.swing.ButtonGroup();
        actionsPanel = new javax.swing.JPanel();
        tableActionsPanel = new javax.swing.JPanel();
        printChart = new javax.swing.JButton();
        saveChart = new javax.swing.JButton();
        showData = new javax.swing.JButton();
        spacerPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        datesPanel = new javax.swing.JPanel();
        headerDatePicker = new com.afrisoftech.lib.DatePicker();
        datePickerEnd = new com.afrisoftech.lib.DatePicker();
        jLabelBeginDate = new javax.swing.JLabel();
        jLabelEndDate = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        occupancy = new javax.swing.JPanel();
        jPanel39 = new javax.swing.JPanel();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPane11 = new javax.swing.JScrollPane();
        occupancytable = new com.afrisoftech.dbadmin.JTable();
        occupyno = new javax.swing.JLabel();
        currentOccupRbtn = new javax.swing.JCheckBox();
        nameNoTxt = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        chartTable1 = new com.afrisoftech.dbadmin.JTable();
        tablePanel = new javax.swing.JPanel();
        jScrollPaneDBAdmin = new javax.swing.JScrollPane();
        jPanelTable = new javax.swing.JPanel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Database Graphical  Analyser");
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        actionsPanel.setLayout(new java.awt.GridBagLayout());

        tableActionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Export Actions"));
        tableActionsPanel.setLayout(new java.awt.GridBagLayout());

        printChart.setMnemonic('P');
        printChart.setText("Print Chart");
        printChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printChartActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        tableActionsPanel.add(printChart, gridBagConstraints);

        saveChart.setMnemonic('l');
        saveChart.setText("Save chart as ...");
        saveChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveChartActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        tableActionsPanel.add(saveChart, gridBagConstraints);

        showData.setMnemonic('M');
        showData.setText("Show data ...");
        showData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showDataActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        tableActionsPanel.add(showData, gridBagConstraints);

        spacerPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        spacerPanel.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 50.0;
        tableActionsPanel.add(spacerPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        actionsPanel.add(tableActionsPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(actionsPanel, gridBagConstraints);

        datesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Date Picker"));
        datesPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        datesPanel.add(headerDatePicker, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        datesPanel.add(datePickerEnd, gridBagConstraints);

        jLabelBeginDate.setText("Begin Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        datesPanel.add(jLabelBeginDate, gridBagConstraints);

        jLabelEndDate.setText("End Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        datesPanel.add(jLabelEndDate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(datesPanel, gridBagConstraints);

        occupancy.setLayout(new java.awt.GridBagLayout());

        jPanel39.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel39.add(jSeparator3, gridBagConstraints);

        occupancytable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT patient_no, patient_name, bed_no, wing, date_admitted, admission_no FROM hp_admission where discharge=false and ward='"+ward+"' "));
        occupancytable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                occupancytableMouseClicked(evt);
            }
        });
        jScrollPane11.setViewportView(occupancytable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel39.add(jScrollPane11, gridBagConstraints);

        occupyno.setText("SHOW NO OF TRAN,REC/OCC");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel39.add(occupyno, gridBagConstraints);

        currentOccupRbtn.setText("Occupancy");
        currentOccupRbtn.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                currentOccupRbtnItemStateChanged(evt);
            }
        });
        currentOccupRbtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                currentOccupRbtnMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel39.add(currentOccupRbtn, gridBagConstraints);

        nameNoTxt.setEditable(false);
        nameNoTxt.setBackground(new java.awt.Color(255, 255, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.5;
        jPanel39.add(nameNoTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        occupancy.add(jPanel39, gridBagConstraints);

        jTabbedPane1.addTab("Occupancy", occupancy);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setDividerSize(10);
        jSplitPane1.setOneTouchExpandable(true);

        chartTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT chart_description  FROM nursing_charts order by 1 asc;"));
        chartTable1.setRowHeight(25);
        chartTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chartTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(chartTable1);

        jSplitPane1.setLeftComponent(jScrollPane1);

        tablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Graphical Chart View"));
        tablePanel.setLayout(new java.awt.GridBagLayout());

        jScrollPaneDBAdmin.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPaneDBAdmin.setAutoscrolls(true);

        jPanelTable.setAutoscrolls(true);
        jPanelTable.setLayout(new java.awt.GridBagLayout());
        jScrollPaneDBAdmin.setViewportView(jPanelTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        tablePanel.add(jScrollPaneDBAdmin, gridBagConstraints);

        jSplitPane1.setRightComponent(tablePanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jSplitPane1, gridBagConstraints);

        jTabbedPane1.addTab("CHARTS & GRAPHS", jPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 550.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
                                    
    private void showDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showDataActionPerformed
        
        populateCustomQueryTable(chartQueryString);
        
        // Add your handling code here:
    }//GEN-LAST:event_showDataActionPerformed
    
    private void printChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printChartActionPerformed
        
        printChart();
        
        // Add your handling code here:
    }//GEN-LAST:event_printChartActionPerformed
    
    private void saveChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveChartActionPerformed
        
        saveChart();
        
        // Add your handling code here:
    }//GEN-LAST:event_saveChartActionPerformed

    private void chartTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chartTable1MouseClicked
     newLinkButtonActionPerformed( String.valueOf(chartTable1.getValueAt(chartTable1.getSelectedRow(), 0)));
    }//GEN-LAST:event_chartTable1MouseClicked

    private void occupancytableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_occupancytableMouseClicked
 this.nameNoTxt.setText(String.valueOf(this.occupancytable.getModel().getValueAt(this.occupancytable.getSelectedRow(), 0))); 
    }//GEN-LAST:event_occupancytableMouseClicked

    private void currentOccupRbtnItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_currentOccupRbtnItemStateChanged
        if (currentOccupRbtn.isSelected() == true) {

            occupancytable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, patient_name, bed_no, wing, date_admitted, admission_no FROM hp_admission  where discharge=false and ward='" + ward + "' and check_out=false;"));
            occupyno.setText("No of Patients in " + ward + " is :" + occupancytable.getRowCount());
        }
       
    }//GEN-LAST:event_currentOccupRbtnItemStateChanged

    private void currentOccupRbtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_currentOccupRbtnMouseClicked
       
    }//GEN-LAST:event_currentOccupRbtnMouseClicked
    
    public void populateTableView(java.lang.String selectedTable) {
        
        this.invalidate();
        
        createTableVectors(selectedTable);
        
        dataViewTable = new com.afrisoftech.dbadmin.JTable();
        
        dataViewTable.setModel(new javax.swing.JTable(dataViewVector, columnVector).getModel());// {
        
        
        
        // };
        
        int columnCount = columnVector.capacity();
        
        for (int i = 0; i < columnCount; i++) {
            
            dataViewTable.getColumnModel().getColumn(i).setWidth(200);
            
        }
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        
        gridBagConstraints.gridx = 0;
        
        gridBagConstraints.gridy = 1;
        
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        
        gridBagConstraints.weightx = 1.0;
        
        gridBagConstraints.weighty = 100.0;
        
        jPanelTable.removeAll();
        
        jPanelTable.add(dataViewTable, gridBagConstraints);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        
        gridBagConstraints.gridx = 0;
        
        gridBagConstraints.gridy = 0;
        
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        
        gridBagConstraints.weightx = 1.0;
        
        gridBagConstraints.weighty = 1.0;
        
        dataViewTable.getTableHeader().setBackground(java.awt.Color.GREEN);
        
        dataViewTable.getTableHeader().setForeground(java.awt.Color.BLUE);
        
        //        jScrollPaneDBAdmin.setRowHeaderView(jPanelTable);
        
        //        dataViewTable.getTableHeader().setOpaque(true);
        
        jPanelTable.add(dataViewTable.getTableHeader(), gridBagConstraints);
        
        jScrollPaneDBAdmin.setViewportView(jPanelTable);
        
        tablePanel.setBorder(new javax.swing.border.TitledBorder("Table View for table ["+tableName.toUpperCase()+"]"));
        
        //        jScrollPaneDBAdmin.setSize(5000,1000);
        
        //        jScrollPaneDBAdmin.setViewportView(dataViewTable);
        
        //        this.invalidate();
        
        exportTable = dataViewTable;
        
        this.validate();
        
        
    }
    
    public void createTableVectors(java.lang.String selectedTable) {
        
        dateFilterBoolean = false;
        
        tableName = selectedTable.toUpperCase();
        
        dataViewVector = new java.util.Vector(1,1);
        
        int rowCount = 0;
        
        try {
/*
            java.sql.PreparedStatement pstmtcountVector = connectDB.prepareStatement("SELECT COUNT(*) FROM "+selectedTable);
 
            java.sql.ResultSet rsetCountVector = pstmtcountVector.executeQuery();
 
            while(rsetCountVector.next()) {
 
                rowCount = rsetCountVector.getInt(1);
 
            }
 */
            customQueryString = "select * from "+selectedTable;
            
            java.sql.PreparedStatement pstmtVector = connectDB.prepareStatement(customQueryString);
            
            java.sql.ResultSet rsetVector = pstmtVector.executeQuery();
            
            java.sql.ResultSetMetaData rsetMetaData = rsetVector.getMetaData();
            
            pstmtVector.setCursorName("myCursor");
            
            String cursorName = rsetVector.getCursorName();
            
            System.out.println("Cursor name = ["+cursorName+"]");
            
            int columnCount = rsetMetaData.getColumnCount();
            
            //            System.out.println("Column count : ["+columnCount+"]");
            
            //            childVector = new java.util.Vector(columnCount);
            
            //            System.out.println("Done childVector");
            
            columnVector = new java.util.Vector(columnCount);
            
            //            System.out.println("Done columnVector");
            
            for (int i = 0; i < columnCount; i++) {
                //                System.out.println("Done with Headers"+rsetMetaData.getColumnName(i + 1).toUpperCase());
                columnVector.add(i,rsetMetaData.getColumnName(i + 1).toUpperCase());
                
                if (rsetMetaData.getColumnName(i + 1).matches("date") || rsetMetaData.getColumnName(i + 1).endsWith("date") || rsetMetaData.getColumnName(i + 1).startsWith("date")) {
                    
                    dateFilterBoolean = true;
                    
                    datesPanel.setVisible(true);
                    
                } else {
                    
                    if (!dateFilterBoolean) {
                        
                        datesPanel.setVisible(false);
                        
                    }
                }
                
                //                System.out.println("Done with Headers"+rsetMetaData.getColumnName(i + 1).toUpperCase());
                
            }
            
            //            int i = 0;
            
            while (rsetVector.next()) {
                childVector = new java.util.Vector(columnCount);
                //                childVector.removeAllElements();
                
                for (int j = 0; j < columnCount; j++) {
                    
                    childVector.addElement(dbObject.getDBObject(rsetVector.getString(j + 1), "-"));
                    
                }
                
                dataViewVector.add(childVector);
                
            }
            
        } catch(java.sql.SQLException sqlExec) {
            sqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), sqlExec.getMessage());
            
        }
        
    }
    
    public javax.swing.JTable getExportTable() {
        
        javax.swing.JTable table2Export = null;
        
        if (exportTable != null) {
            
            table2Export = exportTable;
            
        }
        
        return table2Export;
        
    }
    
    public void run() {
        
        if (exportTableBoolean == false) {
            
            exportTableBoolean = true;
            
        }
        
        while (exportTableBoolean) {
            
            System.out.println("Export process started for thread ["+Thread.currentThread().getName()+"]");
            
            if (Thread.currentThread().getName().matches("Export2Excel")) {
                
                System.out.println("Exporting Export2Excel");
                
                excelExport = new com.afrisoftech.dbadmin.ExcelExport(this.getExportTable(), tableName);
                
            } else if (Thread.currentThread().getName().matches("Export2Xml")) {
                
                xmlExport = new com.afrisoftech.dbadmin.XMLExport(this.getExportTable(), tableName);
                
            } else if (Thread.currentThread().getName().matches("Export2HTML")) {
                
                htmlExport = new com.afrisoftech.dbadmin.HTMLExport(this.getExportTable(), tableName);
                
            } else if (Thread.currentThread().getName().matches("Export2PDF")) {
                
                pdfExport = new com.afrisoftech.dbadmin.PDFExport(this.getExportTable(), tableName);
                
            }
            
            
            try {
                
                Thread.currentThread().sleep(100);
                
            } catch(java.lang.InterruptedException IntExec){ System.out.println(IntExec.getMessage());}
            
            exportTableBoolean = false;
            
        }
        
        
    }
    
    protected void setQueryString(java.lang.String queryString) {
        
        customQueryString = queryString;
        
        chartQueryString = queryString;
        
    }
    
    protected void populateCustomQueryTable(java.lang.String chartQuery) {
        
        this.invalidate();
        
        createCustomTableVectors(chartQuery);//tableName);
        
        dataViewTable = new com.afrisoftech.dbadmin.JTable();
        
        dataViewTable.setModel(new javax.swing.JTable(dataViewVector, columnVector).getModel());
        
        int columnCount = columnVector.capacity();
        
        for (int i = 0; i < columnCount; i++) {
            
            dataViewTable.getColumnModel().getColumn(i).setWidth(200);
            
        }
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        
        gridBagConstraints.gridx = 0;
        
        gridBagConstraints.gridy = 1;
        
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        
        gridBagConstraints.weightx = 1.0;
        
        gridBagConstraints.weighty = 100.0;
        
        jPanelTable.removeAll();
        
        jPanelTable.add(dataViewTable, gridBagConstraints);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        
        gridBagConstraints.gridx = 0;
        
        gridBagConstraints.gridy = 0;
        
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        
        gridBagConstraints.weightx = 1.0;
        
        gridBagConstraints.weighty = 1.0;
        
        dataViewTable.getTableHeader().setBackground(java.awt.Color.GREEN);
        
        dataViewTable.getTableHeader().setForeground(java.awt.Color.BLUE);
        
        //        jScrollPaneDBAdmin.setRowHeaderView(jPanelTable);
        
        //        dataViewTable.getTableHeader().setOpaque(true);
        
        jPanelTable.add(dataViewTable.getTableHeader(), gridBagConstraints);
        
        jScrollPaneDBAdmin.setViewportView(jPanelTable);
        
        tablePanel.setBorder(new javax.swing.border.TitledBorder("Table View for ["+tableName.toUpperCase()+"]"));
        
        
        
        //        jScrollPaneDBAdmin.setSize(5000,1000);
        
        //        jScrollPaneDBAdmin.setViewportView(dataViewTable);
        
        //        this.invalidate();
        
        exportTable = dataViewTable;
        
        this.validate();
        
        
        
    }
    
    protected void createCustomTableVectors(java.lang.String queryString) {
        
        dateFilterBoolean = false;
        
        boolean pastFrom = false;
        //        tableName = selectedTable.toUpperCase();
        
        dataViewVector = new java.util.Vector(1,1);
        
        int rowCount = 0;
        
        try {
/*
            java.sql.PreparedStatement pstmtcountVector = connectDB.prepareStatement("SELECT COUNT(*) FROM "+selectedTable);
 
            java.sql.ResultSet rsetCountVector = pstmtcountVector.executeQuery();
 
            while(rsetCountVector.next()) {
 
                rowCount = rsetCountVector.getInt(1);
 
            }
 */
            java.util.StringTokenizer sqlTokenizer = new java.util.StringTokenizer(chartQueryString);
            
            while (sqlTokenizer.hasMoreTokens()) {
                
                if (pastFrom) {
                    
                    tableName = sqlTokenizer.nextToken();
                    
                    pastFrom = false;
                    
                }
                
                if (sqlTokenizer.nextToken() == "from") {
                    
                    pastFrom = true;
                    
                }
                
            }
            
/*            int tableFrom = customQueryString.indexOf("from");
 
            tableName = customQueryString.substring(tableFrom + 5);
 */
            java.sql.PreparedStatement pstmtVector = connectDB.prepareStatement(chartQueryString);
            
            java.sql.ResultSet rsetVector = pstmtVector.executeQuery();
            
            java.sql.ResultSetMetaData rsetMetaData = rsetVector.getMetaData();
            
            //    tableName = rsetMetaData.getTableName(1);
            
            int columnCount = rsetMetaData.getColumnCount();
            
            //            System.out.println("Column count : ["+columnCount+"]");
            
            //            childVector = new java.util.Vector(columnCount);
            
            //            System.out.println("Done childVector");
            
            columnVector = new java.util.Vector(columnCount);
            
            //            System.out.println("Done columnVector");
            
            for (int i = 0; i < columnCount; i++) {
                //                System.out.println("Done with Headers"+rsetMetaData.getColumnName(i + 1).toUpperCase());
                columnVector.add(i,rsetMetaData.getColumnName(i + 1).toUpperCase());
                
                if (rsetMetaData.getColumnName(i + 1).matches("date") || rsetMetaData.getColumnName(i + 1).endsWith("date") || rsetMetaData.getColumnName(i + 1).startsWith("date")) {
                    
                    dateFilterBoolean = true;
                    
                    datesPanel.setVisible(true);
                    
                } else {
                    
                    if (!dateFilterBoolean) {
                        
                        datesPanel.setVisible(false);
                        
                    }
                    
                }
                
                //                System.out.println("Done with Headers"+rsetMetaData.getColumnName(i + 1).toUpperCase());
                
            }
            
            //            int i = 0;
            
            while (rsetVector.next()) {
                childVector = new java.util.Vector(columnCount);
                //                childVector.removeAllElements();
                
                for (int j = 0; j < columnCount; j++) {
                    
                    childVector.addElement(dbObject.getDBObject(rsetVector.getString(j + 1), "-"));
                    
                }
                
                dataViewVector.add(childVector);
                
            }
            
        } catch(java.sql.SQLException sqlExec) {
            sqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), sqlExec.getMessage());
            
        }
        
    }
    
    protected java.lang.String createDateFilter() {
        
        java.lang.String dateFilter = " ";
        
        if ((headerDatePicker.getDate().equals(null)) && (datePickerEnd.getDate().equals(null))) {
            
            dateFilter = dateFilter + "where date between '"+headerDatePicker.getDate().toString()+"' and '"+datePickerEnd.getDate().toString()+"'";
            
        } else if (datePickerEnd.getDate().equals(null)) {
            
            dateFilter = dateFilter + "where date > '"+headerDatePicker.getDate().toString()+"'";
            
        } else if (datePickerEnd.getDate().equals(null)){
            
            dateFilter = dateFilter + "where date < '"+datePickerEnd.getDate().toString()+"'";
            
        }
        
        return dateFilter;
        
    }
/*
    protected class TableViewModel extends javax.swing.table.DefaultTableModel {
 
        java.util.Vector tableDataVector = dataViewVector;
 
        java.util.Vector tableColumnVector = columnVector;
 
        public int getRowCount() {
 
            return tableDataVector.toArray().length;
 
        }
 
        public int getColumnCount() {
 
            return tableColumnVector.toArray().length;
 
        }
 
        public java.lang.Object getValueAt(int row, int column) {
 
            return
 
        }
 
    }
 */
    private org.jfree.data.JDBCCategoryDataset getJDBCXYDataset() {
        
        org.jfree.data.JDBCCategoryDataset jdbcXYDataset = null;
        
        try {
            
            jdbcXYDataset =  new org.jfree.data.JDBCCategoryDataset(connectDB, chartQueryString);//"SELECT * FROM "+tableName);
            
        } catch (java.sql.SQLException sqlExec) {
            
            sqlExec.printStackTrace();
            
            javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), sqlExec.getMessage());
            
        }
        
        return jdbcXYDataset;
    }
    private org.jfree.data.JDBCXYDataset getJDBCXYZDataset() {
        
        org.jfree.data.JDBCXYDataset jdbcXYDataset = null;
        
        try {
            
            jdbcXYDataset =  new org.jfree.data.JDBCXYDataset(connectDB, chartQueryString);//"SELECT * FROM "+tableName);
            
        } catch (java.sql.SQLException sqlExec) {
            
            sqlExec.printStackTrace();
            
            javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), sqlExec.getMessage());
            
        }
        
        return jdbcXYDataset;
    }
    
    private org.jfree.data.JDBCPieDataset getJDBCPIEDataset() {
        
        org.jfree.data.JDBCPieDataset jdbcPIEDataset = null;
        
        try {
            System.out.println("Chart String : ["+chartQueryString+"]");
            jdbcPIEDataset =  new org.jfree.data.JDBCPieDataset(connectDB, chartQueryString);//"SELECT * FROM "+tableName);
            
        } catch (java.sql.SQLException sqlExec) {
            
            sqlExec.printStackTrace();
            
            javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), sqlExec.getMessage());
            
        }
        
        return jdbcPIEDataset;
    }
    
    private org.jfree.chart.ChartPanel getChartPanel() {
        
        chartPanel = new org.jfree.chart.ChartPanel(getJFreeChart(), true, true, true, true, true);
        //        org.jfree.chart.ChartPanel chartPanel = new org.jfree.chart.ChartPanel(getJFreeChart());
        return chartPanel;
    }
    
    private org.jfree.chart.JFreeChart getJFreeChart() {
        
        org.jfree.chart.JFreeChart jfreeChart = null;
        
        if (barChart) {
            
            jfreeChart = org.jfree.chart.ChartFactory.createBarChart3D(chartTitle, xAxis, yAxis, getJDBCXYDataset(), org.jfree.chart.plot.PlotOrientation.VERTICAL, true, true, true);
            
        } else if (pieChart) {
           /*
            jfreeChart = org.jfree.chart.ChartFactory.createPieChart(chartTitle, getJDBCPIEDataset(), true, true, true);
            
            org.jfree.chart.plot.PiePlot piePlot = (org.jfree.chart.plot.PiePlot)jfreeChart.getPlot();
            
            piePlot.setSectionLabelType(org.jfree.chart.plot.PiePlot.NAME_AND_PERCENT_LABELS);
            
            piePlot.setExplodePercent(1, 1.00);
            
            */
            // Original 3D pie plots
           
            
            jfreeChart = org.jfree.chart.ChartFactory.createPieChart3D(chartTitle, getJDBCPIEDataset(), true, true, true);
            
            org.jfree.chart.plot.Pie3DPlot piePlot = (org.jfree.chart.plot.Pie3DPlot)jfreeChart.getPlot();
            
            piePlot.setSectionLabelType(org.jfree.chart.plot.Pie3DPlot.NAME_AND_PERCENT_LABELS);
            
            piePlot.setExplodePercent(1, 1.00);
            
            
            
        } else {
            
            jfreeChart = org.jfree.chart.ChartFactory.createLineChart(chartTitle, xAxis, yAxis, getJDBCXYDataset(), org.jfree.chart.plot.PlotOrientation.VERTICAL, true, true, true);
        }
        return jfreeChart;
    }
    
    
    private org.jfree.chart.JFreeChart getPIEJFreeChart() {
        
        org.jfree.chart.JFreeChart jfreeChart = null;
        
        jfreeChart = org.jfree.chart.ChartFactory.createPieChart3D(chartTitle, getJDBCPIEDataset(), true, true, true);
        
        return jfreeChart;
    }
    
    
    private org.jfree.chart.JFreeChart getXYJFreeChart() {
        
        org.jfree.chart.JFreeChart jfreeChart = null;
        
        jfreeChart = org.jfree.chart.ChartFactory.createLineXYChart(chartTitle, xAxis, yAxis, getJDBCXYZDataset(), org.jfree.chart.plot.PlotOrientation.VERTICAL, true, true, true);
        
        return jfreeChart;
    }
    
    public void showChart(java.lang.String chartqueryString, java.lang.String selectedTableName) {
        
        System.out.println("Chart Query String ["+chartqueryString+"]");
        
        chartQueryString = chartqueryString;
        
        tableName = selectedTableName;
        
        this.invalidate();
        
/*        createCustomTableVectors(null);//tableName);
 
        dataViewTable = new javax.swing.JTable(dataViewVector, columnVector);
 
        int columnCount = columnVector.capacity();
 
        for (int i = 0; i < columnCount; i++) {
 
            dataViewTable.getColumnModel().getColumn(i).setWidth(200);
 
        }
 */
        gridBagConstraints = new java.awt.GridBagConstraints();
        
        gridBagConstraints.gridx = 0;
        
        gridBagConstraints.gridy = 1;
        
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        
        gridBagConstraints.weightx = 1.0;
        
        gridBagConstraints.weighty = 100.0;
        
        jPanelTable.removeAll();
        
        jPanelTable.add(getChartPanel(), gridBagConstraints);
        
        gridBagConstraints = new java.awt.GridBagConstraints();
        
        gridBagConstraints.gridx = 0;
        
        gridBagConstraints.gridy = 0;
        
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        
        gridBagConstraints.weightx = 1.0;
        
        gridBagConstraints.weighty = 1.0;
        
        //        dataViewTable.getTableHeader().setBackground(java.awt.Color.GREEN);
        
        //        dataViewTable.getTableHeader().setForeground(java.awt.Color.BLUE);
        
        //        jScrollPaneDBAdmin.setRowHeaderView(jPanelTable);
        
        //        dataViewTable.getTableHeader().setOpaque(true);
        
        //        jPanelTable.add(dataViewTable.getTableHeader(), gridBagConstraints);
        
        jScrollPaneDBAdmin.setViewportView(jPanelTable);
        
        tablePanel.setBorder(new javax.swing.border.TitledBorder(chartTitle));
        
        
        
        //        jScrollPaneDBAdmin.setSize(5000,1000);
        
        //        jScrollPaneDBAdmin.setViewportView(dataViewTable);
        
        //        this.invalidate();
        
        exportTable = dataViewTable;
        
        this.validate();
        
        
    }
    
    public void printChart() {
        
        javax.swing.MenuElement[] chartMenuElements =  chartPanel.getPopupMenu().getSubElements();
        
        for (int i = 0; i < chartMenuElements.length; i++) {
            
            javax.swing.JMenuItem menuItem = (javax.swing.JMenuItem)chartMenuElements[i];
            
            if (menuItem.getText().startsWith("Print")) {
                
                menuItem.doClick();
                
            }
            
            
        }
        
    }
    
    public void saveChart() {
        
        javax.swing.MenuElement[] chartMenuElements =  chartPanel.getPopupMenu().getSubElements();
        
        for (int i = 0; i < chartMenuElements.length; i++) {
            
            javax.swing.JMenuItem menuItem = (javax.swing.JMenuItem)chartMenuElements[i];
            
            if (menuItem.getText().startsWith("Save")) {
                
                menuItem.doClick();
                
            }
            
            
        }
        
    }
    
    public void chartProperties() {
        
        javax.swing.MenuElement[] chartMenuElements =  chartPanel.getPopupMenu().getSubElements();
        
        for (int i = 0; i < chartMenuElements.length; i++) {
            
            javax.swing.JMenuItem menuItem = (javax.swing.JMenuItem)chartMenuElements[i];
            
            if (menuItem.getText().startsWith("Properties")) {
                
                menuItem.doClick();
                
            }
            
            
        }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionsPanel;
    private javax.swing.ButtonGroup buttonGroupGraphicalView;
    private javax.swing.JTable chartTable1;
    private javax.swing.JCheckBox currentOccupRbtn;
    private com.afrisoftech.lib.DatePicker datePickerEnd;
    private javax.swing.JPanel datesPanel;
    private com.afrisoftech.lib.DatePicker headerDatePicker;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelBeginDate;
    private javax.swing.JLabel jLabelEndDate;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanelTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPaneDBAdmin;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField nameNoTxt;
    private javax.swing.JPanel occupancy;
    private javax.swing.JTable occupancytable;
    private javax.swing.JLabel occupyno;
    private javax.swing.JButton printChart;
    private javax.swing.JButton saveChart;
    private javax.swing.JButton showData;
    private javax.swing.JPanel spacerPanel;
    private javax.swing.JPanel tableActionsPanel;
    private javax.swing.JPanel tablePanel;
    // End of variables declaration//GEN-END:variables
   
    private void newLinkButtonActionPerformed( String chartDescription) {

        java.lang.String chartDefinitionView = null;

        java.lang.String chartTitle = null;

        java.lang.String xAxis = null;

        java.lang.String yAxis = null;

        java.lang.String chartType = null;

        try {

            java.sql.PreparedStatement pstmtChart = connectDB.prepareStatement("SELECT chart_view, chart_type, "
                    + "chart_header, x_axis, y_axis FROM nursing_charts WHERE chart_description = ?");

            pstmtChart.setString(1, chartDescription);

            java.sql.ResultSet rsetChart = pstmtChart.executeQuery();

            while (rsetChart.next()) {

                chartDefinitionView = rsetChart.getString(1);

                this.chartTitle = rsetChart.getString(3);

                this.xAxis = rsetChart.getString(4);

                this.yAxis = rsetChart.getString(5);

                chartType = rsetChart.getString(2);

                if (chartType.trim().equalsIgnoreCase("bar")) {

                    this.barChart = true;

                    this.pieChart = false;

                    this.xyChart = false;

                } else if (chartType.trim().equalsIgnoreCase("pie")) {

                    this.barChart = false;

                    this.pieChart = true;

                    this.xyChart = false;

                } else {

                    this.barChart = false;

                    this.pieChart = false;

                    this.xyChart = true;
                }


            }

        } catch (java.sql.SQLException sqlEx) {

            sqlEx.printStackTrace();

        }

        //      this.this.pieChart = true;
 

       

        try {


            this.showChart(chartDefinitionView, chartTitle);
          /////  this.showChart(chartDefinitionView +"'"+nameNoTxt.getText()+"' ", chartTitle);

         

        } catch (Exception pvt) {
        }

    }
}
