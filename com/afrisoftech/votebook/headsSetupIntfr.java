/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.afrisoftech.votebook;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
//import org.openide.util.Exceptions;

/**
 *
 * @author saleem
 */
public class headsSetupIntfr extends javax.swing.JInternalFrame {

    /**
     * Creates new form headsSetupIntfr
     */
    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;

    public headsSetupIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {
        connectDB = connDb;

        pConnDB = pconnDB;
        initComponents();
       // voteNameLbl.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        mainVoteSetupTbl = new com.afrisoftech.dbadmin.JTable();
        jPanel6 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        mainDepartmentCmbx = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new com.afrisoftech.dbadmin.JTable();
        jPanel3 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        divisionBranchNameLbl = new javax.swing.JLabel();
        mainBudgetTypeCmbx = new javax.swing.JComboBox();
        voteNameTxt = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        divisionNameCmbx = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new com.afrisoftech.dbadmin.JTable();
        jPanel5 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        departmentNameLbl = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        budgetTypeCmbx = new javax.swing.JComboBox();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Setting up the vote book sub-system. Ministry/Branch/Unit/Divisions/Departments/VoteHead Hierarchy Setup");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        mainVoteSetupTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Ministry/Unit/Branch Code", "Ministry/Unit/Branch Name"
            }
        ));
        jScrollPane3.setViewportView(mainVoteSetupTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 7.0;
        jPanel2.add(jScrollPane3, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jButton7.setText("Close form");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jButton7, gridBagConstraints);

        jButton8.setText("Save Ministry/Unit/Branch Vote");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jButton8, gridBagConstraints);

        jButton9.setText("Edit exisiting data");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jButton9, gridBagConstraints);

        jButton10.setText("Delete entry");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jButton10, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel6, gridBagConstraints);

        jTabbedPane1.addTab("Ministry/Major Department/Unit/Branch", jPanel2);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Vote/Ministry/Branch or Main Department");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabel1, gridBagConstraints);

        mainDepartmentCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "(SELECT distinct vote FROM votes) ORDER BY 1"));
        mainDepartmentCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainDepartmentCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(mainDepartmentCmbx, gridBagConstraints);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Division/Department Code", "Division/Department Name"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        jPanel1.add(jScrollPane1, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jButton2.setText("Close");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton2, gridBagConstraints);

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton1, gridBagConstraints);

        jButton3.setText("Edit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jButton3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel3, gridBagConstraints);

        divisionBranchNameLbl.setText("Budget Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(divisionBranchNameLbl, gridBagConstraints);

        mainBudgetTypeCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "(SELECT '-' UNION SELECT distinct concat(class,'-',classname)  FROM vb_class) ORDER BY 1"));
        mainBudgetTypeCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainBudgetTypeCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(mainBudgetTypeCmbx, gridBagConstraints);

        voteNameTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(voteNameTxt, gridBagConstraints);

        jTabbedPane1.addTab("Divisions/Departments", jPanel1);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("Division/Department");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jLabel3, gridBagConstraints);

        divisionNameCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "(SELECT '-' UNION SELECT distinct head FROM heads) ORDER BY 1"));
        divisionNameCmbx.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                divisionNameCmbxItemStateChanged(evt);
            }
        });
        divisionNameCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divisionNameCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(divisionNameCmbx, gridBagConstraints);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "VoteHead", "VoteHead Name"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 8.0;
        jPanel4.add(jScrollPane2, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jButton4.setText("Close");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jButton4, gridBagConstraints);

        jButton5.setText("Save");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jButton5, gridBagConstraints);

        jButton6.setText("Edit");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jButton6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jPanel5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(departmentNameLbl, gridBagConstraints);

        jLabel7.setText("Budget Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        jPanel4.add(jLabel7, gridBagConstraints);

        budgetTypeCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "(SELECT '-' UNION SELECT distinct concat(class,'-',classname)  FROM vb_class) ORDER BY 1"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(budgetTypeCmbx, gridBagConstraints);

        jTabbedPane1.addTab("VoteHeads/Departmental Sections", jPanel4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:

        try {
            for (int k = 0; k < jTable2.getRowCount(); k++) {
                for (int r = 0; r < jTable2.getColumnCount(); r++) {
                    jTable2.getModel().setValueAt(null, k, r);
                }
            }
            String class_vb = null;
            int class_index = 0;
            class_index = budgetTypeCmbx.getSelectedItem().toString().indexOf("-");
            class_vb = budgetTypeCmbx.getSelectedItem().toString().substring(0, class_index);

            java.sql.PreparedStatement ed = connectDB.prepareStatement("SELECT DISTINCT subhead, subheadname FROM subheads where srccode = '" + divisionNameCmbx.getSelectedItem().toString() + "' and station ilike '%" + class_vb + "%'  and srccode is not null order by subhead asc");
            java.sql.ResultSet rst = ed.executeQuery();
            int i = 0;
            while (rst.next()) {

                jTable2.setValueAt(rst.getObject(1), i, 0);
                jTable2.setValueAt(rst.getObject(2), i, 1);

                i++;
            }

            jButton5.setText("Update");

        } catch (SQLException ex) {
            Logger.getLogger(headsSetupIntfr.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        Boolean check_insert_status = false;
        Boolean check_update = false;
        if (jButton5.getActionCommand().toString().equals("Save")) {
            if (divisionNameCmbx.getSelectedIndex() == 0 && budgetTypeCmbx.getSelectedIndex() == 0) {
                javax.swing.JOptionPane.showMessageDialog(this, " Select the required fields first");

            } else {
                int v = 0;

                for (int i = 0; i < jTable2.getRowCount(); i++) {

                    if (jTable2.getValueAt(i, 0) != null && jTable2.getValueAt(i, 1) != null) {
                        try {
                            ///trimming the budget type
                            String budget_type1 = budgetTypeCmbx.getSelectedItem().toString();
                            int budg_index1 = budget_type1.indexOf("-");

                            String new_joined_class = null, share_class = null;
                            int head_count = 0;
                            java.sql.Statement stmtss = connectDB.createStatement();
                            java.sql.ResultSet rest = stmtss.executeQuery("SELECT count(*) as num from subheads  where  subhead='" + jTable2.getValueAt(i, 0).toString() + "' and srccode='" + divisionNameCmbx.getSelectedItem() + "' and subheadname='" + jTable2.getValueAt(i, 1).toString() + "' and  srccode is not null");
                            while (rest.next()) {
                                head_count = rest.getInt("num");

                            }
                            if (head_count >= 1) {
                                //System.out.println("Do Nothing");
                                ///trimming the budget type
                                String new_joined_class1 = null, share_class1 = null;
                                java.sql.Statement stmtsf = connectDB.createStatement();
                                java.sql.ResultSet restf = stmtsf.executeQuery("SELECT station  from subheads  where  srccode='" + divisionNameCmbx.getSelectedItem() + "' and subhead='" + jTable2.getValueAt(i, 0).toString() + "' ");
                                while (restf.next()) {
                                    share_class1 = restf.getString(1);

                                }

                                String budget_type4 = budgetTypeCmbx.getSelectedItem().toString();
                                int budg_index4 = budget_type4.indexOf("-");

                                new_joined_class1 = share_class1 + "," + budget_type4.substring(0, budg_index4);

                                java.sql.PreparedStatement pst11 = connectDB.prepareStatement("UPDATE subheads  SET  station='" + new_joined_class1 + "' where subhead='" + jTable2.getValueAt(i, 0).toString() + "' ");
                                pst11.executeUpdate();
                                check_insert_status = true;

                            } else {
                                ///trimming the budget type
                                String budget_type = budgetTypeCmbx.getSelectedItem().toString();
                                int budg_index = budget_type.indexOf("-");

                                java.sql.PreparedStatement pst1 = connectDB.prepareStatement("INSERT INTO subheads(subhead, srccode, subheadname, station) VALUES (?, ?, ?,?)");
                                pst1.setObject(1, jTable2.getValueAt(i, 0));
                                pst1.setObject(2, divisionNameCmbx.getSelectedItem().toString());
                                pst1.setObject(3, jTable2.getValueAt(i, 1));
                                pst1.setObject(4, budget_type.substring(0, budg_index));

                                pst1.executeUpdate();
                                check_insert_status = true;
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(headsSetupIntfr.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
                if (check_insert_status == true) {
                    javax.swing.JOptionPane.showMessageDialog(this, " Insert Done Successfully", "CONFIRMATION MESSAGE", JOptionPane.INFORMATION_MESSAGE);

                    for (int k = 0; k < jTable2.getRowCount(); k++) {
                        for (int r = 0; r < jTable2.getColumnCount(); r++) {
                            jTable2.getModel().setValueAt(null, k, r);
                        }
                    }
                } else {
                    javax.swing.JOptionPane.showMessageDialog(this, " Double Check Your Entries", "ERROR MESSAGE", JOptionPane.ERROR_MESSAGE);

                }

            }
        } else if (jButton5.getActionCommand().toString().equals("Update")) {
            for (int j = 0; j < jTable2.getRowCount(); j++) {
                if (jTable2.getValueAt(j, 0) != null && jTable2.getValueAt(j, 1) != null) {

                    try {
                        java.sql.PreparedStatement pst1 = connectDB.prepareStatement("UPDATE  subheads  set subhead=?, srccode=?, subheadname=? where srccode='" + divisionNameCmbx.getSelectedItem() + "'");
                        pst1.setObject(1, jTable2.getValueAt(j, 0));
                        pst1.setObject(2, divisionNameCmbx.getSelectedItem().toString());
                        pst1.setObject(3, jTable2.getValueAt(j, 1));

                        pst1.executeUpdate();

                        check_update = true;

                    } catch (Exception esv) {

                        esv.printStackTrace();

                    }

                }
            }
            if (check_update == true) {
                javax.swing.JOptionPane.showMessageDialog(this, " Update Done Successfully", "CONFIRMATION MESSAGE", JOptionPane.INFORMATION_MESSAGE);
                jButton5.setText("Save");
                for (int k = 0; k < jTable2.getRowCount(); k++) {
                    for (int r = 0; r < jTable2.getColumnCount(); r++) {
                        jTable2.getModel().setValueAt(null, k, r);
                    }
                }
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, " Double Check Your Entries", "ERROR MESSAGE", JOptionPane.ERROR_MESSAGE);

            }
        }

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void divisionNameCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divisionNameCmbxActionPerformed

        try {
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT DISTINCT headname FROM heads WHERE head = ?");

            pstmt.setObject(1, divisionNameCmbx.getSelectedItem());

            java.sql.ResultSet rset = pstmt.executeQuery();

            while (rset.next()) {
                departmentNameLbl.setText(rset.getString(1));
            }

        } catch (java.sql.SQLException e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage());
            e.printStackTrace();
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_divisionNameCmbxActionPerformed

    private void divisionNameCmbxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_divisionNameCmbxItemStateChanged
        // TODO add your handling code here:
        //  jLabel4
        try {
            // TODO add your handling code here:
            if (divisionNameCmbx.getSelectedItem().equals("-")) {
                departmentNameLbl.setVisible(false);
            }
            java.sql.PreparedStatement get = connectDB.prepareStatement("SELECT distinct headname FROM heads where head = '" + divisionNameCmbx.getSelectedItem().toString() + "';");
            java.sql.ResultSet done = get.executeQuery();
            while (done.next()) {
                //java.lang.String head_name = done.getObject(1).toString();

                //jLabel4.setVisible(true);
                //jLabel4.setText(head_name);
            }

        } catch (SQLException ex) {
            Logger.getLogger(headsSetupIntfr.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_divisionNameCmbxItemStateChanged

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            // TODO add your handling code here:

            java.sql.PreparedStatement ed = connectDB.prepareStatement("SELECT  head, headname FROM heads where vote = '" + mainDepartmentCmbx.getSelectedItem().toString() + "'");
            java.sql.ResultSet rst = ed.executeQuery();
            int i = 0;
            while (rst.next()) {

                jTable1.setValueAt(rst.getObject(1), i, 0);
                jTable1.setValueAt(rst.getObject(2), i, 1);
                i++;
            }

        } catch (SQLException ex) {
            Logger.getLogger(headsSetupIntfr.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        Boolean check_insert_status = false;
        if (mainDepartmentCmbx.getSelectedIndex() == 0 && mainBudgetTypeCmbx.getSelectedIndex() == 0) {
            javax.swing.JOptionPane.showMessageDialog(this, " Select the required fields first");

        } else {
            int v = 0;

            for (int i = 0; i < jTable1.getRowCount(); i++) {
                if (jTable1.getValueAt(i, 0) != null && jTable1.getValueAt(i, 1) != null) {

                    try {

                        int head_count = 0;
                        String share_class = null, new_joined_class = null;
                        java.sql.Statement stmtss = connectDB.createStatement();
                        java.sql.ResultSet rest = stmtss.executeQuery("SELECT count(*) as num from heads  where  head='" + jTable1.getValueAt(i, 0).toString() + "' ");
                        while (rest.next()) {
                            head_count = rest.getInt("num");

                        }
                        if (head_count >= 1) {
                            java.sql.Statement stmtsf = connectDB.createStatement();
                            java.sql.ResultSet restf = stmtsf.executeQuery("SELECT subvote  from heads  where  head='" + jTable1.getValueAt(i, 0).toString() + "' ");
                            while (restf.next()) {
                                share_class = restf.getString(1);

                            }

                            ///trimming the budget type
                            String budget_type = mainBudgetTypeCmbx.getSelectedItem().toString();
                            int budg_index = budget_type.indexOf("-");

                            new_joined_class = share_class + "," + budget_type.substring(0, budg_index);

                            java.sql.PreparedStatement pst11 = connectDB.prepareStatement("UPDATE heads  SET  subvote='" + new_joined_class + "' where head='" + jTable1.getValueAt(i, 0).toString() + "' ");
                            pst11.executeUpdate();
                            check_insert_status = true;

                        } else {
                            java.sql.PreparedStatement pst1 = connectDB.prepareStatement("INSERT INTO heads(\n"
                                    + "            vote, subvote, head, headname)\n"
                                    + "    VALUES (?, ?, ?, ?);");
                            pst1.setObject(1, mainDepartmentCmbx.getSelectedItem().toString());
                            ///trimming the budget type
                            String budget_type = mainBudgetTypeCmbx.getSelectedItem().toString();
                            int budg_index = budget_type.indexOf("-");

                            pst1.setObject(2, budget_type.substring(0, budg_index));
                            pst1.setObject(3, jTable1.getValueAt(i, 0));
                            pst1.setObject(4, jTable1.getValueAt(i, 1));

                            pst1.executeUpdate();
                            check_insert_status = true;
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(headsSetupIntfr.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

            if (check_insert_status == true) {
                javax.swing.JOptionPane.showMessageDialog(this, " Insert Done Successfully", "CONFIRMATION MESSAGE", JOptionPane.INFORMATION_MESSAGE);
                for (int k = 0; k < jTable1.getRowCount(); k++) {
                    for (int r = 0; r < jTable1.getColumnCount(); r++) {
                        jTable1.getModel().setValueAt(null, k, r);
                    }
                }

            } else {
                javax.swing.JOptionPane.showMessageDialog(this, " Double Check Your Entries", "ERROR MESSAGE", JOptionPane.ERROR_MESSAGE);

            }

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void mainDepartmentCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainDepartmentCmbxActionPerformed
        try {

            java.sql.PreparedStatement get = connectDB.prepareStatement("SELECT distinct votename FROM votes where vote = ?");
            get.setString(1, this.mainDepartmentCmbx.getSelectedItem().toString());
            java.sql.ResultSet done = get.executeQuery();
            while (done.next()) {
                java.lang.String vote_name = done.getObject(1).toString();

            }

        } catch (SQLException ex) {
            Logger.getLogger(headsSetupIntfr.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT DISTINCT votename FROM votes WHERE vote = ?");

            pstmt.setObject(1, mainDepartmentCmbx.getSelectedItem());

            java.sql.ResultSet rset = pstmt.executeQuery();

            while (rset.next()) {
                voteNameTxt.setText(rset.getString(1));
            }

        } catch (java.sql.SQLException e) {
            javax.swing.JOptionPane.showMessageDialog(this, e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_mainDepartmentCmbxActionPerformed

    private void mainBudgetTypeCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainBudgetTypeCmbxActionPerformed

// TODO add your handling code here:
    }//GEN-LAST:event_mainBudgetTypeCmbxActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        int v = 0;
        boolean check_insert_status = false;
        for (int i = 0; i < mainVoteSetupTbl.getRowCount(); i++) {
            if (mainVoteSetupTbl.getValueAt(i, 0) != null && mainVoteSetupTbl.getValueAt(i, 1) != null) {

                try {

                    int head_count = 0;
                    String share_class = null, new_joined_class = null;
                    java.sql.Statement stmtss = connectDB.createStatement();
                    java.sql.ResultSet rest = stmtss.executeQuery("SELECT count(*) as num from votes  where  vote = '" + mainVoteSetupTbl.getValueAt(i, 0).toString() + "' ");
                    while (rest.next()) {
                        head_count = rest.getInt("num");

                    }
                    if (head_count >= 1) {
                        java.sql.Statement stmtsf = connectDB.createStatement();
                        java.sql.ResultSet restf = stmtsf.executeQuery("SELECT votename  from votes  where  vote = '" + mainVoteSetupTbl.getValueAt(i, 0).toString() + "' ");
                        while (restf.next()) {
                            share_class = restf.getString(1);

                        }

                        java.sql.PreparedStatement pst11 = connectDB.prepareStatement("UPDATE votes SET  votename = ? where vote = ? ");
                        
                        pst11.setObject(1, mainVoteSetupTbl.getValueAt(i, 1).toString());
                        pst11.setObject(2, mainVoteSetupTbl.getValueAt(i, 0).toString());
                        pst11.executeUpdate();
                        check_insert_status = true;

                    } else {
                        if(mainVoteSetupTbl.getValueAt(i, 0) != null && mainVoteSetupTbl.getValueAt(i, 1) != null){
                        java.sql.PreparedStatement pst1 = connectDB.prepareStatement("INSERT INTO votes(\n"
                                + "            vote, votename)\n"
                                + "    VALUES (?, ?);");
                        pst1.setObject(1, mainVoteSetupTbl.getValueAt(i, 0));
                        pst1.setObject(2, mainVoteSetupTbl.getValueAt(i, 1));

                        pst1.execute();
                        check_insert_status = true;
                        }
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(headsSetupIntfr.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        if (check_insert_status == true) {
            javax.swing.JOptionPane.showMessageDialog(this, " Insert Done Successfully", "CONFIRMATION MESSAGE", JOptionPane.INFORMATION_MESSAGE);
            for (int k = 0; k < mainVoteSetupTbl.getRowCount(); k++) {
                for (int r = 0; r < mainVoteSetupTbl.getColumnCount(); r++) {
                    mainVoteSetupTbl.getModel().setValueAt(null, k, r);
                }
            }

        } else {
            javax.swing.JOptionPane.showMessageDialog(this, " Double Check Your Entries", "ERROR MESSAGE", JOptionPane.ERROR_MESSAGE);

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed

        this.mainVoteSetupTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT vote as ministry_branch_unit_code, votename as ministry_branch_unit_name FROM votes ORDER BY 2"));
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed

        try {
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("DELETE FROM votes WHERE vote = ?");
            pstmt.setObject(1, this.mainVoteSetupTbl.getValueAt(this.mainVoteSetupTbl.getSelectedRow(), 0));
            pstmt.executeUpdate();
            javax.swing.JOptionPane.showMessageDialog(this, "Entry deleted successfully.");
            this.mainVoteSetupTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT vote as ministry_branch_unit_code, votename as ministry_branch_unit_name FROM votes ORDER BY 2"));
        
        } catch(java.sql.SQLException e){
            javax.swing.JOptionPane.showInputDialog(this, e.getMessage());
            e.printStackTrace();
        
    }
            // TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox budgetTypeCmbx;
    private javax.swing.JLabel departmentNameLbl;
    private javax.swing.JLabel divisionBranchNameLbl;
    private javax.swing.JComboBox divisionNameCmbx;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JComboBox mainBudgetTypeCmbx;
    private javax.swing.JComboBox mainDepartmentCmbx;
    private javax.swing.JTable mainVoteSetupTbl;
    private javax.swing.JTextField voteNameTxt;
    // End of variables declaration//GEN-END:variables
}
