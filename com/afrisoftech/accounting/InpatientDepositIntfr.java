
/*
 * countryintfr.java
 *
 * Created on August 13, 2002, 12:15 PM
 */
package com.afrisoftech.accounting;

import com.afrisoftech.lib.HosOutPatientDatePanel;
import com.afrisoftech.lib.UserName;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.openide.util.Exceptions;

/**
 *
 * @author root
 */
public class InpatientDepositIntfr extends javax.swing.JInternalFrame {

    /**
     * Creates new form country
     */
    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    String cashPoint = null;
    private java.lang.String shift_no = null;
    private java.lang.String cash_no = null;
    private String rnamex;
    private String rcodex;
    private double toPayBalance;
    String deceasedWardNumber = null;
    public static String checkoutRequestID = null;

    public InpatientDepositIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();
        System.out.println("Cashpoint : " + System.getProperty("cashpoint"));
        paymentModeCmbx.setSelectedItem("Cash");
        jTextField14.setText(getCashPoint());
        shiftNoTxt.setText(getShiftNumber());
        payment.setSelected(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        patientsDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        searchNameTxt = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton9 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jPanel711 = new javax.swing.JPanel();
        jLabel711 = new javax.swing.JLabel();
        jTextField611 = new javax.swing.JTextField();
        jPanel1111 = new javax.swing.JPanel();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton1111 = new javax.swing.JButton();
        jButton3111 = new javax.swing.JButton();
        jButton4111 = new javax.swing.JButton();
        jButton5111 = new javax.swing.JButton();
        jSeparator1111 = new javax.swing.JSeparator();
        jPanel321 = new javax.swing.JPanel();
        jPanel321.setVisible(false);
        jLabel221 = new javax.swing.JLabel();
        jTextField221 = new javax.swing.JTextField();
        jLabel321 = new javax.swing.JLabel();
        jTextField421 = new javax.swing.JTextField();
        jLabel412 = new javax.swing.JLabel();
        jTextField512 = new javax.swing.JTextField();
        jPanel3111 = new javax.swing.JPanel();
        jPanel3111.setVisible(false);
        jLabel2131 = new javax.swing.JLabel();
        jTextField2121 = new javax.swing.JTextField();
        jLabel3131 = new javax.swing.JLabel();
        jTextField4111 = new javax.swing.JTextField();
        jLabel4221 = new javax.swing.JLabel();
        jTextField5211 = new javax.swing.JTextField();
        jLabel41121 = new javax.swing.JLabel();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        jButton221 = new javax.swing.JButton();
        payViaMobilePayBtn = new javax.swing.JButton();
        jPanel511 = new javax.swing.JPanel();
        jLabel1211 = new javax.swing.JLabel();
        paymentModeCmbx = new javax.swing.JComboBox();
        jLabel1321 = new javax.swing.JLabel();
        glAccountTxt = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextField14 = new javax.swing.JTextField();
        jLabel131 = new javax.swing.JLabel();
        shiftNoTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        datePicker2 = new com.afrisoftech.lib.DatePicker();
        jLabel1 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        deposit = new javax.swing.JRadioButton();
        payment = new javax.swing.JRadioButton();
        jPanel212 = new javax.swing.JPanel();
        jLabel911 = new javax.swing.JLabel();
        jTextField152 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        patientNumberTxt = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        inPatientRbtn = new javax.swing.JRadioButton();
        OutpatientRbtn = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        patientNoChk = new javax.swing.JCheckBox();
        patientNameChk = new javax.swing.JCheckBox();
        payerMobileTelephoneNumberTxt = new javax.swing.JFormattedTextField();
        schemeDepositRdi = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        glAccountCmbx = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel5 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        patientBillBtn = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        visitIDTxt = new javax.swing.JTextField();
        jLabel2122 = new javax.swing.JLabel();
        balanceTxt = new javax.swing.JTextField();
        unUtilizedDepositTxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        unitNumberTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        balanceLabel = new javax.swing.JLabel();
        balanceAfterDepositTxt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel112 = new javax.swing.JLabel();
        amountPaidTxt = new javax.swing.JTextField();
        jTextField25 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        payerTxt = new javax.swing.JTextField();
        jLabel3121 = new javax.swing.JLabel();
        patientNameTxt = new javax.swing.JTextField();
        jLabel53111 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tenderedAmttxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        changeTxt = new javax.swing.JTextField();
        utiliseDepositbtn = new javax.swing.JButton();

        patientsDialog.setModal(true);
        patientsDialog.setUndecorated(true);
        patientsDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        searchNameTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchNameTxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(searchNameTxt, gridBagConstraints);

        jSearchTable.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton9.setText("Dispose");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientsDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Patient Deposit /Payment");
        setFrameIcon(null);
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jSeparator1, gridBagConstraints);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jLabel3, gridBagConstraints);

        jPanel711.setLayout(new java.awt.GridBagLayout());

        jLabel711.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel711.add(jLabel711, gridBagConstraints);

        jTextField611.setEditable(false);
        jTextField611.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField611.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel711.add(jTextField611, gridBagConstraints);

        jPanel1111.setLayout(new java.awt.GridBagLayout());

        jButton1111.setBackground(new java.awt.Color(230, 230, 230));
        jButton1111.setMnemonic('s');
        jButton1111.setText("Save & Print receipt");
        jButton1111.setToolTipText("Click here enter data");
        jButton1111.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1111ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1111.add(jButton1111, gridBagConstraints);

        jButton3111.setMnemonic('l');
        jButton3111.setText("Clear form");
        jButton3111.setToolTipText("Click here to clear textfields");
        jButton3111.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3111ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1111.add(jButton3111, gridBagConstraints);

        jButton4111.setMnemonic('C');
        jButton4111.setText("Close form");
        jButton4111.setToolTipText("Click here to close window");
        jButton4111.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4111ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1111.add(jButton4111, gridBagConstraints);

        jButton5111.setMnemonic('h');
        jButton5111.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1111.add(jButton5111, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        jPanel1111.add(jSeparator1111, gridBagConstraints);

        jPanel321.setBorder(javax.swing.BorderFactory.createTitledBorder("Cheque Details"));
        jPanel321.setLayout(new java.awt.GridBagLayout());

        jLabel221.setText("Cheque No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel321.add(jLabel221, gridBagConstraints);

        jTextField221.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jTextField221.setForeground(new java.awt.Color(102, 102, 255));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel321.add(jTextField221, gridBagConstraints);

        jLabel321.setText("Drawer");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel321.add(jLabel321, gridBagConstraints);

        jTextField421.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jTextField421.setForeground(new java.awt.Color(51, 0, 204));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel321.add(jTextField421, gridBagConstraints);

        jLabel412.setText("Drawer's Bank");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel321.add(jLabel412, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel321.add(jTextField512, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 1);
        jPanel1111.add(jPanel321, gridBagConstraints);

        jPanel3111.setBorder(javax.swing.BorderFactory.createTitledBorder("Card Details"));
        jPanel3111.setLayout(new java.awt.GridBagLayout());

        jLabel2131.setText("Card No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3111.add(jLabel2131, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3111.add(jTextField2121, gridBagConstraints);

        jLabel3131.setText("Card Company");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3111.add(jLabel3131, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3111.add(jTextField4111, gridBagConstraints);

        jLabel4221.setText("Card Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3111.add(jLabel4221, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel3111.add(jTextField5211, gridBagConstraints);

        jLabel41121.setText("Expiry Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3111.add(jLabel41121, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jPanel3111.add(datePicker1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1111.add(jPanel3111, gridBagConstraints);

        jButton221.setMnemonic('p');
        jButton221.setText("RePrint receipt");
        jButton221.setToolTipText("Click here to edit data");
        jButton221.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton221ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1111.add(jButton221, gridBagConstraints);

        payViaMobilePayBtn.setText("Push to mobile for payment");
        payViaMobilePayBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payViaMobilePayBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1111.add(payViaMobilePayBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel711.add(jPanel1111, gridBagConstraints);

        jPanel511.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Payment Mode"));
        jPanel511.setLayout(new java.awt.GridBagLayout());

        jLabel1211.setText("Payment Mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel511.add(jLabel1211, gridBagConstraints);

        paymentModeCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select DISTINCT initcap(payment_mode) as payment_mode from pb_paymentmodes order by payment_mode"));
        paymentModeCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentModeCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel511.add(paymentModeCmbx, gridBagConstraints);

        jLabel1321.setText("Gl Acc. No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel511.add(jLabel1321, gridBagConstraints);

        glAccountTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 40);
        jPanel511.add(glAccountTxt, gridBagConstraints);

        jLabel10.setText("Cash Point");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel511.add(jLabel10, gridBagConstraints);

        jTextField14.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.5;
        gridBagConstraints.weighty = 1.0;
        jPanel511.add(jTextField14, gridBagConstraints);

        jLabel131.setText("Shift No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel511.add(jLabel131, gridBagConstraints);

        shiftNoTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel511.add(shiftNoTxt, gridBagConstraints);

        jLabel2.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel511.add(jLabel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 40);
        jPanel511.add(datePicker2, gridBagConstraints);

        jLabel1.setText("Rcpt. No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel511.add(jLabel1, gridBagConstraints);

        jTextField3.setEditable(false);
        jTextField3.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jTextField3.setForeground(new java.awt.Color(251, 9, 102));
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 40);
        jPanel511.add(jTextField3, gridBagConstraints);

        buttonGroup3.add(deposit);
        deposit.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deposit.setForeground(new java.awt.Color(0, 0, 255));
        deposit.setSelected(true);
        deposit.setText("Deposits");
        deposit.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                depositItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel511.add(deposit, gridBagConstraints);

        buttonGroup3.add(payment);
        payment.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        payment.setForeground(new java.awt.Color(0, 0, 255));
        payment.setText("Bill Payments");
        payment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                paymentItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        jPanel511.add(payment, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel711.add(jPanel511, gridBagConstraints);

        jPanel212.setBorder(javax.swing.BorderFactory.createTitledBorder("Select type here"));
        jPanel212.setLayout(new java.awt.GridBagLayout());

        jLabel911.setForeground(new java.awt.Color(255, 0, 51));
        jLabel911.setText("Scheme Name /Patient No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel212.add(jLabel911, gridBagConstraints);

        jTextField152.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField152.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel212.add(jTextField152, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setMinimumSize(new java.awt.Dimension(87, 27));
        jPanel4.setPreferredSize(new java.awt.Dimension(30, 30));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        patientNumberTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(patientNumberTxt, gridBagConstraints);

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton.setToolTipText("Search");
        searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel4.add(searchButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel212.add(jPanel4, gridBagConstraints);

        jTextField2.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField2.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        jPanel212.add(jTextField2, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Select deposit type"));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        buttonGroup2.add(inPatientRbtn);
        inPatientRbtn.setSelected(true);
        inPatientRbtn.setText(" Inpatient");
        inPatientRbtn.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        inPatientRbtn.setMargin(new java.awt.Insets(0, 0, 0, 0));
        inPatientRbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inPatientRbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(inPatientRbtn, gridBagConstraints);

        buttonGroup2.add(OutpatientRbtn);
        OutpatientRbtn.setText("Outpatient");
        OutpatientRbtn.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        OutpatientRbtn.setEnabled(false);
        OutpatientRbtn.setMargin(new java.awt.Insets(0, 0, 0, 0));
        OutpatientRbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OutpatientRbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(OutpatientRbtn, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Search By"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(patientNoChk);
        patientNoChk.setSelected(true);
        patientNoChk.setText("Patient No.");
        patientNoChk.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(patientNoChk, gridBagConstraints);

        buttonGroup1.add(patientNameChk);
        patientNameChk.setText("Patient Name");
        patientNameChk.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(patientNameChk, gridBagConstraints);

        payerMobileTelephoneNumberTxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bill Payer Telephone No.", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 0, 51)));
        payerMobileTelephoneNumberTxt.setForeground(new java.awt.Color(0, 0, 255));
        try {
            payerMobileTelephoneNumberTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("254-7##-######")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        payerMobileTelephoneNumberTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payerMobileTelephoneNumberTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(payerMobileTelephoneNumberTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jPanel1, gridBagConstraints);

        buttonGroup2.add(schemeDepositRdi);
        schemeDepositRdi.setText("Scheme Deposit");
        schemeDepositRdi.setEnabled(false);
        schemeDepositRdi.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                schemeDepositRdiItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(schemeDepositRdi, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel212.add(jPanel2, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(153, 255, 255), null, null));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        glAccountCmbx.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        glAccountCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select '0select' union SELECT distinct UPPER(activity) FROM pb_activity WHERE category_class ilike 'plid' and activity ilike '%deposit%' EXCEPT select main_service from pb_operating_parameters WHERE category = 'CA'  ORDER BY 1  asc"));
        glAccountCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                glAccountCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 50);
        jPanel3.add(glAccountCmbx, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 0, 51));
        jLabel4.setText("Revenue Code/Department");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel3.add(jLabel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel212.add(jPanel3, gridBagConstraints);

        jSeparator2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(153, 255, 255), null, null));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        jPanel212.add(jSeparator2, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jButton1.setText("Link to Bill Estimates");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        jPanel5.add(jButton1, gridBagConstraints);

        patientBillBtn.setMnemonic('b');
        patientBillBtn.setText("    View Patient Bill    ");
        patientBillBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientBillBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        jPanel5.add(patientBillBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        jPanel212.add(jPanel5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel212.add(jLabel9, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        visitIDTxt.setEditable(false);
        visitIDTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visitIDTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 4.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(visitIDTxt, gridBagConstraints);

        jLabel2122.setForeground(new java.awt.Color(255, 0, 51));
        jLabel2122.setText("Visit ID");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel6.add(jLabel2122, gridBagConstraints);

        balanceTxt.setEditable(false);
        balanceTxt.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        balanceTxt.setForeground(new java.awt.Color(255, 0, 102));
        balanceTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 4.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(balanceTxt, gridBagConstraints);

        unUtilizedDepositTxt.setEditable(false);
        unUtilizedDepositTxt.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        unUtilizedDepositTxt.setForeground(new java.awt.Color(0, 0, 204));
        unUtilizedDepositTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        unUtilizedDepositTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 4.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(unUtilizedDepositTxt, gridBagConstraints);

        jLabel7.setText("Un-Utilized Deposit Balance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel6.add(jLabel7, gridBagConstraints);

        unitNumberTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 4.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(unitNumberTxt, gridBagConstraints);

        jLabel6.setForeground(new java.awt.Color(255, 0, 51));
        jLabel6.setText("Unit Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel6.add(jLabel6, gridBagConstraints);

        balanceLabel.setText("Balance Due / Payable");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel6.add(balanceLabel, gridBagConstraints);

        balanceAfterDepositTxt.setEditable(false);
        balanceAfterDepositTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel6.add(balanceAfterDepositTxt, gridBagConstraints);

        jLabel12.setText("*Balance receivable after utilizing deposit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        jPanel6.add(jLabel12, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        jPanel212.add(jPanel6, gridBagConstraints);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "NB:Tendered Amount= Physical amount handed to cashier", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 51, 102)));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        jLabel112.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel7.add(jLabel112, gridBagConstraints);

        amountPaidTxt.setFont(new java.awt.Font("DialogInput", 1, 12)); // NOI18N
        amountPaidTxt.setForeground(new java.awt.Color(255, 0, 51));
        amountPaidTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        amountPaidTxt.setText("0.00");
        amountPaidTxt.setNextFocusableComponent(tenderedAmttxt);
        amountPaidTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                amountPaidTxtFocusGained(evt);
            }
        });
        amountPaidTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                amountPaidTxtKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel7.add(amountPaidTxt, gridBagConstraints);

        jTextField25.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel7.add(jTextField25, gridBagConstraints);

        jLabel5.setText("Paid By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel7.add(jLabel5, gridBagConstraints);

        payerTxt.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel7.add(payerTxt, gridBagConstraints);

        jLabel3121.setText("Patient Category");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel7.add(jLabel3121, gridBagConstraints);

        patientNameTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel7.add(patientNameTxt, gridBagConstraints);

        jLabel53111.setText("Amount To Pay");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel7.add(jLabel53111, gridBagConstraints);

        jLabel8.setText("Tendered Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel7.add(jLabel8, gridBagConstraints);

        tenderedAmttxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        tenderedAmttxt.setText("0.00");
        tenderedAmttxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                tenderedAmttxtCaretUpdate(evt);
            }
        });
        tenderedAmttxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tenderedAmttxtFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel7.add(tenderedAmttxt, gridBagConstraints);

        jLabel11.setText("Change");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel7.add(jLabel11, gridBagConstraints);

        changeTxt.setEditable(false);
        changeTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        changeTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel7.add(changeTxt, gridBagConstraints);

        utiliseDepositbtn.setText("Utilize deposit");
        utiliseDepositbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                utiliseDepositbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(utiliseDepositbtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        jPanel212.add(jPanel7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel711.add(jPanel212, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel711, gridBagConstraints);

        setBounds(0, 0, 1058, 530);
    }// </editor-fold>//GEN-END:initComponents

    private void glAccountCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_glAccountCmbxActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_glAccountCmbxActionPerformed

    private void OutpatientRbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OutpatientRbtnActionPerformed
        patientNoChk.setEnabled(false);
        patientNameChk.setEnabled(false);
// TODO add your handling code here:
    }//GEN-LAST:event_OutpatientRbtnActionPerformed

    private void inPatientRbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inPatientRbtnActionPerformed

        patientNoChk.setEnabled(false);
        patientNameChk.setEnabled(false);
// TODO add your handling code here:
    }//GEN-LAST:event_inPatientRbtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        com.afrisoftech.accounting.FinSchemeInvsNhifIntfr other = new com.afrisoftech.accounting.FinSchemeInvsNhifIntfr(connectDB, pConnDB);
        com.afrisoftech.hospital.HospitalMain.saccopn.add(other, javax.swing.JLayeredPane.DEFAULT_LAYER);
        try {
            other.setSelected(true);
        } catch (java.beans.PropertyVetoException pvt) {
        }
        other.setVisible(true);
// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton221ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton221ActionPerformed
        String receiptNo1 = null;
        String rct = null;
        try {
            connectDB.setAutoCommit(false);

            String clientReceipt = null;

            java.sql.PreparedStatement pstmtReprint = connectDB.prepareStatement("SELECT dealer FROM ac_cash_collection WHERE receipt_no = ?");

            pstmtReprint.setString(1, jTextField3.getText());
            java.sql.ResultSet rsetReprint = pstmtReprint.executeQuery();

            while (rsetReprint.next()) {
                clientReceipt = rsetReprint.getString(1);
            }

            receiptNo1 = jTextField3.getText();
            // }
            String nodetails = null;

            java.sql.Statement ps11 = connectDB.createStatement();
            java.sql.ResultSet rst11 = ps11.executeQuery("select nodetails from receipt_pref");
            while (rst11.next()) {
                nodetails = rst11.getObject(1).toString();
            }
            java.sql.Statement ps112 = connectDB.createStatement();
            java.sql.ResultSet rst112 = ps112.executeQuery("select rct_format from receipt_pref");
            while (rst112.next()) {
                rct = rst112.getObject(1).toString();
            }
            if (nodetails.equalsIgnoreCase("NoDetails")) {

                com.afrisoftech.txtreports.NoDetReceiptsTxt policy = new com.afrisoftech.txtreports.NoDetReceiptsTxt(connectDB, patientNumberTxt.getText(), patientNameTxt.getText(), amountPaidTxt.getText(), receiptNo1, this.paymentModeCmbx.getSelectedItem().toString());
            } else {
                if (nodetails.equalsIgnoreCase("Codes")) {
                    com.afrisoftech.txtreports.CodeReceiptsTxt policy = new com.afrisoftech.txtreports.CodeReceiptsTxt(connectDB, patientNumberTxt.getText(), patientNameTxt.getText(), amountPaidTxt.getText(), receiptNo1, this.paymentModeCmbx.getSelectedItem().toString());

                } else {
                    if (nodetails.equalsIgnoreCase("dept")) {
                        com.afrisoftech.txtreports.ReceiptsPerDeptTxt policy = new com.afrisoftech.txtreports.ReceiptsPerDeptTxt(connectDB, patientNumberTxt.getText(), patientNameTxt.getText(), amountPaidTxt.getText(), receiptNo1, this.paymentModeCmbx.getSelectedItem().toString());

                    } else {
                        if (nodetails.equalsIgnoreCase("Prints") && rct.equalsIgnoreCase("Pdf")) {
                            com.afrisoftech.reports.ReceiptsReprintPdf policy = new com.afrisoftech.reports.ReceiptsReprintPdf();
                            policy.ReceiptsReprintPdf(connectDB, receiptNo1);
                        } else {
                            com.afrisoftech.txtreports.GokReceiptsRTxt policy = new com.afrisoftech.txtreports.GokReceiptsRTxt(connectDB, clientReceipt, amountPaidTxt.getText(), receiptNo1, this.paymentModeCmbx.getSelectedItem().toString(), "0.00", "0.00", shiftNoTxt.getText());

                            //com.afrisoftech.txtreports.ReceiptsTxt policy = new com.afrisoftech.txtreports.ReceiptsTxt(connectDB, jTextField9.getText(),jTextField20.getText(),jTextField17.getText(),receiptNo1,this.jComboBox411.getSelectedItem().toString());
                        }
                    }
                }
            }

        } catch (java.sql.SQLException sq) {

            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }            // Add your handling code here:
    }//GEN-LAST:event_jButton221ActionPerformed

    private void jButton4111ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4111ActionPerformed
        this.setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_jButton4111ActionPerformed

    private void jButton3111ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3111ActionPerformed
        patientNameTxt.setText("");
        visitIDTxt.setText("");
        jTextField25.setText("");
        patientNumberTxt.setText("");
        amountPaidTxt.setText("");
        balanceTxt.setText("");
        // Add your handling code here:
    }//GEN-LAST:event_jButton3111ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        this.patientsDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked

        tenderedAmttxt.setText("0.00");
        changeTxt.setText("0.00");
        System.out.println("Starting To Process Patient Data...");
        this.jButton1111.setEnabled(true);
        patientNameTxt.setText("");
        visitIDTxt.setText("");
        jTextField25.setText("");
        patientNumberTxt.setText("");
        amountPaidTxt.setText("0.00");
        balanceTxt.setText("");
        this.patientsDialog.dispose();
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        int j = 0;

        patientNumberTxt.setText(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0).toString());
        patientNameTxt.setText(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1).toString());
        payerTxt.setText(patientNameTxt.getText());
        unUtilizedDepositTxt.setText(java.lang.String.valueOf(com.afrisoftech.lib.unUtelisedDeposit.getBalanceDeposit(connectDB, patientNumberTxt.getText().toString().trim())));
        System.out.println("\nQuerying required data about: [Number: " + patientNumberTxt.getText() + "] [Name: " + patientNameTxt.getText() + "]");
        try {

            java.sql.Statement stmt111 = connectDB.createStatement();
            //  java.sql.ResultSet rsetTable11 = stmt111.executeQuery("SELECT count(patient_no) FROM hp_admission WHERE patient_no = '" + patientNumberTxt.getText() + "' AND check_out = false ");
            java.sql.ResultSet rsetTable11 = stmt111.executeQuery("SELECT count(patient_no) FROM hp_admission WHERE patient_no = '" + patientNumberTxt.getText() + "' AND check_out = false UNION SELECT count(patient_no) FROM hp_mortuary WHERE annual_no = '" + patientNumberTxt.getText() + "' AND check_out = false order by 1 desc limit 1");
            while (rsetTable11.next()) {
                j = rsetTable11.getInt(1);
                System.out.println("Checking Instances of Checkout...\n...\nCheckout=false instances are " + j + "\n Proceeding...");
            }
            if (j > 0) {

                System.out.println("\nFurther Patient Data Query....\n");

                java.sql.Statement stmt = connectDB.createStatement();
                java.sql.ResultSet rset = stmt.executeQuery("select patient_no,patient_name,ward,visit_id, sub_chief from hp_admission where  (patient_no = '" + patientNumberTxt.getText() + "' or  sub_chief = '" + patientNumberTxt.getText() + "') and check_out=false   ORDER BY date_admitted desc LIMIT 1");
                System.out.println();
                while (rset.next()) {
                    patientNumberTxt.setText(rset.getObject(1).toString());
                    patientNameTxt.setText(rset.getObject(2).toString());
                    jTextField2.setText(rset.getObject(3).toString());
                    visitIDTxt.setText(rset.getObject(4).toString());
                    unitNumberTxt.setText(rset.getObject(5).toString());
                }

                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select patient_category,payment_mode from hp_patient_card where patient_no  ='" + patientNumberTxt.getText() + "' order by date desc limit 1");
                while (rset1.next()) {
                    //    jTextField211.setText(rset1.getObject(1).toString());
                    jTextField25.setText(rset1.getObject(1).toString());

                }
                double totalSchemeAmount = 0.0;
                double balance = 0.0;
                double schemeBal = com.afrisoftech.lib.unUtelisedDeposit.getBalanceDeposit(connectDB, patientNumberTxt.getText().toString());
                if (schemeDepositRdi.isSelected()) {
                    System.out.println("\nFurther Patient Data Query....\nObtaining sum of deposit");
                    java.sql.Statement stmt11 = connectDB.createStatement();
                    java.sql.ResultSet rset11 = stmt11.executeQuery("SELECT sum(credit-debit) FROM ac_debtors WHERE  account_no  = '" + patientNumberTxt.getText() + "'");
                    while (rset11.next()) {
                        balance = rset11.getDouble(1);
                    }
                    unUtilizedDepositTxt.setText(String.valueOf(schemeBal));
                    totalSchemeAmount = schemeBal + balance;

                    if (totalSchemeAmount > 0) {
                        balanceTxt.setText("Total Credit+Deposit " + String.valueOf(totalSchemeAmount));
                    } else {
                        balanceTxt.setText("Total Debt " + String.valueOf(totalSchemeAmount));
                    }
                } else {
                    if (patientNumberTxt.getText().contains("INT") || patientNumberTxt.getText().contains("BID")) {
                        visitIDTxt.setText(patientNumberTxt.getText());
                    }

                    java.sql.Statement stmt11 = connectDB.createStatement();
                    java.sql.ResultSet rset11 = stmt11.executeQuery("SELECT sum(debit-credit) FROM hp_patient_card WHERE  patient_no  = '" + patientNumberTxt.getText() + "' and visit_id='" + visitIDTxt.getText().trim() + "' and (invoice_no NOT ILIKE 'I%' OR invoice_no NOT ILIKE 'O%')");
                    while (rset11.next()) {

                        balance = rset11.getDouble(1);

                    }
                    System.out.println("to pay " + balance);

                    java.sql.PreparedStatement pstmtWardNumber = connectDB.prepareStatement("SELECT patient_no FROM hp_mortuary WHERE annual_no = ?");
                    pstmtWardNumber.setString(1, patientNumberTxt.getText());
                    java.sql.ResultSet rsetWardNumber = pstmtWardNumber.executeQuery();
                    while (rsetWardNumber.next()) {
                        deceasedWardNumber = rsetWardNumber.getString(1);
                    }
                    java.sql.Statement stmtdeposit = connectDB.createStatement();
                    java.sql.ResultSet rsetdeposit = stmtdeposit.executeQuery("select round(sum(credit-debit),2) from ac_ledger "
                            + "where (patient_no = '" + this.patientNumberTxt.getText().trim() + "' or patient_no = '" + deceasedWardNumber + "') AND transaction_type='Unutilized patient deposit'");
                    while (rsetdeposit.next()) {
                        if (balance >= 0) {
                            System.out.println("2 to pay " + balance);
                            balanceTxt.setText("To PAY " + String.valueOf(balance));
                            //unUtilizedDepositTxt.setText(java.lang.String.valueOf(com.afrisoftech.lib.unUtelisedDeposit.getBalanceDeposit(connectDB, patientNumberTxt.getText().toString().trim())));
                            unUtilizedDepositTxt.setText(String.valueOf(rsetdeposit.getDouble(1)));
                            balanceAfterDepositTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(balance - Double.parseDouble(unUtilizedDepositTxt.getText())));
                            //amountPaidTxt.setText(String.valueOf(balance));
                            amountPaidTxt.setSelectionStart(0);

                            this.jButton1111.setVisible(true);
                            this.jButton221.setVisible(true);
                            toPayBalance = balance;
                        } else if (balance < 0) {
                            balanceTxt.setText("Refund " + String.valueOf(balance * -1));
                            //   this.jButton1111.setVisible(false);
                            // this.jButton221.setVisible(false);
                        }

                    }

                }
            } else {
                balanceTxt.setText("0.00");
                jTextField2.setText("-");
            }
            System.out.println("\nFinished, Now loading patient details on Form");
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqe.getMessage());
            //  System.out.println("Insert not successful");
        }
        //   jButton301.setEnabled(true);

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
                if (paymentModeCmbx.getSelectedItem().toString().contains("Pesa")) {
            javax.swing.JOptionPane.showMessageDialog(this, "You must enter a valid client Mpesa telephone number in the format : 254-7xxxxxxx on the Bill Payer Telephone No field");
        }
        // patientsDialog.dispose();         // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked

    private void searchNameTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchNameTxtCaretUpdate
        if (searchNameTxt.getCaretPosition() < 3) {

            System.out.println("Nothing");
        } else {
            if (inPatientRbtn.isSelected()) {

                if (this.patientNameChk.isSelected()) {
                    jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT patient_no, name, unit_number from inpatient_list where name ILIKE '" + searchNameTxt.getText() + "%' or unit_number ILIKE '" + searchNameTxt.getText() + "%' "
                            + "union SELECT annual_no as patient_no, patient_name as name, tag_no from hp_mortuary where annual_no ilike '%" + searchNameTxt.getText() + "%' or patient_name ilike '%" + searchNameTxt.getText() + "%' or tag_no ilike '%" + searchNameTxt.getText() + "%' order by name"));

                    jSearchTable.setShowHorizontalLines(false);
                    jSearchScrollPane.setViewportView(jSearchTable);

                } else {

                    if (this.patientNoChk.isSelected()) {
                        jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(
                                connectDB, "SELECT patient_no, name, unit_number from inpatient_list where patient_no ILIKE '" + searchNameTxt.getText() + "%' or unit_number ILIKE '" + searchNameTxt.getText() + "%' "
                                + "union SELECT annual_no as patient_no, patient_name as name, tag_no from hp_mortuary where annual_no ilike '%" + searchNameTxt.getText() + "%' or patient_name ilike '%" + searchNameTxt.getText() + "%' or tag_no ilike '%" + searchNameTxt.getText() + "%' order by patient_no"));

                        jSearchTable.setShowHorizontalLines(false);
                        jSearchScrollPane.setViewportView(jSearchTable);

                    }
                }
            } else if (OutpatientRbtn.isSelected()) {
                if (this.patientNameChk.isSelected()) {
                    jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT distinct patient_no, name, unit_number from patient_select where name ILIKE '%" + searchNameTxt.getText() + "%' or unit_number ILIKE '" + searchNameTxt.getText() + "%'   order by 2"));
                    jSearchTable.setShowHorizontalLines(false);
                    jSearchScrollPane.setViewportView(jSearchTable);

                } else {
                    if (this.patientNoChk.isSelected()) {
                        jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT distinct patient_no, name, unit_number from patient_select where patient_no ILIKE '%" + searchNameTxt.getText() + "%'  or unit_number ILIKE '" + searchNameTxt.getText() + "%'   order by 1"));
                        jSearchTable.setShowHorizontalLines(false);
                        jSearchScrollPane.setViewportView(jSearchTable);

                    }
                }
            } else {
                jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "select account_no,(scheme_name) as scheme, payer_name from ac_schemes where scheme_name ILIKE '" + searchNameTxt.getText().toString() + "%' or account_no ILIKE '" + searchNameTxt.getText().toString() + "%'"));
                jSearchTable.setShowHorizontalLines(false);
                jSearchScrollPane.setViewportView(jSearchTable);
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_searchNameTxtCaretUpdate

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchButtonClicked();

    }//GEN-LAST:event_searchButtonActionPerformed
    private void searchButtonClicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.patientNumberTxt.getLocationOnScreen();

        patientsDialog.setSize(700, 200);

        patientsDialog.setLocation(point);

        patientsDialog.setVisible(true);

    }
    private void jButton1111ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1111ActionPerformed

        if (Double.valueOf(tenderedAmttxt.getText()) < 1) {
            tenderedAmttxt.setText(amountPaidTxt.getText());
        }

        if (glAccountCmbx.getSelectedIndex() > 0) {
            if (amountPaidTxt.getText().toCharArray().length > 0) {
                if (patientNumberTxt.getText().toCharArray().length > 0 && glAccountCmbx.getSelectedItem() != null && patientNameTxt.getText().toString().toCharArray().length > 1 && Double.parseDouble(amountPaidTxt.getText()) > 0.00 && amountPaidTxt.getText().toCharArray().length > 0) {
                    java.util.Date periodFrom = null;
                    java.util.Date periodTo = null;

                    java.sql.Savepoint registerSavePoint = null;
                    try {
                        connectDB.setAutoCommit(false);
                        registerSavePoint = connectDB.setSavepoint("registration");
                    } catch (java.sql.SQLException ex) {
                        ex.printStackTrace();
                    }

                    try {

                        java.sql.Statement stmtf = connectDB.createStatement();
                        java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + datePicker2.getDate() + "' BETWEEN period_from AND period_to");
                        while (rsetf.next()) {
                            periodFrom = rsetf.getDate(1);
                            periodTo = rsetf.getDate(2);
                        }

                        if (datePicker2.getDate().before(periodFrom) || datePicker2.getDate().after(periodTo)) {
                            javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                        } else {
                            if (patientNameTxt.getText().equalsIgnoreCase("")) {
                                javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "You cannot save without the name", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                            } else {
                                //try{
                                String glAcc = null;
                                String receiptNo1 = null;
                                String receiptNo2 = null;
                                String actCode1 = null;
                                String glCode1 = null;
                                String transNo1 = null;
                                String actNames1 = null;
                                String patientAcc = null;
                                String user = null;
                                String AccDesc = null;
                                String name = null;
                                String rcode = null;
                                String rname = null;
                                //   String glAcc = null;
                                String Activity = null;
                                // String userName = null;
                                String voucherNo = null;
                                String visitid = "-";
                                String Stock = null;
                                String voucNo = null;
                                String mdepartment = null;
                                String TransNo = null;
                                String glType = null;
                                String nodetails = null;
                                int vid = 0;
                                String rct = null;

                                receiptNo1 = com.afrisoftech.lib.DateLables.getDateLabel();

                                System.out.println("this is the value" + receiptNo1);
                                try {

                                    java.sql.Statement pss = connectDB.createStatement();
                                    java.sql.ResultSet rss = pss.executeQuery("select nextval('transaction_no_seq')");

                                    while (rss.next()) {
                                        transNo1 = rss.getObject(1).toString();
                                        receiptNo1 = "D" + rss.getString(1);
                                    }

                                } catch (Exception rdf) {
                                    rdf.printStackTrace();
                                    rdf.getMessage();

                                }

                                System.out.println(actNames1);

                                System.err.println("niko hapA ....  " + receiptNo2);
                                System.err.println("niko hapA ....  " + receiptNo1);
                                // jTextField3.setText(receiptNo2);

                                java.util.Calendar calendar = java.util.Calendar.getInstance();

                                long dateNow = calendar.getTimeInMillis();

                                java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

                                java.sql.Statement stm12f = connectDB.createStatement();
                                java.sql.ResultSet rse12f = stm12f.executeQuery("select now()");
                                while (rse12f.next()) {
                                    datenowSql = rse12f.getTimestamp(1);
                                }

                                java.sql.Statement stm121xx = connectDB.createStatement();
                                java.sql.ResultSet rse121xx = stm121xx.executeQuery("select shift_no from ac_shifts WHERE user_name = current_user and status = 'Running' AND cash_point = '" + jTextField14.getText() + "'");
                                while (rse121xx.next()) {

                                    shiftNoTxt.setText(rse121xx.getString(1));

                                }
                                java.sql.Statement stm12 = connectDB.createStatement();
                                java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                                while (rse12.next()) {

                                    patientAcc = rse12.getObject(1).toString();
                                    AccDesc = rse12.getObject(2).toString();
                                }
                                java.sql.Statement stm12z = connectDB.createStatement();
                                java.sql.ResultSet rse12z = stm12z.executeQuery("select current_user");
                                while (rse12z.next()) {
                                    user = rse12z.getObject(1).toString();
                                }
                                java.sql.Statement stm1211 = connectDB.createStatement();
                                java.sql.ResultSet rse1211 = stm1211.executeQuery("select activity,code from pb_activity where activity_category ='RC'");
                                while (rse1211.next()) {
                                    rname = rse1211.getObject(1).toString();
                                    rcode = rse1211.getObject(2).toString();
                                }

                                java.sql.Statement stm1211x = connectDB.createStatement();
                                //    java.sql.ResultSet rse1211x = stm1211x.executeQuery("SELECT activity,code FROM pb_activity WHERE activity_category ilike 'IDP'");
                                java.sql.ResultSet rse1211x = stm1211x.executeQuery("SELECT activity,code FROM pb_activity WHERE activity ilike '" + glAccountCmbx.getSelectedItem().toString() + "'");
                                while (rse1211x.next()) {
                                    rnamex = rse1211x.getObject(1).toString();
                                    rcodex = rse1211x.getObject(2).toString();
                                }
                                //}

                                java.sql.Statement stm121 = connectDB.createStatement();
                                java.sql.ResultSet rse121 = stm121.executeQuery("select activity,code,department from pb_activity where code ='" + rcodex + "'");
                                while (rse121.next()) {

                                    glAcc = rse121.getObject(1).toString();
                                    mdepartment = rse121.getObject(3).toString();
                                }

                                java.sql.PreparedStatement psr = connectDB.prepareStatement("INSERT INTO ac_receipts_no("
                                        + "account_no, account_name, date, amount, shift_no, "
                                        + "cash_point, reference, user_name) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
                                psr.setString(1, patientNumberTxt.getText());
                                psr.setString(2, patientNameTxt.getText());
                                psr.setDate(3, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                                psr.setDouble(4, java.lang.Double.valueOf(amountPaidTxt.getText()));
                                psr.setInt(5, java.lang.Integer.valueOf(shiftNoTxt.getText()));
                                psr.setString(6, jTextField14.getText());
                                psr.setString(7, receiptNo1);
                                psr.setString(8, user);
                                psr.executeUpdate();
                                // OtherRecptintfr
                                try {
                                    String query = "SELECT LPAD(receipt_no::TEXT,8,'0'::TEXT)::character varying as man FROM ac_receipts_no WHERE reference = '" + receiptNo1 + "'";
                                    java.sql.PreparedStatement pssq = connectDB.prepareStatement("SELECT LPAD(receipt_no::TEXT,8,'0'::TEXT)::character varying as man FROM ac_receipts_no WHERE reference = '" + receiptNo1 + "'");
                                    java.sql.ResultSet rssq = pssq.executeQuery();

                                    while (rssq.next()) {
                                        System.out.println("hii ni noma " + query);
                                        //transNo1 = rss.getObject(1).toString();
                                        receiptNo2 = rssq.getString(1);
                                    }

                                } catch (Exception rdf) {
                                    rdf.printStackTrace();
                                    rdf.getMessage();

                                }
                                jTextField3.setText(receiptNo2);

                                if (payment.isSelected()) {
                                    java.sql.PreparedStatement pstmtx = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                                    pstmtx.setString(1, patientNumberTxt.getText());
                                    pstmtx.setObject(2, "Receipt");
                                    pstmtx.setObject(3, jTextField25.getText());
                                    pstmtx.setObject(4, paymentModeCmbx.getSelectedItem().toString());
                                    pstmtx.setString(5, transNo1);
                                    pstmtx.setString(7, "");
                                    pstmtx.setString(6, jTextField2121.getText());
                                    pstmtx.setString(8, jTextField5211.getText());
                                    pstmtx.setString(9, jTextField4111.getText());
                                    pstmtx.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                                    pstmtx.setString(11, "");
                                    pstmtx.setDouble(13, java.lang.Double.valueOf(amountPaidTxt.getText()));
                                    pstmtx.setDouble(12, 0.0);
                                    pstmtx.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                                    pstmtx.setObject(15, patientAcc);
                                    pstmtx.setObject(16, "Receipt");
                                    pstmtx.setDouble(17, 1);
                                    pstmtx.setObject(18, "");
                                    pstmtx.setBoolean(19, true);
                                    pstmtx.setString(20, "Receipt");
                                    pstmtx.setBoolean(21, true);
                                    pstmtx.setString(22, AccDesc);
                                    if (patientNumberTxt.getText().startsWith("INT") || patientNumberTxt.getText().startsWith("BID")) {
                                        pstmtx.setString(23, patientNumberTxt.getText());
                                    } else {
                                        pstmtx.setString(23, visitid);
                                    }
                                    pstmtx.setString(24, user);
                                    pstmtx.setString(25, jTextField14.getText());
                                    if (inPatientRbtn.isSelected()) {
                                        pstmtx.setString(26, "IP");
                                    } else {
                                        pstmtx.setString(26, "OP");
                                    }
                                    pstmtx.setTimestamp(27, com.afrisoftech.lib.ServerTime.getSQLTimeStamp(connectDB));//new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));

                                    if (patientNumberTxt.getText().startsWith("INT") || patientNumberTxt.getText().startsWith("BID")) {
                                        pstmtx.setString(28, patientNumberTxt.getText());
                                    } else {
                                        pstmtx.setString(28, visitIDTxt.getText());
                                    }
                                    pstmtx.setString(29, receiptNo1);
                                    pstmtx.executeUpdate();
                                } else if (deposit.isSelected()) {

                                    java.sql.PreparedStatement pstmt1q1 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                                    pstmt1q1.setObject(1, rcodex);
                                    if (payment.isSelected()) {
                                        pstmt1q1.setString(2, "Bill Clearance");
                                    } else {
                                        pstmt1q1.setString(2, rnamex);
                                    }

                                    pstmt1q1.setString(3, patientNumberTxt.getText());
                                    pstmt1q1.setString(4, patientNameTxt.getText());
                                    pstmt1q1.setObject(6, visitIDTxt.getText());
                                    pstmt1q1.setString(5, "Patient deposit");
                                    pstmt1q1.setString(7, payerTxt.getText());
                                    if (inPatientRbtn.isSelected()) {
                                        pstmt1q1.setString(8, "IP");
                                    } else if (OutpatientRbtn.isSelected()) {
                                        pstmt1q1.setString(8, "OP");
                                    } else {
                                        pstmt1q1.setString(8, "SCHEME");
                                    }

                                    pstmt1q1.setString(9, jTextField512.getText());
                                    pstmt1q1.setString(10, paymentModeCmbx.getSelectedItem().toString());
                                    pstmt1q1.setString(11, jTextField221.getText());
                                    pstmt1q1.setString(12, receiptNo2);
                                    pstmt1q1.setString(13, "");
                                    pstmt1q1.setString(14, "Receipt");
                                    pstmt1q1.setString(15, "Unutilized patient deposit");
                                    pstmt1q1.setDouble(16, 0.00);
                                    pstmt1q1.setDouble(17, java.lang.Double.valueOf(amountPaidTxt.getText().replace(",", "")));
                                    pstmt1q1.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                                    pstmt1q1.setString(19, transNo1);
                                    pstmt1q1.setBoolean(20, false);
                                    pstmt1q1.setBoolean(21, true);
                                    pstmt1q1.setBoolean(22, false);
                                    pstmt1q1.setString(23, user);
                                    pstmt1q1.setString(24, jTextField14.getText());
                                    pstmt1q1.setString(25, shiftNoTxt.getText());
                                    pstmt1q1.setTimestamp(26, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                    pstmt1q1.executeUpdate();
                                }

                                java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_cash_collection values(?,?,?,initcap(?),?,?, ?, initcap(?), initcap(?), ?, ?, ?, initcap(?), ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                                pstmt2.setObject(1, rcodex);
                                pstmt2.setString(2, rnamex);

                                pstmt2.setString(3, patientNumberTxt.getText());
                                pstmt2.setString(4, patientNameTxt.getText());
                                pstmt2.setObject(5, paymentModeCmbx.getSelectedItem().toString());
                                pstmt2.setString(6, jTextField2121.getText());
                                pstmt2.setString(7, jTextField5211.getText());
                                pstmt2.setString(8, jTextField421.getText());
                                pstmt2.setString(9, jTextField512.getText());
                                pstmt2.setString(10, rcode);
                                pstmt2.setString(12, receiptNo1);
                                pstmt2.setString(11, jTextField221.getText());
                                pstmt2.setString(13, visitIDTxt.getText());
                                pstmt2.setString(14, payerTxt.getText());
                                pstmt2.setObject(15, "Receipts");
                                pstmt2.setDouble(16, java.lang.Double.valueOf(amountPaidTxt.getText()));
                                pstmt2.setDouble(17, 0.00);
                                pstmt2.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                                pstmt2.setString(19, transNo1);
                                pstmt2.setBoolean(20, false);
                                pstmt2.setBoolean(21, false);
                                pstmt2.setBoolean(22, false);
                                pstmt2.setString(23, user);
                                pstmt2.setString(25, shiftNoTxt.getText());
                                pstmt2.setString(24, jTextField14.getText());
                                pstmt2.setDate(26, null);
                                pstmt2.setDouble(27, 1);
                                pstmt2.setDate(28, null);
                                pstmt2.setTimestamp(29, com.afrisoftech.lib.ServerTime.getSQLTimeStamp(connectDB));
                                pstmt2.setString(30, mdepartment);
                                pstmt2.executeUpdate();

                                java.sql.PreparedStatement pstmt112 = connectDB.prepareStatement("UPDATE ac_cash_collection SET receipt_no = '" + receiptNo2 + "' WHERE receipt_no = '" + receiptNo1 + "'");
                                pstmt112.executeUpdate();
                                java.sql.PreparedStatement pstmt112z = connectDB.prepareStatement("UPDATE hp_patient_card SET requisition_no = '" + receiptNo2 + "' WHERE requisition_no = '" + receiptNo1 + "'");
                                pstmt112z.executeUpdate();

                                jTextField3.setText(receiptNo2);

                                java.sql.Statement ps11 = connectDB.createStatement();
                                java.sql.ResultSet rst11 = ps11.executeQuery("select nodetails from receipt_pref");
                                while (rst11.next()) {
                                    nodetails = rst11.getObject(1).toString();
                                }
                                java.sql.Statement ps112 = connectDB.createStatement();
                                java.sql.ResultSet rst112 = ps112.executeQuery("select rct_format from receipt_pref");
                                while (rst112.next()) {

                                    rct = rst112.getObject(1).toString();
                                }
                                String clientReceipt = null;

                                java.sql.PreparedStatement pstmtReprint = connectDB.prepareStatement("SELECT dealer FROM ac_cash_collection WHERE receipt_no = ?");

                                pstmtReprint.setString(1, jTextField3.getText());
                                java.sql.ResultSet rsetReprint = pstmtReprint.executeQuery();

                                while (rsetReprint.next()) {
                                    clientReceipt = rsetReprint.getString(1);
                                }

                                if (receiptNo2 != null) {
                                    com.afrisoftech.txtreports.GokReceiptsTxt policy = new com.afrisoftech.txtreports.GokReceiptsTxt(connectDB, clientReceipt, amountPaidTxt.getText(), receiptNo2, paymentModeCmbx.getSelectedItem().toString(), tenderedAmttxt.getText(), changeTxt.getText(), shiftNoTxt.getText(), unitNumberTxt.getText());
                                }
                                connectDB.commit();
                                connectDB.setAutoCommit(true);
                                unUtilizedDepositTxt.setText("0.00");
                                patientNoChk.setEnabled(false);
                                patientNameChk.setEnabled(false);
                                jButton1111.setEnabled(false);
                                javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "Insert Done Successfully", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                                changeTxt.setText("0.00");
                                tenderedAmttxt.setText("0.00");

                            }
                        }

                    } catch (java.sql.SQLException sq) {
                        sq.printStackTrace();
                        try {
                            connectDB.rollback(registerSavePoint);
                        } catch (java.sql.SQLException sql) {
                            javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
                        System.out.println(sq.getMessage());
                        javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                    }

                } else {
                    javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "ERROR: Please check your entries again. Ensure all data in the fields is correct.");
                }

            } else {
                javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "ERROR: Please check your entries again. Amount paid cannot be empty and cannot be zero.");

            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "ERROR: Please select REVENUE CODE.");

        }

        //
//        Thread cashThread = new ReceiptThread();
//        
//        cashThread.start();
//        
//        jButton1111.setEnabled(false);
        // Add your handling code here:
    }//GEN-LAST:event_jButton1111ActionPerformed

    private void paymentModeCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentModeCmbxActionPerformed
        try {
            java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rset1 = stmt1.executeQuery("select gl_account from ac_cash_points where description  ='" + paymentModeCmbx.getSelectedItem() + "'");
            while (rset1.next()) {
                glAccountTxt.setText(rset1.getObject(1).toString());
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();

        }

        if (paymentModeCmbx.getSelectedItem().equals("Credit Card")) {
            //   jPanel11.setVisible(true);
            jPanel321.setVisible(false);
            jPanel3111.setVisible(true);
            //   jPanel4.setVisible(false);
            jTextField2121.setText("");
            jTextField5211.setText("");
            jTextField4111.setText("");

        } else {
            if (paymentModeCmbx.getSelectedItem().equals("Cheque")) {
                jPanel321.setVisible(true);
                //                jPanel11.setVisible(true);
                jPanel3111.setVisible(false);
                jTextField221.setText("");
                jTextField512.setText("");
                jTextField421.setText("");
                // jPanel321.setVisible(false);
            } else {
                // jPanel4.setVisible(false);
                //                jPanel11.setVisible(true);
                jPanel3111.setVisible(false);
                jPanel321.setVisible(false);
                jTextField221.setText("");
                jTextField512.setText("");
                this.jTextField421.setText("");
                jTextField2121.setText("");
                jTextField4111.setText("");
            }
        }        // Add your handling code here:
    }//GEN-LAST:event_paymentModeCmbxActionPerformed

    private void patientBillBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientBillBtnActionPerformed

        if (patientNumberTxt.getText().length() < 1) {
            javax.swing.JOptionPane.showMessageDialog(this, "Select Patient File First");
        } else {

            if (patientNumberTxt.getText().contains("INT") || patientNumberTxt.getText().contains("BID")) {

                com.afrisoftech.reports.FinalDescInPatientIntmlnvPdf policy = new com.afrisoftech.reports.FinalDescInPatientIntmlnvPdf();

                policy.FinalDescInPatientIntmlnvPdf(connectDB, visitIDTxt.getText(), patientNumberTxt.getText());

            } else {

                com.afrisoftech.reports.FinalInterimPatientlnvSummPdf policy1 = new com.afrisoftech.reports.FinalInterimPatientlnvSummPdf();

                policy1.FinalInterimPatientlnvSummPdf(connectDB, visitIDTxt.getText(), patientNumberTxt.getText());
            }

        }


    }//GEN-LAST:event_patientBillBtnActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void paymentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_paymentItemStateChanged
        // this.glAccountCmbx.setEnabled(false);
        //this.glAccountCmbx.setSelectedIndex(1);
        this.OutpatientRbtn.setEnabled(false);
        this.schemeDepositRdi.setEnabled(false);
        glAccountCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "(SELECT '-' union select distinct initcap(activity)  as main_service from pb_activity where activity_category='PR')  order by 1"));
    }//GEN-LAST:event_paymentItemStateChanged

    private void depositItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_depositItemStateChanged
        this.glAccountCmbx.setEnabled(true);
        this.glAccountCmbx.setSelectedIndex(0);
        this.OutpatientRbtn.setEnabled(true);
        this.schemeDepositRdi.setEnabled(true);
        glAccountCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "(SELECT '-' union SELECT distinct UPPER(activity) FROM pb_activity WHERE category_class ilike 'plid' and activity ilike '%deposit%' EXCEPT select main_service from pb_operating_parameters WHERE category = 'CA')  ORDER BY 1  asc"));
    }//GEN-LAST:event_depositItemStateChanged

    private void amountPaidTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_amountPaidTxtKeyReleased
        // TODO add your handling code here:
        if ((amountPaidTxt.getText().length() > 0) && payment.isSelected()) {
            System.out.println("the amnt to pay is " + toPayBalance + " and the amnt am paying is" + Double.valueOf(amountPaidTxt.getText().trim()));
            if ((Double.valueOf(amountPaidTxt.getText().trim()) > Double.valueOf(toPayBalance))) {
                amountPaidTxt.setText("0");
                System.out.println("the amnt now to pay is " + toPayBalance + " and the amnt am paying is" + Double.valueOf(amountPaidTxt.getText().trim()));
                javax.swing.JOptionPane.showMessageDialog(this, "Please Ensure you put Amount less than or equal to Balance to Pay");
            }
        }
    }//GEN-LAST:event_amountPaidTxtKeyReleased

    private void schemeDepositRdiItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_schemeDepositRdiItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_schemeDepositRdiItemStateChanged

    private void tenderedAmttxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_tenderedAmttxtCaretUpdate
        // TODO add your handling code here:
        if (tenderedAmttxt.getCaretPosition() > 0) {

            //    try {
            double amt_topay = Double.valueOf(amountPaidTxt.getText());
            double tendered_amt = Double.valueOf(tenderedAmttxt.getText());
            double change = tendered_amt - amt_topay;

            if (tendered_amt >= amt_topay) {
                changeTxt.setText(String.valueOf(change));
            }

//            } catch (Exception u) {
//                u.printStackTrace();
//                JOptionPane.showMessageDialog(this, "Incorrect Data Type! Numbers Only!", "Wrong Value Entered", JOptionPane.ERROR_MESSAGE);
//                tenderedAmttxt.requestFocusInWindow();
////                tenderedAmttxt.setText(null);
//
//            }
        }
    }//GEN-LAST:event_tenderedAmttxtCaretUpdate

    private void tenderedAmttxtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tenderedAmttxtFocusGained
        // TODO add your handling code here:
        // tenderedAmttxt.setSelectionStart(0);
    }//GEN-LAST:event_tenderedAmttxtFocusGained

    private void utiliseDepositbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_utiliseDepositbtnActionPerformed
        if (patientNumberTxt.getText().length() > 1) {
            if (Double.valueOf(amountPaidTxt.getText()) > 0.00) {
                if (Double.valueOf(unUtilizedDepositTxt.getText()) >= Double.valueOf(amountPaidTxt.getText())) {
                    int utilizeDeposit = javax.swing.JOptionPane.showConfirmDialog(this, "Are you sure to utilize patient deposit?", "Confirmation to utilize deposit", javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);
                    String transNo = null;
                    String actCode = null;
                    String actNames = null;
                    if (utilizeDeposit == javax.swing.JOptionPane.YES_OPTION) {
                        java.util.Date periodFrom = null;
                        java.util.Date periodTo = null;

                        java.sql.Savepoint registerSavePoint = null;
                        try {
                            connectDB.setAutoCommit(false);
                            registerSavePoint = connectDB.setSavepoint("registration");

                            java.sql.Statement stmtf = connectDB.createStatement();
                            java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + datePicker2.getDate() + "' BETWEEN period_from AND period_to");
                            while (rsetf.next()) {
                                periodFrom = rsetf.getDate(1);
                                periodTo = rsetf.getDate(2);
                            }

                            if (datePicker2.getDate().before(periodFrom) || datePicker2.getDate().after(periodTo)) {
                                javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                            } else {

                                java.sql.Statement stm1211x = connectDB.createStatement();
                                java.sql.ResultSet rse1211x = stm1211x.executeQuery("SELECT distinct description, activity_code FROM ac_ledger WHERE (patient_no = '" + patientNumberTxt.getText() + "' or patient_no = '" + deceasedWardNumber + "') and transaction_type ilike 'Unutilized patient deposit'");
                                String rnamexs = null, rcodexs = null;
                                while (rse1211x.next()) {
                                    rnamexs = rse1211x.getObject(1).toString();
                                    rcodexs = rse1211x.getObject(2).toString();
                                }

                                java.sql.Statement pss = connectDB.createStatement();
                                java.sql.ResultSet rss = pss.executeQuery("select nextval('transaction_no_seq')");
                                while (rss.next()) {
                                    transNo = rss.getObject(1).toString();
                                }

                                java.sql.Statement pss12 = connectDB.createStatement();
                                java.sql.ResultSet rsts11 = pss12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                                while (rsts11.next()) {
                                    actCode = rsts11.getObject(1).toString();
                                    actNames = rsts11.getObject(2).toString();
                                }
                                //dr deposit acc 
                                java.sql.PreparedStatement pstmt1q1 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                                pstmt1q1.setObject(1, rcodexs);
                                pstmt1q1.setString(2, rnamexs);
//                                if (deceasedWardNumber != null) {
//                                    pstmt1q1.setString(3, patientNumberTxt.getText());
//                                } else {
//                                    pstmt1q1.setString(3, deceasedWardNumber);
//                                }
                                pstmt1q1.setString(3, patientNumberTxt.getText());
                                pstmt1q1.setString(4, patientNameTxt.getText());
                                pstmt1q1.setObject(6, visitIDTxt.getText());
                                pstmt1q1.setString(5, "Patient deposit");
                                pstmt1q1.setString(7, visitIDTxt.getText());
                                pstmt1q1.setString(8, "CASH");
                                pstmt1q1.setString(9, "");
                                pstmt1q1.setString(10, paymentModeCmbx.getSelectedItem().toString());
                                pstmt1q1.setString(11, "");
                                pstmt1q1.setString(12, "-");
                                pstmt1q1.setString(13, "-");
                                pstmt1q1.setString(14, "Receipt");
                                pstmt1q1.setString(15, "Unutilized patient deposit");
                                pstmt1q1.setDouble(16, Double.valueOf(amountPaidTxt.getText()));
                                pstmt1q1.setDouble(17, 0.00);

                                pstmt1q1.setDate(18, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
                                pstmt1q1.setString(19, transNo);
                                pstmt1q1.setBoolean(20, false);
                                pstmt1q1.setBoolean(21, true);
                                pstmt1q1.setBoolean(22, false);
                                pstmt1q1.setString(23, UserName.getLoginName(connectDB));
                                pstmt1q1.setString(24, "");//cash point
                                pstmt1q1.setString(25, "");//shift
                                pstmt1q1.setTimestamp(26, com.afrisoftech.lib.ServerTime.getSQLTimeStamp(connectDB));
                                pstmt1q1.executeUpdate();

                                //cr bill pt card
                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                pstmt.setString(1, patientNumberTxt.getText());
                                pstmt.setObject(2, "Receipt");
                                pstmt.setString(3, "");
                                pstmt.setString(4, "Cash");
                                pstmt.setString(5, transNo);
                                pstmt.setString(7, patientNameTxt.getText());
                                pstmt.setString(6, "");
                                pstmt.setString(8, "");
                                pstmt.setString(9, patientNameTxt.getText());
                                pstmt.setDate(10, null);
                                pstmt.setString(11, "");
                                pstmt.setDouble(13, Double.valueOf(amountPaidTxt.getText()));
                                pstmt.setDouble(12, 0.00);
                                pstmt.setDate(14, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
                                pstmt.setObject(15, actCode);
                                pstmt.setString(16, "Utilized deposit - " + patientNameTxt.getText());
                                pstmt.setDouble(17, 1.00);
                                pstmt.setObject(18, patientNumberTxt.getText());
                                pstmt.setBoolean(19, true);
                                pstmt.setString(20, "Receipt");
                                pstmt.setBoolean(21, true);
                                pstmt.setString(22, actNames);
                                pstmt.setString(23, visitIDTxt.getText());
                                pstmt.setString(24, UserName.getLoginName(connectDB));
                                pstmt.setString(25, transNo);
                                pstmt.setString(26, "IP");
                                pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                pstmt.setString(28, visitIDTxt.getText());
                                pstmt.executeUpdate();

                            }
                            connectDB.commit();
                            JOptionPane.showMessageDialog(this, patientNameTxt.getText() + "'s deposit utilized succesfully");
                            connectDB.setAutoCommit(true);

                        } catch (SQLException sq) {
                            sq.printStackTrace();
                            try {
                                connectDB.rollback(registerSavePoint);
                            } catch (java.sql.SQLException sql) {
                                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                            }
                            System.out.println(sq.getMessage());
                            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                        }

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Patient deposit is less than the bill to be cleared", "Warning", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {

                JOptionPane.showMessageDialog(this, "Amount to be utilized MUST be greater than zero.", "Warning", JOptionPane.INFORMATION_MESSAGE);

            }
        } else {

            JOptionPane.showMessageDialog(this, "The patient file MUST be set in order to continue.", "Warning", JOptionPane.INFORMATION_MESSAGE);

        }
    }//GEN-LAST:event_utiliseDepositbtnActionPerformed

    private void amountPaidTxtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_amountPaidTxtFocusGained
        // TODO add your handling code here:
        //     amountPaidTxt.setSelectionStart(0);
    }//GEN-LAST:event_amountPaidTxtFocusGained

    private void visitIDTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visitIDTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_visitIDTxtActionPerformed

    private void payViaMobilePayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payViaMobilePayBtnActionPerformed
        String payerTelephoneNumber = null;
        System.out.println("Payer Mobile Telephone Number : [" + payerMobileTelephoneNumberTxt.getText().replace("-", "").length() + "]");

        if (paymentModeCmbx.getSelectedItem().toString().contains("Pesa") && payerMobileTelephoneNumberTxt.getText().replace("-", "").length() == 12) {
            payerTelephoneNumber = payerMobileTelephoneNumberTxt.getText().replace("-", "");

            if (paymentModeCmbx.getSelectedItem().toString().contains("Pesa") && payerMobileTelephoneNumberTxt.getText().replace("-", "").length() == 12) {
                                //STK Push for mobile payment
                javax.swing.JOptionPane.showMessageDialog(this, "Insert Successful.Bill Number. " + visitIDTxt.getText() + "", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                if (paymentModeCmbx.getSelectedItem().toString().contains("Pesa") && payerMobileTelephoneNumberTxt.getText().replace("-", "").length() == 12) {
                    boolean checkoutReturn = com.afrisoftech.funsoft.mobilepay.MobilePayAPI.sendProcessRequest(com.afrisoftech.funsoft.mobilepay.Base64Encoding.encodetoBase64String("Si1Y0dik7IoBEFC9buVTGBBdM0A9mQLw:DlPLOhUtuwdAjzDB"), visitIDTxt.getText(), payerTelephoneNumber, amountPaidTxt.getText());
                    if (checkoutReturn) {
                        try {
                            System.out.println("Processing patient card data : ["+checkoutRequestID+"]");
                            java.sql.PreparedStatement pstmtCheckout = connectDB.prepareStatement("UPDATE hp_patient_card SET checkout_request_id = ? WHERE visit_id = ?");
                            pstmtCheckout.setString(1, checkoutRequestID);
                            pstmtCheckout.setString(2, visitIDTxt.getText());
                            pstmtCheckout.executeUpdate();
                            pstmtCheckout.close();
                        } catch (SQLException ex) {
                            Exceptions.printStackTrace(ex);
                            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
                        }
                    }
                }
             //   com.afrisoftech.funsoft.mobilepay.MobilePayAPI.sendProcessRequest(com.afrisoftech.funsoft.mobilepay.Base64Encoding.encodetoBase64String("Si1Y0dik7IoBEFC9buVTGBBdM0A9mQLw:DlPLOhUtuwdAjzDB"), visitIDTxt.getText(), payerTelephoneNumber, amountPaidTxt.getText());
            }
        } else if (paymentModeCmbx.getSelectedItem().toString().contains("Pesa") && payerMobileTelephoneNumberTxt.getText().replace("-", "").length() != 12) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please check telephone number! It should be formatted as follows : 2547xxxxxx");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_payViaMobilePayBtnActionPerformed

    private void payerMobileTelephoneNumberTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payerMobileTelephoneNumberTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_payerMobileTelephoneNumberTxtActionPerformed

    public java.lang.String getShiftNumber() {

        /*
         * try {
         *
         * java.sql.Statement stmtf = connectDB.createStatement();
         * java.sql.ResultSet rsetf = stmtf.executeQuery("select code from
         * ac_cash_points_setup where description = current_user"); while
         * (rsetf.next()) { cashPoint = rsetf.getObject(1).toString();
         *
         * }
         * } catch (java.sql.SQLException sqe) { sqe.printStackTrace();
         * System.out.println("select not successful"); }
         */
        try {

            java.sql.Statement stmt = connectDB.createStatement();

            // java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE cash_point = '"+System.getProperty("cashpoint")+"' AND user_name = current_user AND (status = 'Running' OR status = 'Suspended')");
            java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE user_name = current_user AND (status = 'Running' OR status = 'Suspended')");

            while (rset.next()) {

                shift_no = rset.getString(1);

            }

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        return shift_no;

    }

    public java.lang.String getCashPoint() {

        /*
         * try {
         *
         * java.sql.Statement stmtf = connectDB.createStatement();
         * java.sql.ResultSet rsetf = stmtf.executeQuery("select code from
         * ac_cash_points_setup where description = current_user"); while
         * (rsetf.next()) { cashPoint = rsetf.getObject(1).toString();
         *
         * }
         * } catch (java.sql.SQLException sqe) { sqe.printStackTrace();
         * System.out.println("select not successful"); }
         */
        try {

            java.sql.Statement stmt = connectDB.createStatement();

            // java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE cash_point = '"+System.getProperty("cashpoint")+"' AND user_name = current_user AND (status = 'Running' OR status = 'Suspended')");
            java.sql.ResultSet rset = stmt.executeQuery("SELECT cash_point FROM ac_shifts WHERE user_name = current_user AND (status = 'Running' OR status = 'Suspended')");

            while (rset.next()) {

                cash_no = rset.getString(1);

            }

        } catch (java.sql.SQLException sqlExec) {
            sqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        return cash_no;

    }

    class ReceiptThread extends java.lang.Thread {

        public void run() {

            if (Double.valueOf(tenderedAmttxt.getText()) < 1) {
                tenderedAmttxt.setText(amountPaidTxt.getText());
            }

            if (glAccountCmbx.getSelectedIndex() > 0) {
                if (amountPaidTxt.getText().toCharArray().length > 0) {
                    if (patientNumberTxt.getText().toCharArray().length > 0 && glAccountCmbx.getSelectedItem() != null && patientNameTxt.getText().toString().toCharArray().length > 1 && Double.parseDouble(amountPaidTxt.getText()) > 0.00 && amountPaidTxt.getText().toCharArray().length > 0) {
                        java.util.Date periodFrom = null;
                        java.util.Date periodTo = null;

                        java.sql.Savepoint registerSavePoint = null;
                        try {
                            connectDB.setAutoCommit(false);
                            registerSavePoint = connectDB.setSavepoint("registration");
                        } catch (java.sql.SQLException ex) {
                            ex.printStackTrace();
                        }

                        try {

                            java.sql.Statement stmtf = connectDB.createStatement();
                            java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + datePicker2.getDate() + "' BETWEEN period_from AND period_to");
                            while (rsetf.next()) {
                                periodFrom = rsetf.getDate(1);
                                periodTo = rsetf.getDate(2);
                            }

                            if (datePicker2.getDate().before(periodFrom) || datePicker2.getDate().after(periodTo)) {
                                javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                            } else {
                                if (patientNameTxt.getText().equalsIgnoreCase("")) {
                                    javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "You cannot save without the name", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                                } else {
                                    //try{
                                    String glAcc = null;
                                    String receiptNo1 = null;
                                    String receiptNo2 = null;
                                    String actCode1 = null;
                                    String glCode1 = null;
                                    String transNo1 = null;
                                    String actNames1 = null;
                                    String patientAcc = null;
                                    String user = null;
                                    String AccDesc = null;
                                    String name = null;
                                    String rcode = null;
                                    String rname = null;
                                    //   String glAcc = null;
                                    String Activity = null;
                                    // String userName = null;
                                    String voucherNo = null;
                                    String visitid = "-";
                                    String Stock = null;
                                    String voucNo = null;
                                    String mdepartment = null;
                                    String TransNo = null;
                                    String glType = null;
                                    String nodetails = null;
                                    int vid = 0;
                                    String rct = null;

                                    receiptNo1 = com.afrisoftech.lib.DateLables.getDateLabel();

                                    System.out.println("this is the value" + receiptNo1);
                                    try {

                                        java.sql.Statement pss = connectDB.createStatement();
                                        java.sql.ResultSet rss = pss.executeQuery("select nextval('transaction_no_seq')");

                                        while (rss.next()) {
                                            transNo1 = rss.getObject(1).toString();
                                            receiptNo1 = "D" + rss.getString(1);
                                        }

                                    } catch (Exception rdf) {
                                        rdf.printStackTrace();
                                        rdf.getMessage();

                                    }

                                    System.out.println(actNames1);

                                    System.err.println("niko hapA ....  " + receiptNo2);
                                    System.err.println("niko hapA ....  " + receiptNo1);
                                    // jTextField3.setText(receiptNo2);

                                    java.util.Calendar calendar = java.util.Calendar.getInstance();

                                    long dateNow = calendar.getTimeInMillis();

                                    java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

                                    java.sql.Statement stm12f = connectDB.createStatement();
                                    java.sql.ResultSet rse12f = stm12f.executeQuery("select now()");
                                    while (rse12f.next()) {
                                        datenowSql = rse12f.getTimestamp(1);
                                    }

                                    java.sql.Statement stm121xx = connectDB.createStatement();
                                    java.sql.ResultSet rse121xx = stm121xx.executeQuery("select shift_no from ac_shifts WHERE user_name = current_user and status = 'Running' AND cash_point = '" + jTextField14.getText() + "'");
                                    while (rse121xx.next()) {

                                        shiftNoTxt.setText(rse121xx.getString(1));

                                    }
                                    java.sql.Statement stm12 = connectDB.createStatement();
                                    java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                                    while (rse12.next()) {

                                        patientAcc = rse12.getObject(1).toString();
                                        AccDesc = rse12.getObject(2).toString();
                                    }
                                    java.sql.Statement stm12z = connectDB.createStatement();
                                    java.sql.ResultSet rse12z = stm12z.executeQuery("select current_user");
                                    while (rse12z.next()) {
                                        user = rse12z.getObject(1).toString();
                                    }
                                    java.sql.Statement stm1211 = connectDB.createStatement();
                                    java.sql.ResultSet rse1211 = stm1211.executeQuery("select activity,code from pb_activity where activity_category ='RC'");
                                    while (rse1211.next()) {
                                        rname = rse1211.getObject(1).toString();
                                        rcode = rse1211.getObject(2).toString();
                                    }

                                    java.sql.Statement stm1211x = connectDB.createStatement();
                                    //    java.sql.ResultSet rse1211x = stm1211x.executeQuery("SELECT activity,code FROM pb_activity WHERE activity_category ilike 'IDP'");
                                    java.sql.ResultSet rse1211x = stm1211x.executeQuery("SELECT activity,code FROM pb_activity WHERE activity ilike '" + glAccountCmbx.getSelectedItem().toString() + "'");
                                    while (rse1211x.next()) {
                                        rnamex = rse1211x.getObject(1).toString();
                                        rcodex = rse1211x.getObject(2).toString();
                                    }
                                    //}

                                    java.sql.Statement stm121 = connectDB.createStatement();
                                    java.sql.ResultSet rse121 = stm121.executeQuery("select activity,code,department from pb_activity where code ='" + rcodex + "'");
                                    while (rse121.next()) {

                                        glAcc = rse121.getObject(1).toString();
                                        mdepartment = rse121.getObject(3).toString();
                                    }

                                    java.sql.PreparedStatement psr = connectDB.prepareStatement("INSERT INTO ac_receipts_no("
                                            + "account_no, account_name, date, amount, shift_no, "
                                            + "cash_point, reference, user_name) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
                                    psr.setString(1, patientNumberTxt.getText());
                                    psr.setString(2, patientNameTxt.getText());
                                    psr.setDate(3, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                                    psr.setDouble(4, java.lang.Double.valueOf(amountPaidTxt.getText()));
                                    psr.setInt(5, java.lang.Integer.valueOf(shiftNoTxt.getText()));
                                    psr.setString(6, jTextField14.getText());
                                    psr.setString(7, receiptNo1);
                                    psr.setString(8, user);
                                    psr.executeUpdate();
                                    // OtherRecptintfr
                                    try {
                                        String query = "SELECT LPAD(receipt_no::TEXT,8,'0'::TEXT)::character varying as man FROM ac_receipts_no WHERE reference = '" + receiptNo1 + "'";
                                        java.sql.PreparedStatement pssq = connectDB.prepareStatement("SELECT LPAD(receipt_no::TEXT,8,'0'::TEXT)::character varying as man FROM ac_receipts_no WHERE reference = '" + receiptNo1 + "'");
                                        java.sql.ResultSet rssq = pssq.executeQuery();

                                        while (rssq.next()) {
                                            System.out.println("hii ni noma " + query);
                                            //transNo1 = rss.getObject(1).toString();
                                            receiptNo2 = rssq.getString(1);
                                        }

                                    } catch (Exception rdf) {
                                        rdf.printStackTrace();
                                        rdf.getMessage();

                                    }
                                    jTextField3.setText(receiptNo2);

                                    if (payment.isSelected()) {
                                        java.sql.PreparedStatement pstmtx = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                                        pstmtx.setString(1, patientNumberTxt.getText());
                                        pstmtx.setObject(2, "Receipt");
                                        pstmtx.setObject(3, jTextField25.getText());
                                        pstmtx.setObject(4, paymentModeCmbx.getSelectedItem().toString());
                                        pstmtx.setString(5, transNo1);
                                        pstmtx.setString(7, "");
                                        pstmtx.setString(6, jTextField2121.getText());
                                        pstmtx.setString(8, jTextField5211.getText());
                                        pstmtx.setString(9, jTextField4111.getText());
                                        pstmtx.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                                        pstmtx.setString(11, "");
                                        pstmtx.setDouble(13, java.lang.Double.valueOf(amountPaidTxt.getText()));
                                        pstmtx.setDouble(12, 0.0);
                                        pstmtx.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                                        pstmtx.setObject(15, patientAcc);
                                        /*
                                         * if(jRadioButton1.isSelected()){
                                         * pstmtx.setString(16,"Receipts"); //}else{
                                         */
                                        pstmtx.setObject(16, "Receipt");
                                        //}
                                        pstmtx.setDouble(17, 1);
                                        pstmtx.setObject(18, "");
                                        pstmtx.setBoolean(19, true);
                                        pstmtx.setString(20, "Receipt");
                                        pstmtx.setBoolean(21, true);
                                        pstmtx.setString(22, AccDesc);
                                        if (patientNumberTxt.getText().startsWith("INT") || patientNumberTxt.getText().startsWith("BID")) {
                                            pstmtx.setString(23, patientNumberTxt.getText());
                                        } else {
                                            pstmtx.setString(23, visitid);
                                        }
                                        pstmtx.setString(24, user);
                                        pstmtx.setString(25, jTextField14.getText());
                                        if (inPatientRbtn.isSelected()) {
                                            pstmtx.setString(26, "IP");
                                        } else {
                                            pstmtx.setString(26, "OP");
                                        }
                                        pstmtx.setTimestamp(27, com.afrisoftech.lib.ServerTime.getSQLTimeStamp(connectDB));//new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));

                                        if (patientNumberTxt.getText().startsWith("INT") || patientNumberTxt.getText().startsWith("BID")) {
                                            pstmtx.setString(28, patientNumberTxt.getText());
                                        } else {
                                            pstmtx.setString(28, visitIDTxt.getText());
                                        }
                                        pstmtx.setString(29, receiptNo1);
                                        pstmtx.executeUpdate();
                                    } else if (deposit.isSelected()) {

                                        java.sql.PreparedStatement pstmt1q1 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                                        pstmt1q1.setObject(1, rcodex);
                                        if (payment.isSelected()) {
                                            pstmt1q1.setString(2, "Bill Clearance");
                                        } else {
                                            pstmt1q1.setString(2, rnamex);
                                        }

                                        pstmt1q1.setString(3, patientNumberTxt.getText());
                                        pstmt1q1.setString(4, patientNameTxt.getText());
                                        pstmt1q1.setObject(6, visitIDTxt.getText());
                                        pstmt1q1.setString(5, "Patient deposit");
                                        pstmt1q1.setString(7, payerTxt.getText());
                                        if (inPatientRbtn.isSelected()) {
                                            pstmt1q1.setString(8, "IP");
                                        } else if (OutpatientRbtn.isSelected()) {
                                            pstmt1q1.setString(8, "OP");
                                        } else {
                                            pstmt1q1.setString(8, "SCHEME");
                                        }

                                        pstmt1q1.setString(9, jTextField512.getText());
                                        pstmt1q1.setString(10, paymentModeCmbx.getSelectedItem().toString());
                                        pstmt1q1.setString(11, jTextField221.getText());
                                        pstmt1q1.setString(12, receiptNo2);
                                        pstmt1q1.setString(13, "");
                                        pstmt1q1.setString(14, "Receipt");
                                        pstmt1q1.setString(15, "Unutilized patient deposit");
                                        pstmt1q1.setDouble(16, 0.00);
                                        pstmt1q1.setDouble(17, java.lang.Double.valueOf(amountPaidTxt.getText().replace(",", "")));
                                        pstmt1q1.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                                        pstmt1q1.setString(19, transNo1);
                                        pstmt1q1.setBoolean(20, false);
                                        pstmt1q1.setBoolean(21, true);
                                        pstmt1q1.setBoolean(22, false);
                                        pstmt1q1.setString(23, user);
                                        pstmt1q1.setString(24, jTextField14.getText());
                                        pstmt1q1.setString(25, shiftNoTxt.getText());
                                        pstmt1q1.setTimestamp(26, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                        pstmt1q1.executeUpdate();
                                    }

                                    java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_cash_collection values(?,?,?,initcap(?),?,?, ?, initcap(?), initcap(?), ?, ?, ?, initcap(?), ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                                    pstmt2.setObject(1, rcodex);
                                    pstmt2.setString(2, rnamex);

                                    pstmt2.setString(3, patientNumberTxt.getText());
                                    pstmt2.setString(4, patientNameTxt.getText());
                                    pstmt2.setObject(5, paymentModeCmbx.getSelectedItem().toString());
                                    pstmt2.setString(6, jTextField2121.getText());
                                    pstmt2.setString(7, jTextField5211.getText());
                                    pstmt2.setString(8, jTextField421.getText());
                                    pstmt2.setString(9, jTextField512.getText());
                                    pstmt2.setString(10, rcode);
                                    pstmt2.setString(12, receiptNo1);
                                    pstmt2.setString(11, jTextField221.getText());
                                    pstmt2.setString(13, visitIDTxt.getText());
                                    pstmt2.setString(14, payerTxt.getText());
                                    pstmt2.setObject(15, "Receipts");
                                    pstmt2.setDouble(16, java.lang.Double.valueOf(amountPaidTxt.getText()));
                                    pstmt2.setDouble(17, 0.00);
                                    pstmt2.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                                    pstmt2.setString(19, transNo1);
                                    pstmt2.setBoolean(20, false);
                                    pstmt2.setBoolean(21, false);
                                    pstmt2.setBoolean(22, false);
                                    pstmt2.setString(23, user);
                                    pstmt2.setString(25, shiftNoTxt.getText());
                                    pstmt2.setString(24, jTextField14.getText());
                                    pstmt2.setDate(26, null);
                                    pstmt2.setDouble(27, 1);
                                    pstmt2.setDate(28, null);
                                    pstmt2.setTimestamp(29, com.afrisoftech.lib.ServerTime.getSQLTimeStamp(connectDB));
                                    pstmt2.setString(30, mdepartment);
                                    pstmt2.executeUpdate();

                                    java.sql.PreparedStatement pstmt112 = connectDB.prepareStatement("UPDATE ac_cash_collection SET receipt_no = '" + receiptNo2 + "' WHERE receipt_no = '" + receiptNo1 + "'");
                                    pstmt112.executeUpdate();
                                    java.sql.PreparedStatement pstmt112z = connectDB.prepareStatement("UPDATE hp_patient_card SET requisition_no = '" + receiptNo2 + "' WHERE requisition_no = '" + receiptNo1 + "'");
                                    pstmt112z.executeUpdate();

                                    jTextField3.setText(receiptNo2);

                                    java.sql.Statement ps11 = connectDB.createStatement();
                                    java.sql.ResultSet rst11 = ps11.executeQuery("select nodetails from receipt_pref");
                                    while (rst11.next()) {
                                        nodetails = rst11.getObject(1).toString();
                                    }
                                    java.sql.Statement ps112 = connectDB.createStatement();
                                    java.sql.ResultSet rst112 = ps112.executeQuery("select rct_format from receipt_pref");
                                    while (rst112.next()) {

                                        rct = rst112.getObject(1).toString();
                                    }
                                    String clientReceipt = null;

                                    java.sql.PreparedStatement pstmtReprint = connectDB.prepareStatement("SELECT dealer FROM ac_cash_collection WHERE receipt_no = ?");

                                    pstmtReprint.setString(1, jTextField3.getText());
                                    java.sql.ResultSet rsetReprint = pstmtReprint.executeQuery();

                                    while (rsetReprint.next()) {
                                        clientReceipt = rsetReprint.getString(1);
                                    }

                                    com.afrisoftech.txtreports.GokReceiptsTxt policy = new com.afrisoftech.txtreports.GokReceiptsTxt(connectDB, clientReceipt, amountPaidTxt.getText(), receiptNo2, paymentModeCmbx.getSelectedItem().toString(), tenderedAmttxt.getText(), changeTxt.getText(), shiftNoTxt.getText(), unitNumberTxt.getText());

                                    connectDB.commit();
                                    connectDB.setAutoCommit(true);
                                    unUtilizedDepositTxt.setText("0.00");
                                    patientNoChk.setEnabled(false);
                                    patientNameChk.setEnabled(false);
                                    jButton1111.setEnabled(false);
                                    javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "Insert Done Successfully", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                                    changeTxt.setText("0.00");
                                    tenderedAmttxt.setText("0.00");

                                }
                            }

                        } catch (java.sql.SQLException sq) {
                            sq.printStackTrace();
                            try {
                                connectDB.rollback(registerSavePoint);
                            } catch (java.sql.SQLException sql) {
                                javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                            }
                            System.out.println(sq.getMessage());
                            javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                        }

                    } else {
                        javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "ERROR: Please check your entries again. Ensure all data in the fields is correct.");
                    }

                } else {
                    javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "ERROR: Please check your entries again. Amount paid cannot be empty and cannot be zero.");

                }
            } else {
                javax.swing.JOptionPane.showMessageDialog(new java.awt.Frame(), "ERROR: Please select REVENUE CODE.");

            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton OutpatientRbtn;
    private javax.swing.JTextField amountPaidTxt;
    private javax.swing.JTextField balanceAfterDepositTxt;
    private javax.swing.JLabel balanceLabel;
    private javax.swing.JTextField balanceTxt;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JTextField changeTxt;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private com.afrisoftech.lib.DatePicker datePicker2;
    private javax.swing.JRadioButton deposit;
    private javax.swing.JComboBox glAccountCmbx;
    private javax.swing.JTextField glAccountTxt;
    private javax.swing.JRadioButton inPatientRbtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton1111;
    private javax.swing.JButton jButton221;
    private javax.swing.JButton jButton3111;
    public javax.swing.JButton jButton4111;
    private javax.swing.JButton jButton5111;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel112;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel1211;
    private javax.swing.JLabel jLabel131;
    private javax.swing.JLabel jLabel1321;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel2122;
    private javax.swing.JLabel jLabel2131;
    private javax.swing.JLabel jLabel221;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel3121;
    private javax.swing.JLabel jLabel3131;
    private javax.swing.JLabel jLabel321;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41121;
    private javax.swing.JLabel jLabel412;
    private javax.swing.JLabel jLabel4221;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel53111;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel711;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel911;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel1111;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel212;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel3111;
    private javax.swing.JPanel jPanel321;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel511;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel711;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator1111;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField152;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField2121;
    private javax.swing.JTextField jTextField221;
    private javax.swing.JTextField jTextField25;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4111;
    private javax.swing.JTextField jTextField421;
    private javax.swing.JTextField jTextField512;
    private javax.swing.JTextField jTextField5211;
    private javax.swing.JTextField jTextField611;
    private javax.swing.JButton patientBillBtn;
    private javax.swing.JCheckBox patientNameChk;
    private javax.swing.JTextField patientNameTxt;
    private javax.swing.JCheckBox patientNoChk;
    private javax.swing.JTextField patientNumberTxt;
    private javax.swing.JDialog patientsDialog;
    private javax.swing.JButton payViaMobilePayBtn;
    private javax.swing.JFormattedTextField payerMobileTelephoneNumberTxt;
    private javax.swing.JTextField payerTxt;
    private javax.swing.JRadioButton payment;
    private javax.swing.JComboBox paymentModeCmbx;
    private javax.swing.JRadioButton schemeDepositRdi;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchNameTxt;
    private javax.swing.JTextField shiftNoTxt;
    private javax.swing.JTextField tenderedAmttxt;
    private javax.swing.JTextField unUtilizedDepositTxt;
    private javax.swing.JTextField unitNumberTxt;
    private javax.swing.JButton utiliseDepositbtn;
    private javax.swing.JTextField visitIDTxt;
    // End of variables declaration//GEN-END:variables
}
