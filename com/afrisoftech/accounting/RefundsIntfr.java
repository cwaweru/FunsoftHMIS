/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */
package com.afrisoftech.accounting;

import com.afrisoftech.lib.ClearTable;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author root
 */
public class RefundsIntfr extends javax.swing.JInternalFrame {

    /**
     * Creates new form loanpymntintfr
     */
    private javax.swing.JComboBox cmbox;
    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    private String transactionType;

    public RefundsIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton9 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new com.afrisoftech.dbadmin.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        patientName = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        receiptAmount = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        paymentMode = new javax.swing.JTextField();
        shiftNumber = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jPanel41 = new javax.swing.JPanel();
        receiptNumber = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        patientNumber = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        patientcheckbx = new javax.swing.JCheckBox();
        debtorscheckbx = new javax.swing.JCheckBox();
        doctorscheckbx = new javax.swing.JCheckBox();
        otherscheckbx = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        visitID = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        cashierName = new javax.swing.JTextField();
        receiptDate = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        cancelReceiptBtn = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();

        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(jTextField111, gridBagConstraints);

        jSearchTable.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton9.setText("Dispose");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setFrameIcon(null);
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jLabel7, gridBagConstraints);

        jTextField6.setEditable(false);
        jTextField6.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField6.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jTextField6, gridBagConstraints);

        //jPanel4.setVisible(false);
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Select patient here"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Services", "Qty", "Amount", "Code"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(false);
        /*cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset2, "sub_service", null, null, null));
        javax.swing.table.TableColumn s = this.jTable1.getColumn("Service");
        s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
        cmbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxActionPerformed(evt);
            }
        });

        cmbox1.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset4, "item", null, null, null));
        javax.swing.table.TableColumn m = this.jTable1.getColumn("Drug Prescribed");
        m.setCellEditor(new javax.swing.DefaultCellEditor(cmbox1));
        cmbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxActionPerformed(evt);
            }
        });
        */
        jScrollPane2.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1.add(jScrollPane2, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel9.setText("Receipt No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel2.add(jLabel9, gridBagConstraints);

        jLabel1.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel2.add(jLabel1, gridBagConstraints);

        patientName.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(patientName, gridBagConstraints);

        jLabel53.setText("Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel2.add(jLabel53, gridBagConstraints);

        receiptAmount.setEditable(false);
        receiptAmount.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(receiptAmount, gridBagConstraints);

        jLabel5.setText("Payment Mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel2.add(jLabel5, gridBagConstraints);

        paymentMode.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(paymentMode, gridBagConstraints);

        shiftNumber.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 50);
        jPanel2.add(shiftNumber, gridBagConstraints);

        jLabel3.setText("Shift No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel2.add(jLabel3, gridBagConstraints);

        jPanel41.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel41.setLayout(new java.awt.GridBagLayout());

        receiptNumber.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel41.add(receiptNumber, gridBagConstraints);

        searchButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton1.setToolTipText("Search");
        searchButton1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton1.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton1.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel41.add(searchButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jPanel41, gridBagConstraints);

        jLabel4.setText("Receipt Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel2.add(jLabel4, gridBagConstraints);

        jLabel6.setText("Patient No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel2.add(jLabel6, gridBagConstraints);

        patientNumber.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(patientNumber, gridBagConstraints);

        jTextField5.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField5.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jPanel2.add(jTextField5, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "Tick the related transaction"));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(patientcheckbx);
        patientcheckbx.setSelected(true);
        patientcheckbx.setText("Patients");
        patientcheckbx.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        patientcheckbx.setMargin(new java.awt.Insets(0, 0, 0, 0));
        patientcheckbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientcheckbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(patientcheckbx, gridBagConstraints);

        buttonGroup1.add(debtorscheckbx);
        debtorscheckbx.setText("Debtors");
        debtorscheckbx.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        debtorscheckbx.setMargin(new java.awt.Insets(0, 0, 0, 0));
        debtorscheckbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debtorscheckbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(debtorscheckbx, gridBagConstraints);

        buttonGroup1.add(doctorscheckbx);
        doctorscheckbx.setText("Doctors");
        doctorscheckbx.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        doctorscheckbx.setMargin(new java.awt.Insets(0, 0, 0, 0));
        doctorscheckbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doctorscheckbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(doctorscheckbx, gridBagConstraints);

        buttonGroup1.add(otherscheckbx);
        otherscheckbx.setText("Others");
        otherscheckbx.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        otherscheckbx.setMargin(new java.awt.Insets(0, 0, 0, 0));
        otherscheckbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                otherscheckbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(otherscheckbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel3, gridBagConstraints);

        jLabel8.setText("Visit Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel2.add(jLabel8, gridBagConstraints);

        visitID.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(visitID, gridBagConstraints);

        jLabel10.setText("Cashier");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel2.add(jLabel10, gridBagConstraints);

        cashierName.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(cashierName, gridBagConstraints);

        receiptDate.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(receiptDate, gridBagConstraints);

        jButton2.setForeground(new java.awt.Color(255, 51, 51));
        jButton2.setText("Refund Old Receipt");
        jButton2.setEnabled(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel2.add(jButton2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 20.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel4.add(jPanel1, gridBagConstraints);

        cancelReceiptBtn.setBackground(new java.awt.Color(0, 204, 204));
        cancelReceiptBtn.setMnemonic('c');
        cancelReceiptBtn.setText("Cancel Receipt");
        cancelReceiptBtn.setToolTipText("Click here enter data");
        cancelReceiptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelReceiptBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(cancelReceiptBtn, gridBagConstraints);

        jButton3.setMnemonic('l');
        jButton3.setText("Clear form");
        jButton3.setToolTipText("Click here to clear textfields");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jButton3, gridBagConstraints);

        jButton4.setMnemonic('C');
        jButton4.setText("Close form");
        jButton4.setToolTipText("Click here to close window");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jButton4, gridBagConstraints);

        jButton5.setMnemonic('h');
        jButton5.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jButton5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jSeparator1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jLabel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        getContentPane().add(jPanel4, gridBagConstraints);

        setBounds(0, 0, 1093, 338);
    }// </editor-fold>//GEN-END:initComponents

    private void otherscheckbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_otherscheckbxActionPerformed
//        jComboBox1.setEnabled(true);// TODO add your handling code here:
    }//GEN-LAST:event_otherscheckbxActionPerformed

    private void doctorscheckbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doctorscheckbxActionPerformed
//        jComboBox1.setEnabled(true);// TODO add your handling code here:
    }//GEN-LAST:event_doctorscheckbxActionPerformed

    private void debtorscheckbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debtorscheckbxActionPerformed
        // jComboBox1.setEnabled(true);// TODO add your handling code here:
    }//GEN-LAST:event_debtorscheckbxActionPerformed

    private void patientcheckbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientcheckbxActionPerformed
        //jComboBox1.setEnabled(true);
// TODO add your handling code here:
    }//GEN-LAST:event_patientcheckbxActionPerformed

    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        this.cancelReceiptBtn.setEnabled(true);
        jLabel7.setText("");
        int count = 0;
        int countt = 0;
        receiptNumber.setText(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0).toString());
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("SELECT  receipt_no FROM ac_ledger where receipt_no ='" + receiptNumber.getText() + "'  and reconciled=false;");
            count = 0;
            while (rset.next()) {
                count = count + 1;
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        try {
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("SELECT  receipt_no FROM ac_ledger where receipt_no ='" + receiptNumber.getText() + "' and closed=false;");
            countt = 0;
            while (rset.next()) {
                countt = countt + 1;
            }
        } catch (SQLException ex) {
        }
        //  if((count>0)||(countt>0))
        {
            try {
                java.sql.Statement stmt = connectDB.createStatement();
                java.sql.ResultSet rset = stmt.executeQuery(""
                        + "select dealer,payment_mode,sum(debit-credit),receipt_time,patient_no,transaction_no,user_name,shift_no from ac_cash_collection "
                        + "where  receipt_no ='" + receiptNumber.getText() + "'  GROUP BY dealer,payment_mode,receipt_time,patient_no,transaction_no,user_name,shift_no");
                while (rset.next()) {
                    paymentMode.setText(rset.getObject(2).toString());

                    patientName.setText(rset.getObject(1).toString());
                    receiptAmount.setText(rset.getObject(3).toString());

                    receiptDate.setText(rset.getObject(4).toString());
                    patientNumber.setText(rset.getObject(5).toString());
                    jTextField5.setText(rset.getObject(6).toString());
                    cashierName.setText(rset.getObject(7).toString());
                    shiftNumber.setText(rset.getObject(8).toString());
                }


                java.sql.Statement stmtTable1s = connectDB.createStatement();

               // java.sql.ResultSet rsetTable1s = stmtTable1s.executeQuery("SELECT DISTINCT CASE WHEN(visit_id IS NULL) THEN '-' ELSE visit_id END AS visit_id FROM hp_patient_card WHERE requisition_no = '" + receiptNumber.getText() + "'");// AND paid = false");
                java.sql.ResultSet rsetTable1s = stmtTable1s.executeQuery("SELECT distinct voucher_no,transaction_type from ac_ledger where receipt_no='" + receiptNumber.getText() + "'");// AND paid = false");
//
                while (rsetTable1s.next()) {
                    
                    visitID.setText(rsetTable1s.getObject(1).toString());
                    
                    transactionType=(rsetTable1s.getObject(2).toString());
                }

            } catch (java.sql.SQLException sqe) {
                sqe.printStackTrace();
                //  System.out.println("Insert not successful");
            }

            // jTextField91.setText("");
            for (int k = 0; k < jTable1.getRowCount(); k++) {
                for (int r = 0; r < jTable1.getColumnCount(); r++) {
                    jTable1.getModel().setValueAt(null, k, r);
                }
            }
            int j = 0;
            int i = 0;
            int countRec = 0;

            try {


                java.sql.Statement stmtTable1s = connectDB.createStatement();

                java.sql.ResultSet rsetTable1s = stmtTable1s.executeQuery(""
                        + "SELECT count(receipt_no)   FROM ac_cash_collection where closed=false and  reconciled=false and receipt_no = '" + receiptNumber.getText() + "'  ;");// AND paid = false");

                while (rsetTable1s.next()) {
                    countRec = rsetTable1s.getInt(1);
                }

                if (countRec > 0) {
                    java.sql.Statement stmtTable1 = connectDB.createStatement();

                    java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT description,quantity, sum(debit-credit),activity_code FROM ac_cash_collection WHERE receipt_no = '" + receiptNumber.getText() + "' group by description,activity_code,quantity");// AND paid = false");

                    while (rsetTable1.next()) {

                        System.out.println("Working at table row " + i);
                        jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                        jTable1.setValueAt(rsetTable1.getObject(2), i, 1);
                        jTable1.setValueAt(rsetTable1.getObject(3), i, 2);
                        jTable1.setValueAt(rsetTable1.getObject(4), i, 3);
                        // jTable11.setValueAt(rsetTable1.getObject(5), i, 4);
                        // jTable1.setValueAt(rsetTable1.getObject(6), i, 6);

                        i++;

                    }


                    java.sql.Statement stmt1 = connectDB.createStatement();

                    java.sql.ResultSet rset1 = stmt1.executeQuery("SELECT sum(debit-credit) FROM ac_cash_collection "
                            + "WHERE receipt_no = '" + receiptNumber.getText() + "'");// AND paid = false");

                    while (rset1.next()) {
                        receiptAmount.setText(rset1.getObject(1).toString());
                        if (rset1.getDouble(1) <= 0) {
                            this.cancelReceiptBtn.setEnabled(false);
                            javax.swing.JOptionPane.showMessageDialog(this, "SORRY YOU CAN'T CANCEL THIS RECEIPT AGAIN! ");
                        }
                    }

                } else if (countRec < 1) {
                    javax.swing.JOptionPane.showMessageDialog(this, "SORRY YOU CAN'T CANCEL THIS RECEIPT ! ");
                }
            } catch (java.sql.SQLException sqlExec) {

                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

            }
        }
//            else{
//                   javax.swing.JOptionPane.showMessageDialog(this, "This Receipt cannot be cancelled.");
//            }
        jSearchDialog.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked

    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate
        if (jTextField111.getText().length() > 4) {
            if (this.patientcheckbx.isSelected() == true) {

                System.out.println("SELECT  distinct requisition_no  as Receipt_NO,patient_no FROM hp_patient_card \n"
                        + "where requisition_no ilike '" + jTextField111.getText() + "%' and  main_service ilike 'Receipt' and date::date > (current_date - 60)  \n"
                        + " UNION "
                        + " SELECT distinct receipt_no, dealer  FROM ac_ledger where receipt_no ilike '" + jTextField111.getText() + "%' and (transaction_type ilike 'Revenue' or service_type ilike 'Receipt') and date::date > (current_date - 60) ORDER BY 1 ASC");

                jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT  distinct requisition_no  as Receipt_NO,patient_no FROM hp_patient_card \n"
                        + "where requisition_no ilike '" + jTextField111.getText() + "%' and  main_service ilike 'Receipt' and date::date > (current_date - 60)  \n"
                        + " UNION "
                        + " SELECT distinct receipt_no, dealer  FROM ac_ledger where receipt_no ilike '" + jTextField111.getText() + "%' and (transaction_type ilike 'Revenue' or service_type ilike 'Receipt') and date::date > (current_date - 60) ORDER BY 1 ASC"));
                jSearchScrollPane.setViewportView(jSearchTable);
            } else if (this.doctorscheckbx.isSelected() == true) {
                jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB,
                        "SELECT distinct pat_inv, doctor_name  FROM ac_doctors_ledger where  pat_inv ilike '" + jTextField111.getText() + "%' and transaction_type='RECEIPT' AND"
                        + " input_date::date > (current_date - 60) ORDER BY 1 ASC"));
                jSearchScrollPane.setViewportView(jSearchTable);
            } else if (this.debtorscheckbx.isSelected() == true) {
                jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, ""
                        + "SELECT distinct receipt_no, dealer  FROM ac_debtors where receipt_no ilike '" + jTextField111.getText() + "%'"
                        + " and  transaction_type ilike 'Receipts' and date::date > (current_date - 60) ORDER BY 1 ASC"));
                jSearchScrollPane.setViewportView(jSearchTable);
            } else if (this.otherscheckbx.isSelected() == true) {
                jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, ""
                        + "SELECT distinct receipt_no, dealer  FROM ac_ledger where receipt_no ilike '" + jTextField111.getText() + "%' and transaction_type ilike 'Receipts' and date::date > (current_date - 60) ORDER BY 1 ASC"));
                jSearchScrollPane.setViewportView(jSearchTable);
            }
        }

    }//GEN-LAST:event_jTextField111CaretUpdate

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        jSearchDialog.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        searchButton11Clicked();          // Add your handling code here:
    }//GEN-LAST:event_searchButton1ActionPerformed
    private void searchButton11Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.receiptNumber.getLocationOnScreen();

        jSearchDialog.setSize(700, 200);

        jSearchDialog.setLocation(point);
        jSearchDialog.setVisible(true);
    }

    private void cmboxActionPerformed(java.awt.event.ActionEvent evt) {
    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        patientName.setText("");
        paymentMode.setText("");
        for (int k = 0; k < jTable1.getRowCount(); k++) {
            for (int r = 0; r < jTable1.getColumnCount(); r++) {
                jTable1.getModel().setValueAt(null, k, r);
            }
        }
        receiptAmount.setText("");
        //        jComboBox131.setSelectedItem(null);
        // Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed
    private Integer ledgerInstances(String receipt) {
        int instance = 0;
        try {

            PreparedStatement pst = connectDB.prepareStatement("SELECT   receipt_no from ac_ledger  where receipt_no='" + receiptNumber.getText() + "' group by 1 having sum(credit-debit)>0");
            ResultSet rst = pst.executeQuery();
            while (rst.next()) {
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return instance;
    }

    private Integer patientCardInstances(String receipt) {
        int instance = 0;


        return instance;
    }

    private Integer debtorInstances(String receipt) {
        int instance = 0;


        return instance;
    }
    private void cancelReceiptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelReceiptBtnActionPerformed

        java.util.Calendar calendar = java.util.Calendar.getInstance();

        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

        System.out.println(datenowSql1.toString());

        java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

        System.out.println(datenowSql.toString());

        try {
            String receiptNo = null;
            String actCode = null;
            String glCode = null;
            Object cheqNo = null;
            String transNo = null;
            Object payMode = null;
            Object drawer = null;
            Object drawerbank = null;
            Object cardNo = null;
            Object patNo = null;
            Object cardName = null;
            String patientNo = null;
            String expDate = null;
            String staffNo = null;
            String actNames = null;
            String cashpoint = null;
            String shiftno = null;
            String users = null;
            String receiptTrans = jTextField5.getText();
            int receiptPref = 0;

            String glAcc = null;
            String receiptNo1 = null;
            String actCode1 = null;
            String glCode1 = null;
            String transNo1 = null;
            String actNames1 = null;
            String patientAcc = null;
            String user = null;
            String AccDesc = null;
            String name = null;
            String rcode = null;
            String wardCode = null;
            String rname = null;
            //   String glAcc = null;
            String Activity = null;
            // String userName = null;
            String voucherNo = null;
            String visitid = "-";
            String Stock = null;
            String voucNo = null;
            String accountCode = null;
            String mdepartment = null;
            String glType = null;
            java.sql.Savepoint registerSavePoint = null;
            try {
                connectDB.setAutoCommit(false);
                registerSavePoint = connectDB.setSavepoint("registration");
//            } catch (java.sql.SQLException ex) {
//                ex.printStackTrace();
//            }
//
//            try {
                System.out.println("Querying data for receipt  [ " + receiptNumber.getText() + "]");
                java.sql.Statement stm1 = connectDB.createStatement();
                java.sql.ResultSet rse1 = stm1.executeQuery("select payment_mode,card_no,card_name,cheque_no,drawer,drawer_bank,patient_no from ac_cash_collection where receipt_no ='" + receiptNumber.getText() + "'");
                while (rse1.next()) {

                    //       patientAcc = rse1.getObject(1).toString();
                    payMode = rse1.getObject(1);
                    cardNo = rse1.getObject(2);
                    cardName = rse1.getObject(3);
                    cheqNo = rse1.getObject(4);
                    drawer = rse1.getObject(5);
                    drawerbank = rse1.getObject(6);
                    patNo = rse1.getObject(7);
                }
                //  cardNo = rse1.getString(2);
                // cardName = rse1.getString(3);
                java.sql.Statement stm3 = connectDB.createStatement();
                java.sql.ResultSet rse3 = stm3.executeQuery("select gl_code,cash_point,shift_no,user_name,transaction_no from ac_cash_collection where receipt_no = '" + receiptNumber.getText() + "'");
                while (rse3.next()) {
                    glCode1 = rse3.getObject(1).toString();
                    cashpoint = rse3.getObject(2).toString();
                    shiftno = rse3.getObject(3).toString();
                    users = rse3.getObject(4).toString();
                    receiptTrans = rse3.getObject(5).toString();
                }
                java.sql.Statement pss = connectDB.createStatement();
                java.sql.ResultSet rss = pss.executeQuery("select nextval('transaction_no_seq'),'" + receiptDate.getText() + "'::DATE");
                while (rss.next()) {
                    transNo = rss.getObject(1).toString();
                    expDate = rss.getObject(2).toString();
                }
                System.out.println("Transaction_no [ " + transNo + "]");
                java.sql.Statement stm12 = connectDB.createStatement();
                java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity,current_user from pb_activity where activity_category ='PR'");
                while (rse12.next()) {

                    patientAcc = rse12.getObject(1).toString();
                    AccDesc = rse12.getObject(2).toString();
                    user = rse12.getObject(3).toString();
                }
                java.sql.Statement stm1211 = connectDB.createStatement();
                java.sql.ResultSet rse1211 = stm1211.executeQuery("select activity,code from pb_activity where activity_category ='RF'");
                while (rse1211.next()) {
                    rname = rse1211.getObject(1).toString();
                    rcode = rse1211.getObject(2).toString();
                }
                java.sql.Statement stm1211x = connectDB.createStatement();
                java.sql.ResultSet rse1211x = stm1211x.executeQuery("select code from pb_activity where activity_category ilike 'WD'");
                while (rse1211x.next()) {

                    wardCode = rse1211x.getObject(1).toString();
                }

                java.sql.Statement stm1211xq = connectDB.createStatement();
                java.sql.ResultSet rse1211xq = stm1211xq.executeQuery("select count(reference) from hp_patient_card where reference = '" + jTextField5.getText() + "'");
                while (rse1211xq.next()) {

                    receiptPref = rse1211xq.getInt(1);
                }

                System.out.println(actNames);
                for (int i = 0; i < jTable1.getRowCount(); i++) {
                    //   for (int i = 0; i < jTable1.getRowCount(); i++){
                    if (jTable1.getModel().getValueAt(i, 0) != null) {

                        java.sql.Statement stm121 = connectDB.createStatement();
                        java.sql.ResultSet rse121 = stm121.executeQuery("select activity,code,department from pb_activity where code ='" + jTable1.getModel().getValueAt(i, 3).toString() + "'");
                        while (rse121.next()) {

                            glAcc = rse121.getObject(1).toString();
                            if (rse121.getObject(3) != null) {
                                mdepartment = glAcc = rse121.getObject(3).toString();
                            } else {
                                mdepartment = "AOT";
                            }
                        }




                        //
                        //if (otherscheckbx.isSelected()) {

                        PreparedStatement pst = connectDB.prepareStatement("SELECT   receipt_no from ac_ledger  where receipt_no='" + receiptNumber.getText() + "' group by 1 having sum(credit-debit)>0");
                        ResultSet rst = pst.executeQuery();
                        while (rst.next()) {


                            System.out.println("Inserting  [ " + receiptNumber.getText() + "]");
                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

                            pstmt.setObject(1, jTable1.getValueAt(i, 3).toString());
                            pstmt.setObject(2, jTable1.getValueAt(i, 0).toString());
                            pstmt.setString(3, patientNumber.getText().toString());
                            pstmt.setString(4, patientName.getText());
                            pstmt.setString(5, "Receipt Cancellation");
                            // pstmt.setString(7,"");
                            pstmt.setString(6, visitID.getText());
                            pstmt.setString(7, "");
                            pstmt.setString(8, "OP");
                            pstmt.setString(9, "");
                            pstmt.setString(10, paymentMode.getText());
                            pstmt.setObject(11, cheqNo);
                            pstmt.setString(12, receiptNumber.getText());
                            pstmt.setString(13, "");
                            pstmt.setObject(14, "RECEIPT CANCELLATION");
                           
                            pstmt.setString(15, transactionType);
//                           
                            pstmt.setDouble(16, java.lang.Double.valueOf(jTable1.getValueAt(i, 2).toString()));
                            pstmt.setDouble(17, 0.00);
                            //  pstmt.setDate(18,com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                            pstmt.setDate(18, java.sql.Date.valueOf(expDate));

                            pstmt.setString(19, transNo);
                            pstmt.setBoolean(20, false);
                            pstmt.setBoolean(21, false);
                            pstmt.setBoolean(22, false);
                            pstmt.setString(23, users);
                            pstmt.setString(24, cashpoint);
                            pstmt.setString(25, shiftno);
                            pstmt.executeUpdate();
                        }


                        PreparedStatement pst2 = connectDB.prepareStatement("SELECT   requisition_no from hp_patient_card  where requisition_no = '" + receiptNumber.getText() + "' group by 1 having sum(credit-debit)>0");
                        ResultSet rst2 = pst2.executeQuery();
                        while (rst2.next()) {



                            java.sql.Statement stm12c = connectDB.createStatement();
                            java.sql.ResultSet rse12c = stm12c.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                            while (rse12c.next()) {

                                patientAcc = rse12c.getObject(1).toString();
                                AccDesc = rse12c.getObject(2).toString();
                            }

                            System.out.println("Inserting item [" + jTable1.getValueAt(i, 0).toString() + "] in hp_patient_card");

                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?)");

                            pstmt.setString(1, patientNumber.getText());
                            pstmt.setObject(2, "Receipt Cancellation");
                            pstmt.setString(3, "General");
                            pstmt.setString(4, paymentMode.getText());
                            pstmt.setString(5, transNo);
                            pstmt.setString(7, "");
                            pstmt.setString(6, "");
                            pstmt.setString(8, "");
                            pstmt.setString(9, "");
                            pstmt.setDate(10, null);
                            pstmt.setString(11, "");
                            pstmt.setDouble(12, java.lang.Double.valueOf(jTable1.getValueAt(i, 2).toString()));
                            pstmt.setDouble(13, 0.00);
                            pstmt.setDate(14, java.sql.Date.valueOf(expDate));
                            pstmt.setObject(15, patientAcc);
                            pstmt.setString(16, "RECEIPT CANCELLATION");
                            pstmt.setDouble(17, java.lang.Double.valueOf(jTable1.getValueAt(i, 1).toString()) * -1);
                            pstmt.setObject(18, staffNo);
                            pstmt.setBoolean(19, false);
                            pstmt.setString(20, "Receipt Cancellation");
                            pstmt.setBoolean(21, false);
                            pstmt.setString(22, AccDesc);
                            pstmt.setString(23, "");
                            pstmt.setString(24, users);
                            pstmt.setString(25, "");
                            pstmt.setString(26, "");
                            pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                            pstmt.setString(28, visitID.getText());
                            pstmt.setString(29, receiptNumber.getText());
                            pstmt.executeUpdate();
                        }
//                      

                        PreparedStatement acdebtors = connectDB.prepareStatement("SELECT   receipt_no from ac_debtors  where receipt_no = '" + receiptNumber.getText() + "' group by 1 having sum(credit-debit)>0");
                        ResultSet rstacdebtors = acdebtors.executeQuery();
                        while (rstacdebtors.next()) {

                            String bankAcc = null;
                            String account = null;
                            String payer = null;
                            java.sql.Statement stm3d = connectDB.createStatement();
                            java.sql.ResultSet rse3d = stm3d.executeQuery("select activity,code from pb_activity where activity_category ='DA'");
                            while (rse3d.next()) {
                                glCode = rse3d.getObject(1).toString();
                                bankAcc = rse3d.getObject(2).toString();
                            }
                            System.out.println("Obtaining Scheme Details for [" + patientName.getText() + "]\n");
                            java.sql.Statement stm3d1 = connectDB.createStatement();
                            java.sql.ResultSet rse3d1 = stm3d1.executeQuery("select account_no,payer_name from ac_schemes where scheme_name ILIKE '" + patientName.getText() + "'");
                            while (rse3d1.next()) {
                                account = rse3d1.getObject(1).toString();
                                payer = rse3d1.getObject(2).toString();
                                System.out.println(" Scheme Account [" + account + "] and payer [" + payer + "]");
                            }

                            System.out.println("Inserting item [" + jTable1.getValueAt(i, 0).toString() + "] in ac_debtors");
                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into ac_debtors values(?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?)");
                            pstmt.setString(1, bankAcc);
                            pstmt.setString(2, payer);
                            pstmt.setObject(3, jTable1.getValueAt(i, 0).toString());
                            pstmt.setString(4, "");
                            pstmt.setString(5, patientName.getText());
                            pstmt.setString(7, account);
                            pstmt.setString(6, "RECEIPT CANCELLATION");
                            pstmt.setString(8, receiptNumber.getText());
                            pstmt.setString(9, receiptNumber.getText());
                            pstmt.setString(10, "");
                            pstmt.setString(11, transNo);
                            pstmt.setString(12, "Receipts Adj.");
                            pstmt.setDouble(14, 0.00);
                            pstmt.setDouble(13, java.lang.Double.valueOf(jTable1.getValueAt(i, 2).toString()));
                            pstmt.setString(16, "");
                            pstmt.setDate(15, java.sql.Date.valueOf(expDate));
                            pstmt.setObject(17, bankAcc);
                            pstmt.setBoolean(18, true);
                            pstmt.setBoolean(19, true);
                            pstmt.setString(20, users);
                            pstmt.setString(21, "");
                            pstmt.setDouble(24, 0.00);
                            pstmt.setBoolean(23, true);
                            pstmt.setDouble(22, java.lang.Double.valueOf(jTable1.getValueAt(i, 2).toString()));
                            pstmt.executeUpdate();
                        }



                        PreparedStatement pstdocsledger = connectDB.prepareStatement("SELECT  reference from ac_doctors_ledger  where reference = '" + receiptNumber.getText() + "' group by 1 having sum(credit-debit)>0");
                        ResultSet rstdocsledger = pstdocsledger.executeQuery();
                        while (rstdocsledger.next()) {
                            String bankAcc = null;
                            String account = null;
                            String payer = null;
                            java.sql.Statement stm3v = connectDB.createStatement();
                            java.sql.ResultSet rse3v = stm3v.executeQuery("select activity,code from pb_activity where activity_category ='CA'");
                            while (rse3v.next()) {
                                glCode = rse3v.getObject(2).toString();
                                bankAcc = rse3v.getObject(1).toString();
                            }

                            java.sql.Statement stm3d1 = connectDB.createStatement();
                            java.sql.ResultSet rse3d1 = stm3d1.executeQuery("select distinct acc_no,doctor_name from ac_doctors_ledger where reference = '" + receiptNumber.getText() + "'");
                            while (rse3d1.next()) {
                                account = rse3d1.getObject(1).toString();
                                payer = rse3d1.getObject(2).toString();
                            }
                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into ac_doctors_ledger values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?)");

                            System.out.println("Inserting item [" + jTable1.getValueAt(i, 0).toString() + "] in ac_doctors_ledger");
                            pstmt.setString(1, account);
                            pstmt.setString(2, "RECEIPT CANCELLATION");
                            pstmt.setString(3, payer);
                            pstmt.setString(4, transNo);
                            pstmt.setString(5, glCode);
                            pstmt.setString(6, "RECEIPT CANCELLATION");
                            pstmt.setDouble(8, 0.00);
                            pstmt.setDouble(7, java.lang.Double.valueOf(jTable1.getValueAt(i, 2).toString()));
                            pstmt.setString(9, receiptNumber.getText());
                            pstmt.setString(10, patientNumber.getText());
                            pstmt.setString(11, bankAcc);
                            pstmt.setBoolean(12, true);
                            pstmt.setString(13, users);
                            pstmt.setDate(14, java.sql.Date.valueOf(expDate));
                            pstmt.setString(15, "");
                            pstmt.setString(16, patientName.getText());
                            pstmt.setDouble(18, 0.00);
                            pstmt.setDouble(17, java.lang.Double.valueOf(jTable1.getValueAt(i, 2).toString()));
                            pstmt.executeUpdate();
                        }



                        java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_cash_collection values(?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?)");
                        pstmt2.setObject(1, jTable1.getValueAt(i, 3).toString());
                        pstmt2.setObject(2, jTable1.getValueAt(i, 0).toString());
                        pstmt2.setObject(3, patNo);
                        pstmt2.setString(4, patientName.getText());
                        pstmt2.setString(5, paymentMode.getText());
                        pstmt2.setObject(6, cardNo);
                        pstmt2.setObject(7, cardName);
                        pstmt2.setObject(8, drawer);
                        pstmt2.setObject(9, drawerbank);
                        pstmt2.setString(10, glCode1);
                        pstmt2.setObject(11, cheqNo);
                        pstmt2.setString(12, receiptNumber.getText());
                        pstmt2.setString(13, "");
                        pstmt2.setString(14, patientName.getText());
                        pstmt2.setString(15, "RECEIPT CANCELLATION");
                        pstmt2.setDouble(17, java.lang.Double.valueOf(jTable1.getValueAt(i, 2).toString()));
                        pstmt2.setDouble(16, 0.00);
                        pstmt2.setDate(18, java.sql.Date.valueOf(expDate));
                        pstmt2.setString(19, transNo);
                        pstmt2.setBoolean(20, false);
                        pstmt2.setBoolean(21, false);
                        pstmt2.setBoolean(22, false);
                        pstmt2.setString(23, users);
                        pstmt2.setString(24, cashpoint);
                        pstmt2.setString(25, shiftno);
                        pstmt2.setDate(26, null);
                        pstmt2.setDouble(27, java.lang.Double.valueOf(jTable1.getValueAt(i, 1).toString()));
                        pstmt2.setDate(28, null);
                        pstmt2.setTimestamp(29, java.sql.Timestamp.valueOf(receiptDate.getText()));
                        pstmt2.setString(30, mdepartment);
                        pstmt2.executeUpdate();

                    }

                }
                connectDB.commit();
                connectDB.setAutoCommit(true);
//                jComboBox1.setEnabled(false);
                jLabel7.setForeground(java.awt.Color.blue);
                jLabel7.setText("Insert successful");
                patientName.setText("");
                paymentMode.setText("");
                ClearTable.clearthisTable(jTable1);
                receiptAmount.setText("");

                //END
            } catch (java.sql.SQLException sq) {
                sq.printStackTrace();
                try {
                    connectDB.rollback(registerSavePoint);
                } catch (java.sql.SQLException sql) {
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            System.out.println(ex.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);


        }
        // Add your handling code here:
    }//GEN-LAST:event_cancelReceiptBtnActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int rowsNo = 0;

        try {


            /* java.sql.Statement stmtx = connectDB.createStatement();
             java.sql.ResultSet rsetx = stmtx.executeQuery("select code from ac_cash_points_setup where description = current_user");
             while (rsetx.next()) {
             cashPointPett = rsetx.getObject(1).toString();

             }*/

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.Statement stmt1 = connectDB.createStatement();
            // java.sql.ResultSet rset = stmt.executeQuery("select user,count(debit),sum(debit + credit) from ac_cash_book where account_no ='"+jComboBox2.getSelectedItem()+"' and description !='' and reconciled = false AND date BETWEEN '"+datePicker1.getDate().toString()+"' AND '"+datePicker2.getDate().toString()+"' group by account_name");
            // java.sql.ResultSet rset1 = stmt1.executeQuery("select count(user_name) from ac_shifts where  user_name ilike '"+System.getProperty("currentuser")+"' AND (status = 'Running' OR status = 'Suspended')");
            java.sql.ResultSet rset1 = stmt1.executeQuery("select count(user_name) from ac_shifts where  user_name ilike current_user AND (status = 'Running' OR status = 'Suspended')");

            while (rset1.next()) {

                rowsNo = rset1.getInt(1);

            }
            if (rowsNo < 1) {
                int openShift = javax.swing.JOptionPane.showConfirmDialog(this, "Opening new shift", "Starting a new shift ...", javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);

                if (openShift == javax.swing.JOptionPane.YES_OPTION) {
                    java.util.Calendar calendar = java.util.Calendar.getInstance();

                    long dateNow = calendar.getTimeInMillis();

                    java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

                    System.out.println(datenowSql1.toString());

                    java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

                    System.out.println(datenowSql.toString());

                    String current_user;

                    try {

                        java.sql.Statement stmtf = connectDB.createStatement();
                        java.sql.ResultSet rsetf = stmtf.executeQuery("select code from ac_cash_points_setup where description = current_user");
                        while (rsetf.next()) {
                            // cashPointPett = rsetf.getObject(1).toString();
                        }
                    } catch (java.sql.SQLException sqe) {
                        sqe.printStackTrace();
                        System.out.println("select not successful");
                    }
                    try {
                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO ac_shifts values(?,?)");
                        pstmt.setString(1, System.getProperty("cashpoint"));
                        //pstmt.setString(1, cashPointPett);
                        pstmt.setString(2, "Running");
                        pstmt.executeUpdate();
                    } catch (java.sql.SQLException sqE) {
                        sqE.printStackTrace();
                    }
                    System.out.println("Opening shift");

                    //  status = true;


                    com.afrisoftech.accounting.RefundsOldIntfr other = new com.afrisoftech.accounting.RefundsOldIntfr(connectDB, pConnDB);
                    this.getParent().add(other, javax.swing.JLayeredPane.DEFAULT_LAYER);
                    try {
                        other.setSelected(true);
                    } catch (java.beans.PropertyVetoException pvt) {
                    }

                }
            } else {
                com.afrisoftech.accounting.RefundsOldIntfr comp = new com.afrisoftech.accounting.RefundsOldIntfr(connectDB, pConnDB);
                this.getParent().add(comp, javax.swing.JLayeredPane.DEFAULT_LAYER);
                try {
                    comp.setSelected(true);
                } catch (java.beans.PropertyVetoException pvt) {
                }

            }
        } catch (java.sql.SQLException sqlex) {
            javax.swing.JOptionPane.showMessageDialog(this, sqlex.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());

        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelReceiptBtn;
    private javax.swing.JTextField cashierName;
    private javax.swing.JCheckBox debtorscheckbx;
    private javax.swing.JCheckBox doctorscheckbx;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JCheckBox otherscheckbx;
    private javax.swing.JTextField patientName;
    private javax.swing.JTextField patientNumber;
    private javax.swing.JCheckBox patientcheckbx;
    private javax.swing.JTextField paymentMode;
    private javax.swing.JTextField receiptAmount;
    private javax.swing.JTextField receiptDate;
    private javax.swing.JTextField receiptNumber;
    private javax.swing.JButton searchButton1;
    private javax.swing.JTextField shiftNumber;
    private javax.swing.JTextField visitID;
    // End of variables declaration//GEN-END:variables
}
