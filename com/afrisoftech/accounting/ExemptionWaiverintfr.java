/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */
package com.afrisoftech.accounting;

import com.afrisoftech.hospital.*;

/**
 *
 * @author  root
 */
public class ExemptionWaiverintfr extends javax.swing.JInternalFrame {

    com.afrisoftech.lib.DBObject dbObject;
    private javax.swing.JComboBox cmbox;
    private javax.swing.JComboBox cmbox3;
    private javax.swing.JComboBox cmbox4;
    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;

    public ExemptionWaiverintfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        dbObject = new com.afrisoftech.lib.DBObject();

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog2 = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        jTextField113 = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        jSearchTable2 = new com.afrisoftech.dbadmin.JTable();
        jButton42 = new javax.swing.JButton();
        jButton52 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jTextField9 = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jTextField10 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton1 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel31 = new javax.swing.JPanel();
        jCheckBox11 = new javax.swing.JCheckBox();
        jCheckBox21 = new javax.swing.JCheckBox();
        datePicker3 = new com.afrisoftech.lib.DatePicker();
        jLabel6 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel53 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();

        jSearchDialog2.setModal(true);
        jSearchDialog2.setUndecorated(true);
        jSearchDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        jTextField113.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField113CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel2.add(jTextField113, gridBagConstraints);

        jSearchTable2.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable2.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable2MouseClicked(evt);
            }
        });
        jSearchScrollPane2.setViewportView(jSearchTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

        jButton42.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton42, gridBagConstraints);

        jButton52.setText("Cancel");
        jButton52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton52, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog2.getContentPane().add(jSearchPanel2, gridBagConstraints);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Patients Statement View");
        setFrameIcon(null);
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jLabel7, gridBagConstraints);

        jTextField6.setEditable(false);
        jTextField6.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField6.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jTextField6, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Service", "Quantity", "Total", "Exempted/Waived", "Waive ?", "GL Code"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setShowHorizontalLines(false);
        javax.swing.table.TableColumn column = null;
        for (int i = 0; i < 6; i++) {
            column = jTable1.getColumnModel().getColumn(i);
            if (i == 1) {

                column.setPreferredWidth(250); //sport column is bigger
            } else {

                //if (i == 2) {
                    column.setPreferredWidth(100);
                    // }  else
                //column.setPreferredWidth(50);

            }
        }
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(jScrollPane2, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Patient Here"));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel9.setText("Patient No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(jLabel9, gridBagConstraints);

        jLabel1.setText("Patient Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(jLabel1, gridBagConstraints);

        jTextField1.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(jTextField1, gridBagConstraints);

        jLabel3.setText("Patient Category");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(jLabel3, gridBagConstraints);

        jTextField2.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(jTextField2, gridBagConstraints);

        jTextField4.setEditable(false);
        jTextField4.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField4.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jTextField4, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jTextField9.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jTextField9, gridBagConstraints);

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton.setToolTipText("Search");
        searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel4.add(searchButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel4, gridBagConstraints);

        jLabel4.setText("Payment Mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(jLabel4, gridBagConstraints);

        jTextField7.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jTextField7, gridBagConstraints);

        buttonGroup2.add(jCheckBox3);
        jCheckBox3.setSelected(true);
        jCheckBox3.setText("Search By  No.");
        jPanel2.add(jCheckBox3, new java.awt.GridBagConstraints());

        buttonGroup2.add(jCheckBox4);
        jCheckBox4.setText("Search By Name");
        jPanel2.add(jCheckBox4, new java.awt.GridBagConstraints());

        jTextField10.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(jTextField10, gridBagConstraints);

        jLabel5.setText("Visit Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(jLabel5, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 0, 51));
        jLabel12.setText("Enter Amount to Waive");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jLabel12, gridBagConstraints);

        jTextField11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTextField11.setForeground(new java.awt.Color(255, 51, 51));
        jTextField11.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField11.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jTextField11, gridBagConstraints);

        buttonGroup3.add(jCheckBox5);
        jCheckBox5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox5.setForeground(new java.awt.Color(0, 0, 255));
        jCheckBox5.setText("Tick All");
        jCheckBox5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jCheckBox5, gridBagConstraints);

        buttonGroup3.add(jCheckBox6);
        jCheckBox6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox6.setForeground(new java.awt.Color(102, 0, 102));
        jCheckBox6.setText("Un Tick All");
        jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jCheckBox6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel2, gridBagConstraints);

        jButton1.setMnemonic('O');
        jButton1.setText("Save Data");
        jButton1.setToolTipText("Click here enter data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jButton1, gridBagConstraints);

        jButton6.setMnemonic('r');
        jButton6.setText("Remove Row");
        jButton6.setEnabled(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        jPanel1.add(jButton6, gridBagConstraints);

        jButton4.setMnemonic('C');
        jButton4.setText("Close");
        jButton4.setToolTipText("Click here to close window");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jButton4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jSeparator1, gridBagConstraints);

        jPanel31.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 153)));
        jPanel31.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(jCheckBox11);
        jCheckBox11.setForeground(new java.awt.Color(51, 51, 255));
        jCheckBox11.setMnemonic('o');
        jCheckBox11.setText("Out Patients");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel31.add(jCheckBox11, gridBagConstraints);

        buttonGroup1.add(jCheckBox21);
        jCheckBox21.setForeground(new java.awt.Color(255, 0, 51));
        jCheckBox21.setMnemonic('i');
        jCheckBox21.setSelected(true);
        jCheckBox21.setText("InPatients");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel31.add(jCheckBox21, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(jPanel31, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(datePicker3, gridBagConstraints);

        jLabel6.setText("To Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        jPanel1.add(jLabel6, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel53.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel53.setForeground(new java.awt.Color(255, 0, 0));
        jLabel53.setText("Bill Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jLabel53, gridBagConstraints);

        jTextField3.setEditable(false);
        jTextField3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField3.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 10);
        jPanel3.add(jTextField3, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 255));
        jLabel2.setText("Exempted or Waived Amt");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jLabel2, gridBagConstraints);

        jTextField5.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField5.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel3.add(jTextField5, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 153, 0));
        jLabel8.setText("Amount To Pay");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel3.add(jLabel8, gridBagConstraints);

        jTextField8.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField8.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel3.add(jTextField8, gridBagConstraints);

        jCheckBox1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jCheckBox1.setForeground(new java.awt.Color(51, 51, 0));
        jCheckBox1.setText("Exempt The Bill ?");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jPanel3.add(jCheckBox1, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel3, gridBagConstraints);

        jTabbedPane1.addTab("Exemption or Waiver Form", jPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        setBounds(0, 0, 760, 469);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbox2MouseClicked() {

        System.out.println("Showing dialog");
        //        java.awt.Point point = jTable1.getLocationOnScreen();
        // jSearchDialog11.setSize(400,200);
        // jSearchDialog11.setLocation(point);
        // jSearchDialog11.setVisible(true);
    }

    public void tableModelTableChanged1() {
        System.out.println("Calculating totals for table 11 and 2.");
        //        double resFloat = 0.00;
        double resFloat = 0.00;


        /*       for (int i = 0; i < jTable1.getRowCount(); i++) {

        if (jTable1.getModel().getValueAt(i, 0) != null) {

        resFloat = resFloat + Double.parseDouble(jTable1.getModel().getValueAt(i, 3).toString());

        jTextField31.setText(java.lang.String.valueOf(resFloat));

        } else{
        resFloat = resFloat + Double.parseDouble(jTable1.getModel().getValueAt(i, 3).toString());

        jTextField31.setText(java.lang.String.valueOf(resFloat));

        }
        }
         */
        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    public void tableModelTableChanged1(javax.swing.event.TableModelEvent evt) {

        //        double resFloat = 0.00;
        double resFloat = 0.00;

        /*    for (int i = 0; i < jTable1.getRowCount(); i++) {

        if (jTable1.getModel().getValueAt(i, 0) != null) {

        //   if (jTable1.getSelectedColumn() == 1) {

        resFloat = resFloat + Double.parseDouble(jTable1.getModel().getValueAt(i, 3).toString());

        //   }

        jTextField31.setText(java.lang.String.valueOf(resFloat));

        }else{
        resFloat = resFloat + Double.parseDouble(jTable1.getModel().getValueAt(i, 3).toString());

        //   }

        jTextField31.setText(java.lang.String.valueOf(resFloat));
        }
         */

        //   }

        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    private void cmbox1MouseClicked() {

        System.out.println("Showing dialog");
        /*   java.awt.Point point = jTable1.getLocationOnScreen();
        jSearchDialog1.setSize(400,200);
        jSearchDialog1.setLocation(point);
        jSearchDialog1.setVisible(true);
         */
    }

    private void searchButton1Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
     /*   java.awt.Point point = this.jTextField91.getLocationOnScreen();

        jSearchDialog21.setSize(400,200);

        jSearchDialog21.setLocation(point);

        jSearchDialog21.setVisible(true);
         */



    }

    private void populateTable3(java.lang.String patient_no) {

        int i = 0;
        int j = 0;
        try {
            if (jCheckBox21.isSelected()) {
                java.sql.Statement stmt = connectDB.createStatement();

                java.sql.ResultSet rset = stmt.executeQuery("SELECT count(service) FROM hp_patient_card WHERE patient_no = '" + patient_no + "'");

                while (rset.next()) {
                    j = rset.getInt(1);
                }
                if (j > 0) {

                    java.sql.Statement stmtTable1 = connectDB.createStatement();
                    java.sql.Statement stmtTable1x = connectDB.createStatement();
                    java.sql.Statement stmtTable111 = connectDB.createStatement();
                    java.sql.ResultSet rsetx = null;
                    java.sql.ResultSet rsetTable1x = null;
                    System.out.println(stmtTable1.toString());
                    System.out.println(patient_no);
                    // System.out.println(jComboBox1.getSelectedItem());
//                    System.out.println("Date1 : " + datePicker1.getDate().toString());
                    System.out.println("Date2 : " + datePicker3.getDate().toString());

                    java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT current_date::date,service, sum(dosage), Sum(debit-credit), sum(0),main_service FROM hp_patient_card WHERE patient_no = '" + patient_no + "' AND paid = false GROUP BY 1,2,6 ORDER BY date");

                    while (rsetTable1.next()) {

                        rsetTable1x = stmtTable1x.executeQuery("SELECT DISTINCT gl_account FROM pb_operating_parameters WHERE main_service ILIKE '" + rsetTable1.getObject(6).toString() + "%'");
                        while (rsetTable1x.next()) {
                            rsetx = stmtTable111.executeQuery("SELECT sum(debit-credit),sum(quantity) FROM ac_cash_collection WHERE description = '" + rsetTable1.getObject(2) + "' AND activity_code = '" + rsetTable1x.getObject(1) + "' AND journal_no = '" + jTextField10.getText() + "'");
                            while (rsetx.next()) {
                                double amount = rsetTable1.getDouble(4);
                                double receipts = rsetx.getDouble(1);
                                double qty = rsetTable1.getDouble(3);
                                double paidQty = rsetx.getDouble(2);
                                if ((amount - receipts) == 0) {
                                } else {
                                    System.out.println("Working at table row " + i);
                                    jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                                    jTable1.setValueAt(rsetTable1.getObject(2), i, 1);
                                    jTable1.setValueAt(java.lang.Double.valueOf(qty - paidQty), i, 2);
                                    jTable1.setValueAt(java.lang.Double.valueOf(amount - receipts), i, 3);
                                    jTable1.setValueAt(rsetTable1.getObject(5), i, 4);

                                    jTable1.setValueAt(rsetTable1x.getObject(1), i, 6);

                                    i++;
                                }
                            }
                        }
                    }
                }
            }
            //}
        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable1, 3);
        // double waiverSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable1, 4);
        jTextField3.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
        jTextField3.setText(java.lang.String.valueOf(totalSum));


    }
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

        if (jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 1) != null) {
            if (jTable1.getSelectedColumn() == jTable1.getSelectedColumn()) {
                double orig = java.lang.Double.parseDouble(jTextField11.getText().toString());
                float price = java.lang.Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString());
                double alloc = java.lang.Double.parseDouble(jTextField5.getText().toString());
                double balance = orig - alloc;


                if (Boolean.valueOf(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString()) == java.lang.Boolean.TRUE) {
                    jCheckBox1.setSelected(false);
                    if (price < balance) {
                        jTable1.setValueAt(price, jTable1.getSelectedRow(), 4);
                    } else {
                        jTable1.setValueAt(balance, jTable1.getSelectedRow(), 4);
                    }
                } else {
                    jCheckBox1.setSelected(false);
                    jTable1.setValueAt(0, jTable1.getSelectedRow(), 4);

                }
                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable1, 3);
                double waiverSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable1, 4);
                jTextField3.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                jTextField3.setText(java.lang.String.valueOf(totalSum));
                jTextField5.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(waiverSum));
                jTextField5.setText(java.lang.String.valueOf(waiverSum));
                jTextField8.setText(java.lang.String.valueOf(totalSum - waiverSum));

            }
            //}
        }
        // Add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed
        this.jSearchDialog2.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton52ActionPerformed
    private void populateTable2(java.lang.String patient_no) {

        int i = 0;
        int j = 0;
        try {
            if (jCheckBox11.isSelected()) {
                java.sql.Statement stmt = connectDB.createStatement();

                java.sql.ResultSet rset = stmt.executeQuery("SELECT count(description) FROM patient_bill WHERE patient_no = '" + patient_no + "'");

                while (rset.next()) {
                    j = rset.getInt(1);
                }
                if (j > 0) {

                    java.sql.Statement stmtTable1 = connectDB.createStatement();

                    System.out.println(stmtTable1.toString());
                    System.out.println(patient_no);
                    //  System.out.println(jComboBox1.getSelectedItem());
//                    System.out.println("Date1 : " + datePicker1.getDate().toString());
                    System.out.println("Date2 : " + datePicker3.getDate().toString());

                    java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT date_prescribed,description, quantity, amount, 0,gl_code FROM patient_bill WHERE patient_no = '" + patient_no + "' and date_prescribed = '" + this.datePicker3.getDate().toString() + "' ORDER BY date_prescribed");

                    while (rsetTable1.next()) {

                        System.out.println("Working at table row " + i);
                        jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                        jTable1.setValueAt(rsetTable1.getObject(2), i, 1);
                        jTable1.setValueAt(rsetTable1.getObject(3), i, 2);
                        jTable1.setValueAt(rsetTable1.getObject(4), i, 3);
                        jTable1.setValueAt(rsetTable1.getObject(5), i, 4);
                        jTable1.setValueAt(rsetTable1.getObject(6), i, 6);
                        i++;

                        //                i = i + i;
                        //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                    }
                }
            }
        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }


    }
    private void jSearchTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2MouseClicked
        //        this.jComboBox131.setSelectedItem(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
        for (int k = 0; k < jTable1.getRowCount(); k++) {
            for (int r = 0; r < jTable1.getColumnCount(); r++) {
                jTable1.getModel().setValueAt(null, k, r);
            }
        }
        jTextField1.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
        jTextField9.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0).toString());
        jTextField10.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 2).toString());
        jSearchDialog2.dispose();
        if (this.jCheckBox11.isSelected()) {
            try {


                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode from hp_patient_register where patient_no  ='" + jTextField9.getText() + "'");
                while (rset1.next()) {
                    jTextField2.setText(rset1.getObject(1).toString());
                    jTextField7.setText(rset1.getObject(2).toString());
                }
            } catch (java.sql.SQLException sqe) {
                sqe.printStackTrace();
                //  System.out.println("Insert not successful");
            }

            this.populateTable2(jTextField9.getText());
        } else {

            try {


                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select category,pay_mode from hp_inpatient_register where patient_no  ='" + jTextField9.getText() + "'");
                while (rset1.next()) {
                    jTextField2.setText(rset1.getObject(1).toString());
                    jTextField7.setText(rset1.getObject(2).toString());
                }

                this.populateTable3(jTextField9.getText());
            } catch (java.sql.SQLException sqe) {
                sqe.printStackTrace();
                //  System.out.println("Insert not successful");
            }
        }
        jSearchDialog2.dispose();
        jCheckBox1.setSelected(false);
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable2MouseClicked

    private void jTextField113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField113CaretUpdate

        if (this.jCheckBox11.isSelected() && this.jCheckBox3.isSelected()) {

            if (jTextField113.getCaretPosition() < 3) {
                System.out.println("Nothing");
            } else {
                jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register where patient_no ILIKE '" + jTextField113.getText() + "%'  order by second_name"));
                /*     searchRowSet2.execute("SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register where patient_no ILIKE '"+jTextField113.getText()+"%'  order by second_name");

                jSearchTable2.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet2, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient no", false),
                new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false)
                //  new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Year of birth", false),
                //  new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", false)
                }));
                 */
                jSearchTable2.setShowHorizontalLines(false);
                jSearchScrollPane2.setViewportView(jSearchTable2);


            }
        } else {
            if (this.jCheckBox11.isSelected() && this.jCheckBox4.isSelected()) {
                if (jTextField113.getCaretPosition() < 3) {
                    System.out.println("Nothing");
                } else {
                    jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register where second_name||' '||first_name||' '||last_name ILIKE '" + jTextField113.getText() + "%'  order by second_name"));

                    /*    searchRowSet2.execute("SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register where second_name||' '||first_name||' '||last_name ILIKE '"+jTextField113.getText()+"%'  order by second_name");

                    jSearchTable2.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet2, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient no", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false)
                    //  new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Year of birth", false),
                    //  new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", false)
                    }));
                     */
                    jSearchTable2.setShowHorizontalLines(false);
                    jSearchScrollPane2.setViewportView(jSearchTable2);



                }
            }
        }
        // }else{
        if (this.jCheckBox21.isSelected() && this.jCheckBox3.isSelected()) {

            // if(this.jCheckBox21.isSelected()){
            //   if( jTextField113.getCaretPosition() > 3){

            if (jTextField113.getCaretPosition() < 3) {
                System.out.println("Nothing");
            } else {
                jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no,patient_name,visit_id FROM hp_admission WHERE patient_no ILIKE '" + jTextField113.getText() + "%' AND check_out = false UNION ALL SELECT annual_no,patient_name,annual_no FROM hp_mortuary WHERE patient_no ILIKE '" + jTextField113.getText() + "%' AND discharged = false ORDER BY patient_name"));


                jSearchTable2.setShowHorizontalLines(false);
                jSearchScrollPane2.setViewportView(jSearchTable2);


            }
        } else {
            if (this.jCheckBox21.isSelected() && this.jCheckBox4.isSelected()) {
                jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no,patient_name,visit_id FROM hp_admission WHERE patient_name ILIKE '" + jTextField113.getText() + "%' AND check_out = false UNION ALL SELECT annual_no,patient_name,annual_no FROM hp_mortuary WHERE patient_name ILIKE '" + jTextField113.getText() + "%' AND discharged = false ORDER BY patient_name"));
                /*
                searchRowSet2.execute("SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, year_of_birth, residence from hp_inpatient_register where second_name||' '||first_name||' '||last_name ILIKE '"+jTextField113.getText()+"%' order by second_name");

                jSearchTable2.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet2, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient no", false),
                new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false)
                // new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Year of birth", false),
                // new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", false)
                }));
                 */
                jSearchTable2.setShowHorizontalLines(false);
                jSearchScrollPane2.setViewportView(jSearchTable2);


            }
        }
        //  }
        // }
        // Add your handling code here:
    }//GEN-LAST:event_jTextField113CaretUpdate

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchButtonClicked2();        // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed
    private void searchButtonClicked2() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.jTextField9.getLocationOnScreen();

        jSearchDialog2.setSize(400, 200);

        jSearchDialog2.setLocation(point);

        jSearchDialog2.setVisible(true);



    }
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        int rows2Delete = jTable1.getSelectedRowCount();

        int[] selectedRows = jTable1.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {



                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable1.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }



            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable1.getModel();

                defTableModel.removeRow(jTable1.getSelectedRow());
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed
    public void tableModelTableChanged() {
        System.out.println("Calculating totals for table 11 and 2.");
        //        double resFloat = 0.00;
        double resFloat = 0.00;


        for (int i = 0; i < jTable1.getRowCount(); i++) {

            if (jTable1.getModel().getValueAt(i, 0) != null) {

                resFloat = resFloat + Double.parseDouble(jTable1.getModel().getValueAt(i, 3).toString());

                jTextField3.setText(java.lang.String.valueOf(resFloat));

            } else {
                resFloat = resFloat + Double.parseDouble(jTable1.getModel().getValueAt(i, 3).toString());

                jTextField3.setText(java.lang.String.valueOf(resFloat));

            }
        }
        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    public void tableModelTableChanged(javax.swing.event.TableModelEvent evt) {

        //        double resFloat = 0.00;
        double resFloat = 0.00;

        for (int i = 0; i < jTable1.getRowCount(); i++) {

            if (jTable1.getModel().getValueAt(i, 0) != null) {

                //   if (jTable1.getSelectedColumn() == 1) {

                resFloat = resFloat + Double.parseDouble(jTable1.getModel().getValueAt(i, 3).toString());

                //   }

                jTextField3.setText(java.lang.String.valueOf(resFloat));

            } else {
                resFloat = resFloat + Double.parseDouble(jTable1.getModel().getValueAt(i, 3).toString());

                //   }

                jTextField3.setText(java.lang.String.valueOf(resFloat));
            }

        }

        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }
    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        if (jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 1) != null) {
            //   float floatCol2 = java.lang.Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString());

            //  float floatCol3 = java.lang.Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString());

            //  float resVal = floatCol2 * floatCol3;

            //double resFloat = 0;

            //if (jTable1.getSelectedColumn() == 1) {

            //jTable1.setValueAt(resFloat, jTable1.getSelectedRow(), 4);
            double resFloat = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable1, 4);

            double Total = java.lang.Double.parseDouble(jTextField3.getText().toString());
            //double tableSum = java.lang.Double.parseDouble(resFloat);
            double totalSum = Total - resFloat;
            jTextField5.setText("" + totalSum + "");

            //}
        }

        // Add your handling code here:
    }//GEN-LAST:event_jTable1KeyReleased
    private void cmbox4ActionPerformed(java.awt.event.ActionEvent evt) {
        /*     java.lang.Object selectedGuaran = cmbox4.getSelectedItem();
        //        int i = jTable2.getSelectedRow();

        if (selectedGuaran != null) {

        try {
        //java.sql.Connection con = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/hospital","postgres","pilsiner");
        java.sql.Statement pstmt = connectDB.createStatement();
        java.sql.ResultSet rs = pstmt.executeQuery("select rate,gl_account from pb_operating_parameters where service_type = '"+selectedGuaran+"' UNION ALL select sp.selling_price,sp.gl_code from st_stock_prices sp where sp.product = '"+selectedGuaran+"'");

        //java.sql.ResultSet rs = pstmt.executeQuery("select rate,gl_account from pb_operating_parameters where service_type = '"+selectedGuaran+"' UNION ALL select sp.selling_price,ac.code from st_stock_prices sp,pb_activity ac where ac.activity ='Stock' AND product = '"+selectedGuaran+"'");
        while (rs.next()){
        //jTextField4.setText(rs.getObject(1).toString());
        jTable2.setValueAt(rs.getObject(1),i,3);
        jTable2.setValueAt(rs.getObject(2),i,4);
        }
        } catch(java.sql.SQLException sqlex){
        System.out.println(sqlex.getMessage());
        }
        }
         */
    }

    private void cmbox3ActionPerformed(java.awt.event.ActionEvent evt) {
        java.lang.Object selectedGuaran = cmbox3.getSelectedItem();
        /*      int i = jTable2.getSelectedRow();

        if (selectedGuaran != null) {

        try {
        //java.sql.Connection con = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/hospital","postgres","pilsiner");
        java.sql.Statement pstmt = connectDB.createStatement();
        java.sql.ResultSet rs = pstmt.executeQuery("select rate,gl_account from pb_operating_parameters where service_type = '"+selectedGuaran+"' UNION ALL select sp.selling_price,sp.gl_code from st_stock_prices sp where sp.product = '"+selectedGuaran+"'");

        //java.sql.ResultSet rs = pstmt.executeQuery("select rate,gl_account from pb_operating_parameters where service_type = '"+selectedGuaran+"' UNION ALL select sp.selling_price,ac.code from st_stock_prices sp,pb_activity ac where ac.activity ='Stock' AND product = '"+selectedGuaran+"'");
        while (rs.next()){
        //jTextField4.setText(rs.getObject(1).toString());
        jTable2.setValueAt(rs.getObject(1),i,3);
        jTable2.setValueAt(rs.getObject(2),i,4);
        }
        } catch(java.sql.SQLException sqlex){
        System.out.println(sqlex.getMessage());
        }
        }

         */
    }
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed
    private void cmboxActionPerformed(java.awt.event.ActionEvent evt) {
        java.lang.Object selectedGuaran = cmbox.getSelectedItem();
        int i = jTable1.getSelectedRow();

        if (selectedGuaran != null) {

            try {
                //java.sql.Connection con = java.sql.DriverManager.getConnection("jdbc:postgresql://localhost:5432/hospital","postgres","pilsiner");
                java.sql.Statement pstmt = connectDB.createStatement();
                java.sql.ResultSet rs = pstmt.executeQuery("select rate,gl_account from pb_operating_parameters where service_type = '" + selectedGuaran + "'");

                //java.sql.ResultSet rs = pstmt.executeQuery("select rate,gl_account from pb_operating_parameters where service_type = '"+selectedGuaran+"' UNION ALL select sp.selling_price,ac.code from st_stock_prices sp,pb_activity ac where ac.activity ='Stock' AND product = '"+selectedGuaran+"'");
                while (rs.next()) {
                    //jTextField4.setText(rs.getObject(1).toString());
                    jTable1.setValueAt(rs.getObject(1), i, 2);
                    jTable1.setValueAt(rs.getObject(2), i, 4);
                }
            } catch (java.sql.SQLException sqlex) {
                System.out.println(sqlex.getMessage());
            }
        }

    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        java.util.Calendar calendar = java.util.Calendar.getInstance();

        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

        System.out.println(datenowSql1.toString());

        java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

        System.out.println(datenowSql.toString());

        String billNo = null;

        String transNo = null;
        String payMode = null;
        String patientAcc = null;
        String cardNo = null;
        String AccDesc = null;
        String scheme = null;
        String cardName = null;
        String isurer = null;
        String visitid = null;
        String staffNo = null;
        String glAcc = null;
        String user = null;
        String accDesc1 = null;
        String glAcc1 = null;
        try {
            connectDB.setAutoCommit(false);

            java.sql.Statement stm12 = connectDB.createStatement();
            java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
            while (rse12.next()) {
                patientAcc = rse12.getObject(1).toString();
                AccDesc = rse12.getObject(2).toString();

            }

            java.sql.Statement ps = connectDB.createStatement();
            java.sql.ResultSet rst = ps.executeQuery("select nextval('transaction_no_seq')");
            while (rst.next()) {
                rst.getObject(1).toString();
                transNo = rst.getObject(1).toString();

            }


            java.sql.Statement ps11 = connectDB.createStatement();
            java.sql.ResultSet rst11 = ps11.executeQuery("select 'E/W'||lpad(nextval('exemption')::text, 5, 0::text),CURRENT_USER");
            while (rst11.next()) {
                billNo = rst11.getObject(1).toString();
                user = rst11.getObject(2).toString();
            }
            if (this.jCheckBox11.isSelected()) {
                for (int i = 0; i < jTable1.getRowCount(); i++) {
                    if (jTable1.getModel().getValueAt(i, 4) != null) {


                        if (java.lang.Double.valueOf(jTable1.getValueAt(i, 4).toString()) > 0) {
                            String waiver = "-";

                            if (jCheckBox1.isSelected()) {
                                waiver = "IEXE";
                            } else {
                                waiver = "IEDS";
                            }
                            java.sql.Statement stm121 = connectDB.createStatement();
                            java.sql.ResultSet rse121 = stm121.executeQuery("select activity,code from pb_activity WHERE activity_category  ILIKE '" + waiver + "'");
                            while (rse121.next()) {
                                glAcc = rse121.getObject(1).toString();
                                glAcc1 = rse121.getObject(2).toString();
                            }
                            java.sql.PreparedStatement pstmt22 = connectDB.prepareStatement("INSERT INTO hp_patient_billing VALUES(?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?,?,?)");
                            pstmt22.setString(1, jTextField9.getText());
                            pstmt22.setString(2, jTextField1.getText());
                            pstmt22.setString(3, jTextField7.getText());
                            pstmt22.setString(4, jTextField2.getText());
                            pstmt22.setString(5, jTable1.getValueAt(i, 1).toString());
                            pstmt22.setDouble(6, -1 * java.lang.Double.valueOf(jTable1.getValueAt(i, 2).toString()));
                            pstmt22.setDouble(7, -1 * java.lang.Double.valueOf(jTable1.getValueAt(i, 4).toString()));
                            pstmt22.setString(8, glAcc1);
                            pstmt22.setDate(9, java.sql.Date.valueOf(jTable1.getValueAt(i, 0).toString()));
                            pstmt22.setString(10, "");
                            pstmt22.setString(11, user);
                            pstmt22.setBoolean(12, false);
                            pstmt22.setString(13, glAcc);
                            pstmt22.setString(14, billNo);
                            pstmt22.setString(15, billNo);
                            pstmt22.executeUpdate();
                        }
                    }
                }
            } else {
                if (this.jCheckBox21.isSelected()) {
                    java.sql.Statement stm1 = connectDB.createStatement();
                    java.sql.ResultSet rse1 = stm1.executeQuery("select pay_mode,account_no,description,payer,payer,expiry_date,account_no from hp_inpatient_register where patient_no ='" + jTextField9.getText() + "'");
                    while (rse1.next()) {
                        cardNo = rse1.getString(2);
                        scheme = rse1.getString(3);
                        cardName = rse1.getString(4);
                        isurer = rse1.getString(5);
                        //expDate = rse1.getString(6);
                        staffNo = rse1.getString(7);
                    }
                    java.sql.Statement stm1c = connectDB.createStatement();
                    java.sql.ResultSet rse1c = stm1c.executeQuery("SELECT DISTINCT visit_id,date_admitted FROM hp_admission WHERE patient_no ='" + jTextField9.getText() + "' ORDER BY date_admitted DESC LIMIT 1");
                    while (rse1c.next()) {
                        visitid = rse1c.getString(1);
                        jTextField10.setText(rse1c.getString(1));
                    }
                    for (int i = 0; i < jTable1.getRowCount(); i++) {
                        if (jTable1.getModel().getValueAt(i, 4) != null) {

                            if (java.lang.Double.valueOf(jTable1.getValueAt(i, 4).toString()) > 0) {
                                java.sql.Statement stm121 = connectDB.createStatement();
                                java.sql.ResultSet rse121 = stm121.executeQuery("select activity,current_user from pb_activity where code ='" + jTable1.getModel().getValueAt(i, 6).toString() + "'");
                                while (rse121.next()) {

                                    glAcc = rse121.getObject(1).toString();
                                    user = rse121.getObject(2).toString();
                                }

                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?)");
                                pstmt.setString(1, jTextField9.getText());
                                pstmt.setObject(2, jTable1.getValueAt(i, 1).toString());
                                pstmt.setString(3, jTextField2.getText());
                                pstmt.setString(4, jTextField7.getText());
                                pstmt.setString(5, transNo);
                                pstmt.setString(7, scheme);
                                pstmt.setString(6, cardNo);
                                pstmt.setString(8, cardName);
                                pstmt.setString(9, isurer);
                                pstmt.setDate(10, null);
                                if (jCheckBox1.isSelected()) {

                                    pstmt.setString(11, "Exemption");
                                    pstmt.setString(16, "EXEMPTIONS");
                                } else {
                                    pstmt.setString(11, "Waiver");
                                    pstmt.setString(16, "WAIVERS");
                                }
                                pstmt.setDouble(13, java.lang.Double.valueOf(jTable1.getValueAt(i, 4).toString()));
                                pstmt.setDouble(12, 0.00);
                                pstmt.setDate(14, java.sql.Date.valueOf(jTable1.getValueAt(i, 0).toString()));
                                pstmt.setObject(15, patientAcc);

                                pstmt.setDouble(17, -1 * java.lang.Double.valueOf(jTable1.getValueAt(i, 2).toString()));
                                pstmt.setObject(18, staffNo);
                                pstmt.setBoolean(19, false);
                                pstmt.setString(20, "Billing");
                                pstmt.setBoolean(21, false);
                                pstmt.setString(22, AccDesc);
                                pstmt.setString(23, "");
                                pstmt.setString(24, user);
                                pstmt.setString(25, billNo);
                                pstmt.setString(26, "IP");
                                pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                pstmt.setString(28, visitid);
                                pstmt.setString(29, billNo);
                                pstmt.executeUpdate();

                                java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                pstmt2.setObject(1, jTable1.getValueAt(i, 6).toString());
                                pstmt2.setString(2, glAcc);
                                pstmt2.setString(3, jTextField9.getText());
                                pstmt2.setString(4, jTextField1.getText());
                                if (jCheckBox1.isSelected()) {
                                    pstmt2.setString(5, "Exemption");
                                } else {
                                    pstmt2.setString(5, "Waiver");
                                }
                                pstmt2.setString(6, cardNo);
                                pstmt2.setString(7, cardName);
                                //if (jCheckBox11.isSelected()){
                                pstmt2.setString(8, "IP");
                                pstmt2.setString(9, jTextField8.getText());
                                pstmt2.setString(10, jTextField7.getText());
                                if (jCheckBox1.isSelected()) {
                                    pstmt2.setString(11, "Exemption");
                                } else {
                                    pstmt2.setString(11, "Waiver");
                                }
                                pstmt2.setString(12, "");
                                pstmt2.setString(13, "");
                                pstmt2.setString(14, jTable1.getValueAt(i, 1).toString());
                                pstmt2.setString(15, "Revenue");
                                pstmt2.setDouble(17, 0.00);
                                pstmt2.setDouble(16, java.lang.Double.valueOf(jTable1.getValueAt(i, 4).toString()));
                                pstmt2.setDate(18, java.sql.Date.valueOf(jTable1.getValueAt(i, 0).toString()));
                                pstmt2.setString(19, transNo);
                                pstmt2.setBoolean(20, false);
                                pstmt2.setBoolean(21, false);
                                pstmt2.setBoolean(22, false);
                                pstmt2.setString(23, user);
                                pstmt2.executeUpdate();
                            }
                        }
                    }
                }
            }
            connectDB.commit();
            connectDB.setAutoCommit(true);

            javax.swing.JOptionPane.showMessageDialog(this, "Insert Successful", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            // jLabel7.setForeground(java.awt.Color.blue);
            // jLabel7.setText("Insert successful");
            jTextField2.setText("");
            jTextField1.setText("");
            jTextField7.setText("");
            jTextField3.setText("0.00");
            for (int k = 0; k < jTable1.getRowCount(); k++) {
                for (int r = 0; r < jTable1.getColumnCount(); r++) {
                    jTable1.getModel().setValueAt(null, k, r);
                }
            }

            //  this.jComboBox131.setSelectedItem(null);
            //  jTextField31.setText("0.00");
            //  jComboBox2.setSelectedItem(null);
        } catch (java.sql.SQLException sq) {

            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }   // Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        for (int k = 0; k < jTable1.getRowCount(); k++) {
            if (jTable1.getModel().getValueAt(k, 0) != null) {
                jTable1.setValueAt(false, k, 5);
                // float qty = java.lang.Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString());
                float price = java.lang.Float.parseFloat(jTable1.getValueAt(k, 3).toString());
                //float total = 0;
                if (jCheckBox1.isSelected()) {

                    jTable1.setValueAt(price, k, 4);
                } else {
                    jTable1.setValueAt(0, k, 4);

                }
                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable1, 3);
                double waiverSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable1, 4);
                jTextField3.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                jTextField3.setText(java.lang.String.valueOf(totalSum));
                jTextField5.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(waiverSum));
                jTextField5.setText(java.lang.String.valueOf(waiverSum));
                jTextField8.setText(java.lang.String.valueOf(totalSum - waiverSum));

            }

        }        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox5ActionPerformed

        double orig = java.lang.Double.parseDouble(jTextField3.getText().toString());
        double alloc = java.lang.Double.parseDouble(jTextField11.getText().toString());

        double balance = orig - alloc;

        if (orig > alloc) {

            javax.swing.JOptionPane.showMessageDialog(this, "Amount to waive is less than the \n balance hence un tick all and allocate one by one !", "Information Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } else {
            for (int k = 0; k < jTable1.getColumnCount(); k++) {

                for (int r = 0; r < jTable1.getRowCount(); r++) {
                    if (jTable1.getValueAt(r, 2) != null) {
                        float gross = java.lang.Float.parseFloat(jTable1.getValueAt(r, 3).toString());
                        if (gross >= 0 || gross < 0) {


                            //float qty = java.lang.Float.parseFloat(jTable1.getValueAt(r, 2).toString());
                            // float deposit = java.lang.Float.parseFloat(this.jTextField10.getText());

                            // float gross = java.lang.Float.parseFloat(jTable1.getValueAt(k, 5).toString());
                            //gross = gross * qty;
                            // if (gross < balance) {
                            jTable1.setValueAt(true, r, 5);
                            jTable1.setValueAt(gross, r, 4);
                            // } else {
                            //     jTable1.setValueAt(balance, k, 6);
                            // }

                            // this.tableModelTableChanged();
                            if (jTable1.isEditing()) {
                                jTable1.getCellEditor().stopCellEditing();
                            }

                            double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable1, 3);
                            this.jTextField8.setText(java.lang.String.valueOf(totalSum));
                            // double amts = java.lang.Double.parseDouble(this.jTextField1.getText());
                            // this.jTextField2.setText(java.lang.String.valueOf(amts - totalSum));
                        }
                    }
                }
            }
        }




        // TODO add your handling code here:
}//GEN-LAST:event_jCheckBox5ActionPerformed

    private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox6ActionPerformed
        for (int k = 0; k < jTable1.getColumnCount(); k++) {

            for (int r = 0; r < jTable1.getRowCount(); r++) {
                // if (jTable1.getValueAt(r, 5) != null) {

                jTable1.setValueAt(false, r, 5);
                jTable1.setValueAt(null, r, 4);
                // } else {
                //     jTable1.setValueAt(balance, k, 6);
                // }

                // this.tableModelTableChanged();
                if (jTable1.isEditing()) {
                    jTable1.getCellEditor().stopCellEditing();
                }

                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable1, 3);
                this.jTextField8.setText(java.lang.String.valueOf(0));
                // double amts = java.lang.Double.parseDouble(this.jTextField1.getText());
                // this.jTextField2.setText(java.lang.String.valueOf(amts - totalSum));
                //}
            }
        }



        // TODO add your handling code here:
}//GEN-LAST:event_jCheckBox6ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private com.afrisoftech.lib.DatePicker datePicker3;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton42;
    private javax.swing.JButton jButton52;
    private javax.swing.JButton jButton6;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox21;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JDialog jSearchDialog2;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JTable jSearchTable2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField113;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JButton searchButton;
    // End of variables declaration//GEN-END:variables
}
