/*
 * stockprices.java
 *
 * Created on July 5, 2008, 11:47 AM
 */
package com.afrisoftech.accounting;

import com.afrisoftech.lib.UserName;
import java.awt.HeadlessException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Francis Waweru
 */
public class FinSchemeInvsNhifIntfr extends javax.swing.JInternalFrame {

    javax.swing.JComboBox cmbox2 = null;
    java.sql.Connection connectDB = null;
    private javax.swing.JComboBox cmbox;
    com.afrisoftech.lib.DBObject dbObject;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    String cashPoint = null;
    private java.lang.String shift_no = null;
    private java.lang.String cash_no = null;
    private String discode;
    private String discglAcc;
    double ledgerAmount = 0.0;
    double determineBill = 0.0;
    private double schemediff = 0.00;
    double billNow = 0.00;
    double payCash = 0.00;
    double balDeposit = 0.00;
    double utilisedAmt = 0.00;
    private float noofDaysdiff;
    String typeRenal = "";

    public FinSchemeInvsNhifIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        dbObject = new com.afrisoftech.lib.DBObject();

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();

        System.out.println("Cashpoint : " + System.getProperty("cashpoint"));

        jTextField14.setText(System.getProperty("cashpoint"));//getCashPoint());
        jTextField81.setText(getShiftNumber());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog2 = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        jTextField113 = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        jSearchTable2 = new com.afrisoftech.dbadmin.JTable();
        jButton42 = new javax.swing.JButton();
        jButton52 = new javax.swing.JButton();
        jSearchDialog11 = new javax.swing.JDialog();
        jSearchPanel11 = new javax.swing.JPanel();
        jTextField1111 = new javax.swing.JTextField();
        jSearchScrollPane11 = new javax.swing.JScrollPane();
        jSearchTable11 = new com.afrisoftech.dbadmin.JTable();
        dispose11 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton9 = new javax.swing.JButton();
        jSearchDialog21 = new javax.swing.JDialog();
        jSearchPanel21 = new javax.swing.JPanel();
        jTextField1131 = new javax.swing.JTextField();
        jSearchScrollPane21 = new javax.swing.JScrollPane();
        jSearchTable21 = new com.afrisoftech.dbadmin.JTable();
        jButton421 = new javax.swing.JButton();
        jButton521 = new javax.swing.JButton();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jSearchDialog13 = new javax.swing.JDialog();
        jSearchPanel13 = new javax.swing.JPanel();
        jTextField1113 = new javax.swing.JTextField();
        jSearchScrollPane13 = new javax.swing.JScrollPane();
        jSearchTable13 = new com.afrisoftech.dbadmin.JTable();
        dispose12 = new javax.swing.JButton();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jLabel5 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        billTable = new javax.swing.JTable();
        jPanel21 = new javax.swing.JPanel();
        jTextField51 = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel42 = new javax.swing.JLabel();
        claimNumberTxt = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        nhifRebateRdi = new javax.swing.JRadioButton();
        cardNumberTxt = new javax.swing.JTextField();
        jLabel81 = new javax.swing.JLabel();
        payModeTxt = new javax.swing.JTextField();
        jLabel82 = new javax.swing.JLabel();
        bedDaysTxt = new javax.swing.JTextField();
        noRebateRdi = new javax.swing.JRadioButton();
        jButton2 = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        nhifCategoryCmbx = new javax.swing.JComboBox();
        jPanel8 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        dischargeDatePicker = new com.afrisoftech.lib.DatePicker();
        checkoutDatePicker = new com.afrisoftech.lib.DatePicker();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        schemeInvoicingTable = new com.afrisoftech.dbadmin.JTable();
        cardMaturityDatePicker = new com.afrisoftech.lib.DatePicker();
        jLabel26 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        admissionDatePicker = new com.afrisoftech.lib.DatePicker();
        jLabel31 = new javax.swing.JLabel();
        jPanel41 = new javax.swing.JPanel();
        patientNumberTxt = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        visitIDTxt = new javax.swing.JTextField();
        patientNameTxt = new javax.swing.JTextField();
        schemeNumberTxt = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel2122 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        dialysisDatePicker = new com.afrisoftech.lib.DatePicker();
        jSeparator11 = new javax.swing.JSeparator();
        jPanel5 = new javax.swing.JPanel();
        try  {
            java.lang.Class.forName("org.postgresql.Driver");
            System.out.println("Found driver");
        } catch(java.lang.ClassNotFoundException cnf){
            System.out.println("driver not found");
        }
        postFinalBillBtn = new javax.swing.JButton();
        refreshFormBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();
        helpBtn = new javax.swing.JButton();
        removeRowBtn = new javax.swing.JButton();
        utilizeDepositBtn = new javax.swing.JButton();
        amount2UtilizeTxt = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        consolidateDepositTxt = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        commentsTxt = new javax.swing.JTextArea();
        jPanel7 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        discountAmountTxt = new javax.swing.JTextField();
        jLabel61 = new javax.swing.JLabel();
        totalBillTxt = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        netAmountTxt = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        nhifDiffTxt = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        nhifRebateTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        totalDepositsTxt = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        refundTxt = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        billbeforeCardMaturityTxt = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        billAfterClinicalDischargeTxt = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        totalDepositRealTxt = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        patienttopaytxtfld = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        dmuBalanceTxt = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        payCashTxt = new javax.swing.JTextField();
        tickAllChk = new javax.swing.JCheckBox();
        untickAllChk = new javax.swing.JCheckBox();
        splitBillChkbx = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        outpatientSchemeTable = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        };
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jTextField9 = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jPanel641 = new javax.swing.JPanel();
        searchButton2 = new javax.swing.JButton();
        jTextField7 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        jTextField12 = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        opCardNumberTxt = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        opClaimNumberTxt = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jTextField3 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane12 = new javax.swing.JScrollPane();
        outPatientSearchTable = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        jLabel51 = new javax.swing.JLabel();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        jLabel62 = new javax.swing.JLabel();
        datePicker3 = new com.afrisoftech.lib.DatePicker();
        jCheckBox2 = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        try  {
            java.lang.Class.forName("org.postgresql.Driver");
            System.out.println("Found driver");
        } catch(java.lang.ClassNotFoundException cnf){
            System.out.println("driver not found");
        }
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jTextField14 = new javax.swing.JTextField();
        jLabel131 = new javax.swing.JLabel();
        jTextField81 = new javax.swing.JTextField();
        jTextField13 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextField15 = new javax.swing.JTextField();

        jSearchDialog2.setModal(true);
        jSearchDialog2.setUndecorated(true);
        jSearchDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        jTextField113.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField113CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel2.add(jTextField113, gridBagConstraints);

        jSearchTable2.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable2.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable2MouseClicked(evt);
            }
        });
        jSearchScrollPane2.setViewportView(jSearchTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

        jButton42.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton42, gridBagConstraints);

        jButton52.setText("Dispose");
        jButton52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton52, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog2.getContentPane().add(jSearchPanel2, gridBagConstraints);

        jSearchDialog11.setModal(true);
        jSearchDialog11.setUndecorated(true);
        jSearchDialog11.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel11.setLayout(new java.awt.GridBagLayout());

        jTextField1111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel11.add(jTextField1111, gridBagConstraints);

        jSearchTable11.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable11.setShowHorizontalLines(false);
        /*int rowsNo = 0;
        //try {

            crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

            crset1.setConnectionSource(pConnDB);

            // try {
                //crset1.execute();

                // crset2.setExecuteOnLoad(true);
                jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                    new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                    new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

                }));

                tableModel = jSearchTable.getModel();

                jSearchScrollPane.setViewportView(jSearchTable);

                /*   }catch(java.sql.SQLException sqlex){
                javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                System.out.println(sqlex.getMessage());

            }

            javax.swing.table.TableColumn column = null;

            for (int i = 0; i < 4; i++) {

                column = jSearchTable.getColumnModel().getColumn(i);

                if (i == 1) {

                    column.setPreferredWidth(400);
                    //sport column is bigger
                } else {

                    column.setPreferredWidth(200);

                }
            }*/
            jSearchTable11.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jSearchTable11MouseClicked(evt);
                }
            });
            jSearchScrollPane11.setViewportView(jSearchTable11);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            jSearchPanel11.add(jSearchScrollPane11, gridBagConstraints);

            dispose11.setMnemonic('l');
            dispose11.setText("Close");
            dispose11.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    dispose11ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel11.add(dispose11, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchDialog11.getContentPane().add(jSearchPanel11, gridBagConstraints);

            jSearchDialog.setModal(true);
            jSearchDialog.setUndecorated(true);
            jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

            jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jSearchPanel.setLayout(new java.awt.GridBagLayout());

            jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    jTextField111CaretUpdate(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 10.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
            jSearchPanel.add(jTextField111, gridBagConstraints);

            jSearchTable.setShowHorizontalLines(false);
            /*    try {
                searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
                searchRowSet.setConnectionSource(pConnDB);

                searchRowSet.execute();

                // crset2.setExecuteOnLoad(true);
                jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

                }));
                // jSearchScrollPane.setViewportView(jSearchTable);

            } catch(java.sql.SQLException sqlex){
                javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                System.out.println(sqlex.getMessage());
            }
            */
            jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jSearchTableMouseClicked(evt);
                }
            });
            jSearchScrollPane.setViewportView(jSearchTable);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

            jButton9.setText("Dispose");
            jButton9.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton9ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel.add(jButton9, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

            jSearchDialog21.setModal(true);
            jSearchDialog21.setUndecorated(true);
            jSearchDialog21.getContentPane().setLayout(new java.awt.GridBagLayout());

            jSearchPanel21.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jSearchPanel21.setLayout(new java.awt.GridBagLayout());

            jTextField1131.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    jTextField1131CaretUpdate(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 300.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
            jSearchPanel21.add(jTextField1131, gridBagConstraints);

            jSearchTable21.setToolTipText("Click on the target row to select the patient from the search.");
            jSearchTable21.setShowHorizontalLines(false);
            /*javax.swing.table.TableColumn column = null;

            for (int i = 0; i < 4; i++) {

                column = jSearchTable2.getColumnModel().getColumn(i);

                if (i == 1) {

                    column.setPreferredWidth(400);
                    //sport column is bigger
                } else {

                    column.setPreferredWidth(200);

                }
            }
            */
            jSearchTable21.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jSearchTable21MouseClicked(evt);
                }
            });
            jSearchScrollPane21.setViewportView(jSearchTable21);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            jSearchPanel21.add(jSearchScrollPane21, gridBagConstraints);

            jButton421.setText("Select");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel21.add(jButton421, gridBagConstraints);

            jButton521.setText("Close");
            jButton521.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton521ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel21.add(jButton521, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchDialog21.getContentPane().add(jSearchPanel21, gridBagConstraints);

            jSearchDialog13.setModal(true);
            jSearchDialog13.setUndecorated(true);
            jSearchDialog13.getContentPane().setLayout(new java.awt.GridBagLayout());

            jSearchPanel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jSearchPanel13.setLayout(new java.awt.GridBagLayout());

            jTextField1113.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    jTextField1113CaretUpdate(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 300.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
            jSearchPanel13.add(jTextField1113, gridBagConstraints);

            jSearchTable13.setToolTipText("Click on the target row to select the patient from the search.");
            jSearchTable13.setShowHorizontalLines(false);
            /*int rowsNo = 0;
            //try {

                crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

                crset1.setConnectionSource(pConnDB);

                // try {
                    //crset1.execute();

                    // crset2.setExecuteOnLoad(true);
                    jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                        new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                        new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                        new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                        new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

                    }));

                    tableModel = jSearchTable.getModel();

                    jSearchScrollPane.setViewportView(jSearchTable);

                    /*   }catch(java.sql.SQLException sqlex){
                    javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                    System.out.println(sqlex.getMessage());

                }

                javax.swing.table.TableColumn column = null;

                for (int i = 0; i < 4; i++) {

                    column = jSearchTable.getColumnModel().getColumn(i);

                    if (i == 1) {

                        column.setPreferredWidth(400);
                        //sport column is bigger
                    } else {

                        column.setPreferredWidth(200);

                    }
                }*/
                jSearchTable13.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        jSearchTable13MouseClicked(evt);
                    }
                });
                jSearchScrollPane13.setViewportView(jSearchTable13);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 20.0;
                jSearchPanel13.add(jSearchScrollPane13, gridBagConstraints);

                dispose12.setMnemonic('l');
                dispose12.setText("Close");
                dispose12.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        dispose12ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jSearchPanel13.add(dispose12, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jSearchDialog13.getContentPane().add(jSearchPanel13, gridBagConstraints);

                setClosable(true);
                setIconifiable(true);
                setMaximizable(true);
                setResizable(true);
                setTitle("Patient Discharge and Invoice Finalization");
                setPreferredSize(new java.awt.Dimension(650, 700));
                setVisible(true);
                getContentPane().setLayout(new java.awt.GridBagLayout());
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.gridwidth = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                getContentPane().add(jLabel5, gridBagConstraints);

                jTabbedPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Highlighted fields in RED are mandatory", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(255, 0, 51))); // NOI18N

                jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "For NHIF,  Select Patient No., Set Card Maturity date,  Tick All and select \"NHIF/NHIS Rebate\", select rebate category then finalize bill.", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 1, 12), new java.awt.Color(0, 0, 255))); // NOI18N
                jPanel11.setLayout(new java.awt.GridBagLayout());

                billTable.setAutoCreateRowSorter(true);
                billTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null}
                    },
                    new String [] {
                        "Description", "Gross", "Discount", "Disc. Amt", "Net Amt.", "Items To Claim", "Pay Cash"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class, java.lang.Boolean.class
                    };
                    boolean[] canEdit = new boolean [] {
                        false, false, false, false, false, false, false
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }

                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit [columnIndex];
                    }
                });
                billTable.setShowHorizontalLines(false);
                /*       cmbox2 = new javax.swing.JComboBox();

                try {

                    crset1.setConnectionSource(pConnDB);
                    crset1.execute("select description from st_stock_item");

                    cmbox2.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset1, "description", null, null,null));

                    javax.swing.table.TableColumn seditor = this.jTable1.getColumn("Product");

                    seditor.setCellEditor(new javax.swing.DefaultCellEditor(cmbox2));

                    cmbox2.addActionListener(new java.awt.event.ActionListener() {

                        public void actionPerformed(java.awt.event.ActionEvent evt) {

                            cmbox2ActionPerformed(evt);
                        }
                    });
                } catch(java.sql.SQLException sqlExec) {

                    javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

                }

                javax.swing.table.TableColumn column1 = null;
                for (int i = 0; i < 4; i++) {
                    column1 = outpatientSchemeTable.getColumnModel().getColumn(i);
                    if (i == 0) {

                        column1.setPreferredWidth(200); //sport column is bigger
                    } else {
                        if (i == 1) {
                            column1.setPreferredWidth(200);
                        } else {
                            if (i == 2) {
                                column1.setPreferredWidth(100);
                            }  else
                            column1.setPreferredWidth(100);

                        }
                    }
                }
                */
                billTable.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        billTableMouseClicked(evt);
                    }
                });
                billTable.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyReleased(java.awt.event.KeyEvent evt) {
                        billTableKeyReleased(evt);
                    }
                });
                jScrollPane11.setViewportView(billTable);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.gridwidth = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 5.0;
                gridBagConstraints.weighty = 15.0;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel11.add(jScrollPane11, gridBagConstraints);

                jPanel21.setLayout(new java.awt.GridBagLayout());

                jTextField51.setEditable(false);
                jTextField51.setMinimumSize(new java.awt.Dimension(0, 0));
                jTextField51.setPreferredSize(new java.awt.Dimension(0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 9;
                gridBagConstraints.gridy = 5;
                jPanel21.add(jTextField51, gridBagConstraints);

                jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                jPanel6.setLayout(new java.awt.GridBagLayout());

                jLabel42.setForeground(new java.awt.Color(255, 0, 0));
                jLabel42.setText("Claim No");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel6.add(jLabel42, gridBagConstraints);

                claimNumberTxt.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel6.add(claimNumberTxt, gridBagConstraints);

                jLabel19.setText("Card No");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel6.add(jLabel19, gridBagConstraints);

                buttonGroup2.add(nhifRebateRdi);
                nhifRebateRdi.setText("Nhif/NHIS Rebate     ");
                nhifRebateRdi.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                nhifRebateRdi.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
                nhifRebateRdi.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                nhifRebateRdi.setIconTextGap(20);
                nhifRebateRdi.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        nhifRebateRdiActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel6.add(nhifRebateRdi, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weighty = 1.0;
                jPanel6.add(cardNumberTxt, gridBagConstraints);

                jLabel81.setText("Pay Mode");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel6.add(jLabel81, gridBagConstraints);

                payModeTxt.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel6.add(payModeTxt, gridBagConstraints);

                jLabel82.setText("No Of Days");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel6.add(jLabel82, gridBagConstraints);

                bedDaysTxt.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 2.0;
                gridBagConstraints.weighty = 1.0;
                jPanel6.add(bedDaysTxt, gridBagConstraints);

                buttonGroup2.add(noRebateRdi);
                noRebateRdi.setSelected(true);
                noRebateRdi.setText("No NHIF/NHIS Rebate");
                noRebateRdi.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                noRebateRdi.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
                noRebateRdi.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                noRebateRdi.setIconTextGap(20);
                noRebateRdi.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        noRebateRdiActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel6.add(noRebateRdi, gridBagConstraints);

                jButton2.setText("Link to Receipts & Deposits");
                jButton2.setEnabled(false);
                jButton2.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton2ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                jPanel6.add(jButton2, gridBagConstraints);

                jLabel24.setText("NHIF Category");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel6.add(jLabel24, gridBagConstraints);

                nhifCategoryCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '-' UNION SELECT name FROM pb_nssf_rebeats ORDER BY 1"));
                nhifCategoryCmbx.setEnabled(false);
                nhifCategoryCmbx.addItemListener(new java.awt.event.ItemListener() {
                    public void itemStateChanged(java.awt.event.ItemEvent evt) {
                        nhifCategoryCmbxItemStateChanged(evt);
                    }
                });
                nhifCategoryCmbx.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        nhifCategoryCmbxActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel6.add(nhifCategoryCmbx, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridwidth = 5;
                gridBagConstraints.gridheight = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 2.0;
                jPanel21.add(jPanel6, gridBagConstraints);

                jPanel8.setLayout(new java.awt.GridBagLayout());

                jLabel14.setForeground(new java.awt.Color(255, 0, 51));
                jLabel14.setText("Discharge Date");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 0.2;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel8.add(jLabel14, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 0.2;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel8.add(dischargeDatePicker, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 2.0;
                gridBagConstraints.weighty = 0.2;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel8.add(checkoutDatePicker, gridBagConstraints);

                jLabel18.setText("Leave Date");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 0.2;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel8.add(jLabel18, gridBagConstraints);

                schemeInvoicingTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null}
                    },
                    new String [] {
                        "A/C No", "Name", "AMT", "Unutilised Deposit", "Deposit Bal"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
                    };
                    boolean[] canEdit = new boolean [] {
                        false, true, true, false, false
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }

                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit [columnIndex];
                    }
                });
                schemeInvoicingTable.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        schemeInvoicingTableMouseClicked(evt);
                    }
                });
                schemeInvoicingTable.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyPressed(java.awt.event.KeyEvent evt) {
                        schemeInvoicingTableKeyPressed(evt);
                    }
                    public void keyReleased(java.awt.event.KeyEvent evt) {
                        schemeInvoicingTableKeyReleased(evt);
                    }
                });
                jScrollPane2.setViewportView(schemeInvoicingTable);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.gridheight = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.2;
                gridBagConstraints.weighty = 3.0;
                jPanel8.add(jScrollPane2, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 0.2;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel8.add(cardMaturityDatePicker, gridBagConstraints);

                jLabel26.setForeground(new java.awt.Color(255, 0, 51));
                jLabel26.setText("Card Maturity Date");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 0.2;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel8.add(jLabel26, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridwidth = 3;
                gridBagConstraints.gridheight = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 7.0;
                gridBagConstraints.weighty = 1.0;
                jPanel21.add(jPanel8, gridBagConstraints);

                jPanel9.setLayout(new java.awt.GridBagLayout());

                jLabel13.setForeground(new java.awt.Color(255, 0, 51));
                jLabel13.setText("Admission Date");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel9.add(jLabel13, gridBagConstraints);

                admissionDatePicker.setEnabled(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel9.add(admissionDatePicker, gridBagConstraints);

                jLabel31.setForeground(new java.awt.Color(255, 0, 0));
                jLabel31.setText("Patient No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel9.add(jLabel31, gridBagConstraints);

                jPanel41.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                jPanel41.setLayout(new java.awt.GridBagLayout());

                patientNumberTxt.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel41.add(patientNumberTxt, gridBagConstraints);

                searchButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
                searchButton1.setToolTipText("Search");
                searchButton1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                searchButton1.setMaximumSize(new java.awt.Dimension(74, 53));
                searchButton1.setMinimumSize(new java.awt.Dimension(74, 53));
                searchButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                searchButton1.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        searchButton1ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 2;
                jPanel41.add(searchButton1, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel9.add(jPanel41, gridBagConstraints);

                visitIDTxt.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel9.add(visitIDTxt, gridBagConstraints);

                patientNameTxt.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel9.add(patientNameTxt, gridBagConstraints);

                schemeNumberTxt.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel9.add(schemeNumberTxt, gridBagConstraints);

                jLabel21.setText("Scheme Member No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel9.add(jLabel21, gridBagConstraints);

                jLabel41.setText("Patient Name");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel9.add(jLabel41, gridBagConstraints);

                jLabel2122.setText("Visit No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel9.add(jLabel2122, gridBagConstraints);

                jLabel38.setText("Renal Dialysis Date");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel9.add(jLabel38, gridBagConstraints);

                dialysisDatePicker.setEnabled(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel9.add(dialysisDatePicker, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridheight = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 2.0;
                gridBagConstraints.weighty = 1.0;
                jPanel21.add(jPanel9, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridwidth = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 5.0;
                jPanel11.add(jPanel21, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.gridwidth = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                jPanel11.add(jSeparator11, gridBagConstraints);

                jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
                jPanel5.setLayout(new java.awt.GridBagLayout());

                postFinalBillBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
                postFinalBillBtn.setMnemonic('O');
                postFinalBillBtn.setText("Post final bills and finalize invoice");
                postFinalBillBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        postFinalBillBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel5.add(postFinalBillBtn, gridBagConstraints);

                refreshFormBtn.setMnemonic('R');
                refreshFormBtn.setText("Refresh form");
                refreshFormBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        refreshFormBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 6;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel5.add(refreshFormBtn, gridBagConstraints);

                closeBtn.setMnemonic('C');
                closeBtn.setText("Close form");
                closeBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        closeBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 8;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel5.add(closeBtn, gridBagConstraints);

                helpBtn.setMnemonic('h');
                helpBtn.setText("Help");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 9;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel5.add(helpBtn, gridBagConstraints);

                removeRowBtn.setMnemonic('r');
                removeRowBtn.setText("Remove A/C Row");
                removeRowBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        removeRowBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 7;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel5.add(removeRowBtn, gridBagConstraints);

                utilizeDepositBtn.setText("Utilize Deposit");
                utilizeDepositBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        utilizeDepositBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 9;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel5.add(utilizeDepositBtn, gridBagConstraints);

                amount2UtilizeTxt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
                amount2UtilizeTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
                amount2UtilizeTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 8;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 100.0;
                gridBagConstraints.weighty = 1.0;
                jPanel5.add(amount2UtilizeTxt, gridBagConstraints);

                jLabel37.setText("Amount to utilize");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 7;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel5.add(jLabel37, gridBagConstraints);

                consolidateDepositTxt.setText("Move Patient Deposit to Un-Utilised Deposit A/C");
                consolidateDepositTxt.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        consolidateDepositTxtActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel5.add(consolidateDepositTxt, gridBagConstraints);

                jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Type your comments here", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(51, 51, 255))); // NOI18N

                commentsTxt.setColumns(20);
                commentsTxt.setRows(5);
                jScrollPane3.setViewportView(commentsTxt);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridwidth = 5;
                gridBagConstraints.gridheight = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 100.0;
                gridBagConstraints.weighty = 1.0;
                jPanel5.add(jScrollPane3, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.gridwidth = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel11.add(jPanel5, gridBagConstraints);

                jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Patient to pay \"Net\" amount", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(0, 0, 255))); // NOI18N
                jPanel7.setLayout(new java.awt.GridBagLayout());

                jLabel15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                jLabel15.setText("Other Debtors");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel7.add(jLabel15, gridBagConstraints);

                discountAmountTxt.setEditable(false);
                discountAmountTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                discountAmountTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(discountAmountTxt, gridBagConstraints);

                jLabel61.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                jLabel61.setText("Bill Total");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel7.add(jLabel61, gridBagConstraints);

                totalBillTxt.setEditable(false);
                totalBillTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                totalBillTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(totalBillTxt, gridBagConstraints);

                jLabel17.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                jLabel17.setForeground(new java.awt.Color(0, 0, 255));
                jLabel17.setText("Net Due from Patient");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 9;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel7.add(jLabel17, gridBagConstraints);

                netAmountTxt.setEditable(false);
                netAmountTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                netAmountTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 9;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(netAmountTxt, gridBagConstraints);

                jLabel20.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                jLabel20.setText("Nhif Diff");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel7.add(jLabel20, gridBagConstraints);

                nhifDiffTxt.setEditable(false);
                nhifDiffTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                nhifDiffTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(nhifDiffTxt, gridBagConstraints);

                jLabel22.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                jLabel22.setText("Nhif Rebate");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel7.add(jLabel22, gridBagConstraints);

                nhifRebateTxt.setEditable(false);
                nhifRebateTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                nhifRebateTxt.setText("0.00");
                nhifRebateTxt.addCaretListener(new javax.swing.event.CaretListener() {
                    public void caretUpdate(javax.swing.event.CaretEvent evt) {
                        nhifRebateTxtCaretUpdate(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(nhifRebateTxt, gridBagConstraints);

                jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                jLabel11.setText("Total Receipts");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel7.add(jLabel11, gridBagConstraints);

                totalDepositsTxt.setEditable(false);
                totalDepositsTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                totalDepositsTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(totalDepositsTxt, gridBagConstraints);

                jLabel23.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                jLabel23.setText("Refund Due to Patient");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 10;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel7.add(jLabel23, gridBagConstraints);

                refundTxt.setEditable(false);
                refundTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                refundTxt.setText("0.00");
                refundTxt.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyReleased(java.awt.event.KeyEvent evt) {
                        refundTxtKeyReleased(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 10;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(refundTxt, gridBagConstraints);

                jLabel27.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
                jLabel27.setText("Bill Before Card Maturity");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 11;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel7.add(jLabel27, gridBagConstraints);

                billbeforeCardMaturityTxt.setEditable(false);
                billbeforeCardMaturityTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                billbeforeCardMaturityTxt.setText("0.00");
                billbeforeCardMaturityTxt.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        billbeforeCardMaturityTxtActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 11;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(billbeforeCardMaturityTxt, gridBagConstraints);

                jLabel28.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
                jLabel28.setText("Bill After Clinical Discharge");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 12;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel7.add(jLabel28, gridBagConstraints);

                billAfterClinicalDischargeTxt.setEditable(false);
                billAfterClinicalDischargeTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                billAfterClinicalDischargeTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 12;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(billAfterClinicalDischargeTxt, gridBagConstraints);

                jLabel32.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                jLabel32.setText("Total Deposits");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 8;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel7.add(jLabel32, gridBagConstraints);

                totalDepositRealTxt.setEditable(false);
                totalDepositRealTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
                totalDepositRealTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 8;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(totalDepositRealTxt, gridBagConstraints);

                jLabel33.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                jLabel33.setText("Gross Due from Patient");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel7.add(jLabel33, gridBagConstraints);

                patienttopaytxtfld.setEditable(false);
                patienttopaytxtfld.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                patienttopaytxtfld.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(patienttopaytxtfld, gridBagConstraints);

                jLabel34.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                jLabel34.setForeground(new java.awt.Color(204, 0, 0));
                jLabel34.setText("DMU Bill Outstanding");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel7.add(jLabel34, gridBagConstraints);

                dmuBalanceTxt.setEditable(false);
                dmuBalanceTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                dmuBalanceTxt.setForeground(new java.awt.Color(204, 0, 0));
                dmuBalanceTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                dmuBalanceTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(dmuBalanceTxt, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 2.0;
                jPanel7.add(jLabel35, gridBagConstraints);

                jLabel36.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
                jLabel36.setForeground(new java.awt.Color(0, 0, 255));
                jLabel36.setText("To Pay On Cash");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel7.add(jLabel36, gridBagConstraints);

                payCashTxt.setEditable(false);
                payCashTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                payCashTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(payCashTxt, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                jPanel11.add(jPanel7, gridBagConstraints);

                buttonGroup3.add(tickAllChk);
                tickAllChk.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                tickAllChk.setForeground(new java.awt.Color(255, 0, 0));
                tickAllChk.setText("Tick All");
                tickAllChk.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        tickAllChkActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                gridBagConstraints.weightx = 1.0;
                jPanel11.add(tickAllChk, gridBagConstraints);

                buttonGroup3.add(untickAllChk);
                untickAllChk.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                untickAllChk.setText("UnTick All");
                untickAllChk.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        untickAllChkActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                jPanel11.add(untickAllChk, gridBagConstraints);

                splitBillChkbx.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
                splitBillChkbx.setText("Split Bill (Other Scheme and NHIF)");
                splitBillChkbx.setEnabled(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel11.add(splitBillChkbx, gridBagConstraints);

                jTabbedPane1.addTab("Inpatients", jPanel11);

                jPanel1.setBackground(new java.awt.Color(204, 204, 255));
                jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
                jPanel1.setLayout(new java.awt.GridBagLayout());

                outpatientSchemeTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null}
                    },
                    new String [] {
                        "Date", "Description", "Quantity", "Rate", "Discount", "Total Disc.", "Amount", "Gl Code"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }
                });
                outpatientSchemeTable.setShowHorizontalLines(false);
                cmbox = new javax.swing.JComboBox();
                javax.swing.table.TableColumn dateEditor = outpatientSchemeTable.getColumnModel().getColumn(0);
                com.afrisoftech.lib.DateCellEditor dateCellEditor = new com.afrisoftech.lib.DateCellEditor(new com.afrisoftech.lib.DatePicker(), outpatientSchemeTable);
                dateEditor.setCellEditor(dateCellEditor);
                //jTable1.setRowHeight(30);
                javax.swing.table.DefaultTableCellRenderer cellRenderer = new javax.swing.table.DefaultTableCellRenderer();
                cellRenderer.setHorizontalAlignment(cellRenderer.TRAILING);
                dateEditor.setCellRenderer(cellRenderer);

                javax.swing.table.TableColumn column = null;
                for (int i = 0; i < 8; i++) {
                    column = outpatientSchemeTable.getColumnModel().getColumn(i);
                    if (i == 0) {

                        column.setPreferredWidth(100); //sport column is bigger
                    } else {
                        if (i == 1) {
                            column.setPreferredWidth(200);
                        } else {
                            if (i == 2) {
                                column.setPreferredWidth(100);
                            }  else
                            column.setPreferredWidth(100);

                        }
                    }
                }
                outpatientSchemeTable.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        outpatientSchemeTableMouseClicked(evt);
                    }
                });
                outpatientSchemeTable.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyReleased(java.awt.event.KeyEvent evt) {
                        outpatientSchemeTableKeyReleased(evt);
                    }
                });
                jScrollPane1.setViewportView(outpatientSchemeTable);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.gridwidth = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 15.0;
                gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
                jPanel1.add(jScrollPane1, gridBagConstraints);

                jPanel2.setBackground(new java.awt.Color(255, 204, 204));
                jPanel2.setLayout(new java.awt.GridBagLayout());

                jLabel1.setText("Scheme Name");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel2.add(jLabel1, gridBagConstraints);

                jLabel2.setText("Scheme Member No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
                jPanel2.add(jLabel2, gridBagConstraints);

                jTextField1.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel2.add(jTextField1, gridBagConstraints);

                jLabel3.setText("Patient No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
                jPanel2.add(jLabel3, gridBagConstraints);

                jLabel4.setText("Patient Name");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
                jPanel2.add(jLabel4, gridBagConstraints);

                jTextField2.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel2.add(jTextField2, gridBagConstraints);

                jLabel7.setText("Scheme Payer");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel2.add(jLabel7, gridBagConstraints);

                jTextField4.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
                jPanel2.add(jTextField4, gridBagConstraints);

                jTextField5.setEditable(false);
                jTextField5.setMinimumSize(new java.awt.Dimension(0, 0));
                jTextField5.setPreferredSize(new java.awt.Dimension(0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                jPanel2.add(jTextField5, gridBagConstraints);

                jTextField6.setEditable(false);
                jTextField6.setMinimumSize(new java.awt.Dimension(0, 0));
                jTextField6.setPreferredSize(new java.awt.Dimension(0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel2.add(jTextField6, gridBagConstraints);

                jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                jPanel4.setLayout(new java.awt.GridBagLayout());

                jTextField9.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel4.add(jTextField9, gridBagConstraints);

                searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
                searchButton.setToolTipText("Search");
                searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
                searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
                searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                searchButton.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        searchButtonActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 2;
                jPanel4.add(searchButton, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel2.add(jPanel4, gridBagConstraints);

                jPanel641.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                jPanel641.setMinimumSize(new java.awt.Dimension(82, 37));
                jPanel641.setLayout(new java.awt.GridBagLayout());

                searchButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
                searchButton2.setToolTipText("Search");
                searchButton2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                searchButton2.setMaximumSize(new java.awt.Dimension(74, 53));
                searchButton2.setMinimumSize(new java.awt.Dimension(74, 53));
                searchButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                searchButton2.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        searchButton2ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                jPanel641.add(searchButton2, gridBagConstraints);

                jTextField7.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel641.add(jTextField7, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
                jPanel2.add(jPanel641, gridBagConstraints);

                jLabel10.setText("Account No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel2.add(jLabel10, gridBagConstraints);

                jTextField8.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
                jPanel2.add(jTextField8, gridBagConstraints);

                buttonGroup1.add(jCheckBox1);
                jCheckBox1.setText("Search By No.");
                jPanel2.add(jCheckBox1, new java.awt.GridBagConstraints());

                buttonGroup1.add(jCheckBox3);
                jCheckBox3.setText("Search By Name");
                jPanel2.add(jCheckBox3, new java.awt.GridBagConstraints());

                jLabel8.setText("Invoice No");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel2.add(jLabel8, gridBagConstraints);

                jTextField12.setText("-");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
                jPanel2.add(jTextField12, gridBagConstraints);

                jLabel29.setText("Card Number");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
                jPanel2.add(jLabel29, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel2.add(opCardNumberTxt, gridBagConstraints);

                jLabel30.setText("Claim Number");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel2.add(jLabel30, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
                jPanel2.add(opClaimNumberTxt, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.gridwidth = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.ipady = -10;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel1.add(jPanel2, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.gridwidth = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                jPanel1.add(jSeparator1, gridBagConstraints);

                jTextField3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                jTextField3.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 10);
                jPanel1.add(jTextField3, gridBagConstraints);

                jLabel6.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
                jLabel6.setText("Total KShs.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 5;
                jPanel1.add(jLabel6, gridBagConstraints);

                outPatientSearchTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                    },
                    new String [] {
                        "Date", "Patient No", "Scheme", "Amount"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }
                });
                outPatientSearchTable.setShowHorizontalLines(false);
                /*       cmbox2 = new javax.swing.JComboBox();

                try {

                    crset1.setConnectionSource(pConnDB);
                    crset1.execute("select description from st_stock_item");

                    cmbox2.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset1, "description", null, null,null));

                    javax.swing.table.TableColumn seditor = this.jTable1.getColumn("Product");

                    seditor.setCellEditor(new javax.swing.DefaultCellEditor(cmbox2));

                    cmbox2.addActionListener(new java.awt.event.ActionListener() {

                        public void actionPerformed(java.awt.event.ActionEvent evt) {

                            cmbox2ActionPerformed(evt);
                        }
                    });
                } catch(java.sql.SQLException sqlExec) {

                    javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

                }
                */

                javax.swing.table.TableColumn column12 = null;
                for (int i = 0; i < 3; i++) {
                    column12 = outPatientSearchTable.getColumnModel().getColumn(i);
                    if (i == 0) {

                        column12.setPreferredWidth(100); //sport column is bigger
                    } else {
                        if (i == 1) {
                            column12.setPreferredWidth(200);
                        } else {
                            if (i == 2) {
                                column12.setPreferredWidth(300);
                            }  else
                            column12.setPreferredWidth(100);

                        }
                    }
                }
                outPatientSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        outPatientSearchTableMouseClicked(evt);
                    }
                });
                jScrollPane12.setViewportView(outPatientSearchTable);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.gridwidth = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 15.0;
                gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
                jPanel1.add(jScrollPane12, gridBagConstraints);

                jLabel51.setText("From Date");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel1.add(jLabel51, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.ipadx = 20;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel1.add(datePicker1, gridBagConstraints);

                jLabel62.setText("To Date");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel1.add(jLabel62, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel1.add(datePicker3, gridBagConstraints);

                jCheckBox2.setForeground(new java.awt.Color(0, 0, 255));
                jCheckBox2.setText("View");
                jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jCheckBox2ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 1;
                jPanel1.add(jCheckBox2, gridBagConstraints);

                jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
                jPanel3.setLayout(new java.awt.GridBagLayout());

                jButton1.setMnemonic('O');
                jButton1.setText("Finalise Invoice");
                jButton1.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton1ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel3.add(jButton1, gridBagConstraints);

                jButton3.setMnemonic('R');
                jButton3.setText("Refresh");
                jButton3.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton3ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel3.add(jButton3, gridBagConstraints);

                jButton6.setMnemonic('r');
                jButton6.setText("Remove Row");
                jButton6.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton6ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.weightx = 1.0;
                jPanel3.add(jButton6, gridBagConstraints);

                jButton4.setMnemonic('C');
                jButton4.setText("Close");
                jButton4.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton4ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel3.add(jButton4, gridBagConstraints);

                jButton5.setMnemonic('h');
                jButton5.setText("Help");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel3.add(jButton5, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.gridwidth = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                jPanel1.add(jPanel3, gridBagConstraints);

                jLabel16.setText("Cash Point");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel1.add(jLabel16, gridBagConstraints);

                jTextField14.setEditable(false);
                jTextField14.addComponentListener(new java.awt.event.ComponentAdapter() {
                    public void componentShown(java.awt.event.ComponentEvent evt) {
                        jTextField14ComponentShown(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 2.5;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel1.add(jTextField14, gridBagConstraints);

                jLabel131.setText("Shift No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel1.add(jLabel131, gridBagConstraints);

                jTextField81.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 2.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel1.add(jTextField81, gridBagConstraints);

                jTextField13.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                jTextField13.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
                jPanel1.add(jTextField13, gridBagConstraints);

                jLabel9.setText("Discount");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 5;
                jPanel1.add(jLabel9, gridBagConstraints);

                jLabel12.setText("Net Total");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.weightx = 1.0;
                jPanel1.add(jLabel12, gridBagConstraints);

                jTextField15.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                jTextField15.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.ipadx = 3;
                gridBagConstraints.weightx = 1.0;
                jPanel1.add(jTextField15, gridBagConstraints);

                jTabbedPane1.addTab("Out Patients", jPanel1);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                getContentPane().add(jTabbedPane1, gridBagConstraints);

                setBounds(0, 0, 916, 557);
            }// </editor-fold>//GEN-END:initComponents

    private void refundTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_refundTxtKeyReleased
        float nhifDiff = 0;
        float net = 0;
        float refund = java.lang.Float.parseFloat(refundTxt.getText());
        float bill = java.lang.Float.parseFloat(totalBillTxt.getText());
        float disc = java.lang.Float.parseFloat(netAmountTxt.getText());
        float deposit = java.lang.Float.parseFloat(totalDepositsTxt.getText());
        float rebate = java.lang.Float.parseFloat(nhifRebateTxt.getText());

        if (nhifRebateRdi.isSelected()) {
            nhifDiff = (bill + refund) - (deposit + rebate);
            nhifDiffTxt.setText("" + nhifDiff + "");
        } else {
            net = (bill + refund) - (deposit);
            netAmountTxt.setText("" + net + "");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_refundTxtKeyReleased
    private void calculateOtherDebtors() {
        boolean rebateType = false;
        try {

            if (schemeInvoicingTable.getValueAt(schemeInvoicingTable.getSelectedRow(), 0) != null) {
                java.sql.PreparedStatement pstmtRT = connectDB.prepareStatement("SELECT rebate_type_invoicing FROM ac_schemes WHERE account_no = ?");
                pstmtRT.setString(1, schemeInvoicingTable.getValueAt(schemeInvoicingTable.getSelectedRow(), 0).toString());
                java.sql.ResultSet rsetRT = pstmtRT.executeQuery();
                while (rsetRT.next()) {
                    rebateType = rsetRT.getBoolean(1);

                }
            }
        } catch (java.sql.SQLException sq) {

            sq.printStackTrace();
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }

        if (schemeInvoicingTable.getModel().getValueAt(schemeInvoicingTable.getSelectedRow(), 2) != null) {
            if (schemeInvoicingTable.getSelectedColumn() == schemeInvoicingTable.getSelectedColumn()) {
                float realdeposits = java.lang.Float.parseFloat(totalDepositRealTxt.getText());
                float disc = java.lang.Float.parseFloat(netAmountTxt.getText());
                float deposit = java.lang.Float.parseFloat(totalDepositsTxt.getText());
                float rebate = java.lang.Float.parseFloat(nhifRebateTxt.getText());
                double bill = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 4);
                double bill1 = Double.parseDouble(this.billbeforeCardMaturityTxt.getText().replace(",", ""));
                double bill2 = Double.parseDouble(this.billAfterClinicalDischargeTxt.getText().replaceAll(",", ""));

                double totalSum = 0.00;
                if (nhifRebateRdi.isSelected()) {

                    totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(schemeInvoicingTable, 2);
                    netAmountTxt.setText(java.lang.String.valueOf(bill1 + bill2 - (totalSum + deposit + realdeposits)));
                    discountAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                    calculateNhifCtegory();
                } else {
                    totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(schemeInvoicingTable, 2);
                    netAmountTxt.setText(java.lang.String.valueOf(bill - (totalSum + deposit + realdeposits)));
                    discountAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));

                    // netAmountTxt.setText(java.lang.String.valueOf(bill1 + bill2 - (totalSum + deposit)));
                }
            }

            grossDueAmt();
            netAmount();
//                          if(rebateType){
//                                        schemediff=Double.parseDouble(netAmountTxt.getText());
            System.out.println("\n\n\n\n\n\n\n\n\nthe scheme diff is " + schemediff);
//                                        netAmountTxt.setText("0.00");
//                                    }
        }
    }
    private void schemeInvoicingTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_schemeInvoicingTableKeyReleased
        boolean rebateType = false;
        try {

            if (schemeInvoicingTable.getValueAt(schemeInvoicingTable.getSelectedRow(), 0) != null) {
                java.sql.PreparedStatement pstmtRT = connectDB.prepareStatement("SELECT rebate_type_invoicing FROM ac_schemes WHERE account_no = ?");
                pstmtRT.setString(1, schemeInvoicingTable.getValueAt(schemeInvoicingTable.getSelectedRow(), 0).toString());
                java.sql.ResultSet rsetRT = pstmtRT.executeQuery();
                while (rsetRT.next()) {
                    rebateType = rsetRT.getBoolean(1);

                }
            }
        } catch (java.sql.SQLException sq) {

            sq.printStackTrace();
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }

        if (schemeInvoicingTable.getModel().getValueAt(schemeInvoicingTable.getSelectedRow(), 2) != null) {
            if (schemeInvoicingTable.getSelectedColumn() == schemeInvoicingTable.getSelectedColumn()) {
                float realdeposits = java.lang.Float.parseFloat(totalDepositRealTxt.getText());
                float disc = java.lang.Float.parseFloat(netAmountTxt.getText());
                float deposit = java.lang.Float.parseFloat(totalDepositsTxt.getText());
                float rebate = java.lang.Float.parseFloat(nhifRebateTxt.getText());
                double bill = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 4);
                double bill1 = Double.parseDouble(this.billbeforeCardMaturityTxt.getText().replace(",", ""));
                double bill2 = Double.parseDouble(this.billAfterClinicalDischargeTxt.getText().replaceAll(",", ""));
                if (schemeInvoicingTable.getModel().getValueAt(schemeInvoicingTable.getSelectedRow(), 3) != null) {

                    double payingAmt = Double.parseDouble(this.schemeInvoicingTable.getModel().getValueAt(schemeInvoicingTable.getSelectedRow(), 2).toString().replaceAll(",", ""));
                    //Double.parseDouble(this.schemeInvoicingTable.getModel().getValueAt(schemeInvoicingTable.getSelectedRow(), 2).toString().replaceAll(",", ""));
                    utilisedAmt = balDeposit - payingAmt;

                    if (utilisedAmt > 0) {
                        this.schemeInvoicingTable.getModel().setValueAt(utilisedAmt, schemeInvoicingTable.getSelectedRow(), 4);
                    } else {
                        this.schemeInvoicingTable.getModel().setValueAt(0.00, schemeInvoicingTable.getSelectedRow(), 4);
                    }
                }
                double totalSum = 0.00;
                if (nhifRebateRdi.isSelected()) {

                    totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(schemeInvoicingTable, 2);
                    netAmountTxt.setText(java.lang.String.valueOf(bill1 + bill2 - (totalSum + deposit + realdeposits)));
                    discountAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                    /// calculateNhifCtegory();
                } else {
                    totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(schemeInvoicingTable, 2);
                    netAmountTxt.setText(java.lang.String.valueOf(bill - (totalSum + deposit + realdeposits)));
                    discountAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));

                    // netAmountTxt.setText(java.lang.String.valueOf(bill1 + bill2 - (totalSum + deposit)));
                }
            }

            grossDueAmt();
            netAmount();
//                          if(rebateType){
//                                        schemediff=Double.parseDouble(netAmountTxt.getText());
            System.out.println("\n\n\n\n\n\n\n\n\nthe scheme diff is " + schemediff);
//                                        netAmountTxt.setText("0.00");
//                                    }
        }
// TODO add your handling code here:
    }//GEN-LAST:event_schemeInvoicingTableKeyReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        com.afrisoftech.accounting.InpatientRecpIntfr other = new com.afrisoftech.accounting.InpatientRecpIntfr(connectDB, pConnDB);
        this.getParent().add(other, javax.swing.JLayeredPane.DEFAULT_LAYER);
        try {
            other.setSelected(true);
        } catch (java.beans.PropertyVetoException pvt) {
        }
        other.setVisible(true);
// TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void removeRowBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRowBtnActionPerformed
        if (schemeInvoicingTable.isRowSelected(schemeInvoicingTable.getSelectedRow())) {
            int rows2Delete = schemeInvoicingTable.getSelectedRowCount();

            int[] selectedRows = schemeInvoicingTable.getSelectedRows();

            if (rows2Delete < 1) {

                java.awt.Toolkit.getDefaultToolkit().beep();

                javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

            } else {

                if (rows2Delete > 1) {

                    for (int i = 0; i < selectedRows.length; i++) {

                        javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) schemeInvoicingTable.getModel();

                        defTableModel.removeRow(selectedRows[i]);

                    }

                } else {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) schemeInvoicingTable.getModel();

                    defTableModel.removeRow(schemeInvoicingTable.getSelectedRow());

                    //calculateTotals();
                }
            }
        } else {
        }

        if (schemeInvoicingTable.getModel().getValueAt(schemeInvoicingTable.getSelectedRow(), 2) != null) {
            if (schemeInvoicingTable.getSelectedColumn() == schemeInvoicingTable.getSelectedColumn()) {
                float disc = java.lang.Float.parseFloat(netAmountTxt.getText());
                float deposit = java.lang.Float.parseFloat(totalDepositsTxt.getText());
                float rebate = java.lang.Float.parseFloat(nhifRebateTxt.getText());
                float bill = java.lang.Float.parseFloat(totalBillTxt.getText());
                if (nhifRebateRdi.isSelected()) {
                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(schemeInvoicingTable, 2);
                    nhifDiffTxt.setText(java.lang.String.valueOf(bill - (totalSum + rebate)));
                } else {
                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(schemeInvoicingTable, 2);
                    netAmountTxt.setText(java.lang.String.valueOf(bill - (totalSum + rebate)));
                }
            }
        }
        // double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable11, 3);
        //  jTextField31.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
        //jTextField31.setText(java.lang.String.valueOf(totalSum));
        //  jTextField18.setText(java.lang.String.valueOf(totalSum));

// this.tableModelTableChanged();// Add your handling code here:
    }//GEN-LAST:event_removeRowBtnActionPerformed

    private void dispose12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispose12ActionPerformed
        jSearchDialog13.dispose(); // Add your handling code here:
    }//GEN-LAST:event_dispose12ActionPerformed

    private void jSearchTable13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable13MouseClicked

        balDeposit = com.afrisoftech.lib.unUtelisedDeposit.getBalanceDeposit(connectDB, jSearchTable13.getValueAt(jSearchTable13.getSelectedRow(), 0).toString());
        schemeInvoicingTable.setValueAt(jSearchTable13.getValueAt(jSearchTable13.getSelectedRow(), 0), schemeInvoicingTable.getSelectedRow(), 0);
        schemeInvoicingTable.setValueAt(jSearchTable13.getValueAt(jSearchTable13.getSelectedRow(), 1), schemeInvoicingTable.getSelectedRow(), 1);
        schemeInvoicingTable.setValueAt(balDeposit, schemeInvoicingTable.getSelectedRow(), 3);
        schemeInvoicingTable.setValueAt(jSearchTable13.getValueAt(jSearchTable13.getSelectedRow(), 3), schemeInvoicingTable.getSelectedRow(), 2);

        jSearchDialog13.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable13MouseClicked

    private void jTextField1113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1113CaretUpdate
        if (jTextField1113.getCaretPosition() < 1) {

            System.out.println("Nothing");
        } else {

            jSearchTable13.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT account_no,scheme_name,payer_name,default_value from ac_schemes where scheme_name ILIKE '" + jTextField1113.getText() + "%' order by scheme_name"));

            jSearchTable13.setShowHorizontalLines(false);
            jSearchScrollPane13.setViewportView(jSearchTable13);

        }         // Add your handling code here:
    }//GEN-LAST:event_jTextField1113CaretUpdate

    private void schemeInvoicingTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_schemeInvoicingTableMouseClicked
        if (patientNumberTxt.getText().length() > 0 && tickAllChk.isSelected() == true) {
            if (schemeInvoicingTable.getSelectedColumn() == 0) {

                searchButton11bClicked();
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Select a patient first and tick all", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_schemeInvoicingTableMouseClicked
    private void searchButton11bClicked() {

        System.out.println("Showing dialog");

        java.awt.Point point = this.jScrollPane2.getLocationOnScreen();

        jSearchDialog13.setSize(600, 200);

        jSearchDialog13.setLocation(point);

        jSearchDialog13.setVisible(true);
        // jSearchDialog13.dispose();

    }
    private void noRebateRdiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noRebateRdiActionPerformed
        nhifCategoryCmbx.setEnabled(false);

        try {
            claimNumberTxt.setText("");
            cardNumberTxt.setText("");
            nhifRebateTxt.setText("0.00");
            nhifDiffTxt.setText("0.00");
            float noofDays = 0;
            float balance = java.lang.Float.parseFloat(totalBillTxt.getText());
            float deposits = java.lang.Float.parseFloat(totalDepositsTxt.getText());
            float realdeposits = java.lang.Float.parseFloat(totalDepositRealTxt.getText());
            double net = java.lang.Double.valueOf(balance - deposits - realdeposits);
            double nhif = 0;
            double nhifDiff = 0;
            double Rate = 0;
            nhif = noofDays * 0;
            double nettedNhifAmount = 0;

            nhifRebateTxt.setText(java.lang.String.valueOf(nhif));
            nhifDiffTxt.setText(java.lang.String.valueOf(nhifDiff));
            //netAmountTxt.setText(java.lang.String.valueOf(net + nhif));

            if ((net + nhif) < 0) {
                refundTxt.setText(java.lang.String.valueOf((net + nhif)));
                netAmountTxt.setText("");
            } else {
                netAmountTxt.setText(java.lang.String.valueOf((net + nhif)));
            }
            java.sql.Statement pss111xx = connectDB.createStatement();

        } catch (java.sql.SQLException sqlex) {
            javax.swing.JOptionPane.showMessageDialog(this, sqlex.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        grossDueAmt();
        netAmount();
// TODO add your handling code here:
    }//GEN-LAST:event_noRebateRdiActionPerformed

    private void nhifRebateRdiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nhifRebateRdiActionPerformed

        if (cardMaturityDatePicker.getDate().after(dischargeDatePicker.getDate())) {
            nhifCategoryCmbx.setEnabled(false);
            javax.swing.JOptionPane.showMessageDialog(this, "Please Ensure the Card is Mature", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

        } else if (patientNumberTxt.getText().length() > 0 && tickAllChk.isSelected() == false) {
            javax.swing.JOptionPane.showMessageDialog(this, "Select a patient first and tick all", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

        } else if (cardMaturityDatePicker.getDate().before(dischargeDatePicker.getDate())) {
            nhifCategoryCmbx.setEnabled(true);
        }

    }//GEN-LAST:event_nhifRebateRdiActionPerformed

    private void billTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_billTableKeyReleased
        if (billTable.getValueAt(billTable.getSelectedRow(), 2) != null) {
            if (billTable.getModel().getValueAt(billTable.getSelectedRow(), 2) != null) {
                if (billTable.getSelectedColumn() == billTable.getSelectedColumn()) {
                    float grossTotal = java.lang.Float.parseFloat(totalBillTxt.getText().toString());

                    float gross = java.lang.Float.parseFloat(billTable.getValueAt(billTable.getSelectedRow(), 1).toString());

                    float Disc = java.lang.Float.parseFloat(billTable.getValueAt(billTable.getSelectedRow(), 2).toString());

                    float total = gross - java.lang.Math.round((gross) * Disc / 100);
                    float totalDisc = java.lang.Math.round((gross) * Disc / 100);
                    billTable.setValueAt(totalDisc, billTable.getSelectedRow(), 3);
                    billTable.setValueAt(total, billTable.getSelectedRow(), 4);
                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 4);
                    double totalSumDisc = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 3);
                    discountAmountTxt.setText(java.lang.String.valueOf(totalSumDisc));
                    netAmountTxt.setText(java.lang.String.valueOf(grossTotal - totalSumDisc));

                }
            }
        } else {
            if (billTable.getValueAt(billTable.getSelectedRow(), 3) != null) {
                if (billTable.getModel().getValueAt(billTable.getSelectedRow(), 3) != null) {
                    if (billTable.getSelectedColumn() == billTable.getSelectedColumn()) {
                        float grossTotal = java.lang.Float.parseFloat(totalBillTxt.getText().toString());
                        float gross = java.lang.Float.parseFloat(billTable.getValueAt(billTable.getSelectedRow(), 1).toString());
                        float Disc = java.lang.Float.parseFloat(billTable.getValueAt(billTable.getSelectedRow(), 3).toString());
                        float total = gross - Disc;
                        float totalDisc = Disc;
                        billTable.setValueAt(totalDisc, billTable.getSelectedRow(), 3);
                        billTable.setValueAt(total, billTable.getSelectedRow(), 4);
                        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 4);
                        double totalSumDisc = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 3);
                        discountAmountTxt.setText(java.lang.String.valueOf(totalSumDisc));
                        netAmountTxt.setText(java.lang.String.valueOf(grossTotal - totalSumDisc));

                    }
                }
            }
        }
        if (billTable.getValueAt(billTable.getSelectedRow(), 3) != null) {
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_billTableKeyReleased

    private void jButton521ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton521ActionPerformed
        jSearchDialog21.dispose();      // Add your handling code here:
    }//GEN-LAST:event_jButton521ActionPerformed

    private void jSearchTable21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable21MouseClicked
        String payer = null;
        String scm = null;
        String accno = null;
        String date = null;
        String cat = null;
        String code = null;
        String account_no = null;
        typeRenal = "";

        nhifCategoryCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '-' UNION SELECT name FROM pb_nssf_rebeats ORDER BY 1"));
        noRebateRdi.setSelected(true);
        nhifRebateRdi.setSelected(false);
        untickAllChk.setSelected(false);
        tickAllChk.setSelected(false);
        payCashTxt.setText("0.00");
        dmuBalanceTxt.setText("0.00");
        claimNumberTxt.setText("");
        cardNumberTxt.setText("");
        nhifRebateTxt.setText("0.00");
        bedDaysTxt.setText("0.00");
        nhifDiffTxt.setText("0.00");
        discountAmountTxt.setText("0.00");
        patientNameTxt.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 1).toString());
        patientNumberTxt.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 0).toString());
        visitIDTxt.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 2).toString());

        java.text.DateFormat df = java.text.DateFormat.getDateInstance();

        java.text.SimpleDateFormat sdf = (java.text.SimpleDateFormat) df;

        sdf.applyPattern("yyyy-MM-dd");

        try {
            admissionDatePicker.setDate(sdf.parse(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 3).toString()));
            dialysisDatePicker.setDate(sdf.parse(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 3).toString()));

            if (jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 4).toString().length() > 0) {
                dischargeDatePicker.setDate(sdf.parse(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 4).toString()));
                cardMaturityDatePicker.setDate(sdf.parse(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 4).toString()));
            } else {
                dischargeDatePicker.setDate(java.util.Calendar.getInstance().getTime());
            }
            cardMaturityDatePicker.setDate(java.util.Calendar.getInstance().getTime());
        } catch (java.text.ParseException pe) {
            javax.swing.JOptionPane.showMessageDialog(this, pe.getMessage());
        }

        try {
            double noofDays = 0.0;
            java.sql.Statement pss111 = connectDB.createStatement();
            java.sql.ResultSet rss111 = pss111.executeQuery("select ('" + dischargeDatePicker.getDate() + "'::date - '" + admissionDatePicker.getDate() + "'::date)");
            while (rss111.next()) {
                noofDays = rss111.getFloat(1);
                bedDaysTxt.setText(java.lang.String.valueOf(noofDays));
            }
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select account_no, description,payer from hp_inpatient_register where patient_no ILIKE '" + patientNumberTxt.getText() + "%'");
            while (rset.next()) {
                // jComboBox6.setSelectedItem(rset.getObject(1).toString());
                payer = dbObject.getDBObject(rset.getObject(3), "-");
                scm = dbObject.getDBObject(rset.getObject(2), "-");
                accno = dbObject.getDBObject(rset.getObject(1), "-");
                schemeNumberTxt.setText(accno);
            }

            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("select ward_code from hp_admission where patient_no ILIKE '" + patientNumberTxt.getText() + "%' AND visit_id = '" + visitIDTxt.getText() + "'");
            while (rsetf.next()) {
                if (rsetf.getString(1).equalsIgnoreCase("Self")) {
                    payModeTxt.setText("Cash");
                } else {
                    payModeTxt.setText("Scheme");
                }
            }
            java.sql.Statement stmtDmu = connectDB.createStatement();
            java.sql.ResultSet rsetDmu = stmtDmu.executeQuery("select account_no from ac_debtors where dealer ilike '%DEBT MANAGEMENT UNIT DMU%'");
            while (rsetDmu.next()) {
                account_no = rsetDmu.getString(1);
            }
            dmuBalanceTxt.setText(String.valueOf(com.afrisoftech.lib.unUtelisedDeposit.getDmuBalanceAmount(connectDB, patientNumberTxt.getText(), account_no)));

            java.sql.Statement pss1x = connectDB.createStatement();
            java.sql.ResultSet rset1x = pss1x.executeQuery("select account_no,expiry_date,category from hp_inpatient_register where patient_no = '" + patientNumberTxt.getText() + "'");
            while (rset1x.next()) {
                cat = dbObject.getDBObject(rset1x.getObject(3), "-");
                date = dbObject.getDBObject(rset1x.getObject(2), null);
                accno = dbObject.getDBObject(rset1x.getObject(1), "-");

                schemeNumberTxt.setText(accno);
                jTextField51.setText(date);
                // jTextField61.setText(cat);
            }

            java.sql.Statement pss11 = connectDB.createStatement();
            java.sql.ResultSet rss11 = pss11.executeQuery("select round(sum(debit-credit),2) from hp_patient_card where patient_no = '" + patientNumberTxt.getText() + "' "
                    + " and (invoice_no NOT LIKE 'O%' and invoice_no NOT LIKE 'I%') AND (transaction_type not ilike 'Receipts%' and transaction_type not ilike 'Remittance%')"
                    + " AND service NOT ILIKE 'NHIF DIFF%' AND visit_id = '" + visitIDTxt.getText() + "' AND"
                    + " (invoice_no NOT LIKE 'I%' OR invoice_no NOT LIKE 'O%') AND service not ilike 'Receipt%'");
            while (rss11.next()) {
                // jTextField2.setText(rss1.getObject(1).toString());
                totalBillTxt.setText(dbObject.getDBObject(rss11.getObject(1), "0.00"));
            }

            java.sql.Statement pss11s = connectDB.createStatement();
            java.sql.ResultSet rss11s = pss11s.executeQuery("select round(sum(debit-credit),2) from hp_patient_card where patient_no = '" + patientNumberTxt.getText() + "' "
                    + " and (invoice_no NOT LIKE 'O%' and invoice_no NOT LIKE 'I%') AND (transaction_type not ilike 'Receipts%' and transaction_type not ilike 'Remittance%')"
                    + "AND service NOT ILIKE 'NHIF DIFF%' AND visit_id = '" + visitIDTxt.getText() + "' AND (invoice_no NOT LIKE 'I%' OR invoice_no NOT LIKE 'O%')");
            while (rss11s.next()) {
                netAmountTxt.setText(dbObject.getDBObject(rss11s.getObject(1), "0.00"));

            }

            java.sql.Statement pstDeposit = connectDB.createStatement();
            java.sql.ResultSet rsetDeposit = pstDeposit.executeQuery("select round(sum(credit-debit),2) from ac_ledger where patient_no = '" + patientNumberTxt.getText() + "' AND voucher_no = '" + visitIDTxt.getText() + "' AND transaction_type='Unutilized patient deposit' ");
            while (rsetDeposit.next()) {
                // ledgerAmount = rsetDeposit.getDouble(1); //java.lang.Double.valueOf(dbObject.getDBObject(rsetDeposit.getObject(1), "0.00"));
            }
            ledgerAmount = com.afrisoftech.lib.unUtelisedDeposit.getBalanceDeposit(connectDB, patientNumberTxt.getText().toString().trim());
            totalDepositRealTxt.setText(java.lang.String.valueOf(com.afrisoftech.lib.unUtelisedDeposit.getBalanceDeposit(connectDB, patientNumberTxt.getText().toString().trim())));
            java.sql.Statement pss11c = connectDB.createStatement();
            java.sql.ResultSet rss11c = pss11c.executeQuery("select round(sum(credit-debit),2) from hp_patient_card where patient_no = '" + patientNumberTxt.getText() + "' "
                    + " and (invoice_no NOT LIKE 'O%' and invoice_no NOT LIKE 'I%') AND (transaction_type not ilike 'Receipts%' and transaction_type not ilike 'Remittance%')"
                    + "AND service NOT ILIKE 'NHIF DIFF%' AND visit_id = '" + visitIDTxt.getText() + "' AND (invoice_no NOT LIKE 'I%' OR invoice_no NOT LIKE 'O%') AND service ilike 'Receipt%'");
            while (rss11c.next()) {
                totalDepositsTxt.setText(dbObject.getDBObject(rss11c.getObject(1), "0.00"));
            }
            double textFieldNet = java.lang.Double.valueOf(netAmountTxt.getText().toString());
            double nettedAmount = textFieldNet - ledgerAmount;
            if (nettedAmount < 0) {
                refundTxt.setText(java.lang.String.valueOf(nettedAmount));
                netAmountTxt.setText("");
            } else {
                netAmountTxt.setText(java.lang.String.valueOf(nettedAmount));
            }
        } catch (java.sql.SQLException sqlex) {
            sqlex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlex.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        for (int k = 0; k < billTable.getRowCount(); k++) {
            for (int r = 0; r < billTable.getColumnCount(); r++) {
                billTable.getModel().setValueAt(null, k, r);
            }
        }

        for (int g = 0; g < schemeInvoicingTable.getRowCount(); g++) {
            for (int l = 0; l < schemeInvoicingTable.getColumnCount(); l++) {
                schemeInvoicingTable.getModel().setValueAt(null, g, l);
            }
        }
        this.populateTable2(patientNumberTxt.getText());
        grossDueAmt();
        netAmount();
        nhifCategoryCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '-' UNION SELECT name FROM pb_nssf_rebeats ORDER BY 1"));

        try {
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select initcap(ha.ward) as ward from hp_admission ha where ha.patient_no ILIKE '" + patientNumberTxt.getText() + "%' and visit_id='" + visitIDTxt.getText() + "' AND ha.check_out = false");
            while (rset.next()) {

                typeRenal = rset.getString(1);

                if (rset.getString(1).contains("Renal")) {
                    System.out.println("Dialysis date picker enabled...." + rset.getString(1));
                    dialysisDatePicker.setEnabled(true);
                    nhifCategoryCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '-' UNION SELECT name FROM pb_nssf_rebeats ORDER BY 1"));
                }
            }
        } catch (java.sql.SQLException sq) {
            sq.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage());
            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }

        jSearchDialog21.dispose();   // Add your handling code here:
    }//GEN-LAST:event_jSearchTable21MouseClicked
    private void populateTable2(java.lang.String patient_no) {

        int i = 0;
        int j = 0;
        try {
            java.sql.Statement stmt = connectDB.createStatement();

            java.sql.ResultSet rset = stmt.executeQuery("SELECT patient_no FROM hp_patient_card WHERE patient_no = '" + patient_no + "' AND visit_id = '" + visitIDTxt.getText() + "'"
                    + "  group by 1 having sum (credit-debit)<0 ");
            j = 0;
            while (rset.next()) {
                j = j + 1;
            }
            if (j > 0) {
                java.sql.Statement stmtTable1 = connectDB.createStatement();
                java.sql.Statement stmtTable11 = connectDB.createStatement();

                //       java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select date::date as date,service,dosage as quantity,debit-credit as amount FROM hp_patient_card WHERE patient_no ='"+jTextField91.getText()+"' and paid = false AND (invoice_no NOT ILIKE 'O%' OR invoice_no NOT ILIKE 'I%')  AND visit_id = '"+jTextField16.getText()+"'");
                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select service,sum(debit-credit) as amount FROM hp_patient_card WHERE patient_no ='" + patientNumberTxt.getText() + "' AND service NOT ILIKE 'Receipt%' AND service NOT ILIKE 'NHIF DIFF%'"
                        + " AND    (invoice_no NOT LIKE 'O%' and invoice_no NOT LIKE 'I%') AND (transaction_type not ilike 'Receipts%' and transaction_type not ilike 'Remittance%') "
                        + " AND visit_id = '" + visitIDTxt.getText() + "' GROUP BY service");

                while (rsetTable1.next()) {

                    System.out.println("Working at table row " + i);
                    billTable.setValueAt(rsetTable1.getObject(1), i, 0);
                    billTable.setValueAt(rsetTable1.getObject(2), i, 1);
                    // jTable11.setValueAt(rsetTable1.getObject(2), i, 4);
                    //  jTable11.setValueAt(rsetTable1.getObject(4), i, 3);
                    //   jTable11.setValueAt(rsetTable1.getObject(5), i, 4);

                    i++;

                    //                i = i + i;
                    //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                }

            } else if (j <= 0) {
                javax.swing.JOptionPane.showMessageDialog(this, "Sorry !\n The patient has No Outstanding bill.\nConfirm from the Final Invoices report");
            }

        } catch (java.sql.SQLException sqlExec) {
            sqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

    }
    private void jTextField1131CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1131CaretUpdate

        if (jTextField1131.getText().length() > 3) {
            jSearchTable21.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select ha.patient_no as pat_no,ha.patient_name as name,ha.visit_id,ha.date_admitted::date as date_admitted,ha.discharge_date::date AS date_discharged from hp_admission ha where ha.patient_no ILIKE '" + jTextField1131.getText() + "%' AND ha.check_out = false UNION ALL SELECT annual_no,patient_name,annual_no,date_received,discharge_date FROM hp_mortuary WHERE annual_no ILIKE '" + jTextField1131.getText() + "%' AND discharged = false order by 1"));

            jSearchScrollPane21.setViewportView(jSearchTable21);
            //System.out.println("Cannot sort out");
        }

        // Add your handling code here:
    }//GEN-LAST:event_jTextField1131CaretUpdate

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        this.setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_closeBtnActionPerformed

    private void refreshFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshFormBtnActionPerformed
//        this.getContentPane().removeAll();
        //        this.initComponents();        // Add your handling code here:
    }//GEN-LAST:event_refreshFormBtnActionPerformed
    private void utilizeDeposit(String transNo, String user, String receiptNo, String visitid, String AccDesc, Object patientAcc) {
        try {
            double balAfterUtilization = java.lang.Double.valueOf(totalDepositRealTxt.getText()) - java.lang.Double.valueOf(refundTxt.getText());
            if (Double.valueOf(totalDepositRealTxt.getText().trim()) > 0) {
                if (balAfterUtilization > 0) {
                    java.sql.PreparedStatement pstmtx1 = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?::date, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                    pstmtx1.setString(1, patientNumberTxt.getText());
                    pstmtx1.setObject(2, "Receipt");
                    pstmtx1.setObject(3, "");
                    pstmtx1.setObject(4, payModeTxt.getText().toString());
                    pstmtx1.setString(5, transNo);
                    pstmtx1.setString(7, schemeNumberTxt.getText());
                    pstmtx1.setString(6, cardNumberTxt.getText().trim());
                    pstmtx1.setString(8, claimNumberTxt.getText().toString());
                    pstmtx1.setString(9, "");
                    pstmtx1.setObject(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dischargeDatePicker.getDate()));//expiry date
                    pstmtx1.setString(11, "");
                    pstmtx1.setDouble(13, balAfterUtilization);

                    pstmtx1.setDouble(12, 0.0);//debit
                    pstmtx1.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dischargeDatePicker.getDate()));
                    pstmtx1.setObject(15, patientAcc);
                    pstmtx1.setObject(16, AccDesc);
                    //}
                    pstmtx1.setDouble(17, 1);
                    pstmtx1.setObject(18, "");
                    pstmtx1.setBoolean(19, true);
                    pstmtx1.setString(20, "Receipt");
                    pstmtx1.setBoolean(21, true);
                    pstmtx1.setString(22, AccDesc);
                    if (patientNumberTxt.getText().startsWith("INT") || patientNumberTxt.getText().startsWith("BID")) {
                        pstmtx1.setString(23, patientNumberTxt.getText());
                    } else {
                        pstmtx1.setString(23, visitid);
                    }
                    pstmtx1.setString(24, user);
                    pstmtx1.setString(25, jTextField14.getText());

                    pstmtx1.setString(26, "IP");

                    pstmtx1.setTimestamp(27, com.afrisoftech.lib.ServerTime.getSQLTimeStamp(connectDB));//new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));

                    if (patientNumberTxt.getText().startsWith("INT") || patientNumberTxt.getText().startsWith("BID")) {
                        pstmtx1.setString(28, patientNumberTxt.getText());
                    } else {
                        pstmtx1.setString(28, visitIDTxt.getText());
                    }
                    pstmtx1.setString(29, receiptNo);
                    pstmtx1.executeUpdate();

                    java.sql.Statement stm1211x = connectDB.createStatement();
                    java.sql.ResultSet rse1211x = stm1211x.executeQuery("SELECT distinct description, activity_code FROM ac_ledger WHERE patient_no = '" + patientNumberTxt.getText() + "' and transaction_type = 'Unutilized patient deposit'");
                    String rnamex = null, rcodex = null;
                    while (rse1211x.next()) {
                        rnamex = rse1211x.getObject(1).toString();
                        rcodex = rse1211x.getObject(2).toString();
                    }
                    java.sql.PreparedStatement pstmt1q1 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                    pstmt1q1.setObject(1, rcodex);
                    pstmt1q1.setString(2, rnamex);
                    pstmt1q1.setString(3, patientNumberTxt.getText());
                    pstmt1q1.setString(4, patientNameTxt.getText());
                    pstmt1q1.setObject(6, visitIDTxt.getText());
                    pstmt1q1.setString(5, "Patient deposit");
                    pstmt1q1.setString(7, visitid);
                    pstmt1q1.setString(8, "IP");
                    pstmt1q1.setString(9, "");
                    pstmt1q1.setString(10, payModeTxt.getText().toString());
                    pstmt1q1.setString(11, "");
                    pstmt1q1.setString(12, receiptNo);
                    pstmt1q1.setString(13, "");
                    pstmt1q1.setString(14, "Receipt");
                    pstmt1q1.setString(15, "Unutilized patient deposit");
                    pstmt1q1.setDouble(17, 0.00);
                    pstmt1q1.setDouble(16, balAfterUtilization);
                    pstmt1q1.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dischargeDatePicker.getDate()));
                    pstmt1q1.setString(19, transNo);
                    pstmt1q1.setBoolean(20, false);
                    pstmt1q1.setBoolean(21, true);
                    pstmt1q1.setBoolean(22, false);
                    pstmt1q1.setString(23, user);
                    pstmt1q1.setString(24, "");//cash point
                    pstmt1q1.setString(25, "");//shift
                    pstmt1q1.setTimestamp(26, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                    pstmt1q1.executeUpdate();

                } else if (balAfterUtilization < 0) {
                    java.sql.PreparedStatement pstmtx1 = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?::date, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                    pstmtx1.setString(1, patientNumberTxt.getText());
                    pstmtx1.setObject(2, "Refund");
                    pstmtx1.setObject(3, "");
                    pstmtx1.setObject(4, payModeTxt.getText().toString());
                    pstmtx1.setString(5, transNo);
                    pstmtx1.setString(7, schemeNumberTxt.getText());
                    pstmtx1.setString(6, cardNumberTxt.getText().trim());
                    pstmtx1.setString(8, claimNumberTxt.getText().toString());
                    pstmtx1.setString(9, "");
                    pstmtx1.setObject(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dischargeDatePicker.getDate()));//expiry date
                    pstmtx1.setString(11, "");
                    //if(determineBill)
                    pstmtx1.setDouble(12, -1 * balAfterUtilization);

                    pstmtx1.setDouble(13, 0.0);//debit
                    pstmtx1.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dischargeDatePicker.getDate()));
                    pstmtx1.setObject(15, patientAcc);
                    pstmtx1.setObject(16, AccDesc);
                    //}
                    pstmtx1.setDouble(17, 1);
                    pstmtx1.setObject(18, "");
                    pstmtx1.setBoolean(19, true);
                    pstmtx1.setString(20, "Receipt");
                    pstmtx1.setBoolean(21, true);
                    pstmtx1.setString(22, AccDesc);
                    if (patientNumberTxt.getText().startsWith("INT") || patientNumberTxt.getText().startsWith("BID")) {
                        pstmtx1.setString(23, patientNumberTxt.getText());
                    } else {
                        pstmtx1.setString(23, visitid);
                    }
                    pstmtx1.setString(24, user);
                    pstmtx1.setString(25, jTextField14.getText());

                    pstmtx1.setString(26, "IP");

                    pstmtx1.setTimestamp(27, com.afrisoftech.lib.ServerTime.getSQLTimeStamp(connectDB));//new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));

                    if (patientNumberTxt.getText().startsWith("INT") || patientNumberTxt.getText().startsWith("BID")) {
                        pstmtx1.setString(28, patientNumberTxt.getText());
                    } else {
                        pstmtx1.setString(28, visitIDTxt.getText());
                    }
                    pstmtx1.setString(29, receiptNo);
                    pstmtx1.executeUpdate();

                    java.sql.Statement stm1211x = connectDB.createStatement();
                    java.sql.ResultSet rse1211x = stm1211x.executeQuery("SELECT distinct description, activity_code FROM ac_ledger WHERE patient_no = '" + patientNumberTxt.getText() + "' and transaction_type = 'Unutilized patient deposit'");
                    String rnamex = null, rcodex = null;
                    while (rse1211x.next()) {
                        rnamex = rse1211x.getObject(1).toString();
                        rcodex = rse1211x.getObject(2).toString();
                    }
                    java.sql.PreparedStatement pstmt1q1 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                    pstmt1q1.setObject(1, rcodex);
                    pstmt1q1.setString(2, rnamex);
                    pstmt1q1.setString(3, patientNumberTxt.getText());
                    pstmt1q1.setString(4, patientNameTxt.getText());
                    pstmt1q1.setObject(6, visitIDTxt.getText());
                    pstmt1q1.setString(5, "Patient Refund");
                    pstmt1q1.setString(7, visitid);
                    pstmt1q1.setString(8, "IP");
                    pstmt1q1.setString(9, "");
                    pstmt1q1.setString(10, payModeTxt.getText().toString());
                    pstmt1q1.setString(11, "");
                    pstmt1q1.setString(12, receiptNo);
                    pstmt1q1.setString(13, "");
                    pstmt1q1.setString(14, "Receipt");
                    pstmt1q1.setString(15, "Unutilized patient deposit");
                    pstmt1q1.setDouble(16, 0.00);
                    pstmt1q1.setDouble(17, -1 * balAfterUtilization);
                    pstmt1q1.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dischargeDatePicker.getDate()));
                    pstmt1q1.setString(19, transNo);
                    pstmt1q1.setBoolean(20, false);
                    pstmt1q1.setBoolean(21, true);
                    pstmt1q1.setBoolean(22, false);
                    pstmt1q1.setString(23, user);
                    pstmt1q1.setString(24, "");//cash point
                    pstmt1q1.setString(25, "");//shift
                    pstmt1q1.setTimestamp(26, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                    pstmt1q1.executeUpdate();
                }
                javax.swing.JOptionPane.showMessageDialog(this, "Deposit Utilised Successfully");
            }

        } catch (HeadlessException udp) {
            udp.printStackTrace();
            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(udp.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, udp.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        } catch (NumberFormatException | SQLException udp) {
            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(udp.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, udp.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }
    private void postFinalBillBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postFinalBillBtnActionPerformed
        // if (cardNumberTxt.getText().toCharArray().length > 0) {
        boolean empty = false;
        if (!payModeTxt.getText().equalsIgnoreCase("Cash")) {
            if (cardNumberTxt.getText().toCharArray().length > 0) {
                if (nhifRebateRdi.isSelected() == true) {
                    empty = true;
                }
                if (noRebateRdi.isSelected() == true) {
                    empty = true;
                }

            }
        } else if (payModeTxt.getText().equalsIgnoreCase("Cash")) {
            empty = true;
        }

        if (empty == true) {
            if (Double.parseDouble(netAmountTxt.getText()) <= 0) {
                java.util.Date periodFrom = null;
                java.util.Date periodTo = null;
                float refund = java.lang.Float.parseFloat(refundTxt.getText());
                try {

                    java.sql.Statement stmtf = connectDB.createStatement();
                    java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open'");
                    while (rsetf.next()) {
                        periodFrom = rsetf.getDate(1);
                        periodTo = rsetf.getDate(2);
                    }

                } catch (java.sql.SQLException sq) {
                    sq.printStackTrace();
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    System.out.println(sq.getMessage());

                }

                if (admissionDatePicker.getDate().before(periodFrom) || dischargeDatePicker.getDate().after(periodTo)) {
                    javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                } else {
                    if (billTable.isEditing()) {
                        billTable.getCellEditor().stopCellEditing();
                    }

                    java.util.Calendar calendar = java.util.Calendar.getInstance();

                    long dateNow = calendar.getTimeInMillis();

                    java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

                    System.out.println(datenowSql1.toString());

                    java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

                    System.out.println(datenowSql.toString());
                    //      try{
                    String receiptNo = null;
                    String actCode = null;
                    String glCode = null;
                    java.sql.Date DischDate = null;
                    String glCode1 = null;
                    String bankAcc1 = null;
                    String transNo = null;
                    String payMode = null;
                    String patCat = null;
                    String patientAcc = null;
                    String cardNo = null;
                    String scheme = null;
                    String cardName = null;
                    String isurer = null;
                    String expDate = null;
                    String staffNo = null;
                    String actNames = null;
                    String user = null;
                    String actNames1 = null;
                    String actCode1 = null;
                    String invoiceNo = null;
                    String ClaimNo = null;
                    String visitid = null;
                    String disno = null;
                    String AccDesc = null;
                    String UserName = "";
                    String ward = "";
                    String bed_no = "";
                    String rnamex = null;
                    String rcodex = null;
                    boolean rebateType = false;
                    com.afrisoftech.lib.InvoiceNumbers.invoiceType = true;
                    int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "Do you want to Finalise Invoice?", "Caution before Finalising Invoice!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

                    if (exitOption == javax.swing.JOptionPane.YES_OPTION) {

                        try {
                            connectDB.setAutoCommit(false);

                            java.sql.Statement stm1 = connectDB.createStatement();

                            java.sql.ResultSet rse1 = stm1.executeQuery("select pay_mode,payer,account_no,description,category from hp_inpatient_register where patient_no ='" + patientNumberTxt.getText() + "'");// UNION ALL select pay_mode,payer,account_no,description,category from hp_patient_register where patient_no ='"+jTextField91.getText()+"'");
                            while (rse1.next()) {

                                payMode = dbObject.getDBObject(rse1.getObject(1), "-");
                                cardNo = dbObject.getDBObject(rse1.getObject(3), "-");
                                scheme = dbObject.getDBObject(rse1.getObject(4), "-");
                                isurer = dbObject.getDBObject(rse1.getObject(2), "-");
                                patCat = dbObject.getDBObject(rse1.getObject(5), "-");
                            }

                            java.sql.Statement ps = connectDB.createStatement();
                            java.sql.ResultSet rst = ps.executeQuery("select nextval('discharge_no_seq'),current_user");
                            while (rst.next()) {
                                rst.getObject(1).toString();

                                disno = rst.getObject(1).toString();
                                UserName = rst.getObject(2).toString();
                            }

                            java.sql.Statement stmtf = connectDB.createStatement();
                            java.sql.ResultSet rsetf = stmtf.executeQuery("select ward,ward_code,bed_no from hp_admission where patient_no ILIKE '" + patientNumberTxt.getText() + "%' AND visit_id = '" + visitIDTxt.getText() + "'");
                            while (rsetf.next()) {
                                ward = rsetf.getObject(1).toString();
                                bed_no = rsetf.getObject(3).toString();
                            }
                            java.sql.Statement stm12 = connectDB.createStatement();
                            java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                            while (rse12.next()) {

                                patientAcc = rse12.getObject(1).toString();
                                AccDesc = rse12.getObject(2).toString();
                            }

                            java.sql.Statement stm11 = connectDB.createStatement();

                            java.sql.ResultSet rse11 = stm11.executeQuery("select discharge_date from hp_inpatient_register where patient_no ='" + patientNumberTxt.getText() + "'");// UNION ALL select pay_mode,payer,account_no,description,category from hp_patient_register where patient_no ='"+jTextField91.getText()+"'");
                            while (rse11.next()) {
                                DischDate = rse11.getDate(1);
                            }

                            java.sql.Statement pss12 = connectDB.createStatement();
                            java.sql.ResultSet rsts11 = pss12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                            while (rsts11.next()) {
                                actCode = rsts11.getObject(1).toString();
                                actNames = rsts11.getObject(2).toString();
                            }

                            java.sql.Statement pss11x = connectDB.createStatement();
                            java.sql.ResultSet rsts1x = pss11x.executeQuery("select current_user");
                            while (rsts1x.next()) {
                                user = rsts1x.getObject(1).toString();
                            }

                            invoiceNo = com.afrisoftech.lib.InvoiceNumbers.getInvoiceNumber();
                            for (int i = 0; i < schemeInvoicingTable.getRowCount(); i++) {
                                if (schemeInvoicingTable.getValueAt(i, 0) != null) {
                                    java.sql.PreparedStatement pstmtRT = connectDB.prepareStatement("SELECT rebate_type_invoicing FROM ac_schemes WHERE account_no = ?");
                                    pstmtRT.setString(1, schemeInvoicingTable.getValueAt(i, 0).toString());
                                    java.sql.ResultSet rsetRT = pstmtRT.executeQuery();
                                    while (rsetRT.next()) {
                                        rebateType = rsetRT.getBoolean(1);
                                    }
                                }
                                //    invoiceNo = com.afrisoftech.lib.InvoiceNumbers.getInvoiceNumber();
                                if (schemeInvoicingTable.getModel().getValueAt(i, 2) != null) {
                                    if (schemeInvoicingTable.getModel().getValueAt(i, 1).toString().contains("NHIF") || schemeInvoicingTable.getModel().getValueAt(i, 1).toString().contains("N.H.I.F")) {
                                        String claimNo = com.afrisoftech.lib.ClaimNumberFactory.getClaimNumber(connectDB);
                                        claimNumberTxt.setText(claimNo);
                                    }
                                    java.sql.Statement pss = connectDB.createStatement();
                                    java.sql.ResultSet rss = pss.executeQuery("select nextval('transaction_no_seq')");
                                    while (rss.next()) {
                                        transNo = rss.getObject(1).toString();
                                    }
                                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 4);
                                    String name = null;
                                    String payer = null;
                                    java.sql.Statement pss11h = connectDB.createStatement();
                                    java.sql.ResultSet rsts1h = pss11h.executeQuery("SELECT scheme_name,payer_name,gl_code,gl_name FROM ac_schemes WHERE account_no = '" + schemeInvoicingTable.getValueAt(i, 0) + "'");
                                    while (rsts1h.next()) {
                                        name = rsts1h.getObject(1).toString();
                                        payer = rsts1h.getObject(2).toString();
                                        actCode1 = rsts1h.getObject(3).toString();
                                        actNames1 = rsts1h.getObject(4).toString();
                                    }
                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                    pstmt.setString(1, patientNumberTxt.getText());
                                    pstmt.setObject(2, "Receipt");
                                    pstmt.setString(3, "");
                                    pstmt.setString(4, "Scheme");
                                    pstmt.setString(5, transNo);
                                    pstmt.setString(7, name);
                                    pstmt.setString(6, "");
                                    pstmt.setString(8, "");
                                    pstmt.setString(9, payer);
                                    pstmt.setDate(10, null);
                                    pstmt.setString(11, "");
                                    pstmt.setDouble(13, java.lang.Double.valueOf(schemeInvoicingTable.getValueAt(i, 2).toString()));
                                    pstmt.setDouble(12, 0.00);
                                    pstmt.setDate(14, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
                                    pstmt.setObject(15, actCode);
                                    pstmt.setString(16, "INVOICE - " + name);
                                    pstmt.setDouble(17, 1.00);
                                    pstmt.setObject(18, schemeNumberTxt.getText());
                                    pstmt.setBoolean(19, true);
                                    pstmt.setString(20, "Receipts");
                                    pstmt.setBoolean(21, true);
                                    pstmt.setString(22, actNames);
                                    pstmt.setString(23, invoiceNo);
                                    pstmt.setString(24, user);
                                    pstmt.setString(25, transNo);
                                    pstmt.setString(26, "IP");
                                    pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                    pstmt.setString(28, visitIDTxt.getText());
                                    pstmt.executeUpdate();

                                    java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_debtors values(?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?, ?,?,?,?,?,?, ?,?,?,?,?,?,?)");
                                    pstmt2.setObject(1, actCode1);
                                    pstmt2.setString(4, patientNumberTxt.getText());
                                    pstmt2.setObject(3, patientNameTxt.getText());
                                    pstmt2.setString(2, payer);
                                    pstmt2.setString(5, name);
                                    pstmt2.setString(6, "");
                                    pstmt2.setObject(7, schemeInvoicingTable.getValueAt(i, 0).toString());
                                    pstmt2.setString(8, "");
                                    pstmt2.setString(9, "");
                                    pstmt2.setString(10, cardNumberTxt.getText());
                                    pstmt2.setString(11, transNo);
                                    pstmt2.setString(12, "Raise Invoice");
                                    pstmt2.setDouble(13, java.lang.Double.valueOf(schemeInvoicingTable.getValueAt(i, 2).toString()));
                                    pstmt2.setDouble(14, 0.00);
                                    pstmt2.setDate(15, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
                                    pstmt2.setObject(16, invoiceNo);
                                    pstmt2.setString(17, actNames1);
                                    pstmt2.setBoolean(18, false);
                                    pstmt2.setBoolean(19, false);
                                    pstmt2.setString(20, user);
                                    pstmt2.setString(21, "");
                                    pstmt2.setDouble(22, java.lang.Double.valueOf(schemeInvoicingTable.getValueAt(i, 2).toString()));
                                    pstmt2.setBoolean(23, false);
                                    pstmt2.setDouble(24, 0.00);
                                    pstmt2.setObject(25, "");
                                    pstmt2.setObject(26, null);
                                    pstmt2.setBoolean(27, false);
                                    pstmt2.setDouble(28, 0.00);
                                    pstmt2.setObject(29, null);
                                    pstmt2.setString(30, "");
                                    pstmt2.setBoolean(31, false);
                                    pstmt2.setDouble(32, 0.00);
                                    pstmt2.setObject(33, null);
                                    pstmt2.setString(34, "");
                                    pstmt2.setString(35, schemeNumberTxt.getText());
                                    pstmt2.setString(36, claimNumberTxt.getText());
                                    pstmt2.executeUpdate();
                                    //}
                                    if (rebateType) {
                                        Double nhifDiff = schemediff;//Double.parseDouble(netAmountTxt.getText()) - Double.parseDouble(schemeInvoicingTable.getValueAt(0, 2).toString());
                                        if (nhifDiff != 0) { //&& payModeTxt.getText().equalsIgnoreCase("Cash")
                                            String diffCode = null;
                                            String diffDesc = null;
                                            java.sql.Statement pss11u = connectDB.createStatement();
                                            java.sql.ResultSet rsts1u = pss11u.executeQuery("SELECT code,activity FROM pb_activity WHERE activity_category ilike 'NH'"); //get the GL account code and description for rebate variance account
                                            while (rsts1u.next()) {
                                                diffCode = rsts1u.getObject(1).toString();
                                                diffDesc = rsts1u.getObject(2).toString();

                                            }
                                            java.sql.Statement pss1 = connectDB.createStatement();
                                            java.sql.ResultSet rss1 = pss.executeQuery("select nextval('transaction_no_seq')");
                                            while (rss1.next()) {
                                                transNo = rss1.getObject(1).toString();
                                            }
                                            java.sql.PreparedStatement pstmtp = connectDB.prepareStatement("INSERT INTO hp_patient_card VALUES(?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                            pstmtp.setString(1, patientNumberTxt.getText());
                                            pstmtp.setObject(2, "SCHEME DIFF ");
                                            pstmtp.setString(3, patCat);
                                            pstmtp.setString(4, payMode);
                                            pstmtp.setString(5, transNo);
                                            pstmtp.setString(7, "SCHEME DIFF");
                                            pstmtp.setString(6, cardNumberTxt.getText());
                                            pstmtp.setString(8, schemeInvoicingTable.getValueAt(i, 1).toString());
                                            pstmtp.setString(9, schemeInvoicingTable.getValueAt(i, 1).toString());
                                            pstmtp.setDate(10, null);
                                            pstmtp.setString(11, "");
                                            if (nhifDiff > 0) {
                                                pstmtp.setDouble(13, nhifDiff);
                                                pstmtp.setDouble(12, 0.00);
                                            } else {
                                                pstmtp.setDouble(12, nhifDiff * -1);
                                                pstmtp.setDouble(13, 0.00);
                                            }
                                            pstmtp.setDate(14, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
                                            // pstmtp.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dischargeDatePicker.getDate()));
                                            pstmtp.setObject(15, actCode);
                                            //      pstmtp.setObject(15, actCode);
                                            pstmtp.setString(16, "SCHEME DIFF");
                                            pstmtp.setDouble(17, 1);
                                            pstmtp.setObject(18, patientNameTxt.getText());
                                            pstmtp.setBoolean(19, true);
                                            pstmtp.setString(23, invoiceNo);
                                            pstmtp.setString(20, "Remittance");
                                            pstmtp.setBoolean(21, false);
                                            pstmtp.setString(22, actNames);
                                            pstmtp.setString(24, user);
                                            pstmtp.setString(25, "-");
                                            pstmtp.setString(26, "IP");
                                            pstmtp.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                            pstmtp.setObject(28, visitIDTxt.getText());
                                            pstmtp.executeUpdate();

                                            java.sql.PreparedStatement pstmt2x = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                            pstmt2x.setObject(1, diffCode);
                                            pstmt2x.setObject(2, diffDesc);
                                            pstmt2x.setString(3, patientNumberTxt.getText());
                                            pstmt2x.setString(4, patientNameTxt.getText());
                                            pstmt2x.setString(5, "Scheme Diff");
                                            pstmt2x.setString(6, "");
                                            pstmt2x.setString(7, "");
                                            pstmt2x.setString(10, "Scheme");
                                            pstmt2x.setString(9, "");
                                            pstmt2x.setString(8, "IP");
                                            pstmt2x.setString(11, "");
                                            pstmt2x.setString(12, "");
                                            pstmt2x.setString(13, "");
                                            pstmt2x.setString(14, "Scheme Diff");
                                            pstmt2x.setString(15, "Scheme Rebate");
                                            if (nhifDiff > 0) {
                                                pstmt2x.setDouble(16, nhifDiff);
                                                pstmt2x.setDouble(17, 0.00);
                                            } else {
                                                pstmt2x.setDouble(17, nhifDiff * -1);
                                                pstmt2x.setDouble(16, 0.00);
                                            }
                                            pstmt2x.setDate(18, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
                                            //pstmt2x.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dischargeDatePicker.getDate()));
                                            pstmt2x.setString(19, transNo);
                                            pstmt2x.setBoolean(20, false);
                                            pstmt2x.setBoolean(21, false);
                                            pstmt2x.setBoolean(22, false);
                                            pstmt2x.setString(23, user);
                                            pstmt2x.executeUpdate();
                                        }
                                    }
                                }

                            }
                            // }
                            for (int j = 0; j < billTable.getRowCount(); j++) {
                                //    invoiceNo = com.afrisoftech.lib.InvoiceNumbers.getInvoiceNumber();
                                if (billTable.getModel().getValueAt(j, 4) != null) {
                                    if ((Boolean.valueOf(billTable.getValueAt(j, 5).toString()) == java.lang.Boolean.TRUE) || (billTable.getValueAt(j, 0).toString().equalsIgnoreCase("Receipt"))) {
                                        System.out.println("Update for receipts -- 1");
                                        java.sql.PreparedStatement pstmt21 = connectDB.prepareStatement("UPDATE hp_patient_card set"
                                                + " paid = true,invoice_no = '" + invoiceNo + "' WHERE patient_no = '" + patientNumberTxt.getText() + "'"
                                                + " AND visit_id = '" + visitIDTxt.getText() + "'"
                                                + " AND invoice_no NOT ILIKE 'I%'");
                                        pstmt21.executeUpdate();
                                    }
                                }
                            }

                            if (nhifRebateRdi.isSelected()) {

                                String claimNo = com.afrisoftech.lib.ClaimNumberFactory.getClaimNumber(connectDB);
                                claimNumberTxt.setText(claimNo);
                                //invoiceNo = com.afrisoftech.lib.InvoiceNumbers.getInvoiceNumber();
                                double nhif = java.lang.Double.parseDouble(nhifRebateTxt.getText());
                                double bill = java.lang.Double.parseDouble(netAmountTxt.getText());
                                double nhifDiff = java.lang.Double.parseDouble(nhifDiffTxt.getText());

                                String bankAcc = null;
                                String Account = null;
                                String Payer = null;
                                int claims = 0;
                                String InvDate = null;

                                // invoiceNo = com.afrisoftech.lib.InvoiceNumbers.getInvoiceNumber();
//                                java.sql.Statement ps1q = connectDB.createStatement();
//                                java.sql.ResultSet rst1q = ps1q.executeQuery("select count(service) from hp_patient_card where service ilike 'n.h.i.%'  AND visit_id = '" + visitIDTxt.getText() + "'");
//                                while (rst1q.next()) {
//                                    claims = rst1q.getInt(1);
//                                }
//
//                                if (claims > 0) {
//                                    javax.swing.JOptionPane.showMessageDialog(this, "Nhif has been deducted from this Bill", "Information Message!", javax.swing.JOptionPane.YES_OPTION);
//
//                                } else {
                                int exitOption1 = javax.swing.JOptionPane.showConfirmDialog(this, "Confirm NHIF Card No. !!", "Caution before Saving!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

                                if (exitOption1 == javax.swing.JOptionPane.YES_OPTION) {

                                    System.out.println("Executing NHIF..................");

                                    java.sql.Statement pss12q = connectDB.createStatement();
                                    java.sql.ResultSet rsts11q = pss12q.executeQuery("select date from ac_debtors where invoice_no  = '" + invoiceNo + "'");
                                    while (rsts11q.next()) {
                                        InvDate = rsts11q.getObject(1).toString();

                                    }
                                    java.sql.Statement stm13 = connectDB.createStatement();

                                    java.sql.ResultSet rse13 = stm13.executeQuery("select pay_mode,account_no,description,expiry_date,payer,category from hp_inpatient_register where patient_no ='" + patientNumberTxt.getText() + "'");
                                    while (rse13.next()) {

                                        payMode = rse13.getObject(1).toString();
                                        patCat = rse13.getObject(6).toString();
                                    }
                                    java.sql.Statement pss5 = connectDB.createStatement();
                                    java.sql.ResultSet rss5 = pss5.executeQuery("select nextval('transaction_no_seq')");
                                    while (rss5.next()) {
                                        transNo = rss5.getObject(1).toString();
                                    }
//
//                                        java.sql.Statement pss1v = connectDB.createStatement();
//                                        java.sql.ResultSet rss1v = pss1v.executeQuery("select nextval('claim_no_seq')");
//                                        while (rss1v.next()) {
//                                            ClaimNo = rss1v.getObject(1).toString();
//                                        }

                                    //invoiceNo = jTextField19.getText();
                                    java.sql.Statement pss125 = connectDB.createStatement();
                                    java.sql.ResultSet rsts115 = pss125.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                                    while (rsts115.next()) {
                                        actCode = rsts115.getObject(1).toString();
                                        actNames = rsts115.getObject(2).toString();
                                    }
                                    java.sql.Statement pss121 = connectDB.createStatement();
                                    java.sql.ResultSet rsts111 = pss121.executeQuery("select account_no,payer_name from ac_schemes where (category ILIKE  'N H I F%' OR category ILIKE 'NHIF%' OR category ILIKE 'N.H.I.%')");
                                    while (rsts111.next()) {
                                        Account = rsts111.getObject(1).toString();
                                        Payer = rsts111.getObject(2).toString();
                                    }
                                    java.sql.Statement pss116 = connectDB.createStatement();
                                    java.sql.ResultSet rsts16 = pss116.executeQuery("SELECT gl_code,gl_name FROM ac_schemes where (category ILIKE  'N H I F%' OR category ILIKE 'NHIF%' OR category ILIKE 'N.H.I.%')");
                                    while (rsts16.next()) {
                                        actCode1 = rsts16.getObject(1).toString();
                                        actNames1 = rsts16.getObject(2).toString();
                                        //user = rsts16.getObject(3).toString();
                                    }
                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO hp_patient_card VALUES(?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                    pstmt.setString(1, patientNumberTxt.getText());
                                    pstmt.setObject(2, "N.H.I.F");
                                    pstmt.setString(3, patCat);
                                    pstmt.setString(4, payMode);
                                    pstmt.setString(5, transNo);
                                    pstmt.setString(7, "N.H.I.F");
                                    pstmt.setString(6, cardNumberTxt.getText());
                                    pstmt.setString(8, "N.H.I.F");
                                    pstmt.setString(9, "N.H.I.F");
                                    pstmt.setDate(10, null);
                                    pstmt.setString(11, "");
                                    pstmt.setDouble(13, java.lang.Double.valueOf(nhifRebateTxt.getText()));
                                    pstmt.setDouble(12, 0.00);
                                    pstmt.setDate(14, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
                                    // pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dischargeDatePicker.getDate()));
                                    pstmt.setObject(15, actCode);
                                    pstmt.setString(16, "N.H.I.F");
                                    pstmt.setDouble(17, 1);
                                    pstmt.setObject(18, patientNameTxt.getText());
                                    pstmt.setBoolean(19, true);
                                    pstmt.setString(23, invoiceNo);
                                    pstmt.setString(20, "Remittance");
                                    pstmt.setBoolean(21, false);
                                    pstmt.setString(22, actNames);
                                    pstmt.setString(24, user);
                                    pstmt.setString(25, "-");
                                    pstmt.setString(26, "IP");
                                    pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                    pstmt.setObject(28, visitIDTxt.getText());
                                    pstmt.executeUpdate();

                                    java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("INSERT INTO ac_debtors VALUES(?, ?, "
                                            + "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"
                                            + " ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                                    pstmt1.setObject(1, actCode1);
                                    pstmt1.setString(4, patientNumberTxt.getText());
                                    pstmt1.setObject(3, patientNameTxt.getText());
                                    pstmt1.setString(5, "N H I F");
                                    pstmt1.setString(2, Payer);
                                    pstmt1.setString(6, "Remittance");
                                    pstmt1.setString(7, Account);
                                    pstmt1.setString(8, "");
                                    pstmt1.setString(9, "");
                                    pstmt1.setString(10, cardNumberTxt.getText());
                                    pstmt1.setString(11, transNo);
                                    pstmt1.setString(12, "Invoice");
                                    pstmt1.setDouble(13, java.lang.Double.valueOf(nhifRebateTxt.getText()));
                                    pstmt1.setDouble(14, 0.00);
                                    // pstmt1.setDate(15,com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(jTextField61.getText())));
                                    pstmt1.setDate(15, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
                                    pstmt1.setObject(16, invoiceNo);
                                    pstmt1.setString(17, actNames1);
                                    pstmt1.setBoolean(18, false);
                                    pstmt1.setBoolean(19, false);
                                    pstmt1.setString(20, user);
                                    pstmt1.setObject(21, nhifCategoryCmbx.getSelectedItem());
                                    pstmt1.setDouble(22, java.lang.Double.valueOf(nhifRebateTxt.getText()));
                                    pstmt1.setBoolean(23, false);
                                    pstmt1.setDouble(24, 0.00);
                                    pstmt1.setObject(25, null);
                                    pstmt1.setObject(26, null);
                                    pstmt1.setBoolean(27, false);
                                    pstmt1.setDouble(28, 0.00);
                                    pstmt1.setObject(29, null);
                                    pstmt1.setObject(30, null);
                                    pstmt1.setBoolean(31, false);
                                    pstmt1.setDouble(32, 0.00);
                                    pstmt1.setObject(33, null);
                                    pstmt1.setObject(34, null);
                                    pstmt1.setString(35, cardNumberTxt.getText());
                                    pstmt1.setString(36, claimNumberTxt.getText());
                                    pstmt1.executeUpdate();

                                    System.out.println("NHIF DIFF Value.................." + nhifDiff);

                                    if (nhifDiff != 0) { //&& payModeTxt.getText().equalsIgnoreCase("Cash")
                                        System.out.println("Executing NHIF DIFF..................");
                                        String diffCode = null;
                                        String diffDesc = null;
                                        java.sql.Statement pss11u = connectDB.createStatement();
                                        java.sql.ResultSet rsts1u = pss11u.executeQuery("SELECT code,activity FROM pb_activity WHERE activity_category ilike 'NH'");
                                        while (rsts1u.next()) {
                                            diffCode = rsts1u.getObject(1).toString();
                                            diffDesc = rsts1u.getObject(2).toString();

                                        }
                                        java.sql.Statement pss = connectDB.createStatement();
                                        java.sql.ResultSet rss = pss.executeQuery("select nextval('transaction_no_seq')");
                                        while (rss.next()) {
                                            transNo = rss.getObject(1).toString();
                                        }
                                        java.sql.PreparedStatement pstmtp = connectDB.prepareStatement("INSERT INTO hp_patient_card VALUES(?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                        pstmtp.setString(1, patientNumberTxt.getText());
                                        pstmtp.setObject(2, "NHIF DIFF ");
                                        pstmtp.setString(3, patCat);
                                        pstmtp.setString(4, payMode);
                                        pstmtp.setString(5, transNo);
                                        pstmtp.setString(7, "N.H.I.F");
                                        pstmtp.setString(6, cardNumberTxt.getText());
                                        pstmtp.setString(8, "N.H.I.F");
                                        pstmtp.setString(9, "N.H.I.F");
                                        pstmtp.setDate(10, null);
                                        pstmtp.setString(11, "");
                                        if (nhifDiff > 0) {
                                            pstmtp.setDouble(13, java.lang.Double.valueOf(nhifDiffTxt.getText()));
                                            pstmtp.setDouble(12, 0.00);
                                        } else {
                                            pstmtp.setDouble(12, java.lang.Double.valueOf(nhifDiffTxt.getText()) * -1);
                                            pstmtp.setDouble(13, 0.00);
                                        }
                                        pstmtp.setDate(14, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
                                        // pstmtp.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dischargeDatePicker.getDate()));
                                        pstmtp.setObject(15, actCode);
                                        //      pstmtp.setObject(15, actCode);
                                        pstmtp.setString(16, "NHIF DIFF");
                                        pstmtp.setDouble(17, 1);
                                        pstmtp.setObject(18, patientNameTxt.getText());
                                        pstmtp.setBoolean(19, true);
                                        pstmtp.setString(23, invoiceNo);
                                        pstmtp.setString(20, "Remittance");
                                        pstmtp.setBoolean(21, false);
                                        pstmtp.setString(22, actNames);
                                        pstmtp.setString(24, user);
                                        pstmtp.setString(25, "-");
                                        pstmtp.setString(26, "IP");
                                        pstmtp.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                        pstmtp.setObject(28, visitIDTxt.getText());
                                        pstmtp.executeUpdate();

                                        java.sql.PreparedStatement pstmt2x = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                        pstmt2x.setObject(1, diffCode);
                                        pstmt2x.setObject(2, diffDesc);
                                        pstmt2x.setString(3, patientNumberTxt.getText());
                                        pstmt2x.setString(4, patientNameTxt.getText());
                                        pstmt2x.setString(5, "Nhif Diff");
                                        pstmt2x.setString(6, "");
                                        pstmt2x.setString(7, "");
                                        pstmt2x.setString(10, "Scheme");
                                        pstmt2x.setString(9, "");
                                        pstmt2x.setString(8, "IP");
                                        pstmt2x.setString(11, "");
                                        pstmt2x.setString(12, "");
                                        pstmt2x.setString(13, "");
                                        pstmt2x.setString(14, "Nhif Diff");
                                        pstmt2x.setString(15, "Nhif Rebate");
                                        if (nhifDiff > 0) {
                                            pstmt2x.setDouble(16, java.lang.Double.valueOf(nhifDiffTxt.getText()));
                                            pstmt2x.setDouble(17, 0.00);
                                        } else {
                                            pstmt2x.setDouble(17, java.lang.Double.valueOf(nhifDiffTxt.getText()) * -1);
                                            pstmt2x.setDouble(16, 0.00);
                                        }
                                        pstmt2x.setDate(18, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
                                        //pstmt2x.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dischargeDatePicker.getDate()));
                                        pstmt2x.setString(19, transNo);
                                        pstmt2x.setBoolean(20, false);
                                        pstmt2x.setBoolean(21, false);
                                        pstmt2x.setBoolean(22, false);
                                        pstmt2x.setString(23, user);
                                        pstmt2x.executeUpdate();
                                    }
                                    System.out.println("DONE WITH NHIfs..................");
                                }
                                // }
                            }

                            for (int i = 0; i < billTable.getRowCount(); i++) {
                                if (billTable.getModel().getValueAt(i, 3) != null && billTable.getModel().getValueAt(i, 0) != null) {

                                    float Disc = java.lang.Float.parseFloat(billTable.getValueAt(i, 3).toString());
                                    if (Disc > 0) {

                                        String discode = null;
                                        String discglAcc = null;
                                        java.sql.Statement stm122x = connectDB.createStatement();
                                        java.sql.ResultSet rse122x = stm122x.executeQuery("select code,activity from pb_activity where activity_category ='EDS'");
                                        while (rse122x.next()) {

                                            discode = rse122x.getObject(1).toString();
                                            discglAcc = rse122x.getObject(2).toString();
                                        }
                                        java.sql.Statement pss = connectDB.createStatement();
                                        java.sql.ResultSet rss = pss.executeQuery("select nextval('transaction_no_seq')");
                                        while (rss.next()) {
                                            transNo = rss.getObject(1).toString();
                                        }
                                        java.sql.PreparedStatement pstmtd = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                        pstmtd.setString(1, patientNumberTxt.getText());
                                        pstmtd.setObject(2, "Discount " + billTable.getValueAt(i, 0));
                                        pstmtd.setString(3, "");
                                        pstmtd.setString(4, "Scheme");
                                        pstmtd.setString(5, transNo);
                                        pstmtd.setString(7, "");
                                        pstmtd.setString(6, "");
                                        pstmtd.setString(8, "");
                                        pstmtd.setString(9, "");
                                        pstmtd.setDate(10, null);
                                        pstmtd.setString(11, "");
                                        pstmtd.setObject(13, billTable.getValueAt(i, 3));
                                        pstmtd.setDouble(12, 0.00);
                                        pstmtd.setDate(14, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
                                        //pstmtd.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dischargeDatePicker.getDate()));
                                        pstmtd.setObject(15, actCode);
                                        pstmtd.setObject(16, billTable.getValueAt(i, 0));
                                        pstmtd.setDouble(17, 1.00);
                                        pstmtd.setObject(18, schemeNumberTxt.getText());
                                        pstmtd.setBoolean(19, true);
                                        pstmtd.setString(20, "Receipts");
                                        pstmtd.setBoolean(21, true);
                                        pstmtd.setString(22, actNames);
                                        pstmtd.setString(23, invoiceNo);
                                        pstmtd.setString(24, user);
                                        pstmtd.setString(25, transNo);
                                        pstmtd.setString(26, "IP");
                                        pstmtd.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                        pstmtd.setString(28, visitIDTxt.getText());
                                        pstmtd.executeUpdate();

                                        java.sql.PreparedStatement pstmt2x = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                        pstmt2x.setObject(1, discode);
                                        pstmt2x.setObject(2, billTable.getValueAt(i, 0).toString());
                                        pstmt2x.setString(3, patientNumberTxt.getText());
                                        pstmt2x.setString(4, patientNameTxt.getText());
                                        pstmt2x.setString(5, "");
                                        pstmt2x.setString(6, cardNo);
                                        pstmt2x.setString(7, cardName);
                                        pstmt2x.setString(10, "Scheme");
                                        pstmt2x.setString(9, isurer);
                                        pstmt2x.setString(8, "IP");
                                        pstmt2x.setString(11, "");
                                        pstmt2x.setString(12, "");
                                        pstmt2x.setString(13, "");
                                        pstmt2x.setString(14, "Discount " + billTable.getValueAt(i, 0).toString());
                                        pstmt2x.setString(15, "Discount");
                                        pstmt2x.setDouble(17, 0.00);
                                        pstmt2x.setDouble(16, java.lang.Double.valueOf(billTable.getValueAt(i, 3).toString()));
                                        pstmt2x.setDate(18, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
                                        pstmt2x.setString(19, transNo);
                                        pstmt2x.setBoolean(20, false);
                                        pstmt2x.setBoolean(21, false);
                                        pstmt2x.setBoolean(22, false);
                                        pstmt2x.setString(23, user);
                                        pstmt2x.executeUpdate();
                                    }
                                }
                            }

                            java.sql.PreparedStatement pstmtx = connectDB.prepareStatement("INSERT INTO hp_patient_discharge VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                            pstmtx.setString(1, patientNumberTxt.getText());
                            pstmtx.setString(2, patientNameTxt.getText());
                            pstmtx.setString(3, "");
                            pstmtx.setString(4, ward);
                            pstmtx.setString(5, "");
                            pstmtx.setString(6, bed_no);
                            pstmtx.setDate(7, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dischargeDatePicker.getDate()));
                            pstmtx.setDate(8, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dischargeDatePicker.getDate()));
                            pstmtx.setString(9, "");
                            pstmtx.setString(10, "");
                            pstmtx.setString(11, "");
                            pstmtx.setDouble(12, java.lang.Double.valueOf(netAmountTxt.getText()));
                            pstmtx.setString(13, "");
                            pstmtx.setString(14, invoiceNo);
                            pstmtx.setString(15, disno);
                            pstmtx.setDate(16, com.afrisoftech.lib.SQLDateFormat.getSQLDate(admissionDatePicker.getDate()));
                            pstmtx.setTime(17, new java.sql.Time(java.util.Calendar.getInstance().getTimeInMillis()));
                            pstmtx.setString(18, UserName);
                            pstmtx.setString(19, claimNumberTxt.getText());
                            pstmtx.executeUpdate();

                            java.sql.PreparedStatement pstmt12 = null;

                            if (typeRenal.contains("Renal")) {
                                pstmt12 = connectDB.prepareStatement("UPDATE hp_admission SET invoice_no = '" + invoiceNo + "',balance = '" + netAmountTxt.getText() + "',discharge = true,check_out = true, date_admitted = '" + dialysisDatePicker.getDate() + "',discharge_date = '" + dischargeDatePicker.getDate() + "',discharged_by = '" + UserName + "'  WHERE patient_no = '" + this.patientNumberTxt.getText() + "' AND visit_id = '" + visitIDTxt.getText() + "'");
                            } else {
                                pstmt12 = connectDB.prepareStatement("UPDATE hp_admission SET invoice_no = '" + invoiceNo + "',balance = '" + netAmountTxt.getText() + "',discharge = true,check_out = true, date_admitted = '" + admissionDatePicker.getDate() + "',discharge_date = '" + dischargeDatePicker.getDate() + "',discharged_by = '" + UserName + "'  WHERE patient_no = '" + this.patientNumberTxt.getText() + "' AND visit_id = '" + visitIDTxt.getText() + "'");
                            }

                            pstmt12.executeUpdate();
                            for (int i = 0; i < billTable.getRowCount(); i++) {
                                //    invoiceNo = com.afrisoftech.lib.InvoiceNumbers.getInvoiceNumber();
                                if (billTable.getModel().getValueAt(i, 4) != null) {
                                    //       if (Boolean.valueOf(billTable.getValueAt(i, 5).toString()) == java.lang.Boolean.TRUE || billTable.getValueAt(i, 0).toString().equalsIgnoreCase("Receipt")) {
                                    System.out.println("Update for receipts -- 2");
                                    java.sql.PreparedStatement pstmt21 = connectDB.prepareStatement("UPDATE hp_patient_card set"
                                            + " card_no='" + cardNumberTxt.getText() + "',paid = true,invoice_no = '" + invoiceNo + "' WHERE patient_no = '" + patientNumberTxt.getText() + "'"
                                            + " AND visit_id = '" + visitIDTxt.getText() + "'"
                                            + " AND invoice_no NOT ILIKE 'I%'");
                                    pstmt21.executeUpdate();
                                    //       }
                                }
                            }
                            java.sql.PreparedStatement pstmt21x = connectDB.prepareStatement("UPDATE ac_doctors_ledger set pat_inv = '" + invoiceNo + "' WHERE patient_no = '" + patientNumberTxt.getText() + "' AND input_date between '" + admissionDatePicker.getDate() + "' AND '" + dischargeDatePicker.getDate() + "'");
                            pstmt21x.executeUpdate();

                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO ac_debtors_comments("
                                    + "    invoice_no, comments, invoice_date)"
                                    + "    VALUES (?, ?, ?);");
                            pstmt.setString(1, invoiceNo);
                            pstmt.setString(2, commentsTxt.getText());
                            pstmt.setDate(3, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
                            pstmt.execute();

                            connectDB.commit();
                            connectDB.setAutoCommit(true);
                            javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully \n  Inv. No. is " + invoiceNo + " ", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                            java.sql.PreparedStatement pstmtNHIF = connectDB.prepareStatement("SELECT count(*) FROM hp_patient_card where patient_no = ? and visit_id = ? and main_service ilike '%nhif%'");
                            pstmtNHIF.setString(1, patientNumberTxt.getText());
                            pstmtNHIF.setString(2, visitIDTxt.getText());
                            java.sql.ResultSet rsetNHIF = pstmtNHIF.executeQuery();
                            int claimNumber = 0;
                            while (rsetNHIF.next()) {
                                claimNumber = rsetNHIF.getInt(1);
                                if (claimNumber > 0) {
//                                com.afrisoftech.reports.NHIFInvoicePdf nhifInvoice = new com.afrisoftech.reports.NHIFInvoicePdf();
//                                nhifInvoice.NHIFInvoicePdf(connectDB, invoiceNo, admissionDatePicker.getDate(), dischargeDatePicker.getDate(), patientNumberTxt.getText());
                                }
                            }
                            //// PRINTING INVOICES
                            {

                                java.sql.PreparedStatement pstmtSCHEMES = connectDB.prepareStatement("SELECT distinct  dealer  FROM ac_debtors where  invoice_no='" + invoiceNo + "' group by 1 having sum(debit-credit)>0 order by 1 asc");
                                java.sql.ResultSet rsetSCHEMES = pstmtNHIF.executeQuery();
                                while (rsetSCHEMES.next()) {
                                    
                                    com.afrisoftech.reports.StatementPatientInvoicePdf policy = new com.afrisoftech.reports.StatementPatientInvoicePdf();

                                    policy.StatementPatientInvoicePdf(connectDB, visitIDTxt.getText().trim(), invoiceNo ,rsetSCHEMES.getString(1).trim() );

//                                    com.afrisoftech.reports.DetailedPatientFinalInvpdf policy = new com.afrisoftech.reports.DetailedPatientFinalInvpdf();
//                                    policy.DetailedPatientFinalInvpdf(connectDB, visitIDTxt.getText().trim(), invoiceNo, rsetSCHEMES.getString(1).trim());
                                }
                            }

                            //Terminate admission session and check-out patient from ward
//                            java.sql.PreparedStatement pstmt12d = connectDB.prepareStatement("UPDATE hp_admission SET check_out = true,discharged_by = '" + UserName + "' WHERE patient_no = '" + this.patientNumberTxt.getText() + "' AND visit_id = '" + visitIDTxt.getText() + "'");
//                            pstmt12d.executeUpdate();
                            java.sql.Statement ps1 = connectDB.createStatement();
                            java.sql.ResultSet rst1 = ps1.executeQuery("SELECT discharge_no FROM hp_patient_discharge WHERE inv_no = '" + invoiceNo + "'");
                            while (rst1.next()) {
                                rst1.getObject(1).toString();
                                disno = rst1.getObject(1).toString();
                                //                            UserName = rst1.getObject(2).toString();
                            }

//                            com.afrisoftech.reports.FinalInPatientInvSummPdf policy = new com.afrisoftech.reports.FinalInPatientInvSummPdf();
//                            policy.FinalInPatientInvSummPdf(connectDB, invoiceNo);

                            com.afrisoftech.reports.GatePassPdf policy2 = new com.afrisoftech.reports.GatePassPdf();
                            policy2.GatePassPdf(connectDB, disno, invoiceNo, patientNumberTxt.getText());

                            // --------------End of Terminate session-------
                            totalDepositRealTxt.setText(java.lang.String.valueOf(com.afrisoftech.lib.unUtelisedDeposit.getBalanceDeposit(connectDB, patientNumberTxt.getText().toString().trim())));
                            nhifCategoryCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '-' UNION SELECT name FROM pb_nssf_rebeats ORDER BY 1"));
                            noRebateRdi.setSelected(true);
                            nhifRebateRdi.setSelected(false);
                            untickAllChk.setSelected(false);
                            tickAllChk.setSelected(false);
                            patientNameTxt.setText("");
                            dmuBalanceTxt.setText("0.00");
                            schemeNumberTxt.setText("");
                            totalBillTxt.setText("");
                            payCashTxt.setText("0.00");
                            commentsTxt.setText("");
                            amount2UtilizeTxt.setText("0.00");
                            for (int k = 0; k < billTable.getRowCount(); k++) {
                                for (int r = 0; r < billTable.getColumnCount(); r++) {
                                    billTable.getModel().setValueAt(null, k, r);
                                }
                            }
                            totalBillTxt.setText("");
                            //            jComboBox1.setSelectedItem(null);
                            //  jComboBox2.setSelectedItem(null);
                        } catch (java.sql.SQLException sq) {
                            sq.printStackTrace();
                            System.out.println(sq.getMessage());
                            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                            try {
                                connectDB.rollback();
                            } catch (java.sql.SQLException sql) {
                                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                            }

                        }
                    }
                }

            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "The bill cannot be finalised with a pending balance. -- <Net Amount>");
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "You MUST enter the card number.");
        }

    }//GEN-LAST:event_postFinalBillBtnActionPerformed

    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        searchButton21Clicked(); // Add your handling code here:
    }//GEN-LAST:event_searchButton1ActionPerformed
    private void searchButton21Clicked() {

        System.out.println("Showing dialog");

        java.awt.Point point = this.patientNumberTxt.getLocationOnScreen();

        jSearchDialog21.setSize(600, 200);

        jSearchDialog21.setLocation(point);

        jSearchDialog21.setVisible(true);
    }
    private void jTextField14ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTextField14ComponentShown
// Add your handling code here:
    }//GEN-LAST:event_jTextField14ComponentShown

    private void outpatientSchemeTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_outpatientSchemeTableKeyReleased
        if (outpatientSchemeTable.getModel().getValueAt(outpatientSchemeTable.getSelectedRow(), 2) != null) {
            if (outpatientSchemeTable.getSelectedColumn() == outpatientSchemeTable.getSelectedColumn()) {
                float qty = java.lang.Float.parseFloat(outpatientSchemeTable.getValueAt(outpatientSchemeTable.getSelectedRow(), 2).toString());
                float price = java.lang.Float.parseFloat(outpatientSchemeTable.getValueAt(outpatientSchemeTable.getSelectedRow(), 3).toString());
                float Disc = java.lang.Float.parseFloat(outpatientSchemeTable.getValueAt(outpatientSchemeTable.getSelectedRow(), 4).toString());

                float total = qty * price;
                float totalDisc = (qty * price) * Disc / 100;
                outpatientSchemeTable.setValueAt(total, outpatientSchemeTable.getSelectedRow(), 6);
                outpatientSchemeTable.setValueAt(totalDisc, outpatientSchemeTable.getSelectedRow(), 5);
                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(outpatientSchemeTable, 6);
                double totalSumDisc = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(outpatientSchemeTable, 5);
                // jTextField13.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSumDisc));
                //  jTextField3.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                //  jTextField15.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum-totalSumDisc));
                jTextField13.setText(java.lang.String.valueOf(totalSumDisc));
                jTextField3.setText(java.lang.String.valueOf(totalSum));
                jTextField15.setText(java.lang.String.valueOf(totalSum - totalSumDisc));

            }

        }

        // Add your handling code here:
    }//GEN-LAST:event_outpatientSchemeTableKeyReleased
    public void tableModelTableChanged() {
        System.out.println("Calculating totals for table 11 and 2.");
        //        double resFloat = 0.00;
        double resFloat = 0.00;

        for (int i = 0; i < outpatientSchemeTable.getRowCount(); i++) {

            if (outpatientSchemeTable.getModel().getValueAt(i, 0) != null) {

                resFloat = resFloat + Double.parseDouble(outpatientSchemeTable.getModel().getValueAt(i, 3).toString());

                jTextField3.setText(java.lang.String.valueOf(resFloat));

            } else {
                resFloat = resFloat + Double.parseDouble(outpatientSchemeTable.getModel().getValueAt(i, 3).toString());

                jTextField3.setText(java.lang.String.valueOf(resFloat));

            }
        }
        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        //jTextField11.setText("");
        outpatientSchemeTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0), outpatientSchemeTable.getSelectedRow(), 1);
        outpatientSchemeTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1), outpatientSchemeTable.getSelectedRow(), 3);
        outpatientSchemeTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 2), outpatientSchemeTable.getSelectedRow(), 7);
        outpatientSchemeTable.setValueAt(0, outpatientSchemeTable.getSelectedRow(), 4);

        jSearchDialog.dispose();
        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(outpatientSchemeTable, 6);
        double totalSumDisc = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(outpatientSchemeTable, 5);
        jTextField13.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSumDisc));
        jTextField3.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
        jTextField15.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum - totalSumDisc));

// Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        jSearchDialog.dispose();           // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate
        if (jTextField111.getCaretPosition() < 0) {

            System.out.println("Nothing");
        } else {
            jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select service_type,rate as price,gl_account as gl_code FROM pb_operating_parameters WHERE service_type ILIKE '" + jTextField111.getText() + "%'  order by service_type"));

            jSearchTable.setShowHorizontalLines(false);
            jSearchScrollPane.setViewportView(jSearchTable);

        }  // Add your handling code here:
    }//GEN-LAST:event_jTextField111CaretUpdate

    private void outpatientSchemeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_outpatientSchemeTableMouseClicked
        if (outpatientSchemeTable.getSelectedColumn() == 1) {

            this.cmboxMouseClicked();
        }          // Add your handling code here:
    }//GEN-LAST:event_outpatientSchemeTableMouseClicked
    private void cmboxMouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = outpatientSchemeTable.getLocationOnScreen();
        jSearchDialog.setSize(400, 200);
        jSearchDialog.setLocation(point);
        jSearchDialog.setVisible(true);
    }
    private void outPatientSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_outPatientSearchTableMouseClicked
        this.jTextField13.setText("0.00");
        //  this.jTextField5.setText("0.00");
        this.jTextField15.setText("0.00");
        String receiptNo = null;
        receiptNo = outPatientSearchTable.getValueAt(outPatientSearchTable.getSelectedRow(), 1).toString();
        if (outPatientSearchTable.getSelectedColumn() == 1) {
            this.jTextField9.setText(receiptNo);
            try {

                java.sql.Statement stmt = connectDB.createStatement();
                java.sql.ResultSet rset = stmt.executeQuery("select (second_name||' '||first_name||' '||last_name) as name,account_no AS staff_no,description AS description from hp_patient_register  where patient_no ='" + jTextField9.getText() + "'");
                while (rset.next()) {
                    // jComboBox6.setSelectedItem(rset.getObject(1).toString());
                    jTextField1.setText(rset.getObject(1).toString());
                    //jTextField2.setText(rset.getObject(2).toString());
                    jTextField7.setText(rset.getObject(3).toString());

                }
            } catch (java.sql.SQLException sqe) {
                sqe.printStackTrace();
                System.out.println("Select not successful");
            }
            /*
             * try {
             *
             * java.sql.Statement stmt = connectDB.createStatement();
             * java.sql.ResultSet rset = stmt.executeQuery("select payer from
             * hp_patient_register where patient_no
             * ='"+jTextField9.getText()+"'"); while (rset.next()){ //
             * jComboBox6.setSelectedItem(rset.getObject(1).toString());
             * jTextField4.setText(rset.getObject(1).toString());
             *
             *
             * }
             * } catch (java.sql.SQLException sqe) { sqe.printStackTrace();
             * System.out.println("Select not successful"); }
             */
            String Code = null;
            try {

                java.sql.Statement pss1 = connectDB.createStatement();
                java.sql.ResultSet rset11 = pss1.executeQuery("select account_no,payer_name from ac_schemes where scheme_name = '" + jTextField7.getText() + "'");
                while (rset11.next()) {
                    Code = dbObject.getDBObject(rset11.getObject(1), "-");

                    jTextField8.setText(Code);
                    jTextField4.setText(rset11.getObject(2).toString());
                }
            } catch (java.sql.SQLException sqe) {
                sqe.printStackTrace();
                System.out.println("select not successful");
            }

            try {

                java.sql.Statement pss11 = connectDB.createStatement();
                java.sql.ResultSet rss11 = pss11.executeQuery("select sum(amount) from patient_bill_scheme where patient_no = '" + jTextField9.getText() + "' and date_prescribed = '" + outPatientSearchTable.getValueAt(outPatientSearchTable.getSelectedRow(), 0) + "'");
                while (rss11.next()) {
                    // jTextField2.setText(rss1.getObject(1).toString());
                    jTextField3.setText(rss11.getObject(1).toString());
                    jTextField15.setText(rss11.getObject(1).toString());
                }
            } catch (java.sql.SQLException sqlex) {
                javax.swing.JOptionPane.showMessageDialog(this, sqlex.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

                System.out.println(sqlex.getMessage());
            }

            this.populateTable1(jTextField9.getText());
            //  jSearchTable2MouseClicked(evt);
            // this.populateTable1(jTextField9.getText());
        } else {
        }

        // Add your handling code here:
    }//GEN-LAST:event_outPatientSearchTableMouseClicked

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        this.jTextField3.setText("");
        for (int k = 0; k < outPatientSearchTable.getRowCount(); k++) {
            for (int r = 0; r < outPatientSearchTable.getColumnCount(); r++) {
                outPatientSearchTable.getModel().setValueAt(null, k, r);
            }
        }

        for (int k = 0; k < outpatientSchemeTable.getRowCount(); k++) {
            for (int r = 0; r < outpatientSchemeTable.getColumnCount(); r++) {
                outpatientSchemeTable.getModel().setValueAt(null, k, r);
            }
        }
        //       this.jComboBox1.setSelectedItem(null);
        //       this.jTextField3.setText("");
        int i = 0;
        int j = 0;
        try {
            java.sql.Statement stmt = connectDB.createStatement();

            java.sql.ResultSet rset = stmt.executeQuery("SELECT count(patient_no) FROM op_unfinalised_inv_scheme WHERE trans_date between '" + datePicker1.getDate().toString() + "' and '" + datePicker3.getDate().toString() + "'");

            while (rset.next()) {
                j = rset.getInt(1);
            }
            if (j > 0) {
                java.sql.Statement stmtTable1 = connectDB.createStatement();

                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select trans_date,patient_no,description,sum(amount) FROM op_unfinalised_inv_scheme WHERE trans_date between '" + datePicker1.getDate().toString() + "' and '" + datePicker3.getDate().toString() + "' group by trans_date,patient_no,description");

                while (rsetTable1.next()) {

                    System.out.println("Working at table row " + i);
                    outPatientSearchTable.setValueAt(rsetTable1.getObject(1), i, 0);
                    outPatientSearchTable.setValueAt(rsetTable1.getObject(2), i, 1);
                    outPatientSearchTable.setValueAt(rsetTable1.getObject(3), i, 2);
                    outPatientSearchTable.setValueAt(rsetTable1.getObject(4), i, 3);
                    // jTable1.setValueAt(rsetTable1.getObject(5), i, 4);

                    i++;

                    //                i = i + i;
                    //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                }
            }

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        jTextField8.setText("");

        //  this.populateTable1(jTextField9.getText());        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void dispose11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispose11ActionPerformed
        jSearchDialog11.dispose(); // Add your handling code here:
    }//GEN-LAST:event_dispose11ActionPerformed

    private void jSearchTable11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable11MouseClicked
        jTextField7.setText(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 1).toString());
        jTextField4.setText(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 2).toString());
        jTextField8.setText(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 0).toString());

        jSearchDialog11.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable11MouseClicked

    private void searchButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton2ActionPerformed
        searchButton11aClicked();         // Add your handling code here:
    }//GEN-LAST:event_searchButton2ActionPerformed

    private void jTextField1111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1111CaretUpdate
        if (jTextField1111.getCaretPosition() < 0) {

            System.out.println("Nothing");
        } else {
            jSearchTable11.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT account_no,scheme_name,payer_name from ac_schemes where scheme_name ILIKE '" + jTextField1111.getText() + "%' order by scheme_name"));

            jSearchTable11.setShowHorizontalLines(false);
            jSearchScrollPane11.setViewportView(jSearchTable11);

        }         // Add your handling code here:
    }//GEN-LAST:event_jTextField1111CaretUpdate
    private void searchButton11aClicked() {

        System.out.println("Showing dialog");

        jSearchDialog11.dispose();
        java.awt.Point point = this.jTextField7.getLocationOnScreen();

        jSearchDialog11.setSize(350, 200);

        jSearchDialog11.setLocation(point);
        jSearchDialog11.setVisible(true);
    }

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        int rows2Delete = outpatientSchemeTable.getSelectedRowCount();

        int[] selectedRows = outpatientSchemeTable.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) outpatientSchemeTable.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) outpatientSchemeTable.getModel();

                defTableModel.removeRow(outpatientSchemeTable.getSelectedRow());
            }
        }
        // double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable1, 3);
        //jTextField3.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(outpatientSchemeTable, 6);
        double totalSumDisc = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(outpatientSchemeTable, 5);
        jTextField13.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSumDisc));
        jTextField3.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
        jTextField15.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum - totalSumDisc));

        // Add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchButton2Clicked();        // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed
    private void searchButton2Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.jTextField9.getLocationOnScreen();

        jSearchDialog2.setSize(400, 200);

        jSearchDialog2.setLocation(point);

        jSearchDialog2.setVisible(true);
    }
    private void jTextField113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField113CaretUpdate
        if (this.jCheckBox3.isSelected()) {
            if (this.jTextField113.getCaretPosition() < 0) {
                System.out.print("Nothing");
            } else {
                jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select patient_no as pat_no,(second_name||' '||first_name||' '||last_name) as name,account_no AS staff_no,description AS description from hp_patient_register  where second_name||' '||first_name||' '||last_name ILIKE '" + jTextField113.getText() + "%' AND pay_mode = 'Scheme' order by second_name"));

                jSearchTable2.setShowHorizontalLines(false);
                jSearchScrollPane2.setViewportView(jSearchTable2);

            }

        } else {

            if (this.jCheckBox1.isSelected()) {
                if (this.jTextField113.getCaretPosition() < 0) {
                    System.out.print("Nothing");
                } else {

                    jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select patient_no as pat_no,(second_name||' '||first_name||' '||last_name) as name,account_no AS staff_no,description AS description from hp_patient_register  where patient_no ILIKE '" + jTextField113.getText() + "%' AND pay_mode = 'Scheme' order by second_name"));

                    jSearchTable2.setShowHorizontalLines(false);
                    jSearchScrollPane2.setViewportView(jSearchTable2);

                }

            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jTextField113CaretUpdate

    private void jSearchTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2MouseClicked

        this.jTextField13.setText("0.00");
        //  this.jTextField5.setText("0.00");
        this.jTextField15.setText("0.00");
        this.jTextField3.setText("");
        for (int k = 0; k < outpatientSchemeTable.getRowCount(); k++) {
            for (int r = 0; r < outpatientSchemeTable.getColumnCount(); r++) {
                outpatientSchemeTable.getModel().setValueAt(null, k, r);
            }
        }

        for (int x = 0; x < schemeInvoicingTable.getRowCount(); x++) {
            for (int y = 0; y < schemeInvoicingTable.getColumnCount(); y++) {
                schemeInvoicingTable.getModel().setValueAt(null, x, y);
            }
        }
        jTextField8.setText("");

        String code = null;

        jTextField1.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
        jTextField9.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0).toString());
        jTextField2.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 2).toString());
        jTextField7.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 3).toString());

        jSearchDialog2.dispose();
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select payer from hp_patient_register where patient_no ='" + jTextField9.getText() + "'");
            while (rset.next()) {
                jTextField4.setText(rset.getObject(1).toString());

            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Insert not successful");
        }

        try {

            java.sql.Statement pss1 = connectDB.createStatement();
            java.sql.ResultSet rset11 = pss1.executeQuery("select account_no from ac_schemes where scheme_name = '" + jTextField7.getText() + "' and payer_name = '" + jTextField4.getText() + "'");
            while (rset11.next()) {
                code = dbObject.getDBObject(rset11.getObject(1), "-");
                jTextField8.setText(code);
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("select not successful");
        }

        try {
            // java.sql.Statement pss = connectDB.createStatement();
            //  java.sql.ResultSet rss = pss.executeQuery("select first_name||' '||second_name||' '||last_name from hp_patient_register where patient_no ='"+jTextField9.getText()+"'");
            // while (rss.next()){
            //     jTextField1.setText(rss.getObject(1).toString());
            //}

            java.sql.Statement pss1 = connectDB.createStatement();
            java.sql.ResultSet rss1 = pss1.executeQuery("select account_no,expiry_date,category from hp_patient_register where patient_no = '" + jTextField9.getText() + "'");
            while (rss1.next()) {
                jTextField2.setText(rss1.getObject(1).toString());
                jTextField5.setText(rss1.getObject(2).toString());
                jTextField6.setText(rss1.getObject(3).toString());
            }

            java.sql.Statement pss11 = connectDB.createStatement();
            java.sql.ResultSet rss11 = pss11.executeQuery("select sum(amount) from patient_bill where patient_no = '" + jTextField9.getText() + "' and date_prescribed = '" + datePicker1.getDate() + "'");
            while (rss11.next()) {
                // jTextField2.setText(rss1.getObject(1).toString());
                jTextField3.setText(rss11.getObject(1).toString());
                jTextField15.setText(rss11.getObject(1).toString());
            }
        } catch (java.sql.SQLException sqlex) {
            javax.swing.JOptionPane.showMessageDialog(this, sqlex.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        /*
         * try { crset2.setCommand("select date::date,service,dosage,debit FROM
         * hp_patient_card WHERE patient_no ='"+jComboBox2.getSelectedItem()+"'
         * and paid = false AND payment_mode = 'Scheme' AND scheme
         * ='"+jComboBox1.getSelectedItem()+"' and debit >0");
         *
         * crset2.setConnectionSource(pConnDB);
         *
         * crset2.execute();
         *
         * // crset2.setExecuteOnLoad(true); jTable1.setModel(new
         * org.netbeans.lib.sql.models.TableModel(crset2, new
         * org.netbeans.lib.sql.models.TableModel.Column[] { new
         * org.netbeans.lib.sql.models.TableModel.Column("date", "Date", false),
         * new org.netbeans.lib.sql.models.TableModel.Column("service",
         * "Description", false), new
         * org.netbeans.lib.sql.models.TableModel.Column("dosage", "Quantity",
         * false), new org.netbeans.lib.sql.models.TableModel.Column("debit",
         * "Amount KShs.", false)
         *
         * }));
         *
         * // tableModel = jTable1.getModel();
         *
         * jScrollPane1.setViewportView(jTable1);
         *
         * } catch(java.sql.SQLException sqlex){
         * javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error
         * Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
         *
         * System.out.println(sqlex.getMessage()); }
         */

        this.populateTable1(jTextField9.getText());
        /*
         * try { crset2.setCommand("select trans_date::date as
         * date,service,quantity,amount,gl_code FROM hp_patient_billing WHERE
         * patient_no ='"+jTextField9.getText()+"' and paid = false AND
         * payment_mode = 'Scheme' union select date_prescribed as
         * date,description as service,quantity,amount,gl_code from hp_pharmacy
         * WHERE patient_no ='"+jTextField9.getText()+"' and paid = false");
         *
         * crset2.setConnectionSource(pConnDB);
         *
         * crset2.execute();
         *
         * // crset2.setExecuteOnLoad(true); jTable1.setModel(new
         * org.netbeans.lib.sql.models.TableModel(crset2, new
         * org.netbeans.lib.sql.models.TableModel.Column[] { new
         * org.netbeans.lib.sql.models.TableModel.Column("date", "Date", false),
         * new org.netbeans.lib.sql.models.TableModel.Column("service",
         * "Description", false), new
         * org.netbeans.lib.sql.models.TableModel.Column("quantity", "Quantity",
         * false), new org.netbeans.lib.sql.models.TableModel.Column("amount",
         * "Amount KShs.", false), new
         * org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl Code",
         * false)
         *
         * }));
         *
         * // tableModel = jTable1.getModel();
         *
         * jScrollPane1.setViewportView(jTable1);
         *
         * } catch(java.sql.SQLException sqlex){
         * javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error
         * Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
         *
         * System.out.println(sqlex.getMessage()); }
         */

        jSearchDialog2.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable2MouseClicked
    private void populateTable1(java.lang.String patient_no) {
        for (int k = 0; k < outpatientSchemeTable.getRowCount(); k++) {
            for (int r = 0; r < outpatientSchemeTable.getColumnCount(); r++) {
                outpatientSchemeTable.getModel().setValueAt(null, k, r);
            }
        }
        //       this.jComboBox1.setSelectedItem(null);
        //       this.jTextField3.setText("");
        int i = 0;
        int j = 0;
        try {
            java.sql.Statement stmt = connectDB.createStatement();

            java.sql.ResultSet rset = stmt.executeQuery("SELECT count(patient_name) FROM patient_bill_scheme WHERE patient_no = '" + patient_no + "'");

            while (rset.next()) {
                j = rset.getInt(1);
            }
            if (j > 0) {
                java.sql.Statement stmtTable1 = connectDB.createStatement();

                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select date_prescribed::date as date,description,quantity,sum(amount),gl_code,sum(amount/quantity) FROM patient_bill_scheme WHERE patient_no ='" + jTextField9.getText() + "' and date_prescribed = '" + outPatientSearchTable.getValueAt(outPatientSearchTable.getSelectedRow(), 0) + "' GROUP BY date_prescribed::date,description,quantity,gl_code");

                while (rsetTable1.next()) {

                    System.out.println("Working at table row " + i);
                    outpatientSchemeTable.setValueAt(rsetTable1.getObject(1), i, 0);
                    outpatientSchemeTable.setValueAt(rsetTable1.getObject(2), i, 1);
                    outpatientSchemeTable.setValueAt(rsetTable1.getObject(3), i, 2);
                    outpatientSchemeTable.setValueAt(rsetTable1.getObject(6), i, 3);
                    outpatientSchemeTable.setValueAt(rsetTable1.getObject(4), i, 6);
                    outpatientSchemeTable.setValueAt(rsetTable1.getObject(5), i, 7);
                    outpatientSchemeTable.setValueAt(0.0, i, 4);
                    i++;

                    //                i = i + i;
                    //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                }
            }

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

    }

    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed
        jSearchDialog2.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton52ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //       this.getContentPane().removeAll();
        //       this.initComponents();
        // Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed
    //    private void cmbox2ActionPerformed(java.awt.event.ActionEvent evt){
    /*
     * java.lang.Object selectedGuaran = cmbox2.getSelectedItem(); int i =
     * jTable1.getSelectedRow();
     *
     * if (selectedGuaran != null) {
     *
     * try { java.sql.Statement pstmt = connectDB.createStatement();
     * java.sql.ResultSet rs = pstmt.executeQuery("select item_code,units from
     * st_stock_item where description = '"+selectedGuaran+"'"); while
     * (rs.next()) jTable1.setValueAt(rs.getObject(1),i,1);
     * jTable1.setValueAt(rs.getObject(2),i,2); } catch(java.sql.SQLException
     * sqlex){ System.out.println(sqlex.getMessage());
     *
     * }
     */
    //}
    //   }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        setVisible(false); // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        java.util.Date periodFrom = null;
        java.util.Date periodTo = null;

        java.sql.Savepoint registerSavePoint = null;
        try {
            connectDB.setAutoCommit(false);
            registerSavePoint = connectDB.setSavepoint("registration");
        } catch (java.sql.SQLException ex) {
            ex.printStackTrace();
        }

        try {

            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + datePicker3.getDate() + "' BETWEEN period_from AND period_to");
            while (rsetf.next()) {
                periodFrom = rsetf.getDate(1);
                periodTo = rsetf.getDate(2);
            }

            if (datePicker1.getDate().before(periodFrom) || datePicker3.getDate().after(periodTo)) {
                javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            } else {
                if (outpatientSchemeTable.isEditing()) {
                    outpatientSchemeTable.getCellEditor().stopCellEditing();
                }
                java.util.Calendar calendar = java.util.Calendar.getInstance();

                long dateNow = calendar.getTimeInMillis();

                java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

                System.out.println(datenowSql1.toString());

                java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

                System.out.println(datenowSql.toString());

                String receiptNo = null;
                String actCode = null;
                String glCode = null;
                String bankAcc = null;
                String glCode1 = null;
                String bankAcc1 = null;
                String transNo = null;
                String payMode = null;
                String patCat = null;
                String patientAcc = null;
                String cardNo = null;
                String scheme = null;
                String cardName = null;
                String isurer = null;
                String expDate = null;
                String staffNo = null;
                String actNames = null;
                String user = null;
                String actNames1 = null;
                String actCode1 = null;
                String invoiceNo = null;

                double credits = java.lang.Double.parseDouble(jTextField15.getText());

                java.sql.Statement stm1 = connectDB.createStatement();
                if (jTextField12.getText().equalsIgnoreCase("-")) {
                    java.sql.Statement pss1 = connectDB.createStatement();
                    java.sql.ResultSet rss1 = pss1.executeQuery("select 'O'||(nextval('pinvoice_no_seq'))");
                    while (rss1.next()) {
                        invoiceNo = rss1.getObject(1).toString();
                    }
                } else {
                    invoiceNo = jTextField12.getText();
                }

                java.sql.Statement pss12 = connectDB.createStatement();
                java.sql.ResultSet rsts11 = pss12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                while (rsts11.next()) {
                    actCode = rsts11.getObject(1).toString();
                    actNames = rsts11.getObject(2).toString();
                }

                java.sql.Statement pss = connectDB.createStatement();
                java.sql.ResultSet rss = pss.executeQuery("select nextval('transaction_no_seq')");

                while (rss.next()) {
                    transNo = rss.getObject(1).toString();
                }
                java.sql.Statement pss11 = connectDB.createStatement();
                java.sql.ResultSet rsts1 = pss11.executeQuery("SELECT gl_code,gl_name FROM ac_schemes where account_no =  '" + jTextField8.getText() + "'");
                while (rsts1.next()) {
                    actCode1 = rsts1.getObject(1).toString();
                    actNames1 = rsts1.getObject(2).toString();
                }
                java.sql.Statement pss111 = connectDB.createStatement();
                java.sql.ResultSet rsts111 = pss111.executeQuery("select current_user");
                while (rsts111.next()) {
                    user = rsts111.getObject(1).toString();
                }
                for (int i = 0; i < outpatientSchemeTable.getRowCount(); i++) {

                    if (outpatientSchemeTable.getModel().getValueAt(i, 0) != null) {

                        java.sql.Statement pssq = connectDB.createStatement();
                        java.sql.ResultSet rse121 = pssq.executeQuery("select main_service from patient_bill where description = '" + outpatientSchemeTable.getModel().getValueAt(i, 1).toString() + "'");

                        while (rse121.next()) {
                            glCode = dbObject.getDBObject(rse121.getObject(1), "-");
                        }
                        /*
                         * java.sql.PreparedStatement pstmt =
                         * connectDB.prepareStatement("insert into
                         * hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?,
                         * ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                         * pstmt.setString(1,jTextField9.getText());
                         * pstmt.setObject(2,jTable1.getValueAt(i,1).toString());
                         * pstmt.setString(3,""); pstmt.setString(4,"Scheme");
                         * pstmt.setString(5,transNo);
                         * pstmt.setString(7,jTextField7.getText());
                         * pstmt.setString(6,""); pstmt.setString(8,"");
                         * pstmt.setString(9,jTextField4.getText());
                         * pstmt.setString(10,jTextField5.getText());
                         * pstmt.setString(11,"");
                         * pstmt.setDouble(12,java.lang.Double.valueOf(jTable1.getValueAt(i,3).toString()));
                         * pstmt.setDouble(13,0.00);
                         * pstmt.setDate(14,com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(jTable1.getValueAt(i,0).toString())));
                         * pstmt.setObject(15,actCode);
                         * pstmt.setString(16,glCode);
                         * pstmt.setDouble(17,java.lang.Double.valueOf(jTable1.getValueAt(i,2).toString()));
                         * pstmt.setObject(18,jTextField2.getText());
                         * pstmt.setBoolean(19,true);
                         * pstmt.setString(20,"Receipts");
                         * pstmt.setBoolean(21,true);
                         * pstmt.setString(22,actNames);
                         * pstmt.setString(23,invoiceNo);
                         * pstmt.setString(24,user); pstmt.setString(25,"");
                         * pstmt.setString(26,""); pstmt.executeUpdate();
                         *
                         *
                         * java.sql.PreparedStatement pstmt2 =
                         * connectDB.prepareStatement("insert into ac_ledger
                         * values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
                         * ?, ?, ?,?,?,?)");
                         * pstmt2.setObject(1,jTable1.getValueAt(i,4).toString());
                         * pstmt2.setObject(2,glCode);
                         * pstmt2.setString(3,jTextField9.getText());
                         * pstmt2.setString(4,jTextField1.getText());
                         * pstmt2.setString(5,""); pstmt2.setString(6,cardNo);
                         * pstmt2.setString(7,cardName);
                         * pstmt2.setString(10,"Scheme");
                         * pstmt2.setString(9,isurer); pstmt2.setString(8,"OP");
                         * pstmt2.setString(11,""); pstmt2.setString(12,"");
                         * pstmt2.setString(13,"");
                         * pstmt2.setString(14,jTable1.getValueAt(i,1).toString());
                         * pstmt2.setString(15,"Revenue");
                         * pstmt2.setDouble(16,0.00);
                         * pstmt2.setDouble(17,java.lang.Double.valueOf(jTable1.getValueAt(i,3).toString()));
                         * pstmt2.setDate(18,com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(jTable1.getValueAt(i,0).toString())));
                         * pstmt2.setString(19,transNo);
                         * pstmt2.setBoolean(20,false);
                         * pstmt2.setBoolean(21,false);
                         * pstmt2.setBoolean(22,false);
                         * pstmt2.setString(23,user); pstmt2.executeUpdate();
                         *
                         */
                        java.sql.PreparedStatement pstmt22a = connectDB.prepareStatement("UPDATE hp_patient_card set paid = true,invoice_no = '" + invoiceNo + "' WHERE patient_no = '" + jTextField9.getText() + "' and date::date = '" + outpatientSchemeTable.getValueAt(i, 0).toString() + "' and paid = false");
                        pstmt22a.executeUpdate();
                        java.sql.PreparedStatement pstmt22 = connectDB.prepareStatement("UPDATE hp_patient_billing set paid = true WHERE patient_no = '" + jTextField9.getText() + "' and trans_date = '" + outpatientSchemeTable.getValueAt(i, 0).toString() + "' and service = '" + outpatientSchemeTable.getValueAt(i, 1).toString() + "'");
                        pstmt22.executeUpdate();
                        java.sql.PreparedStatement pstmt21 = connectDB.prepareStatement("UPDATE hp_pharmacy set paid = true WHERE patient_no = '" + jTextField9.getText() + "'  and date_prescribed = '" + outpatientSchemeTable.getValueAt(i, 0).toString() + "' and description = '" + outpatientSchemeTable.getValueAt(i, 1).toString() + "'");
                        pstmt21.executeUpdate();
                        java.sql.PreparedStatement pstmt11 = connectDB.prepareStatement("UPDATE ac_doctors_ledger SET pat_inv = '" + invoiceNo + "' where patient_no = '" + this.jTextField9.getText() + "' and input_date = '" + outpatientSchemeTable.getValueAt(i, 0).toString() + "' AND pat_inv not ilike 'O%'");
                        pstmt11.executeUpdate();

                    }
                }

                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into ac_debtors values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                pstmt.setObject(1, actCode1);
                pstmt.setString(2, jTextField4.getText());
                pstmt.setString(3, jTextField1.getText());
                pstmt.setString(4, jTextField9.getText());
                pstmt.setString(5, jTextField7.getText());
                pstmt.setString(6, "");
                if (this.jTextField8.getText().equals(null) || this.jTextField8.getText().equals("-")) {
                    javax.swing.JOptionPane.showMessageDialog(this, "Account NO. MISSING !!!", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                } else {
                    pstmt.setString(7, jTextField8.getText());
                }
                pstmt.setString(8, "");
                pstmt.setString(9, "");
                pstmt.setString(10, jTextField2.getText());
                pstmt.setString(11, transNo);
                pstmt.setString(12, "Raise Invoice");
                if (credits > 0) {
                    pstmt.setDouble(13, java.lang.Double.valueOf(jTextField15.getText()));
                } else {
                    pstmt.setDouble(13, credits * -1);
                }
                pstmt.setDouble(14, 0.00);
                pstmt.setObject(15, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(outpatientSchemeTable.getValueAt(0, 0).toString())));
                pstmt.setObject(16, invoiceNo);
                pstmt.setString(17, actNames1);
                pstmt.setBoolean(18, false);
                pstmt.setBoolean(19, false);
                pstmt.setString(20, user);
                pstmt.setString(21, "");
                if (credits > 0) {
                    pstmt.setDouble(22, java.lang.Double.valueOf(jTextField15.getText()));
                } else {
                    pstmt.setDouble(22, credits * -1);
                }
                pstmt.setBoolean(23, false);
                pstmt.setDouble(24, 0.00);
                pstmt.setObject(25, "");
                pstmt.setObject(26, null);
                pstmt.setBoolean(27, false);
                pstmt.setDouble(28, 0.00);
                pstmt.setObject(29, null);
                pstmt.setString(30, "");
                pstmt.setBoolean(31, false);
                pstmt.setDouble(32, 0.00);
                pstmt.setObject(33, null);
                pstmt.setString(34, "");
                pstmt.setString(35, jTextField2.getText());
                pstmt.setString(36, this.opClaimNumberTxt.getText());
                pstmt.executeUpdate();

                java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                pstmt1.setString(1, jTextField9.getText());
                pstmt1.setObject(2, "Invoice");
                pstmt1.setString(3, "");
                pstmt1.setString(4, "Scheme");
                pstmt1.setString(5, transNo);
                pstmt1.setString(7, jTextField7.getText());
                pstmt1.setString(6, "");
                pstmt1.setString(8, "");
                pstmt1.setString(9, jTextField4.getText());
                pstmt1.setObject(10, null);
                pstmt1.setString(11, "");
                if (credits > 0) {
                    pstmt1.setDouble(13, java.lang.Double.valueOf(jTextField15.getText()));
                } else {
                    pstmt1.setDouble(13, credits * -1);

                }
                pstmt1.setDouble(12, 0.00);
                pstmt1.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(outpatientSchemeTable.getValueAt(0, 0).toString())));
                pstmt1.setObject(15, actCode);
                pstmt1.setString(16, glCode);
                pstmt1.setDouble(17, 1);
                pstmt1.setObject(18, jTextField2.getText());
                pstmt1.setBoolean(19, true);
                pstmt1.setString(20, "Receipts");
                pstmt1.setBoolean(21, true);
                pstmt1.setString(22, actNames);
                pstmt1.setString(23, invoiceNo);
                pstmt1.setString(24, user);
                pstmt1.executeUpdate();

                double Disc = java.lang.Double.valueOf(jTextField13.getText());
                if (Disc > 0) {

                    java.sql.Statement stm122x = connectDB.createStatement();
                    java.sql.ResultSet rse122x = stm122x.executeQuery("select code,activity from pb_activity where activity_category ='EDS'");
                    while (rse122x.next()) {

                        discode = rse122x.getObject(1).toString();
                        discglAcc = rse122x.getObject(2).toString();
                    }
                    java.sql.PreparedStatement pstmt1f = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                    pstmt1f.setString(1, jTextField9.getText());
                    pstmt1f.setObject(2, "Discount");
                    pstmt1f.setString(3, "");
                    pstmt1f.setString(4, "Scheme");
                    pstmt1f.setString(5, transNo);
                    pstmt1f.setString(7, jTextField7.getText());
                    pstmt1f.setString(6, "");
                    pstmt1f.setString(8, "");
                    pstmt1f.setString(9, jTextField4.getText());
                    pstmt1f.setObject(10, null);
                    pstmt1f.setString(11, "");
                    pstmt1f.setDouble(13, java.lang.Double.valueOf(jTextField13.getText()));
                    pstmt1f.setDouble(12, 0.00);
                    pstmt1f.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(outpatientSchemeTable.getValueAt(0, 0).toString())));
                    pstmt1f.setObject(15, actCode);
                    pstmt1f.setString(16, glCode);
                    pstmt1f.setDouble(17, 1);
                    pstmt1f.setObject(18, jTextField2.getText());
                    pstmt1f.setBoolean(19, true);
                    pstmt1f.setString(20, "Receipts");
                    pstmt1f.setBoolean(21, true);
                    pstmt1f.setString(22, actNames);
                    pstmt1f.setString(23, invoiceNo);
                    pstmt1f.setString(24, user);
                    pstmt1f.executeUpdate();

                    java.sql.PreparedStatement pstmt2v = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
                    pstmt2v.setString(1, discode);
                    pstmt2v.setString(2, discglAcc);
                    pstmt2v.setString(3, jTextField9.getText());
                    pstmt2v.setString(4, jTextField1.getText());
                    pstmt2v.setString(5, "");
                    pstmt2v.setString(6, cardNo);
                    pstmt2v.setString(7, cardName);
                    pstmt2v.setString(8, "OP");
                    pstmt2v.setString(9, isurer);
                    pstmt2v.setString(10, "Scheme");
                    pstmt2v.setString(11, "");
                    pstmt2v.setString(12, "");
                    pstmt2v.setString(13, "");
                    pstmt2v.setString(14, "Discount");
                    pstmt2v.setString(15, "Revenue");
                    pstmt2v.setString(16, jTextField13.getText());
                    pstmt2v.setDouble(17, 0.00);
                    pstmt2v.setString(18, outpatientSchemeTable.getValueAt(0, 0).toString());
                    pstmt2v.setString(19, transNo);
                    pstmt2v.setString(20, "false");
                    pstmt2v.setString(21, "false");
                    pstmt2v.setString(22, "false");
                    pstmt2v.setString(23, user);
                    pstmt2v.executeUpdate();
                }
                connectDB.commit();
                connectDB.setAutoCommit(true);

                com.afrisoftech.reports.FinalInvoiceByinvPdf policy = new com.afrisoftech.reports.FinalInvoiceByinvPdf();
                policy.FinalInvoiceByinvPdf(connectDB, invoiceNo, invoiceNo, opClaimNumberTxt.getText(), opCardNumberTxt.getText());

                javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully \n Inv No. is: " + invoiceNo + "", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                jTextField1.setText("");
                jTextField2.setText("");
                jTextField3.setText("");
                for (int k = 0; k < outpatientSchemeTable.getRowCount(); k++) {
                    for (int r = 0; r < outpatientSchemeTable.getColumnCount(); r++) {
                        outpatientSchemeTable.getModel().setValueAt(null, k, r);
                    }
                }
                jTextField3.setText("");
                jTextField12.setText("-");
                jCheckBox2ActionPerformed(evt);
            }
        } catch (java.sql.SQLException sq) {

            try {
                connectDB.rollback(registerSavePoint);
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }
        //}
        // }// Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void nhifRebateTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_nhifRebateTxtCaretUpdate
        /*
         * float noofDays = 0; float balance =
         * java.lang.Float.parseFloat(jTextField18.getText()); float nhif = 0;
         * float Rate = 0; java.util.Date admDate = datePicker12.getDate();
         * java.util.Date disDate = datePicker11.getDate();
         *
         *
         * try { double net = 0.00; // noofDays = disDate.getDate() -
         * admDate.getDate(); double Bill =
         * java.lang.Double.valueOf(jTextField31.getText()); double deposits =
         * java.lang.Double.valueOf(jTextField10.getText()); // double net =
         * java.lang.Double.valueOf(jTextField18.getText()); nhif =
         * java.lang.Float.parseFloat(jTextField22.getText()); //
         * jTextField22.setText(java.lang.String.valueOf(nhif));
         * jTextField23.setText(java.lang.String.valueOf(Bill-(nhif+deposits)));
         * double nhifDiff = Bill-(nhif+deposits);
         *
         *
         * if(nhifDiff > 0){ net = Bill-(nhif+deposits+nhifDiff); }else{ net =
         * Bill-(nhif+deposits+nhifDiff); } // net =
         * (Bill-nhif-deposits)+nhifDiff*-1;
         * //jTextField18.setText(java.lang.String.valueOf((Bill-nhif-deposits)+nhifDiff*-1));
         * //} java.sql.Statement pss111xx = connectDB.createStatement();
         * java.sql.ResultSet rss111xx = pss111xx.executeQuery("select
         * ROUND('"+nhifDiff+"',2)::numeric"); while (rss111xx.next()){
         * jTextField23.setText(java.lang.String.valueOf(rss111xx.getDouble(1)));
         * } java.sql.Statement pss111x = connectDB.createStatement();
         * java.sql.ResultSet rss111x = pss111x.executeQuery("select
         * ROUND('"+net+"',2)::numeric"); while (rss111x.next()){
         * jTextField18.setText(java.lang.String.valueOf(rss111x.getDouble(1)));
         * } } catch(java.sql.SQLException sqlex){
         * javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error
         * Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
         *
         * System.out.println(sqlex.getMessage()); }
         */
        // TODO add your handling code here:
    }//GEN-LAST:event_nhifRebateTxtCaretUpdate

    private void calculateNhifCtegory() {
        float noofDays = 0;
        double balance = java.lang.Double.parseDouble(netAmountTxt.getText());
        float nhif = 0;
        float Rate = 0;
        double patientBillBefore = 0.00;
        double patientBillAfter = 0.00;
        double patientBillNHIF = 0.00;
        double package_amount = 0.00;
        boolean computeDays = false;
        java.util.Date admDate = admissionDatePicker.getDate();
        java.util.Date disDate = dischargeDatePicker.getDate();

        //Compute bill before card maturity date        
        try {
            java.sql.PreparedStatement billBeforeCardMaturity = connectDB.prepareStatement("SELECT ROUND(sum(debit)) FROM hp_patient_card where patient_no = ? and visit_id = ? and date between '" + this.admissionDatePicker.getDate() + "'::date and '" + this.cardMaturityDatePicker.getDate() + "'::date - 1");
            billBeforeCardMaturity.setString(1, patientNumberTxt.getText());
            billBeforeCardMaturity.setString(2, visitIDTxt.getText());
            java.sql.ResultSet rsetBill = billBeforeCardMaturity.executeQuery();
            while (rsetBill.next()) {
                patientBillBefore = Math.round(rsetBill.getDouble(1));
            }
            java.sql.PreparedStatement billAfterCardMaturity = connectDB.prepareStatement("SELECT ROUND(sum(debit)) FROM hp_patient_card where patient_no = ? and visit_id = ? and date between '" + this.dischargeDatePicker.getDate() + "'::date + 1 and '" + this.checkoutDatePicker.getDate() + "'::date");
            billAfterCardMaturity.setString(1, patientNumberTxt.getText());
            billAfterCardMaturity.setString(2, visitIDTxt.getText());
            java.sql.ResultSet rsetBill2 = billAfterCardMaturity.executeQuery();
            while (rsetBill2.next()) {
                patientBillAfter = Math.round(rsetBill2.getDouble(1));
            }

            java.sql.PreparedStatement billCoveredbyNHIF = connectDB.prepareStatement("SELECT ROUND(sum(debit)) FROM hp_patient_card where patient_no = ? and visit_id = ? and date between '" + this.cardMaturityDatePicker.getDate() + "'::date and '" + this.dischargeDatePicker.getDate() + "'::date");
            billCoveredbyNHIF.setString(1, patientNumberTxt.getText());
            billCoveredbyNHIF.setString(2, visitIDTxt.getText());
            java.sql.ResultSet rsetBillNHIF = billCoveredbyNHIF.executeQuery();
            while (rsetBillNHIF.next()) {
                patientBillNHIF = Math.round(rsetBillNHIF.getDouble(1));
            }
            if (java.lang.Double.valueOf(payCashTxt.getText()) > 0) {
            } else {
                this.billbeforeCardMaturityTxt.setText(String.valueOf((patientBillBefore)));
                this.billAfterClinicalDischargeTxt.setText(String.valueOf((patientBillAfter)));
            }
            java.sql.Statement pss11 = connectDB.createStatement();
            java.sql.ResultSet rss11 = pss11.executeQuery("SELECT ROUND(rate),compute_days,ROUND(package_amount) FROM pb_nssf_rebeats WHERE name ILIKE '" + nhifCategoryCmbx.getSelectedItem().toString() + "'");
            while (rss11.next()) {
                Rate = rss11.getFloat(1);
                computeDays = rss11.getBoolean(2);
                package_amount = rss11.getDouble(3);
            }

            java.sql.Statement pssdiff = connectDB.createStatement();
            java.sql.ResultSet rss111diff = pssdiff.executeQuery("select ('" + admissionDatePicker.getDate() + "'::date - '" + cardMaturityDatePicker.getDate() + "'::date)");
            ////            java.sql.ResultSet rss111 = pss111.executeQuery("select ('" + dischargeDatePicker.getDate() + "'::date - '" + admissionDatePicker.getDate() + "'::date)"); // changed to address card maturity date
            while (rss111diff.next()) {
                noofDaysdiff = rss111diff.getFloat(1);
                //bedDaysTxt.setText(java.lang.String.valueOf(noofDays));
            }
            /*New code**/

            if (noofDaysdiff > 0) {
                java.sql.Statement pss111 = connectDB.createStatement();
                java.sql.ResultSet rss111 = pss111.executeQuery("select ('" + dischargeDatePicker.getDate() + "'::date - '" + admissionDatePicker.getDate() + "'::date)");
                ////            java.sql.ResultSet rss111 = pss111.executeQuery("select ('" + dischargeDatePicker.getDate() + "'::date - '" + admissionDatePicker.getDate() + "'::date)"); // changed to address card maturity date
                while (rss111.next()) {
                    noofDays = rss111.getFloat(1);
                    bedDaysTxt.setText(java.lang.String.valueOf(noofDays));
                }
                /*New code**/
            } else {
                java.sql.Statement pss111 = connectDB.createStatement();
                java.sql.ResultSet rss111 = pss111.executeQuery("select ('" + dischargeDatePicker.getDate() + "'::date - '" + cardMaturityDatePicker.getDate() + "'::date)");
                ////            java.sql.ResultSet rss111 = pss111.executeQuery("select ('" + dischargeDatePicker.getDate() + "'::date - '" + admissionDatePicker.getDate() + "'::date)"); // changed to address card maturity date
                while (rss111.next()) {
                    noofDays = rss111.getFloat(1);
                    bedDaysTxt.setText(java.lang.String.valueOf(noofDays));
                }
            }
            if (typeRenal.contains("Renal")) {
                java.sql.Statement pss111 = connectDB.createStatement();
                java.sql.ResultSet rss111 = pss111.executeQuery("select ('" + dischargeDatePicker.getDate() + "'::date - '" + dialysisDatePicker.getDate() + "'::date)");
                while (rss111.next()) {
                    noofDays = rss111.getFloat(1);
                    bedDaysTxt.setText(java.lang.String.valueOf(noofDays));
                }

            }

        } catch (java.sql.SQLException sqlex) {
            sqlex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlex.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        try {
            double net = 0.00;
            // noofDays = disDate.getDate() - admDate.getDate();
            double Bill = java.lang.Double.valueOf(totalBillTxt.getText());
            double deposits = java.lang.Double.valueOf(totalDepositsTxt.getText());
            double notNHIF = java.lang.Double.valueOf(billAfterClinicalDischargeTxt.getText()) + java.lang.Double.valueOf(billbeforeCardMaturityTxt.getText());
            if (computeDays) {
                nhif = noofDays * Rate;
            } else {
                nhif = Rate;
            }
            nhifRebateTxt.setText(java.lang.String.valueOf(nhif));
            double otherDebtors = java.lang.Double.valueOf(discountAmountTxt.getText().toString().replace(",", ""));
            nhifDiffTxt.setText(java.lang.String.valueOf(java.lang.Double.valueOf(totalBillTxt.getText()) - deposits - otherDebtors - nhif)); //- notNHIF
            double nhifDiff = java.lang.Double.valueOf(totalBillTxt.getText()) - deposits - otherDebtors - nhif; // notNHIF -
            System.out.println("\n\n\n\n\n\n\n\n\n\n\n\n\n\n" + (totalBillTxt.getText()) + " - +" + notNHIF + " - " + nhif);

            net = patientBillBefore + patientBillAfter - deposits;

            java.sql.Statement pss111xx = connectDB.createStatement();
            java.sql.ResultSet rss111xx = pss111xx.executeQuery("select ROUND('" + nhifDiff + "',2)::numeric");
            while (rss111xx.next()) {
                nhifDiffTxt.setText(java.lang.String.valueOf(rss111xx.getDouble(1)));
            }
            java.sql.Statement pss111x = connectDB.createStatement();
            java.sql.ResultSet rss111x = pss111x.executeQuery("select ROUND('" + net + "',2)::numeric");
            while (rss111x.next()) {
                netAmountTxt.setText(java.lang.String.valueOf(rss111x.getDouble(1)));
            }

            if (package_amount > 0.00) {

                if (Double.parseDouble(totalBillTxt.getText()) > package_amount) {
                    netAmountTxt.setText(String.valueOf(package_amount - Double.parseDouble(this.totalDepositsTxt.getText()) - Double.parseDouble(nhifRebateTxt.getText())));
                    nhifDiffTxt.setText(String.valueOf(Double.parseDouble(totalBillTxt.getText()) - package_amount));
                } else {
                    netAmountTxt.setText(String.valueOf(Double.parseDouble(totalBillTxt.getText()) - Double.parseDouble(this.totalDepositsTxt.getText()) - Double.parseDouble(nhifRebateTxt.getText())));
                    //  nhifDiffTxt.setText(String.valueOf(Double.parseDouble(totalBillTxt.getText()) - Double.parseDouble(nhifRebateTxt.getText())));
                    nhifDiffTxt.setText("0.00");
                }

            }

        } catch (java.sql.SQLException sqlex) {
            sqlex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlex.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        grossDueAmt();
        netAmount();
    }
    private void nhifCategoryCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nhifCategoryCmbxActionPerformed
        calculateNhifCtegory();
// TODO add your handling code here:
    }//GEN-LAST:event_nhifCategoryCmbxActionPerformed

    private void tickAllChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tickAllChkActionPerformed
        postFinalBillBtn.setEnabled(true);
        // double orig = java.lang.Double.parseDouble(jTextField3111.getText().toString());
        // double alloc = java.lang.Double.parseDouble(jTextField4.getText().toString());
        for (int k = 0; k < billTable.getColumnCount(); k++) {

            for (int r = 0; r < billTable.getRowCount(); r++) {
                if (billTable.getValueAt(r, 1) != null) {
                    float gross = java.lang.Float.parseFloat(billTable.getValueAt(r, 1).toString());
                    if (gross > 0) {

                        //  float qty = java.lang.Float.parseFloat(jTable11.getValueAt(r, 1).toString());
                        //  float deposit = java.lang.Float.parseFloat(this.jTextField10.getText());
                        // float gross = java.lang.Float.parseFloat(jTable11.getValueAt(k, 5).toString());
                        //gross = gross * qty;
                        // if (gross < balance) {
                        billTable.setValueAt(true, r, 5);
                        billTable.setValueAt(gross, r, 4);
                        // } else {
                        //     jTable11.setValueAt(balance, k, 6);
                        // }

                        // this.tableModelTableChanged();
                        if (billTable.isEditing()) {
                            billTable.getCellEditor().stopCellEditing();
                        }
//
//                          double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 4);
//                          this.netAmountTxt.setText(java.lang.String.valueOf(totalSum));
//                         double amts = java.lang.Double.parseDouble(this.jTextField1.getText());
//                         this.jTextField2.setText(java.lang.String.valueOf(amts - totalSum));
//                         

                    }
                }
            }
        }
        grossDueAmt();
        netAmount();

        // TODO add your handling code here:
    }//GEN-LAST:event_tickAllChkActionPerformed

    private void grossDueAmt() {
        double totalbill = java.lang.Double.parseDouble(this.totalBillTxt.getText());
        double totalotherdebtors = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(schemeInvoicingTable, 2);
        double nhifrebate = java.lang.Double.parseDouble(this.nhifRebateTxt.getText());
        double nhifdiff = java.lang.Double.parseDouble(this.nhifDiffTxt.getText());
        boolean rebateType = false;

        //double grossdue = totalbill - (totalotherdebtors + nhifdiff + nhifrebate);
        double grossdue = Math.round(totalbill - (nhifdiff + nhifrebate));
        patienttopaytxtfld.setText(String.valueOf(grossdue));
    }

    private void netAmount() {
        double grossdue = Math.round(Double.valueOf(patienttopaytxtfld.getText().replace(",", "")));
        //  double payments = java.lang.Double.parseDouble(this.totalDepositRealTxt.getText())
        //          + java.lang.Double.parseDouble(this.totalDepositsTxt.getText());
        double payments = Math.round(java.lang.Double.parseDouble(this.totalDepositsTxt.getText().replace(",", ""))) + java.lang.Double.parseDouble(this.discountAmountTxt.getText().replace(",", ""));// + java.lang.Double.parseDouble(this.discountAmountTxt.getText().replace(",", ""));

        double netDue = Math.round(grossdue - payments);

        if (netDue >= 0) {
            netAmountTxt.setText(String.valueOf(netDue));
            refundTxt.setText("0.00");
            // schemediff = netDue;
        } else if (netDue < 0) {
            netAmountTxt.setText("0.00");
            refundTxt.setText(String.valueOf(netDue * -1));
            // schemediff = netDue;
        }

    }

    private void untickAllChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_untickAllChkActionPerformed

        postFinalBillBtn.setEnabled(false);
        for (int k = 0; k < billTable.getColumnCount(); k++) {

            for (int r = 0; r < billTable.getRowCount(); r++) {
                // if (jTable11.getValueAt(r, 5) != null) {

                billTable.setValueAt(false, r, 5);
                billTable.setValueAt(null, r, 4);
                // } else {
                //     jTable11.setValueAt(balance, k, 6);
                // }

                // this.tableModelTableChanged();
                if (billTable.isEditing()) {
                    billTable.getCellEditor().stopCellEditing();
                }

                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 4);
                this.netAmountTxt.setText(java.lang.String.valueOf(0));
                // double amts = java.lang.Double.parseDouble(this.jTextField1.getText());
                // this.jTextField2.setText(java.lang.String.valueOf(amts - totalSum));
                //}
            }
        }

        grossDueAmt();
        netAmount();

        // TODO add your handling code here:
    }//GEN-LAST:event_untickAllChkActionPerformed

    private void billTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_billTableMouseClicked

        if (billTable.getSelectedColumn() == 5) {
            //double orig = java.lang.Double.parseDouble(jTextField4.getText().toString());
            // double alloc = java.lang.Double.parseDouble(jTextField17.getText().toString());

            // double balance = orig - alloc;
            if (Boolean.valueOf(billTable.getValueAt(billTable.getSelectedRow(), 5).toString()) == java.lang.Boolean.TRUE) {

                float gross = java.lang.Float.parseFloat(billTable.getValueAt(billTable.getSelectedRow(), 1).toString());
                //gross = gross * qty;
                /// if (gross < balance) {
                billTable.setValueAt(gross, billTable.getSelectedRow(), 4);
                // } else {
                //     jTable11.setValueAt(balance, jTable11.getSelectedRow(), 4);
                // }

                // this.tableModelTableChanged();
                if (billTable.isEditing()) {
                    billTable.getCellEditor().stopCellEditing();
                }

                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 4);
                this.netAmountTxt.setText(java.lang.String.valueOf(totalSum));
                // double amts = java.lang.Double.parseDouble(this.jTextField1.getText());
                // this.jTextField2.setText(java.lang.String.valueOf(amts - totalSum));
                // }
            } else {
                billTable.setValueAt(0, billTable.getSelectedRow(), 4);
                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 4);
                this.netAmountTxt.setText(java.lang.String.valueOf(totalSum));
            }
        } else if (billTable.getSelectedColumn() == 6) {
            billNow = 0.00;
            payCash = 0.00;

            if (Boolean.valueOf(billTable.getValueAt(billTable.getSelectedRow(), 6).toString()) == java.lang.Boolean.TRUE) {

                payCash = java.lang.Double.parseDouble(payCashTxt.getText().toString()) + java.lang.Double.parseDouble(billTable.getValueAt(billTable.getSelectedRow(), 1).toString()) + payCash;

                billNow = java.lang.Double.parseDouble(totalBillTxt.getText().toString()) - Double.valueOf(billTable.getValueAt(billTable.getSelectedRow(), 1).toString()) + billNow;

                payCashTxt.setText(String.valueOf(payCash));
                totalBillTxt.setText(String.valueOf(billNow));

            } else {

                payCash = java.lang.Double.parseDouble(payCashTxt.getText().toString()) + payCash - Double.valueOf(billTable.getValueAt(billTable.getSelectedRow(), 1).toString());

                billNow = java.lang.Double.parseDouble(totalBillTxt.getText().toString()) + Double.valueOf(billTable.getValueAt(billTable.getSelectedRow(), 1).toString()) + billNow;

                payCashTxt.setText(String.valueOf(payCash));
                totalBillTxt.setText(String.valueOf(billNow));
            }
            if (schemeInvoicingTable.getValueAt(schemeInvoicingTable.getSelectedRow(), 0) != null) {
                calculateOtherDebtors();
            }
            if (nhifRebateRdi.isSelected()) {
                calculateNhifCtegory();
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_billTableMouseClicked

    private void billbeforeCardMaturityTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billbeforeCardMaturityTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_billbeforeCardMaturityTxtActionPerformed

    private void nhifCategoryCmbxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_nhifCategoryCmbxItemStateChanged
    }//GEN-LAST:event_nhifCategoryCmbxItemStateChanged

    private void schemeInvoicingTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_schemeInvoicingTableKeyPressed
        boolean rebateType = false;
        try {

            if (schemeInvoicingTable.getValueAt(schemeInvoicingTable.getSelectedRow(), 0) != null) {
                java.sql.PreparedStatement pstmtRT = connectDB.prepareStatement("SELECT rebate_type_invoicing FROM ac_schemes WHERE account_no = ?");
                pstmtRT.setString(1, schemeInvoicingTable.getValueAt(schemeInvoicingTable.getSelectedRow(), 0).toString());
                java.sql.ResultSet rsetRT = pstmtRT.executeQuery();
                while (rsetRT.next()) {
                    rebateType = rsetRT.getBoolean(1);

                }
            }
        } catch (java.sql.SQLException sq) {

            sq.printStackTrace();
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }

        if (schemeInvoicingTable.getModel().getValueAt(schemeInvoicingTable.getSelectedRow(), 2) != null) {
            if (schemeInvoicingTable.getSelectedColumn() == schemeInvoicingTable.getSelectedColumn()) {
                float realdeposits = java.lang.Float.parseFloat(totalDepositRealTxt.getText());
                float disc = java.lang.Float.parseFloat(netAmountTxt.getText());
                float deposit = java.lang.Float.parseFloat(totalDepositsTxt.getText());
                float rebate = java.lang.Float.parseFloat(nhifRebateTxt.getText());
                double bill = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 4);
                double bill1 = Double.parseDouble(this.billbeforeCardMaturityTxt.getText().replace(",", ""));
                double bill2 = Double.parseDouble(this.billAfterClinicalDischargeTxt.getText().replaceAll(",", ""));

                //this.jTextField17.setText(java.lang.String.valueOf(totalSum));
                //float bill = java.lang.Float.parseFloat(jTextField31.getText());
                double totalSum = 0.00;
                if (nhifRebateRdi.isSelected()) {

                    totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(schemeInvoicingTable, 2);
                    // netAmountTxt.setText(java.lang.String.valueOf(bill - (totalSum + deposit + rebate)));
                    netAmountTxt.setText(java.lang.String.valueOf(bill1 + bill2 - (totalSum + deposit + realdeposits)));
                    discountAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                } else {
                    totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(schemeInvoicingTable, 2);
                    netAmountTxt.setText(java.lang.String.valueOf(bill - (totalSum + deposit + realdeposits)));
                    discountAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));

                    // netAmountTxt.setText(java.lang.String.valueOf(bill1 + bill2 - (totalSum + deposit)));
                }
            }

            grossDueAmt();
            netAmount();
            if (rebateType) {
                if (Double.valueOf(netAmountTxt.getText()) != 0) {
                    schemediff = Double.parseDouble(netAmountTxt.getText());
                }
                System.out.println("\n\n\n\n\n\n\n\n\nthe scheme diff is " + schemediff + "\t" + netAmountTxt.getText());
                netAmountTxt.setText("0.00");
            }
        }
    }//GEN-LAST:event_schemeInvoicingTableKeyPressed

    private void utilizeDepositBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_utilizeDepositBtnActionPerformed
        // TODO add your handling code here:
        if (Double.valueOf(totalDepositRealTxt.getText()) >= Double.valueOf(amount2UtilizeTxt.getText()) && Double.valueOf(amount2UtilizeTxt.getText()) <= Double.valueOf(netAmountTxt.getText())) {
            int utilizeDeposit = javax.swing.JOptionPane.showConfirmDialog(this, "Are you sure to utilize patient deposit?", "Confirmation to utilize deposit", javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE);
            String transNo = null;
            String actCode = null;
            String actNames = null;
            if (utilizeDeposit == javax.swing.JOptionPane.YES_OPTION) {
                java.util.Date periodFrom = null;
                java.util.Date periodTo = null;

                java.sql.Savepoint registerSavePoint = null;
                try {
                    connectDB.setAutoCommit(false);
                    registerSavePoint = connectDB.setSavepoint("registration");

                    java.sql.Statement stmtf = connectDB.createStatement();
                    java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + checkoutDatePicker.getDate() + "' BETWEEN period_from AND period_to");
                    while (rsetf.next()) {
                        periodFrom = rsetf.getDate(1);
                        periodTo = rsetf.getDate(2);
                    }

                    if (checkoutDatePicker.getDate().before(periodFrom) || checkoutDatePicker.getDate().after(periodTo)) {
                        javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    } else {

                        java.sql.Statement stm1211x = connectDB.createStatement();
                        java.sql.ResultSet rse1211x = stm1211x.executeQuery("SELECT distinct description, activity_code FROM ac_ledger WHERE patient_no = '" + patientNumberTxt.getText() + "' and transaction_type ilike 'Unutilized patient deposit'");
                        String rnamexs = null, rcodexs = null;
                        while (rse1211x.next()) {
                            rnamexs = rse1211x.getObject(1).toString();
                            rcodexs = rse1211x.getObject(2).toString();
                        }

                        java.sql.Statement pss = connectDB.createStatement();
                        java.sql.ResultSet rss = pss.executeQuery("select nextval('transaction_no_seq')");
                        while (rss.next()) {
                            transNo = rss.getObject(1).toString();
                        }

                        java.sql.Statement pss12 = connectDB.createStatement();
                        java.sql.ResultSet rsts11 = pss12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                        while (rsts11.next()) {
                            actCode = rsts11.getObject(1).toString();
                            actNames = rsts11.getObject(2).toString();
                        }
                        //dr deposit acc 
                        java.sql.PreparedStatement pstmt1q1 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                        pstmt1q1.setObject(1, rcodexs);
                        pstmt1q1.setString(2, rnamexs);
                        pstmt1q1.setString(3, patientNumberTxt.getText());
                        pstmt1q1.setString(4, patientNameTxt.getText());
                        pstmt1q1.setObject(6, visitIDTxt.getText());
                        pstmt1q1.setString(5, "Patient deposit");
                        pstmt1q1.setString(7, visitIDTxt.getText());
                        pstmt1q1.setString(8, "CASH");
                        pstmt1q1.setString(9, "");
                        pstmt1q1.setString(10, "CASH");
                        pstmt1q1.setString(11, "");
                        pstmt1q1.setString(12, "-");
                        pstmt1q1.setString(13, "-");
                        pstmt1q1.setString(14, "Receipt");
                        pstmt1q1.setString(15, "Unutilized patient deposit");
                        pstmt1q1.setDouble(16, Double.valueOf(amount2UtilizeTxt.getText()));
                        pstmt1q1.setDouble(17, 0.00);

                        pstmt1q1.setDate(18, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
                        pstmt1q1.setString(19, transNo);
                        pstmt1q1.setBoolean(20, false);
                        pstmt1q1.setBoolean(21, true);
                        pstmt1q1.setBoolean(22, false);
                        pstmt1q1.setString(23, UserName.getLoginName(connectDB));
                        pstmt1q1.setString(24, "");//cash point
                        pstmt1q1.setString(25, "");//shift
                        pstmt1q1.setTimestamp(26, com.afrisoftech.lib.ServerTime.getSQLTimeStamp(connectDB));
                        pstmt1q1.executeUpdate();

                        //cr bill pt card
                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                        pstmt.setString(1, patientNumberTxt.getText());
                        pstmt.setObject(2, "Receipt");
                        pstmt.setString(3, "");
                        pstmt.setString(4, "Cash");
                        pstmt.setString(5, transNo);
                        pstmt.setString(7, patientNameTxt.getText());
                        pstmt.setString(6, "");
                        pstmt.setString(8, "");
                        pstmt.setString(9, patientNameTxt.getText());
                        pstmt.setDate(10, null);
                        pstmt.setString(11, "");
                        pstmt.setDouble(13, Double.valueOf(amount2UtilizeTxt.getText()));
                        pstmt.setDouble(12, 0.00);
                        pstmt.setDate(14, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
                        pstmt.setObject(15, actCode);
                        pstmt.setString(16, "Utilized Deposit - " + patientNameTxt.getText());
                        pstmt.setDouble(17, 1.00);
                        pstmt.setObject(18, patientNumberTxt.getText());
                        pstmt.setBoolean(19, true);
                        pstmt.setString(20, "Receipt");
                        pstmt.setBoolean(21, true);
                        pstmt.setString(22, actNames);
                        pstmt.setString(23, visitIDTxt.getText());
                        pstmt.setString(24, UserName.getLoginName(connectDB));
                        pstmt.setString(25, transNo);
                        pstmt.setString(26, "IP");
                        pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                        pstmt.setString(28, visitIDTxt.getText());
                        pstmt.executeUpdate();

                    }

                    connectDB.commit();

                    JOptionPane.showMessageDialog(this, patientNameTxt.getText() + "'s deposit utilized succesfully");

                    connectDB.setAutoCommit(true);

                    amount2UtilizeTxt.setText("0.00");

                    calculateNhifCtegory();

                } catch (SQLException sq) {
                    sq.printStackTrace();
                    System.out.println(sq.getMessage());
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                    try {
                        connectDB.rollback(registerSavePoint);
                    } catch (java.sql.SQLException sql) {
                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }

                }

            }
        } else {
            JOptionPane.showMessageDialog(this, "Patient deposit to be utilized cannot be more than the total un-utilized deposit and cannot be more than the bill.", "Warning", JOptionPane.INFORMATION_MESSAGE);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_utilizeDepositBtnActionPerformed

    private void consolidateDepositTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consolidateDepositTxtActionPerformed
        if (!visitIDTxt.getText().isEmpty()) {
            String transNo = null;
            String actCode = null;
            String actNames = null;
            java.sql.Savepoint registerSavePoint = null;

            try {
                connectDB.setAutoCommit(false);

                registerSavePoint = connectDB.setSavepoint("registration");

                double oldDeposit = 0.00;

                java.sql.PreparedStatement pstmtDeposit = connectDB.prepareStatement("SELECT visit_id, sum(credit-debit) FROM hp_patient_card where patient_no = ?  AND date::date < ? GROUP BY 1");

                pstmtDeposit.setString(1, patientNumberTxt.getText());

                pstmtDeposit.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(admissionDatePicker.getDate()));

                java.sql.ResultSet rsetDeposit = pstmtDeposit.executeQuery();

                while (rsetDeposit.next()) {

                    oldDeposit = rsetDeposit.getDouble(2);

                    String oldVisitID = rsetDeposit.getString(1);

                    if (oldDeposit > 0.00) {

                        java.sql.Statement stm1211x = connectDB.createStatement();
                        java.sql.ResultSet rse1211x = stm1211x.executeQuery("SELECT distinct description, activity_code FROM ac_ledger WHERE patient_no = '" + patientNumberTxt.getText() + "' and transaction_type ilike 'Unutilized patient deposit'");
                        String rnamexs = null, rcodexs = null;
                        while (rse1211x.next()) {
                            rnamexs = rse1211x.getObject(1).toString();
                            rcodexs = rse1211x.getObject(2).toString();
                        }

                        java.sql.Statement pss = connectDB.createStatement();
                        java.sql.ResultSet rss = pss.executeQuery("select nextval('transaction_no_seq')");
                        while (rss.next()) {
                            transNo = rss.getObject(1).toString();
                        }

                        java.sql.Statement pss12 = connectDB.createStatement();
                        java.sql.ResultSet rsts11 = pss12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                        while (rsts11.next()) {
                            actCode = rsts11.getObject(1).toString();
                            actNames = rsts11.getObject(2).toString();
                        }
                        //dr deposit acc 
                        java.sql.PreparedStatement pstmt1q1 = connectDB.prepareStatement("INSERT INTO ac_ledger VALUES(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                        pstmt1q1.setObject(1, rcodexs);
                        pstmt1q1.setString(2, rnamexs);
                        pstmt1q1.setString(3, patientNumberTxt.getText());
                        pstmt1q1.setString(4, patientNameTxt.getText());
                        pstmt1q1.setObject(6, visitIDTxt.getText());
                        pstmt1q1.setString(5, "Deposit Consolidation - " + transNo + " - " + patientNameTxt.getText());
                        pstmt1q1.setString(7, visitIDTxt.getText());
                        pstmt1q1.setString(8, "CASH");
                        pstmt1q1.setString(9, "");
                        pstmt1q1.setString(10, "CASH");
                        pstmt1q1.setString(11, "");
                        pstmt1q1.setString(12, "-");
                        pstmt1q1.setString(13, "-");
                        pstmt1q1.setString(14, "Receipt");
                        pstmt1q1.setString(15, "Unutilized patient deposit");
                        pstmt1q1.setDouble(16, 0.00);
                        pstmt1q1.setDouble(17, oldDeposit);

                        pstmt1q1.setDate(18, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
                        pstmt1q1.setString(19, transNo);
                        pstmt1q1.setBoolean(20, false);
                        pstmt1q1.setBoolean(21, true);
                        pstmt1q1.setBoolean(22, false);
                        pstmt1q1.setString(23, UserName.getLoginName(connectDB));
                        pstmt1q1.setString(24, "");//cash point
                        pstmt1q1.setString(25, "");//shift
                        pstmt1q1.setTimestamp(26, com.afrisoftech.lib.ServerTime.getSQLTimeStamp(connectDB));
                        pstmt1q1.executeUpdate();

                        //cr bill pt card
                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO hp_patient_card VALUES(?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                        pstmt.setString(1, patientNumberTxt.getText());
                        pstmt.setObject(2, "Receipt");
                        pstmt.setString(3, "");
                        pstmt.setString(4, "CASH");
                        pstmt.setString(5, transNo);
                        pstmt.setString(7, patientNameTxt.getText());
                        pstmt.setString(6, "");
                        pstmt.setString(8, "");
                        pstmt.setString(9, patientNameTxt.getText());
                        pstmt.setDate(10, null);
                        pstmt.setString(11, "");
                        pstmt.setDouble(12, oldDeposit);
                        pstmt.setDouble(13, 0.00);
                        pstmt.setDate(14, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
                        pstmt.setObject(15, actCode);
                        pstmt.setString(16, "Deposit Consolidation - " + transNo + " - " + patientNameTxt.getText());
                        pstmt.setDouble(17, 1.00);
                        pstmt.setObject(18, patientNumberTxt.getText());
                        pstmt.setBoolean(19, true);
                        pstmt.setString(20, "Receipt");
                        pstmt.setBoolean(21, true);
                        pstmt.setString(22, actNames);
                        pstmt.setString(23, visitIDTxt.getText());
                        pstmt.setString(24, UserName.getLoginName(connectDB));
                        pstmt.setString(25, transNo);
                        pstmt.setString(26, "IP");
                        pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                        pstmt.setString(28, visitIDTxt.getText());
                        pstmt.executeUpdate();

                        java.sql.PreparedStatement pstmtVisitID = connectDB.prepareStatement(" UPDATE hp_patient_card SET visit_id = ? WHERE patient_no = ? and reference = ? ");

                        pstmtVisitID.setString(1, oldVisitID);

                        pstmtVisitID.setString(2, patientNumberTxt.getText());

                        pstmtVisitID.setString(3, transNo);

                        pstmtVisitID.executeUpdate();
                    }

                }

                connectDB.commit();

                JOptionPane.showMessageDialog(this, patientNameTxt.getText() + "'s earlier deposits consolidated into the Un-Utilized deposit account.");

                connectDB.setAutoCommit(true);

                // TODO add your handling code here:
            } catch (SQLException ex) {
                ex.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
                Logger.getLogger(FinSchemeInvsNhifIntfr.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "You MUST select a patient file!");
        }
    }//GEN-LAST:event_consolidateDepositTxtActionPerformed
    public java.lang.String getShiftNumber() {

        try {

            java.sql.Statement stmt = connectDB.createStatement();

            java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE cash_point = '" + System.getProperty("cashpoint") + "' AND user_name = current_user AND (status = 'Running' OR status = 'Suspended')");
            //java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE cash_point = '" + cashPoint + "' AND user_name = current_user AND (status = 'Running' OR status = 'Suspended')");

            while (rset.next()) {

                shift_no = rset.getString(1);

            }

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        return shift_no;

    }

    public java.lang.String getCashPoint() {

        /*
         * try {
         *
         * java.sql.Statement stmtf = connectDB.createStatement();
         * java.sql.ResultSet rsetf = stmtf.executeQuery("select code from
         * ac_cash_points_setup where description = current_user"); while
         * (rsetf.next()) { cashPoint = rsetf.getObject(1).toString();
         *
         * }
         * } catch (java.sql.SQLException sqe) { sqe.printStackTrace();
         * System.out.println("select not successful"); }
         */
        try {

            java.sql.Statement stmt = connectDB.createStatement();

            java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE cash_point = '" + System.getProperty("cashpoint") + "' AND user_name = current_user AND (status = 'Running' OR status = 'Suspended')");
            //java.sql.ResultSet rset = stmt.executeQuery("SELECT cash_point FROM ac_shifts WHERE user_name = current_user AND (status = 'Running' OR status = 'Suspended')");

            while (rset.next()) {

                cash_no = rset.getString(1);

            }

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        return cash_no;

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.afrisoftech.lib.DatePicker admissionDatePicker;
    private javax.swing.JTextField amount2UtilizeTxt;
    private javax.swing.JTextField bedDaysTxt;
    private javax.swing.JTextField billAfterClinicalDischargeTxt;
    private javax.swing.JTable billTable;
    private javax.swing.JTextField billbeforeCardMaturityTxt;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private com.afrisoftech.lib.DatePicker cardMaturityDatePicker;
    private javax.swing.JTextField cardNumberTxt;
    private com.afrisoftech.lib.DatePicker checkoutDatePicker;
    private javax.swing.JTextField claimNumberTxt;
    private javax.swing.JButton closeBtn;
    private javax.swing.JTextArea commentsTxt;
    private javax.swing.JButton consolidateDepositTxt;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private com.afrisoftech.lib.DatePicker datePicker3;
    private com.afrisoftech.lib.DatePicker dialysisDatePicker;
    private com.afrisoftech.lib.DatePicker dischargeDatePicker;
    private javax.swing.JTextField discountAmountTxt;
    private javax.swing.JButton dispose11;
    private javax.swing.JButton dispose12;
    private javax.swing.JTextField dmuBalanceTxt;
    private javax.swing.JButton helpBtn;
    public static javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    public static javax.swing.JButton jButton4;
    private javax.swing.JButton jButton42;
    private javax.swing.JButton jButton421;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton52;
    private javax.swing.JButton jButton521;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel131;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel2122;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel641;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JDialog jSearchDialog11;
    private javax.swing.JDialog jSearchDialog13;
    private javax.swing.JDialog jSearchDialog2;
    private javax.swing.JDialog jSearchDialog21;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jSearchPanel11;
    private javax.swing.JPanel jSearchPanel13;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JPanel jSearchPanel21;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane11;
    private javax.swing.JScrollPane jSearchScrollPane13;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JScrollPane jSearchScrollPane21;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTable jSearchTable11;
    private javax.swing.JTable jSearchTable13;
    private javax.swing.JTable jSearchTable2;
    private javax.swing.JTable jSearchTable21;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JTextField jTextField1111;
    private javax.swing.JTextField jTextField1113;
    private javax.swing.JTextField jTextField113;
    private javax.swing.JTextField jTextField1131;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField51;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField81;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JTextField netAmountTxt;
    private javax.swing.JComboBox nhifCategoryCmbx;
    private javax.swing.JTextField nhifDiffTxt;
    private javax.swing.JRadioButton nhifRebateRdi;
    private javax.swing.JTextField nhifRebateTxt;
    private javax.swing.JRadioButton noRebateRdi;
    private javax.swing.JTextField opCardNumberTxt;
    private javax.swing.JTextField opClaimNumberTxt;
    private javax.swing.JTable outPatientSearchTable;
    private javax.swing.JTable outpatientSchemeTable;
    private javax.swing.JTextField patientNameTxt;
    private javax.swing.JTextField patientNumberTxt;
    private javax.swing.JTextField patienttopaytxtfld;
    private javax.swing.JTextField payCashTxt;
    private javax.swing.JTextField payModeTxt;
    private javax.swing.JButton postFinalBillBtn;
    private javax.swing.JButton refreshFormBtn;
    private javax.swing.JTextField refundTxt;
    private javax.swing.JButton removeRowBtn;
    private javax.swing.JTable schemeInvoicingTable;
    private javax.swing.JTextField schemeNumberTxt;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchButton1;
    private javax.swing.JButton searchButton2;
    private javax.swing.JCheckBox splitBillChkbx;
    private javax.swing.JCheckBox tickAllChk;
    private javax.swing.JTextField totalBillTxt;
    private javax.swing.JTextField totalDepositRealTxt;
    private javax.swing.JTextField totalDepositsTxt;
    private javax.swing.JCheckBox untickAllChk;
    private javax.swing.JButton utilizeDepositBtn;
    private javax.swing.JTextField visitIDTxt;
    // End of variables declaration//GEN-END:variables
}
