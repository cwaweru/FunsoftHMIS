/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.afrisoftech.accounting;

import java.awt.Color;
import java.util.Vector;

/**
 *
 * @author SPLgithinji
 */
public class ImprestExaminationAccIntr extends javax.swing.JInternalFrame {
org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
java.sql.Connection connectDB = null;

 String desc = null;
    String billNo = null;
    String transNo = null;
    String payMode = null;
    String patientAcc = null;
    String cardNo = null;
    String AccDesc = null;
    String scheme = null;
    String cardName = null;
    String isurer = null;
    String expDate = null;
    String staffNo = null;
    String glAcc = null;
    String receiptNo1 = null;
    String actCode1 = null;
    String glCode1 = null;
    String bankAcc1 = null;
    String transNo1 = null;
    String actNames1 = null;
    String patCat1 = null;
    String patientAcc1 = null;
    String user = null;
    String glAcc1 = null;
    String accDesc1 = null;
    String name = null;
    String rname = null;
    String rcode = null;
    String cashPoint = null;
    private java.lang.String shift_no = null;
    private java.lang.String cash_no = null;
    javax.swing.table.TableModel tableModel;
    private javax.swing.JComboBox cmbox;
    private javax.swing.JComboBox cmbox1;
    private javax.swing.JComboBox cmbox2;
    double sumSelected = 0.00;
    Vector vecSum = new Vector();
    /**
     * Creates new form ImprestCheckingAccIntr
     */
public ImprestExaminationAccIntr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {
        
        connectDB = connDb;
        
        pConnDB = pconnDB;
        
        initComponents();
        
        //Boolean checker=false;
        
        System.out.println("Cashpoint : "+System.getProperty("cashpoint"));
        
    }
        

        private void clear(){
        totalAmounttxt.setText("0.00");
        payeeTxt.setText("");
        invoiceNo.setText("");
        grnTxt.setText("-");
        totalAmountIssuedTxt.setText("0.00");
        unsurrenderedAmountTxt.setText("0.00");
        totalAmounttxt.setText("0.00");
        approvedAmountTxt.setText("0.00");
        
        
        
        for (int k = 0; k < ImprestTable.getRowCount(); k++ ) {
          for (int r = 0; r < ImprestTable.getColumnCount(); r++ ) {
          ImprestTable.getModel().setValueAt(null,k,r);
            }
        }
                    
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        ApprovalTblscr = new javax.swing.JScrollPane();
        ApprovalTbl = new com.afrisoftech.dbadmin.JTable();
        jLabel76 = new javax.swing.JLabel();
        imprestSearchTxt = new javax.swing.JTextField();
        unstockableItemsRdo = new javax.swing.JRadioButton();
        skableItemsRdo = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        grnTxt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel31 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        ImprestTable = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Object.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        };
        jPanel10 = new javax.swing.JPanel();
        jLabel53 = new javax.swing.JLabel();
        totalAmounttxt = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        approvedAmountTxt = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        approveAllChk = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        saveOnlyBtn = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        voucherNoTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        departmentCmb = new javax.swing.JComboBox();
        dateSurrender = new com.afrisoftech.lib.DatePicker();
        invoiceNoLbl = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        unsurrenderedAmtLbl = new javax.swing.JLabel();
        unsurrenderedAmountTxt = new javax.swing.JTextField();
        totalAmountIssuedTxt = new javax.swing.JTextField();
        payeeTxt = new javax.swing.JTextField();
        invoiceNo = new javax.swing.JTextField();
        voucherNoSrchTxt = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("ACCOUNTANTS EXAMINATION");
        setPreferredSize(new java.awt.Dimension(830, 488));
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Imprest here", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanel9.setMinimumSize(new java.awt.Dimension(100, 250));
        jPanel9.setPreferredSize(new java.awt.Dimension(100, 250));
        jPanel9.setLayout(new java.awt.GridBagLayout());

        ApprovalTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select distinct staff_veh, payee,voucher_no from ac_petty_cash where (voucher_no !='' and (voucher_no ilike '%PETT%') or (voucher_no ilike '%S_IMPREST%' )or (voucher_no ilike '%T_IMPREST%')) and status != 'Payment Done' and approved_surrender = false and checked_surrender = true GROUP BY staff_veh, payee,voucher_no having sum(debit-credit) >= 0 or sum(credit-debit)>0 ORDER BY 1"));
        ApprovalTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ApprovalTblMouseClicked(evt);
            }
        });
        ApprovalTblscr.setViewportView(ApprovalTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 500.0;
        jPanel9.add(ApprovalTblscr, gridBagConstraints);

        jLabel76.setText("staff/Imp no:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weighty = 1.0;
        jPanel9.add(jLabel76, gridBagConstraints);

        imprestSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                imprestSearchTxtCaretUpdate(evt);
            }
        });
        imprestSearchTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                imprestSearchTxtKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 4.0;
        gridBagConstraints.weighty = 1.0;
        jPanel9.add(imprestSearchTxt, gridBagConstraints);

        buttonGroup1.add(unstockableItemsRdo);
        unstockableItemsRdo.setText("unstockable Items");
        unstockableItemsRdo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unstockableItemsRdoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jPanel9.add(unstockableItemsRdo, gridBagConstraints);

        buttonGroup1.add(skableItemsRdo);
        skableItemsRdo.setText("Stockable items");
        skableItemsRdo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skableItemsRdoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jPanel9.add(skableItemsRdo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.3;
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel4.setText("Department");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jLabel4, gridBagConstraints);

        grnTxt.setEditable(false);
        grnTxt.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(grnTxt, gridBagConstraints);

        jLabel9.setText("Payee");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jLabel9, gridBagConstraints);

        jLabel2.setText("GRN NO:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jLabel2, gridBagConstraints);

        jLabel1.setText("Date of surrender");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jLabel1, gridBagConstraints);

        jPanel31.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel31.setLayout(new java.awt.GridBagLayout());

        ImprestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "A/C Description", "Purpose/Particulars", "Qty", "Amount", "GL Account", "Approve"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ImprestTable.setShowHorizontalLines(false);
        /*cmbox = new javax.swing.JComboBox();

        cmbox.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select code from ac_donor ORDER BY code"));
        javax.swing.table.TableColumn s = this.jTable1.getColumn("Donor");
        s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
        cmbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxActionPerformed(evt);
            }
        });

        cmbox1 = new javax.swing.JComboBox();

        cmbox1.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select code from ac_project ORDER BY code"));
        javax.swing.table.TableColumn t = this.jTable1.getColumn("Proj");
        t.setCellEditor(new javax.swing.DefaultCellEditor(cmbox1));
        cmbox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbox1ActionPerformed(evt);
            }
        });

        cmbox2 = new javax.swing.JComboBox();

        cmbox2.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select code from ac_branch ORDER BY code"));
        javax.swing.table.TableColumn n = this.jTable1.getColumn("Unit");
        n.setCellEditor(new javax.swing.DefaultCellEditor(cmbox2));
        cmbox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbox2ActionPerformed(evt);
            }
        });
        */

        javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 5; i++) {

            column = ImprestTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {
                if(i == 0){
                    column.setPreferredWidth(200);
                }else{
                    if( i == 2){
                        column.setPreferredWidth(50);
                    }else{
                        column.setPreferredWidth(100);
                    }
                }
            }

        }
        ImprestTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ImprestTableMouseClicked(evt);
            }
        });
        ImprestTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ImprestTableKeyReleased(evt);
            }
        });
        jScrollPane11.setViewportView(ImprestTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 50.0;
        jPanel31.add(jScrollPane11, gridBagConstraints);

        jPanel10.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel31.add(jPanel10, gridBagConstraints);

        jLabel53.setText("Amount Spent:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel31.add(jLabel53, gridBagConstraints);

        totalAmounttxt.setEditable(false);
        totalAmounttxt.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        totalAmounttxt.setForeground(new java.awt.Color(153, 0, 0));
        totalAmounttxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        totalAmounttxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 0, 10);
        jPanel31.add(totalAmounttxt, gridBagConstraints);

        jPanel8.setLayout(new java.awt.GridBagLayout());

        approvedAmountTxt.setEditable(false);
        approvedAmountTxt.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        approvedAmountTxt.setForeground(new java.awt.Color(204, 0, 0));
        approvedAmountTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        approvedAmountTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 2.0;
        jPanel8.add(approvedAmountTxt, gridBagConstraints);

        jLabel17.setText("Approved Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.5;
        jPanel8.add(jLabel17, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel31.add(jPanel8, gridBagConstraints);

        approveAllChk.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        approveAllChk.setText("Approve All");
        approveAllChk.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                approveAllChkItemStateChanged(evt);
            }
        });
        approveAllChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveAllChkActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel31.add(approveAllChk, gridBagConstraints);

        jPanel5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        saveOnlyBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/check.gif"))); // NOI18N
        saveOnlyBtn.setMnemonic('s');
        saveOnlyBtn.setText("Save");
        saveOnlyBtn.setToolTipText("Click here enter data");
        saveOnlyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveOnlyBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(saveOnlyBtn, gridBagConstraints);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/note[1].gif"))); // NOI18N
        jButton2.setMnemonic('R');
        jButton2.setText("Remove Row");
        jButton2.setToolTipText("Click here to edit data");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jButton2, gridBagConstraints);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/minusarm.gif"))); // NOI18N
        jButton3.setMnemonic('l');
        jButton3.setText("Clear");
        jButton3.setToolTipText("Click here to clear textfields");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jButton3, gridBagConstraints);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BD14755_.GIF"))); // NOI18N
        jButton4.setMnemonic('C');
        jButton4.setText("Close");
        jButton4.setToolTipText("Click here to close window");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jButton4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jLabel15, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel31.add(jPanel5, gridBagConstraints);

        voucherNoTxt.setEditable(false);
        voucherNoTxt.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel31.add(voucherNoTxt, gridBagConstraints);

        jLabel11.setText("Voucher No:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel31.add(jLabel11, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jPanel3.add(jPanel31, gridBagConstraints);

        departmentCmb.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select DISTINCT UPPER(department_name) as department_name  from pb_departments ORDER BY department_name"));
        departmentCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departmentCmbActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(departmentCmb, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(dateSurrender, gridBagConstraints);

        invoiceNoLbl.setText("Invoice No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 0.2;
        jPanel3.add(invoiceNoLbl, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("Total Imprest Issued:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jLabel12, gridBagConstraints);

        jLabel14.setText("Imprest No:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel3.add(jLabel14, gridBagConstraints);

        unsurrenderedAmtLbl.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        unsurrenderedAmtLbl.setForeground(new java.awt.Color(204, 0, 0));
        unsurrenderedAmtLbl.setText("Unsurrendered Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(unsurrenderedAmtLbl, gridBagConstraints);

        unsurrenderedAmountTxt.setEditable(false);
        unsurrenderedAmountTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        unsurrenderedAmountTxt.setForeground(new java.awt.Color(204, 0, 0));
        unsurrenderedAmountTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        unsurrenderedAmountTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(unsurrenderedAmountTxt, gridBagConstraints);

        totalAmountIssuedTxt.setEditable(false);
        totalAmountIssuedTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        totalAmountIssuedTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        totalAmountIssuedTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(totalAmountIssuedTxt, gridBagConstraints);

        payeeTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(payeeTxt, gridBagConstraints);

        invoiceNo.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(invoiceNo, gridBagConstraints);

        voucherNoSrchTxt.setEditable(false);
        voucherNoSrchTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voucherNoSrchTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(voucherNoSrchTxt, gridBagConstraints);

        jPanel4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.setFont(new java.awt.Font("Vani", 1, 13)); // NOI18N
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel3.setFont(new java.awt.Font("Vani", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 0, 0));
        jLabel3.setText("IMPREST SURRENDERED EXAMINATION");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel4.add(jLabel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.2;
        jPanel3.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel2.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.7;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel2, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ImprestTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ImprestTableMouseClicked
        if (ImprestTable.getSelectedColumn() == 0) {

            //this.cmboxMouseClicked();
        }

        

            int i = ImprestTable.getSelectedRow();

            if(approveAllChk.isSelected()==true){
                approveAllChk.setSelected(false);
                sumSelected = 0.00;
                approvedAmountTxt.setText(java.lang.Double.valueOf(0.00).toString());
            }else {
                if(ImprestTable.getModel().getValueAt(i, 5).toString().equalsIgnoreCase("true")){
                    sumSelected = sumSelected + java.lang.Double.valueOf(ImprestTable.getModel().getValueAt(i, 3).toString());
                   

                    System.out.println("Selected Addition ni "+sumSelected);
                    approvedAmountTxt.setText(java.lang.Double.valueOf(sumSelected).toString());
                }

                else {
                    sumSelected = sumSelected - java.lang.Double.valueOf(ImprestTable.getModel().getValueAt(i, 3).toString());

                    System.out.println("Selected Addition ni "+sumSelected);
                    approvedAmountTxt.setText(java.lang.Double.valueOf(sumSelected).toString());
                    //System.out.println("Selected subtraction ni "+sumSelected);
                }
            }

    }//GEN-LAST:event_ImprestTableMouseClicked

    private void ImprestTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ImprestTableKeyReleased
        //        if (ImprestTable.getModel().getValueAt(ImprestTable.getSelectedRow(), 3) != null) {
            //            if (ImprestTable.getSelectedColumn() == ImprestTable.getSelectedColumn()) {
                //                float resVal = java.lang.Float.parseFloat(ImprestTable.getValueAt(ImprestTable.getSelectedRow(), 3).toString());
                //
                //                java.lang.Float resFloat = new java.lang.Float(resVal);
                //
                //                ImprestTable.setValueAt(resFloat, ImprestTable.getSelectedRow(), 3);
                //
                //                double tableSum = java.lang.Double.parseDouble(resFloat.toString());
                //                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(ImprestTable, 3);
                //                totalAmounttxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                //            }
            //        }        // Add your handling code here:
    }//GEN-LAST:event_ImprestTableKeyReleased
    
    
    private void approveAllChkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_approveAllChkItemStateChanged
        // TODO add your handling code here:
        sumSelected = 0.00;
        for(int i = 0; ImprestTable.getModel().getRowCount()>i; i++){
            ImprestTable.getModel().setValueAt(false, i, 5);
            if(approveAllChk.isSelected()==true && ImprestTable.getModel().getValueAt(i, 0) !=null){
                ImprestTable.getModel().setValueAt(true, i, 5);
                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(ImprestTable, 3);
                approvedAmountTxt.setText(java.lang.String.valueOf(totalSum));
                sumSelected = 0.00;
            }else if(approveAllChk.isSelected()==false && ImprestTable.getModel().getValueAt(i, 0) !=null){
                ImprestTable.getModel().setValueAt(false, i, 5);
                approvedAmountTxt.setText(java.lang.Double.valueOf(0.0).toString());
                sumSelected = 0.00;
            }else if((approveAllChk.isSelected()==false || approveAllChk.isSelected()==true) && ImprestTable.getModel().getValueAt(i, 0) ==null){
                //ImprestTable.getModel().setValueAt(false, i, 5);
                approvedAmountTxt.setText(java.lang.Double.valueOf(0.0).toString());
                sumSelected = 0.00;
            }
        }
    }//GEN-LAST:event_approveAllChkItemStateChanged

    private void approveAllChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveAllChkActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_approveAllChkActionPerformed

    private void ApprovalTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ApprovalTblMouseClicked
    if(skableItemsRdo.isSelected() || unstockableItemsRdo.isSelected()){
        voucherNoSrchTxt.setText(ApprovalTbl.getValueAt(ApprovalTbl.getSelectedRow(), 2).toString());
        payeeTxt.setText(ApprovalTbl.getValueAt(ApprovalTbl.getSelectedRow(), 1).toString());
        
        sumSelected= 0.00;
        for (int k = 0; k < ImprestTable.getRowCount(); k++ ) {
            for (int r = 0; r < ImprestTable.getColumnCount(); r++ ) {
                ImprestTable.getModel().setValueAt(null,k,r);
            }
        }
        clear();
        saveOnlyBtn.setEnabled(true);
        //String invoiceNo = null;
        try {
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select requisitioner,payee,department,date_required from ac_petty_cash_requisition where requisition_no ='"+voucherNoSrchTxt.getText()+"' AND approved = true AND paid = false");
            
            while (rset.next()){
                
                java.text.DateFormat df = java.text.DateFormat.getDateInstance();
                
                java.text.SimpleDateFormat sdf = (java.text.SimpleDateFormat)df;
                
                sdf.applyPattern("yyyy-MM-dd");
                
                try {
                    dateSurrender.setDate(sdf.parse(rset.getObject(4).toString()));
                } catch (java.text.ParseException pe) {
                    javax.swing.JOptionPane.showMessageDialog(this, pe.getMessage());
                }
            }
            //populate table with imprest balance    , 
            
            java.sql.Statement stmtBalance = connectDB.createStatement();
            java.sql.ResultSet rsetBalance = stmtBalance.executeQuery("select sum(debit-credit) as bal, sum(debit) as total, payee, voucher_no FROM ac_petty_cash where voucher_no = '"+voucherNoSrchTxt.getText().toString()+"' and status != 'Payment Done' group by payee,voucher_no order by voucher_no");
                
            while (rsetBalance.next()){
                unsurrenderedAmountTxt.setText(rsetBalance.getObject(1).toString());
                totalAmountIssuedTxt.setText(rsetBalance.getObject(2).toString());
                payeeTxt.setText(rsetBalance.getObject(3).toString());
            }
           if(java.lang.String.valueOf(skableItemsRdo.isSelected()).trim().equalsIgnoreCase("true")){ 
            java.sql.Statement stmntInvoice = connectDB.createStatement();
            java.sql.ResultSet rsetInvoice = stmntInvoice.executeQuery("SELECT invoice_no, grn_no FROM st_stock_cardex where order_no = '"+voucherNoSrchTxt.getText()+"' and surrendered_items = false");
            while(rsetInvoice.next()){
                grnTxt.setText(rsetInvoice.getObject(2).toString());
                invoiceNo.setText(rsetInvoice.getObject(1).toString());
            }
            
            if(java.lang.Double.valueOf(unsurrenderedAmountTxt.getText().toString())<0){

              
              unsurrenderedAmtLbl.setText("Over Surrenderd Amount");
              unsurrenderedAmtLbl.setForeground(Color.red);
              
            
            }else if(java.lang.Double.valueOf(unsurrenderedAmountTxt.getText().toString())>=0){
              unsurrenderedAmtLbl.setText("Unsurrenderd Amount"); 
              unsurrenderedAmtLbl.setForeground(Color.black);
            }
            //SELECT order_no, item, price_per_item, units, quantity_received, supplier,debit, activity_code, FROM st_stock_cardex;
            ImprestTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT item, units, quantity_received, debit as Amount, activity_code, false as Approve FROM st_stock_cardex WHERE order_no = '"+voucherNoSrchTxt.getText().toString()+"' and surrendered_items = false"));
               System.out.println("SELECT item, units, quantity_received, debit as Amount, activity_code, false as Approve FROM st_stock_cardex WHERE order_no = '"+voucherNoSrchTxt.getText().toString()+"' and surrendered_items = false"+voucherNoSrchTxt.getText().toString());
           }else 
               if(java.lang.String.valueOf(unstockableItemsRdo.isSelected()).trim().equalsIgnoreCase("true")){
               
           java.sql.Statement stmntInvoice = connectDB.createStatement();
            java.sql.ResultSet rsetInvoice = stmntInvoice.executeQuery("SELECT requisition_no FROM ac_unstockable_items where voucher_no = '"+voucherNoSrchTxt.getText()+"' and approved = false");
            while(rsetInvoice.next()){
                //invoiceNo = rsetInvoice.getObject(1).toString();
                invoiceNo.setText(rsetInvoice.getObject(1).toString());
            }
            
            
            if(java.lang.Double.valueOf(unsurrenderedAmountTxt.getText().toString())<0){
            unsurrenderedAmtLbl.setText("Over Surrenderd Amount");
            unsurrenderedAmtLbl.setForeground(Color.red);
                
            }else{
                
            unsurrenderedAmtLbl.setText("Unsurrenderd Amount"); 
            unsurrenderedAmtLbl.setForeground(Color.black);              
            
            }
            
            //SELECT dealer, description, quantity, activity_code, particular, department,requisition_no, voucher_no, debit FROM ac_unstockable_items;
            ImprestTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT description, particular, quantity, debit as Amount, activity_code, false as Approve FROM ac_unstockable_items WHERE voucher_no = '"+voucherNoSrchTxt.getText().toString()+"' and approved = false"));
           }
            double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(ImprestTable, 3);
            totalAmounttxt.setText(java.lang.String.valueOf(totalSum));
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }
        
        try {
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select SUM(credit) from ac_petty_cash_requisition where requisition_no ='"+voucherNoSrchTxt.getText()+"' AND approved = true AND paid = false");
            while (rset.next()){
                
                //jTextField3.setText(rset.getObject(1).toString());
                
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }
}else{
    javax.swing.JOptionPane.showMessageDialog(this, "You must select the surrender type","ERROR Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);  
}
      //  this.populateTable12x(this.voucherNoSrchTxt.getText().toString());
    }//GEN-LAST:event_ApprovalTblMouseClicked

    private void imprestSearchTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_imprestSearchTxtKeyPressed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_imprestSearchTxtKeyPressed

    private void imprestSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_imprestSearchTxtCaretUpdate
        // TODO add your handling code here:
        ApprovalTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct staff_veh, payee,voucher_no from ac_petty_cash where (voucher_no !='' and (voucher_no ilike '%PETT%') or (voucher_no ilike '%S_IMPREST%' )or (voucher_no ilike '%T_IMPREST%')) "
                + "and (payee ILIKE '%" + imprestSearchTxt.getText().toString() + "%' or staff_veh ILIKE '%" + imprestSearchTxt.getText().toString() + "%')  and status != 'Payment Done' and approved_surrender = false and checked_surrender = true GROUP BY staff_veh, payee,voucher_no having sum(debit-credit) >= 0 or sum(credit-debit)>0 ORDER BY 1"));
    }//GEN-LAST:event_imprestSearchTxtCaretUpdate

    private void saveOnlyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveOnlyBtnActionPerformed
        java.util.Date periodFrom = null;
        java.util.Date periodTo = null;

        try {

            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '"+dateSurrender.getDate()+"' BETWEEN period_from AND period_to");
            while (rsetf.next()){
                periodFrom = rsetf.getDate(1);
                periodTo = rsetf.getDate(2);
            }

        }   catch(java.sql.SQLException sq){
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());

        }

        if(dateSurrender.getDate().before(periodFrom) || dateSurrender.getDate().after(periodTo)){
            javax.swing.JOptionPane.showMessageDialog(this,"You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(),"Caution Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);

        }else{ if(ImprestTable.isEditing()){
                ImprestTable.getCellEditor().stopCellEditing();
            }
            java.util.Calendar calendar = java.util.Calendar.getInstance();

            long dateNow = calendar.getTimeInMillis();

            java.sql.Date datenowSql= new java.sql.Date(dateNow);

            System.out.println(datenowSql.toString());
            try{

                String glAcc = null;
                String Activity = null;
                String userName = null;
                String voucherNo = null;
                String transNo = null;
                String Stock = null;
                String voucNo = null;
                String accountCode = null;
                String TransNo = null;
                String glType = null;
                String glType1 = null;
                String accountCode1 = null;

                try{
                    connectDB.setAutoCommit(false);
                    if(java.lang.Double.valueOf(totalAmounttxt.getText().toString().length())>0.0){
                        if(skableItemsRdo.isSelected()) {
                            java.sql.PreparedStatement pstmtStock = connectDB.prepareStatement("update st_stock_cardex set surrendered_items = true where grn_no = ? and order_no = ?");
                            pstmtStock.setObject(1, grnTxt.getText().toString());
                            pstmtStock.setObject(2, voucherNoSrchTxt.getText().toString());
                            pstmtStock.executeUpdate();

                            if(java.lang.Double.valueOf(unsurrenderedAmountTxt.getText().toString())==0){

                                java.sql.PreparedStatement pstmtCompletePettyCash = connectDB.prepareStatement("update ac_petty_cash set approved_surrender = true where voucher_no = ?");
                                pstmtCompletePettyCash.setObject(1, voucherNoSrchTxt.getText().toString());
                                pstmtCompletePettyCash.executeUpdate();
                            }else if(java.lang.Double.valueOf(unsurrenderedAmountTxt.getText().toString())>0 || java.lang.Double.valueOf(unsurrenderedAmountTxt.getText().toString())<0){

                                java.sql.PreparedStatement pstmtPettyCash = connectDB.prepareStatement("update ac_petty_cash set approved_surrender = true where voucher_no = ? and status ilike '%IMPREST_SURRENDER%'");
                                pstmtPettyCash.setObject(1, voucherNoSrchTxt.getText().toString());
                                pstmtPettyCash.executeUpdate();
                            }
                        }
                        else
                        if(unstockableItemsRdo.isSelected()){
                            //selected rejected items should cause a debit to the ac_petty cash a button to be programmed
                            for (int i = 0; i < ImprestTable.getRowCount(); i++){
                                if (ImprestTable.getModel().getValueAt(i,0) != null && ImprestTable.getModel().getValueAt(i,5).equals(true)){

                                    java.sql.PreparedStatement unstockable = connectDB.prepareStatement("INSERT INTO ac_unstockable_items VALUES (?,? ,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
                                    //dealer, description,quantity activity_code, particular, department, requisition_no, voucher_no, voucher_date, debit, credit, dealer_code, approved
                                    unstockable.setObject(1, payeeTxt.getText());
                                    unstockable.setObject(2, ImprestTable.getModel().getValueAt(i,0).toString());
                                    unstockable.setObject(3, ImprestTable.getModel().getValueAt(i,2).toString());
                                    unstockable.setObject(4, ImprestTable.getModel().getValueAt(i,4).toString());
                                    unstockable.setObject(5, ImprestTable.getModel().getValueAt(i,1).toString());
                                    unstockable.setObject(6, departmentCmb.getSelectedItem().toString());
                                    unstockable.setObject(7, invoiceNo.getText().toString());
                                    unstockable.setObject(8, voucherNoSrchTxt.getText().toString());
                                    unstockable.setDate(9, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dateSurrender.getDate()));
                                    unstockable.setDouble(11,java.lang.Double.valueOf(ImprestTable.getModel().getValueAt(i,3).toString()));
                                    unstockable.setDouble(10,0.00);
                                    unstockable.setObject(12, "");
                                    unstockable.setBoolean(13, true);
                                    unstockable.setDate(14,com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.util.Calendar.getInstance().getTime()));
                                    unstockable.setObject(15, "IMPREST_SURRENDERED");
                                    unstockable.setObject(16, com.afrisoftech.lib.UserName.getLoginName(connectDB));
                                    unstockable.setObject(17,accountCode1);
                                    unstockable.setString(18,glType1);
                                    unstockable.executeUpdate();

                                }

                            }

                            java.sql.PreparedStatement pstmtunstock = connectDB.prepareStatement("update ac_unstockable_items set approved = true where voucher_no = ?");
                            pstmtunstock.setObject(1, voucherNoSrchTxt.getText().toString());
                            pstmtunstock.executeUpdate();

                            double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(ImprestTable, 3);
                            if(java.lang.Double.valueOf(unsurrenderedAmountTxt.getText().toString())==0){

                                java.sql.PreparedStatement pstmtCompletePettyCash = connectDB.prepareStatement("update ac_petty_cash set approved_surrender = true where voucher_no = ?");
                                pstmtCompletePettyCash.setObject(1, voucherNoSrchTxt.getText().toString());
                                pstmtCompletePettyCash.executeUpdate();
                            }else if(java.lang.Double.valueOf(unsurrenderedAmountTxt.getText().toString())>0 || java.lang.Double.valueOf(unsurrenderedAmountTxt.getText().toString())<0){

                                java.sql.PreparedStatement pstmtPettyCash = connectDB.prepareStatement("update ac_petty_cash set approved_surrender = true where voucher_no = ? and status ilike '%SURRENDER_NON_STOCKABLE%'");
                                pstmtPettyCash.setObject(1, voucherNoSrchTxt.getText().toString());
                                pstmtPettyCash.executeUpdate();
                            }

                        }

                    }
                    connectDB.commit();
                    connectDB.setAutoCommit(true);
                    javax.swing.JOptionPane.showMessageDialog(this, "Approval Done Successfully","Comfirmation Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                    ApprovalTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct staff_veh, payee,voucher_no "
                     + "from ac_petty_cash where (voucher_no !='' and (voucher_no ilike '%PETT%') or (voucher_no ilike '%S_IMPREST%' )or "
                    + "(voucher_no ilike '%T_IMPREST%')) and status != 'Payment Done' and approved_surrender = false and checked_surrender = true "
                            + "GROUP BY staff_veh, payee,voucher_no having sum(debit-credit) >= 0 or sum(credit-debit)>0 ORDER BY 1"));
                    for (int k = 0; k < ImprestTable.getRowCount(); k++ ) {
                        for (int r = 0; r < ImprestTable.getColumnCount(); r++ ) {
                            ImprestTable.getModel().setValueAt(null,k,r);
                        }
                    }
                    clear();

                    saveOnlyBtn.setEnabled(false);
                    
                }   catch(java.sql.SQLException sq){
                    sq.printStackTrace();
                    try {
                        connectDB.rollback();
                    }catch (java.sql.SQLException sql){
                        javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                    System.out.println(sq.getMessage());
                    //sql.printStackTrace();
                }

            } catch(java.lang.Exception ex) {
                System.out.println(ex.getMessage());
                ex.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error",javax.swing.JOptionPane.ERROR_MESSAGE);

            }
        }        // Add your handling code here:
    }//GEN-LAST:event_saveOnlyBtnActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        int rows2Delete = ImprestTable.getSelectedRowCount();

        int[] selectedRows = ImprestTable.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)ImprestTable.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel)ImprestTable.getModel();

                defTableModel.removeRow(ImprestTable.getSelectedRow());
            }
        }
        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(ImprestTable, 3);
        totalAmounttxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));

        //   javax.swing.JFrame other = new OtherPayments(connectDB, pConnDB);
        //   other.setVisible(true);  // Add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        for (int k = 0; k < ImprestTable.getRowCount(); k++ ) {
            for (int r = 0; r < ImprestTable.getColumnCount(); r++ ) {
                ImprestTable.getModel().setValueAt(null,k,r);
            }
        }
        totalAmounttxt.setText("");
        grnTxt.setText("-");

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void unstockableItemsRdoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unstockableItemsRdoActionPerformed
        // TODO add your handling code here:
        clear();
        try{

            if(unstockableItemsRdo.isSelected()==true){

                ApprovalTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct staff_veh, payee,voucher_no from ac_petty_cash where (voucher_no !='' and (voucher_no ilike '%PETT%') or (voucher_no ilike '%S_IMPREST%' )or (voucher_no ilike '%T_IMPREST%')) and status != 'Payment Done' and approved_surrender = false and checked_surrender = true GROUP BY staff_veh, payee,voucher_no having sum(debit-credit) >=0 or sum(credit-debit) > 0 ORDER BY 1"));
                invoiceNoLbl.setText("Receipt No:");
                unsurrenderedAmtLbl.setText("Unsurrendered Amount");

            }
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_unstockableItemsRdoActionPerformed

    private void skableItemsRdoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skableItemsRdoActionPerformed
        // TODO add your handling code here:
        clear();
        try{

            if(skableItemsRdo.isSelected()==true){

                ApprovalTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct staff_veh, payee,voucher_no from ac_petty_cash where (voucher_no !='' and (voucher_no ilike '%PETT%') or (voucher_no ilike '%S_IMPREST%' )or (voucher_no ilike '%T_IMPREST%')) and status != 'Payment Done' and approved_surrender = false and checked_surrender = true GROUP BY staff_veh, payee,voucher_no having sum(debit-credit) >=0 or sum(credit-debit) > 0 ORDER BY 1"));
                invoiceNoLbl.setText("Invoice No:");
                unsurrenderedAmtLbl.setText("Unsurrendered Amount");
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_skableItemsRdoActionPerformed

    private void departmentCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departmentCmbActionPerformed

        saveOnlyBtn.setEnabled(true);      // Add your handling code here:
    }//GEN-LAST:event_departmentCmbActionPerformed

    private void voucherNoSrchTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voucherNoSrchTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_voucherNoSrchTxtActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ApprovalTbl;
    private javax.swing.JScrollPane ApprovalTblscr;
    private javax.swing.JTable ImprestTable;
    private javax.swing.JCheckBox approveAllChk;
    private javax.swing.JTextField approvedAmountTxt;
    private javax.swing.ButtonGroup buttonGroup1;
    private com.afrisoftech.lib.DatePicker dateSurrender;
    private javax.swing.JComboBox departmentCmb;
    private javax.swing.JTextField grnTxt;
    private javax.swing.JTextField imprestSearchTxt;
    private javax.swing.JTextField invoiceNo;
    private javax.swing.JLabel invoiceNoLbl;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    public javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JTextField payeeTxt;
    private javax.swing.JButton saveOnlyBtn;
    private javax.swing.JRadioButton skableItemsRdo;
    private javax.swing.JTextField totalAmountIssuedTxt;
    private javax.swing.JTextField totalAmounttxt;
    private javax.swing.JRadioButton unstockableItemsRdo;
    private javax.swing.JTextField unsurrenderedAmountTxt;
    private javax.swing.JLabel unsurrenderedAmtLbl;
    private javax.swing.JTextField voucherNoSrchTxt;
    private javax.swing.JTextField voucherNoTxt;
    // End of variables declaration//GEN-END:variables
}
