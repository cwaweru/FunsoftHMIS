/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */
package com.afrisoftech.accounting;

import com.afrisoftech.lib.ClearTable;
import com.afrisoftech.lib.GetItemInfo;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author root
 */
public class PharmacyPointsIntfr extends javax.swing.JInternalFrame {

    /**
     * Creates new form loanpymntintfr
     */
    private javax.swing.JComboBox cmbox;
    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    private boolean update;
    java.util.Vector v = null;

    public PharmacyPointsIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;

        update = false;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField11 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton9 = new javax.swing.JButton();
        jSearchDialog1 = new javax.swing.JDialog();
        jSearchPanel1 = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane1 = new javax.swing.JScrollPane();
        jSearchTable1 = new com.afrisoftech.dbadmin.JTable();
        jButton91 = new javax.swing.JButton();
        jSearchDialog2 = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        jTextField112 = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        jSearchTable2 = new com.afrisoftech.dbadmin.JTable();
        jButton92 = new javax.swing.JButton();
        jSearchDialog3 = new javax.swing.JDialog();
        jSearchPanel3 = new javax.swing.JPanel();
        jTextField12 = new javax.swing.JTextField();
        jSearchScrollPane3 = new javax.swing.JScrollPane();
        jSearchTable3 = new com.afrisoftech.dbadmin.JTable();
        jButton10 = new javax.swing.JButton();
        searchtenderc = new javax.swing.JDialog();
        tenderrecordspnl4 = new javax.swing.JPanel();
        tenderrecordstxt4 = new javax.swing.JTextField();
        tenderrecordsspnl4 = new javax.swing.JScrollPane();
        tenderrecordstbl4 = new com.afrisoftech.dbadmin.JTable();
        closebtn10 = new javax.swing.JButton();
        userdialog = new javax.swing.JDialog();
        jSearchPanel4 = new javax.swing.JPanel();
        usersearchTxt = new javax.swing.JTextField();
        jSearchScrollPane4 = new javax.swing.JScrollPane();
        jSearchTable4 = new com.afrisoftech.dbadmin.JTable();
        jButton93 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane21 = new javax.swing.JScrollPane();
        jTable11 = new com.afrisoftech.dbadmin.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton11 = new javax.swing.JButton();
        jButton21 = new javax.swing.JButton();
        jButton61 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        jButton41 = new javax.swing.JButton();
        jButton51 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jScrollPane22 = new javax.swing.JScrollPane();
        jTable12 = new com.afrisoftech.dbadmin.JTable();
        jSeparator2 = new javax.swing.JSeparator();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton12 = new javax.swing.JButton();
        jButton22 = new javax.swing.JButton();
        jButton62 = new javax.swing.JButton();
        jButton32 = new javax.swing.JButton();
        jButton42 = new javax.swing.JButton();
        jButton52 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jScrollPane23 = new javax.swing.JScrollPane();
        moduleTbl = new com.afrisoftech.dbadmin.JTable();
        jSeparator3 = new javax.swing.JSeparator();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton13 = new javax.swing.JButton();
        jButton63 = new javax.swing.JButton();
        jButton53 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel59 = new javax.swing.JPanel();
        userTxt = new javax.swing.JTextField();
        jButton23 = new javax.swing.JButton();
        storeCmbx = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        storeGLtxt = new javax.swing.JTextField();
        activityChbx = new javax.swing.JCheckBox();
        centralStoresCmbx = new javax.swing.JCheckBox();
        substoreCmbx = new javax.swing.JCheckBox();
        superUserCmbx = new javax.swing.JCheckBox();

        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jTextField11.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField11CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(jTextField11, gridBagConstraints);

        jSearchTable.setShowHorizontalLines(false);
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton9.setText("Dispose");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        jSearchDialog1.setModal(true);
        jSearchDialog1.setUndecorated(true);
        jSearchDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel1.setLayout(new java.awt.GridBagLayout());

        jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel1.add(jTextField111, gridBagConstraints);

        jSearchTable1.setShowHorizontalLines(false);
        jSearchTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable1MouseClicked(evt);
            }
        });
        jSearchScrollPane1.setViewportView(jSearchTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel1.add(jSearchScrollPane1, gridBagConstraints);

        jButton91.setText("Dispose");
        jButton91.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton91ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel1.add(jButton91, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog1.getContentPane().add(jSearchPanel1, gridBagConstraints);

        jSearchDialog2.setModal(true);
        jSearchDialog2.setUndecorated(true);
        jSearchDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        jTextField112.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField112CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel2.add(jTextField112, gridBagConstraints);

        jSearchTable2.setShowHorizontalLines(false);
        jSearchTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable2MouseClicked(evt);
            }
        });
        jSearchScrollPane2.setViewportView(jSearchTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

        jButton92.setText("Dispose");
        jButton92.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton92ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton92, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog2.getContentPane().add(jSearchPanel2, gridBagConstraints);

        jSearchDialog3.setModal(true);
        jSearchDialog3.setUndecorated(true);
        jSearchDialog3.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel3.setLayout(new java.awt.GridBagLayout());

        jTextField12.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField12CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel3.add(jTextField12, gridBagConstraints);

        jSearchTable3.setShowHorizontalLines(false);
        jSearchTable3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable3MouseClicked(evt);
            }
        });
        jSearchScrollPane3.setViewportView(jSearchTable3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel3.add(jSearchScrollPane3, gridBagConstraints);

        jButton10.setText("Dispose");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel3.add(jButton10, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog3.getContentPane().add(jSearchPanel3, gridBagConstraints);

        searchtenderc.setModal(true);
        searchtenderc.setUndecorated(true);
        searchtenderc.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                searchtendercFocusLost(evt);
            }
        });
        searchtenderc.getContentPane().setLayout(new java.awt.GridBagLayout());

        tenderrecordspnl4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        tenderrecordspnl4.setLayout(new java.awt.GridBagLayout());

        tenderrecordstxt4.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                tenderrecordstxt4CaretUpdate(evt);
            }
        });
        tenderrecordstxt4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tenderrecordstxt4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        tenderrecordspnl4.add(tenderrecordstxt4, gridBagConstraints);

        tenderrecordstbl4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tenderrecordstbl4.setToolTipText("Click on the target row to select the patient from the search.");
        tenderrecordstbl4.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        tenderrecordstbl4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tenderrecordstbl4MouseClicked(evt);
            }
        });
        tenderrecordsspnl4.setViewportView(tenderrecordstbl4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        tenderrecordspnl4.add(tenderrecordsspnl4, gridBagConstraints);

        closebtn10.setText("Close");
        closebtn10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closebtn10ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        tenderrecordspnl4.add(closebtn10, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        searchtenderc.getContentPane().add(tenderrecordspnl4, gridBagConstraints);

        userdialog.setModal(true);
        userdialog.setUndecorated(true);
        userdialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel4.setLayout(new java.awt.GridBagLayout());

        usersearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                usersearchTxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        jSearchPanel4.add(usersearchTxt, gridBagConstraints);

        jSearchTable4.setShowHorizontalLines(false);
        jSearchTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable4MouseClicked(evt);
            }
        });
        jSearchScrollPane4.setViewportView(jSearchTable4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel4.add(jSearchScrollPane4, gridBagConstraints);

        jButton93.setText("Dispose");
        jButton93.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton93ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jSearchPanel4.add(jButton93, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        userdialog.getContentPane().add(jSearchPanel4, gridBagConstraints);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Pharmacy/Stock outlets management");
        setFrameIcon(null);
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jLabel7, gridBagConstraints);

        jTextField6.setEditable(false);
        jTextField6.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField6.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jTextField6, gridBagConstraints);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enter cash point here", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 255)));
        jPanel11.setLayout(new java.awt.GridBagLayout());

        jTable11.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "User Name", "Pharmacy/Stock outlet", "Store GL/Account", "Row Id"
            }
        ));
        jTable11.setShowHorizontalLines(false);
        cmbox = new javax.swing.JComboBox();
        /*try {

            crset2.setConnectionSource(pConnDB);
            crset2.execute("select payment_code from pb_paymentmodes order by payment_code");
            cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset2, "payment_code", null, null, null));
            javax.swing.table.TableColumn s = this.jTable11.getColumn("Payment Mode");
            s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
            cmbox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    cmboxActionPerformed(evt);
                }
            });

            /*     cmbox1.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset4, "item", null, null, null));
            javax.swing.table.TableColumn m = this.jTable1.getColumn("Drug Prescribed");
            m.setCellEditor(new javax.swing.DefaultCellEditor(cmbox1));
            cmbox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    cmboxActionPerformed(evt);
                }
            });

        } catch(java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
        */
        jTable11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable11MouseClicked(evt);
            }
        });
        jScrollPane21.setViewportView(jTable11);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel11.add(jScrollPane21, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        jPanel11.add(jSeparator1, gridBagConstraints);

        jButton11.setMnemonic('O');
        jButton11.setText("Allocate staff to pharmacy/stock outlet");
        jButton11.setToolTipText("Click here enter data");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jButton11, gridBagConstraints);

        jButton21.setMnemonic('E');
        jButton21.setText("Edit");
        jButton21.setToolTipText("Click here to edit data");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jButton21, gridBagConstraints);

        jButton61.setMnemonic('r');
        jButton61.setText("Remove Row");
        jButton61.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton61ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        jPanel11.add(jButton61, gridBagConstraints);

        jButton31.setMnemonic('l');
        jButton31.setText("Clear");
        jButton31.setToolTipText("Click here to clear textfields");
        jButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton31ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jButton31, gridBagConstraints);

        jButton41.setMnemonic('C');
        jButton41.setText("Close");
        jButton41.setToolTipText("Click here to close window");
        jButton41.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton41ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jButton41, gridBagConstraints);

        jButton51.setMnemonic('d');
        jButton51.setText("Delete");
        jButton51.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton51ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jButton51, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 500.0;
        gridBagConstraints.weighty = 1.0;
        jPanel11.add(jLabel1, gridBagConstraints);

        jTabbedPane1.addTab("Pharmacy/Stock outlets allocation", jPanel11);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enter cash point here", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 255)));
        jPanel12.setLayout(new java.awt.GridBagLayout());

        jTable12.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "User Name", "Pharmacy/Stock outlet", "Store GL/Account", "Module"
            }
        ));
        jTable12.setShowHorizontalLines(false);
        java.lang.Object[] strCmb = {"Direct Purchasing","Stock Reconciliation","Stock Addition", "Issuing Stockable Items","Stock Price Setup"};

        javax.swing.JComboBox cmBox = new javax.swing.JComboBox(strCmb);

        javax.swing.table.TableColumn teditor = this.jTable12.getColumn("Module");

        teditor.setCellEditor(new javax.swing.DefaultCellEditor(cmBox));

        //cmbox = new javax.swing.JComboBox();
        /*try {

            crset2.setConnectionSource(pConnDB);
            crset2.execute("select payment_code from pb_paymentmodes order by payment_code");
            cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset2, "payment_code", null, null, null));
            javax.swing.table.TableColumn s = this.jTable11.getColumn("Payment Mode");
            s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
            cmbox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    cmboxActionPerformed(evt);
                }
            });

            /*     cmbox1.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset4, "item", null, null, null));
            javax.swing.table.TableColumn m = this.jTable1.getColumn("Drug Prescribed");
            m.setCellEditor(new javax.swing.DefaultCellEditor(cmbox1));
            cmbox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    cmboxActionPerformed(evt);
                }
            });

        } catch(java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
        */
        jTable12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable12MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTable12MouseEntered(evt);
            }
        });
        jScrollPane22.setViewportView(jTable12);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1000.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel12.add(jScrollPane22, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        jPanel12.add(jSeparator2, gridBagConstraints);

        jButton12.setMnemonic('O');
        jButton12.setText("Allocate staff to store");
        jButton12.setToolTipText("Click here enter data");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel12.add(jButton12, gridBagConstraints);

        jButton22.setMnemonic('E');
        jButton22.setText("Edit");
        jButton22.setToolTipText("Click here to edit data");
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel12.add(jButton22, gridBagConstraints);

        jButton62.setMnemonic('r');
        jButton62.setText("Remove Row");
        jButton62.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton62ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        jPanel12.add(jButton62, gridBagConstraints);

        jButton32.setMnemonic('l');
        jButton32.setText("Clear");
        jButton32.setToolTipText("Click here to clear textfields");
        jButton32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton32ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel12.add(jButton32, gridBagConstraints);

        jButton42.setMnemonic('C');
        jButton42.setText("Close");
        jButton42.setToolTipText("Click here to close window");
        jButton42.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton42ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel12.add(jButton42, gridBagConstraints);

        jButton52.setMnemonic('d');
        jButton52.setText("Delete");
        jButton52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel12.add(jButton52, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1000.0;
        gridBagConstraints.weighty = 1.0;
        jPanel12.add(jLabel2, gridBagConstraints);

        jTabbedPane1.addTab("Store Count/Reconciliation/Receiving Allocation", jPanel12);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tick to allocate Store Privilleges Here", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 255)));
        jPanel13.setLayout(new java.awt.GridBagLayout());

        moduleTbl.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        moduleTbl.setForeground(new java.awt.Color(102, 102, 102));
        moduleTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Module", "Assign"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        moduleTbl.setShowHorizontalLines(false);
        moduleTbl.getTableHeader().setResizingAllowed(false);
        moduleTbl.getTableHeader().setReorderingAllowed(false);
        //cmbox = new javax.swing.JComboBox();
        /*try {

            crset2.setConnectionSource(pConnDB);
            crset2.execute("select payment_code from pb_paymentmodes order by payment_code");
            cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset2, "payment_code", null, null, null));
            javax.swing.table.TableColumn s = this.jTable11.getColumn("Payment Mode");
            s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
            cmbox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    cmboxActionPerformed(evt);
                }
            });

            /*     cmbox1.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset4, "item", null, null, null));
            javax.swing.table.TableColumn m = this.jTable1.getColumn("Drug Prescribed");
            m.setCellEditor(new javax.swing.DefaultCellEditor(cmbox1));
            cmbox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    cmboxActionPerformed(evt);
                }
            });

        } catch(java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
        */
        moduleTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                moduleTblMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                moduleTblMouseEntered(evt);
            }
        });
        jScrollPane23.setViewportView(moduleTbl);
        if (moduleTbl.getColumnModel().getColumnCount() > 0) {
            moduleTbl.getColumnModel().getColumn(0).setResizable(false);
            moduleTbl.getColumnModel().getColumn(1).setResizable(false);
        }

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1000.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel13.add(jScrollPane23, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        jPanel13.add(jSeparator3, gridBagConstraints);

        jButton13.setBackground(new java.awt.Color(0, 255, 204));
        jButton13.setMnemonic('O');
        jButton13.setText("Allocate staff to store");
        jButton13.setToolTipText("Click here enter data");
        jButton13.setEnabled(false);
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel13.add(jButton13, gridBagConstraints);

        jButton63.setBackground(new java.awt.Color(0, 255, 204));
        jButton63.setMnemonic('r');
        jButton63.setText("Remove Row");
        jButton63.setPreferredSize(new java.awt.Dimension(189, 25));
        jButton63.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton63ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        jPanel13.add(jButton63, gridBagConstraints);

        jButton53.setBackground(new java.awt.Color(0, 255, 204));
        jButton53.setMnemonic('d');
        jButton53.setText("Delete");
        jButton53.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton53ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel13.add(jButton53, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1000.0;
        gridBagConstraints.weighty = 1.0;
        jPanel13.add(jLabel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel13, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel3.setText("User Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jLabel3, gridBagConstraints);

        jPanel59.setLayout(new java.awt.GridBagLayout());

        userTxt.setEditable(false);
        userTxt.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        userTxt.setForeground(new java.awt.Color(102, 102, 102));
        userTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel59.add(userTxt, gridBagConstraints);

        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        jPanel59.add(jButton23, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(jPanel59, gridBagConstraints);

        storeCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '-' UNION SELECT distinct  upper(store_name) as store_name from st_main_stores ORDER BY 1"));
        storeCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                storeCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(storeCmbx, gridBagConstraints);

        jLabel5.setText("Stock Outlet/Store");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        jPanel2.add(jLabel5, gridBagConstraints);

        jLabel6.setText("Store GL Account");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        jPanel2.add(jLabel6, gridBagConstraints);

        storeGLtxt.setEditable(false);
        storeGLtxt.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        storeGLtxt.setForeground(new java.awt.Color(255, 0, 0));
        storeGLtxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                storeGLtxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(storeGLtxt, gridBagConstraints);

        activityChbx.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        activityChbx.setForeground(new java.awt.Color(0, 0, 204));
        activityChbx.setText("Activity Domains");
        activityChbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activityChbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        jPanel2.add(activityChbx, gridBagConstraints);

        buttonGroup1.add(centralStoresCmbx);
        centralStoresCmbx.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        centralStoresCmbx.setForeground(new java.awt.Color(255, 0, 51));
        centralStoresCmbx.setSelected(true);
        centralStoresCmbx.setText("Central Stores");
        centralStoresCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                centralStoresCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel2.add(centralStoresCmbx, gridBagConstraints);

        buttonGroup1.add(substoreCmbx);
        substoreCmbx.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        substoreCmbx.setForeground(new java.awt.Color(255, 0, 51));
        substoreCmbx.setText("Sub Stock Outlet");
        substoreCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                substoreCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel2.add(substoreCmbx, gridBagConstraints);

        superUserCmbx.setText("SuperUser?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(superUserCmbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel2, gridBagConstraints);

        jTabbedPane1.addTab("Stock Rights Allocation", jPanel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);
        jTabbedPane1.getAccessibleContext().setAccessibleName("Pharmacy/Stock Outlets");

        setBounds(0, 0, 948, 390);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton51ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton51ActionPerformed
        try {
            //connectDB.setAutoCommit(false);
            java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("DELETE FROM store_allocation WHERE user_name = '" + jTable11.getModel().getValueAt(jTable11.getSelectedRow(), 0).toString() + "' "
                    + "AND store_gl_account = '" + jTable11.getModel().getValueAt(jTable11.getSelectedRow(), 2).toString() + "' "
                    + "AND row_id = '" + jTable11.getModel().getValueAt(jTable11.getSelectedRow(), 3).toString() + "'");
            pstmt31.executeUpdate();
            connectDB.commit();
            //connectDB.setAutoCommit(true);

        } catch (java.sql.SQLException sq) {
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }

        }
        jButton21ActionPerformed(evt);        // Add your handling code here:
    }//GEN-LAST:event_jButton51ActionPerformed

    private void jSearchTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable1MouseClicked
        jTable11.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 0), jTable11.getSelectedRow(), 0);

        jSearchDialog1.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable1MouseClicked

    private void jButton91ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton91ActionPerformed
        jSearchDialog1.dispose();     // Add your handling code here:
    }//GEN-LAST:event_jButton91ActionPerformed

    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate

        if (jTextField111.getCaretPosition() < 2) {

            System.out.println("Nothing");
        } else {
            jSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select usename FROM pg_user WHERE usename ILIKE '" + jTextField111.getText() + "%' order by usename"));

            jSearchScrollPane1.setViewportView(jSearchTable1);
            System.out.println("Cannot sort out");

        }

        // Add your handling code here:
    }//GEN-LAST:event_jTextField111CaretUpdate

    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked

        // if (jTable11.getSelectedColumn() == 1) {
        jTable11.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0), jTable11.getSelectedRow(), 1);
        jTable11.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1), jTable11.getSelectedRow(), 2);
        //  }else{
        //      if (jTable11.getSelectedColumn() == 2) {
        //          jTable11.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),1),jTable11.getSelectedRow(), 2);
        //      }
        //  }

        jSearchDialog.dispose();

        // Add your handling code here:

    }//GEN-LAST:event_jSearchTableMouseClicked

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        this.jSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jTextField11CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11CaretUpdate
        if (jTextField11.getCaretPosition() < 3) {

            System.out.println("Nothing");
        } else {
            //
            jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, " SELECT department_name,income_account from pb_departments WHERE department_name IN(select store_name from st_stores)  AND department_name ilike '%" + jTextField11.getText() + "%'"
                    + "UNION select store_name,cs_code from st_stores where store_name NOT LIKE '%PHARMACY%' AND cs_code ilike '600%' AND store_name ilike '%" + jTextField11.getText() + "%'"));
            //jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select activity, code FROM pb_activity WHERE (activity ILIKE '%pharm%' OR activity ILIKE '%supplies%' OR sub_category ILIKE '%stock%') AND activity ilike '%" + jTextField11.getText() + "%'"));

            jSearchScrollPane.setViewportView(jSearchTable);

            System.out.println("Listed The Stock Outlets");

        }        // Add your handling code here:
    }//GEN-LAST:event_jTextField11CaretUpdate

    private void jTable11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable11MouseClicked

        if (jTable11.getSelectedColumn() == 0) {

            this.cmbox1MouseClicked();
        } else {
            if (jTable11.getSelectedColumn() == 3) {
            } else {
                this.cmboxMouseClicked();
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jTable11MouseClicked
    private void cmboxMouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = this.jScrollPane21.getLocationOnScreen();
        jSearchDialog.setSize(400, 200);
        jSearchDialog.setLocation(point);
        jSearchDialog.setVisible(true);

    }

    private void cmbox1MouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = this.jScrollPane21.getLocationOnScreen();
        jSearchDialog1.setSize(400, 200);
        jSearchDialog1.setLocation(point);
        jSearchDialog1.setVisible(true);

    }

    private void cmboxMouseClicked1() {

        System.out.println("Showing dialog");
        java.awt.Point point = jTable12.getLocationOnScreen();
        jSearchDialog3.setSize(400, 200);
        jSearchDialog3.setLocation(point);
        jSearchDialog3.setVisible(true);

    }

    private void cmbox1MouseClicked1() {

        System.out.println("Showing dialog");
        java.awt.Point point = jTable12.getLocationOnScreen();
        jSearchDialog2.setSize(400, 200);
        jSearchDialog2.setLocation(point);
        jSearchDialog2.setVisible(true);

    }

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        /*
         * for (int k = 0; k < jTable11.getRowCount(); k++ ) { for (int r = 0; r
         * < jTable11.getColumnCount(); r++ ) {
         * jTable11.getModel().setValueAt(null,k,r); } } int i = 0;
         *
         * try {
         *
         * java.sql.Statement stmtTable1 = connectDB.createStatement();
         *
         * java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select
         * user_name, stores, store_gl_account from store_allocation where type
         * ilike 'bill' order by user_name");
         *
         * // java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select
         * stores, user_name, store_gl_account from store_allocation type ilike
         * 'bill'");
         *
         * while (rsetTable1.next()) {
         *
         * System.out.println("Working at table row "+i);
         * jTable11.setValueAt(rsetTable1.getObject(1), i, 0);
         * jTable11.setValueAt(rsetTable1.getObject(2), i, 1);
         * jTable11.setValueAt(rsetTable1.getObject(3), i, 2);
         *
         * i++;
         *
         * }
         *
         *
         * } catch(java.sql.SQLException sqlExec) {
         *
         * javax.swing.JOptionPane.showMessageDialog(this,
         * sqlExec.getMessage());
         *
         * }
         */

        jTable11.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct user_name, stores, store_gl_account,row_id from store_allocation order by user_name"));

        jButton11.setText("Update");
        update = true;
        // Add your handling code here:
    }//GEN-LAST:event_jButton21ActionPerformed

    private void jButton41ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton41ActionPerformed
        setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_jButton41ActionPerformed

    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton31ActionPerformed
        for (int k = 0; k < jTable11.getRowCount(); k++) {
            for (int r = 0; r < jTable11.getColumnCount(); r++) {
                jTable11.getModel().setValueAt(null, k, r);
            }
        }        // Add your handling code here:
    }//GEN-LAST:event_jButton31ActionPerformed

    private void jButton61ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton61ActionPerformed

        int rows2Delete = jTable11.getSelectedRowCount();

        int[] selectedRows = jTable11.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable11.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable11.getModel();

                defTableModel.removeRow(jTable11.getSelectedRow());
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jButton61ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        String storeCode = null;
        int j = 0;
        try {
            connectDB.setAutoCommit(false);

            for (int i = 0; i < jTable11.getRowCount(); i++) {

                if (jTable11.getModel().getValueAt(i, 0) != null) {

                    //check if exists
                    java.sql.Statement st = connectDB.createStatement();
                    ResultSet rset = st.executeQuery("select count(*) from store_allocation where user_name = '" + jTable11.getModel().getValueAt(i, 0) + "'");
                    int count = 0;
                    while (rset.next()) {

                        count = Integer.valueOf(rset.getObject(1).toString());

                    }

                    if (count == 0) {

                        if (!update) {
                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into store_allocation values(?,?,?,?)");

                            pstmt.setObject(1, jTable11.getValueAt(i, 1).toString());
                            pstmt.setObject(2, jTable11.getValueAt(i, 0).toString());
                            pstmt.setObject(3, jTable11.getValueAt(i, 2).toString());
                            pstmt.setObject(4, "Bill");
                            pstmt.executeUpdate();
                            // javax.swing.JOptionPane.showMessageDialog(this, "Store allocation registered successfully.");
                        }
                    } else {
                        java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("UPDATE store_allocation SET store_gl_account = '" + jTable11.getModel().getValueAt(i, 2).toString() + "', stores = '" + jTable11.getModel().getValueAt(i, 1).toString() + "', type='Bill' WHERE user_name ILIKE '" + jTable11.getModel().getValueAt(i, 0).toString() + "'");
                        //java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("UPDATE store_allocation SET store_gl_account = '" + jTable11.getModel().getValueAt(i, 2).toString() + "',stores = '" + jTable11.getModel().getValueAt(i, 1).toString() + "' WHERE row_id = '" + jTable11.getModel().getValueAt(i, 3).toString() + "'");

                        pstmt31.executeUpdate();

                    }
                }

            }

            javax.swing.JOptionPane.showMessageDialog(this, "Store allocation updated successfully.");

            jButton11.setText("Allocate staff to pharmacy/stock outlet");
            update = false;

            connectDB.commit();
            connectDB.setAutoCommit(true);
            //            crset1.execute();
            jLabel7.setForeground(java.awt.Color.blue);
            jLabel7.setText("Insert successful");

            for (int k = 0; k < jTable11.getRowCount(); k++) {
                for (int r = 0; r < jTable11.getColumnCount(); r++) {
                    jTable11.getModel().setValueAt(null, k, r);
                }
            }
            //  jComboBox2.setSelectedItem(null);
        } catch (java.sql.SQLException sq) {
            sq.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage());
            try {
                connectDB.rollback();

            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            // javax.swing.JOptionPane.showMessageDialog(this,sq.getMessage(), "Error",javax.swing.JOptionPane.ERROR_MESSAGE);

        }         // Add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jTextField112CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField112CaretUpdate
        if (jTextField112.getCaretPosition() < 2) {

            System.out.println("Nothing");
        } else {
            jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select usename FROM pg_user WHERE usename ILIKE '" + jTextField112.getText() + "%' order by usename"));

            jSearchScrollPane2.setViewportView(jSearchTable2);
            System.out.println("Cannot sort out");

        }        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField112CaretUpdate

    private void jSearchTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2MouseClicked
        jTable12.setValueAt(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0), jTable12.getSelectedRow(), 0);
        //   jTable12.setValueAt(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(),1),jTable12.getSelectedRow(), 2);
        //  }else{
        //      if (jTable11.getSelectedColumn() == 2) {
        //          jTable11.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),1),jTable11.getSelectedRow(), 2);
        //      }
        //  }

        jSearchDialog2.dispose();         // TODO add your handling code here:
    }//GEN-LAST:event_jSearchTable2MouseClicked

    private void jButton92ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton92ActionPerformed
        this.jSearchDialog2.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton92ActionPerformed

    private void jTextField12CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField12CaretUpdate
        if (jTextField12.getCaretPosition() > 2) {

            jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,
                    "select distinct on(store_name) upper(store_name) as store_name, code from"
                    + " st_main_stores where store_name ilike '%" + jTextField12.getText() + "%'"
                    + " union all select  distinct on(store_name) upper(store_name) as store_name, store_code as code "
                    + "from st_stores where store_name ilike '%" + jTextField12.getText() + "%' ORDER BY store_name"));

            jSearchScrollPane3.setViewportView(jSearchTable3);
            System.out.println("Cannot sort out");

        }        // Add your handling code here:
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField12CaretUpdate

    private void jSearchTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable3MouseClicked
        jTable12.setValueAt(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 0), jTable12.getSelectedRow(), 1);
        jTable12.setValueAt(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 1), jTable12.getSelectedRow(), 2);
        //  }else{
        //      if (jTable11.getSelectedColumn() == 2) {
        //          jTable11.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(),1),jTable11.getSelectedRow(), 2);
        //      }
        //  }

        jSearchDialog3.dispose();         // TODO add your handling code here:
    }//GEN-LAST:event_jSearchTable3MouseClicked

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        this.jSearchDialog3.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton52ActionPerformed

    private void jButton42ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton42ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton42ActionPerformed

    private void jButton32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton32ActionPerformed
        for (int k = 0; k < jTable12.getRowCount(); k++) {
            for (int r = 0; r < jTable12.getColumnCount(); r++) {
                jTable12.getModel().setValueAt(null, k, r);
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton32ActionPerformed

    private void jButton62ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton62ActionPerformed
        int rows2Delete = jTable12.getSelectedRowCount();

        int[] selectedRows = jTable12.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable12.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable12.getModel();

                defTableModel.removeRow(jTable12.getSelectedRow());
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton62ActionPerformed

    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed
        for (int k = 0; k < jTable12.getRowCount(); k++) {
            for (int r = 0; r < jTable12.getColumnCount(); r++) {
                jTable12.getModel().setValueAt(null, k, r);
            }
        }
        int i = 0;

        try {

            java.sql.Statement stmtTable1 = connectDB.createStatement();

            java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select stores, user_name, store_gl_account, type from store_allocation where type not ilike 'bill%'");

            while (rsetTable1.next()) {

                System.out.println("Working at table row " + i);
                jTable12.setValueAt(rsetTable1.getObject(1), i, 1);
                jTable12.setValueAt(rsetTable1.getObject(2), i, 0);
                jTable12.setValueAt(rsetTable1.getObject(3), i, 2);
                jTable12.setValueAt(rsetTable1.getObject(4), i, 3);

                i++;

            }

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }         // TODO add your handling code here:
    }//GEN-LAST:event_jButton22ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        String storeCode = null;
        int j = 0;
        try {
            connectDB.setAutoCommit(false);

            java.sql.Statement st1 = connectDB.createStatement();
            ResultSet rset1 = st1.executeQuery("select count(user_name) from store_allocation where user_name = '" + jTable12.getModel().getValueAt(j, 0) + "' ");
            int counta = 0;
            while (rset1.next()) {

                counta = Integer.valueOf(rset1.getObject(1).toString());
                System.out.println(jTable12.getModel().getValueAt(j, 0) + "'s Pharmacy rights are " + counta);

                j++;

            }
            if (counta > 0) {
                java.sql.PreparedStatement pstmt31b = connectDB.prepareStatement("DELETE FROM store_allocation WHERE user_name ILIKE '" + jTable12.getModel().getValueAt(j, 0).toString() + "'    ");
                //or stores NOT LIKE '"+jTable12.getValueAt(j, 1)+"'
                pstmt31b.executeUpdate();

            }

            for (int i = 0; i < jTable12.getRowCount(); i++) {

                if (jTable12.getModel().getValueAt(i, 0) != null) {

                    //check if exists
                    java.sql.Statement st = connectDB.createStatement();
                    ResultSet rset = st.executeQuery("select count(*) from store_allocation where user_name = '" + jTable12.getModel().getValueAt(i, 0) + "' and type= '" + jTable12.getValueAt(i, 3).toString() + "' ");
                    int count = 0;
                    while (rset.next()) {

                        count = Integer.valueOf(rset.getObject(1).toString());
                        System.out.println(count);

                    }

                    if (count == 0) {
                        if (j <= 0) {

                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into store_allocation values(?,?,?,?)");

                            pstmt.setObject(1, jTable12.getValueAt(i, 1).toString());
                            pstmt.setObject(2, jTable12.getValueAt(i, 0).toString());
                            pstmt.setObject(3, jTable12.getValueAt(i, 2).toString());
                            pstmt.setObject(4, jTable12.getValueAt(i, 3).toString());

                            pstmt.executeUpdate();
                        }

                    } else {

                        java.sql.PreparedStatement pstmt31 = connectDB.prepareStatement("UPDATE store_allocation SET stores = '" + jTable12.getModel().getValueAt(i, 1).toString() + "',store_gl_account = '" + jTable12.getModel().getValueAt(i, 2).toString() + "', type = '" + jTable12.getModel().getValueAt(i, 3).toString() + "'  WHERE user_name ILIKE '" + jTable12.getModel().getValueAt(i, 0).toString() + "'");
                        pstmt31.executeUpdate();

                    }
                }

            }
            connectDB.commit();
            connectDB.setAutoCommit(true);
            //            crset1.execute();
            jLabel7.setForeground(java.awt.Color.blue);
            jLabel7.setText("Insert successful");

            for (int k = 0; k < jTable12.getRowCount(); k++) {
                for (int r = 0; r < jTable12.getColumnCount(); r++) {
                    jTable12.getModel().setValueAt(null, k, r);
                }
            }
            //  jComboBox2.setSelectedItem(null);
        } catch (java.sql.SQLException sq) {

            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            // javax.swing.JOptionPane.showMessageDialog(this,sq.getMessage(), "Error",javax.swing.JOptionPane.ERROR_MESSAGE);

        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jTable12MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable12MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable12MouseEntered

    private void jTable12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable12MouseClicked
        if (jTable12.getSelectedColumn() == 0) {

            this.cmbox1MouseClicked1();
        } else {
            this.cmboxMouseClicked1();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jTable12MouseClicked

    private void userTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userTxtActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        // TODO add your handling code here:
        System.out.println("Showing dialog");
        java.awt.Point point = userTxt.getLocationOnScreen();
        userdialog.setSize(400, 200);
        userdialog.setLocation(point);
        userdialog.setVisible(true);
    }//GEN-LAST:event_jButton23ActionPerformed

    private void moduleTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moduleTblMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_moduleTblMouseClicked

    private void moduleTblMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_moduleTblMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_moduleTblMouseEntered

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed

        try {
            // TODO add your handling code here:
            if (superUserCmbx.isSelected()) {

                PreparedStatement pst = connectDB.prepareStatement("DELETE  FROM store_allocation WHERE user_name ='" + userTxt.getText() + "' and stores ilike '" + storeCmbx.getSelectedItem() + "' ");
                pst.executeUpdate();

                for (int i = 0; i < moduleTbl.getRowCount(); i++) {
                    if (moduleTbl.getValueAt(i, 1) == java.lang.Boolean.TRUE) {
                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into store_allocation values(?,?,?,?)");

                        pstmt.setObject(1, storeCmbx.getSelectedItem().toString());
                        pstmt.setObject(2, userTxt.getText().toString());
                        pstmt.setObject(3, storeGLtxt.getText().toString());
                        pstmt.setObject(4, moduleTbl.getValueAt(i, 0).toString());

                        pstmt.executeUpdate();
                        GetItemInfo.updateTrail("Store Allocation to " + userTxt.getText() + " in " + storeCmbx.getSelectedItem().toString() + " right " + moduleTbl.getValueAt(i, 0).toString(), connectDB);

                        // connectDB.commit();

                    }
                }

                JOptionPane.showMessageDialog(this, userTxt.getText() + "'s Rights Have Been Inserted Succesfully", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);

                activityChbx.doClick();

            } else {
                PreparedStatement pst = connectDB.prepareStatement("DELETE  FROM store_allocation WHERE user_name ='" + userTxt.getText() + "' ");
                pst.executeUpdate();

                for (int i = 0; i < moduleTbl.getRowCount(); i++) {
                    if (moduleTbl.getValueAt(i, 1) == java.lang.Boolean.TRUE) {
                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into store_allocation values(?,?,?,?)");

                        pstmt.setObject(1, storeCmbx.getSelectedItem().toString());
                        pstmt.setObject(2, userTxt.getText().toString());
                        pstmt.setObject(3, storeGLtxt.getText().toString());
                        pstmt.setObject(4, moduleTbl.getValueAt(i, 0).toString());

                        pstmt.executeUpdate();
                        GetItemInfo.updateTrail("Store Allocation to " + userTxt.getText() + " in " + storeCmbx.getSelectedItem().toString() + " right " + moduleTbl.getValueAt(i, 0).toString(), connectDB);

                        // connectDB.commit();
                    }
                }
                JOptionPane.showMessageDialog(this, userTxt.getText() + "'s Rights Have Been Updated Succesfully", "INFORMATION", JOptionPane.INFORMATION_MESSAGE);

                activityChbx.doClick();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            Logger.getLogger(PharmacyPointsIntfr.class.getName()).log(Level.SEVERE, null, ex);
            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

            try {
                connectDB.rollback();
            } catch (SQLException ex1) {
            }

        }


    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton63ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton63ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton63ActionPerformed

    private void jButton53ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton53ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton53ActionPerformed

    private void tenderrecordstxt4CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_tenderrecordstxt4CaretUpdate
        // TODO add your handling code here:
        if (tenderrecordstxt4.getCaretPosition() == 0) {
        } else {
            tenderrecordstbl4.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT DISTINCT quotation_no FROM st_orders WHERE quotation_no ILIKE '" + tenderrecordstxt4.getText().toString() + "%' "
                    + "and ordered=false and order_no IS NULL  ORDER BY 1"));
            tenderrecordstbl4.setShowHorizontalLines(true);
            tenderrecordsspnl4.setViewportView(tenderrecordstbl4);

        }
    }//GEN-LAST:event_tenderrecordstxt4CaretUpdate

    private void tenderrecordstxt4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tenderrecordstxt4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tenderrecordstxt4ActionPerformed

    private void tenderrecordstbl4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tenderrecordstbl4MouseClicked
        // TODO add your handling code here:
        //        jLabel55.setText(null);
        userTxt.setText(tenderrecordstbl4.getModel().getValueAt(tenderrecordstbl4.getSelectedRow(), 0).toString());
//        itemTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct supplier CONTRACTOR, false Tick from st_orders where quotation_no = '"+userTxt.getText().toString()+"'  AND ordered = false and supplier IN (select distinct supplier from st_contract_mgt) group by 1  "));
        this.searchtenderc.dispose();
    }//GEN-LAST:event_tenderrecordstbl4MouseClicked

    private void closebtn10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closebtn10ActionPerformed
        // TODO add your handling code here:
        this.searchtenderc.dispose();
    }//GEN-LAST:event_closebtn10ActionPerformed

    private void searchtendercFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_searchtendercFocusLost
        // TODO add your handling code here:
        this.searchtenderc.dispose();
    }//GEN-LAST:event_searchtendercFocusLost

    private void storeCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_storeCmbxActionPerformed
        // TODO add your handling code here:
        storeGLtxt.setText(GetItemInfo.getStoreGL(storeCmbx.getSelectedItem().toString(), connectDB));
        activityChbx.doClick();
    }//GEN-LAST:event_storeCmbxActionPerformed

    private void storeGLtxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_storeGLtxtCaretUpdate
        // TODO add your handling code here:
//        if(storeGLtxt.getText().length()<1){
//            JOptionPane.showMessageDialog(this,"User Not Allocated ", "Error", JOptionPane.ERROR_MESSAGE);
//        }
    }//GEN-LAST:event_storeGLtxtCaretUpdate

    private void usersearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_usersearchTxtCaretUpdate
        // TODO add your handling code here:
        if (usersearchTxt.getCaretPosition() > 3) {

//            System.out.println("Nothing");
//        } else {
            jSearchTable4.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select usename FROM pg_user WHERE usename ILIKE '" + usersearchTxt.getText() + "%' order by usename"));

            jSearchScrollPane4.setViewportView(jSearchTable4);

        }
    }//GEN-LAST:event_usersearchTxtCaretUpdate

    private void jSearchTable4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable4MouseClicked
        // TODO add your handling code here:
        userTxt.setText(jSearchTable4.getValueAt(jSearchTable4.getSelectedRow(), 0).toString());
        storeCmbx.setSelectedItem(com.afrisoftech.lib.UserName.getUserAllocatedStore(connectDB, userTxt.getText()));
        userdialog.dispose();

        if (storeGLtxt.getText().length() > 0) {

            activityChbx.doClick();
            try {
                PreparedStatement pst = connectDB.prepareStatement("SELECT COUNT (distinct stores) from store_allocation where user_name ='" + userTxt.getText() + "'");
                ResultSet rset = pst.executeQuery();
                int count = 0;
                while (rset.next()) {

                    count = rset.getInt(1);
                }

                if (count > 1) {

                    System.out.println(count + ">>>Superuser");
                    superUserCmbx.setSelected(true);

                } else {
                    System.out.println(count + ">>>Superuser");
                }
                superUserCmbx.setSelected(false);

            } catch (SQLException ex) {
                Logger.getLogger(PharmacyPointsIntfr.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_jSearchTable4MouseClicked

    private void jButton93ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton93ActionPerformed
        // TODO add your handling code here:
        userdialog.dispose();
    }//GEN-LAST:event_jButton93ActionPerformed
    private int getAvailableRights(String item) {
        int count = 0;
        try {

            PreparedStatement pst = connectDB.prepareStatement("SELECT COUNT(*) from store_allocation where user_name ='" + userTxt.getText() + "' and type='" + item + "' and stores ilike '" + storeCmbx.getSelectedItem() + "' ");
            ResultSet rset = pst.executeQuery();
            while (rset.next()) {

                count = rset.getInt(1);

            }

        } catch (SQLException ex) {
            Logger.getLogger(PharmacyPointsIntfr.class.getName()).log(Level.SEVERE, null, ex);
        }
        return count;

    }
    private void activityChbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activityChbxActionPerformed

        jButton13.setEnabled(true);
        ;
        ClearTable.clearthisTable(moduleTbl);

        if (centralStoresCmbx.isSelected()) {
            java.lang.Object[] strCmb1 = {"Direct Purchasing", "Stock Reconciliation", "Stock Addition", "Issuing Stockable Items", "Stock Price Setup", "Raise Requisitions", "Approve IRQ", "Approve PRQ/SRQ"};
            for (int i = 0; i < strCmb1.length; i++) {

                moduleTbl.setValueAt(strCmb1[i], i, 0);
                moduleTbl.setValueAt(false, i, 1);

            }

        } else {
            java.lang.Object[] strCmb1 = {"Approve IRQ", "Bill", "Direct Purchasing", "Issuing Stockable Items", "Raise Requisitions", "Stock Reconciliation"};
            for (int i = 0; i < strCmb1.length; i++) {

                moduleTbl.setValueAt(strCmb1[i], i, 0);
                moduleTbl.setValueAt(false, i, 1);

            }

        }

        for (int j = 0; j < moduleTbl.getRowCount(); j++) {
            if (moduleTbl.getValueAt(j, 0) != null) {

                if (getAvailableRights(moduleTbl.getValueAt(j, 0).toString()) > 0) {

                    moduleTbl.setValueAt(true, j, 1);

                }

            }

        }


    }//GEN-LAST:event_activityChbxActionPerformed

    private void substoreCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_substoreCmbxActionPerformed
        // TODO add your handling code here:
        storeGLtxt.setText(null);
        ClearTable.clearthisTable(moduleTbl);
        // storeCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT  '-' UNION SELECT  distinct  initcap(department_name) from pb_departments WHERE department_name IN(select store_name from st_stores) and department_name not IN(select store_name from st_main_stores)  ORDER BY 1"));
        storeCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT  '-' UNION SELECT  distinct  initcap(department_name) from pb_departments WHERE department_name not IN(select store_name from st_main_stores) UNION SELECT distinct initcap(store_name) from st_stores ORDER BY 1"));
        activityChbx.doClick();
    }//GEN-LAST:event_substoreCmbxActionPerformed

    private void centralStoresCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_centralStoresCmbxActionPerformed
        // TODO add your handling code here:
        storeGLtxt.setText(null);
        ClearTable.clearthisTable(moduleTbl);
        storeCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '-' UNION SELECT distinct  upper(store_name) as store_name from st_main_stores ORDER BY 1"));
        activityChbx.doClick();
    }//GEN-LAST:event_centralStoresCmbxActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox activityChbx;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox centralStoresCmbx;
    private javax.swing.JButton closebtn10;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton jButton32;
    private javax.swing.JButton jButton41;
    private javax.swing.JButton jButton42;
    private javax.swing.JButton jButton51;
    private javax.swing.JButton jButton52;
    private javax.swing.JButton jButton53;
    private javax.swing.JButton jButton61;
    private javax.swing.JButton jButton62;
    private javax.swing.JButton jButton63;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButton91;
    private javax.swing.JButton jButton92;
    private javax.swing.JButton jButton93;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel59;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JDialog jSearchDialog1;
    private javax.swing.JDialog jSearchDialog2;
    private javax.swing.JDialog jSearchDialog3;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jSearchPanel1;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JPanel jSearchPanel3;
    private javax.swing.JPanel jSearchPanel4;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane1;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JScrollPane jSearchScrollPane3;
    private javax.swing.JScrollPane jSearchScrollPane4;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTable jSearchTable1;
    private javax.swing.JTable jSearchTable2;
    private javax.swing.JTable jSearchTable3;
    private javax.swing.JTable jSearchTable4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable11;
    private javax.swing.JTable jTable12;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JTextField jTextField112;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTable moduleTbl;
    private javax.swing.JDialog searchtenderc;
    private javax.swing.JComboBox storeCmbx;
    private javax.swing.JTextField storeGLtxt;
    private javax.swing.JCheckBox substoreCmbx;
    private javax.swing.JCheckBox superUserCmbx;
    private javax.swing.JPanel tenderrecordspnl4;
    private javax.swing.JScrollPane tenderrecordsspnl4;
    private javax.swing.JTable tenderrecordstbl4;
    private javax.swing.JTextField tenderrecordstxt4;
    private javax.swing.JTextField userTxt;
    private javax.swing.JDialog userdialog;
    private javax.swing.JTextField usersearchTxt;
    // End of variables declaration//GEN-END:variables
}
