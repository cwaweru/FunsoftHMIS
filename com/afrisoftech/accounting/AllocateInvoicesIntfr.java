/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */
package com.afrisoftech.accounting;

/**
 *
 * @author root
 */
public class AllocateInvoicesIntfr extends javax.swing.JInternalFrame {

    /**
     * Creates new form loanpymntintfr
     */
    javax.swing.table.TableModel tableModel = null;
    // javax.swing.table.TableModel tableModel1 = null;
    boolean controlFlag = true;
    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;

    public AllocateInvoicesIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton51 = new javax.swing.JButton();
        receiptSearchDialog = new javax.swing.JDialog();
        receiptSearchPanel = new javax.swing.JPanel();
        receiptSearchTxt = new javax.swing.JTextField();
        receiptSearchScrollPane = new javax.swing.JScrollPane();
        receiptSearchTable = new com.afrisoftech.dbadmin.JTable();
        dialogCloseBtn = new javax.swing.JButton();
        claimSearchDialog = new javax.swing.JDialog();
        claimSearchPanel = new javax.swing.JPanel();
        claimInvoiceSearchTxt = new javax.swing.JTextField();
        claimSearchScrollPane = new javax.swing.JScrollPane();
        claimSearchTable = new com.afrisoftech.dbadmin.JTable();
        claimSearchdialogCloseBtn = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        alocationPane = new javax.swing.JPanel();
        allocationPanel = new javax.swing.JPanel();
        allocationScrollPane = new javax.swing.JScrollPane();
        allocationTable = new com.afrisoftech.dbadmin.JXTable()
        /*new javax.swing.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class,java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true, true, false, false,true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        */;
        jLabel4 = new javax.swing.JLabel();
        allocatableBalanceTxt = new javax.swing.JTextField();
        allocationHeaderPanel = new javax.swing.JPanel();
        receiptNumberLbl = new javax.swing.JLabel();
        schemeNameLbl = new javax.swing.JLabel();
        jPanel22 = new javax.swing.JPanel();
        schemeNameTxt = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        schemeAccountNumberLbl = new javax.swing.JLabel();
        schemeAccountNumberTxt = new javax.swing.JTextField();
        beginDatePicker = new com.afrisoftech.lib.DatePicker();
        endDatePicker = new com.afrisoftech.lib.DatePicker();
        confirmPeriodChkbx = new javax.swing.JCheckBox();
        beginDateLbl = new javax.swing.JLabel();
        endDateLbl = new javax.swing.JLabel();
        receiptNumberPanel = new javax.swing.JPanel();
        receiptNumberTxt = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        schemeManagerLbl = new javax.swing.JLabel();
        schemeManagerTxt = new javax.swing.JTextField();
        receiptDetailsPanel = new javax.swing.JPanel();
        chequeNumberLbl = new javax.swing.JLabel();
        checkNumberTxt = new javax.swing.JTextField();
        allocatableAmountLbl = new javax.swing.JLabel();
        allocatableAmountTxt = new javax.swing.JTextField();
        receiptDateLbl = new javax.swing.JLabel();
        receiptDatePicker = new com.afrisoftech.lib.DatePicker();
        searchClaimNumberPanel = new javax.swing.JPanel();
        claimNumberTxt = new javax.swing.JTextField();
        searchClaimNumberButton = new javax.swing.JButton();
        allocatedAmountLbl = new javax.swing.JLabel();
        allocatedAmountTxt = new javax.swing.JTextField();
        actionPanel = new javax.swing.JPanel();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        allocateBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        clearFormBtn = new javax.swing.JButton();
        cancelAllocationBtn = new javax.swing.JButton();
        closeFormBtn = new javax.swing.JButton();
        spacerLbl = new javax.swing.JLabel();

        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel.add(jTextField111, gridBagConstraints);

        jSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton51.setText("Dispose");
        jButton51.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton51ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton51, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        receiptSearchDialog.setModal(true);
        receiptSearchDialog.setUndecorated(true);
        receiptSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        receiptSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        receiptSearchPanel.setLayout(new java.awt.GridBagLayout());

        receiptSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                receiptSearchTxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        receiptSearchPanel.add(receiptSearchTxt, gridBagConstraints);

        receiptSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
        receiptSearchTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        receiptSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                receiptSearchTableMouseClicked(evt);
            }
        });
        receiptSearchScrollPane.setViewportView(receiptSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        receiptSearchPanel.add(receiptSearchScrollPane, gridBagConstraints);

        dialogCloseBtn.setText("Dispose");
        dialogCloseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dialogCloseBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        receiptSearchPanel.add(dialogCloseBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        receiptSearchDialog.getContentPane().add(receiptSearchPanel, gridBagConstraints);

        claimSearchDialog.setModal(true);
        claimSearchDialog.setUndecorated(true);
        claimSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        claimSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        claimSearchPanel.setLayout(new java.awt.GridBagLayout());

        claimInvoiceSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                claimInvoiceSearchTxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        claimSearchPanel.add(claimInvoiceSearchTxt, gridBagConstraints);

        claimSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
        claimSearchTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        claimSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                claimSearchTableMouseClicked(evt);
            }
        });
        claimSearchScrollPane.setViewportView(claimSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        claimSearchPanel.add(claimSearchScrollPane, gridBagConstraints);

        claimSearchdialogCloseBtn.setText("Dispose");
        claimSearchdialogCloseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                claimSearchdialogCloseBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        claimSearchPanel.add(claimSearchdialogCloseBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        claimSearchDialog.getContentPane().add(claimSearchPanel, gridBagConstraints);

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Allocate Scheme Invoices");
        setFrameIcon(null);
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jSeparator1, gridBagConstraints);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jLabel7, gridBagConstraints);

        jTextField6.setEditable(false);
        jTextField6.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField6.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jTextField6, gridBagConstraints);

        alocationPane.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        alocationPane.setLayout(new java.awt.GridBagLayout());

        allocationPanel.setLayout(new java.awt.GridBagLayout());

        tableModel = allocationTable.getModel();

        tableModel.addTableModelListener(new javax.swing.event.TableModelListener() {

            public void tableChanged(javax.swing.event.TableModelEvent evt) {

                tableModelTableChanged(evt);

            }

        });
        allocationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Inv. No", "Patient No.", "Inv. Amount", "Amt. To Alloc", "Balance", "Allocate", "Patient Name", "Claim Number", "Member No"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        allocationTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                allocationTableMouseClicked(evt);
            }
        });
        allocationTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                allocationTableKeyReleased(evt);
            }
        });
        allocationScrollPane.setViewportView(allocationTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        allocationPanel.add(allocationScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        alocationPane.add(allocationPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(alocationPane, gridBagConstraints);

        jLabel4.setText("Allocatable Balance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        getContentPane().add(jLabel4, gridBagConstraints);

        allocatableBalanceTxt.setEditable(false);
        allocatableBalanceTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        allocatableBalanceTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(allocatableBalanceTxt, gridBagConstraints);

        allocationHeaderPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.blue, java.awt.Color.magenta, null, null));
        allocationHeaderPanel.setLayout(new java.awt.GridBagLayout());

        receiptNumberLbl.setText("Receipt No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        allocationHeaderPanel.add(receiptNumberLbl, gridBagConstraints);

        schemeNameLbl.setText("Scheme");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        allocationHeaderPanel.add(schemeNameLbl, gridBagConstraints);

        jPanel22.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel22.setLayout(new java.awt.GridBagLayout());

        schemeNameTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel22.add(schemeNameTxt, gridBagConstraints);

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/Find 2.png"))); // NOI18N
        searchButton.setToolTipText("Search");
        searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel22.add(searchButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        allocationHeaderPanel.add(jPanel22, gridBagConstraints);

        schemeAccountNumberLbl.setText("Acc No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        allocationHeaderPanel.add(schemeAccountNumberLbl, gridBagConstraints);

        schemeAccountNumberTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        allocationHeaderPanel.add(schemeAccountNumberTxt, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        allocationHeaderPanel.add(beginDatePicker, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        allocationHeaderPanel.add(endDatePicker, gridBagConstraints);

        confirmPeriodChkbx.setText("Confirm Period");
        confirmPeriodChkbx.setToolTipText("Click To View Invoices");
        confirmPeriodChkbx.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        confirmPeriodChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        confirmPeriodChkbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmPeriodChkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        allocationHeaderPanel.add(confirmPeriodChkbx, gridBagConstraints);

        beginDateLbl.setText("Period From");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        allocationHeaderPanel.add(beginDateLbl, gridBagConstraints);

        endDateLbl.setText("Period To");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        allocationHeaderPanel.add(endDateLbl, gridBagConstraints);

        receiptNumberPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        receiptNumberPanel.setLayout(new java.awt.GridBagLayout());

        receiptNumberTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        receiptNumberPanel.add(receiptNumberTxt, gridBagConstraints);

        searchButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/Find 2.png"))); // NOI18N
        searchButton1.setToolTipText("Search");
        searchButton1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton1.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton1.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        receiptNumberPanel.add(searchButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        allocationHeaderPanel.add(receiptNumberPanel, gridBagConstraints);

        schemeManagerLbl.setText("Scheme Manager");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        allocationHeaderPanel.add(schemeManagerLbl, gridBagConstraints);

        schemeManagerTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
        allocationHeaderPanel.add(schemeManagerTxt, gridBagConstraints);

        receiptDetailsPanel.setLayout(new java.awt.GridBagLayout());

        chequeNumberLbl.setText("Cheque No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        receiptDetailsPanel.add(chequeNumberLbl, gridBagConstraints);

        checkNumberTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        receiptDetailsPanel.add(checkNumberTxt, gridBagConstraints);

        allocatableAmountLbl.setText("Cheque Allocatable Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        receiptDetailsPanel.add(allocatableAmountLbl, gridBagConstraints);

        allocatableAmountTxt.setEditable(false);
        allocatableAmountTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        allocatableAmountTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        receiptDetailsPanel.add(allocatableAmountTxt, gridBagConstraints);

        receiptDateLbl.setText("Cheque Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        receiptDetailsPanel.add(receiptDateLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        receiptDetailsPanel.add(receiptDatePicker, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        allocationHeaderPanel.add(receiptDetailsPanel, gridBagConstraints);

        searchClaimNumberPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Claim/Invoice Search"));
        searchClaimNumberPanel.setLayout(new java.awt.GridBagLayout());

        claimNumberTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        searchClaimNumberPanel.add(claimNumberTxt, gridBagConstraints);

        searchClaimNumberButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/Find 2.png"))); // NOI18N
        searchClaimNumberButton.setToolTipText("Search");
        searchClaimNumberButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchClaimNumberButton.setMaximumSize(new java.awt.Dimension(74, 53));
        searchClaimNumberButton.setMinimumSize(new java.awt.Dimension(74, 53));
        searchClaimNumberButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchClaimNumberButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchClaimNumberButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        searchClaimNumberPanel.add(searchClaimNumberButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        allocationHeaderPanel.add(searchClaimNumberPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(allocationHeaderPanel, gridBagConstraints);

        allocatedAmountLbl.setText("Allocated Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        getContentPane().add(allocatedAmountLbl, gridBagConstraints);

        allocatedAmountTxt.setEditable(false);
        allocatedAmountTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        allocatedAmountTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        getContentPane().add(allocatedAmountTxt, gridBagConstraints);

        actionPanel.setLayout(new java.awt.GridBagLayout());

        allocateBtn.setMnemonic('O');
        allocateBtn.setText("Allocate invoice amounts");
        allocateBtn.setToolTipText("Click here enter data");
        allocateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allocateBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        actionPanel.add(allocateBtn, gridBagConstraints);

        cancelBtn.setText("Cancel Invoice");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        actionPanel.add(cancelBtn, gridBagConstraints);

        clearFormBtn.setMnemonic('l');
        clearFormBtn.setText("Clear");
        clearFormBtn.setToolTipText("Click here to clear textfields");
        clearFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        actionPanel.add(clearFormBtn, gridBagConstraints);

        cancelAllocationBtn.setText("Cancel All");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        actionPanel.add(cancelAllocationBtn, gridBagConstraints);

        closeFormBtn.setMnemonic('C');
        closeFormBtn.setText("Close");
        closeFormBtn.setToolTipText("Click here to close window");
        closeFormBtn.setActionCommand("Close form");
        closeFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        actionPanel.add(closeFormBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        actionPanel.add(spacerLbl, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(actionPanel, gridBagConstraints);

        setBounds(0, 0, 770, 428);
    }// </editor-fold>//GEN-END:initComponents

    private void allocationTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_allocationTableKeyReleased
        double resFloat = 0.00;
        //  double totalSum = 0.00;
        double floatTotal = java.lang.Double.parseDouble(allocatableAmountTxt.getText().replace(",", ""));

        if (allocationTable.getModel().getValueAt(allocationTable.getSelectedRow(), 4) != null) {
            double amtToalloc = java.lang.Double.parseDouble(allocatableBalanceTxt.getText().replace(",", ""));
            double floatCol2 = java.lang.Double.parseDouble(allocationTable.getValueAt(allocationTable.getSelectedRow(), 3).toString());

            double floatCol3 = java.lang.Double.parseDouble(allocationTable.getValueAt(allocationTable.getSelectedRow(), 4).toString());
            double balance = java.lang.Double.parseDouble(allocationTable.getValueAt(allocationTable.getSelectedRow(), 5).toString());

            if (floatCol3 <= amtToalloc && amtToalloc >= 0) {

                double resVal = floatCol2 - floatCol3; // Revised to show the collect balance after part allocation :: 30-march-2009 -- Charles

                allocationTable.setValueAt(new java.lang.Float(resVal), allocationTable.getSelectedRow(), 5);
            } else if (floatCol3 > amtToalloc && amtToalloc > 0) {
                javax.swing.JOptionPane.showMessageDialog(this, "You cannot allocate amount higher than the amount to allocate", "Comfirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            }

            this.tableModelTableChanged();
        } else if (allocationTable.getModel().getValueAt(allocationTable.getSelectedRow(), 4) == null) {
            allocationTable.setValueAt(new java.lang.Double(allocationTable.getValueAt(allocationTable.getSelectedRow(), 3).toString()), allocationTable.getSelectedRow(), 5);
            this.tableModelTableChanged();
        }

        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(allocationTable, 4);
        this.allocatedAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
        double amts = java.lang.Double.parseDouble(this.allocatableAmountTxt.getText().replace(",", ""));
        this.allocatableBalanceTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(amts - totalSum));
        // Add your handling code here:
    }//GEN-LAST:event_allocationTableKeyReleased
    public void tableModelTableChanged() {
        System.out.println("Calculating totals for table 11 and 2.");
        double zeros = 0.00;
        double resFloat = java.lang.Double.parseDouble(allocatableAmountTxt.getText().replace(",", ""));;
        double resFloat1 = java.lang.Double.parseDouble(allocatableBalanceTxt.getText().replace(",", ""));;

        for (int i = 0; i < allocationTable.getRowCount(); i++) {

            if (allocationTable.getModel().getValueAt(i, 4) != null) {

                resFloat = resFloat - Double.parseDouble(allocationTable.getModel().getValueAt(i, 4).toString());

            }
        }

        if (resFloat > 0) {
            allocatableBalanceTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(resFloat));
        } else if (resFloat < 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "You cannot allocate amount higher than the Allocatable Balance", "Comfirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            allocationTable.setValueAt(new java.lang.Double(0), allocationTable.getSelectedRow(), 4);
        }

    }

    public void tableModelTableChanged(javax.swing.event.TableModelEvent evt) {

        //        double resFloat = 0.00;
        double resFloat = java.lang.Double.parseDouble(allocatableAmountTxt.getText());
        double resFloat1 = java.lang.Double.parseDouble(allocatableBalanceTxt.getText());;

        for (int i = 0; i < allocationTable.getRowCount(); i++) {

            if (allocationTable.getModel().getValueAt(i, 4) != null) {

                //   if (jTable11.getSelectedColumn() == 1) {
                resFloat = resFloat - Double.parseDouble(allocationTable.getModel().getValueAt(i, 4).toString());

                //   }
             /*   if (resFloat1> 0){
                 jTextField2.setText(java.lang.String.valueOf(resFloat));
                 } else
                 if (resFloat < 0){
                 javax.swing.JOptionPane.showMessageDialog(this,"You cannot allocate amount higher than the amount to allocate","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                 jTable1.setValueAt(new java.lang.Double(0), jTable1.getSelectedRow(), 4);
              
                 }*/
            }
        }
        if (resFloat1 > 0) {
            allocatableBalanceTxt.setText(java.lang.String.valueOf(resFloat));
        } else if (resFloat < 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "You cannot allocate amount higher than the amount to allocate", "Comfirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            allocationTable.setValueAt(new java.lang.Double(0), allocationTable.getSelectedRow(), 4);

        }

        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }
    private void dialogCloseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dialogCloseBtnActionPerformed
        receiptSearchDialog.dispose();  // Add your handling code here:
    }//GEN-LAST:event_dialogCloseBtnActionPerformed

    private void receiptSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_receiptSearchTableMouseClicked
        checkNumberTxt.setText("00");
        allocatableAmountTxt.setText("0.00");
        allocatableBalanceTxt.setText("0.00");
        allocatedAmountTxt.setText("0.00");
        receiptNumberTxt.setText(receiptSearchTable.getValueAt(receiptSearchTable.getSelectedRow(), 0).toString());
        allocatableAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(Double.parseDouble(receiptSearchTable.getValueAt(receiptSearchTable.getSelectedRow(), 1).toString())));
        allocatableBalanceTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(Double.parseDouble(receiptSearchTable.getValueAt(receiptSearchTable.getSelectedRow(), 1).toString())));
        receiptSearchDialog.dispose();

        try {
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select distinct db.cheque_no,date from ac_debtors db where db.account_no = '" + schemeAccountNumberTxt.getText() + "' AND db.receipt_no = '" + this.receiptNumberTxt.getText() + "'");
            //  java.sql.ResultSet rset1 = stmt1.executeQuery("select count(debit) from ac_cash_collection where cash_point ='"+jComboBox2.getSelectedItem()+"' and shift_no = '"+jTextField9.getText()+"'");

            while (rset.next()) {

                checkNumberTxt.setText(rset.getObject(1).toString());
                receiptDatePicker.setDate(rset.getDate(2));
            }

        } catch (java.sql.SQLException sqlExec) {
            sqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
        // Add your handling code here:
    }//GEN-LAST:event_receiptSearchTableMouseClicked

    private void receiptSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_receiptSearchTxtCaretUpdate
        System.out.println("select receipt_no, sum(credit-debit) as Balance from ac_debtors "
                + "where account_no ='" + schemeAccountNumberTxt.getText() + "'  and"
                + " receipt_no ILIKE '" + receiptSearchTxt.getText().toString() + "%' " // AND transaction_type = 'Receipts' 
                + "GROUP BY receipt_no  HAVING sum(credit - debit) > 0 order by 1");
        receiptSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                + "select receipt_no, sum(credit-debit) as Balance from ac_debtors "
                + "where account_no ='" + schemeAccountNumberTxt.getText() + "'  and"
                + " receipt_no ILIKE '" + receiptSearchTxt.getText().toString() + "%' " // AND transaction_type = 'Receipts' 
                + "GROUP BY receipt_no  HAVING sum(credit - debit) > 0 order by 1"));

        //       jSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select receipt_no, credit_bal as Balance from ac_debtors where account_no ='"+jTextField4.getText()+"' and  credit_bal > 0 and receipt_no ILIKE '"+jTextField1111.getText().toString()+"%' GROUP BY receipt_no, credit_bal, debit-credit HAVING debit - credit > 0"));
//        jSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select receipt_no,sum(credit-debit) as Balance from ac_debtors where account_no ='"+jTextField4.getText()+"' and credit_bal > 0 and receipt_no ILIKE '"+jTextField1111.getText().toString()+"%' GROUP BY receipt_no"));
        receiptSearchTable.setShowHorizontalLines(false);
        receiptSearchScrollPane.setViewportView(receiptSearchTable);
// Add your handling code here:
    }//GEN-LAST:event_receiptSearchTxtCaretUpdate

    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        searchButton1Clicked();
        // Add your handling code here:
    }//GEN-LAST:event_searchButton1ActionPerformed

    private void confirmPeriodChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmPeriodChkbxActionPerformed
        this.allocateBtn.setEnabled(true);
        for (int k = 0; k < allocationTable.getRowCount(); k++) {
            for (int r = 0; r < allocationTable.getColumnCount(); r++) {
                allocationTable.getModel().setValueAt(null, k, r);
            }
        }
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        allocatableAmountTxt.setText("0.00");
        allocatedAmountTxt.setText("0.00");

        allocationTable.setAutoCreateRowSorter(true);
        System.out.println("SELECT date, invoice_no, admission_no as patNo,balance as Invoice_Balance,"
                + "0::numeric as amt_allocated,balance::numeric as NEW_BALANCE, "
                + "null::boolean as Allocate, (select DISTINCT upper(patient_name) FROM hp_admission "
                + "WHERE hp_admission.patient_no = ac_debtors.admission_no ORDER BY 1 DESC LIMIT 1)as patient_name,"
                + " (SELECT DISTINCT trim(claim_no) FROM hp_patient_discharge"
                + " WHERE hp_patient_discharge.inv_no = ac_debtors.invoice_no LIMIT 1) as claim_no,member_no "
                + "FROM ac_debtors WHERE   account_no = '" + schemeAccountNumberTxt.getText() + "' "
                + "AND balance > 0 AND debit > 0 AND sent = true AND date between '" + this.beginDatePicker.getDate().toString() + "'"
                + " and '" + this.endDatePicker.getDate().toString() + "' order by 8 asc ");

//        jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT date, invoice_no, admission_no as patNo,debit as orig,0::numeric as amt_allocated,balance::numeric ,null::boolean as Allocate FROM ac_debtors WHERE account_no = '"+jTextField4.getText()+"' AND balance > 0 AND debit > 0 AND date between '"+this.datePicker1.getDate().toString()+"' and '"+this.datePicker2.getDate().toString()+"' order by date"));
        allocationTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                + "SELECT date, invoice_no, admission_no as patNo,balance as Invoice_Balance,"
                + "0::numeric as amt_allocated,balance::numeric as NEW_BALANCE, "
                + "null::boolean as Allocate, (select DISTINCT upper(patient_name) FROM hp_admission "
                + "WHERE hp_admission.patient_no = ac_debtors.admission_no ORDER BY 1 DESC LIMIT 1)as patient_name,"
                + " (SELECT DISTINCT trim(claim_no) FROM hp_patient_discharge"
                + " WHERE hp_patient_discharge.inv_no = ac_debtors.invoice_no LIMIT 1) as claim_no,member_no "
                + "FROM ac_debtors WHERE   account_no = '" + schemeAccountNumberTxt.getText() + "' "
                + "AND balance > 0 AND debit > 0 AND sent = true AND date between '" + this.beginDatePicker.getDate().toString() + "'"
                + " and '" + this.endDatePicker.getDate().toString() + "' order by 8 asc "));

        allocationScrollPane.setViewportView(allocationTable);

        Class[] types = new Class[]{
            java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class
        };
        boolean[] canEdit = new boolean[]{
            false, false, false, false, true, false, true
        };

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        //this.populateTable1(this.jTextField4.getText());        // Add your handling code here:
    }//GEN-LAST:event_confirmPeriodChkbxActionPerformed
    private void searchButton1Clicked() {

        System.out.println("Showing dialog");

        java.awt.Point point = this.receiptNumberTxt.getLocationOnScreen();

        receiptSearchDialog.setSize(600, 200);

        receiptSearchDialog.setLocation(point);

        receiptSearchDialog.setVisible(true);

    }
    private void allocationTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_allocationTableMouseClicked
        if (allocationTable.getSelectedColumn() == 6) {
            double orig = java.lang.Double.parseDouble(allocatableAmountTxt.getText().toString().replace(",", ""));
            double alloc = java.lang.Double.parseDouble(allocatedAmountTxt.getText().toString().replace(",", ""));

            double balance = orig - alloc;

            if (Boolean.valueOf(allocationTable.getValueAt(allocationTable.getSelectedRow(), 6).toString()) == java.lang.Boolean.TRUE) {
                if (balance == 0.00) {

                    javax.swing.JOptionPane.showMessageDialog(this, "Amount to allocate has been EXHAUSTED !", "Information Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                } else {
                    if (allocationTable.getModel().getValueAt(allocationTable.getSelectedRow(), 6/*jTable1.getSelectedColumn()*/) != null) {
                        if (allocationTable.getValueAt(allocationTable.getSelectedRow(), 5) != null) {
                            this.tableModelTableChanged1();
                        }
                    }
                }

            } else {
                if (allocationTable.getValueAt(allocationTable.getSelectedRow(), 6/*jTable1.getSelectedColumn()*/) != null) {
                    if (allocationTable.getValueAt(allocationTable.getSelectedRow(), 5) != null) {
                        this.tableModelTableChanged1();
                    }
                }
            }
            // this.tableModelTableChanged();
            if (allocationTable.isEditing()) {
                allocationTable.getCellEditor().stopCellEditing();
            }

            double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(allocationTable, 4);
            this.allocatedAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
            double amts = java.lang.Double.parseDouble(this.allocatableAmountTxt.getText().replace(",", ""));
            this.allocatableBalanceTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(amts - totalSum));

        } else if (allocationTable.getSelectedColumn() == 8) {

            System.out.println("Showing dialog");

            java.awt.Point point = this.allocationScrollPane.getLocationOnScreen();

            claimSearchDialog.setSize(600, 200);

            claimSearchDialog.setLocation(point);

            claimSearchDialog.setVisible(true);
        }
        //        }
    }//GEN-LAST:event_allocationTableMouseClicked

    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        schemeAccountNumberTxt.setText("");
        allocatableBalanceTxt.setText("");
        checkNumberTxt.setText("");
        allocatedAmountTxt.setText("");
        receiptNumberTxt.setText("");
        allocatableAmountTxt.setText("0.00");
        for (int k = 0; k < allocationTable.getRowCount(); k++) {
            for (int r = 0; r < allocationTable.getColumnCount(); r++) {
                allocationTable.getModel().setValueAt(null, k, r);
            }
        }
        this.schemeNameTxt.setText("");
        allocateBtn.setEnabled(true);

        schemeNameTxt.setText(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0).toString());
        schemeAccountNumberTxt.setText(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1).toString());
        schemeManagerTxt.setText(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 2).toString());
        jSearchDialog.dispose();

        // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked

    private void jButton51ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton51ActionPerformed
        jSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton51ActionPerformed

    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate
        if (jTextField111.getCaretPosition() < 3) {

            System.out.println("Nothing");
        } else {

            jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select trim(scheme_name) as scheme ,account_no,payer_name from ac_schemes where scheme_name ILIKE '" + jTextField111.getText().toString() + "%'"));

            jSearchTable.setShowHorizontalLines(false);
            jSearchScrollPane.setViewportView(jSearchTable);

            /*
             } catch(java.sql.SQLException sqlExec) {
            
             javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
            
             }
             */
        }           // Add your handling code here:
    }//GEN-LAST:event_jTextField111CaretUpdate

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchButtonClicked();         // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed
    private void searchButtonClicked() {

        System.out.println("Showing dialog");

        java.awt.Point point = this.schemeNameTxt.getLocationOnScreen();

        jSearchDialog.setSize(600, 200);

        jSearchDialog.setLocation(point);

        jSearchDialog.setVisible(true);

    }
    private void closeFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFormBtnActionPerformed
        this.setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_closeFormBtnActionPerformed

    private void clearFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFormBtnActionPerformed
        schemeAccountNumberTxt.setText("");
        allocatableBalanceTxt.setText("");
        checkNumberTxt.setText("");
        for (int k = 0; k < allocationTable.getRowCount(); k++) {
            for (int r = 0; r < allocationTable.getColumnCount(); r++) {
                allocationTable.getModel().setValueAt(null, k, r);
            }
        }
        this.schemeNameTxt.setText("");

        // Add your handling code here:
    }//GEN-LAST:event_clearFormBtnActionPerformed

    private void allocateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allocateBtnActionPerformed
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));

        allocateBtn.setEnabled(false);

        java.util.Calendar calendar = java.util.Calendar.getInstance();

        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql = new java.sql.Date(dateNow);

        System.out.println(datenowSql.toString());

        int j = allocationTable.getRowCount();
        try {
            String Alloc = null;
            String User = null;

            String invoiceNo = null;
            String transNo = null;
            String payMode = null;
            String patientAcc = null;
            String cardNo = null;
            String AccDesc = null;
            String scheme = null;
            String pName = null;
            String isurer = null;
            String expDate = null;
            String staffNo = null;
            String glAcc = null;
            String user = null;
            String accDesc1 = null;
            String glAcc1 = null;
            String glCode = null;
            String bankAcc = null;
            java.sql.Savepoint registerSavePoint = null;
            try {
                connectDB.setAutoCommit(false);
                registerSavePoint = connectDB.setSavepoint("registration");
            } catch (java.sql.SQLException ex) {
                ex.printStackTrace();
            }

            try {

                if (allocationTable.isEditing()) {
                    allocationTable.getCellEditor().stopCellEditing();
                }
                java.sql.Statement pss1 = connectDB.createStatement();
                java.sql.ResultSet rsts = pss1.executeQuery("select current_user,nextval('alloc_seq')");
                while (rsts.next()) {

                    User = rsts.getObject(1).toString();
                    Alloc = rsts.getObject(2).toString();
                }
                java.sql.Statement ps = connectDB.createStatement();
                java.sql.ResultSet rst = ps.executeQuery("select nextval('transaction_no_seq')");
                while (rst.next()) {
                    rst.getObject(1).toString();
                    transNo = rst.getObject(1).toString();
                }
                java.sql.Statement stm3 = connectDB.createStatement();
                java.sql.ResultSet rse3 = stm3.executeQuery("SELECT description,activity_code FROM ac_debtors WHERE receipt_no = '" + receiptNumberTxt.getText() + "'");
                while (rse3.next()) {
                    glCode = rse3.getObject(2).toString();
                    bankAcc = rse3.getObject(1).toString();
                }
                Object newdate = datenowSql;
                for (int i = 0; i < allocationTable.getRowCount(); i++) {
                    if (allocationTable.getValueAt(i, 4) != null) {

                        if (java.lang.Double.parseDouble(allocationTable.getValueAt(i, 4).toString()) > 0) {
                            double balance = java.lang.Double.parseDouble(allocationTable.getValueAt(i, 5).toString());
                            java.sql.Statement stm31 = connectDB.createStatement();
                            java.sql.ResultSet rse31 = stm31.executeQuery("SELECT DISTINCT item FROM ac_debtors "
                                    + "WHERE invoice_no = '" + allocationTable.getValueAt(i, 1).toString() + "' AND account_no = '" + schemeAccountNumberTxt.getText() + "'");
                            while (rse31.next()) {
                                pName = rse31.getObject(1).toString();

                                java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("INSERT INTO ac_debtors values(?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?)");
                                pstmt1.setString(1, glCode);
                                pstmt1.setString(2, schemeManagerTxt.getText());
                                pstmt1.setString(3, pName);
                                pstmt1.setObject(4, allocationTable.getValueAt(i, 2).toString());
                                pstmt1.setString(5, schemeNameTxt.getText());
                                pstmt1.setString(6, "Invoice Allocation");
                                pstmt1.setString(7, schemeAccountNumberTxt.getText());
                                pstmt1.setString(8, receiptNumberTxt.getText());
                                pstmt1.setString(9, checkNumberTxt.getText());
                                pstmt1.setString(10, "");
                                pstmt1.setString(11, transNo);
                                pstmt1.setString(12, "Allocation");
                                pstmt1.setDouble(13, 0.00);
                                pstmt1.setDouble(14, java.lang.Double.valueOf(allocationTable.getValueAt(i, 4).toString()));
                                pstmt1.setDate(15, com.afrisoftech.lib.SQLDateFormat.getSQLDate(receiptDatePicker.getDate()));
                                pstmt1.setObject(16, allocationTable.getValueAt(i, 1).toString());
                                pstmt1.setObject(17, bankAcc);
                                pstmt1.setBoolean(18, false);
                                pstmt1.setBoolean(19, false);
                                pstmt1.setString(20, User);
                                pstmt1.setString(21, "");
                                pstmt1.setDouble(22, 0.00);
                                pstmt1.setBoolean(23, false);
                                pstmt1.setDouble(24, 0.00);
                                //pstmt1.executeUpdate();   //Commented by C Waweru -- It may not be necessary to capture this information.

                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO db_allocation values(?,?,?,?,?,?,?,?,?,?,?,?)");
                                pstmt.setObject(1, schemeAccountNumberTxt.getText());
                                pstmt.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.util.Calendar.getInstance().getTime()));
                                pstmt.setObject(3, "Allocation");
                                pstmt.setObject(4, Alloc);
                                pstmt.setObject(5, "");
                                if (checkNumberTxt.getText().equals(null) || checkNumberTxt.getText().equals("")) {
                                    pstmt.setInt(6, 0);
                                } else {
                                    pstmt.setInt(6, java.lang.Integer.parseInt(checkNumberTxt.getText()));
                                }
                                pstmt.setDouble(7, java.lang.Double.valueOf(allocatableAmountTxt.getText().replace(",", "")));
                                pstmt.setDouble(8, java.lang.Double.valueOf(allocationTable.getValueAt(i, 4).toString()));
                                pstmt.setObject(9, allocationTable.getValueAt(i, 1).toString());
                                pstmt.setObject(10, User);
                                pstmt.setObject(11, allocationTable.getValueAt(i, 2).toString());
                                pstmt.setObject(12, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(allocationTable.getValueAt(i, 0).toString())));
                                pstmt.executeUpdate();

                                java.sql.PreparedStatement pstmt3 = connectDB.prepareStatement("UPDATE "
                                        + "ac_debtors set receipt_no='" + receiptNumberTxt.getText() + "' ,paid=true, balance = '" + java.lang.Double.valueOf(allocationTable.getValueAt(i, 5).toString()) + "' ,member_no='" + allocationTable.getValueAt(i, 9) + "'"
                                        + " WHERE invoice_no = '" + allocationTable.getValueAt(i, 1).toString() + "' AND account_no = '" + schemeAccountNumberTxt.getText() + "' "
                                        + "AND transaction_type ilike '%invoice%' AND debit > 0");
                                pstmt3.executeUpdate();
                                if (java.lang.Double.parseDouble(allocationTable.getValueAt(i, 5).toString()) == 0) {
                                    java.sql.PreparedStatement pstmt11 = connectDB.prepareStatement("UPDATE ac_doctors_ledger SET paid=true "
                                            + " where pat_inv = '" + allocationTable.getValueAt(i, 1).toString() + "'");
                                    pstmt11.executeUpdate();
                                }
                            }
                        }
                    }
                }
                java.sql.PreparedStatement pstmt1x = connectDB.prepareStatement("insert into ac_debtors values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                pstmt1x.setString(1, glCode);
                pstmt1x.setString(2, schemeManagerTxt.getText());
                pstmt1x.setString(3, schemeNameTxt.getText());
                pstmt1x.setObject(4, schemeAccountNumberTxt.getText());
                pstmt1x.setString(5, schemeNameTxt.getText());
                pstmt1x.setString(6, "Cheque Allocation");
                pstmt1x.setString(7, schemeAccountNumberTxt.getText());
                pstmt1x.setString(8, receiptNumberTxt.getText());
                pstmt1x.setString(9, checkNumberTxt.getText());
                pstmt1x.setString(10, "");
                pstmt1x.setString(11, transNo);
                pstmt1x.setString(12, "Receipts");
                pstmt1x.setDouble(13, java.lang.Double.valueOf(allocatedAmountTxt.getText().replace(",", "")));
                pstmt1x.setDouble(14, 0.00);
                pstmt1x.setDate(15, com.afrisoftech.lib.SQLDateFormat.getSQLDate(receiptDatePicker.getDate()));
                pstmt1x.setObject(16, checkNumberTxt.getText());
                pstmt1x.setObject(17, bankAcc);
                pstmt1x.setBoolean(18, false);
                pstmt1x.setBoolean(19, false);
                pstmt1x.setString(20, User);
                pstmt1x.setString(21, "");
                pstmt1x.setDouble(22, 0.00);
                pstmt1x.setBoolean(23, false);
                pstmt1x.setDouble(24, 0.00);
                //pstmt1x.executeUpdate();  //Commented by C Waweru -- It may not be necessary to capture this information.

                java.sql.PreparedStatement pstmt4 = connectDB.prepareStatement("UPDATE ac_debtors set credit_bal = '" + java.lang.Double.valueOf(allocatableBalanceTxt.getText().replace(",", "")) + "' WHERE receipt_no = '" + this.receiptNumberTxt.getText() + "' AND transaction_type not ilike 'allocation%' AND credit > 0");
                pstmt4.executeUpdate();

                connectDB.commit();
                connectDB.setAutoCommit(true);
                clearFormBtn.doClick();

                // nBCachedRowSet1.execute();
                javax.swing.JOptionPane.showMessageDialog(this, "Invoice credit allocated successfully.", "Comfirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                allocateBtn.setEnabled(false);
            } catch (java.sql.SQLException sq) {
                sq.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                try {
                    connectDB.rollback(registerSavePoint);
                } catch (java.sql.SQLException sql) {
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                jLabel7.setForeground(java.awt.Color.red);
                jLabel7.setText("Sorry. Please Check The Fields");
            }

        } catch (java.lang.Exception ex) {
            System.out.println(ex.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        // Add your handling code here:
    }//GEN-LAST:event_allocateBtnActionPerformed

    private void searchClaimNumberButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchClaimNumberButtonActionPerformed

        System.out.println("Showing dialog");

        java.awt.Point point = this.claimNumberTxt.getLocationOnScreen();

        claimSearchDialog.setSize(600, 200);

        claimSearchDialog.setLocation(point);

        claimSearchDialog.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_searchClaimNumberButtonActionPerformed

    private void claimInvoiceSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_claimInvoiceSearchTxtCaretUpdate
        if(claimInvoiceSearchTxt.getText().length() > 3){
            claimSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                + "SELECT claim_no, inv_no as invoice_no, patient_no, patient_name, discharge_date FROM hp_patient_discharge WHERE claim_no ILIKE '%"+claimInvoiceSearchTxt.getText()+"%' or inv_no ILIKE '%"+claimInvoiceSearchTxt.getText()+"%'  order by 1 asc "));
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_claimInvoiceSearchTxtCaretUpdate

    private void claimSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_claimSearchTableMouseClicked
        allocationTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                + "SELECT date, invoice_no, admission_no as patNo,balance as Invoice_Balance,"
                + "0::numeric as amt_allocated,balance::numeric as NEW_BALANCE, "
                + "null::boolean as Allocate, (select DISTINCT upper(patient_name) FROM hp_admission "
                + "WHERE hp_admission.patient_no = ac_debtors.admission_no ORDER BY 1 DESC LIMIT 1)as patient_name,"
                + " (SELECT DISTINCT trim(claim_no) FROM hp_patient_discharge"
                + " WHERE hp_patient_discharge.inv_no = ac_debtors.invoice_no LIMIT 1) as claim_no,member_no "
                + "FROM ac_debtors WHERE   account_no = '" + schemeAccountNumberTxt.getText() + "' "
                + "AND balance > 0 AND debit > 0 AND sent = true  AND invoice_no = '"+claimSearchTable.getValueAt(claimSearchTable.getSelectedRow(), 1)+"' order by 8 asc "));
        claimSearchDialog.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_claimSearchTableMouseClicked

    private void claimSearchdialogCloseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_claimSearchdialogCloseBtnActionPerformed

        claimSearchDialog.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_claimSearchdialogCloseBtnActionPerformed

    private void populateTable1(java.lang.String patient_no) {

        int i = 0;
        int j = 0;
        /*  try {
         /  java.sql.Statement stmt = connectDB.createStatement();
       
         java.sql.ResultSet rset = stmt.executeQuery("SELECT count(dealer) FROM ac_debtors WHERE account_no = '"+patient_no+"' and balance > 0 and date between '"+this.datePicker1.getDate().toString()+"' and '"+this.datePicker2.getDate().toString()+"'");// and revenue_code = '"+jTextField5.getText()+"' AND paid = false");
       
         while (rset.next()) {
         j = rset.getInt(1);
         }
         if (j > 0){
         java.sql.Statement stmtTable1 = connectDB.createStatement();
       
         //java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT date, invoice_no, admission_no,debit::numeric,balance::numeric ,null::boolean as allocated FROM ac_debtors WHERE account_no = '"+patient_no+"' AND balance > 0 order by date");// and revenue_code = '"+jTextField5.getText()+"' AND paid = false");
         java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT date, invoice_no, admission_no,balance::numeric ,null::boolean FROM ac_debtors WHERE account_no = '"+patient_no+"' AND balance > 0 and date between '"+this.datePicker1.getDate().toString()+"' and '"+this.datePicker2.getDate().toString()+"' order by date");// and revenue_code = '"+jTextField5.getText()+"' AND paid = false");
       
       
         while (rsetTable1.next()) {
       
         System.out.println("Working at table row "+i);
         jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
         jTable1.setValueAt(rsetTable1.getObject(2), i, 1);
         jTable1.setValueAt(rsetTable1.getObject(3), i, 2);
         jTable1.setValueAt(rsetTable1.getObject(4), i, 3);
         jTable1.setValueAt(rsetTable1.getObject(4), i, 5);
         jTable1.setValueAt(java.lang.Boolean.valueOf(false), i, 6);
         // jTable1.setValueAt(rsetTable1.getObject(6), i, 5);
       
         i++;
       
         //                i = i + i;
         //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
         }
         }*
         } catch(java.sql.SQLException sqlExec) {
       
         javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
       
         }
       
       
         /*    jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
         jTable1MouseClicked(evt);
         }
         });
       
         jScrollPane1.setViewportView(jTable1);
         */
    }

    //    public void tableModelTableChanged1(javax.swing.event.TableModelEvent evt) {
    public void tableModelTableChanged1() {
        double totals = 0.00;
        double resFloat = 0.00;
        double amt = java.lang.Double.parseDouble(this.allocatableAmountTxt.getText().replace(",", ""));

        double amt1 = java.lang.Double.parseDouble(this.allocatableBalanceTxt.getText().replace(",", ""));

        // double total_amount = java.lang.Double.parseDouble(this.jTextField2.getText());
        double floatCol2 = java.lang.Double.parseDouble(allocationTable.getValueAt(allocationTable.getSelectedRow(), 5).toString());
        double bal = java.lang.Double.parseDouble(allocationTable.getValueAt(allocationTable.getSelectedRow(), 5).toString());
        double orig = java.lang.Double.parseDouble(allocationTable.getValueAt(allocationTable.getSelectedRow(), 3).toString());
        //        double amtAlloc = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString());

        int i = 0;
        if (amt > 0) {
            for (int j = 0; j < allocationTable.getRowCount(); j++) {
                if (this.allocationTable.getModel().getValueAt(allocationTable.getSelectedRow(), 6) != null) {
                    //  if (jTable1.getModel().getValueAt(j, 5).toString().equalsIgnoreCase("TRUE")){// == java.lang.Boolean.TRUE) {
                    if (Boolean.valueOf(allocationTable.getValueAt(allocationTable.getSelectedRow(), 6).toString()) == java.lang.Boolean.TRUE) {

                        System.out.println("\n" + allocationTable.getModel().getValueAt(allocationTable.getSelectedRow(), 6).toString());

                        if (this.allocationTable.getModel().getValueAt(allocationTable.getSelectedRow(), 6) != null) {

                            allocatableBalanceTxt.setForeground(java.awt.Color.BLACK);

                            if (amt1 > floatCol2) {

                                //           jTable1.getModel().setValueAt((Object)java.lang.String.valueOf(0.00), jTable1.getSelectedRow(), 4);
                                allocationTable.setValueAt(new java.lang.Double(resFloat), allocationTable.getSelectedRow(), 5);
                                double balance = java.lang.Double.parseDouble(allocationTable.getValueAt(allocationTable.getSelectedRow(), 5).toString());
                                ////                        jTable1.setValueAt(new java.lang.Double(orig-balance), jTable1.getSelectedRow(), 4);
                                allocationTable.setValueAt(new java.lang.Double(bal - balance), allocationTable.getSelectedRow(), 4);
                                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(allocationTable, 4);
                                this.allocatedAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));

                            } else {

                                if (amt1 <= floatCol2 && amt1 >= 0) {

                                    allocationTable.setValueAt(new java.lang.Double(java.lang.Math.round(floatCol2 - amt1)), allocationTable.getSelectedRow(), 5);
                                    double balance = java.lang.Double.parseDouble(allocationTable.getValueAt(allocationTable.getSelectedRow(), 5).toString());

                                    allocationTable.setValueAt(new java.lang.Double(amt1), allocationTable.getSelectedRow(), 4);
                                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(allocationTable, 4);
                                    this.allocatedAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                                    allocatableBalanceTxt.setForeground(java.awt.Color.RED);

                                }
                            }

                            double amts = java.lang.Double.parseDouble(this.allocatableAmountTxt.getText().replace(",", ""));
                            double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(allocationTable, 4);
                            this.allocatableBalanceTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(amts - totalSum));
                            this.allocatedAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                            //amt = amt - Double.parseDouble(jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 3).toString());
                            amt = amts - totalSum;
                            i++;

                        }
                        if (amt > 0) {
                            allocatableBalanceTxt.setText(Double.toString(amt));
                        } else {
                            allocatableBalanceTxt.setText(Double.toString(0.00));

                        }
                    } else {

                        if (Boolean.valueOf(allocationTable.getValueAt(allocationTable.getSelectedRow(), 6).toString()) == java.lang.Boolean.FALSE) {

                            if (this.allocationTable.getValueAt(allocationTable.getSelectedRow(), 6) != null) {

                                allocatableBalanceTxt.setForeground(java.awt.Color.BLACK);
                                double bala = java.lang.Double.parseDouble(allocationTable.getValueAt(allocationTable.getSelectedRow(), 5).toString());
                                double alloc = java.lang.Double.parseDouble(allocationTable.getValueAt(allocationTable.getSelectedRow(), 4).toString());
                                allocationTable.setValueAt(new java.lang.Double(bala + alloc), allocationTable.getSelectedRow(), 5);
                                allocationTable.setValueAt(new java.lang.Double(0), allocationTable.getSelectedRow(), 4);
                                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(allocationTable, 4);
                                this.allocatedAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));

                                double amts = java.lang.Double.parseDouble(this.allocatableAmountTxt.getText().replace(",", ""));
                                this.allocatableBalanceTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(amts - totalSum));
                            }
                            /*   if (amt1 > 0) {
                             jTextField2.setText(Double.toString(amt1+java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString())));
                          
                             }else{
                             if (amt1 == 0) {
                             jTextField2.setText(Double.toString(java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString())-bal));
                             }
                             }*/
                        }
                    }
                }
            }

        } else {

            allocationTable.setValueAt(new java.lang.Double(floatCol2), allocationTable.getSelectedRow(), 5);

        }

        double amts = java.lang.Double.parseDouble(this.allocatableAmountTxt.getText().replace(",", ""));
        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(allocationTable, 4);
        this.allocatedAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
        this.allocatableBalanceTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(amts - totalSum));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionPanel;
    private javax.swing.JLabel allocatableAmountLbl;
    private javax.swing.JTextField allocatableAmountTxt;
    private javax.swing.JTextField allocatableBalanceTxt;
    private javax.swing.JButton allocateBtn;
    private javax.swing.JLabel allocatedAmountLbl;
    private javax.swing.JTextField allocatedAmountTxt;
    private javax.swing.JPanel allocationHeaderPanel;
    private javax.swing.JPanel allocationPanel;
    private javax.swing.JScrollPane allocationScrollPane;
    private javax.swing.JTable allocationTable;
    private javax.swing.JPanel alocationPane;
    private javax.swing.JLabel beginDateLbl;
    private com.afrisoftech.lib.DatePicker beginDatePicker;
    private javax.swing.JButton cancelAllocationBtn;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JTextField checkNumberTxt;
    private javax.swing.JLabel chequeNumberLbl;
    private javax.swing.JTextField claimInvoiceSearchTxt;
    private javax.swing.JTextField claimNumberTxt;
    private javax.swing.JDialog claimSearchDialog;
    private javax.swing.JPanel claimSearchPanel;
    private javax.swing.JScrollPane claimSearchScrollPane;
    private javax.swing.JTable claimSearchTable;
    private javax.swing.JButton claimSearchdialogCloseBtn;
    private javax.swing.JButton clearFormBtn;
    private javax.swing.JButton closeFormBtn;
    private javax.swing.JCheckBox confirmPeriodChkbx;
    private javax.swing.JButton dialogCloseBtn;
    private javax.swing.JLabel endDateLbl;
    private com.afrisoftech.lib.DatePicker endDatePicker;
    private javax.swing.JButton jButton51;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JLabel receiptDateLbl;
    private com.afrisoftech.lib.DatePicker receiptDatePicker;
    private javax.swing.JPanel receiptDetailsPanel;
    private javax.swing.JLabel receiptNumberLbl;
    private javax.swing.JPanel receiptNumberPanel;
    private javax.swing.JTextField receiptNumberTxt;
    private javax.swing.JDialog receiptSearchDialog;
    private javax.swing.JPanel receiptSearchPanel;
    private javax.swing.JScrollPane receiptSearchScrollPane;
    private javax.swing.JTable receiptSearchTable;
    private javax.swing.JTextField receiptSearchTxt;
    private javax.swing.JLabel schemeAccountNumberLbl;
    private javax.swing.JTextField schemeAccountNumberTxt;
    private javax.swing.JLabel schemeManagerLbl;
    private javax.swing.JTextField schemeManagerTxt;
    private javax.swing.JLabel schemeNameLbl;
    private javax.swing.JTextField schemeNameTxt;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchButton1;
    private javax.swing.JButton searchClaimNumberButton;
    private javax.swing.JPanel searchClaimNumberPanel;
    private javax.swing.JLabel spacerLbl;
    // End of variables declaration//GEN-END:variables
}
