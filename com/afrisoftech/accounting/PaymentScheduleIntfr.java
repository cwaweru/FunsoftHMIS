/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */
package com.afrisoftech.accounting;

import static com.afrisoftech.hospital.HospitalMain.connectDB;
import static com.afrisoftech.hospital.HospitalMain.saccopn;
import java.sql.Date;

/**
 *
 * @author root
 */
public class PaymentScheduleIntfr extends javax.swing.JInternalFrame {

    /**
     * Creates new form loanpymntintfr
     */
    private javax.swing.JComboBox cmbox = new javax.swing.JComboBox();
    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    private java.lang.String shift_no = null;
    private String scheduleNo;

    public PaymentScheduleIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();
        cashPointTxt.setText(System.getProperty("cashpoint"));

        shiftNumberTxt.setText(getShiftNumber());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog2 = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        jTextField113 = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        jSearchTable2 = new com.afrisoftech.dbadmin.JTable();
        jButton52 = new javax.swing.JButton();
        jSearchDialog21 = new javax.swing.JDialog();
        jSearchPanel21 = new javax.swing.JPanel();
        jTextField1131 = new javax.swing.JTextField();
        jSearchScrollPane21 = new javax.swing.JScrollPane();
        jSearchTable21 = new com.afrisoftech.dbadmin.JTable();
        jButton521 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField1111 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton9 = new javax.swing.JButton();
        jSearchDialog221 = new javax.swing.JDialog();
        jSearchPanel221 = new javax.swing.JPanel();
        jTextField11321 = new javax.swing.JTextField();
        jSearchScrollPane221 = new javax.swing.JScrollPane();
        jSearchTable221 = new com.afrisoftech.dbadmin.JTable();
        jButton5221 = new javax.swing.JButton();
        jSearchDialog22 = new javax.swing.JDialog();
        jSearchPanel22 = new javax.swing.JPanel();
        jTextField1132 = new javax.swing.JTextField();
        jSearchScrollPane22 = new javax.swing.JScrollPane();
        jSearchTable22 = new com.afrisoftech.dbadmin.JTable();
        jButton522 = new javax.swing.JButton();
        buttonGroup2 = new javax.swing.ButtonGroup();
        searchSupplierOrOthersTable = new javax.swing.JDialog();
        jSearchPanel3 = new javax.swing.JPanel();
        searchsupplierorstaff = new javax.swing.JTextField();
        jSearchScrollPane3 = new javax.swing.JScrollPane();
        searchsupplierorstafftable = new com.afrisoftech.dbadmin.JTable();
        jButton53 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        cashPointDetailsPanel = new javax.swing.JPanel();
        cashPointLbl = new javax.swing.JLabel();
        cashPointTxt = new javax.swing.JTextField();
        shiftNumberLbl = new javax.swing.JLabel();
        shiftNumberTxt = new javax.swing.JTextField();
        mainPaymentSchedulePanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        glAccountLbl = new javax.swing.JLabel();
        glAccountTxt = new javax.swing.JTextField();
        chequeDatePicker = new com.afrisoftech.lib.DatePicker();
        transactionDateLbl = new javax.swing.JLabel();
        jList1 = new javax.swing.JList();
        chequeNumberLbl = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel422 = new javax.swing.JPanel();
        chequeNumberTxt = new javax.swing.JTextField();
        searchButton2 = new javax.swing.JButton();
        chequeDateLbl = new javax.swing.JLabel();
        transactionDatePicker = new com.afrisoftech.lib.DatePicker();
        creditorsChkbx = new javax.swing.JCheckBox();
        payrollCreditorChkbx = new javax.swing.JCheckBox();
        viewPendingPaymentsBtn = new javax.swing.JButton();
        bankDetailsPanel = new javax.swing.JPanel();
        bankAccNumberLbl = new javax.swing.JLabel();
        accountNameLbl = new javax.swing.JLabel();
        bankAccountNameTxt = new javax.swing.JTextField();
        bankNameLbl = new javax.swing.JLabel();
        bankNameTxt = new javax.swing.JTextField();
        bankAccountNumberCmbx = new javax.swing.JComboBox();
        netAmountTxt = new javax.swing.JTextField();
        netAmountLabel = new javax.swing.JLabel();
        deductionsTotalLabel = new javax.swing.JLabel();
        deductionsTxt = new javax.swing.JTextField();
        grossAmountLbl = new javax.swing.JLabel();
        grossAmountTxt = new javax.swing.JTextField();
        paymentsSchedulePanel = new javax.swing.JPanel();
        paymentDetailsPanel = new javax.swing.JPanel();
        paymentsDetailsJscrl = new javax.swing.JScrollPane();
        paymentsTable = new com.afrisoftech.dbadmin.JXTable()
        /*new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class,  java.lang.Double.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        */;
        deductionsPanel = new javax.swing.JPanel();
        deductionsJscrl = new javax.swing.JScrollPane();
        deductionsTable = new com.afrisoftech.dbadmin.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        buttonsPanel = new javax.swing.JPanel();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        makePaymentsandPrintBtn = new javax.swing.JButton();
        reprintVoucherBtn = new javax.swing.JButton();
        clearFormBtn = new javax.swing.JButton();
        closeFormBtn = new javax.swing.JButton();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        makePaymentBtn = new javax.swing.JButton();
        spacerLbl = new javax.swing.JLabel();
        reprintVoucherBtn1 = new javax.swing.JButton();
        vatCertNumberLbl = new javax.swing.JLabel();
        vatNumberTxt = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        dealerNameTxt = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        otherPaymentsChk = new javax.swing.JCheckBox();
        creditorsChk = new javax.swing.JCheckBox();
        staffPaymentChk = new javax.swing.JCheckBox();

        jSearchDialog2.setModal(true);
        jSearchDialog2.setUndecorated(true);
        jSearchDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        jTextField113.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField113CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel2.add(jTextField113, gridBagConstraints);

        jSearchTable2.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable2.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable2MouseClicked(evt);
            }
        });
        jSearchScrollPane2.setViewportView(jSearchTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

        jButton52.setText("Close");
        jButton52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton52, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog2.getContentPane().add(jSearchPanel2, gridBagConstraints);

        jSearchDialog21.setModal(true);
        jSearchDialog21.setUndecorated(true);
        jSearchDialog21.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel21.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel21.setLayout(new java.awt.GridBagLayout());

        jTextField1131.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1131ActionPerformed(evt);
            }
        });
        jTextField1131.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1131CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel21.add(jTextField1131, gridBagConstraints);

        jSearchTable21.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable21.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable21MouseClicked(evt);
            }
        });
        jSearchScrollPane21.setViewportView(jSearchTable21);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel21.add(jSearchScrollPane21, gridBagConstraints);

        jButton521.setText("Close");
        jButton521.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton521ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel21.add(jButton521, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog21.getContentPane().add(jSearchPanel21, gridBagConstraints);

        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jTextField1111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(jTextField1111, gridBagConstraints);

        jSearchTable.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton9.setText("Dispose");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        jSearchDialog221.setModal(true);
        jSearchDialog221.setUndecorated(true);
        jSearchDialog221.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel221.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel221.setLayout(new java.awt.GridBagLayout());

        jTextField11321.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField11321CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel221.add(jTextField11321, gridBagConstraints);

        jSearchTable221.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable221.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable221.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable221MouseClicked(evt);
            }
        });
        jSearchScrollPane221.setViewportView(jSearchTable221);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel221.add(jSearchScrollPane221, gridBagConstraints);

        jButton5221.setText("Close");
        jButton5221.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5221ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel221.add(jButton5221, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog221.getContentPane().add(jSearchPanel221, gridBagConstraints);

        jSearchDialog22.setModal(true);
        jSearchDialog22.setUndecorated(true);
        jSearchDialog22.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel22.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel22.setLayout(new java.awt.GridBagLayout());

        jTextField1132.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1132CaretUpdate(evt);
            }
        });
        jTextField1132.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1132ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel22.add(jTextField1132, gridBagConstraints);

        jSearchTable22.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable22.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable22.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable22MouseClicked(evt);
            }
        });
        jSearchScrollPane22.setViewportView(jSearchTable22);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel22.add(jSearchScrollPane22, gridBagConstraints);

        jButton522.setText("Close");
        jButton522.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton522ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel22.add(jButton522, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog22.getContentPane().add(jSearchPanel22, gridBagConstraints);

        searchSupplierOrOthersTable.setModal(true);
        searchSupplierOrOthersTable.setUndecorated(true);
        searchSupplierOrOthersTable.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel3.setLayout(new java.awt.GridBagLayout());

        searchsupplierorstaff.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchsupplierorstaffCaretUpdate(evt);
            }
        });
        searchsupplierorstaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchsupplierorstaffActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel3.add(searchsupplierorstaff, gridBagConstraints);

        searchsupplierorstafftable.setToolTipText("Click on the target row to select the patient from the search.");
        searchsupplierorstafftable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        searchsupplierorstafftable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchsupplierorstafftableMouseClicked(evt);
            }
        });
        jSearchScrollPane3.setViewportView(searchsupplierorstafftable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel3.add(jSearchScrollPane3, gridBagConstraints);

        jButton53.setText("Close");
        jButton53.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton53ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel3.add(jButton53, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        searchSupplierOrOthersTable.getContentPane().add(jSearchPanel3, gridBagConstraints);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Payments Schedule  (Multiple Payments through a single transaction)");
        setFrameIcon(null);
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jLabel7, gridBagConstraints);

        jTextField6.setEditable(false);
        jTextField6.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField6.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jTextField6, gridBagConstraints);

        jTextField7.setEditable(false);
        jTextField7.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField7.setPreferredSize(new java.awt.Dimension(0, 0));
        jTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 11;
        getContentPane().add(jTextField7, gridBagConstraints);

        jTextField8.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField8.setPreferredSize(new java.awt.Dimension(0, 0));
        getContentPane().add(jTextField8, new java.awt.GridBagConstraints());

        cashPointDetailsPanel.setLayout(new java.awt.GridBagLayout());

        cashPointLbl.setText("Cash Point");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        cashPointDetailsPanel.add(cashPointLbl, gridBagConstraints);

        cashPointTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        cashPointDetailsPanel.add(cashPointTxt, gridBagConstraints);

        shiftNumberLbl.setText("Shift No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        cashPointDetailsPanel.add(shiftNumberLbl, gridBagConstraints);

        shiftNumberTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        cashPointDetailsPanel.add(shiftNumberTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(cashPointDetailsPanel, gridBagConstraints);

        mainPaymentSchedulePanel.setLayout(new java.awt.GridBagLayout());

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter payee details. Select bank account/cash book to be used to process the payment. The cheque number MUST be indicated."));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        glAccountLbl.setText("Cash Book G/L Account");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel1.add(glAccountLbl, gridBagConstraints);

        glAccountTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel1.add(glAccountTxt, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(chequeDatePicker, gridBagConstraints);

        transactionDateLbl.setForeground(new java.awt.Color(255, 0, 51));
        transactionDateLbl.setText("Trans Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel1.add(transactionDateLbl, gridBagConstraints);
        jPanel1.add(jList1, new java.awt.GridBagConstraints());

        chequeNumberLbl.setForeground(new java.awt.Color(255, 0, 51));
        chequeNumberLbl.setText("Cheque Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel1.add(chequeNumberLbl, gridBagConstraints);

        jTextField1.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField1.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel1.add(jTextField1, gridBagConstraints);

        jPanel422.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel422.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        jPanel422.add(chequeNumberTxt, gridBagConstraints);

        searchButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton2.setToolTipText("Search");
        searchButton2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton2.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton2.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel422.add(searchButton2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jPanel422, gridBagConstraints);

        chequeDateLbl.setForeground(new java.awt.Color(255, 0, 51));
        chequeDateLbl.setText("Cheque Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel1.add(chequeDateLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel1.add(transactionDatePicker, gridBagConstraints);

        buttonGroup2.add(creditorsChkbx);
        creditorsChkbx.setSelected(true);
        creditorsChkbx.setText("Creditors");
        creditorsChkbx.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel1.add(creditorsChkbx, gridBagConstraints);

        buttonGroup2.add(payrollCreditorChkbx);
        payrollCreditorChkbx.setText("Payroll");
        payrollCreditorChkbx.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        jPanel1.add(payrollCreditorChkbx, gridBagConstraints);

        viewPendingPaymentsBtn.setMnemonic('V');
        viewPendingPaymentsBtn.setText("View pending payments");
        viewPendingPaymentsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPendingPaymentsBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(viewPendingPaymentsBtn, gridBagConstraints);

        bankDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select cash book to be used for the payment", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(51, 51, 255)));
        bankDetailsPanel.setLayout(new java.awt.GridBagLayout());

        bankAccNumberLbl.setText("Bank Acct No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        bankDetailsPanel.add(bankAccNumberLbl, gridBagConstraints);

        accountNameLbl.setText("Account Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        bankDetailsPanel.add(accountNameLbl, gridBagConstraints);

        bankAccountNameTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        bankDetailsPanel.add(bankAccountNameTxt, gridBagConstraints);

        bankNameLbl.setText("Bank Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        bankDetailsPanel.add(bankNameLbl, gridBagConstraints);

        bankNameTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        bankDetailsPanel.add(bankNameTxt, gridBagConstraints);

        bankAccountNumberCmbx.setBackground(new java.awt.Color(204, 204, 204));
        bankAccountNumberCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select distinct bank_account_no from ac_banks_setup"));
        bankAccountNumberCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bankAccountNumberCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        bankDetailsPanel.add(bankAccountNumberCmbx, gridBagConstraints);

        netAmountTxt.setEditable(false);
        netAmountTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        netAmountTxt.setText("00");
        netAmountTxt.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        netAmountTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                netAmountTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        bankDetailsPanel.add(netAmountTxt, gridBagConstraints);

        netAmountLabel.setText("Net Amt");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        bankDetailsPanel.add(netAmountLabel, gridBagConstraints);

        deductionsTotalLabel.setText("Deductions");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        bankDetailsPanel.add(deductionsTotalLabel, gridBagConstraints);

        deductionsTxt.setEditable(false);
        deductionsTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        deductionsTxt.setText("00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        bankDetailsPanel.add(deductionsTxt, gridBagConstraints);

        grossAmountLbl.setText("Gross Amt");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        bankDetailsPanel.add(grossAmountLbl, gridBagConstraints);

        grossAmountTxt.setEditable(false);
        grossAmountTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        grossAmountTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        bankDetailsPanel.add(grossAmountTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        jPanel1.add(bankDetailsPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = -10;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(jPanel1, gridBagConstraints);

        paymentsSchedulePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Approve payments by ticking on respective voucher/invoice"));
        paymentsSchedulePanel.setLayout(new java.awt.GridBagLayout());

        paymentDetailsPanel.setLayout(new java.awt.GridBagLayout());

        paymentsTable.setAutoCreateRowSorter(true);
        paymentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Voucher No.", "Invoice No.", "Creditor", "Reason", "Amt.", "Amt. Due", "Amt. Paid", "Pay ?", "Vat ", "Gl Code", "Pay Mode"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        paymentsTable.setShowHorizontalLines(false);
        paymentsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paymentsTableMouseClicked(evt);
            }
        });
        paymentsTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                paymentsTableKeyReleased(evt);
            }
        });
        paymentsDetailsJscrl.setViewportView(paymentsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 100.0;
        paymentDetailsPanel.add(paymentsDetailsJscrl, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 50;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 50.0;
        paymentsSchedulePanel.add(paymentDetailsPanel, gridBagConstraints);

        deductionsPanel.setLayout(new java.awt.GridBagLayout());

        deductionsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Deduction Type", "Amount", "creditor", "debtor", "Account No.", "Gl"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        deductionsTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                deductionsTableKeyReleased(evt);
            }
        });
        deductionsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deductionsTableMouseClicked(evt);
            }
        });
        deductionsJscrl.setViewportView(deductionsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 100.0;
        deductionsPanel.add(deductionsJscrl, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 50;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 50.0;
        paymentsSchedulePanel.add(deductionsPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 50;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 80.0;
        jPanel3.add(paymentsSchedulePanel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jSeparator1, gridBagConstraints);

        buttonsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        buttonsPanel.setLayout(new java.awt.GridBagLayout());

        makePaymentsandPrintBtn.setMnemonic('p');
        makePaymentsandPrintBtn.setText("Make Payment & Print Payment Schedule");
        makePaymentsandPrintBtn.setToolTipText("Click here enter data");
        makePaymentsandPrintBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makePaymentsandPrintBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonsPanel.add(makePaymentsandPrintBtn, gridBagConstraints);

        reprintVoucherBtn.setMnemonic('R');
        reprintVoucherBtn.setText("Reprint");
        reprintVoucherBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reprintVoucherBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonsPanel.add(reprintVoucherBtn, gridBagConstraints);

        clearFormBtn.setMnemonic('l');
        clearFormBtn.setText("Clear");
        clearFormBtn.setToolTipText("Click here to clear textfields");
        clearFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonsPanel.add(clearFormBtn, gridBagConstraints);

        closeFormBtn.setMnemonic('C');
        closeFormBtn.setText("Close");
        closeFormBtn.setToolTipText("Click here to close window");
        closeFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonsPanel.add(closeFormBtn, gridBagConstraints);

        makePaymentBtn.setMnemonic('O');
        makePaymentBtn.setText("Make Payment");
        makePaymentBtn.setToolTipText("Click here enter data");
        makePaymentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makePaymentBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonsPanel.add(makePaymentBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        buttonsPanel.add(spacerLbl, gridBagConstraints);

        reprintVoucherBtn1.setMnemonic('R');
        reprintVoucherBtn1.setText(" Export Payment Schedule");
        reprintVoucherBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reprintVoucherBtn1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonsPanel.add(reprintVoucherBtn1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(buttonsPanel, gridBagConstraints);

        vatCertNumberLbl.setText("VAT Cert.No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(vatCertNumberLbl, gridBagConstraints);

        vatNumberTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel3.add(vatNumberTxt, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search Categories", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11), new java.awt.Color(255, 0, 0))); // NOI18N
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel2.setLayout(new java.awt.GridBagLayout());

        dealerNameTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(dealerNameTxt, gridBagConstraints);

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton.setToolTipText("Search");
        searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel2.add(searchButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jPanel4.add(jPanel2, gridBagConstraints);

        buttonGroup1.add(otherPaymentsChk);
        otherPaymentsChk.setText("Other Payments");
        otherPaymentsChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                otherPaymentsChkActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.2;
        jPanel4.add(otherPaymentsChk, gridBagConstraints);

        buttonGroup1.add(creditorsChk);
        creditorsChk.setText("Creditors");
        creditorsChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creditorsChkActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.2;
        jPanel4.add(creditorsChk, gridBagConstraints);

        buttonGroup1.add(staffPaymentChk);
        staffPaymentChk.setText("Staff Pyments");
        staffPaymentChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffPaymentChkActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.2;
        jPanel4.add(staffPaymentChk, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mainPaymentSchedulePanel.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.9;
        getContentPane().add(mainPaymentSchedulePanel, gridBagConstraints);

        setBounds(0, 0, 747, 529);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbox221MouseClicked() {
    }

    private void cmbox22MouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = chequeNumberTxt.getLocationOnScreen();
        jSearchDialog22.setSize(700, 200);
        jSearchDialog22.setLocation(point);
        jSearchDialog22.setVisible(true);
    }
    private void jButton5221ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5221ActionPerformed
        this.jSearchDialog221.dispose();         // Add your handling code here:
    }//GEN-LAST:event_jButton5221ActionPerformed

    private void jSearchTable221MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable221MouseClicked
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable221MouseClicked

    private void jTextField11321CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11321CaretUpdate
        // Add your handling code here:
    }//GEN-LAST:event_jTextField11321CaretUpdate

    private void jButton522ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton522ActionPerformed
        this.jSearchDialog22.dispose();         // Add your handling code here:
    }//GEN-LAST:event_jButton522ActionPerformed

    private void jSearchTable22MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable22MouseClicked
        chequeNumberTxt.setText(jSearchTable22.getValueAt(jSearchTable22.getSelectedRow(), 0).toString());

        this.jSearchDialog22.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable22MouseClicked

    private void jTextField1132CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1132CaretUpdate
        if (jTextField1132.getCaretPosition() > 0) {
            jSearchTable22.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select chq_no FROM pb_documents_register WHERE chq_no  ilike '" + jTextField1132.getText() + "%' and used = 'false' and doc_no = '" + glAccountTxt.getText() + "' order by chq_no"));

            /*   searchRowSet22.execute("select chq_no FROM pb_documents_register WHERE chq_no  ilike '"+jTextField1132.getText()+"%' and used = 'false' and doc_no = '"+jTextField11.getText()+"' order by chq_no");
              
             jSearchTable22.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet22, new org.netbeans.lib.sql.models.TableModel.Column[] {
             new org.netbeans.lib.sql.models.TableModel.Column("chq_no", "Cheque No", false),
             // new org.netbeans.lib.sql.models.TableModel.Column("account_no", "Acc No.", false)
             //  new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl code", false)
             }));
             */
            jSearchScrollPane22.setViewportView(jSearchTable22);
            System.out.println("Cannot sort out");

        }    // Add your handling code here:
    }//GEN-LAST:event_jTextField1132CaretUpdate

    private void jTextField1132ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1132ActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jTextField1132ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        this.jSearchDialog.dispose();  // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed
    public void tableModelTableChanged2() {
        System.out.println("Calculating totals for table 11 and 2.");
        //        double resFloat = 0.00;
        double resFloat = 0.00;
        double netPay = 0.00;
        double floatDeduct = java.lang.Double.parseDouble(deductionsTxt.getText());
        double floatTotal = java.lang.Double.parseDouble(grossAmountTxt.getText());

        for (int i = 0; i < deductionsTable.getRowCount(); i++) {

            if (deductionsTable.getModel().getValueAt(i, 0) != null) {

                resFloat = resFloat + Double.parseDouble(deductionsTable.getModel().getValueAt(i, 1).toString());

                deductionsTxt.setText(java.lang.String.valueOf(resFloat));

            } else {
                resFloat = resFloat + Double.parseDouble(deductionsTable.getModel().getValueAt(i, 1).toString());

                deductionsTxt.setText(java.lang.String.valueOf(resFloat));

            }
            netPay = floatTotal - floatDeduct;
            this.netAmountTxt.setText(java.lang.String.valueOf(netPay));
        }
    }
    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        deductionsTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0), deductionsTable.getSelectedRow(), 3);
        deductionsTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1), deductionsTable.getSelectedRow(), 4);
        this.jSearchDialog.dispose();          // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked

    private void jTextField1111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1111CaretUpdate
        if (jTextField1111.getCaretPosition() > 2) {
            jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select scheme_name,account_no FROM ac_schemes WHERE scheme_name  ilike '" + jTextField1111.getText() + "%' order by scheme_name"));

            /*     searchRowSet1.execute("select scheme_name,account_no FROM ac_schemes WHERE scheme_name  ilike '"+jTextField1111.getText()+"%' order by scheme_name");
            
             jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet1, new org.netbeans.lib.sql.models.TableModel.Column[] {
             new org.netbeans.lib.sql.models.TableModel.Column("scheme_name", "Scheme_name", false),
             new org.netbeans.lib.sql.models.TableModel.Column("account_no", "Acc No.", false)
             //  new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl code", false)
             }));
             */
            jSearchScrollPane.setViewportView(jSearchTable);
            System.out.println("Cannot sort out");

        }        // Add your handling code here:
    }//GEN-LAST:event_jTextField1111CaretUpdate
    private void cmbox1MouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = deductionsJscrl.getLocationOnScreen();
        jSearchDialog.setSize(400, 200);
        jSearchDialog.setLocation(point);
        jSearchDialog.setVisible(true);
    }

    private void cmboxActionPerformed(java.awt.event.ActionEvent evt) {
        java.lang.Object selectedGuaran = cmbox.getSelectedItem();
        int i = deductionsTable.getSelectedRow();
        boolean Gl = false;
        if (selectedGuaran != null) {
            try {

                java.sql.Statement stmtTable1 = connectDB.createStatement();

                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT income FROM pb_statutory WHERE description = '" + cmbox.getSelectedItem().toString() + "'");

                while (rsetTable1.next()) {
                    Gl = rsetTable1.getBoolean(1);
                }
                if (Gl != true) {
                    java.sql.Statement stmtTable11 = connectDB.createStatement();

                    java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT creditor,acc_no FROM pb_statutory WHERE description = '" + cmbox.getSelectedItem().toString() + "'");

                    while (rsetTable11.next()) {

                        System.out.println("Working at table row " + i);
                        deductionsTable.setValueAt(rsetTable11.getObject(1), i, 2);
                        deductionsTable.setValueAt(rsetTable11.getObject(2), i, 4);

                    }
                } else {
                    java.sql.Statement stmtTable11 = connectDB.createStatement();

                    java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT creditor,acc_no,gl_code FROM pb_statutory WHERE description = '" + cmbox.getSelectedItem().toString() + "'");

                    while (rsetTable11.next()) {

                        System.out.println("Working at table row " + i);
                        deductionsTable.setValueAt(rsetTable11.getObject(1), i, 2);
                        deductionsTable.setValueAt(rsetTable11.getObject(2), i, 4);
                        deductionsTable.setValueAt(rsetTable11.getObject(3), i, 5);
                        ///  jTable11.setValueAt(rsetTable11.getObject(6), i, 6);


                        //                i = i + i;
                        //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                    }
                }
            } catch (java.sql.SQLException sqlExec) {

                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

            }

        }
    }
    private void jButton521ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton521ActionPerformed
        this.jSearchDialog21.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton521ActionPerformed

    private void jTextField1131CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1131CaretUpdate
        if (this.jTextField1131.getCaretPosition() < 3) {
            System.out.print("Nothing");
        } else {
            jSearchTable21.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct dealer as name from ac_bills where dealer ILIKE '" + jTextField1131.getText() + "%' and (credit-debit) >0 order by dealer"));
            /*     searchRowSet21.execute("select distinct dealer as name from ac_bills where dealer ILIKE '"+jTextField1131.getText()+"%' and (credit-debit) >0 order by dealer");
             //   searchRowSet2.execute("select code,supplier_name as name from st_suppliers where supplier_name ILIKE '"+jTextField113.getText()+"%' order by supplier_name");
            
             jSearchTable21.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet21, new org.netbeans.lib.sql.models.TableModel.Column[] {
             // new org.netbeans.lib.sql.models.TableModel.Column("code", "Acc.No", false),
             new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false)
             //  new org.netbeans.lib.sql.models.TableModel.Column("staff_no", "Member No.", false),
             // new org.netbeans.lib.sql.models.TableModel.Column("description", "Scheme", false)
             }));
             */
            jSearchScrollPane21.setViewportView(jSearchTable21);
            System.out.println("Cannot sort out");

        }        // Add your handling code here:
    }//GEN-LAST:event_jTextField1131CaretUpdate

    private void jSearchTable21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable21MouseClicked
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable21MouseClicked

    private void jTextField1131ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1131ActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jTextField1131ActionPerformed
    private void searchButton21Clicked() {
    }
    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed
        this.jSearchDialog2.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton52ActionPerformed

    private void jSearchTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2MouseClicked
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable2MouseClicked

    private void jTextField113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField113CaretUpdate
        if (this.payrollCreditorChkbx.isSelected()) {
            if (this.jTextField113.getCaretPosition() < 1) {
                System.out.print("Nothing");
            } else {
                jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select upper(first_name||' '||middle_name||' '||last_name) as name,employee_no as staff from master_file where first_name||' '||middle_name||' '||last_name ILIKE '" + jTextField113.getText() + "%' UNION ALL select bank_name,bank_code from banks_setup WHERE bank_name  ILIKE '" + jTextField113.getText() + "%' order by 1"));


                jSearchScrollPane2.setViewportView(jSearchTable2);
                System.out.println("Cannot sort out");

            }
        } else {
            if (this.jTextField113.getCaretPosition() < 1) {
                System.out.print("Nothing");
            } else {
                jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct supplier_name as name ,code from st_suppliers WHERE supplier_name ILIKE '" + jTextField113.getText() + "%' order by supplier_name"));
                /*
                 searchRowSet2.execute("select distinct supplier_name as name ,code from st_suppliers WHERE supplier_name ILIKE '"+jTextField113.getText()+"%' order by supplier_name");
                 //   searchRowSet2.execute("select code,supplier_name as name from st_suppliers where supplier_name ILIKE '"+jTextField113.getText()+"%' order by supplier_name");
            
                 jSearchTable2.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet2, new org.netbeans.lib.sql.models.TableModel.Column[] {
                 // new org.netbeans.lib.sql.models.TableModel.Column("code", "Acc.No", false),
                 new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),
                 new org.netbeans.lib.sql.models.TableModel.Column("code", " No.", false)
                 // new org.netbeans.lib.sql.models.TableModel.Column("description", "Scheme", false)
                 }));
                 */
                jSearchScrollPane2.setViewportView(jSearchTable2);
                System.out.println("Cannot sort out");

            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jTextField113CaretUpdate
    private void searchButton2Clicked() {
        System.out.println("Showing dialog");

        java.awt.Point point = this.dealerNameTxt.getLocationOnScreen();

        searchSupplierOrOthersTable.setSize(700, 200);

        searchSupplierOrOthersTable.setLocation(point);

        searchSupplierOrOthersTable.setVisible(true);
    }

    public java.lang.String getShiftNumber() {

        try {

            java.sql.Statement stmt = connectDB.createStatement();

            java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE user_name = current_user AND (status = 'Running' OR status = 'Suspended')");

            while (rset.next()) {

                shift_no = rset.getString(1);

            }

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        return shift_no;

    }

    private void populateTable111(java.lang.String patient_name) {
        int j = 0;
        int i = 0;

        try {
            java.sql.Statement stmtTable1 = connectDB.createStatement();

            java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT count(dealer) FROM ac_bills WHERE dealer = '" + patient_name + "'");

            while (rsetTable1.next()) {
                j = rsetTable1.getInt(1);
            }
            if (j > 0) {

                java.sql.Statement stmtTable11 = connectDB.createStatement();

                java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT voucher_no,reason, sum(credit),sum(credit-debit),0.00,sum(vat_amt),code FROM ac_bills WHERE dealer = '" + patient_name + "' and final_voucher_no = '' GROUP BY voucher_no,reason,code order BY voucher_no");

                while (rsetTable11.next()) {

                    System.out.println("Working at table row " + i);

                    ///  jTable11.setValueAt(rsetTable11.getObject(6), i, 6);

                    i++;

                    //                i = i + i;
                    //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                }
            }
        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
    }

    private void populateTable11(java.lang.String patient_name) {
        int j = 0;
        int i = 0;

        try {
            java.sql.Statement stmtTable1 = connectDB.createStatement();

            java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT count(dealer) FROM ac_accounts_payable WHERE dealer = '" + patient_name + "' AND approved = true and balance >0 ");

            while (rsetTable1.next()) {
                j = rsetTable1.getInt(1);
            }
            if (j > 0) {

                java.sql.Statement stmtTable11 = connectDB.createStatement();

                java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT invoice_no, sum(credit),sum(balance),0.00,sum(vat_balance),activity_code,reason FROM ac_accounts_payable WHERE approved = true and balance >0 GROUP BY invoice_no,activity_code,reason");

                while (rsetTable11.next()) {

                    System.out.println("Working at table row " + i);
                    paymentsTable.setValueAt(rsetTable11.getObject(1), i, 0);
                    paymentsTable.setValueAt(rsetTable11.getObject(7), i, 1);
                    paymentsTable.setValueAt(rsetTable11.getObject(2), i, 2);
                    paymentsTable.setValueAt(rsetTable11.getObject(3), i, 3);
                    paymentsTable.setValueAt(rsetTable11.getObject(4), i, 4);
                    paymentsTable.setValueAt(rsetTable11.getObject(5), i, 6);
                    paymentsTable.setValueAt(rsetTable11.getObject(6), i, 7);
                    i++;


                }
            }
        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
    }

    private void populateTable1111(java.lang.String patient_name) {
        int j = 0;
        int i = 0;

        try {
            java.sql.Statement stmtTable1 = connectDB.createStatement();

            java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT count(dealer) FROM ac_payroll_ledger WHERE dealer = '" + patient_name + "' AND approved = true and balance >0 ");

            while (rsetTable1.next()) {
                j = rsetTable1.getInt(1);
            }
            if (j > 0) {



                java.sql.Statement stmtTable11 = connectDB.createStatement();

                java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT invoice_no, sum(credit),sum(balance),0.00,sum(vat_balance),activity_code,reason FROM ac_payroll_ledger WHERE dealer = '" + patient_name + "' AND approved = true and balance >0 GROUP BY invoice_no,activity_code,reason");

                while (rsetTable11.next()) {

                    System.out.println("Working at table row " + i);
                    paymentsTable.setValueAt(rsetTable11.getObject(1), i, 0);
                    paymentsTable.setValueAt(rsetTable11.getObject(7), i, 1);
                    paymentsTable.setValueAt(rsetTable11.getObject(2), i, 2);
                    paymentsTable.setValueAt(rsetTable11.getObject(3), i, 3);
                    paymentsTable.setValueAt(rsetTable11.getObject(4), i, 4);
                    // jTable11.setValueAt(rsetTable11.getObject(5), i, 5);
                    paymentsTable.setValueAt(rsetTable11.getObject(5), i, 6);
                    paymentsTable.setValueAt(rsetTable11.getObject(6), i, 7);
                    i++;

                    //                i = i + i;
                    //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                }
            }
        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
    }

    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField7ActionPerformed

    private void otherPaymentsChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_otherPaymentsChkActionPerformed
        paymentsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT voucher_no, invoice_no, dealer as creditor, 'Pay' as Action, SUM(credit) as invoice_amount,  "
                + "(SELECT voucher_amount FROM funsoft_payables_to_pay(dealer, invoice_no)) as amount_due, SUM(0.00)::numeric as amount_to_pay, false as authorise, "
                + "SUM(0.00)::numeric as vat, (SELECT gl_code FROM st_suppliers WHERE supplier_name = dealer) as  "
                + "gl_account,  '' as pay_mode from ac_accounts_payable WHERE approved = true and (dealer  Ilike '%BOARD MEMBER%' or dealer Ilike '%CASUAL LABOURERS%')   "
                + "and voucher_no is not null and voucher_no != '' GROUP BY 1,2,3,4,10 HAVING SUM(credit-debit) > 0  "
                + "UNION SELECT voucher_no, dealer_code, dealer, 'Pay' as Action, sum(credit) as invoice_amount, sum(credit-debit) as amount_due,  "
                + "SUM(0.00)::numeric as amount_to_pay, false as authorise, sum(0.00)::numeric as vat, "
                + "code, 'CHEQUE' as pay_mode FROM ac_bills WHERE approved = true and (dealer Ilike '%BOARD MEMBER%' or dealer  Ilike '%CASUAL LABOURERS%' )  "
                + "GROUP BY 1,2,3,4,10 HAVING SUM(credit-debit) > 0 ORDER BY creditor,voucher_no"));


        for (int k = 0; k < paymentsTable.getRowCount(); k++) {

            try {
                java.sql.Statement ps = connectDB.createStatement();
                java.sql.ResultSet rst = ps.executeQuery("select count(*) from master_file where concat(first_name,' ',last_name)='" + paymentsTable.getValueAt(k, 2).toString() + "'");
                while (rst.next()) {
                    System.out.println("mimi ni msoo " + rst.getInt(1));
                    if (rst.getInt(1) > 0 || paymentsTable.getValueAt(k, 2).toString().contains("BOARD MEMBER") || paymentsTable.getValueAt(k, 2).toString().contains("CASUAL LABOURERS") || paymentsTable.getValueAt(k, 2).toString().contains("PROJECT")) {

                        java.sql.Statement pis = connectDB.createStatement();
                        java.sql.ResultSet rist = pis.executeQuery("select distinct activity_code from ac_accounts_payable where voucher_no='" + paymentsTable.getValueAt(k, 0).toString() + "'");
                        while (rist.next()) {

                            paymentsTable.setValueAt(rist.getObject(1), k, 9);
                            System.out.println("mimi ni msoo2 " + rist.getObject(1).toString());
                        }
                    }
                }
            } catch (Exception y) {
                y.printStackTrace();
            }

        }

        netAmountTxt.setText("0.00");
        this.makePaymentBtn.setEnabled(true);
        this.makePaymentsandPrintBtn.setEnabled(true);


//        this.deductionsPanel.setVisible(true);
//        this.paymentDetailsPanel.setVisible(false);
//        makePaymentsandPrintBtn.setEnabled(true);
//
//        cmbox.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select distinct description FROM pb_statutory order by description"));
//        javax.swing.table.TableColumn s = this.deductionsTable.getColumn("Deduction Type");
//        s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
//        cmbox.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                cmboxActionPerformed(evt);
//            }
//        });      // Add your handling code here:
    }//GEN-LAST:event_otherPaymentsChkActionPerformed

    private void creditorsChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creditorsChkActionPerformed
        //viewPendingPaymentsBtn.doClick();
        paymentsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT voucher_no, invoice_no, dealer as creditor, 'Pay' as Action, SUM(credit) as invoice_amount,  \n"
                + "(SELECT voucher_amount FROM funsoft_payables_to_pay(dealer, invoice_no)) as amount_due, SUM(0.00)::numeric as amount_to_pay, false as authorise, \n"
                + "SUM(0.00)::numeric as vat, (SELECT gl_code FROM st_suppliers WHERE supplier_name = dealer) as  \n"
                + "gl_account,  '' as pay_mode from ac_accounts_payable WHERE approved = true \n"
                + "and dealer NOT Ilike '%BOARD MEMBER%' and dealer NOT Ilike '%CASUAL LABOURERS%' and voucher_no is not null and voucher_no != '' GROUP BY 1,2,3,4,10 HAVING SUM(credit-debit) > 0 ORDER BY creditor,voucher_no"));
//        this.paymentDetailsPanel.setVisible(true);
//        this.deductionsPanel.setVisible(false);   // Add your handling code here:
//         paymentsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT voucher_no, invoice_no, dealer as creditor, 'Pay' as Action, SUM(credit) as invoice_amount,  "
//            + "(SELECT voucher_amount FROM funsoft_payables_to_pay(dealer, invoice_no)) as amount_due, SUM(0.00)::numeric as amount_to_pay, false as authorise, "
//            + "SUM(0.00)::numeric as vat, (SELECT gl_code FROM st_suppliers WHERE supplier_name = dealer) as  "
//            + "gl_account,  '' as pay_mode from ac_accounts_payable WHERE approved = true and dealer NOT Ilike '%BOARD MEMBER%' and dealer NOT Ilike '%CASUAL LABOURERS%'   "
//            + "and voucher_no is not null and voucher_no != '' GROUP BY 1,2,3,4,10 HAVING SUM(credit-debit) > 0  "
//            + "UNION SELECT voucher_no, dealer_code, dealer, 'Pay' as Action, sum(credit) as invoice_amount, sum(credit-debit) as amount_due,  "
//            + "SUM(0.00)::numeric as amount_to_pay, false as authorise, sum(0.00)::numeric as vat, "
//            + "code, 'CHEQUE' as pay_mode FROM ac_bills WHERE approved = true and dealer NOT Ilike '%BOARD MEMBER%' and dealer NOT Ilike '%CASUAL LABOURERS%'   "
//            + "GROUP BY 1,2,3,4,10 HAVING SUM(credit-debit) > 0 ORDER BY creditor,voucher_no"));
//
//    for(int k=0;k<paymentsTable.getRowCount();k++){
//
//        try{
//            java.sql.Statement ps = connectDB.createStatement();
//            java.sql.ResultSet rst = ps.executeQuery("select count(*) from master_file where concat(first_name,' ',last_name)='"+paymentsTable.getValueAt(k,2).toString()+"'");
//            while (rst.next()) {
//                System.out.println("mimi ni msoo "+rst.getInt(1));
//                if (rst.getInt(1)>0 || paymentsTable.getValueAt(k,2).toString().contains("BOARD MEMBER") || paymentsTable.getValueAt(k,2).toString().contains("CASUAL LABOURERS") || paymentsTable.getValueAt(k,2).toString().contains("PROJECT")){
//
//                    java.sql.Statement pis = connectDB.createStatement();
//                    java.sql.ResultSet rist = pis.executeQuery("select distinct activity_code from ac_accounts_payable where voucher_no='"+paymentsTable.getValueAt(k,0).toString()+"'");
//                    while (rist.next()) {
//
//                        paymentsTable.setValueAt(rist.getObject(1), k, 9);
//                        System.out.println("mimi ni msoo2 "+rist.getObject(1).toString());
//                    }
//                }
//            }}
//            catch(Exception y){
//                y.printStackTrace();
//            }
//
//        }
//
//        netAmountTxt.setText("0.00");
//        this.makePaymentBtn.setEnabled(true);
//        this.makePaymentsandPrintBtn.setEnabled(true);
//        
//        
//        
//        
    }//GEN-LAST:event_creditorsChkActionPerformed

    private void makePaymentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makePaymentBtnActionPerformed
        if (Double.parseDouble(grossAmountTxt.getText().replace(",", "")) > 0.00) {
            if (glAccountTxt.getText().length() > 0) {
                if (chequeNumberTxt.getText().length() > 0) {

                    java.util.Date periodFrom = null;
                    java.util.Date periodTo = null;

                    try {

                        java.sql.Statement stmtf = connectDB.createStatement();
                        java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + transactionDatePicker.getDate() + "' BETWEEN period_from AND period_to");
                        while (rsetf.next()) {
                            periodFrom = rsetf.getDate(1);
                            periodTo = rsetf.getDate(2);
                        }

                    } catch (java.sql.SQLException sq) {
                        javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        System.out.println(sq.getMessage());

                    }

                    if (transactionDatePicker.getDate().before(periodFrom) || transactionDatePicker.getDate().after(periodTo)) {
                        javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set   Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    } else {
                        if (paymentsTable.isEditing()) {
                            paymentsTable.getCellEditor().stopCellEditing();
                        }
                        java.util.Calendar calendar = java.util.Calendar.getInstance();

                        long dateNow = calendar.getTimeInMillis();

                        java.sql.Date datenowSql = new java.sql.Date(dateNow);

                        System.out.println(datenowSql.toString());

                        java.sql.Connection con;
                        try {
                            //  String scheduleNo = null;
                            String user = null;
                            String invoiceNo = null;
                            String KRA = null;
                            String Code = null;
                            String actNames1 = null;
                            String actCode1 = null;
                            String rNo = null;
                            String Payer = null;
                            String transNo = null;
                            double Deductions = java.lang.Double.parseDouble(deductionsTxt.getText().replace(",", ""));
                            double Net = java.lang.Double.parseDouble(netAmountTxt.getText().replace(",", ""));
                            double Credits = Deductions + Net;

                            if (Net < 0) {
                                javax.swing.JOptionPane.showMessageDialog(this, "Deductions MORE THAN The Earnings", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                            } else {
                                java.sql.Savepoint registerSavePoint = null;
                                try {
                                    connectDB.setAutoCommit(false);
                                    registerSavePoint = connectDB.setSavepoint("registration");
                                } catch (java.sql.SQLException ex) {
                                    ex.printStackTrace();
                                }

                                try {
                                    java.sql.Statement ps = connectDB.createStatement();
                                    java.sql.ResultSet rst = ps.executeQuery("select nextval('transaction_no_seq'),current_user");
                                    while (rst.next()) {
                                        rst.getObject(1).toString();

                                        transNo = rst.getObject(1).toString();
                                        user = rst.getObject(2).toString();
                                    }
                                    java.sql.Statement ps22 = connectDB.createStatement();
                                    java.sql.ResultSet rs22 = ps22.executeQuery("select date_part('y', now()::date)||'/'||lpad(nextval('schedule_no_seq')::text,5,0::text)");
                                    while (rs22.next()) {
                                        scheduleNo = rs22.getObject(1).toString();
                                    }
                                    java.sql.Statement ps221 = connectDB.createStatement();
                                    java.sql.ResultSet rs221 = ps221.executeQuery("select supplier_name,code from st_suppliers where category ilike 'KRA%'");
                                    while (rs221.next()) {
                                        KRA = rs221.getObject(1).toString();
                                        Code = rs221.getObject(2).toString();
                                    }
                                    java.sql.Statement pss11 = connectDB.createStatement();
                                    java.sql.ResultSet rsts1 = pss11.executeQuery("select code,activity,current_user from pb_activity where activity_category ='DA'");
                                    while (rsts1.next()) {
                                        actCode1 = rsts1.getObject(1).toString();
                                        actNames1 = rsts1.getObject(2).toString();
                                        user = rsts1.getObject(3).toString();
                                    }

                                    for (int x = 0; x < paymentsTable.getRowCount(); x++) {
                                        if (paymentsTable.getModel().getValueAt(x, 6) != null) {

                                            if (java.lang.Double.parseDouble(paymentsTable.getValueAt(x, 6).toString()) > 0) {
                                                java.sql.PreparedStatement pstmt91 = connectDB.prepareStatement("UPDATE ac_dashboard SET cash=now(), cash_by=current_user where voucher_no = '" + paymentsTable.getValueAt(x, 0).toString() + "' and supplier ILIKE '" + paymentsTable.getValueAt(x, 2).toString() + "'");
                                                pstmt91.executeUpdate();


                                                if (paymentsTable.getValueAt(x, 2).toString().contains("BOARD MEMBER") || paymentsTable.getValueAt(x, 2).toString().contains("CASUAL LABOURER")) {
                                                    java.sql.PreparedStatement pstmt9 = connectDB.prepareStatement("UPDATE ac_other_payments SET schedule_no='" + scheduleNo + "' where final_voucher_no='" + paymentsTable.getValueAt(x, 0).toString() + "'");
                                                    pstmt9.executeUpdate();
                                                }
                                                //VCREM 
                                                if (paymentsTable.getValueAt(x, 10).toString().equalsIgnoreCase("Cash") || (paymentsTable.getValueAt(x, 0).toString().contains("imprest") && paymentsTable.getValueAt(x, 0).toString().contains("SAL_ADV") && paymentsTable.getValueAt(x, 0).toString().contains("VCBOD") && paymentsTable.getValueAt(x, 0).toString().contains("VCKIN") && paymentsTable.getValueAt(x, 0).toString().contains("VCPAYE") && paymentsTable.getValueAt(x, 0).toString().contains("VCREM"))) {
                                                    java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into ac_petty_cash values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                                                    pstmt1.setString(1, glAccountTxt.getText());
                                                    pstmt1.setString(2, bankAccountNameTxt.getText());
                                                    pstmt1.setString(3, paymentsTable.getValueAt(x, 2).toString());
                                                    pstmt1.setObject(4, paymentsTable.getValueAt(x, 1).toString());
                                                    pstmt1.setDouble(5, 0.00);
                                                    pstmt1.setDouble(6, java.lang.Double.valueOf(paymentsTable.getValueAt(x, 4).toString()));
                                                    pstmt1.setDate(7, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                                    pstmt1.setString(8, user);
                                                    pstmt1.setBoolean(9, true);
                                                    pstmt1.setString(10, paymentsTable.getValueAt(x, 0).toString());
                                                    pstmt1.setDate(11, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                                    pstmt1.setBoolean(12, true);
                                                    pstmt1.setString(13, "Accounts");
                                                    pstmt1.setString(14, paymentsTable.getValueAt(x, 2).toString());
                                                    pstmt1.setObject(15, paymentsTable.getValueAt(x, 1).toString());
                                                    pstmt1.setObject(16, paymentsTable.getValueAt(x, 4).toString());
                                                    pstmt1.setString(17, transNo);
                                                    pstmt1.setObject(18, cashPointTxt.getText());
                                                    pstmt1.setString(19, shiftNumberTxt.getText());
                                                    pstmt1.setString(20, transNo);
                                                    pstmt1.setObject(21, paymentsTable.getValueAt(x, 7).toString());
                                                    pstmt1.setString(22, transNo);
                                                    pstmt1.setObject(23, "-");
                                                    pstmt1.setObject(24, "-");
                                                    pstmt1.setObject(25, "-");
                                                    pstmt1.setObject(26, "-");
                                                    pstmt1.executeUpdate();
                                                } else {
                                                    java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into ac_cash_book values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                                    pstmt1.setString(1, paymentsTable.getValueAt(x, 9).toString());
                                                    pstmt1.setString(2, paymentsTable.getValueAt(x, 3).toString());
                                                    pstmt1.setString(3, paymentsTable.getValueAt(x, 2).toString());
                                                    pstmt1.setString(4, paymentsTable.getValueAt(x, 10).toString());
                                                    pstmt1.setString(5, paymentsTable.getValueAt(x, 0).toString());
                                                    pstmt1.setString(6, "");
                                                    pstmt1.setString(7, paymentsTable.getValueAt(x, 2).toString());
                                                    if (glAccountTxt.getText().equals("")) {
                                                        javax.swing.JOptionPane.showMessageDialog(this, "Select payment code", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                                    } else {

                                                        pstmt1.setString(9, glAccountTxt.getText());
                                                    }
                                                    pstmt1.setString(8, "");
                                                    pstmt1.setString(11, "");
                                                    pstmt1.setString(12, "");
                                                    pstmt1.setString(13, "");
                                                    pstmt1.setString(10, chequeNumberTxt.getText());
                                                    pstmt1.setString(14, bankAccountNumberCmbx.getSelectedItem().toString());
                                                    pstmt1.setObject(15, bankAccountNameTxt.getText());
                                                    pstmt1.setString(16, bankNameTxt.getText());
                                                    pstmt1.setString(17, "Payment");
                                                    pstmt1.setDouble(18, 0.00);
                                                    pstmt1.setDouble(19, java.lang.Double.valueOf(paymentsTable.getValueAt(x, 6).toString()));
                                                    pstmt1.setDate(20, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                                    pstmt1.setString(21, transNo);
                                                    pstmt1.setBoolean(24, false);
                                                    pstmt1.setBoolean(22, false);
                                                    pstmt1.setBoolean(23, false);
                                                    pstmt1.setDate(25, null);
                                                    pstmt1.setDate(26, null);
                                                    pstmt1.setDate(27, null);
                                                    pstmt1.setString(28, user);
                                                    pstmt1.setObject(29, cashPointTxt.getText());
                                                    pstmt1.setString(30, shiftNumberTxt.getText());
                                                    pstmt1.setDate(31, com.afrisoftech.lib.SQLDateFormat.getSQLDate(chequeDatePicker.getDate()));
                                                    pstmt1.setString(32, scheduleNo);
                                                    String bankName = "";
                                                    String branchName = "";
                                                    String bankAccount = "";
                                                    String bankTransferCode = "";
                                                    if (!paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("IMPREST") && !paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("SAL_ADV") && !paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("VCBOD") && !paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("VCKIN") && !paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("VCPAYE") && !paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("VCREM")) {
                                                        java.sql.PreparedStatement pstmtBank = connectDB.prepareStatement("SELECT bank_name, bank_branch, bank_account_no, bank_transfer_code FROM st_suppliers WHERE supplier_name ilike ?");
                                                        pstmtBank.setString(1, paymentsTable.getValueAt(x, 2).toString());
                                                        java.sql.ResultSet rsetBank = pstmtBank.executeQuery();
                                                        while (rsetBank.next()) {
                                                            bankName = rsetBank.getString(1);
                                                            branchName = rsetBank.getString(2);
                                                            bankAccount = rsetBank.getString(3);
                                                            bankTransferCode = rsetBank.getString(4);
                                                        }
                                                    } else {
                                                        bankName = "-";
                                                        branchName = "-";
                                                        bankAccount = "-";
                                                        bankTransferCode = "-";
                                                    }
                                                    pstmt1.setString(33, bankName);
                                                    pstmt1.setString(34, branchName);
                                                    pstmt1.setString(35, bankAccount);
                                                    pstmt1.setString(36, bankTransferCode);
                                                    pstmt1.executeUpdate();

                                                }

                                            }
                                        }

                                        if (paymentsTable.getModel().getValueAt(x, 6) != null) {

                                            if (java.lang.Double.parseDouble(paymentsTable.getValueAt(x, 6).toString()) > 0) {

                                                // Post data to accounts_payables for creditors
                                                if (!paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("IMPREST") && !paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("SAL_ADV") && !paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("VCBOD") && !paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("VCKIN") && !paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("VCPAYE") && !paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("VCREM") && !paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("PRNO")) {

                                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into ac_accounts_payable values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                                    pstmt.setObject(1, paymentsTable.getValueAt(x, 9).toString());
                                                    pstmt.setString(4, paymentsTable.getValueAt(x, 0).toString());
                                                    pstmt.setObject(3, paymentsTable.getValueAt(x, 3).toString());
                                                    pstmt.setString(2, paymentsTable.getValueAt(x, 2).toString());
                                                    pstmt.setString(5, paymentsTable.getValueAt(x, 2).toString());
                                                    pstmt.setString(6, paymentsTable.getValueAt(x, 3).toString());
                                                    pstmt.setString(7, chequeNumberTxt.getText());
                                                    pstmt.setString(8, vatNumberTxt.getText());
                                                    pstmt.setString(9, glAccountTxt.getText());
                                                    pstmt.setString(10, chequeNumberTxt.getText());
                                                    pstmt.setString(11, transNo);
                                                    pstmt.setString(12, "Payment");
                                                    pstmt.setDouble(13, java.lang.Double.valueOf(paymentsTable.getValueAt(x, 6).toString()));
                                                    pstmt.setDouble(14, 0.00);
                                                    pstmt.setDate(15, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                                    pstmt.setObject(16, paymentsTable.getValueAt(x, 1).toString());
                                                    pstmt.setString(17, jTextField8.getText());
                                                    pstmt.setBoolean(18, true);
                                                    pstmt.setBoolean(19, true);
                                                    pstmt.setString(20, user);
                                                    pstmt.setString(21, "");
                                                    pstmt.setDate(22, com.afrisoftech.lib.SQLDateFormat.getSQLDate(chequeDatePicker.getDate()));
                                                    pstmt.setDate(23, com.afrisoftech.lib.SQLDateFormat.getSQLDate(chequeDatePicker.getDate()));
                                                    pstmt.setDouble(24, 0.00);
                                                    pstmt.executeUpdate();
                                                    // Make the standing imprest a debtor in the petty_cash table
                                                } else if (!paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("VCPC") && !paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("P_IMPREST") && !paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("SAL_ADV") && !paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("VCBOD") && !paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("VCKIN") && !paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("VCPAYE") && !paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("VCREM") && !paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("PRNO")) {
                                                    java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("INSERT INTO"
                                                            + "  ac_petty_cash(activity_code, activity, payee, description, debit,"
                                                            + "  credit, paid, voucher_no, date, approved, department, requisitioner,"
                                                            + "  status, document, transaction_no, cash_point, shift_no, request_no,"
                                                            + " code, requisition_no, donor, proj, branch, user_name, staff_veh) "
                                                            + "    VALUES (?, ?, ?, ?, ?, ?, ?,  "
                                                            + "            ?, ?, ?, ?, ?,  "
                                                            + "            ?, ?, ?, ?, ?, ?, ?,  "
                                                            + "            ?, ?, ?, ?, ?, ? )");
                                                    pstmt2.setObject(1, paymentsTable.getValueAt(x, 9).toString());
                                                    pstmt2.setString(2, paymentsTable.getValueAt(x, 0).toString());
                                                    pstmt2.setObject(3, paymentsTable.getValueAt(x, 2).toString());
                                                    pstmt2.setString(4, paymentsTable.getValueAt(x, 3).toString());
                                                    pstmt2.setDouble(5, java.lang.Double.valueOf(paymentsTable.getValueAt(x, 6).toString()));
                                                    pstmt2.setDouble(6, 0.00);
                                                    pstmt2.setBoolean(7, true);
                                                    pstmt2.setString(8, paymentsTable.getValueAt(x, 0).toString());
                                                    pstmt2.setDate(9, com.afrisoftech.lib.SQLDateFormat.getSQLDate(chequeDatePicker.getDate()));
                                                    pstmt2.setBoolean(10, true);
                                                    pstmt2.setString(11, "");
                                                    pstmt2.setString(12, paymentsTable.getValueAt(x, 3).toString());
                                                    pstmt2.setString(13, "Replenishment");
                                                    pstmt2.setString(14, paymentsTable.getValueAt(x, 3).toString());
                                                    pstmt2.setString(15, transNo);
                                                    pstmt2.setString(16, cashPointTxt.getText());
                                                    pstmt2.setString(17, shiftNumberTxt.getText());
                                                    pstmt2.setString(18, "");
                                                    pstmt2.setString(19, "");
                                                    pstmt2.setString(20, "");
                                                    pstmt2.setString(21, "");
                                                    pstmt2.setString(22, "");
                                                    pstmt2.setString(23, "");
                                                    pstmt2.setString(24, user);
                                                    pstmt2.setString(25, paymentsTable.getValueAt(x, 1).toString());
                                                    pstmt2.executeUpdate();
                                                    java.sql.PreparedStatement pstmt12 = connectDB.prepareStatement("update ac_bills set approved = true, debit = ?  WHERE final_voucher_no = ?");
                                                    pstmt12.setDouble(1, java.lang.Double.valueOf(paymentsTable.getValueAt(x, 6).toString()));
                                                    pstmt12.setString(2, paymentsTable.getValueAt(x, 0).toString());
                                                    pstmt12.executeUpdate();

                                                    // Expense the imprest directly for personal claims in the ac_ledger table
                                                } else {
                                                    String reason = "", desc = "";
                                                    Date dat = null, dat_deu = null;
                                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT reason,description,date,date_deu FROM ac_bills WHERE final_voucher_no = '" + paymentsTable.getValueAt(x, 0).toString() + "'");
                                                    java.sql.ResultSet rset = pstmt.executeQuery();
                                                    while (rset.next()) {
                                                        reason = rset.getString(1);
                                                        desc = rset.getString(2);
                                                        dat = rset.getDate(3);
                                                        dat_deu = rset.getDate(4);
                                                    }


                                                    //to pay PAYE to commissioner of income tax
                                                    String accountCode = null, glType = null;
                                                    java.sql.Statement pst1 = connectDB.createStatement();
                                                    java.sql.ResultSet rs1 = pst1.executeQuery("select code,activity from pb_activity where activity_category = 'CP'");
                                                    while (rs1.next()) {
                                                        accountCode = rs1.getObject(1).toString();
                                                        glType = rs1.getObject(2).toString();
                                                    }
                                                    if (paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("PRNO")) {
                                                        String ode = null, gl = null;
                                                        java.sql.Statement pst13 = connectDB.createStatement();
                                                        java.sql.ResultSet rs13 = pst13.executeQuery("select code,activity from pb_activity where code = '" + paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 9).toString() + "'");
                                                        while (rs13.next()) {
                                                            ode = rs13.getObject(1).toString();
                                                            gl = rs13.getObject(2).toString();
                                                        }

                                                        java.sql.PreparedStatement pstmt1q1 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                                                        pstmt1q1.setObject(1, ode);
                                                        pstmt1q1.setString(2, gl);
                                                        pstmt1q1.setString(4, paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 2).toString());
                                                        pstmt1q1.setString(3, paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 1).toString());
                                                        pstmt1q1.setObject(6, "");
                                                        pstmt1q1.setString(5, "Patient Refund");
                                                        pstmt1q1.setString(7, "");
                                                        pstmt1q1.setString(8, "CASH");
                                                        pstmt1q1.setString(9, "");
                                                        pstmt1q1.setString(10, "refund");
                                                        pstmt1q1.setString(11, "");
                                                        pstmt1q1.setString(12, "-");
                                                        pstmt1q1.setString(13, "-");
                                                        pstmt1q1.setString(14, "Receipt");
                                                        pstmt1q1.setString(15, "Unutilized patient deposit");
                                                        pstmt1q1.setDouble(16, Double.valueOf(paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 6).toString().replace(",", "")));
                                                        pstmt1q1.setDouble(17, 0.00);
                                                        pstmt1q1.setDate(18, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
                                                        pstmt1q1.setString(19, transNo);
                                                        pstmt1q1.setBoolean(20, false);
                                                        pstmt1q1.setBoolean(21, true);
                                                        pstmt1q1.setBoolean(22, false);
                                                        pstmt1q1.setString(23, user);
                                                        pstmt1q1.setString(24, cashPointTxt.getText());//cash point
                                                        pstmt1q1.setString(25, shiftNumberTxt.getText());//shift
                                                        pstmt1q1.setTimestamp(26, com.afrisoftech.lib.ServerTime.getSQLTimeStamp(connectDB));
                                                        pstmt1q1.executeUpdate();
                                                    }
                                                    if (paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("VCPAYE")) {
                                                        java.sql.PreparedStatement pstmtNet = connectDB.prepareStatement("insert into ac_accounts_payable values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
                                                        pstmtNet.setObject(1, accountCode);
                                                        pstmtNet.setObject(2, paymentsTable.getValueAt(x, 2).toString());
                                                        pstmtNet.setObject(3, "PAYE payment");
                                                        pstmtNet.setString(4, paymentsTable.getValueAt(x, 0).toString());
                                                        pstmtNet.setObject(5, paymentsTable.getValueAt(x, 2).toString());
                                                        pstmtNet.setString(6, reason);
                                                        //pstmtNet.setString(6, billTable.getValueAt(i, 5).toString().toUpperCase());
                                                        pstmtNet.setString(7, "");
                                                        pstmtNet.setString(8, "");
                                                        pstmtNet.setString(9, "");
                                                        pstmtNet.setString(10, "");
                                                        pstmtNet.setString(11, transNo);
                                                        pstmtNet.setString(12, "PAYE");
                                                        pstmtNet.setDouble(14, java.lang.Double.valueOf(paymentsTable.getValueAt(x, 6).toString()));
                                                        pstmtNet.setDouble(13, 0.0);
                                                        pstmtNet.setDouble(25, java.lang.Double.valueOf(paymentsTable.getValueAt(x, 6).toString()));
                                                        pstmtNet.setDate(15, dat);
                                                        pstmtNet.setObject(16, paymentsTable.getValueAt(x, 1).toString());
                                                        pstmtNet.setString(17, glType);
                                                        pstmtNet.setBoolean(18, false);
                                                        pstmtNet.setBoolean(19, false);
                                                        pstmtNet.setString(20, user);
                                                        pstmtNet.setString(21, "");
                                                        pstmtNet.setObject(22, dat_deu);
                                                        pstmtNet.setDate(23, dat);
                                                        pstmtNet.setDouble(24, 0.0);

                                                        pstmtNet.executeUpdate();

                                                        java.sql.PreparedStatement pstmt6 = connectDB.prepareStatement("insert into ac_accounts_payable values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                                        pstmt6.setObject(1, paymentsTable.getValueAt(x, 9).toString());
                                                        pstmt6.setString(4, paymentsTable.getValueAt(x, 0).toString());
                                                        pstmt6.setObject(3, paymentsTable.getValueAt(x, 3).toString());
                                                        pstmt6.setString(2, paymentsTable.getValueAt(x, 2).toString());
                                                        pstmt6.setString(5, paymentsTable.getValueAt(x, 2).toString());
                                                        pstmt6.setString(6, paymentsTable.getValueAt(x, 3).toString());
                                                        pstmt6.setString(7, chequeNumberTxt.getText());
                                                        pstmt6.setString(8, vatNumberTxt.getText());
                                                        pstmt6.setString(9, glAccountTxt.getText());
                                                        pstmt6.setString(10, chequeNumberTxt.getText());
                                                        pstmt6.setString(11, transNo);
                                                        pstmt6.setString(12, "Payment");
                                                        pstmt6.setDouble(13, java.lang.Double.valueOf(paymentsTable.getValueAt(x, 6).toString()));
                                                        pstmt6.setDouble(14, 0.00);
                                                        pstmt6.setDate(15, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                                        pstmt6.setObject(16, paymentsTable.getValueAt(x, 1).toString());
                                                        pstmt6.setString(17, jTextField8.getText());
                                                        pstmt6.setBoolean(18, true);
                                                        pstmt6.setBoolean(19, true);
                                                        pstmt6.setString(20, user);
                                                        pstmt6.setString(21, "");
                                                        pstmt6.setDate(22, com.afrisoftech.lib.SQLDateFormat.getSQLDate(chequeDatePicker.getDate()));
                                                        pstmt6.setDate(23, com.afrisoftech.lib.SQLDateFormat.getSQLDate(chequeDatePicker.getDate()));
                                                        pstmt6.setDouble(24, 0.00);
                                                        pstmt6.executeUpdate();
                                                    }
                                                    //end of paying commissioner of income tax                    
                                                    if (!paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("PRNO")) {
                                                        java.sql.PreparedStatement pstmt212 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                                        pstmt212.setObject(1, paymentsTable.getValueAt(x, 9).toString());
                                                        pstmt212.setString(2, desc);
                                                        pstmt212.setString(14, desc);

                                                        pstmt212.setString(3, paymentsTable.getValueAt(x, 1).toString());
                                                        pstmt212.setString(4, paymentsTable.getValueAt(x, 2).toString());

                                                        pstmt212.setString(5, reason);
                                                        pstmt212.setString(6, paymentsTable.getValueAt(x, 0).toString());
                                                        pstmt212.setString(7, paymentsTable.getValueAt(x, 2).toString());
                                                        pstmt212.setString(8, "");
                                                        pstmt212.setString(9, "");
                                                        pstmt212.setString(10, "");
                                                        pstmt212.setString(11, "");
                                                        pstmt212.setString(12, "");
                                                        pstmt212.setString(13, "");
                                                        // String reason = "";
//                                                    java.sql.PreparedStatement pstmtD = connectDB.prepareStatement("SELECT reason FROM ac_bills WHERE voucher_no = '" + paymentsTable.getValueAt(x, 0).toString() + "'");
//                                                    java.sql.ResultSet rsetD = pstmtD.executeQuery();
//                                                    while (rsetD.next()) {
//                                                        reason = rsetD.getString(1);
//                                                    }

                                                        if (paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("VCPC") || paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("P_IMPREST")) {
                                                            pstmt212.setString(15, "Personal Claims");
                                                        } else if (paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("SAL_ADV")) {
                                                            pstmt212.setString(15, "Salary Advance");
                                                        } else if (paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("VCBOD")) {
                                                            pstmt212.setString(15, "BOARD PAYMENTS");

                                                            java.sql.PreparedStatement pstmtBod = connectDB.prepareStatement("update ac_other_payments set paid = true, debit = ?, user_name = ?, payment_date = ?  WHERE final_voucher_no = ?");
                                                            pstmtBod.setDouble(1, java.lang.Double.valueOf(paymentsTable.getValueAt(x, 6).toString()));
                                                            pstmtBod.setString(2, com.afrisoftech.lib.UserName.getLoginName(connectDB));
                                                            pstmtBod.setDate(3, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                                            pstmtBod.setString(4, paymentsTable.getValueAt(x, 0).toString());
                                                            pstmtBod.executeUpdate();

                                                        } else if (paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("VCKIN")) {
                                                            pstmt212.setString(15, "NEXT OF KIN PAYMENT");
                                                        } else if (paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("VCPAYE")) {
                                                            pstmt212.setString(15, "PAYE PAYMENT");
                                                        } else if (paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("VCREM")) {
                                                            pstmt212.setString(15, "OTHER PAYABLE");
                                                        }
                                                        pstmt212.setDouble(16, java.lang.Double.valueOf(paymentsTable.getValueAt(x, 6).toString()));
                                                        pstmt212.setDouble(17, 0.00);
                                                        pstmt212.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(chequeDatePicker.getDate()));
                                                        pstmt212.setString(19, transNo);
                                                        pstmt212.setBoolean(20, false);
                                                        pstmt212.setBoolean(21, false);
                                                        pstmt212.setBoolean(22, false);
                                                        pstmt212.setString(23, user);
                                                        pstmt212.setString(24, shiftNumberTxt.getText());
                                                        pstmt212.setString(25, cashPointTxt.getText());
                                                        pstmt212.executeUpdate();
                                                    }
                                                    java.sql.PreparedStatement pstmt12 = connectDB.prepareStatement("update ac_bills set approved = true, debit = ?  WHERE final_voucher_no = ?");
                                                    pstmt12.setDouble(1, java.lang.Double.valueOf(paymentsTable.getValueAt(x, 6).toString()));
                                                    pstmt12.setString(2, paymentsTable.getValueAt(x, 0).toString());
                                                    pstmt12.executeUpdate();



                                                    //Decommit the commited amount from the vote book
//                                                    com.afrisoftech.lib.VoteBook.decommitVoteBook(connectDB, paymentsTable.getValueAt(x, 0).toString(),
//                                                        java.lang.Double.valueOf(paymentsTable.getValueAt(x, 6).toString()));
                                                }
                                            }
                                        }
                                        // Post creditor related payments to cr_allocation to maintain creditor accounts
                                        if (!paymentsTable.getModel().getValueAt(x, 0).toString().contains("IMPREST") && !paymentsTable.getModel().getValueAt(x, 0).toString().contains("SAL_ADV") && !paymentsTable.getModel().getValueAt(x, 0).toString().contains("VCBOD") && !paymentsTable.getModel().getValueAt(x, 0).toString().contains("VCKIN") && !paymentsTable.getModel().getValueAt(x, 0).toString().contains("VCPAYE") && !paymentsTable.getModel().getValueAt(x, 0).toString().contains("VCREM")) {
                                            if (paymentsTable.getModel().getValueAt(x, 5) != null) {

                                                if (java.lang.Double.parseDouble(paymentsTable.getValueAt(x, 6).toString()) > 0) {

                                                    java.sql.PreparedStatement pstmtq = connectDB.prepareStatement("insert into cr_allocation values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?)");
                                                    pstmtq.setObject(1, paymentsTable.getValueAt(x, 9).toString());
                                                    pstmtq.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(chequeDatePicker.getDate()));
                                                    pstmtq.setObject(3, paymentsTable.getValueAt(x, 2).toString());
                                                    pstmtq.setString(4, paymentsTable.getValueAt(x, 0).toString());
                                                    pstmtq.setObject(5, paymentsTable.getValueAt(x, 1).toString());
                                                    pstmtq.setString(6, paymentsTable.getValueAt(x, 10).toString());
                                                    pstmtq.setInt(7, Integer.parseInt(chequeNumberTxt.getText()));
                                                    pstmtq.setDouble(8, java.lang.Double.valueOf(paymentsTable.getValueAt(x, 4).toString()));
                                                    pstmtq.setDouble(9, java.lang.Double.valueOf(paymentsTable.getValueAt(x, 5).toString()));
                                                    pstmtq.setDouble(10, java.lang.Double.valueOf(paymentsTable.getValueAt(x, 6).toString()));
                                                    pstmtq.setDouble(11, java.lang.Double.valueOf(paymentsTable.getValueAt(x, 8).toString()));
                                                    pstmtq.setString(12, user);
                                                    pstmtq.setString(13, bankAccountNumberCmbx.getSelectedItem().toString());
                                                    pstmtq.setString(14, bankNameTxt.getText());
                                                    pstmtq.setObject(15, paymentsTable.getValueAt(x, 4).toString());
                                                    pstmtq.setObject(16, paymentsTable.getValueAt(x, 9).toString());
                                                    pstmtq.executeUpdate();

                                                    if (this.payrollCreditorChkbx.isSelected()) {
                                                        java.sql.PreparedStatement pstmt12 = connectDB.prepareStatement("update ac_payroll_ledger set balance = balance - '" + java.lang.Double.valueOf(paymentsTable.getValueAt(x, 4).toString()) + "', vat_balance = vat_balance - '" + java.lang.Double.valueOf(paymentsTable.getValueAt(x, 6).toString()) + "' where invoice_no ='" + paymentsTable.getValueAt(x, 0).toString() + "' and dealer = '" + paymentsTable.getValueAt(x, 2).toString() + "' and credit = '" + java.lang.Double.valueOf(paymentsTable.getValueAt(x, 2).toString()) + "'");
                                                        pstmt12.executeUpdate();
                                                    } else {
                                                        java.sql.PreparedStatement pstmt12 = connectDB.prepareStatement("update ac_accounts_payable set balance = balance - '" + java.lang.Double.valueOf(paymentsTable.getValueAt(x, 6).toString()) + "', vat_balance = vat_balance - '" + java.lang.Double.valueOf(paymentsTable.getValueAt(x, 8).toString()) + "' where invoice_no ='" + paymentsTable.getValueAt(x, 1).toString() + "' and dealer = '" + paymentsTable.getValueAt(x, 2).toString() + "' and credit = '" + java.lang.Double.valueOf(paymentsTable.getValueAt(x, 6).toString()) + "'");
                                                        pstmt12.executeUpdate();
                                                    }
                                                }
                                            }

                                            // Post creditor/supplier payment for the payment to supplier in ac_accounts_payable table
                                            if (paymentsTable.getModel().getValueAt(x, 5) != null) {
                                                if (java.lang.Double.parseDouble(paymentsTable.getValueAt(x, 8).toString()) > 0) {
                                                    java.sql.PreparedStatement pstmtd = connectDB.prepareStatement("insert into ac_accounts_payable values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                                    pstmtd.setObject(1, paymentsTable.getValueAt(x, 9).toString());
                                                    pstmtd.setString(4, "");
                                                    pstmtd.setString(3, paymentsTable.getValueAt(x, 3).toString());
                                                    pstmtd.setString(2, KRA);
                                                    pstmtd.setString(5, paymentsTable.getValueAt(x, 2).toString());
                                                    pstmtd.setString(6, paymentsTable.getValueAt(x, 2).toString());
                                                    pstmtd.setString(7, Code);
                                                    pstmtd.setString(8, vatNumberTxt.getText());
                                                    pstmtd.setString(9, glAccountTxt.getText());
                                                    pstmtd.setString(10, chequeNumberTxt.getText());
                                                    pstmtd.setString(11, transNo);
                                                    pstmtd.setString(12, "INV");
                                                    pstmtd.setDouble(14, java.lang.Double.valueOf(paymentsTable.getValueAt(x, 6).toString()));
                                                    pstmtd.setDouble(13, 0.00);
                                                    pstmtd.setDate(15, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                                    pstmtd.setObject(16, paymentsTable.getValueAt(x, 0).toString());
                                                    pstmtd.setString(17, jTextField8.getText());
                                                    pstmtd.setBoolean(18, false);
                                                    pstmtd.setBoolean(19, false);
                                                    pstmtd.setString(20, user);
                                                    pstmtd.setString(21, "");
                                                    pstmtd.setDate(22, com.afrisoftech.lib.SQLDateFormat.getSQLDate(chequeDatePicker.getDate()));
                                                    pstmtd.setDate(23, com.afrisoftech.lib.SQLDateFormat.getSQLDate(chequeDatePicker.getDate()));
                                                    pstmtd.setDouble(24, 0.00);
                                                    pstmtd.executeUpdate();

                                                }
                                            }

                                        }

                                        //   }

                                    }

                                    for (int j = 0; j < deductionsTable.getRowCount(); j++) {
                                        if (deductionsTable.getModel().getValueAt(j, 0) != null) {

                                            java.sql.PreparedStatement pstmt11 = connectDB.prepareStatement("insert into ac_creditors_deductions values(?, ?, ?, ?, ?, ?, ?, ?, ?)");
                                            pstmt11.setDate(1, com.afrisoftech.lib.SQLDateFormat.getSQLDate(chequeDatePicker.getDate()));
                                            pstmt11.setObject(2, jTextField1.getText());
                                            pstmt11.setString(4, chequeNumberTxt.getText());
                                            pstmt11.setObject(3, paymentsTable.getValueAt(j, 2));
                                            pstmt11.setObject(5, paymentsTable.getValueAt(j, 0).toString());
                                            pstmt11.setDouble(6, 0.00);
                                            pstmt11.setDouble(7, java.lang.Double.valueOf(deductionsTable.getValueAt(j, 1).toString()));
                                            if (deductionsTable.getModel().getValueAt(j, 3) != null) {
                                                pstmt11.setObject(8, deductionsTable.getValueAt(j, 0).toString() + " " + deductionsTable.getValueAt(j, 3).toString());
                                            } else {
                                                pstmt11.setObject(8, deductionsTable.getValueAt(j, 0).toString());
                                            }
                                            pstmt11.setString(9, user);
                                            pstmt11.executeUpdate();

                                            if (deductionsTable.getModel().getValueAt(j, 3) != null) {
                                                java.sql.Statement ps232 = connectDB.createStatement();
                                                java.sql.ResultSet rs232 = ps232.executeQuery("select payer_name from ac_schemes where account_no = '" + paymentsTable.getValueAt(j, 4).toString() + "'");
                                                while (rs232.next()) {
                                                    Payer = rs232.getObject(1).toString();
                                                    java.sql.Statement ps2321 = connectDB.createStatement();
                                                    java.sql.ResultSet rs2321 = ps2321.executeQuery("select 'RC'||lpad(nextval('mcredit_no_seq')::text,3,0::text)");
                                                    while (rs2321.next()) {
                                                        rNo = rs221.getObject(1).toString();
                                                    }
                                                    java.sql.PreparedStatement pstmtw = connectDB.prepareStatement("insert into ac_debtors values(?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                                                    pstmtw.setObject(1, actCode1);
                                                    pstmtw.setObject(2, Payer);
                                                    pstmtw.setString(3, deductionsTable.getValueAt(j, 0).toString());
                                                    pstmtw.setString(4, "");
                                                    pstmtw.setObject(5, deductionsTable.getValueAt(j, 3).toString());
                                                    pstmtw.setString(6, "");
                                                    pstmtw.setString(11, transNo);
                                                    pstmtw.setString(8, rNo);
                                                    pstmtw.setObject(7, deductionsTable.getValueAt(j, 4).toString());
                                                    pstmtw.setString(9, "");
                                                    pstmtw.setString(10, chequeNumberTxt.getText());
                                                    pstmtw.setString(16, rNo);
                                                    pstmtw.setString(12, deductionsTable.getValueAt(j, 0).toString());
                                                    pstmtw.setDate(15, com.afrisoftech.lib.SQLDateFormat.getSQLDate(chequeDatePicker.getDate()));
                                                    pstmtw.setDouble(13, 0.00);
                                                    pstmtw.setDouble(14, java.lang.Double.valueOf(deductionsTable.getValueAt(j, 1).toString()));
                                                    pstmtw.setObject(22, 0.00);
                                                    pstmtw.setString(17, actNames1);
                                                    pstmtw.setBoolean(18, true);
                                                    pstmtw.setBoolean(19, true);
                                                    pstmtw.setString(20, user);
                                                    pstmtw.setString(21, "");
                                                    pstmtw.setDouble(24, java.lang.Double.valueOf(deductionsTable.getValueAt(j, 1).toString()));
                                                    pstmtw.setBoolean(23, false);
                                                    pstmtw.executeUpdate();

                                                }
                                            } else {
                                                if (deductionsTable.getModel().getValueAt(j, 5) != null) {
                                                    java.sql.PreparedStatement pstmt212 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                                    pstmt212.setObject(1, deductionsTable.getValueAt(j, 5).toString());
                                                    pstmt212.setString(2, deductionsTable.getValueAt(j, 0).toString());
                                                    pstmt212.setString(3, "");
                                                    pstmt212.setString(4, paymentsTable.getValueAt(j, 2).toString());
                                                    pstmt212.setString(5, "Medbill");
                                                    pstmt212.setString(6, "");
                                                    pstmt212.setString(7, paymentsTable.getValueAt(j, 2).toString());
                                                    pstmt212.setString(8, "");
                                                    pstmt212.setString(9, "");
                                                    pstmt212.setString(10, "");
                                                    pstmt212.setString(11, "");
                                                    pstmt212.setString(12, "");
                                                    pstmt212.setString(13, "");
                                                    pstmt212.setString(14, deductionsTable.getValueAt(j, 0).toString());
                                                    pstmt212.setString(15, "Revenue");
                                                    pstmt212.setDouble(16, 0.00);
                                                    pstmt212.setDouble(17, java.lang.Double.valueOf(deductionsTable.getValueAt(j, 1).toString()));
                                                    pstmt212.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(chequeDatePicker.getDate()));
                                                    pstmt212.setString(19, transNo);
                                                    pstmt212.setBoolean(20, false);
                                                    pstmt212.setBoolean(21, false);
                                                    pstmt212.setBoolean(22, false);
                                                    pstmt212.setString(23, user);
                                                    pstmt212.setString(24, shiftNumberTxt.getText());
                                                    pstmt212.setString(25, cashPointTxt.getText());
                                                    pstmt212.executeUpdate();

                                                } else {
                                                    if (deductionsTable.getModel().getValueAt(j, 2) != null) {
                                                        java.sql.Statement ps22c = connectDB.createStatement();
                                                        java.sql.ResultSet rs22c = ps22c.executeQuery("select 'INV'||lpad(nextval('inv_no_seq')::text,4,0::text)");
                                                        while (rs22c.next()) {
                                                            invoiceNo = rs22c.getObject(1).toString();
                                                        }
                                                        java.sql.PreparedStatement pstmts = connectDB.prepareStatement("insert into ac_accounts_payable values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                                        pstmts.setObject(1, jTextField7.getText());
                                                        pstmts.setString(4, "");
                                                        pstmts.setObject(3, deductionsTable.getValueAt(j, 0).toString());
                                                        pstmts.setString(2, deductionsTable.getValueAt(j, 2).toString());
                                                        pstmts.setString(5, paymentsTable.getValueAt(j, 2).toString());
                                                        pstmts.setString(6, paymentsTable.getValueAt(j, 3).toString());
                                                        pstmts.setString(7, deductionsTable.getValueAt(j, 4).toString());
                                                        pstmts.setString(8, vatNumberTxt.getText());
                                                        pstmts.setString(9, glAccountTxt.getText());
                                                        pstmts.setString(10, chequeNumberTxt.getText());
                                                        pstmts.setString(11, transNo);
                                                        pstmts.setString(12, deductionsTable.getValueAt(j, 0).toString());
                                                        pstmts.setDouble(14, java.lang.Double.valueOf(deductionsTable.getValueAt(j, 1).toString()));
                                                        pstmts.setDouble(13, 0.00);
                                                        pstmts.setDate(15, com.afrisoftech.lib.SQLDateFormat.getSQLDate(chequeDatePicker.getDate()));
                                                        pstmts.setObject(17, deductionsTable.getValueAt(j, 0).toString());
                                                        pstmts.setString(16, invoiceNo);
                                                        pstmts.setBoolean(18, false);
                                                        pstmts.setBoolean(19, false);
                                                        pstmts.setString(20, user);
                                                        pstmts.executeUpdate();

                                                    }
                                                }

                                            }
                                        } else {
                                        }
                                    }

                                    java.sql.PreparedStatement pstmt2a = connectDB.prepareStatement("update pb_documents_register set used = true where chq_no ='" + chequeNumberTxt.getText() + "' and doc_no = '" + glAccountTxt.getText() + "'");
                                    pstmt2a.executeUpdate();




                                    connectDB.commit();
                                    connectDB.setAutoCommit(true);
                                    javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully. Payment Schedule Number : '" + scheduleNo + "'", "Comfirmation", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                                    makePaymentsandPrintBtn.setEnabled(false);
                                    makePaymentBtn.setEnabled(false);
                                    reprintVoucherBtn.setEnabled(true);
                                    chequeNumberTxt.setText("");
                                    netAmountTxt.setText("");
                                    glAccountTxt.setText("");
                                    bankAccountNameTxt.setText("");
                                    //      jTextField31.setText("");
                                    //      this.jComboBox1.setSelectedItem(null);
                                    bankNameTxt.setText("");
                                    //            jTextField9.setText("");
                                    //  crset1.execute();

                                } catch (java.sql.SQLException sq) {
                                    sq.printStackTrace();
                                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                    try {
                                        connectDB.rollback(registerSavePoint);
                                    } catch (java.sql.SQLException sql) {
                                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                    }
                                    System.out.println(sq.getMessage());
                                    jLabel7.setForeground(java.awt.Color.red);
                                    jLabel7.setText("Sorry. Please Check The Fields");
                                }
                            }

                        } catch (java.lang.Exception ex) {
                            ex.printStackTrace();
                            System.out.println(ex.getMessage());
                            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                        }
                    }

                } else {
                    javax.swing.JOptionPane.showMessageDialog(this, "Please enter the cheque number on the required field");
                }
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "The Account/Cash book MUST be selected for payments to be effected");
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "At least one payment MUST be selected for valid payments to be effected");
        }
        // Add your handling code here:
    }//GEN-LAST:event_makePaymentBtnActionPerformed

    private void closeFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFormBtnActionPerformed
        this.setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_closeFormBtnActionPerformed

    private void clearFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFormBtnActionPerformed
        for (int k = 0; k < paymentsTable.getRowCount(); k++) {
            for (int r = 0; r < paymentsTable.getColumnCount(); r++) {
                paymentsTable.getModel().setValueAt(null, k, r);
            }
        }
        chequeNumberTxt.setText("");
        // jTextField3.setText("");
        glAccountTxt.setText("");
        bankAccountNameTxt.setText("");
        //        jTextField31.setText("");
        netAmountTxt.setText("0.00");
        deductionsTxt.setText("0.00");
        grossAmountTxt.setText("0.00");
        //        jTextField9.setText("");

        bankNameTxt.setText("");
        //        this.jComboBox1.setSelectedItem(null);
        //        this.jTextField9.setText("");
        // Add your handling code here:
    }//GEN-LAST:event_clearFormBtnActionPerformed

    private void reprintVoucherBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reprintVoucherBtnActionPerformed
        com.afrisoftech.accounting.Reprinting_vouchers_Dialog nw = new com.afrisoftech.accounting.Reprinting_vouchers_Dialog(new javax.swing.JFrame(), true, connectDB, null);
        nw.setBounds(250, 100, 400, 300);
        nw.setVisible(true);


        /*        String vouchNo = null;
         try {
         java.sql.Statement ps22 = connectDB.createStatement();
         java.sql.ResultSet rs22 = ps22.executeQuery("select 'VC'||lpad(currval('voucher_no_seq')::text,5,0::text)");
         while (rs22.next()) {
         vouchNo = rs22.getObject(1).toString();
         }

         } catch (java.sql.SQLException sqlExec) {

         javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

         }
         * */
        com.afrisoftech.reports.VoucherPdf policy = new com.afrisoftech.reports.VoucherPdf();
        policy.VoucherPdf(connectDB, scheduleNo, true);   // Add your handling code here:
    }//GEN-LAST:event_reprintVoucherBtnActionPerformed

    private void makePaymentsandPrintBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makePaymentsandPrintBtnActionPerformed
        if (Double.parseDouble(grossAmountTxt.getText().replace(",", "")) > 0.00) {
            if (glAccountTxt.getText().length() > 0) {
                if (chequeNumberTxt.getText().length() > 0) {

                    java.util.Calendar calendar = java.util.Calendar.getInstance();

                    long dateNow = calendar.getTimeInMillis();

                    java.sql.Date datenowSql = new java.sql.Date(dateNow);

                    System.out.println(datenowSql.toString());

                    java.sql.Connection con;
                    //  String vouchNo = null;
                    String user = null;
                    String invoiceNo = null;
                    String KRA = null;
                    String Code = null;
                    String actNames1 = null;
                    String actCode1 = null;
                    String rNo = null;
                    String Payer = null;
                    double Deductions = java.lang.Double.parseDouble(deductionsTxt.getText().replace(",", ""));
                    double Net = java.lang.Double.parseDouble(netAmountTxt.getText().replace(",", ""));

                    makePaymentBtnActionPerformed(evt);

                    if (Net < 0) {
                        javax.swing.JOptionPane.showMessageDialog(this, "Deductions MORE THAN The Earnings", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    } else {
                        try {
                            connectDB.setAutoCommit(false);

                            connectDB.commit();
                            connectDB.setAutoCommit(true);
                            //javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully Voucher No is '"+vouchNo+"'","Comfirmation",javax.swing.JOptionPane.INFORMATION_MESSAGE);

                            makePaymentsandPrintBtn.setEnabled(false);
                            makePaymentBtn.setEnabled(false);
                            reprintVoucherBtn.setEnabled(true);

                            //com.afrisoftech.txtreports.VoucherTxt policy = new com.afrisoftech.txtreports.VoucherTxt(connectDB,vouchNo);
                            if (otherPaymentsChk.isSelected()) {
                                com.afrisoftech.reports.BoardSchedulePdf policy = new com.afrisoftech.reports.BoardSchedulePdf();
                                policy.BoardSchedulePdf(connectDB, scheduleNo, true);
                            } else {
                                com.afrisoftech.reports.PaymentSchedulePdf policy = new com.afrisoftech.reports.PaymentSchedulePdf();
                                policy.PaymentSchedulePdf(connectDB, scheduleNo, true);
                            }
                            //            jTextField1.setText("");
                            chequeNumberTxt.setText("");
                            netAmountTxt.setText("");
                            glAccountTxt.setText("");
                            bankAccountNameTxt.setText("");
                            //                jTextField31.setText("");
                            //          this.jComboBox1.setSelectedItem(null);
                            bankNameTxt.setText("");
                            //            jTextField9.setText("");
                            //  crset1.execute();

                        } catch (java.sql.SQLException sq) {
                            sq.printStackTrace();
                            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                            try {
                                connectDB.rollback();
                            } catch (java.sql.SQLException sql) {
                                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                            }
                            System.out.println(sq.getMessage());
                            jLabel7.setForeground(java.awt.Color.red);
                            jLabel7.setText("Sorry. Please Check The Fields");
                        }
                    }

                } else {
                    javax.swing.JOptionPane.showMessageDialog(this, "Please enter the cheque number on the required field");
                }
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "The Account/Cash book MUST be selected for payments to be effected");
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "At least one payment MUST be selected for valid payments to be effected");
        }
        // Add your handling code here:
    }//GEN-LAST:event_makePaymentsandPrintBtnActionPerformed

    private void deductionsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deductionsTableMouseClicked
        if (deductionsTable.getSelectedColumn() == 3) {

            this.cmbox1MouseClicked();
        }    // Add your handling code here:
    }//GEN-LAST:event_deductionsTableMouseClicked

    private void deductionsTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deductionsTableKeyReleased
        double resFloat = 0.00;
        //  double totalSum = 0.00;
        double floatTotal = java.lang.Double.parseDouble(deductionsTxt.getText().replace(",", ""));

        //   double resFloat = 0.00;
        //  double totalSum = 0.00;
        // double floatTotal = java.lang.Double.parseDouble(jTextField3.getText());

        if (deductionsTable.getModel().getValueAt(deductionsTable.getSelectedRow(), 1) != null) {
            double floatCol2 = java.lang.Double.parseDouble(deductionsTable.getValueAt(deductionsTable.getSelectedRow(), 1).toString());

            //double floatCol3 = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString());

            double resVal = floatCol2;

            deductionsTable.setValueAt(new java.lang.Float(resVal), deductionsTable.getSelectedRow(), 1);

            for (int i = 0; i < deductionsTable.getRowCount(); i++) {

                if (deductionsTable.getModel().getValueAt(i, 0) != null) {//toString().compareToIgnoreCase(null) {

                    resFloat = resFloat + Double.parseDouble(deductionsTable.getValueAt(i, 1).toString());

                    // totalSum = floatTotal + resFloat;

                }
            }
            this.tableModelTableChanged2();
        }        // Add your handling code here:
    }//GEN-LAST:event_deductionsTableKeyReleased

    private void paymentsTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paymentsTableKeyReleased
        double resFloat = 0.00;
        if (paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 5) != null) {

            //    float floatCol2 = java.lang.Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString());

            float floatCol3 = java.lang.Float.parseFloat(paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 4).toString());

            float resVal = floatCol3;

            paymentsTable.setValueAt(new java.lang.Float(resVal), paymentsTable.getSelectedRow(), 4);

            for (int i = 0; i < paymentsTable.getRowCount(); i++) {

                if (paymentsTable.getModel().getValueAt(i, 2) != null) {//toString().compareToIgnoreCase(null) {

                    resFloat = resFloat + Double.parseDouble(paymentsTable.getValueAt(i, 4).toString());

                    // totalSum = floatTotal + resFloat;

                }
            }

            this.tableModelTableChanged1();
        }

        // Add your handling code here:
    }//GEN-LAST:event_paymentsTableKeyReleased

    private void paymentsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paymentsTableMouseClicked

        if (glAccountTxt.getText().length() > 0) {
            double floatCol2 = java.lang.Double.parseDouble(paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 5).toString());
            double floatCol21 = 0.00;
            double floatCol5 = java.lang.Double.parseDouble(paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 6).toString());
            //double Vat = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());
            double Gross = java.lang.Double.parseDouble(this.grossAmountTxt.getText().replace(",", ""));

            double Vat = java.lang.Double.parseDouble(this.deductionsTxt.getText().replace(",", ""));
            double Total = new com.afrisoftech.sys.Format2Number().Format2Number(netAmountTxt.getText().replace(",", "")).doubleValue();

            //if (jTable1.getSelectedColumn() == 5) {
            if (Boolean.valueOf(paymentsTable.getModel().getValueAt(paymentsTable.getSelectedRow(), 7).toString()) == java.lang.Boolean.TRUE) {

                // if (jTable1.getValueAt(jTable1.getSelectedRow(), 5) != null) {
                if (paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 5) != null) {
                    paymentsTable.setValueAt(new java.lang.Float(floatCol2), paymentsTable.getSelectedRow(), 6);
                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(paymentsTable, 6);
                    double totalVat = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(paymentsTable, 8);
                    this.grossAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                    this.deductionsTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalVat));
                    this.netAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum - totalVat));

                    /////getting the GLCODE

                    // paymentsTable.getModel().setValueAt(glAccountTxt.getText(), paymentsTable.getSelectedRow(), 9);

                    if (paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("IMPREST") && paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("SAL_ADV") && paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("VCBOD") && paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("VCKIN") && paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("VCPAYE") && paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 0).toString().contains("VCREM")) {
                        paymentsTable.setValueAt("CHEQUE", paymentsTable.getSelectedRow(), 10);
                    } else {
                        paymentsTable.setValueAt("RTGS", paymentsTable.getSelectedRow(), 10);
                    }
                    //               this.jTextField31.setText(java.lang.String.valueOf(paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 1)));
                }

            } else {

                if (Boolean.valueOf(paymentsTable.getModel().getValueAt(paymentsTable.getSelectedRow(), 7).toString()) == java.lang.Boolean.FALSE) {

                    //    paymentsTable.getModel().setValueAt("", paymentsTable.getSelectedRow(), 9);

                    if (paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 5) != null) {
                        double totalVat = 0.00;
                        paymentsTable.setValueAt(new java.lang.Float(floatCol21), paymentsTable.getSelectedRow(), 6);
                        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(paymentsTable, 6);
                        double calcVat = java.lang.Double.parseDouble(paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 8).toString());
                        if (calcVat == 0) {
                            calcVat = 0.00;
                        } else {
                            totalVat = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(paymentsTable, 8);
                        }
                        this.grossAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                        this.deductionsTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalVat));
                        this.netAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum - totalVat));
                    }
                }
                // }
            }

        } else {

            javax.swing.JOptionPane.showMessageDialog(this, "You MUST set the bank account/cash book that shall be used to make the payments.");
            paymentsTable.setValueAt(false, paymentsTable.getSelectedRow(), 7);
        }
        // Add your handling code here:
    }//GEN-LAST:event_paymentsTableMouseClicked

    private void netAmountTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_netAmountTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_netAmountTxtActionPerformed

    private void bankAccountNumberCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bankAccountNumberCmbxActionPerformed
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset1 = stmt.executeQuery("select bank_account_name,gl_code,bank_name from ac_banks_setup where bank_account_no ='" + bankAccountNumberCmbx.getSelectedItem().toString() + "'");
            while (rset1.next()) {
                bankAccountNameTxt.setText(rset1.getObject(1).toString());
                glAccountTxt.setText(rset1.getObject(2).toString());
                bankNameTxt.setText(rset1.getObject(3).toString());

            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }         // Add your handling code here:
    }//GEN-LAST:event_bankAccountNumberCmbxActionPerformed

    private void viewPendingPaymentsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPendingPaymentsBtnActionPerformed
      //  creditorsChk.setSelected(true);
        
        paymentsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT voucher_no, invoice_no, dealer as creditor, 'Pay' as Action, SUM(credit) as invoice_amount,  "
                + "(SELECT voucher_amount FROM funsoft_payables_to_pay(dealer, invoice_no)) as amount_due, SUM(0.00)::numeric as amount_to_pay, false as authorise, "
                + "SUM(0.00)::numeric as vat, (SELECT gl_code FROM st_suppliers WHERE supplier_name = dealer) as  "
                + "gl_account,  '' as pay_mode from ac_accounts_payable WHERE approved = true and dealer NOT Ilike '%BOARD MEMBER%' and dealer NOT Ilike '%CASUAL LABOURERS%'   "
                + "and voucher_no is not null and voucher_no != '' GROUP BY 1,2,3,4,10 HAVING SUM(credit-debit) > 0  "
                + "UNION SELECT final_voucher_no, dealer_code, dealer, 'Pay' as Action, sum(credit) as invoice_amount, sum(credit-debit) as amount_due,  "
                + "SUM(0.00)::numeric as amount_to_pay, false as authorise, sum(0.00)::numeric as vat, "
                + "code, 'CHEQUE' as pay_mode FROM ac_bills WHERE approved = true and (dealer NOT Ilike '%BOARD MEMBER%' and dealer NOT Ilike '%CASUAL LABOURERS%')   "
                + "GROUP BY 1,2,3,4,10 HAVING SUM(credit-debit) > 0 ORDER BY creditor,voucher_no"));

        if(creditorsChk.isSelected()){
           creditorsChk.doClick(); 
        } else if(staffPaymentChk.isSelected()){
            staffPaymentChk.doClick();
        } else {
           otherPaymentsChk.doClick();
        }
        
        for (int k = 0; k < paymentsTable.getRowCount(); k++) {

            try {
                java.sql.Statement ps = connectDB.createStatement();
                java.sql.ResultSet rst = ps.executeQuery("select count(*) from master_file where concat(first_name,' ',last_name)='" + paymentsTable.getValueAt(k, 2).toString() + "'");
                while (rst.next()) {
                    System.out.println("mimi ni msoo " + rst.getInt(1));
                    if (rst.getInt(1) > 0 || paymentsTable.getValueAt(k, 2).toString().contains("BOARD MEMBER") || paymentsTable.getValueAt(k, 2).toString().contains("CASUAL LABOURERS") || paymentsTable.getValueAt(k, 2).toString().contains("PROJECT")) {

                        java.sql.Statement pis = connectDB.createStatement();
                        java.sql.ResultSet rist = pis.executeQuery("select distinct activity_code from ac_accounts_payable where voucher_no='" + paymentsTable.getValueAt(k, 0).toString() + "'");
                        while (rist.next()) {

                            paymentsTable.setValueAt(rist.getObject(1), k, 9);
                            System.out.println("mimi ni msoo2 " + rist.getObject(1).toString());
                        }
                    }
                }
            } catch (Exception y) {
                y.printStackTrace();
            }

        }

        netAmountTxt.setText("0.00");
        this.makePaymentBtn.setEnabled(true);
        this.makePaymentsandPrintBtn.setEnabled(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_viewPendingPaymentsBtnActionPerformed

    private void searchButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton2ActionPerformed
        cmbox22MouseClicked();        // Add your handling code here:
    }//GEN-LAST:event_searchButton2ActionPerformed

    private void reprintVoucherBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reprintVoucherBtn1ActionPerformed

        biz.systempartners.reports.PaymentScheduleIntfr dismth = new biz.systempartners.reports.PaymentScheduleIntfr(connectDB);
        saccopn.add(dismth, javax.swing.JLayeredPane.DEFAULT_LAYER);
        try {
            dismth.setSelected(true);
        } catch (java.beans.PropertyVetoException pvt) {
        }
        /*        String vouchNo = null;
         try {
         java.sql.Statement ps22 = connectDB.createStatement();
         java.sql.ResultSet rs22 = ps22.executeQuery("select 'VC'||lpad(currval('voucher_no_seq')::text,5,0::text)");
         while (rs22.next()) {
         vouchNo = rs22.getObject(1).toString();
         }

         } catch (java.sql.SQLException sqlExec) {

         javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

         }
         * */
        com.afrisoftech.reports.VoucherPdf policy = new com.afrisoftech.reports.VoucherPdf();
        policy.VoucherPdf(connectDB, scheduleNo, true);   // Add your handling code here:
    }//GEN-LAST:event_reprintVoucherBtn1ActionPerformed

    private void searchsupplierorstaffCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchsupplierorstaffCaretUpdate
        if (this.searchsupplierorstaff.getCaretPosition() < 3) {
            System.out.print("Nothing");
        } else {
            if (creditorsChk.isSelected()) {
                searchsupplierorstafftable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                        + "select distinct dealer as Supplier FROM ac_accounts_payable where approved=true and"
                        + " (voucher_no!='' and voucher_no is not null) and (dealer NOT Ilike '%BOARD MEMBER%' and dealer NOT Ilike '%CASUAL LABOURERS%' and dealer ilike '%" + searchsupplierorstaff.getText() + "%')\n"
                        + "  and invoice_no in (select invoice_no from ac_accounts_payable group by invoice_no having sum(credit-debit) != 0 )"));
                //jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct dealer as Supplier FROM ac_accounts_payable where approved=false and voucher_no!='' and examination=true and dealer ilike '%" + jTextField113.getText() + "%' and invoice_no in (select invoice_no from ac_accounts_payable group by invoice_no having sum(credit-debit) != 0 )"));
            } else if (staffPaymentChk.isSelected()) {
                //jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT employee_no, first_name||' '||last_name as name FROM master_file WHERE first_name||' '||middle_name||' '||last_name ilike '%" + jTextField113.getText() + "%' order by 2"));
                searchsupplierorstafftable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT distinct dealer_code, dealer FROM ac_bills WHERE approved = true and (dealer NOT Ilike '%BOARD MEMBER%' and dealer NOT Ilike '%CASUAL LABOURERS%' ) and (dealer_code ilike '%" + jTextField113.getText() + "%' \n"
                        + "and dealer ilike '%" + searchsupplierorstaff.getText() + "%') GROUP BY 1,2 HAVING SUM(credit-debit) > 0 order by 2 "));
            }

            jSearchScrollPane3.setViewportView(searchsupplierorstafftable);
            System.out.println("Cannot sort out");

        } // Add your handling code here:
    }//GEN-LAST:event_searchsupplierorstaffCaretUpdate

    private void searchsupplierorstaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchsupplierorstaffActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_searchsupplierorstaffActionPerformed

    private void searchsupplierorstafftableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchsupplierorstafftableMouseClicked
        //jTextField2.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0).toString());
        if (creditorsChk.isSelected()) {
            dealerNameTxt.setText(searchsupplierorstafftable.getValueAt(searchsupplierorstafftable.getSelectedRow(), 0).toString());
            paymentsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT voucher_no, invoice_no, dealer as creditor, 'Pay' as Action, SUM(credit) as invoice_amount,  \n"
                    + "(SELECT voucher_amount FROM funsoft_payables_to_pay(dealer, invoice_no)) as amount_due, SUM(0.00)::numeric as amount_to_pay, false as authorise, \n"
                    + "SUM(0.00)::numeric as vat, (SELECT gl_code FROM st_suppliers WHERE supplier_name = dealer) as  \n"
                    + "gl_account,  '' as pay_mode from ac_accounts_payable WHERE approved = true \n"
                    + "and (dealer NOT Ilike '%BOARD MEMBER%' and dealer NOT Ilike '%CASUAL LABOURERS%' and dealer = '" + dealerNameTxt.getText() + "') and voucher_no is not null and voucher_no != '' GROUP BY 1,2,3,4,10 HAVING SUM(credit-debit) > 0 ORDER BY creditor,voucher_no"));

        } else if (staffPaymentChk.isSelected()) {
            dealerNameTxt.setText(searchsupplierorstafftable.getValueAt(searchsupplierorstafftable.getSelectedRow(), 1).toString());
            String correct_name = dealerNameTxt.getText();
            if (correct_name.contains("'")) {
                correct_name = dealerNameTxt.getText().substring(0, dealerNameTxt.getText().indexOf("'"));
            } else if (!correct_name.contains("'")) {
                correct_name = dealerNameTxt.getText();
            }

            System.out.println("The correct name is " + correct_name);
            paymentsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                    + "SELECT final_voucher_no, dealer_code, dealer, 'Pay' as Action, sum(credit) as invoice_amount, sum(credit-debit) as amount_due, "
                    + "SUM(0.00)::numeric as amount_to_pay, false as authorise, sum(0.00)::numeric as vat, \n"
                    + "code, 'CHEQUE' as pay_mode FROM ac_bills WHERE approved = true and (dealer NOT Ilike '%BOARD MEMBER%' and dealer NOT Ilike '%CASUAL LABOURERS%' and dealer ilike '%" + correct_name + "%') "
                    + "GROUP BY 1,2,3,4,10 HAVING SUM(credit-debit) > 0 ORDER BY dealer, final_voucher_no "));

            // jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT date_deu as date_due,voucher_no as imprest_no,description,reason,credit as amount, 0.00 as approved_amount, false as approve,final_voucher_no FROM ac_bills WHERE approved = false AND cancelled=false AND examination=true and  dealer ilike '%" +correct_name+ "%' union SELECT date_due as Invoice_date, final_voucher_no as imprest_no, reason, description, credit as amount, 0.00 as approved_amount, false as approve, requisition_no FROM ac_petty_cash_requisition WHERE approved = false AND cancelled=false AND examination=true and accountant=true and payee ilike '%" +correct_name+ "%' order by 2"));

        }
        this.searchSupplierOrOthersTable.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_searchsupplierorstafftableMouseClicked

    private void jButton53ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton53ActionPerformed
        this.searchSupplierOrOthersTable.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton53ActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchButton2Clicked();        // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed

    private void staffPaymentChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staffPaymentChkActionPerformed
        // TODO add your handling code here:
        paymentsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT final_voucher_no, dealer_code, dealer, 'Pay' as Action, sum(credit) as invoice_amount, sum(credit-debit) as amount_due,  "
                + "SUM(0.00)::numeric as amount_to_pay, false as authorise, sum(0.00)::numeric as vat, "
                + "code, 'CHEQUE' as pay_mode FROM ac_bills WHERE approved = true and (dealer NOT Ilike '%BOARD MEMBER%' and dealer NOT Ilike '%CASUAL LABOURERS%')   "
                + "GROUP BY 1,2,3,4,10 HAVING SUM(credit-debit) > 0 ORDER BY dealer,final_voucher_no"));
    }//GEN-LAST:event_staffPaymentChkActionPerformed
    public void tableModelTableChanged1() {
        System.out.println("Calculating totals for table 12 and 21.");
        //        double resFloat = 0.00;
        double resFloat1 = 0.00;

        for (int i = 0; i < paymentsTable.getRowCount(); i++) {

            if (paymentsTable.getModel().getValueAt(i, 4) != null) {

                if (paymentsTable.getSelectedColumn() == 2) {

                    resFloat1 = resFloat1 + Double.parseDouble(paymentsTable.getModel().getValueAt(i, 4).toString());

                    //   }

                    netAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(resFloat1));

                } else //    if (jTable1.getSelectedColumn() == 4) {
                {
                    resFloat1 = resFloat1 + Double.parseDouble(paymentsTable.getModel().getValueAt(i, 4).toString());
                }
                //    }
                netAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(resFloat1));


            }
        }

        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    public void tableModelTableChanged1(javax.swing.event.TableModelEvent evt) {

        //        double resFloat = 0.00;
        double resFloat1 = 0.00;

        for (int i = 0; i < paymentsTable.getRowCount(); i++) {

            if (paymentsTable.getModel().getValueAt(i, 0) != null) {

                if (paymentsTable.getSelectedColumn() == 2) {

                    resFloat1 = resFloat1 + Double.parseDouble(paymentsTable.getModel().getValueAt(i, 4).toString());

                    // }

                    netAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(resFloat1));

                } else //  if (jTable11.getSelectedColumn() == 4) {
                {
                    resFloat1 = resFloat1 + Double.parseDouble(paymentsTable.getModel().getValueAt(i, 4).toString());
                }
                //  }
                netAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(resFloat1));

            }
        }

        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accountNameLbl;
    private javax.swing.JLabel bankAccNumberLbl;
    private javax.swing.JTextField bankAccountNameTxt;
    private javax.swing.JComboBox bankAccountNumberCmbx;
    private javax.swing.JPanel bankDetailsPanel;
    private javax.swing.JLabel bankNameLbl;
    private javax.swing.JTextField bankNameTxt;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.JPanel cashPointDetailsPanel;
    private javax.swing.JLabel cashPointLbl;
    private javax.swing.JTextField cashPointTxt;
    private javax.swing.JLabel chequeDateLbl;
    private com.afrisoftech.lib.DatePicker chequeDatePicker;
    private javax.swing.JLabel chequeNumberLbl;
    private javax.swing.JTextField chequeNumberTxt;
    private javax.swing.JButton clearFormBtn;
    public javax.swing.JButton closeFormBtn;
    private javax.swing.JCheckBox creditorsChk;
    private javax.swing.JCheckBox creditorsChkbx;
    private javax.swing.JTextField dealerNameTxt;
    private javax.swing.JScrollPane deductionsJscrl;
    private javax.swing.JPanel deductionsPanel;
    private javax.swing.JTable deductionsTable;
    private javax.swing.JLabel deductionsTotalLabel;
    private javax.swing.JTextField deductionsTxt;
    private javax.swing.JLabel glAccountLbl;
    private javax.swing.JTextField glAccountTxt;
    private javax.swing.JLabel grossAmountLbl;
    private javax.swing.JTextField grossAmountTxt;
    private javax.swing.JButton jButton52;
    private javax.swing.JButton jButton521;
    private javax.swing.JButton jButton522;
    private javax.swing.JButton jButton5221;
    private javax.swing.JButton jButton53;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel422;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JDialog jSearchDialog2;
    private javax.swing.JDialog jSearchDialog21;
    private javax.swing.JDialog jSearchDialog22;
    private javax.swing.JDialog jSearchDialog221;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JPanel jSearchPanel21;
    private javax.swing.JPanel jSearchPanel22;
    private javax.swing.JPanel jSearchPanel221;
    private javax.swing.JPanel jSearchPanel3;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JScrollPane jSearchScrollPane21;
    private javax.swing.JScrollPane jSearchScrollPane22;
    private javax.swing.JScrollPane jSearchScrollPane221;
    private javax.swing.JScrollPane jSearchScrollPane3;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTable jSearchTable2;
    private javax.swing.JTable jSearchTable21;
    private javax.swing.JTable jSearchTable22;
    private javax.swing.JTable jSearchTable221;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField1111;
    private javax.swing.JTextField jTextField113;
    private javax.swing.JTextField jTextField1131;
    private javax.swing.JTextField jTextField1132;
    private javax.swing.JTextField jTextField11321;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JPanel mainPaymentSchedulePanel;
    private javax.swing.JButton makePaymentBtn;
    private javax.swing.JButton makePaymentsandPrintBtn;
    private javax.swing.JLabel netAmountLabel;
    private javax.swing.JTextField netAmountTxt;
    private javax.swing.JCheckBox otherPaymentsChk;
    private javax.swing.JPanel paymentDetailsPanel;
    private javax.swing.JScrollPane paymentsDetailsJscrl;
    private javax.swing.JPanel paymentsSchedulePanel;
    private javax.swing.JTable paymentsTable;
    private javax.swing.JCheckBox payrollCreditorChkbx;
    private javax.swing.JButton reprintVoucherBtn;
    private javax.swing.JButton reprintVoucherBtn1;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchButton2;
    private javax.swing.JDialog searchSupplierOrOthersTable;
    private javax.swing.JTextField searchsupplierorstaff;
    private javax.swing.JTable searchsupplierorstafftable;
    private javax.swing.JLabel shiftNumberLbl;
    private javax.swing.JTextField shiftNumberTxt;
    private javax.swing.JLabel spacerLbl;
    private javax.swing.JCheckBox staffPaymentChk;
    private javax.swing.JLabel transactionDateLbl;
    private com.afrisoftech.lib.DatePicker transactionDatePicker;
    private javax.swing.JLabel vatCertNumberLbl;
    private javax.swing.JTextField vatNumberTxt;
    private javax.swing.JButton viewPendingPaymentsBtn;
    // End of variables declaration//GEN-END:variables
}
