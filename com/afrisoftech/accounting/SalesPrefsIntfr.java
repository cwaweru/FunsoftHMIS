/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * SalesPrefsIntfr.java
 *
 * Created on 01-May-2009, 12:48:03
 */
package com.afrisoftech.accounting;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Charles Waweru
 */
public class SalesPrefsIntfr extends javax.swing.JInternalFrame {

    private java.sql.Connection connectDB = null;

    /**
     * Creates new form SalesPrefsIntfr
     */
    public SalesPrefsIntfr(java.sql.Connection connDB) {

        setConnectDB(connDB);

        initComponents();

        try {
            java.sql.PreparedStatement pstmtFetchPrefs = connectDB.prepareStatement("SELECT * FROM sales_prefs");
            java.sql.ResultSet rsetFetchPrefs = pstmtFetchPrefs.executeQuery();
            int fetchSize = 0;
            while (rsetFetchPrefs.next()) {
                //fetchSize = rsetFetchPrefs.getInt(1);
                priceEditRbt.setSelected(rsetFetchPrefs.getBoolean(1));
                reprintRbt.setSelected(rsetFetchPrefs.getBoolean(2));
                waiversRbt.setSelected(rsetFetchPrefs.getBoolean(3));
                paymodeCmbx.setSelectedItem(rsetFetchPrefs.getString(4));
                cashpointWalkinRdBtn.setSelected(rsetFetchPrefs.getBoolean(5));
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(SalesPrefsIntfr.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainPanel = new javax.swing.JPanel();
        priceEditRbt = new javax.swing.JRadioButton();
        reprintRbt = new javax.swing.JRadioButton();
        waiversRbt = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        paymodeCmbx = new javax.swing.JComboBox();
        cashpointWalkinRdBtn = new javax.swing.JRadioButton();
        buttonPanel = new javax.swing.JPanel();
        updateBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();
        spacerLbl = new javax.swing.JLabel();

        setTitle("Settings for POS Operations");
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        mainPanel.setLayout(new java.awt.GridBagLayout());

        priceEditRbt.setText("Allow Price Editing");
        priceEditRbt.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        mainPanel.add(priceEditRbt, gridBagConstraints);

        reprintRbt.setText("Allow Re-Printing of receipts");
        reprintRbt.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        mainPanel.add(reprintRbt, gridBagConstraints);

        waiversRbt.setText("Allow Waivers and Exemptions");
        waiversRbt.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        mainPanel.add(waiversRbt, gridBagConstraints);

        jLabel1.setText("Default Payment Mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        mainPanel.add(jLabel1, gridBagConstraints);

        paymodeCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT initcap(payment_mode) FROM public.pb_paymentmodes ORDER BY 1")
        );
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
        mainPanel.add(paymodeCmbx, gridBagConstraints);

        cashpointWalkinRdBtn.setText("Allow Walkins At CashPoint");
        cashpointWalkinRdBtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        mainPanel.add(cashpointWalkinRdBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        getContentPane().add(mainPanel, gridBagConstraints);

        buttonPanel.setLayout(new java.awt.GridBagLayout());

        updateBtn.setText("Update settings");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(updateBtn, gridBagConstraints);

        closeBtn.setText("Close form");
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(closeBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 5000.0;
        gridBagConstraints.weighty = 1.0;
        buttonPanel.add(spacerLbl, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(buttonPanel, gridBagConstraints);

        setBounds(0, 0, 613, 375);
    }// </editor-fold>//GEN-END:initComponents

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed

        try {
            java.sql.PreparedStatement pstmtFetchPrefs = connectDB.prepareStatement("SELECT count(*) FROM sales_prefs");
            java.sql.ResultSet rsetFetchPrefs = pstmtFetchPrefs.executeQuery();
            int fetchSize = 0;
            while (rsetFetchPrefs.next()) {
                fetchSize = rsetFetchPrefs.getInt(1);
            }
            if (fetchSize > 0) {
                java.sql.PreparedStatement pstmtUpdate = connectDB.prepareStatement("UPDATE sales_prefs SET edit_prices =?, re_prints=?, waivers = ?, default_pay_mode = ?,cashpoint_walkins=?");
                pstmtUpdate.setBoolean(1, this.getPriceEditRbt().isSelected());
                pstmtUpdate.setBoolean(2, this.getReprintRbt().isSelected());
                pstmtUpdate.setBoolean(3, this.getWaiversRbt().isSelected());
                pstmtUpdate.setObject(4, this.paymodeCmbx.getSelectedItem());
                pstmtUpdate.setObject(5, this.cashpointWalkinRdBtn.isSelected());
                pstmtUpdate.executeUpdate();
            } else {
                java.sql.PreparedStatement pstmtInsert = connectDB.prepareStatement("INSERT INTO sales_prefs(edit_prices, re_prints, waivers, default_pay_mode,cashpoint_walkins) VALUES (?, ?, ?, ?,?)");
                pstmtInsert.setBoolean(1, this.getPriceEditRbt().isSelected());
                pstmtInsert.setBoolean(2, this.getReprintRbt().isSelected());
                pstmtInsert.setBoolean(3, this.getReprintRbt().isSelected());
                pstmtInsert.setObject(4, this.paymodeCmbx.getSelectedItem());
                pstmtInsert.setObject(5, this.cashpointWalkinRdBtn.isSelected());
                pstmtInsert.executeUpdate();
            }
            javax.swing.JOptionPane.showMessageDialog(this, "Sales preferences updated successfully.");
            // TODO add your handling code here:
        } catch (SQLException ex) {
            ex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(SalesPrefsIntfr.class.getName()).log(Level.SEVERE, null, ex);
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_updateBtnActionPerformed

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed

        this.dispose();

        // TODO add your handling code here:
    }//GEN-LAST:event_closeBtnActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JRadioButton cashpointWalkinRdBtn;
    private javax.swing.JButton closeBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JComboBox paymodeCmbx;
    private javax.swing.JRadioButton priceEditRbt;
    private javax.swing.JRadioButton reprintRbt;
    private javax.swing.JLabel spacerLbl;
    private javax.swing.JButton updateBtn;
    private javax.swing.JRadioButton waiversRbt;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the connectDB
     */
    public java.sql.Connection getConnectDB() {
        return connectDB;
    }

    /**
     * @param connectDB the connectDB to set
     */
    public void setConnectDB(java.sql.Connection connectDB) {
        this.connectDB = connectDB;
    }

    /**
     * @return the priceEditRbt
     */
    public javax.swing.JRadioButton getPriceEditRbt() {
        return priceEditRbt;
    }

    /**
     * @param priceEditRbt the priceEditRbt to set
     */
    public void setPriceEditRbt(javax.swing.JRadioButton priceEditRbt) {
        this.priceEditRbt = priceEditRbt;
    }

    /**
     * @return the reprintRbt
     */
    public javax.swing.JRadioButton getReprintRbt() {
        return reprintRbt;
    }

    /**
     * @param reprintRbt the reprintRbt to set
     */
    public void setReprintRbt(javax.swing.JRadioButton reprintRbt) {
        this.reprintRbt = reprintRbt;
    }

    /**
     * @return the waiversRbt
     */
    public javax.swing.JRadioButton getWaiversRbt() {
        return waiversRbt;
    }

    /**
     * @param waiversRbt the waiversRbt to set
     */
    public void setWaiversRbt(javax.swing.JRadioButton waiversRbt) {
        this.waiversRbt = waiversRbt;
    }
}
