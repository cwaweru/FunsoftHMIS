
/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */
package com.afrisoftech.accounting;

import javax.swing.filechooser.FileNameExtensionFilter;
import com.afrisoftech.lib.ClearTable;
import java.awt.Color;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import org.jdesktop.swingx.decorator.ColorHighlighter;

/**
 *
 * @author root
 */
public class ReconcileMobileTxintfr extends javax.swing.JInternalFrame {

    /**
     * Creates new form loanpymntintfr
     */
    boolean validClicked = false;
    java.sql.Connection connectDB = null;
    javax.swing.table.TableModel tableModel = null;
    javax.swing.JSpinner beginDateSpinner = null;
    javax.swing.JSpinner endDateSpinner = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    Object item = null;

    public ReconcileMobileTxintfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();

        java.util.Vector<org.jdesktop.swingx.decorator.Highlighter> tableHighlighters5 = new java.util.Vector<org.jdesktop.swingx.decorator.Highlighter>(1, 1);
        //org.jdesktop.swingx.decorator.Highlighter tableHighlighterArray[] ;// = new org.jdesktop.swingx.decorator.Highlighter()[];
        com.afrisoftech.dbadmin.JXTable predicateTable5 = (com.afrisoftech.dbadmin.JXTable) funsoftMobileTranstbl;

        org.jdesktop.swingx.decorator.PatternPredicate patternPredicate4 = new org.jdesktop.swingx.decorator.PatternPredicate("false", 5, 5);
        ColorHighlighter redd = new ColorHighlighter(patternPredicate4, Color.RED, null, Color.RED, null);
        tableHighlighters5.add(redd);

        org.jdesktop.swingx.decorator.PatternPredicate patternPredicate5 = new org.jdesktop.swingx.decorator.PatternPredicate("true", 5, 5);
        ColorHighlighter yelloww = new ColorHighlighter(patternPredicate5, Color.YELLOW, null, Color.YELLOW, null);
        tableHighlighters5.add(yelloww);

        ColorHighlighter tableHighlightersArray5[] = new ColorHighlighter[]{redd, yelloww};
        predicateTable5.setHighlighterPipeline(predicateTable5, tableHighlightersArray5);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        receiptSearchDialog1 = new javax.swing.JDialog();
        jSearchPanel3 = new javax.swing.JPanel();
        receiptSearchTxt1 = new javax.swing.JTextField();
        receiptSearchScrollPane1 = new javax.swing.JScrollPane();
        receiptSearchTable1 = new com.afrisoftech.dbadmin.JTable();
        disposeBtn1 = new javax.swing.JButton();
        mobilepayTxSearchDialog = new javax.swing.JDialog();
        jSearchPanel22 = new javax.swing.JPanel();
        mobilepayTxSearchTxt = new javax.swing.JTextField();
        jSearchScrollPane22 = new javax.swing.JScrollPane();
        mobilepayTxtSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton422 = new javax.swing.JButton();
        jButton522 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        validateBtn = new javax.swing.JButton();
        closeBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        funsoftMobileTranstbl = new com.afrisoftech.dbadmin.JXTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        datePicker2 = new com.afrisoftech.lib.DatePicker();
        jLabel15 = new javax.swing.JLabel();
        datePicker3 = new com.afrisoftech.lib.DatePicker();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mobileTransactionTbl = new com.afrisoftech.dbadmin.JXTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        decisionTxt = new javax.swing.JLabel();
        shortCodeTxt = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        funsoftMobileTranstbl1 = new com.afrisoftech.dbadmin.JXTable();
        jPanel8 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        datePicker4 = new com.afrisoftech.lib.DatePicker();
        jLabel17 = new javax.swing.JLabel();
        datePicker5 = new com.afrisoftech.lib.DatePicker();
        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();

        receiptSearchDialog1.setModal(true);
        receiptSearchDialog1.setUndecorated(true);
        receiptSearchDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel3.setLayout(new java.awt.GridBagLayout());

        receiptSearchTxt1.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                receiptSearchTxt1CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel3.add(receiptSearchTxt1, gridBagConstraints);

        receiptSearchTable1.setToolTipText("Click on the target row to select the patient from the search.");
        receiptSearchTable1.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = receiptSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        receiptSearchTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                receiptSearchTable1MouseClicked(evt);
            }
        });
        receiptSearchScrollPane1.setViewportView(receiptSearchTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel3.add(receiptSearchScrollPane1, gridBagConstraints);

        disposeBtn1.setText("Close");
        disposeBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disposeBtn1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel3.add(disposeBtn1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        receiptSearchDialog1.getContentPane().add(jSearchPanel3, gridBagConstraints);

        mobilepayTxSearchDialog.setModal(true);
        mobilepayTxSearchDialog.setUndecorated(true);
        mobilepayTxSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel22.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel22.setLayout(new java.awt.GridBagLayout());

        mobilepayTxSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                mobilepayTxSearchTxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel22.add(mobilepayTxSearchTxt, gridBagConstraints);

        mobilepayTxtSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
        mobilepayTxtSearchTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        mobilepayTxtSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mobilepayTxtSearchTableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                mobilepayTxtSearchTableMouseEntered(evt);
            }
        });
        jSearchScrollPane22.setViewportView(mobilepayTxtSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel22.add(jSearchScrollPane22, gridBagConstraints);

        jButton422.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel22.add(jButton422, gridBagConstraints);

        jButton522.setText("Dispose");
        jButton522.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton522ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel22.add(jButton522, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mobilepayTxSearchDialog.getContentPane().add(jSearchPanel22, gridBagConstraints);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("MPESA Transactions");
        setFrameIcon(null);
        setVisible(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel2.setLayout(new java.awt.GridBagLayout());

        validateBtn.setText("Validate Funsoft Mpesa Transactions");
        validateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(validateBtn, gridBagConstraints);

        closeBtn.setMnemonic('C');
        closeBtn.setText("Close form");
        closeBtn.setToolTipText("Click here to close ");
        closeBtn.setSelected(true);
        closeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(closeBtn, gridBagConstraints);

        clearBtn.setMnemonic('l');
        clearBtn.setText("Reconcile Selected  Mpesa Transactions");
        clearBtn.setToolTipText("Click here to clear fields");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(clearBtn, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Funsoft Mpesa Statement"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Funsoft Mpesa Transactions"));

        funsoftMobileTranstbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        funsoftMobileTranstbl.setRowHeight(20);
        jScrollPane2.setViewportView(funsoftMobileTranstbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        jPanel1.add(jScrollPane2, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel14.setText("Begin Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel3.add(jLabel14, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel3.add(datePicker2, gridBagConstraints);

        jLabel15.setText("End Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel3.add(jLabel15, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel3.add(datePicker3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jLabel1, gridBagConstraints);

        jButton2.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        jButton2.setText("Load Funsoft Mpesa Transaction");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel3.add(jButton2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 5, 0);
        jPanel1.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel2.add(jPanel1, gridBagConstraints);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Mpesa Statement"));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Safaricom Mpesa Statement"));

        mobileTransactionTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Receipt No", "Completion Time", "Initiation Time", "Details", "Transaction Status", "Paid In", "Withdrawn", "Balance ", "Balance Confirmed", "Reason", "Other Party Info", "Linked transaction", "A/C No"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        mobileTransactionTbl.setRowHeight(18);
        mobileTransactionTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mobileTransactionTblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(mobileTransactionTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        jPanel5.add(jScrollPane1, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jLabel2, gridBagConstraints);

        jButton1.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        jButton1.setText("Load Mpesa Statement From Excel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel4.add(jButton1, gridBagConstraints);

        decisionTxt.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        decisionTxt.setText("pathfromexcel.xls");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jPanel4.add(decisionTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
        jPanel5.add(jPanel4, gridBagConstraints);

        shortCodeTxt.setEditable(false);
        shortCodeTxt.setBorder(javax.swing.BorderFactory.createTitledBorder("Short Code"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel5.add(shortCodeTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        jPanel2.add(jPanel5, gridBagConstraints);

        jTabbedPane1.addTab("Validate Transactions", jPanel2);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Funsoft Mpesa Statement"));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder("Funsoft Mpesa Transactions"));

        funsoftMobileTranstbl1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        funsoftMobileTranstbl1.setRowHeight(20);
        jScrollPane3.setViewportView(funsoftMobileTranstbl1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        jPanel7.add(jScrollPane3, gridBagConstraints);

        jPanel8.setLayout(new java.awt.GridBagLayout());

        jLabel16.setText("Begin Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel8.add(jLabel16, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel8.add(datePicker4, gridBagConstraints);

        jLabel17.setText("End Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel8.add(jLabel17, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel8.add(datePicker5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jLabel3, gridBagConstraints);

        jButton3.setFont(new java.awt.Font("DialogInput", 0, 14)); // NOI18N
        jButton3.setText("Load Reconciliation Report");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel8.add(jButton3, gridBagConstraints);

        buttonGroup1.add(jCheckBox1);
        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Reconciled");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel8.add(jCheckBox1, gridBagConstraints);

        buttonGroup1.add(jCheckBox2);
        jCheckBox2.setText("Not Reconciled");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        jPanel8.add(jCheckBox2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 5, 0);
        jPanel7.add(jPanel8, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jPanel6.add(jPanel7, gridBagConstraints);

        jTabbedPane1.addTab("Reconciliation Report", jPanel6);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        setBounds(0, 0, 999, 500);
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        // Add your handling code here:
    }//GEN-LAST:event_formInternalFrameActivated

    private void disposeBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disposeBtn1ActionPerformed

        receiptSearchDialog1.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_disposeBtn1ActionPerformed

    private void receiptSearchTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_receiptSearchTable1MouseClicked

//        transactionDateTxt1.setText(receiptSearchTable1.getValueAt(receiptSearchTable1.getSelectedRow(), 3).toString());
//        payerNameTxt1.setText(receiptSearchTable1.getValueAt(receiptSearchTable1.getSelectedRow(), 0).toString());
//        //   jTextField2.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0).toString());
//        transactionIdentifierTxt1.setText(receiptSearchTable1.getValueAt(receiptSearchTable1.getSelectedRow(), 1).toString());
//        mobileTransactionNumberTxt1.setText(receiptSearchTable1.getValueAt(receiptSearchTable1.getSelectedRow(), 1).toString());
//        payerTelephoneNoTxt1.setText(receiptSearchTable1.getValueAt(receiptSearchTable1.getSelectedRow(), 2).toString());
//
//        mobilePayTokenBalanceTxt.setText(String.valueOf(com.afrisoftech.lib.MobilePayments.getTokenValue(connectDB, mobileTransactionNumberTxt1.getText())));
//
//        if (Double.valueOf(mobilePayTokenBalanceTxt.getText().replace(",", "")) < 1) {
//            javax.swing.JOptionPane.showMessageDialog(this, "The selected transaction has no balance and therefore cannot be activated ", "Info Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
//
//            jButton2.setEnabled(false);
//        } else {
//            jButton2.setEnabled(true);
//        }
//
//        receiptSearchDialog1.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_receiptSearchTable1MouseClicked

    private void receiptSearchTxt1CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_receiptSearchTxt1CaretUpdate
        if (receiptSearchTxt1.getText().length() > 5) {
            receiptSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT transaction_time::time(0), mobile_tx_id, account_no, date, paid_amount, upper(dealer) as client_name,"
                    + " journal_no as paybill_no, mobilepay_alert as processed,(SELECT SUM(debit-credit) FROM mobile_payments mp1 WHERE mp1.mobile_tx_id = mp.mobile_tx_id ) AS  balance FROM public.mobile_payments mp WHERE "
                    + " account_no ilike '%" + receiptSearchTxt1.getText() + "%' AND  debit > 0  and mobile_tx_id NOT IN (SELECT transaction_id  FROM mobile_payment_deactivations) ORDER BY account_no"));
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_receiptSearchTxt1CaretUpdate

    private boolean validated() {
        boolean valid = false;
        for (int i = 0; i < mobileTransactionTbl.getRowCount(); i++) {
            if (mobileTransactionTbl.getValueAt(i, 0) != null) {
                valid = true;
            }
        }
        if (!valid) {
            javax.swing.JOptionPane.showMessageDialog(this, "Upload Mpesa statement to proceed", "Info Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        }

        boolean valid2 = false;
        for (int i = 0; i < funsoftMobileTranstbl.getRowCount(); i++) {
            if (funsoftMobileTranstbl.getValueAt(i, 0) != null) {
                valid2 = true;
            }
        }
        if (!valid2) {
            javax.swing.JOptionPane.showMessageDialog(this, "No Mpesa transactions  to validate", "Info Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        }

        return (valid && valid2);

    }
    private void validateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateBtnActionPerformed
        if (validated()) {
            loop();
            validClicked = true;
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_validateBtnActionPerformed

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        this.dispose();// TODO add your handling code here:
    }//GEN-LAST:event_closeBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        if (!validClicked) {
            javax.swing.JOptionPane.showMessageDialog(this, " Validate the transactions before  reconciling", "Info Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        } else {
            if (validated()) {
                int count = 0;
                for (int i = 0; i < funsoftMobileTranstbl.getRowCount(); i++) {
                    if (funsoftMobileTranstbl.getValueAt(i, 0) != null) {
                        if (Boolean.valueOf(funsoftMobileTranstbl.getValueAt(i, 5).toString())) {
                            try {
                                java.sql.PreparedStatement st321 = connectDB.prepareStatement("UPDATE mobile_payments SET reconciled = true,  date_reconcilled = now()::date,reconciled_by = current_user WHERE mobile_tx_id = ? AND date = ? AND debit = ?");
                                st321.setString(1, funsoftMobileTranstbl.getValueAt(i, 0).toString());
                                st321.setDate(2, java.sql.Date.valueOf(funsoftMobileTranstbl.getValueAt(i, 4).toString()));
                                st321.setDouble(3, Double.valueOf(funsoftMobileTranstbl.getValueAt(i, 3).toString()));
                                st321.executeUpdate();
                            } catch (SQLException e) {
                                e.printStackTrace();
                            }
                            count++;
                        }
                    }
                }

                javax.swing.JOptionPane.showMessageDialog(this, count + "  transactions Reconciled", "Info Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            }
        }
//       searchTxnTxt.setText("");
// TODO add your handling code here:
    }//GEN-LAST:event_clearBtnActionPerformed

    private void mobilepayTxSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_mobilepayTxSearchTxtCaretUpdate

        if (mobilepayTxSearchTxt.getText().length() > 5) {
            mobilepayTxtSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT transaction_time::time(0), mobile_tx_id, account_no, date, paid_amount, upper(dealer) as client_name, journal_no as paybill_no, mobilepay_alert as processed FROM public.mobile_payments WHERE mobilepay_alert = false AND (mobile_tx_id ilike '%" + mobilepayTxSearchTxt.getText() + "%' OR account_no ilike '%" + mobilepayTxSearchTxt.getText() + "%' ) AND debit > 0 ORDER BY account_no"));
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_mobilepayTxSearchTxtCaretUpdate

    private void mobilepayTxtSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mobilepayTxtSearchTableMouseClicked

        mobileTransactionTbl.setValueAt(mobilepayTxtSearchTable.getValueAt(mobilepayTxtSearchTable.getSelectedRow(), 1), mobileTransactionTbl.getSelectedRow(), 0);
        mobileTransactionTbl.setValueAt(mobilepayTxtSearchTable.getValueAt(mobilepayTxtSearchTable.getSelectedRow(), 2), mobileTransactionTbl.getSelectedRow(), 1);
        mobileTransactionTbl.setValueAt(mobilepayTxtSearchTable.getValueAt(mobilepayTxtSearchTable.getSelectedRow(), 4), mobileTransactionTbl.getSelectedRow(), 3);
        mobileTransactionTbl.setValueAt(mobilepayTxtSearchTable.getValueAt(mobilepayTxtSearchTable.getSelectedRow(), 3) + " @ " + mobilepayTxtSearchTable.getValueAt(mobilepayTxtSearchTable.getSelectedRow(), 0), mobileTransactionTbl.getSelectedRow(), 2);

        mobileTransactionTbl.setValueAt(com.afrisoftech.lib.MobilePayments.getTokenValue(connectDB, mobileTransactionTbl.getValueAt(mobileTransactionTbl.getSelectedRow(), 0).toString()), mobileTransactionTbl.getSelectedRow(), 4);

        mobilepayTxSearchDialog.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_mobilepayTxtSearchTableMouseClicked

    private void mobilepayTxtSearchTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mobilepayTxtSearchTableMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_mobilepayTxtSearchTableMouseEntered

    private void jButton522ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton522ActionPerformed

        mobilepayTxSearchDialog.dispose();

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton522ActionPerformed

    private void mobileTransactionTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mobileTransactionTblMouseClicked
        if (mobileTransactionTbl.getSelectedColumn() == 0) {
            java.awt.Point point = this.mobileTransactionTbl.getLocationOnScreen();

            mobilepayTxSearchDialog.setSize(700, 200);

            mobilepayTxSearchDialog.setLocation(point);

            mobilepayTxSearchDialog.setVisible(true);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_mobileTransactionTblMouseClicked
    public static Date StringToDate(String dob) throws ParseException {
        //Instantiating the SimpleDateFormat class
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
        //Parsing the given String to Date object
        Date date = formatter.parse(dob);
        System.out.println("Date object value: " + date);
        return date;
    }

    private void loop() {
        int invalid = 0;

        try {

            String tempID = null;
            java.sql.Statement ps = connectDB.createStatement();
            java.sql.ResultSet rst = ps.executeQuery("select nextval('transaction_no_seq')");

            while (rst.next()) {
                tempID = rst.getObject(1).toString();

            }

            for (int i = 1; i < mobileTransactionTbl.getRowCount(); i++) {
                if (mobileTransactionTbl.getValueAt(i, 0) != null) {

                    String transCode = mobileTransactionTbl.getValueAt(i, 0).toString();
                    String date = mobileTransactionTbl.getValueAt(i, 1).toString();
                    double amt = 0.00;
                    String accNo = mobileTransactionTbl.getValueAt(i, 10).toString();

                    Date date1 = StringToDate(date);
                    String date2 = new SimpleDateFormat("yyyy-MM-dd").format(date1);
                    System.out.println();

                    if (mobileTransactionTbl.getValueAt(i, 5) != null) {
                        if (!mobileTransactionTbl.getValueAt(i, 5).toString().trim().isEmpty()) {
                            amt = Double.valueOf(mobileTransactionTbl.getValueAt(i, 5).toString());
                        } else {
                            amt = Double.valueOf(mobileTransactionTbl.getValueAt(i, 6).toString());
                        }
                    } else {
                        amt = Double.valueOf(mobileTransactionTbl.getValueAt(i, 6).toString());
                    }
                    System.err.println(transCode + " <> " + date2 + " <> " + amt);
                    boolean exist = false;
                    int count = 0;

                    java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("INSERT INTO mobile_payments_validation(temp_id, date, trans_id, amount, account_no)   VALUES (?, ?, ?, ?, ?); ");

                    pstmt2.setString(1, tempID);
                    pstmt2.setString(3, transCode);
                    pstmt2.setDate(2, java.sql.Date.valueOf(date2));
                    pstmt2.setDouble(4, amt);
                    pstmt2.setString(5, accNo);

                    pstmt2.executeUpdate();

                }

            }

            for (int i = 0; i < funsoftMobileTranstbl.getRowCount(); i++) {
                if (funsoftMobileTranstbl.getValueAt(i, 0) != null) {
                    boolean exist = false;
                    try {
                        int count = 0;
                        // System.err.println("SELECT COUNT(*) FROM mobile_payments_validation WHERE temp_id= '"+tempID+"'  AND trans_id = '" + funsoftMobileTranstbl.getValueAt(i, 0).toString() + "' AND date = '" + java.sql.Date.valueOf(funsoftMobileTranstbl.getValueAt(i, 4).toString()) + "' AND amount = " + Double.valueOf(funsoftMobileTranstbl.getValueAt(i, 3).toString()) + " ");
                        java.sql.PreparedStatement st321 = connectDB.prepareStatement("SELECT COUNT(*) FROM mobile_payments_validation WHERE trans_id = ? AND date = ? AND amount = ? AND temp_id = ?");
                        st321.setString(1, funsoftMobileTranstbl.getValueAt(i, 0).toString());
                        st321.setDate(2, java.sql.Date.valueOf(funsoftMobileTranstbl.getValueAt(i, 4).toString()));
                        st321.setDouble(3, Double.valueOf(funsoftMobileTranstbl.getValueAt(i, 3).toString()));
                        st321.setString(4, tempID);
                        java.sql.ResultSet rset3 = st321.executeQuery();
                        while (rset3.next()) {
                            count = rset3.getInt(1);
                        }
                        if (count == 1) {

                            exist = true;
                        } else {
                            invalid++;
                        }

                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    funsoftMobileTranstbl.setValueAt(exist, i, 5);

                }
            }

            if (invalid > 0) {
                javax.swing.JOptionPane.showMessageDialog(this, invalid + " INVALID transactions found", "Info Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "Transaction Validated", "Info Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (Exception ex) {
            ex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, ex.getCause() + " " + item.toString());
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser(System.getProperty("Excel.dir"));

        FileNameExtensionFilter filter = new FileNameExtensionFilter("Excel files (*.xls)", "xls");

        fileChooser.setFileFilter(filter);

        fileChooser.showOpenDialog(this);

        // logoPreviewLbl.setIcon(new javax.swing.ImageIcon(fileChooser.getSelectedFile().getPath()));
        //fileChooser.getSelectedFile().getParent()+"/"+
        decisionTxt.setText(fileChooser.getSelectedFile().getPath());

        System.setProperty("Excel.dir", fileChooser.getSelectedFile().getParent());

        ClearTable.clearthisTable(mobileTransactionTbl);

        populateData(decisionTxt.getText());

        shortCodeTxt.setText(mobileTransactionTbl.getValueAt(1, 1).toString());

        for (int i = 4; i >= 0; i--) {
            System.err.println("Removing row " + i);
            ClearTable.removeRow(mobileTransactionTbl, i);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        funsoftMobileTranstbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT mobile_tx_id, transaction_time,   account_no,     debit as amount ,  date, false as validated  FROM mobile_payments "
                + "where debit > 0 and  date BETWEEN  '" + datePicker2.getDate() + "' AND '" + datePicker3.getDate() + "' "));
        validClicked = false;
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        if (jCheckBox1.isSelected()) {
            funsoftMobileTranstbl1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT mobile_tx_id, transaction_time,   account_no,     debit as amount ,  date, reconciled, date_reconcilled, reconciled_by  FROM mobile_payments "
                    + "where debit > 0 and  date BETWEEN  '" + datePicker4.getDate() + "' AND '" + datePicker5.getDate() + "'  and reconciled = true "));

        } else {
            funsoftMobileTranstbl1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT mobile_tx_id, transaction_time,   account_no,     debit as amount ,  date, reconciled, null as date_reconcilled, reconciled_by  FROM mobile_payments "
                    + "where debit > 0 and  date BETWEEN  '" + datePicker4.getDate() + "' AND '" + datePicker5.getDate() + "'  and reconciled = false "));
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed
    private void populateData(String file) {
        Vector dataHolder = com.afrisoftech.lib.ExportData.readMpesaXls(file);
        System.out.println(dataHolder.size());

        Vector columns = new Vector();

        javax.swing.table.DefaultTableColumnModel dcm = (javax.swing.table.DefaultTableColumnModel) mobileTransactionTbl.getColumnModel();

        for (int i = 0; i < dcm.getColumnCount(); i++) {

            columns.add(dcm.getColumn(i).getHeaderValue().toString());
        }

//        columns.add("Item Code");
//        columns.add("Item Description");
//        
//        columns.add("Quarter");        
//        columns.add("Item Code");
//        
//        columns.add("Description");
//        columns.add("Unit of Issue");
//        
//        columns.add("Qty");        
//        columns.add("Cost");
//        
//        columns.add("Total");
//        columns.add("Proc Method");
        mobileTransactionTbl.setModel(new javax.swing.table.DefaultTableModel(
                dataHolder,
                columns
        ));

    }

    /*
     * public void tableModelTableChanged(javax.swing.event.TableModelEvent evt)
     * {
     *
     * double totals = 0.00;
     *
     * int i = 0;
     *
     * for (int j = 0; j < jTable1.getRowCount(); j++) {
     *
     * System.out.println(jTable1.getModel().getValueAt(j, 4).toString());
     *
     * if (Boolean.valueOf(jTable1.getModel().getValueAt(j, 4).toString()) ==
     * java.lang.Boolean.FALSE) {
     *
     * totals = totals + Double.parseDouble(jTable1.getModel().getValueAt(j,
     * 2).toString()) + Double.parseDouble(jTable1.getModel().getValueAt(j,
     * 3).toString());
     *
     * i++; } }
     *
     * jTextField6.setText(Double.toString(totals));
     *
     * jTextField2.setText(Integer.toString(i));
     *
     * System.out.println(totals);
     *
     * System.out.println(i);
     *
     * System.out.println("This table has changed");
     *
     * }
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton clearBtn;
    public javax.swing.JButton closeBtn;
    private com.afrisoftech.lib.DatePicker datePicker2;
    private com.afrisoftech.lib.DatePicker datePicker3;
    private com.afrisoftech.lib.DatePicker datePicker4;
    private com.afrisoftech.lib.DatePicker datePicker5;
    private javax.swing.JLabel decisionTxt;
    private javax.swing.JButton disposeBtn1;
    private javax.swing.JTable funsoftMobileTranstbl;
    private javax.swing.JTable funsoftMobileTranstbl1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton422;
    private javax.swing.JButton jButton522;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel jSearchPanel22;
    private javax.swing.JPanel jSearchPanel3;
    private javax.swing.JScrollPane jSearchScrollPane22;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable mobileTransactionTbl;
    private javax.swing.JDialog mobilepayTxSearchDialog;
    private javax.swing.JTextField mobilepayTxSearchTxt;
    private javax.swing.JTable mobilepayTxtSearchTable;
    private javax.swing.JDialog receiptSearchDialog1;
    private javax.swing.JScrollPane receiptSearchScrollPane1;
    private javax.swing.JTable receiptSearchTable1;
    private javax.swing.JTextField receiptSearchTxt1;
    private javax.swing.JTextField shortCodeTxt;
    private javax.swing.JButton validateBtn;
    // End of variables declaration//GEN-END:variables
}
