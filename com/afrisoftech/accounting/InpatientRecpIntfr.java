/*
 * countryintfr.java
 *
 * Created on August 13, 2002, 12:15 PM
 */
package com.afrisoftech.accounting;

import java.sql.SQLException;
import java.io.UnsupportedEncodingException;

/**
 *
 * @author root
 */
public class InpatientRecpIntfr extends javax.swing.JInternalFrame {

    /**
     * Creates new form countryintfr
     */
    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    String cashPoint = null;
    private java.lang.String shift_no = null;
    private java.lang.String cash_no = null;
    private String rnamex;
    private String rcodex;
    public static String checkoutRequestID = null;

    public InpatientRecpIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();
        //  System.out.println("Cashpoint : " + System.getProperty("cashpoint"));

        cashPointTxt.setText(getCashPoint());
        shiftNumberTxt.setText(getShiftNumber());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        patientSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        patientSearchTxt = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        patientSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton9 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jSearchDialog2 = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        buttonGroup4 = new javax.swing.ButtonGroup();
        billingItemsSearchDialog = new javax.swing.JDialog();
        jSearchPanel1 = new javax.swing.JPanel();
        jTextField112 = new javax.swing.JTextField();
        jSearchScrollPane1 = new javax.swing.JScrollPane();
        jSearchTable1 = new com.afrisoftech.dbadmin.JTable();
        jButton91 = new javax.swing.JButton();
        mobilepayTxSearchDialog = new javax.swing.JDialog();
        jSearchPanel22 = new javax.swing.JPanel();
        mobilepayTxSearchTxt = new javax.swing.JTextField();
        jSearchScrollPane22 = new javax.swing.JScrollPane();
        mobilepayTxtSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton422 = new javax.swing.JButton();
        jButton522 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jPanel711 = new javax.swing.JPanel();
        jLabel711 = new javax.swing.JLabel();
        jTextField611 = new javax.swing.JTextField();
        jPanel1111 = new javax.swing.JPanel();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton1111 = new javax.swing.JButton();
        jButton3111 = new javax.swing.JButton();
        jButton4111 = new javax.swing.JButton();
        jButton5111 = new javax.swing.JButton();
        jSeparator1111 = new javax.swing.JSeparator();
        jPanel321 = new javax.swing.JPanel();
        jPanel321.setVisible(false);
        jLabel221 = new javax.swing.JLabel();
        jTextField221 = new javax.swing.JTextField();
        jLabel321 = new javax.swing.JLabel();
        jTextField421 = new javax.swing.JTextField();
        jLabel412 = new javax.swing.JLabel();
        jTextField512 = new javax.swing.JTextField();
        jPanel3111 = new javax.swing.JPanel();
        jPanel3111.setVisible(false);
        jLabel2131 = new javax.swing.JLabel();
        jTextField2121 = new javax.swing.JTextField();
        jLabel3131 = new javax.swing.JLabel();
        jTextField4111 = new javax.swing.JTextField();
        jLabel4221 = new javax.swing.JLabel();
        jTextField5211 = new javax.swing.JTextField();
        jLabel41121 = new javax.swing.JLabel();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        jButton221 = new javax.swing.JButton();
        jButton61 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        stkPushBtn = new javax.swing.JButton();
        jPanel511 = new javax.swing.JPanel();
        jLabel1211 = new javax.swing.JLabel();
        paymentModeCmbx = new javax.swing.JComboBox();
        jLabel1321 = new javax.swing.JLabel();
        invoiceNumberTxt = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        cashPointTxt = new javax.swing.JTextField();
        jLabel131 = new javax.swing.JLabel();
        shiftNumberTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        datePicker2 = new com.afrisoftech.lib.DatePicker();
        jLabel1 = new javax.swing.JLabel();
        receiptNumberTxt = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        paybillNumberCmbx = new javax.swing.JComboBox<>();
        jPanel212 = new javax.swing.JPanel();
        jTextField152 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        billBalanceTxt = new javax.swing.JTextField();
        jLabel53111 = new javax.swing.JLabel();
        amountPaidTxt = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane11 = new javax.swing.JScrollPane();
        billTable = new javax.swing.JTable();
        jPanel12 = new javax.swing.JPanel();
        codeChkbx = new javax.swing.JCheckBox();
        descriptionChkbx = new javax.swing.JCheckBox();
        jLabel61 = new javax.swing.JLabel();
        totalBillTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        totalDepositsTxt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        presentedAmountTxt = new javax.swing.JTextField();
        tickAllChkbx = new javax.swing.JCheckBox();
        untickAllChkbx = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        numberSearchChkbx = new javax.swing.JCheckBox();
        nameSearchChkbx = new javax.swing.JCheckBox();
        dischargeRdbtn = new javax.swing.JRadioButton();
        depositRdbtn = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        patientNumberTxt = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jLabel911 = new javax.swing.JLabel();
        jLabel2122 = new javax.swing.JLabel();
        visitIDTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        payerTxt = new javax.swing.JTextField();
        jLabel112 = new javax.swing.JLabel();
        patientNameTxt = new javax.swing.JTextField();
        jLabel3121 = new javax.swing.JLabel();
        patientCategoryTxt = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        unitNumberTxt = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        wardNameTxt = new javax.swing.JTextField();
        payBillNumberTxt = new javax.swing.JTextField();
        payerMobileTelephoneNumberTxt = new javax.swing.JFormattedTextField();
        jPanel62 = new javax.swing.JPanel();
        mobilepayTxNoTxt = new javax.swing.JTextField();
        searchButton2 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        mobileTxAmountTxt = new javax.swing.JTextField();

        patientSearchDialog.setModal(true);
        patientSearchDialog.setUndecorated(true);
        patientSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        patientSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                patientSearchTxtCaretUpdate(evt);
            }
        });
        patientSearchTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientSearchTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(patientSearchTxt, gridBagConstraints);

        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            patientSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(patientSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        patientSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane.setViewportView(patientSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton9.setText("Close");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        jSearchDialog2.setModal(true);
        jSearchDialog2.setUndecorated(true);
        jSearchDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        jButton10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton10.setForeground(new java.awt.Color(0, 51, 255));
        jButton10.setText("Final Receipt ");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton10, gridBagConstraints);

        jButton11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton11.setForeground(new java.awt.Color(102, 102, 0));
        jButton11.setText("Deposit");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton11, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 0, 51));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("What type of receipt are you printing ?");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jLabel6, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("or");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        jSearchPanel2.add(jLabel7, gridBagConstraints);

        jLabel9.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(236, 24, 219));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Please click one of the two options");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jLabel9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog2.getContentPane().add(jSearchPanel2, gridBagConstraints);

        billingItemsSearchDialog.setModal(true);
        billingItemsSearchDialog.setUndecorated(true);
        billingItemsSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel1.setLayout(new java.awt.GridBagLayout());

        jTextField112.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField112CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel1.add(jTextField112, gridBagConstraints);

        jSearchTable1.setShowHorizontalLines(false);
        jSearchTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable1MouseClicked(evt);
            }
        });
        jSearchTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jSearchTable1KeyReleased(evt);
            }
        });
        jSearchScrollPane1.setViewportView(jSearchTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel1.add(jSearchScrollPane1, gridBagConstraints);

        jButton91.setText("Dispose");
        jButton91.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton91ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel1.add(jButton91, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        billingItemsSearchDialog.getContentPane().add(jSearchPanel1, gridBagConstraints);

        mobilepayTxSearchDialog.setModal(true);
        mobilepayTxSearchDialog.setUndecorated(true);
        mobilepayTxSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel22.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel22.setLayout(new java.awt.GridBagLayout());

        mobilepayTxSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                mobilepayTxSearchTxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel22.add(mobilepayTxSearchTxt, gridBagConstraints);

        mobilepayTxtSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
        mobilepayTxtSearchTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        mobilepayTxtSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mobilepayTxtSearchTableMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                mobilepayTxtSearchTableMouseEntered(evt);
            }
        });
        jSearchScrollPane22.setViewportView(mobilepayTxtSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel22.add(jSearchScrollPane22, gridBagConstraints);

        jButton422.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel22.add(jButton422, gridBagConstraints);

        jButton522.setText("Dispose");
        jButton522.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton522ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel22.add(jButton522, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        mobilepayTxSearchDialog.getContentPane().add(jSearchPanel22, gridBagConstraints);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("IN-Patient Receipts");
        setFrameIcon(null);
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jSeparator1, gridBagConstraints);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jLabel3, gridBagConstraints);

        jPanel711.setLayout(new java.awt.GridBagLayout());

        jLabel711.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel711.add(jLabel711, gridBagConstraints);

        jTextField611.setEditable(false);
        jTextField611.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField611.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel711.add(jTextField611, gridBagConstraints);

        jPanel1111.setLayout(new java.awt.GridBagLayout());

        jButton1111.setMnemonic('O');
        jButton1111.setText("Save & Print Receipt");
        jButton1111.setToolTipText("Click here enter data");
        jButton1111.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1111ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1111.add(jButton1111, gridBagConstraints);

        jButton3111.setMnemonic('l');
        jButton3111.setText("Clear File Data");
        jButton3111.setToolTipText("Click here to clear textfields");
        jButton3111.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3111ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1111.add(jButton3111, gridBagConstraints);

        jButton4111.setMnemonic('C');
        jButton4111.setText("Close");
        jButton4111.setToolTipText("Click here to close window");
        jButton4111.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4111ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1111.add(jButton4111, gridBagConstraints);

        jButton5111.setMnemonic('h');
        jButton5111.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1111.add(jButton5111, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        jPanel1111.add(jSeparator1111, gridBagConstraints);

        jPanel321.setBorder(javax.swing.BorderFactory.createTitledBorder("Cheque Details"));
        jPanel321.setLayout(new java.awt.GridBagLayout());

        jLabel221.setText("Cheque No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel321.add(jLabel221, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel321.add(jTextField221, gridBagConstraints);

        jLabel321.setText("Drawer");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel321.add(jLabel321, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel321.add(jTextField421, gridBagConstraints);

        jLabel412.setText("Drawer's Bank");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel321.add(jLabel412, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel321.add(jTextField512, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 1);
        jPanel1111.add(jPanel321, gridBagConstraints);

        jPanel3111.setBorder(javax.swing.BorderFactory.createTitledBorder("Card Details"));
        jPanel3111.setLayout(new java.awt.GridBagLayout());

        jLabel2131.setText("Card No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3111.add(jLabel2131, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3111.add(jTextField2121, gridBagConstraints);

        jLabel3131.setText("Card Company");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3111.add(jLabel3131, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3111.add(jTextField4111, gridBagConstraints);

        jLabel4221.setText("Card Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3111.add(jLabel4221, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel3111.add(jTextField5211, gridBagConstraints);

        jLabel41121.setText("Expiry Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3111.add(jLabel41121, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        jPanel3111.add(datePicker1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1111.add(jPanel3111, gridBagConstraints);

        jButton221.setMnemonic('p');
        jButton221.setText("RePrint Receipt");
        jButton221.setToolTipText("Click here to edit data");
        jButton221.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton221ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1111.add(jButton221, gridBagConstraints);

        jButton61.setMnemonic('r');
        jButton61.setText("Remove Data Row");
        jButton61.setEnabled(false);
        jButton61.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton61ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1111.add(jButton61, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 100.0;
        jPanel1111.add(jLabel13, gridBagConstraints);

        stkPushBtn.setText("Mobile Pay");
        stkPushBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stkPushBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1111.add(stkPushBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel711.add(jPanel1111, gridBagConstraints);

        jPanel511.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Payment Mode"));
        jPanel511.setLayout(new java.awt.GridBagLayout());

        jLabel1211.setText("Payment Mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel511.add(jLabel1211, gridBagConstraints);

        paymentModeCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select DISTINCT initcap(payment_mode) as payment_mode from pb_paymentmodes order by payment_mode"));
        paymentModeCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentModeCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel511.add(paymentModeCmbx, gridBagConstraints);

        jLabel1321.setText("Invoice No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel511.add(jLabel1321, gridBagConstraints);

        invoiceNumberTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel511.add(invoiceNumberTxt, gridBagConstraints);

        jLabel10.setText("Cash Point");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel511.add(jLabel10, gridBagConstraints);

        cashPointTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.5;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel511.add(cashPointTxt, gridBagConstraints);

        jLabel131.setText("Shift No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel511.add(jLabel131, gridBagConstraints);

        shiftNumberTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel511.add(shiftNumberTxt, gridBagConstraints);

        jLabel2.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel511.add(jLabel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel511.add(datePicker2, gridBagConstraints);

        jLabel1.setText("Rcpt. No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel511.add(jLabel1, gridBagConstraints);

        receiptNumberTxt.setEditable(false);
        receiptNumberTxt.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        receiptNumberTxt.setForeground(new java.awt.Color(251, 9, 102));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel511.add(receiptNumberTxt, gridBagConstraints);

        jLabel16.setForeground(new java.awt.Color(255, 0, 51));
        jLabel16.setText("Selected Paybill");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel511.add(jLabel16, gridBagConstraints);

        paybillNumberCmbx.setForeground(new java.awt.Color(0, 0, 0));
        paybillNumberCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '' as paybill_no UNION SELECT DISTINCT paybill_no FROM ac_cash_points ORDER BY 1"));
        paybillNumberCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paybillNumberCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel511.add(paybillNumberCmbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel711.add(jPanel511, gridBagConstraints);

        jPanel212.setBorder(javax.swing.BorderFactory.createTitledBorder("Bill Details"));
        jPanel212.setLayout(new java.awt.GridBagLayout());

        jTextField152.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField152.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 6;
        jPanel212.add(jTextField152, gridBagConstraints);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setText("Balance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel212.add(jLabel8, gridBagConstraints);

        billBalanceTxt.setEditable(false);
        billBalanceTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        billBalanceTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel212.add(billBalanceTxt, gridBagConstraints);

        jLabel53111.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel53111.setForeground(new java.awt.Color(255, 0, 0));
        jLabel53111.setText("Amount Paid");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel212.add(jLabel53111, gridBagConstraints);

        amountPaidTxt.setEditable(false);
        amountPaidTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        amountPaidTxt.setForeground(new java.awt.Color(255, 0, 0));
        amountPaidTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        amountPaidTxt.setText("0.00");
        amountPaidTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amountPaidTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel212.add(amountPaidTxt, gridBagConstraints);

        jTextField2.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField2.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 7;
        jPanel212.add(jTextField2, gridBagConstraints);

        billTable.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        billTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Description", "Qty", "Gross", "Discount", "Disc. Amt", "Gross Amt", "Net Amt", "Allocate ?", "Gl Account", "Code", "Transaction_no", "Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, false, false, false, true, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        billTable.setRowHeight(22);
        /*       cmbox2 = new javax.swing.JComboBox();

        try {

            crset1.setConnectionSource(pConnDB);
            crset1.execute("select description from st_stock_item");

            cmbox2.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset1, "description", null, null,null));

            javax.swing.table.TableColumn seditor = this.jTable1.getColumn("Product");

            seditor.setCellEditor(new javax.swing.DefaultCellEditor(cmbox2));

            cmbox2.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent evt) {

                    cmbox2ActionPerformed(evt);
                }
            });
        } catch(java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        */
        javax.swing.table.TableColumn column1 = null;
        for (int i = 0; i < 9; i++) {
            column1 = billTable.getColumnModel().getColumn(i);
            if (i == 0) {

                column1.setPreferredWidth(300); //sport column is bigger
            } else {
                if (i == 1 || i == 9) {
                    column1.setPreferredWidth(30);
                } else {
                    if (i == 2) {
                        column1.setPreferredWidth(70);
                    }  else
                    column1.setPreferredWidth(70);

                }
            }
        }

        billTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                billTableMouseClicked(evt);
            }
        });
        billTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                billTableKeyReleased(evt);
            }
        });
        jScrollPane11.setViewportView(billTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 15.0;
        gridBagConstraints.weighty = 15.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel212.add(jScrollPane11, gridBagConstraints);

        jPanel12.setBackground(new java.awt.Color(204, 255, 204));
        jPanel12.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel12.setLayout(new java.awt.GridBagLayout());

        codeChkbx.setBackground(new java.awt.Color(204, 255, 204));
        buttonGroup3.add(codeChkbx);
        codeChkbx.setText("Item Code");
        codeChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jPanel12.add(codeChkbx, new java.awt.GridBagConstraints());

        descriptionChkbx.setBackground(new java.awt.Color(204, 255, 204));
        buttonGroup3.add(descriptionChkbx);
        descriptionChkbx.setSelected(true);
        descriptionChkbx.setText("Description");
        descriptionChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jPanel12.add(descriptionChkbx, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel212.add(jPanel12, gridBagConstraints);

        jLabel61.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel61.setText("Total Bill");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel212.add(jLabel61, gridBagConstraints);

        totalBillTxt.setEditable(false);
        totalBillTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        totalBillTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel212.add(totalBillTxt, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setText("Total Deposits");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel212.add(jLabel11, gridBagConstraints);

        totalDepositsTxt.setEditable(false);
        totalDepositsTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        totalDepositsTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel212.add(totalDepositsTxt, gridBagConstraints);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 0, 51));
        jLabel12.setText("Amount Available");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        jPanel212.add(jLabel12, gridBagConstraints);

        presentedAmountTxt.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        presentedAmountTxt.setForeground(new java.awt.Color(255, 51, 51));
        presentedAmountTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        presentedAmountTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel212.add(presentedAmountTxt, gridBagConstraints);

        buttonGroup4.add(tickAllChkbx);
        tickAllChkbx.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tickAllChkbx.setForeground(new java.awt.Color(0, 0, 255));
        tickAllChkbx.setText("Tick All");
        tickAllChkbx.setEnabled(false);
        tickAllChkbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tickAllChkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        jPanel212.add(tickAllChkbx, gridBagConstraints);

        buttonGroup4.add(untickAllChkbx);
        untickAllChkbx.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        untickAllChkbx.setForeground(new java.awt.Color(102, 0, 102));
        untickAllChkbx.setText("Un Tick All");
        untickAllChkbx.setEnabled(false);
        untickAllChkbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                untickAllChkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        jPanel212.add(untickAllChkbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 40.0;
        jPanel711.add(jPanel212, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Patient here. All fields highlighted in RED are mandatory.", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(255, 0, 51))); // NOI18N
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(numberSearchChkbx);
        numberSearchChkbx.setSelected(true);
        numberSearchChkbx.setText("Patient No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(numberSearchChkbx, gridBagConstraints);

        buttonGroup1.add(nameSearchChkbx);
        nameSearchChkbx.setText("Patient Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(nameSearchChkbx, gridBagConstraints);

        buttonGroup2.add(dischargeRdbtn);
        dischargeRdbtn.setText("Discharge");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(dischargeRdbtn, gridBagConstraints);

        buttonGroup2.add(depositRdbtn);
        depositRdbtn.setSelected(true);
        depositRdbtn.setText("Deposit or Part Payment");
        depositRdbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                depositRdbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(depositRdbtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel1, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setLayout(new java.awt.GridBagLayout());

        patientNumberTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(patientNumberTxt, gridBagConstraints);

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton.setToolTipText("Search");
        searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        jPanel4.add(searchButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel4, gridBagConstraints);

        jLabel911.setForeground(new java.awt.Color(255, 0, 51));
        jLabel911.setText("Patient No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(jLabel911, gridBagConstraints);

        jLabel2122.setText("Visit Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel2.add(jLabel2122, gridBagConstraints);

        visitIDTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(visitIDTxt, gridBagConstraints);

        jLabel5.setForeground(new java.awt.Color(255, 0, 51));
        jLabel5.setText("Paid By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel2.add(jLabel5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(payerTxt, gridBagConstraints);

        jLabel112.setForeground(new java.awt.Color(255, 0, 51));
        jLabel112.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(jLabel112, gridBagConstraints);

        patientNameTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(patientNameTxt, gridBagConstraints);

        jLabel3121.setText("Patient Category");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel2.add(jLabel3121, gridBagConstraints);

        patientCategoryTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(patientCategoryTxt, gridBagConstraints);

        jLabel14.setText("Unit Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel2.add(jLabel14, gridBagConstraints);

        unitNumberTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(unitNumberTxt, gridBagConstraints);

        jLabel15.setText("Ward Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(jLabel15, gridBagConstraints);

        wardNameTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(wardNameTxt, gridBagConstraints);

        payBillNumberTxt.setEditable(false);
        payBillNumberTxt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        payBillNumberTxt.setText(com.afrisoftech.hospital.HospitalMain.payBillNumber
        );
        payBillNumberTxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "PayBill Number", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(255, 0, 51))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(payBillNumberTxt, gridBagConstraints);

        payerMobileTelephoneNumberTxt.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Bill Payer Telephone No.", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(255, 0, 51))); // NOI18N
        payerMobileTelephoneNumberTxt.setForeground(new java.awt.Color(0, 0, 255));
        try {
            payerMobileTelephoneNumberTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("254-7##-######")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(payerMobileTelephoneNumberTxt, gridBagConstraints);

        jPanel62.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel62.setMinimumSize(new java.awt.Dimension(82, 40));
        jPanel62.setPreferredSize(new java.awt.Dimension(87, 40));
        jPanel62.setLayout(new java.awt.GridBagLayout());

        mobilepayTxNoTxt.setEditable(false);
        mobilepayTxNoTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                mobilepayTxNoTxtCaretUpdate(evt);
            }
        });
        mobilepayTxNoTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mobilepayTxNoTxtFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1000.0;
        gridBagConstraints.weighty = 1.0;
        jPanel62.add(mobilepayTxNoTxt, gridBagConstraints);

        searchButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/Find 2.png"))); // NOI18N
        searchButton2.setToolTipText("Search");
        searchButton2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton2.setIconTextGap(0);
        searchButton2.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton2.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel62.add(searchButton2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel62, gridBagConstraints);

        jLabel17.setText("Mobile Transaction No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel2.add(jLabel17, gridBagConstraints);

        jLabel4.setText("Mobile Tx Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel2.add(jLabel4, gridBagConstraints);

        mobileTxAmountTxt.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        mobileTxAmountTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        mobileTxAmountTxt.setText("0.00");
        mobileTxAmountTxt.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(mobileTxAmountTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 1.0;
        jPanel711.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel711, gridBagConstraints);

        setBounds(0, 0, 889, 562);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton221ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton221ActionPerformed
        String receiptNo1 = null;
        String rct = null;
        try {
            connectDB.setAutoCommit(false);

            /*
             * java.sql.Statement ps1 = connectDB.createStatement();
             * java.sql.ResultSet rst1 = ps1.executeQuery("select
             * currval('receipt_no_seq')"); while (rst1.next()){
             */
            receiptNo1 = receiptNumberTxt.getText();
            // }
            String nodetails = null;

            java.sql.Statement ps11 = connectDB.createStatement();
            java.sql.ResultSet rst11 = ps11.executeQuery("select nodetails from receipt_pref");
            while (rst11.next()) {
                nodetails = rst11.getObject(1).toString();
            }
            java.sql.Statement ps112 = connectDB.createStatement();
            java.sql.ResultSet rst112 = ps112.executeQuery("select rct_format from receipt_pref");
            while (rst112.next()) {
                rct = rst112.getObject(1).toString();
            }
            /*
             * if (nodetails.equalsIgnoreCase("NoDetails")) {
             *
             * com.afrisoftech.txtreports.NoDetReceiptsTxt policy = new
             * com.afrisoftech.txtreports.NoDetReceiptsTxt(connectDB,
             * jTextField9.getText(), jTextField20.getText(),
             * jTextField17.getText(), receiptNo1,
             * this.jComboBox411.getSelectedItem().toString()); } else { if
             * (nodetails.equalsIgnoreCase("Codes")) {
             * com.afrisoftech.txtreports.CodeReceiptsTxt policy = new
             * com.afrisoftech.txtreports.CodeReceiptsTxt(connectDB,
             * jTextField9.getText(), jTextField20.getText(),
             * jTextField17.getText(), receiptNo1,
             * this.jComboBox411.getSelectedItem().toString());
             *
             * } else { if (nodetails.equalsIgnoreCase("dept")) {
             * com.afrisoftech.txtreports.ReceiptsPerDeptTxt policy = new
             * com.afrisoftech.txtreports.ReceiptsPerDeptTxt(connectDB,
             * jTextField9.getText(), jTextField20.getText(),
             * jTextField17.getText(), receiptNo1,
             * this.jComboBox411.getSelectedItem().toString());
             *
             * } else { if (nodetails.equalsIgnoreCase("Prints") &&
             * rct.equalsIgnoreCase("Pdf")) {
             * com.afrisoftech.reports.ReceiptsPdf policy = new
             * com.afrisoftech.reports.ReceiptsPdf();
             * policy.ReceiptsPdf(connectDB, receiptNo1); } else {
             * com.afrisoftech.txtreports.ReceiptsTxt policy = new
             * com.afrisoftech.txtreports.ReceiptsTxt(connectDB,
             * jTextField9.getText(), jTextField20.getText(),
             * jTextField17.getText(), receiptNo1,
             * this.jComboBox411.getSelectedItem().toString()); } } } }
             */
            String clientReceipt = null;

            java.sql.PreparedStatement pstmtReprint = connectDB.prepareStatement("SELECT dealer FROM ac_cash_collection WHERE receipt_no = ?");

            pstmtReprint.setString(1, receiptNumberTxt.getText());
            java.sql.ResultSet rsetReprint = pstmtReprint.executeQuery();

            while (rsetReprint.next()) {
                clientReceipt = rsetReprint.getString(1);
            }
            com.afrisoftech.txtreports.GokReceiptsRTxt policy = new com.afrisoftech.txtreports.GokReceiptsRTxt(connectDB, clientReceipt, amountPaidTxt.getText(), receiptNo1, this.paymentModeCmbx.getSelectedItem().toString(), "0.00", "0.00", shiftNumberTxt.getText());

        } catch (java.sql.SQLException sq) {

            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }            // Add your handling code here:
    }//GEN-LAST:event_jButton221ActionPerformed

    private void jButton4111ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4111ActionPerformed
        this.setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_jButton4111ActionPerformed

    private void jButton3111ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3111ActionPerformed

        amountPaidTxt.setText("0.00");
        payerMobileTelephoneNumberTxt.setText("254-7  -      ");
        for (int k = 0; k < billTable.getRowCount(); k++) {
            for (int r = 0; r < billTable.getColumnCount(); r++) {
                billTable.getModel().setValueAt(null, k, r);
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jButton3111ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        this.patientSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void patientSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientSearchTableMouseClicked
        mobileTxAmountTxt.setText("0.00");
        com.afrisoftech.hospital.HospitalMain.mobileTxID = null;
        com.afrisoftech.hospital.HospitalMain.mobileTelephone = null;
        payerMobileTelephoneNumberTxt.setText("254-7  -      ");
        this.jButton1111.setEnabled(true);
        patientNameTxt.setText("");
        visitIDTxt.setText("");
        patientCategoryTxt.setText("");
        patientNumberTxt.setText("");
        amountPaidTxt.setText("");
        invoiceNumberTxt.setText("");
        billBalanceTxt.setText("0.00");
        amountPaidTxt.setText("0.00");
        totalBillTxt.setText("0.00");
        totalDepositsTxt.setText("0.00");
        presentedAmountTxt.setText("0.00");

        for (int k = 0; k < billTable.getRowCount(); k++) {
            for (int r = 0; r < billTable.getColumnCount(); r++) {
                billTable.getModel().setValueAt(null, k, r);
            }
        }
        int j = 0;
        int k = 0;

        patientNameTxt.setText(patientSearchTable.getValueAt(patientSearchTable.getSelectedRow(), 1).toString());
        patientNumberTxt.setText(patientSearchTable.getValueAt(patientSearchTable.getSelectedRow(), 0).toString());
        visitIDTxt.setText(patientSearchTable.getValueAt(patientSearchTable.getSelectedRow(), 2).toString());

        try {

            java.sql.Statement stmt111 = connectDB.createStatement();
            java.sql.ResultSet rsetTable11 = stmt111.executeQuery("SELECT count(patient_no) FROM hp_admission WHERE patient_no = '" + patientNumberTxt.getText() + "' AND check_out = false AND visit_id = '" + visitIDTxt.getText() + "'");

            while (rsetTable11.next()) {
                j = rsetTable11.getInt(1);
            }

            java.sql.Statement stmt111x = connectDB.createStatement();
            java.sql.ResultSet rsetTable11x = stmt111x.executeQuery("SELECT count(annual_no) FROM hp_mortuary WHERE annual_no = '" + patientNumberTxt.getText() + "' AND discharged = false");

            while (rsetTable11x.next()) {
                k = rsetTable11x.getInt(1);
            }
            if (j > 0) {
                double deposit = 0.00;
                java.sql.Statement stmt = connectDB.createStatement();
                java.sql.ResultSet rset = stmt.executeQuery("select patient_name,visit_id,ward,wing, sub_chief from hp_admission WHERE patient_no = '" + patientNumberTxt.getText() + "' AND visit_id = '" + visitIDTxt.getText() + "' ORDER BY date_admitted DESC LIMIT 1");
                while (rset.next()) {
                    patientNameTxt.setText(rset.getObject(1).toString());
                    //jTextField16.setText(rset.getObject(2).toString());
                    jTextField2.setText(rset.getObject(3).toString());
                    wardNameTxt.setText(rset.getObject(3).toString());
                    patientCategoryTxt.setText(rset.getObject(4).toString());
                    visitIDTxt.setText(rset.getObject(2).toString());
                    unitNumberTxt.setText(rset.getObject(5).toString());
                }

                java.sql.Statement stmt11 = connectDB.createStatement();
                java.sql.ResultSet rset11 = stmt11.executeQuery("SELECT sum(debit-credit) FROM hp_patient_card WHERE  patient_no  = '" + patientNumberTxt.getText() + "' and (invoice_no NOT ILIKE 'I%' OR invoice_no NOT ILIKE 'O%') AND visit_id = '" + visitIDTxt.getText() + "'");
                while (rset11.next()) {
                    billBalanceTxt.setText(rset11.getObject(1).toString());
                }

                java.sql.Statement stmt11s = connectDB.createStatement();
                java.sql.ResultSet rset11s = stmt11s.executeQuery("SELECT sum(debit-credit) FROM hp_patient_card WHERE  patient_no  = '" + patientNumberTxt.getText() + "' and (invoice_no NOT ILIKE 'I%' OR invoice_no NOT ILIKE 'O%') AND visit_id = '" + visitIDTxt.getText() + "' AND transaction_type NOT ILIKE '%Receipt%'");
                while (rset11s.next()) {
                    totalBillTxt.setText(rset11s.getObject(1).toString());
                }

                java.sql.Statement stmt11y = connectDB.createStatement();
                java.sql.ResultSet rset11y = stmt11y.executeQuery("SELECT sum(credit-debit) FROM hp_patient_card WHERE  patient_no  = '" + patientNumberTxt.getText() + "' AND visit_id = '" + visitIDTxt.getText() + "'  AND transaction_type ILIKE 'Receipt%'");
                while (rset11y.next()) {
                    deposit = rset11y.getDouble(1);

                }
                totalDepositsTxt.setText(java.lang.String.valueOf(deposit));
            } else {
                if (k > 0) {
                    java.sql.Statement stmt = connectDB.createStatement();
                    java.sql.ResultSet rset = stmt.executeQuery("select patient_name,annual_no,place_of_death,deseased_sourse from hp_mortuary WHERE annual_no = '" + patientNumberTxt.getText() + "' ");
                    while (rset.next()) {
                        patientNameTxt.setText(rset.getObject(1).toString());
                        visitIDTxt.setText(rset.getObject(2).toString());
                        jTextField2.setText(rset.getObject(3).toString());
                        patientCategoryTxt.setText(rset.getObject(4).toString());
                    }

                    java.sql.Statement stmt11 = connectDB.createStatement();
                    java.sql.ResultSet rset11 = stmt11.executeQuery("SELECT sum(debit-credit) FROM hp_patient_card WHERE  patient_no  = '" + patientNumberTxt.getText() + "' and (invoice_no NOT ILIKE 'I%' OR invoice_no NOT ILIKE 'O%') AND visit_id = '" + visitIDTxt.getText() + "'");
                    while (rset11.next()) {
                        billBalanceTxt.setText(rset11.getObject(1).toString());
                    }

                } else {
                    billBalanceTxt.setText("0.00");
                    jTextField2.setText("-");
                }
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }
        //   jButton301.setEnabled(true);

        this.populateTable2(patientNumberTxt.getText());
        patientSearchDialog.dispose();         // Add your handling code here:
    }//GEN-LAST:event_patientSearchTableMouseClicked
    private void populateTable2(java.lang.String patient_no) {
        float grossTotal = java.lang.Float.parseFloat(billBalanceTxt.getText().toString());
        if (grossTotal >= 0) {
            int i = 0;
            int j = 0;
            try {

                //  java.lang.Object[] listofAct = this.getListofActivities();
                java.sql.Statement stmt = connectDB.createStatement();

                java.sql.ResultSet rset = stmt.executeQuery("SELECT count(patient_no) FROM hp_patient_card WHERE patient_no = '" + patient_no + "' AND visit_id = '" + visitIDTxt.getText() + "'");

                while (rset.next()) {
                    j = rset.getInt(1);
                }
                if (j > 0) {
                    //for (int x = 0; x < listofAct.length; x++) {

                    java.sql.Statement stmtTable1 = connectDB.createStatement();
                    java.sql.Statement stmtTable11 = connectDB.createStatement();
                    java.sql.Statement stmtTable111 = connectDB.createStatement();
                    java.sql.ResultSet rsetx = null;
                    java.sql.ResultSet rsetTable1x = null;
                    java.sql.Statement stmtTable1111 = connectDB.createStatement();
                    java.sql.ResultSet rsetx1 = null;
                    //       java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select date::date as date,service,dosage as quantity,debit-credit as amount FROM hp_patient_card WHERE patient_no ='"+jTextField91.getText()+"' and paid = false AND (invoice_no NOT ILIKE 'O%' OR invoice_no NOT ILIKE 'I%')  AND visit_id = '"+jTextField16.getText()+"'");
                    java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT main_service,"
                            + "CASE WHEN (sum(dosage)=0) THEN (sum(debit-credit)/sum(1))::NUMERIC(10,2) ELSE (sum(debit-credit)/sum(dosage))::NUMERIC(10,2) END AS amount,"
                            + "service,sum(dosage),sum(debit-credit),visit_id,doctor,reference,date FROM hp_patient_card WHERE patient_no ='" + patientNumberTxt.getText() + "'"
                            + " AND (invoice_no NOT ILIKE 'O%' OR invoice_no NOT ILIKE 'I%')  AND visit_id = '" + visitIDTxt.getText() + "'  GROUP BY main_service,service,visit_id,doctor,reference,date");

                    while (rsetTable1.next()) {

                        rsetTable1x = stmtTable11.executeQuery("SELECT DISTINCT code FROM pb_activity WHERE upper(activity) = '" + rsetTable1.getObject(1).toString().toUpperCase() + "'");
                        while (rsetTable1x.next()) {
                            rsetx = stmtTable111.executeQuery("SELECT sum(debit-credit),sum(quantity) FROM ac_cash_collection WHERE upper(description) = '" + rsetTable1.getObject(3).toString().toUpperCase() + "' AND activity_code = '" + rsetTable1x.getObject(1) + "' AND journal_no = '" + visitIDTxt.getText() + "'");
                            rsetx1 = stmtTable1111.executeQuery("SELECT product_id FROM st_stock_prices WHERE upper(product) = '" + rsetTable1.getObject(3).toString().toUpperCase() + "' AND gl_code = '" + rsetTable1x.getObject(1) + "' UNION "
                                    + "SELECT code FROM pb_operating_parameters WHERE upper(service_type) = '" + rsetTable1.getObject(3).toString().toUpperCase() + "' AND gl_account = '" + rsetTable1x.getObject(1) + "' ");

                            while (rsetx.next()) {
                                double amount = rsetTable1.getDouble(5);
                                double receipts = rsetx.getDouble(1);
                                double qty = rsetTable1.getDouble(4);
                                double paidQty = rsetx.getDouble(2);
                                if ((amount - receipts) == 0) {
                                } else {
                                    if (qty - paidQty > 0.00) {

                                        System.out.println("Working at table row " + i);
                                        billTable.setValueAt(rsetTable1.getObject(3), i, 0);
                                        billTable.setValueAt(java.lang.Double.valueOf(qty - paidQty), i, 1);
                                        billTable.setValueAt(java.lang.Double.valueOf((amount - receipts) / (qty - paidQty)), i, 2);
                                        billTable.setValueAt(0.00, i, 3);
                                        billTable.setValueAt(0.00, i, 4);
                                        billTable.setValueAt(java.lang.Double.valueOf(amount - receipts), i, 5);
                                        //jTable11.setValueAt(rsetTable1.getObject(5), i, 5);
                                        billTable.setValueAt(rsetTable1x.getObject(1), i, 8);
                                        billTable.setValueAt(rsetTable1.getObject(8), i, 10);
                                        billTable.setValueAt(rsetTable1.getObject(9), i, 11);
                                        String code = null;
                                        while (rsetx1.next()) {

                                            code = rsetx1.getObject(1).toString();
                                            if (code != null) {
                                                billTable.setValueAt(rsetx1.getObject(1), i, 9);
                                            } else {
                                                billTable.setValueAt('0', i, 9);
                                            }
                                            i++;
                                        }
                                    } //                i = i + i;
                                }
                                //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                            }
                        }

                    }
                    stmtTable1.close();
                    stmtTable11.close();
                    stmtTable111.close();
                    rsetTable1.close();
                    rsetTable1x.close();
                    rset.close();
                    if (rsetx == null) {
                    } else {
                        rsetx.close();
                    }

                }

            } catch (java.sql.SQLException sqlExec) {

                sqlExec.printStackTrace();

                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

            }

        }
    }

    private void patientSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_patientSearchTxtCaretUpdate
        if (patientSearchTxt.getCaretPosition() < 3) {

            System.out.println("Nothing");
        } else {
            if (this.nameSearchChkbx.isSelected()) {
                patientSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no,patient_name,visit_id, sub_chief as unit_no FROM hp_admission WHERE patient_name ILIKE '%" + patientSearchTxt.getText() + "%' or sub_chief ILIKE '%" + patientSearchTxt.getText() + "%'  AND check_out = false UNION ALL SELECT annual_no,patient_name,annual_no, tag_no as unit_no FROM hp_mortuary WHERE patient_name ILIKE '%" + patientSearchTxt.getText() + "%' or tag_no ILIKE '%" + patientSearchTxt.getText() + "%' AND discharged = false ORDER BY patient_name"));

                patientSearchTable.setShowHorizontalLines(false);
                jSearchScrollPane.setViewportView(patientSearchTable);

            } else {

                if (this.numberSearchChkbx.isSelected()) {
                    patientSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no,patient_name,visit_id, sub_chief as unit_no FROM hp_admission WHERE patient_no ILIKE '%" + patientSearchTxt.getText() + "%' or sub_chief ILIKE '%" + patientSearchTxt.getText() + "%' AND check_out = false UNION ALL SELECT annual_no,patient_name,annual_no, tag_no as unit_no FROM hp_mortuary WHERE annual_no ILIKE '%" + patientSearchTxt.getText() + "%' or tag_no ILIKE '%" + patientSearchTxt.getText() + "%' AND discharged = false ORDER BY 1"));

                    patientSearchTable.setShowHorizontalLines(false);
                    jSearchScrollPane.setViewportView(patientSearchTable);

                }
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_patientSearchTxtCaretUpdate

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchButtonClicked();

        // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed
    private void searchButtonClicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.patientNumberTxt.getLocationOnScreen();

        patientSearchDialog.setSize(700, 200);

        patientSearchDialog.setLocation(point);

        patientSearchDialog.setVisible(true);

    }

    private void searchButtonClicked2() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.searchButton.getLocationOnScreen();

        jSearchDialog2.setSize(700, 200);

        jSearchDialog2.setLocation(point);

        jSearchDialog2.setVisible(true);

    }

    private void jButton1111ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1111ActionPerformed
//        if (paymentModeCmbx.getSelectedItem().toString().contains("Pesa")) {
//            String payerTelephoneNumber = null;
//
//            System.out.println("Payer Mobile Telephone Number : [" + payerMobileTelephoneNumberTxt.getText().replace("-", "").length() + "]");
//
//            if (paymentModeCmbx.getSelectedItem().toString().contains("Pesa") && payerMobileTelephoneNumberTxt.getText().replace("-", "").length() == 12) {
//                payerTelephoneNumber = payerMobileTelephoneNumberTxt.getText().replace("-", "");
//                try {
//                    java.util.Date periodFrom = null;
//                    java.util.Date periodTo = null;
//                    java.sql.Date dates = null;
//
//                    java.sql.Savepoint registerSavePoint = null;
//                    try {
//                        connectDB.setAutoCommit(false);
//                        registerSavePoint = connectDB.setSavepoint("registration");
//                    } catch (java.sql.SQLException ex) {
//                        ex.printStackTrace();
//                    }
//                    String transactionNo = null;
//                    java.sql.Statement pssMobile = connectDB.createStatement();
//                    java.sql.ResultSet rssMobile = pssMobile.executeQuery("select nextval('transaction_no_seq')");
//                    while (rssMobile.next()) {
//                        transactionNo = rssMobile.getObject(1).toString();
//                    }
//                    if (paymentModeCmbx.getSelectedItem().toString().contains("Pesa") && payerMobileTelephoneNumberTxt.getText().replace("-", "").length() == 12) {
//                        boolean checkoutReturn = com.afrisoftech.funsoft.mobilepay.MobilePayAPI.sendProcessRequest(com.afrisoftech.funsoft.mobilepay.Base64Encoding.encodetoBase64String("Si1Y0dik7IoBEFC9buVTGBBdM0A9mQLw:DlPLOhUtuwdAjzDB"), transactionNo, payerTelephoneNumber, String.valueOf(Math.round(Double.parseDouble(amountPaidTxt.getText()))), com.afrisoftech.hospital.HospitalMain.payBillNumber);
//                        if (checkoutReturn) {
//                            java.sql.PreparedStatement pstmtCheckout = connectDB.prepareStatement("INSERT INTO public.mobile_payments("
//                                    + "            transaction_no, checkout_request_id,"
//                                    + "            billed_amount, patient_no, dealer)"
//                                    + "    VALUES (?, ?, ?,"
//                                    + "            ?, ?)");
//                            pstmtCheckout.setString(1, transactionNo);
//                            pstmtCheckout.setString(2, checkoutRequestID);
//                            pstmtCheckout.setDouble(3, Double.parseDouble(amountPaidTxt.getText()));
//                            pstmtCheckout.setString(4, patientNumberTxt.getText());
//                            pstmtCheckout.setString(5, patientNameTxt.getText());
//                            pstmtCheckout.execute();
//                            pstmtCheckout.close();
//                        }
//                    }
//
////                    while(){
//                    try {
//
//                        java.sql.Statement stmtf = connectDB.createStatement();
//                        java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + datePicker2.getDate() + "' BETWEEN period_from AND period_to");
//                        while (rsetf.next()) {
//                            periodFrom = rsetf.getDate(1);
//                            periodTo = rsetf.getDate(2);
//                        }
//
//                        if (datePicker2.getDate().before(periodFrom) || datePicker2.getDate().after(periodTo)) {
//                            javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
//
//                        } else {
//                            if (patientNameTxt.getText().equalsIgnoreCase("")) {
//                                javax.swing.JOptionPane.showMessageDialog(this, "You cannot save without the name", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
//
//                            } else {
//
//                                // if (java.lang.Float.parseFloat(jTextField17.getText().toString()) > 0) {
//                                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 6);
//                                double totalSumDisc = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 4);
//                                // jTextField17.setText(java.lang.String.valueOf(totalSumDisc));
//                                //jTextField17.setText(java.lang.String.valueOf(totalSum - totalSumDisc));
//                                System.out.println("This is the total sum" + totalSum);
////if(totalSum > 1){
//                                //try{
//                                String glAcc = null;
//                                String receiptNo1 = null;
//                                String receiptNo2 = null;
//                                String actCode1 = null;
//                                String glCode1 = null;
//                                String transNo1 = null;
//                                String actNames1 = null;
//                                String patientAcc = null;
//                                String user = null;
//                                String AccDesc = null;
//                                String name = null;
//                                String rcode = null;
//                                String rname = null;
//                                //   String glAcc = null;
//                                String Activity = null;
//                                // String userName = null;
//                                String code = null;
//                                String visitid = "-";
//                                String mdepartment = null;
//                                String voucNo = null;
//                                String accountCode = null;
//                                String TransNo = null;
//                                String glType = null;
//                                String nodetails = null;
//                                String priceCategory = null;
//                                int vid = 0;
//                                String rct = null;
//
//                                java.util.Calendar calendar = java.util.Calendar.getInstance();
//
//                                long dateNow = calendar.getTimeInMillis();
//
//                                java.sql.Date datenowSql1 = new java.sql.Date(dateNow);
//                                java.sql.Statement stm121xx = connectDB.createStatement();
//                                java.sql.ResultSet rse121xx = stm121xx.executeQuery("select shift_no from ac_shifts WHERE user_name = current_user and status = 'Running' AND cash_point = '" + cashPointTxt.getText() + "'");
//                                while (rse121xx.next()) {
//
//                                    shiftNumberTxt.setText(rse121xx.getString(1));
//
//                                }
//
//                                java.sql.Statement stm12fx = connectDB.createStatement();
//                                java.sql.ResultSet rse12fx = stm12fx.executeQuery("select cash_point,start_date::DATE from ac_shifts WHERE shift_no = '" + shiftNumberTxt.getText() + "'");
//                                while (rse12fx.next()) {
//                                    // jTextField141.setText(rse12fx.getString(1));
//                                    dates = rse12fx.getDate(2);
//                                }
//                                java.sql.Statement stm12 = connectDB.createStatement();
//                                java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
//                                while (rse12.next()) {
//
//                                    patientAcc = rse12.getObject(1).toString();
//                                    AccDesc = rse12.getObject(2).toString();
//                                }
//                                java.sql.Statement stm12z = connectDB.createStatement();
//                                java.sql.ResultSet rse12z = stm12z.executeQuery("select current_user");
//                                while (rse12z.next()) {
//                                    user = rse12z.getObject(1).toString();
//                                }
//                                java.sql.Statement stm1211 = connectDB.createStatement();
//                                java.sql.ResultSet rse1211 = stm1211.executeQuery("select activity,code from pb_activity where activity_category ='RC'");
//                                while (rse1211.next()) {
//                                    rname = rse1211.getObject(1).toString();
//                                    rcode = rse1211.getObject(2).toString();
//                                }
//
//                                java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);
//                                //receiptNo1 = com.afrisoftech.lib.DateLables.getDateLabel();
//                                java.sql.Statement stm12f = connectDB.createStatement();
//                                java.sql.ResultSet rse12f = stm12f.executeQuery("select now()");
//                                while (rse12f.next()) {
//                                    datenowSql = rse12f.getTimestamp(1);
//                                }
//                                // receiptNo1 = datenowSql.toString();
//                                java.sql.Statement pss = connectDB.createStatement();
//                                java.sql.ResultSet rss = pss.executeQuery("select nextval('transaction_no_seq')");
//                                while (rss.next()) {
//                                    transNo1 = rss.getObject(1).toString();
//                                    receiptNo1 = "R" + rss.getObject(1).toString();
//
//                                }
//                                System.out.println("This is the receipt Temp No - " + receiptNo1);
//                                System.out.println(actNames1);
//
//                                boolean dataSave = false;
//                                java.sql.Statement stm121s = connectDB.createStatement();
//                                java.sql.ResultSet rse121s = null;
//                                for (int i = 0; i < billTable.getRowCount(); i++) {
//                                    if (billTable.getModel().getValueAt(i, 6) != null && billTable.getModel().getValueAt(i, 0) != null && billTable.getModel().getValueAt(i, 7) != null) {
//                                        if (billTable.getModel().getValueAt(i, 9) == null) {
//                                            code = "0";
//                                        } else {
//                                            code = billTable.getValueAt(i, 9).toString();
//                                        }
//                                        java.sql.Statement stm121 = connectDB.createStatement();
//                                        java.sql.ResultSet rse121 = stm121.executeQuery("select activity,code,department from pb_activity where code ='" + billTable.getModel().getValueAt(i, 8).toString() + "'");
//                                        while (rse121.next()) {
//
//                                            glAcc = rse121.getObject(1).toString();
//                                            mdepartment = rse121.getObject(3).toString();
//                                        }
//                                        if (billTable.getModel().getValueAt(i, 9) == null) {
//                                            priceCategory = "0";
//                                        } else {
//                                            rse121s = stm121s.executeQuery("SELECT prov_code FROM st_stock_item WHERE item_code = '" + billTable.getModel().getValueAt(i, 9).toString() + "'");
//                                            while (rse121s.next()) {
//
//                                                priceCategory = rse121s.getObject(1).toString();
//                                            }
//                                        }
//                                        double negative = java.lang.Double.valueOf(billTable.getValueAt(i, 6).toString());
//                                        if (negative > 0) {
//                                            java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("INSERT "
//                                                    + "INTO ac_cash_collection VALUES(?,?,?,initcap(?),?,?, ?, "
//                                                    + "initcap(?), initcap(?), ?, ?, ?, initcap(?), ?, ?, ?, ?, ?, ?, "
//                                                    + "?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
//                                            pstmt2.setObject(1, billTable.getValueAt(i, 8).toString());
//                                            pstmt2.setObject(5, paymentModeCmbx.getSelectedItem().toString());
//                                            pstmt2.setString(2, billTable.getValueAt(i, 0).toString());
//                                            pstmt2.setString(3, patientNumberTxt.getText());
//                                            pstmt2.setString(4, patientNameTxt.getText());
//                                            pstmt2.setString(6, jTextField2121.getText());
//                                            pstmt2.setString(7, jTextField5211.getText());
//                                            pstmt2.setString(8, jTextField421.getText());
//                                            pstmt2.setString(9, jTextField512.getText());
//                                            pstmt2.setString(10, rcode);
//                                            pstmt2.setString(12, receiptNo1);
//                                            pstmt2.setString(11, jTextField221.getText());
//                                            pstmt2.setString(13, visitIDTxt.getText());
//                                            pstmt2.setString(14, payerTxt.getText());
//                                            pstmt2.setObject(15, "Receipts");
//                                            pstmt2.setDouble(16, java.lang.Double.valueOf(billTable.getValueAt(i, 6).toString()));
//                                            pstmt2.setDouble(17, 0.00);
//                                            pstmt2.setDate(18, dates);//com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
//                                            pstmt2.setString(19, transNo1);
//                                            pstmt2.setBoolean(20, false);
//                                            pstmt2.setBoolean(21, false);
//                                            pstmt2.setBoolean(22, false);
//                                            pstmt2.setString(23, user);
//                                            pstmt2.setString(25, shiftNumberTxt.getText());
//                                            pstmt2.setString(24, cashPointTxt.getText());
//                                            pstmt2.setDate(26, null);
//                                            pstmt2.setDouble(27, java.lang.Double.valueOf(billTable.getValueAt(i, 1).toString()));
//                                            pstmt2.setDate(28, null);
//                                            pstmt2.setTimestamp(29, datenowSql);
//                                            pstmt2.setString(30, mdepartment);
//                                            pstmt2.setBoolean(31, false);
//                                            pstmt2.setObject(32, priceCategory);
//                                            pstmt2.setObject(33, code);
//                                            pstmt2.setDouble(34, java.lang.Double.valueOf(billTable.getValueAt(i, 6).toString()) / java.lang.Double.valueOf(billTable.getValueAt(i, 1).toString()));
//
//                                            pstmt2.executeUpdate();
//
//                                        } else {
//                                            if (negative < 0) {
//                                                String waivNumber = "-";
//                                                String mainService = "-";
//                                                rse121s = stm121s.executeQuery("SELECT prov_code FROM st_stock_item WHERE item_code = '" + billTable.getModel().getValueAt(i, 9).toString() + "'");
//                                                while (rse121s.next()) {
//
//                                                    if (priceCategory == null) {
//                                                        priceCategory = "0";
//                                                    } else {
//                                                        priceCategory = rse121s.getObject(1).toString();
//                                                    }
//                                                }
//                                                java.sql.Statement pssg = connectDB.createStatement();
//                                                java.sql.ResultSet rssg = pssg.executeQuery("SELECT requisition_no,main_service FROM hp_patient_card WHERE service = '" + billTable.getValueAt(i, 0) + "' AND visit_id = '" + visitIDTxt.getText() + "' AND credit > 0");
//                                                while (rssg.next()) {
//                                                    waivNumber = rssg.getObject(1).toString();
//                                                    mainService = rssg.getObject(2).toString();
//                                                }
//                                                if (mainService.equalsIgnoreCase("-")) {
//                                                    mainService = "Receipts";
//                                                } else {
//                                                    mainService = mainService;
//                                                }
//
//                                                java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("INSERT INTO "
//                                                        + "ac_cash_collection VALUES(?,?,?,initcap(?),?,?, ?, initcap(?), "
//                                                        + "initcap(?), ?, ?, ?, initcap(?), ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,"
//                                                        + "?,?,?,?,?,?,?,?,?)");
//                                                pstmt2.setObject(1, billTable.getValueAt(i, 8).toString());
//                                                pstmt2.setObject(5, paymentModeCmbx.getSelectedItem().toString());
//                                                pstmt2.setString(2, billTable.getValueAt(i, 0).toString());
//                                                pstmt2.setString(3, patientNumberTxt.getText());
//                                                pstmt2.setString(4, patientNameTxt.getText());
//                                                pstmt2.setString(6, jTextField2121.getText());
//                                                pstmt2.setString(7, jTextField5211.getText());
//                                                pstmt2.setString(8, jTextField421.getText());
//                                                pstmt2.setString(9, jTextField512.getText());
//                                                pstmt2.setString(10, rcode);
//                                                pstmt2.setString(12, receiptNo1);
//                                                pstmt2.setString(11, jTextField221.getText());
//                                                pstmt2.setString(13, waivNumber);
//                                                pstmt2.setString(14, payerTxt.getText());
//                                                pstmt2.setObject(15, mainService);
//                                                pstmt2.setDouble(16, 0.00);
//                                                pstmt2.setDouble(17, java.lang.Double.valueOf(billTable.getValueAt(i, 6).toString()) * -1);
//                                                pstmt2.setDate(18, dates); //com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
//                                                pstmt2.setString(19, transNo1);
//                                                pstmt2.setBoolean(20, false);
//                                                pstmt2.setBoolean(21, false);
//                                                pstmt2.setBoolean(22, false);
//                                                pstmt2.setString(23, user);
//                                                pstmt2.setString(25, shiftNumberTxt.getText());
//                                                pstmt2.setString(24, cashPointTxt.getText());
//                                                pstmt2.setDate(26, null);
//                                                pstmt2.setDouble(27, java.lang.Double.valueOf(billTable.getValueAt(i, 1).toString()));
//                                                pstmt2.setDate(28, null);
//                                                pstmt2.setTimestamp(29, datenowSql);
//                                                pstmt2.setString(30, mdepartment);
//                                                pstmt2.setBoolean(31, false);
//                                                pstmt2.setObject(32, priceCategory);
//                                                pstmt2.setObject(33, code);
//                                                pstmt2.setDouble(34, java.lang.Double.valueOf(billTable.getValueAt(i, 6).toString()) / java.lang.Double.valueOf(billTable.getValueAt(i, 1).toString()));
//                                                pstmt2.executeUpdate();
//
//                                            }
//
//                                        }
//                                        dataSave = true;
//                                    }
//                                }
//                                if (dataSave) {
//                                    java.sql.PreparedStatement pstmtx = connectDB.prepareStatement("INSERT INTO hp_patient_card VALUES(?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
//                                    pstmtx.setString(1, patientNumberTxt.getText());
//                                    pstmtx.setObject(2, "Receipt");
//                                    pstmtx.setObject(3, patientCategoryTxt.getText());
//                                    pstmtx.setObject(4, paymentModeCmbx.getSelectedItem().toString());
//                                    pstmtx.setString(5, transNo1);
//                                    pstmtx.setString(7, "");
//                                    pstmtx.setString(6, jTextField2121.getText());
//                                    pstmtx.setString(8, jTextField5211.getText());
//                                    pstmtx.setString(9, jTextField4111.getText());
//                                    pstmtx.setDate(10, dates); //com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
//                                    pstmtx.setString(11, "");
//                                    pstmtx.setDouble(13, totalSum);
//                                    pstmtx.setDouble(12, 0.0);
//                                    pstmtx.setDate(14, dates); //com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
//                                    pstmtx.setObject(15, patientAcc);
//                                    pstmtx.setString(16, "Receipt");
//                                    pstmtx.setDouble(17, 1);
//                                    pstmtx.setObject(18, "");
//                                    pstmtx.setBoolean(19, true);
//                                    pstmtx.setString(20, "Receipt");
//                                    pstmtx.setBoolean(21, true);
//                                    pstmtx.setString(22, AccDesc);
//                                    pstmtx.setString(23, visitid);
//                                    pstmtx.setString(24, user);
//                                    pstmtx.setString(25, cashPointTxt.getText());
//                                    pstmtx.setString(26, "IP");
//                                    pstmtx.setTimestamp(27, datenowSql);
//                                    pstmtx.setString(28, visitIDTxt.getText());
//                                    pstmtx.setString(29, receiptNo1);
//                                    pstmtx.executeUpdate();
//
//                                    /*
//                                     * java.sql.Statement ps1 =
//                                     * connectDB.createStatement(); java.sql.ResultSet
//                                     * rst1 = ps1.executeQuery("select
//                                     * nextval('receipt_no_seq')"); while (rst1.next())
//                                     * { receiptNo2 = rst1.getObject(1).toString(); }
//                                     */
//                                    java.sql.PreparedStatement psr = connectDB.prepareStatement("INSERT INTO ac_receipts_no("
//                                            + "account_no, account_name, date, amount, shift_no, "
//                                            + "cash_point, reference, user_name) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
//                                    psr.setString(1, patientNumberTxt.getText());
//                                    psr.setString(2, patientNameTxt.getText());
//                                    psr.setDate(3, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
//                                    psr.setDouble(4, totalSum);
//                                    psr.setInt(5, java.lang.Integer.valueOf(shiftNumberTxt.getText()));
//                                    psr.setString(6, cashPointTxt.getText());
//                                    psr.setString(7, receiptNo1);
//                                    psr.setString(8, user);
//                                    psr.executeUpdate();
//
//                                    java.sql.Statement ps1q = connectDB.createStatement();
//                                    //java.sql.ResultSet rst1q = ps1q.executeQuery("SELECT receipt_no FROM ac_receipts_no WHERE reference = '" + receiptNo1 + "'");
//
//                                    java.sql.ResultSet rst1q = ps1q.executeQuery("SELECT LPAD(receipt_no::TEXT,8,'0'::TEXT) FROM ac_receipts_no WHERE reference = '" + receiptNo1 + "'");
//                                    while (rst1q.next()) {
//                                        receiptNo2 = rst1q.getObject(1).toString();
//                                    }
//                                    java.sql.PreparedStatement pstmt112 = connectDB.prepareStatement("UPDATE ac_cash_collection SET receipt_no = '" + receiptNo2 + "' WHERE receipt_no = '" + receiptNo1 + "'");
//                                    pstmt112.executeUpdate();
//                                    java.sql.PreparedStatement pstmt112z = connectDB.prepareStatement("UPDATE hp_patient_card SET requisition_no = '" + receiptNo2 + "' WHERE requisition_no = '" + receiptNo1 + "'");
//                                    pstmt112z.executeUpdate();
//
//                                    receiptNumberTxt.setText(receiptNo2);
//
//                                    java.sql.Statement ps11 = connectDB.createStatement();
//                                    java.sql.ResultSet rst11 = ps11.executeQuery("select nodetails from receipt_pref");
//                                    while (rst11.next()) {
//                                        nodetails = rst11.getObject(1).toString();
//                                    }
//                                    java.sql.Statement ps112 = connectDB.createStatement();
//                                    java.sql.ResultSet rst112 = ps112.executeQuery("select rct_format from receipt_pref");
//                                    while (rst112.next()) {
//                                        rct = rst112.getObject(1).toString();
//                                    }
//
//                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("");
//
//                                    receiptNo1 = receiptNumberTxt.getText();
//
//                                    String clientReceipt = null;
//
//                                    java.sql.PreparedStatement pstmtReprint = connectDB.prepareStatement("SELECT dealer FROM ac_cash_collection WHERE receipt_no = ?");
//
//                                    pstmtReprint.setString(1, receiptNumberTxt.getText());
//                                    java.sql.ResultSet rsetReprint = pstmtReprint.executeQuery();
//
//                                    while (rsetReprint.next()) {
//                                        clientReceipt = rsetReprint.getString(1);
//                                    }
//
//                                    //////  searchButtonClicked2();
//                                    //  com.afrisoftech.txtreports.GokIpReceiptsTxt policy = new com.afrisoftech.txtreports.GokIpReceiptsTxt(connectDB, clientReceipt, jTextField17.getText(), receiptNo1, this.jComboBox411.getSelectedItem().toString(), "0.00", "0.00", jTextField81.getText());
////                            java.sql.Statement ps112 = connectDB.createStatement();
////                            java.sql.ResultSet rst112 = ps112.executeQuery("select rct_format from receipt_pref");
//                                    while (rst112.next()) {
//                                        rct = rst112.getObject(1).toString();
//                                    }
//                                    if (rct.equalsIgnoreCase("Pdf")) {
//                                        com.afrisoftech.reports.ReceiptsPdf policy1 = new com.afrisoftech.reports.ReceiptsPdf();
//                                        policy1.ReceiptsPdf(connectDB, receiptNo2);
//                                    } else {
//                                        com.afrisoftech.txtreports.GokIpReceiptsTxt policy = new com.afrisoftech.txtreports.GokIpReceiptsTxt(connectDB, clientReceipt, amountPaidTxt.getText(), receiptNo1, this.paymentModeCmbx.getSelectedItem().toString(), "0.00", "0.00", shiftNumberTxt.getText());
//
//                                        //                             com.afrisoftech.txtreports.GokReceiptsTxt policy = new com.afrisoftech.txtreports.GokReceiptsTxt(connectDB, jTextField91.getText(), jTextField311.getText(), receiptNo2, this.jComboBox41.getSelectedItem().toString(), jTextField121.getText(), jTextField131.getText(), jTextField811.getText());
//                                    }
//
//                                    connectDB.commit();
//                                    connectDB.setAutoCommit(true);
//
//                                    this.jButton1111.setEnabled(false);
//
//                                    dischargeRdbtn.setSelected(true);
//                                    javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
//                                    for (int k = 0; k < billTable.getRowCount(); k++) {
//                                        for (int r = 0; r < billTable.getColumnCount(); r++) {
//                                            billTable.setValueAt(null, k, r);
//                                        }
//                                    }
//                                }
//                            }
//                        }
//                        //}
//
//                    } catch (java.sql.SQLException sq) {
//                        sq.printStackTrace();
//                        javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage());
//                        try {
//                            connectDB.rollback(registerSavePoint);
//                        } catch (java.sql.SQLException sql) {
//                            javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
//                        }
//                        System.out.println(sq.getMessage());
//                        javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
//
//                    }
//
//                } catch (java.lang.Exception ex) {
//                    System.out.println(ex.getMessage());
//                    javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
//
//                }
//
//            } else {
//                javax.swing.JOptionPane.showMessageDialog(this, "Please check telephone number! It should be formatted as follows : 2547xxxxxx");
//            }
//
//        } else {
        try {
            java.util.Date periodFrom = null;
            java.util.Date periodTo = null;
            java.sql.Date dates = null;

            java.sql.Savepoint registerSavePoint = null;
            try {
                connectDB.setAutoCommit(false);
                registerSavePoint = connectDB.setSavepoint("registration");
            } catch (java.sql.SQLException ex) {
                ex.printStackTrace();
            }

            try {

                java.sql.Statement stmtf = connectDB.createStatement();
                java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + datePicker2.getDate() + "' BETWEEN period_from AND period_to");
                while (rsetf.next()) {
                    periodFrom = rsetf.getDate(1);
                    periodTo = rsetf.getDate(2);
                }

                if (datePicker2.getDate().before(periodFrom) || datePicker2.getDate().after(periodTo)) {
                    javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                } else {
                    if (patientNameTxt.getText().equalsIgnoreCase("")) {
                        javax.swing.JOptionPane.showMessageDialog(this, "You cannot save without the name", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    } else {

                        // if (java.lang.Float.parseFloat(jTextField17.getText().toString()) > 0) {
                        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 6);
                        double totalSumDisc = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 4);
                        // jTextField17.setText(java.lang.String.valueOf(totalSumDisc));
                        //jTextField17.setText(java.lang.String.valueOf(totalSum - totalSumDisc));
                        System.out.println("This is the total sum" + totalSum);
//if(totalSum > 1){
                        //try{
                        String glAcc = null;
                        String receiptNo1 = null;
                        String receiptNo2 = null;
                        String actCode1 = null;
                        String glCode1 = null;
                        String transNo1 = null;
                        String actNames1 = null;
                        String patientAcc = null;
                        String user = null;
                        String AccDesc = null;
                        String name = null;
                        String rcode = null;
                        String rname = null;
                        //   String glAcc = null;
                        String Activity = null;
                        // String userName = null;
                        String code = null;
                        String visitid = "-";
                        String mdepartment = null;
                        String voucNo = null;
                        String accountCode = null;
                        String TransNo = null;
                        String glType = null;
                        String nodetails = null;
                        String priceCategory = null;
                        int vid = 0;
                        String rct = null;

                        java.util.Calendar calendar = java.util.Calendar.getInstance();

                        long dateNow = calendar.getTimeInMillis();

                        java.sql.Date datenowSql1 = new java.sql.Date(dateNow);
                        java.sql.Statement stm121xx = connectDB.createStatement();
                        java.sql.ResultSet rse121xx = stm121xx.executeQuery("select shift_no from ac_shifts WHERE user_name = current_user and status = 'Running' AND cash_point = '" + cashPointTxt.getText() + "'");
                        while (rse121xx.next()) {

                            shiftNumberTxt.setText(rse121xx.getString(1));

                        }

                        java.sql.Statement stm12fx = connectDB.createStatement();
                        java.sql.ResultSet rse12fx = stm12fx.executeQuery("select cash_point,start_date::DATE from ac_shifts WHERE shift_no = '" + shiftNumberTxt.getText() + "'");
                        while (rse12fx.next()) {
                            // jTextField141.setText(rse12fx.getString(1));
                            dates = rse12fx.getDate(2);
                        }
                        java.sql.Statement stm12 = connectDB.createStatement();
                        java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                        while (rse12.next()) {

                            patientAcc = rse12.getObject(1).toString();
                            AccDesc = rse12.getObject(2).toString();
                        }
                        java.sql.Statement stm12z = connectDB.createStatement();
                        java.sql.ResultSet rse12z = stm12z.executeQuery("select current_user");
                        while (rse12z.next()) {
                            user = rse12z.getObject(1).toString();
                        }
                        java.sql.Statement stm1211 = connectDB.createStatement();
                        java.sql.ResultSet rse1211 = stm1211.executeQuery("select activity,code from pb_activity where activity_category ='RC'");
                        while (rse1211.next()) {
                            rname = rse1211.getObject(1).toString();
                            rcode = rse1211.getObject(2).toString();
                        }

                        java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);
                        //receiptNo1 = com.afrisoftech.lib.DateLables.getDateLabel();
                        java.sql.Statement stm12f = connectDB.createStatement();
                        java.sql.ResultSet rse12f = stm12f.executeQuery("select now()");
                        while (rse12f.next()) {
                            datenowSql = rse12f.getTimestamp(1);
                        }
                        // receiptNo1 = datenowSql.toString();
                        java.sql.Statement pss = connectDB.createStatement();
                        java.sql.ResultSet rss = pss.executeQuery("select nextval('transaction_no_seq')");
                        while (rss.next()) {
                            transNo1 = rss.getObject(1).toString();
                            receiptNo1 = "R" + rss.getObject(1).toString();

                        }
                        System.out.println("This is the receipt Temp No - " + receiptNo1);
                        System.out.println(actNames1);

                        boolean dataSave = false;
                        java.sql.Statement stm121s = connectDB.createStatement();
                        java.sql.ResultSet rse121s = null;
                        for (int i = 0; i < billTable.getRowCount(); i++) {
                            if (billTable.getModel().getValueAt(i, 6) != null && billTable.getModel().getValueAt(i, 0) != null && billTable.getModel().getValueAt(i, 7) != null) {
                                if (billTable.getModel().getValueAt(i, 9) == null) {
                                    code = "0";
                                } else {
                                    code = billTable.getValueAt(i, 9).toString();
                                }
                                java.sql.Statement stm121 = connectDB.createStatement();
                                java.sql.ResultSet rse121 = stm121.executeQuery("select activity,code,department from pb_activity where code ='" + billTable.getModel().getValueAt(i, 8).toString() + "'");
                                while (rse121.next()) {

                                    glAcc = rse121.getObject(1).toString();
                                    mdepartment = rse121.getObject(3).toString();
                                }
                                if (billTable.getModel().getValueAt(i, 9) == null) {
                                    priceCategory = "0";
                                } else {
                                    rse121s = stm121s.executeQuery("SELECT prov_code FROM st_stock_item WHERE item_code = '" + billTable.getModel().getValueAt(i, 9).toString() + "'");
                                    while (rse121s.next()) {

                                        priceCategory = rse121s.getObject(1).toString();
                                    }
                                }
                                double negative = java.lang.Double.valueOf(billTable.getValueAt(i, 6).toString());
                                if (negative > 0) {
                                    java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("INSERT "
                                            + "INTO ac_cash_collection VALUES(?,?,?,initcap(?),?,?, ?, "
                                            + "initcap(?), initcap(?), ?, ?, ?, initcap(?), ?, ?, ?, ?, ?, ?, "
                                            + "?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                    pstmt2.setObject(1, billTable.getValueAt(i, 8).toString());
                                    pstmt2.setObject(5, paymentModeCmbx.getSelectedItem().toString());
                                    pstmt2.setString(2, billTable.getValueAt(i, 0).toString());
                                    pstmt2.setString(3, patientNumberTxt.getText());
                                    pstmt2.setString(4, patientNameTxt.getText());
                                    pstmt2.setString(6, jTextField2121.getText());
                                    pstmt2.setString(7, jTextField5211.getText());
                                    pstmt2.setString(8, jTextField421.getText());
                                    pstmt2.setString(9, jTextField512.getText());
                                    pstmt2.setString(10, rcode);
                                    pstmt2.setString(12, receiptNo1);
                                    pstmt2.setString(11, jTextField221.getText());
                                    if (paymentModeCmbx.getSelectedItem().toString().contains("Pesa")) {
                                        pstmt2.setString(13, com.afrisoftech.hospital.HospitalMain.mobileTxID);
                                        pstmt2.setString(14, com.afrisoftech.hospital.HospitalMain.mobileTelephone);
                                    } else {
                                        pstmt2.setString(13, visitIDTxt.getText());
                                        pstmt2.setString(14, payerTxt.getText());
                                    }
                                    pstmt2.setObject(15, "Receipts");
                                    pstmt2.setDouble(16, java.lang.Double.valueOf(billTable.getValueAt(i, 6).toString()));
                                    pstmt2.setDouble(17, 0.00);
                                    pstmt2.setDate(18, dates);//com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                                    pstmt2.setString(19, transNo1);
                                    pstmt2.setBoolean(20, false);
                                    pstmt2.setBoolean(21, false);
                                    pstmt2.setBoolean(22, false);
                                    pstmt2.setString(23, user);
                                    pstmt2.setString(25, shiftNumberTxt.getText());
                                    pstmt2.setString(24, cashPointTxt.getText());
                                    pstmt2.setDate(26, null);
                                    pstmt2.setDouble(27, java.lang.Double.valueOf(billTable.getValueAt(i, 1).toString()));
                                    pstmt2.setDate(28, null);
                                    pstmt2.setTimestamp(29, datenowSql);
                                    pstmt2.setString(30, mdepartment);
                                    pstmt2.setBoolean(31, false);
                                    pstmt2.setObject(32, priceCategory);
                                    pstmt2.setObject(33, code);
                                    pstmt2.setDouble(34, java.lang.Double.valueOf(billTable.getValueAt(i, 6).toString()) / java.lang.Double.valueOf(billTable.getValueAt(i, 1).toString()));
                                    if (paymentModeCmbx.getSelectedItem().toString().contains("Pesa")) {
                                        pstmt2.setObject(35, checkoutRequestID);
                                        pstmt2.setObject(36, payBillNumberTxt.getText());
                                    } else {
                                        pstmt2.setObject(35, priceCategory);
                                        pstmt2.setObject(36, code);
                                    }
                                    pstmt2.executeUpdate();

                                } else {
                                    if (negative < 0) {
                                        String waivNumber = "-";
                                        String mainService = "-";
                                        rse121s = stm121s.executeQuery("SELECT prov_code FROM st_stock_item WHERE item_code = '" + billTable.getModel().getValueAt(i, 9).toString() + "'");
                                        while (rse121s.next()) {

                                            if (priceCategory == null) {
                                                priceCategory = "0";
                                            } else {
                                                priceCategory = rse121s.getObject(1).toString();
                                            }
                                        }
                                        java.sql.Statement pssg = connectDB.createStatement();
                                        java.sql.ResultSet rssg = pssg.executeQuery("SELECT requisition_no,main_service FROM hp_patient_card WHERE service = '" + billTable.getValueAt(i, 0) + "' AND visit_id = '" + visitIDTxt.getText() + "' AND credit > 0");
                                        while (rssg.next()) {
                                            waivNumber = rssg.getObject(1).toString();
                                            mainService = rssg.getObject(2).toString();
                                        }
                                        if (mainService.equalsIgnoreCase("-")) {
                                            mainService = "Receipts";
                                        } else {
                                            mainService = mainService;
                                        }

                                        java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("INSERT INTO "
                                                + "ac_cash_collection VALUES(?,?,?,initcap(?),?,?, ?, initcap(?), "
                                                + "initcap(?), ?, ?, ?, initcap(?), ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,"
                                                + "?,?,?,?,?,?,?,?,?)");
                                        pstmt2.setObject(1, billTable.getValueAt(i, 8).toString());
                                        pstmt2.setObject(5, paymentModeCmbx.getSelectedItem().toString());
                                        pstmt2.setString(2, billTable.getValueAt(i, 0).toString());
                                        pstmt2.setString(3, patientNumberTxt.getText());
                                        pstmt2.setString(4, patientNameTxt.getText());
                                        pstmt2.setString(6, jTextField2121.getText());
                                        pstmt2.setString(7, jTextField5211.getText());
                                        pstmt2.setString(8, jTextField421.getText());
                                        pstmt2.setString(9, jTextField512.getText());
                                        pstmt2.setString(10, rcode);
                                        pstmt2.setString(12, receiptNo1);
                                        pstmt2.setString(11, jTextField221.getText());
                                        pstmt2.setString(13, waivNumber);
                                        pstmt2.setString(14, payerTxt.getText());
                                        pstmt2.setObject(15, mainService);
                                        pstmt2.setDouble(16, 0.00);
                                        pstmt2.setDouble(17, java.lang.Double.valueOf(billTable.getValueAt(i, 6).toString()) * -1);
                                        pstmt2.setDate(18, dates); //com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                                        pstmt2.setString(19, transNo1);
                                        pstmt2.setBoolean(20, false);
                                        pstmt2.setBoolean(21, false);
                                        pstmt2.setBoolean(22, false);
                                        pstmt2.setString(23, user);
                                        pstmt2.setString(25, shiftNumberTxt.getText());
                                        pstmt2.setString(24, cashPointTxt.getText());
                                        pstmt2.setDate(26, null);
                                        pstmt2.setDouble(27, java.lang.Double.valueOf(billTable.getValueAt(i, 1).toString()));
                                        pstmt2.setDate(28, null);
                                        pstmt2.setTimestamp(29, datenowSql);
                                        pstmt2.setString(30, mdepartment);
                                        pstmt2.setBoolean(31, false);
                                        pstmt2.setObject(32, priceCategory);
                                        pstmt2.setObject(33, code);
                                        pstmt2.setDouble(34, java.lang.Double.valueOf(billTable.getValueAt(i, 6).toString()) / java.lang.Double.valueOf(billTable.getValueAt(i, 1).toString()));
                                        pstmt2.executeUpdate();

                                    }

                                }
                                dataSave = true;
                            }
                        }
                        if (dataSave) {
                            java.sql.PreparedStatement pstmtx = connectDB.prepareStatement("INSERT INTO hp_patient_card VALUES(?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                            pstmtx.setString(1, patientNumberTxt.getText());
                            pstmtx.setObject(2, "Receipt");
                            pstmtx.setObject(3, patientCategoryTxt.getText());
                            pstmtx.setObject(4, paymentModeCmbx.getSelectedItem().toString());
                            pstmtx.setString(5, transNo1);
                            pstmtx.setString(7, "");
                            pstmtx.setString(6, jTextField2121.getText());
                            pstmtx.setString(8, jTextField5211.getText());
                            pstmtx.setString(9, jTextField4111.getText());
                            pstmtx.setDate(10, dates); //com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                            pstmtx.setString(11, "");
                            pstmtx.setDouble(13, totalSum);
                            pstmtx.setDouble(12, 0.0);
                            pstmtx.setDate(14, dates); //com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                            pstmtx.setObject(15, patientAcc);
                            pstmtx.setString(16, "Receipt");
                            pstmtx.setDouble(17, 1);
                            pstmtx.setObject(18, "");
                            pstmtx.setBoolean(19, true);
                            pstmtx.setString(20, "Receipt");
                            pstmtx.setBoolean(21, true);
                            pstmtx.setString(22, AccDesc);
                            pstmtx.setString(23, visitid);
                            pstmtx.setString(24, user);
                            pstmtx.setString(25, cashPointTxt.getText());
                            pstmtx.setString(26, "IP");
                            pstmtx.setTimestamp(27, datenowSql);
                            pstmtx.setString(28, visitIDTxt.getText());
                            pstmtx.setString(29, receiptNo1);
                            pstmtx.executeUpdate();

                            /*
                                 * java.sql.Statement ps1 =
                                 * connectDB.createStatement(); java.sql.ResultSet
                                 * rst1 = ps1.executeQuery("select
                                 * nextval('receipt_no_seq')"); while (rst1.next())
                                 * { receiptNo2 = rst1.getObject(1).toString(); }
                             */
                            java.sql.PreparedStatement psr = connectDB.prepareStatement("INSERT INTO ac_receipts_no("
                                    + "account_no, account_name, date, amount, shift_no, "
                                    + "cash_point, reference, user_name) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
                            psr.setString(1, patientNumberTxt.getText());
                            psr.setString(2, patientNameTxt.getText());
                            psr.setDate(3, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                            psr.setDouble(4, totalSum);
                            psr.setInt(5, java.lang.Integer.valueOf(shiftNumberTxt.getText()));
                            psr.setString(6, cashPointTxt.getText());
                            psr.setString(7, receiptNo1);
                            psr.setString(8, user);
                            psr.executeUpdate();

                            java.sql.Statement ps1q = connectDB.createStatement();
                            //java.sql.ResultSet rst1q = ps1q.executeQuery("SELECT receipt_no FROM ac_receipts_no WHERE reference = '" + receiptNo1 + "'");

                            java.sql.ResultSet rst1q = ps1q.executeQuery("SELECT LPAD(receipt_no::TEXT,8,'0'::TEXT) FROM ac_receipts_no WHERE reference = '" + receiptNo1 + "'");
                            while (rst1q.next()) {
                                receiptNo2 = rst1q.getObject(1).toString();
                            }
                            java.sql.PreparedStatement pstmt112 = connectDB.prepareStatement("UPDATE ac_cash_collection SET receipt_no = '" + receiptNo2 + "' WHERE receipt_no = '" + receiptNo1 + "'");
                            pstmt112.executeUpdate();
                            java.sql.PreparedStatement pstmt112z = connectDB.prepareStatement("UPDATE hp_patient_card SET requisition_no = '" + receiptNo2 + "' WHERE requisition_no = '" + receiptNo1 + "'");
                            pstmt112z.executeUpdate();

                            receiptNumberTxt.setText(receiptNo2);

                            java.sql.Statement ps11 = connectDB.createStatement();
                            java.sql.ResultSet rst11 = ps11.executeQuery("select nodetails from receipt_pref");
                            while (rst11.next()) {
                                nodetails = rst11.getObject(1).toString();
                            }
                            java.sql.Statement ps112 = connectDB.createStatement();
                            java.sql.ResultSet rst112 = ps112.executeQuery("select rct_format from receipt_pref");
                            while (rst112.next()) {
                                rct = rst112.getObject(1).toString();
                            }


                            /*
                                 * java.sql.Statement ps1 =
                                 * connectDB.createStatement(); java.sql.ResultSet
                                 * rst1 = ps1.executeQuery("select
                                 * currval('receipt_no_seq')"); while (rst1.next()){
                             */
                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("");

                            receiptNo1 = receiptNumberTxt.getText();
                            // }
                            //            CashReceiptsPdf policy = new CashReceiptsPdf();
                            //            policy.CashReceiptsPdf(connectDB, jTextField91.getText().toUpperCase(),jTextField311.getText(),receiptNo1,this.jComboBox41.getSelectedItem().toString(),jTextField121.getText(),jTextField131.getText());

                            String clientReceipt = null;

                            java.sql.PreparedStatement pstmtReprint = connectDB.prepareStatement("SELECT dealer FROM ac_cash_collection WHERE receipt_no = ?");

                            pstmtReprint.setString(1, receiptNumberTxt.getText());
                            java.sql.ResultSet rsetReprint = pstmtReprint.executeQuery();

                            while (rsetReprint.next()) {
                                clientReceipt = rsetReprint.getString(1);
                            }

                            //////  searchButtonClicked2();
                            //  com.afrisoftech.txtreports.GokIpReceiptsTxt policy = new com.afrisoftech.txtreports.GokIpReceiptsTxt(connectDB, clientReceipt, jTextField17.getText(), receiptNo1, this.jComboBox411.getSelectedItem().toString(), "0.00", "0.00", jTextField81.getText());
//                            java.sql.Statement ps112 = connectDB.createStatement();
//                            java.sql.ResultSet rst112 = ps112.executeQuery("select rct_format from receipt_pref");
                            while (rst112.next()) {
                                rct = rst112.getObject(1).toString();
                            }
                            if (rct.equalsIgnoreCase("Pdf")) {
                                com.afrisoftech.reports.ReceiptsPdf policy1 = new com.afrisoftech.reports.ReceiptsPdf();
                                policy1.ReceiptsPdf(connectDB, receiptNo2);
                            } else {
                                com.afrisoftech.txtreports.GokIpReceiptsTxt policy = new com.afrisoftech.txtreports.GokIpReceiptsTxt(connectDB, clientReceipt, amountPaidTxt.getText(), receiptNo1, this.paymentModeCmbx.getSelectedItem().toString(), "0.00", "0.00", shiftNumberTxt.getText());

                                //                             com.afrisoftech.txtreports.GokReceiptsTxt policy = new com.afrisoftech.txtreports.GokReceiptsTxt(connectDB, jTextField91.getText(), jTextField311.getText(), receiptNo2, this.jComboBox41.getSelectedItem().toString(), jTextField121.getText(), jTextField131.getText(), jTextField811.getText());
                            }

                            //Discharge and check out patient if "Discharge" button is selected
//                            if (dischargeRdbtn.isSelected()) {
//                                java.sql.PreparedStatement pstmt12d = connectDB.prepareStatement("UPDATE hp_admission SET check_out = true,discharged_by = current_user WHERE patient_no = '" + this.patientNumberTxt.getText() + "' AND visit_id = '" + visitIDTxt.getText() + "'");
//                                pstmt12d.executeUpdate();
//                            }
                            java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("UPDATE mobile_payments SET mobilepay_alert = true WHERE mobile_tx_id = ?");
                            pstmt2.setString(1, com.afrisoftech.hospital.HospitalMain.mobileTxID);
                            pstmt2.executeUpdate();

                            pstmt2.close();

                            connectDB.commit();
                            connectDB.setAutoCommit(true);

                            this.jButton1111.setEnabled(false);

                            dischargeRdbtn.setSelected(true);
                            javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                            for (int k = 0; k < billTable.getRowCount(); k++) {
                                for (int r = 0; r < billTable.getColumnCount(); r++) {
                                    billTable.setValueAt(null, k, r);
                                }
                            }
                        }
                    }
                }
                //}

            } catch (java.sql.SQLException sq) {
                sq.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage());
                try {
                    connectDB.rollback(registerSavePoint);
                } catch (java.sql.SQLException sql) {
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

        } catch (java.lang.Exception ex) {
            System.out.println(ex.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }
        //    }

        // Add your handling code here:
    }//GEN-LAST:event_jButton1111ActionPerformed

    private void paymentModeCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentModeCmbxActionPerformed
        try {
            java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rset1 = stmt1.executeQuery("select gl_account from ac_cash_points where description  ='" + paymentModeCmbx.getSelectedItem() + "'");
            while (rset1.next()) {
                invoiceNumberTxt.setText(rset1.getObject(1).toString());
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();

        }

        if (paymentModeCmbx.getSelectedItem().equals("Credit Card")) {
            //   jPanel11.setVisible(true);
            jPanel321.setVisible(false);
            jPanel3111.setVisible(true);
            //   jPanel4.setVisible(false);
            jTextField2121.setText("");
            jTextField5211.setText("");
            jTextField4111.setText("");

        } else {
            if (paymentModeCmbx.getSelectedItem().equals("Cheque")) {
                jPanel321.setVisible(true);
                //                jPanel11.setVisible(true);
                jPanel3111.setVisible(false);
                jTextField221.setText("");
                jTextField512.setText("");
                jTextField421.setText("");
                // jPanel321.setVisible(false);
            } else {
                // jPanel4.setVisible(false);
                //                jPanel11.setVisible(true);
                jPanel3111.setVisible(false);
                jPanel321.setVisible(false);
                jTextField221.setText("");
                jTextField512.setText("");
                this.jTextField421.setText("");
                jTextField2121.setText("");
                //                jTextField5511.setText("");
                jTextField4111.setText("");
            }
        }
        if (paymentModeCmbx.getSelectedItem().toString().contains("Pesa")) {
            javax.swing.JOptionPane.showMessageDialog(this, "You must enter a valid client Mpesa telephone number in the format : 254-7xx-xxxxxx on the Bill Payer Telephone No field");
        }
// Add your handling code here:
    }//GEN-LAST:event_paymentModeCmbxActionPerformed

    private void billTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_billTableKeyReleased
        if (billTable.getValueAt(billTable.getSelectedRow(), 1) != null) {
            if (billTable.getModel().getValueAt(billTable.getSelectedRow(), 1) != null) {
                if (billTable.getSelectedColumn() == billTable.getSelectedColumn()) {
                    float qty = java.lang.Float.parseFloat(billTable.getValueAt(billTable.getSelectedRow(), 1).toString());
                    float deposit = java.lang.Float.parseFloat(this.totalDepositsTxt.getText());

                    float gross = java.lang.Float.parseFloat(billTable.getValueAt(billTable.getSelectedRow(), 2).toString());
                    gross = gross * qty;
                    float Disc = java.lang.Float.parseFloat(billTable.getValueAt(billTable.getSelectedRow(), 3).toString());

                    float total = gross - java.lang.Math.round((gross) * Disc / 100);
                    float totalDisc = java.lang.Math.round((gross) * Disc / 100);
                    billTable.setValueAt(totalDisc, billTable.getSelectedRow(), 3);
                    billTable.setValueAt(gross, billTable.getSelectedRow(), 5);
                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 5);
                    double totalSumDisc = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 4);
                    // jTextField17.setText(java.lang.String.valueOf(totalSumDisc));
                    // jTextField17.setText(java.lang.String.valueOf(totalSum - totalSumDisc));

                }
            }
        } else {
            if (billTable.getValueAt(billTable.getSelectedRow(), 1) != null) {
                if (billTable.getModel().getValueAt(billTable.getSelectedRow(), 1) != null) {
                    if (billTable.getSelectedColumn() == billTable.getSelectedColumn()) {
                        float qty = java.lang.Float.parseFloat(billTable.getValueAt(billTable.getSelectedRow(), 1).toString());
                        float deposit = java.lang.Float.parseFloat(this.totalDepositsTxt.getText());

                        float gross = java.lang.Float.parseFloat(billTable.getValueAt(billTable.getSelectedRow(), 2).toString());
                        float Disc = java.lang.Float.parseFloat(billTable.getValueAt(billTable.getSelectedRow(), 4).toString());
                        float total = gross - Disc;
                        float totalDisc = Disc;
                        billTable.setValueAt(totalDisc, billTable.getSelectedRow(), 4);
                        billTable.setValueAt(gross, billTable.getSelectedRow(), 4);
                        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 5);
                        double totalSumDisc = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 4);
                        //jTextField17.setText(java.lang.String.valueOf(totalSumDisc));
                        //jTextField17.setText(java.lang.String.valueOf(totalSum - totalSumDisc));

                    }
                }
            }
        }
        // TODO add your handling code here:
}//GEN-LAST:event_billTableKeyReleased

    private void billTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_billTableMouseClicked
        if (billTable.getSelectedColumn() == 0) {

            this.cmbox221MouseClicked();
        } else {
            if (billTable.getSelectedColumn() == 7) {
                double orig = java.lang.Double.parseDouble(presentedAmountTxt.getText().toString());
                double alloc = java.lang.Double.parseDouble(amountPaidTxt.getText().toString());

                double balance = orig - alloc;

                if (Boolean.valueOf(billTable.getValueAt(billTable.getSelectedRow(), 7).toString()) == java.lang.Boolean.TRUE) {
                    if (balance == 0.00 || balance < 0) {

                        javax.swing.JOptionPane.showMessageDialog(this, "Amount to allocate has been EXHAUSTED !", "Information Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        float qty = java.lang.Float.parseFloat(billTable.getValueAt(billTable.getSelectedRow(), 1).toString());
                        float deposit = java.lang.Float.parseFloat(this.totalDepositsTxt.getText());

                        float gross = java.lang.Float.parseFloat(billTable.getValueAt(billTable.getSelectedRow(), 5).toString());
                        //gross = gross * qty;
                        if (gross < balance) {
                            billTable.setValueAt(gross, billTable.getSelectedRow(), 6);
                        } else {
                            billTable.setValueAt(balance, billTable.getSelectedRow(), 6);
                        }

                        // this.tableModelTableChanged();
                        if (billTable.isEditing()) {
                            billTable.getCellEditor().stopCellEditing();
                        }

                        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 6);
                        this.amountPaidTxt.setText(java.lang.String.valueOf(totalSum));
                        // double amts = java.lang.Double.parseDouble(this.jTextField1.getText());
                        // this.jTextField2.setText(java.lang.String.valueOf(amts - totalSum));
                    }
                } else {
                    billTable.setValueAt(0, billTable.getSelectedRow(), 6);
                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 6);
                    this.amountPaidTxt.setText(java.lang.String.valueOf(totalSum));
                }
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_billTableMouseClicked
    private void cmbox221MouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane11.getLocationOnScreen();
        billingItemsSearchDialog.setSize(700, 200);
        billingItemsSearchDialog.setLocation(point);
        billingItemsSearchDialog.setVisible(true);

    }
    private void jButton61ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton61ActionPerformed
        if (billTable.isRowSelected(billTable.getSelectedRow())) {
            int rows2Delete = billTable.getSelectedRowCount();

            int[] selectedRows = billTable.getSelectedRows();

            if (rows2Delete < 1) {

                java.awt.Toolkit.getDefaultToolkit().beep();

                javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

            } else {

                if (rows2Delete > 1) {

                    for (int i = 0; i < selectedRows.length; i++) {

                        javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) billTable.getModel();

                        defTableModel.removeRow(selectedRows[i]);

                    }

                } else {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) billTable.getModel();

                    defTableModel.removeRow(billTable.getSelectedRow());

                    //calculateTotals();
                }
            }
        } else {
        }

        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 5);
        double totalSumDisc = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 4);
        // jTextField17.setText(java.lang.String.valueOf(totalSumDisc));
        amountPaidTxt.setText(java.lang.String.valueOf(totalSum - totalSumDisc));

        // double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable11, 3);
        //  jTextField31.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
        //jTextField31.setText(java.lang.String.valueOf(totalSum));
        //  jTextField18.setText(java.lang.String.valueOf(totalSum));
        // this.tableModelTableChanged();// Add your handling code here:
}//GEN-LAST:event_jButton61ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        java.sql.Savepoint registerSavePoint = null;
        try {
            connectDB.setAutoCommit(false);
            registerSavePoint = connectDB.setSavepoint("registration");
        } catch (java.sql.SQLException ex) {
            ex.printStackTrace();
        }
        try {
            int k = 0;
            java.sql.Statement stmt111x = connectDB.createStatement();
            java.sql.ResultSet rsetTable11x = stmt111x.executeQuery("SELECT count(annual_no) FROM hp_mortuary WHERE annual_no = '" + patientNumberTxt.getText() + "' AND discharged = false");

            while (rsetTable11x.next()) {
                k = rsetTable11x.getInt(1);
            }
            if (k > 0) {
                double TotalBill = java.lang.Double.parseDouble(billBalanceTxt.getText());
                double AmountPaid = java.lang.Double.parseDouble(amountPaidTxt.getText());
                if (TotalBill <= AmountPaid) {
                    java.sql.PreparedStatement pstmt12 = connectDB.prepareStatement("UPDATE hp_mortuary SET discharged = true,discharge_date = '" + datePicker2.getDate() + "'  WHERE annual_no = '" + this.patientNumberTxt.getText() + "'");
                    pstmt12.executeUpdate();
                }
            } else {
                double TotalBill = java.lang.Double.parseDouble(billBalanceTxt.getText());
                double AmountPaid = java.lang.Double.parseDouble(amountPaidTxt.getText());
                if (TotalBill <= AmountPaid) {
                    String invoiceNo = null;
                    String disno = null;
                    String ward = null;
                    String bed_no = null;
                    String user = null;
                    java.sql.Date admDate = null;
                    java.sql.Statement stm12z = connectDB.createStatement();
                    java.sql.ResultSet rse12z = stm12z.executeQuery("select current_user");
                    while (rse12z.next()) {
                        user = rse12z.getObject(1).toString();
                    }
                    java.sql.Statement pss1 = connectDB.createStatement();
                    java.sql.ResultSet rss1 = pss1.executeQuery("select 'I'||(nextval('ipinvoice_no_seq'))");
                    while (rss1.next()) {
                        invoiceNo = rss1.getObject(1).toString();
                    }

                    java.sql.Statement ps = connectDB.createStatement();
                    java.sql.ResultSet rst = ps.executeQuery("select nextval('discharge_no_seq'),current_user");
                    while (rst.next()) {
                        rst.getObject(1).toString();

                        disno = rst.getObject(1).toString();
                        //UserName = rst.getObject(2).toString();
                    }

                    java.sql.Statement pse = connectDB.createStatement();
                    java.sql.ResultSet rste = pse.executeQuery("SELECT ward,bed_no,date_admitted FROM hp_admission WHERE visit_id = '" + visitIDTxt.getText() + "'");
                    while (rste.next()) {
                        ward = rste.getObject(1).toString();
                        bed_no = rste.getObject(2).toString();
                        admDate = rste.getDate(3);
                        //UserName = rst.getObject(2).toString();
                    }
                    // java.sql.Statement pst63x = connectDB.createStatement();
                    java.sql.PreparedStatement pst63x = connectDB.prepareStatement("INSERT INTO hp_patient_discharge VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                    pst63x.setString(1, patientNumberTxt.getText());
                    pst63x.setString(2, patientNameTxt.getText());
                    pst63x.setString(3, "");
                    pst63x.setString(4, ward);
                    pst63x.setString(5, "");
                    pst63x.setString(6, bed_no);
                    pst63x.setDate(7, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                    pst63x.setDate(8, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                    pst63x.setString(9, "");
                    pst63x.setString(10, "");
                    pst63x.setString(11, "");
                    pst63x.setDouble(12, java.lang.Double.valueOf(amountPaidTxt.getText()));
                    pst63x.setString(13, "");
                    pst63x.setString(14, invoiceNo);
                    pst63x.setString(15, disno);
                    pst63x.setDate(16, admDate);
                    pst63x.setTime(17, new java.sql.Time(java.util.Calendar.getInstance().getTimeInMillis()));
                    pst63x.setString(18, user);
                    pst63x.executeUpdate();

                    java.sql.PreparedStatement pstmt12 = connectDB.prepareStatement("UPDATE hp_admission SET invoice_no = '" + invoiceNo + "',balance = '" + amountPaidTxt.getText() + "',discharge = true,check_out = true,discharge_date = '" + datePicker2.getDate() + "'  WHERE patient_no = '" + this.patientNumberTxt.getText() + "' AND visit_id = '" + visitIDTxt.getText() + "'");
                    pstmt12.executeUpdate();

                    java.sql.PreparedStatement pstmt21 = connectDB.prepareStatement("UPDATE hp_patient_card set paid = true,invoice_no = '" + invoiceNo + "' WHERE patient_no = '" + patientNumberTxt.getText() + "' AND visit_id = '" + visitIDTxt.getText() + "' AND invoice_no NOT ILIKE 'I%'");
                    pstmt21.executeUpdate();

                    java.sql.PreparedStatement pstmt21x = connectDB.prepareStatement("UPDATE ac_doctors_ledger set pat_inv = '" + invoiceNo + "',paid = true WHERE patient_no = '" + patientNumberTxt.getText() + "' AND input_date between '" + admDate + "' AND '" + datePicker2.getDate() + "'");
                    pstmt21x.executeUpdate();
                    invoiceNumberTxt.setText(invoiceNo);
                } else {
                    javax.swing.JOptionPane.showMessageDialog(this, "Bill not Finalized Because Bill is higher than amount paid".toUpperCase(), "Warning Message", javax.swing.JOptionPane.WARNING_MESSAGE);

                }
            }
        } catch (java.sql.SQLException sq) {
            sq.printStackTrace();
            javax.swing.JOptionPane.showConfirmDialog(this, sq.getMessage());
            try {
                connectDB.rollback(registerSavePoint);
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }
        jSearchDialog2.dispose();       // TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        jSearchDialog2.dispose();   // TODO add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed

    private void depositRdbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_depositRdbtnActionPerformed
        /*
         * com.afrisoftech.accounting.InpatientDepositIntfr other = new
         * com.afrisoftech.accounting.InpatientDepositIntfr(connectDB, pConnDB);
         * //this.getParent().add(other,
         * javax.swing.JLayeredPane.DEFAULT_LAYER);
         * com.afrisoftech.hospital.HospitalMain.saccopn.add(other,
         * javax.swing.JLayeredPane.DEFAULT_LAYER);
         *
         * try { other.setSelected(true); } catch
         * (java.beans.PropertyVetoException pvt) { } other.setVisible(true);
         */
        // TODO add your handling code here:
    }//GEN-LAST:event_depositRdbtnActionPerformed

    private void amountPaidTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amountPaidTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_amountPaidTxtActionPerformed

    private void tickAllChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tickAllChkbxActionPerformed

        double orig = java.lang.Double.parseDouble(billBalanceTxt.getText().toString());
        double alloc = java.lang.Double.parseDouble(presentedAmountTxt.getText().toString());

        double balance = orig - alloc;

        if (orig > alloc) {

            javax.swing.JOptionPane.showMessageDialog(this, "Amount to allocate is less than the \n balance hence un tick all and allocate one by one !", "Information Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } else {
            for (int k = 0; k < billTable.getColumnCount(); k++) {

                for (int r = 0; r < billTable.getRowCount(); r++) {
                    if (billTable.getValueAt(r, 5) != null) {
                        float gross = java.lang.Float.parseFloat(billTable.getValueAt(r, 5).toString());
                        if (gross >= 0 || gross < 0) {

                            float qty = java.lang.Float.parseFloat(billTable.getValueAt(r, 1).toString());
                            float deposit = java.lang.Float.parseFloat(this.totalDepositsTxt.getText());

                            // float gross = java.lang.Float.parseFloat(jTable11.getValueAt(k, 5).toString());
                            //gross = gross * qty;
                            // if (gross < balance) {
                            billTable.setValueAt(true, r, 7);
                            billTable.setValueAt(gross, r, 6);
                            // } else {
                            //     jTable11.setValueAt(balance, k, 6);
                            // }

                            // this.tableModelTableChanged();
                            if (billTable.isEditing()) {
                                billTable.getCellEditor().stopCellEditing();
                            }

                            double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 6);
                            this.amountPaidTxt.setText(java.lang.String.valueOf(totalSum));
                            // double amts = java.lang.Double.parseDouble(this.jTextField1.getText());
                            // this.jTextField2.setText(java.lang.String.valueOf(amts - totalSum));
                        }
                    }
                }
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_tickAllChkbxActionPerformed

    private void untickAllChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_untickAllChkbxActionPerformed
        for (int k = 0; k < billTable.getColumnCount(); k++) {

            for (int r = 0; r < billTable.getRowCount(); r++) {
                // if (jTable11.getValueAt(r, 5) != null) {

                billTable.setValueAt(false, r, 7);
                billTable.setValueAt(null, r, 6);
                // } else {
                //     jTable11.setValueAt(balance, k, 6);
                // }

                // this.tableModelTableChanged();
                if (billTable.isEditing()) {
                    billTable.getCellEditor().stopCellEditing();
                }

                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 6);
                this.amountPaidTxt.setText(java.lang.String.valueOf(0));
                // double amts = java.lang.Double.parseDouble(this.jTextField1.getText());
                // this.jTextField2.setText(java.lang.String.valueOf(amts - totalSum));
                //}
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_untickAllChkbxActionPerformed

    private void patientSearchTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientSearchTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientSearchTxtActionPerformed

    private void jTextField112CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField112CaretUpdate

        if (jTextField112.getCaretPosition() < 1) {

            System.out.println("Nothing");
        } else {
            if (descriptionChkbx.isSelected()) {
                // try {
                jSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select service_type,rate::numeric,gl_account,code FROM pb_operating_parameters WHERE service_type ILIKE '%" + jTextField112.getText() + "%' order by service_type"));

                jSearchScrollPane1.setViewportView(jSearchTable1);
                System.out.println("Cannot sort out");
            } else {
                jSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select service_type,rate::numeric,gl_account,code FROM pb_operating_parameters WHERE code ILIKE '" + jTextField112.getText() + "%' order by service_type"));

                jSearchScrollPane1.setViewportView(jSearchTable1);
                System.out.println("Cannot sort out");
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_jTextField112CaretUpdate

    private void jSearchTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable1MouseClicked
        billTable.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 0), billTable.getSelectedRow(), 0);
        billTable.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 1), billTable.getSelectedRow(), 2);
        billTable.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 2), billTable.getSelectedRow(), 8);
        billTable.setValueAt(0.00, billTable.getSelectedRow(), 3);
        billTable.setValueAt(0.00, billTable.getSelectedRow(), 4);
        billTable.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 1), billTable.getSelectedRow(), 5);
        billTable.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 3), billTable.getSelectedRow(), 9);
        /*if(jTable11.getValueAt(jTable11.getSelectedRow(),0).toString().startsWith("Depos")){

         }*/
        billingItemsSearchDialog.dispose();         // Add your handling code here:
    }//GEN-LAST:event_jSearchTable1MouseClicked

    private void jSearchTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jSearchTable1KeyReleased
        if (jSearchTable1.editCellAt(jSearchTable1.getSelectedRow(), jSearchTable1.getSelectedColumn())) {
            javax.swing.JOptionPane.showMessageDialog(this, "Be warned  you cannot change data".toUpperCase(), "Warning Message", javax.swing.JOptionPane.WARNING_MESSAGE);
            for (int k = 0; k < jSearchTable1.getRowCount(); k++) {
                for (int r = 0; r < jSearchTable1.getColumnCount(); r++) {
                    jSearchTable1.setValueAt(null, k, r);
                }
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jSearchTable1KeyReleased

    private void jButton91ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton91ActionPerformed
        this.billingItemsSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton91ActionPerformed

    private void stkPushBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stkPushBtnActionPerformed
        com.afrisoftech.hospital.HospitalMain.mobileTxType = "IPD";
        com.afrisoftech.hospital.HospitalMain.patientID = patientNumberTxt.getText();
        com.afrisoftech.hospital.HospitalMain.patientName = patientNameTxt.getText();
        com.afrisoftech.hospital.HospitalMain.discreetReceipt = true;
        String payerTelephoneNumber = null;
        System.out.println("Payer Mobile Telephone Number : [" + payerMobileTelephoneNumberTxt.getText().replace("-", "").length() + "]");

        if (paymentModeCmbx.getSelectedItem().toString().contains("Pesa") && payerMobileTelephoneNumberTxt.getText().replace("-", "").length() == 12) {
            payerTelephoneNumber = payerMobileTelephoneNumberTxt.getText().replace("-", "");

            if (paymentModeCmbx.getSelectedItem().toString().contains("Pesa") && payerMobileTelephoneNumberTxt.getText().replace("-", "").length() == 12) {
                //STK Push for mobile payment
                javax.swing.JOptionPane.showMessageDialog(this, "Insert Successful.Bill Number. " + visitIDTxt.getText() + "", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                if (paymentModeCmbx.getSelectedItem().toString().contains("Pesa") && payerMobileTelephoneNumberTxt.getText().replace("-", "").length() == 12) {
                    boolean checkoutReturn = com.afrisoftech.funsoft.mobilepay.MobilePayAPI.sendProcessRequest(com.afrisoftech.funsoft.mobilepay.Base64Encoding.encodetoBase64String("Si1Y0dik7IoBEFC9buVTGBBdM0A9mQLw:DlPLOhUtuwdAjzDB"), visitIDTxt.getText(), payerTelephoneNumber, String.valueOf(Math.round(Double.parseDouble(amountPaidTxt.getText()))), com.afrisoftech.hospital.HospitalMain.payBillNumber);
                    if (checkoutReturn) {
                        try {
                            System.out.println("Processing patient card data : [" + checkoutRequestID + "]");
                            for (int i = 0; i < billTable.getRowCount(); i++) {
                                if (billTable.getValueAt(i, 7) != null) {
                                    if (Boolean.parseBoolean(billTable.getValueAt(i, 7).toString())) {
                                        java.sql.PreparedStatement pstmtCheckout = connectDB.prepareStatement("UPDATE hp_patient_card SET checkout_request_id = ? WHERE visit_id = ? AND reference = ?");
                                        pstmtCheckout.setString(1, checkoutRequestID);
                                        pstmtCheckout.setString(2, visitIDTxt.getText());
                                        pstmtCheckout.setString(3, billTable.getValueAt(i, 10).toString());
                                        pstmtCheckout.executeUpdate();
                                        pstmtCheckout.close();
                                    }
                                }
                            }
                        } catch (SQLException ex) {
                            ex.printStackTrace();             //Exceptions.printStackTrace(ex);
                            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
                        }
                    }
                }
                //   com.afrisoftech.funsoft.mobilepay.MobilePayAPI.sendProcessRequest(com.afrisoftech.funsoft.mobilepay.Base64Encoding.encodetoBase64String("Si1Y0dik7IoBEFC9buVTGBBdM0A9mQLw:DlPLOhUtuwdAjzDB"), visitIDTxt.getText(), payerTelephoneNumber, amountPaidTxt.getText());
            }
        } else if (paymentModeCmbx.getSelectedItem().toString().contains("Pesa") && payerMobileTelephoneNumberTxt.getText().replace("-", "").length() != 12) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please check telephone number! It should be formatted as follows : 2547xxxxxx");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_stkPushBtnActionPerformed

    private void paybillNumberCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paybillNumberCmbxActionPerformed
        if (paybillNumberCmbx.getSelectedItem() != null) {
            com.afrisoftech.hospital.HospitalMain.payBillNumber = paybillNumberCmbx.getSelectedItem().toString();
            try {
                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT DISTINCT merchant_id, consumer_secrets FROM ac_cash_points WHERE paybill_no = ?");

                pstmt.setString(1, paybillNumberCmbx.getSelectedItem().toString());
                java.sql.ResultSet rset = pstmt.executeQuery();
                while (rset.next()) {
                    try {
                        com.afrisoftech.hospital.HospitalMain.passKey = new String(rset.getBytes(1), "UTF-8");
                        com.afrisoftech.hospital.HospitalMain.oAuthKey = new String(rset.getBytes(2), "UTF-8");
                    } catch (UnsupportedEncodingException ex) {
                        ex.printStackTrace();
                        javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
                    }
                }
            } catch (SQLException ex) {
                javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
                ex.printStackTrace();
            }

        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "You MUST select a paybill in order to proceed");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_paybillNumberCmbxActionPerformed

    private void mobilepayTxNoTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_mobilepayTxNoTxtCaretUpdate
        // TODO add your handling code here:
    }//GEN-LAST:event_mobilepayTxNoTxtCaretUpdate

    private void mobilepayTxNoTxtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mobilepayTxNoTxtFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_mobilepayTxNoTxtFocusGained

    private void searchButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton2ActionPerformed

        com.afrisoftech.hospital.HospitalMain.mobileTxID = null;
        com.afrisoftech.hospital.HospitalMain.mobileTelephone = null;

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.mobilepayTxNoTxt.getLocationOnScreen();

        mobilepayTxSearchDialog.setSize(700, 200);

        mobilepayTxSearchDialog.setLocation(point);

        mobilepayTxSearchDialog.setVisible(true);

        // TODO add your handling code here:
    }//GEN-LAST:event_searchButton2ActionPerformed

    private void mobilepayTxSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_mobilepayTxSearchTxtCaretUpdate

        if (mobilepayTxSearchTxt.getText().length() > 5) {
            mobilepayTxtSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT transaction_time::time(0), mobile_tx_id, account_no, date, paid_amount, upper(dealer) as client_name, journal_no as paybill_no, mobilepay_alert as processed FROM public.mobile_payments WHERE mobilepay_alert = false AND account_no ilike '%" + mobilepayTxSearchTxt.getText() + "%' ORDER BY account_no"));
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_mobilepayTxSearchTxtCaretUpdate

    private void mobilepayTxtSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mobilepayTxtSearchTableMouseClicked

        mobilepayTxNoTxt.setText(mobilepayTxtSearchTable.getValueAt(mobilepayTxtSearchTable.getSelectedRow(), 1).toString());

        com.afrisoftech.hospital.HospitalMain.mobileTxID = mobilepayTxtSearchTable.getValueAt(mobilepayTxtSearchTable.getSelectedRow(), 1).toString();

        com.afrisoftech.hospital.HospitalMain.mobileTelephone = mobilepayTxtSearchTable.getValueAt(mobilepayTxtSearchTable.getSelectedRow(), 2).toString();

        payerMobileTelephoneNumberTxt.setText(mobilepayTxtSearchTable.getValueAt(mobilepayTxtSearchTable.getSelectedRow(), 2).toString());

        mobileTxAmountTxt.setText(mobilepayTxtSearchTable.getValueAt(mobilepayTxtSearchTable.getSelectedRow(), 4).toString());
        
        presentedAmountTxt.setText(mobilepayTxtSearchTable.getValueAt(mobilepayTxtSearchTable.getSelectedRow(), 4).toString());
        
        paymentModeCmbx.setSelectedItem("M-Pesa");
        
        paybillNumberCmbx.setSelectedItem(mobilepayTxtSearchTable.getValueAt(mobilepayTxtSearchTable.getSelectedRow(), 6).toString());
  
        mobilepayTxSearchDialog.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_mobilepayTxtSearchTableMouseClicked

    private void mobilepayTxtSearchTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mobilepayTxtSearchTableMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_mobilepayTxtSearchTableMouseEntered

    private void jButton522ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton522ActionPerformed

        mobilepayTxSearchDialog.dispose();

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton522ActionPerformed

    public java.lang.String getShiftNumber() {

        /*
         * try {
         *
         * java.sql.Statement stmtf = connectDB.createStatement();
         * java.sql.ResultSet rsetf = stmtf.executeQuery("select code from
         * ac_cash_points_setup where description = current_user"); while
         * (rsetf.next()) { cashPoint = rsetf.getObject(1).toString();
         *
         * }
         * } catch (java.sql.SQLException sqe) { sqe.printStackTrace();
         * System.out.println("select not successful"); }
         */
        try {

            java.sql.Statement stmt = connectDB.createStatement();

            // java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE cash_point = '"+System.getProperty("cashpoint")+"' AND user_name = current_user AND (status = 'Running' OR status = 'Suspended')");
            java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE user_name = current_user AND (status = 'Running' OR status = 'Suspended')");

            while (rset.next()) {

                shift_no = rset.getString(1);

            }

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        return shift_no;

    }

    public java.lang.String getCashPoint() {

        /*
         * try {
         *
         * java.sql.Statement stmtf = connectDB.createStatement();
         * java.sql.ResultSet rsetf = stmtf.executeQuery("select code from
         * ac_cash_points_setup where description = current_user"); while
         * (rsetf.next()) { cashPoint = rsetf.getObject(1).toString();
         *
         * }
         * } catch (java.sql.SQLException sqe) { sqe.printStackTrace();
         * System.out.println("select not successful"); }
         */
        try {

            java.sql.Statement stmt = connectDB.createStatement();

            // java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE cash_point = '"+System.getProperty("cashpoint")+"' AND user_name = current_user AND (status = 'Running' OR status = 'Suspended')");
            java.sql.ResultSet rset = stmt.executeQuery("SELECT cash_point FROM ac_shifts WHERE user_name = current_user AND (status = 'Running' OR status = 'Suspended')");

            while (rset.next()) {

                cash_no = rset.getString(1);

            }

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        return cash_no;

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amountPaidTxt;
    private javax.swing.JTextField billBalanceTxt;
    public static javax.swing.JTable billTable;
    private javax.swing.JDialog billingItemsSearchDialog;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JTextField cashPointTxt;
    private javax.swing.JCheckBox codeChkbx;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private com.afrisoftech.lib.DatePicker datePicker2;
    private javax.swing.JRadioButton depositRdbtn;
    private javax.swing.JCheckBox descriptionChkbx;
    private javax.swing.JRadioButton dischargeRdbtn;
    private javax.swing.JTextField invoiceNumberTxt;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    public static javax.swing.JButton jButton1111;
    private javax.swing.JButton jButton221;
    private javax.swing.JButton jButton3111;
    public javax.swing.JButton jButton4111;
    private javax.swing.JButton jButton422;
    private javax.swing.JButton jButton5111;
    private javax.swing.JButton jButton522;
    private javax.swing.JButton jButton61;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButton91;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel112;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel1211;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel131;
    private javax.swing.JLabel jLabel1321;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel2122;
    private javax.swing.JLabel jLabel2131;
    private javax.swing.JLabel jLabel221;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel3121;
    private javax.swing.JLabel jLabel3131;
    private javax.swing.JLabel jLabel321;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41121;
    private javax.swing.JLabel jLabel412;
    private javax.swing.JLabel jLabel4221;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel53111;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel711;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel911;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel1111;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel212;
    private javax.swing.JPanel jPanel3111;
    private javax.swing.JPanel jPanel321;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel511;
    private javax.swing.JPanel jPanel62;
    private javax.swing.JPanel jPanel711;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JDialog jSearchDialog2;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jSearchPanel1;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JPanel jSearchPanel22;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane1;
    private javax.swing.JScrollPane jSearchScrollPane22;
    private javax.swing.JTable jSearchTable1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator1111;
    private javax.swing.JTextField jTextField112;
    private javax.swing.JTextField jTextField152;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField2121;
    private javax.swing.JTextField jTextField221;
    private javax.swing.JTextField jTextField4111;
    private javax.swing.JTextField jTextField421;
    private javax.swing.JTextField jTextField512;
    private javax.swing.JTextField jTextField5211;
    private javax.swing.JTextField jTextField611;
    private javax.swing.JTextField mobileTxAmountTxt;
    private javax.swing.JTextField mobilepayTxNoTxt;
    private javax.swing.JDialog mobilepayTxSearchDialog;
    private javax.swing.JTextField mobilepayTxSearchTxt;
    private javax.swing.JTable mobilepayTxtSearchTable;
    private javax.swing.JCheckBox nameSearchChkbx;
    private javax.swing.JCheckBox numberSearchChkbx;
    private javax.swing.JTextField patientCategoryTxt;
    private javax.swing.JTextField patientNameTxt;
    private javax.swing.JTextField patientNumberTxt;
    private javax.swing.JDialog patientSearchDialog;
    private javax.swing.JTable patientSearchTable;
    private javax.swing.JTextField patientSearchTxt;
    private javax.swing.JTextField payBillNumberTxt;
    private javax.swing.JComboBox<String> paybillNumberCmbx;
    private javax.swing.JFormattedTextField payerMobileTelephoneNumberTxt;
    private javax.swing.JTextField payerTxt;
    private javax.swing.JComboBox paymentModeCmbx;
    private javax.swing.JTextField presentedAmountTxt;
    private javax.swing.JTextField receiptNumberTxt;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchButton2;
    private javax.swing.JTextField shiftNumberTxt;
    private javax.swing.JButton stkPushBtn;
    private javax.swing.JCheckBox tickAllChkbx;
    private javax.swing.JTextField totalBillTxt;
    private javax.swing.JTextField totalDepositsTxt;
    private javax.swing.JTextField unitNumberTxt;
    private javax.swing.JCheckBox untickAllChkbx;
    private javax.swing.JTextField visitIDTxt;
    private javax.swing.JTextField wardNameTxt;
    // End of variables declaration//GEN-END:variables
}
