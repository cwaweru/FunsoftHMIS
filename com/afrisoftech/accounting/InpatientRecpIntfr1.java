/*
 * countryintfr.java
 *
 * Created on August 13, 2002, 12:15 PM
 */
package com.afrisoftech.accounting;

/**
 *
 * @author  root
 */
public class InpatientRecpIntfr1 extends javax.swing.JInternalFrame {

    /** Creates new form countryintfr */
    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    String cashPoint = null;
    private java.lang.String shift_no = null;
    private java.lang.String cash_no = null;
    private String rnamex;
    private String rcodex;
    private double allocatedBalance = 0.00;

    public InpatientRecpIntfr1(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();
        System.out.println("Cashpoint : " + System.getProperty("cashpoint"));

        cashPointTxt.setText(System.getProperty("cashpoint"));//getCashPoint());
        shiftNumberTxt.setText(getShiftNumber());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField11 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton9 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jSearchDialog1 = new javax.swing.JDialog();
        jSearchPanel1 = new javax.swing.JPanel();
        jTextField112 = new javax.swing.JTextField();
        jSearchScrollPane1 = new javax.swing.JScrollPane();
        jSearchTable1 = new com.afrisoftech.dbadmin.JTable();
        jButton91 = new javax.swing.JButton();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jPanel711 = new javax.swing.JPanel();
        jLabel711 = new javax.swing.JLabel();
        jPanel1111 = new javax.swing.JPanel();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        saveReceiptJbtn = new javax.swing.JButton();
        clearDataJbtn = new javax.swing.JButton();
        jButton4111 = new javax.swing.JButton();
        jButton5111 = new javax.swing.JButton();
        jSeparator1111 = new javax.swing.JSeparator();
        chequeDetailsPanel = new javax.swing.JPanel();
        chequeDetailsPanel.setVisible(false);
        chequeNumberLbl = new javax.swing.JLabel();
        chequeNumberTxt = new javax.swing.JTextField();
        chequeDrawerLbl = new javax.swing.JLabel();
        chequeDrawerTxt = new javax.swing.JTextField();
        chequeBankerLbl = new javax.swing.JLabel();
        chequeBankerTxt = new javax.swing.JTextField();
        reprintReceiptJbtn = new javax.swing.JButton();
        removeRowJbtn = new javax.swing.JButton();
        creditCardDetailPane = new javax.swing.JPanel();
        creditCardDetailPane.setVisible(false);
        creditCardNumberLbl = new javax.swing.JLabel();
        creditCardNumberTxt = new javax.swing.JTextField();
        cardCompanyLbl = new javax.swing.JLabel();
        cardCompanyTxt = new javax.swing.JTextField();
        cardNameLbl = new javax.swing.JLabel();
        cardNameTxt = new javax.swing.JTextField();
        expiryDateLbl = new javax.swing.JLabel();
        cardExpiryDatePicker = new com.afrisoftech.lib.DatePicker();
        billDataPanel = new javax.swing.JPanel();
        patientNumberLbl = new javax.swing.JLabel();
        patientNameLbl = new javax.swing.JLabel();
        patientNameTxt = new javax.swing.JTextField();
        visitIDLbl = new javax.swing.JLabel();
        patientcategoryLbl = new javax.swing.JLabel();
        patientCategoryTxt = new javax.swing.JTextField();
        billBalanceTxt = new javax.swing.JTextField();
        jTextField152 = new javax.swing.JTextField();
        visitIDTxt = new javax.swing.JTextField();
        billBalanceLbl = new javax.swing.JLabel();
        cashPaidLbl = new javax.swing.JLabel();
        amountPaidTxt = new javax.swing.JTextField();
        patientNumberPanel = new javax.swing.JPanel();
        patientNumberTxt = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        patientNumberChbx = new javax.swing.JCheckBox();
        patientNameChbx = new javax.swing.JCheckBox();
        dischargeFinaliseBillRbtn = new javax.swing.JRadioButton();
        partPaymentRbtn = new javax.swing.JRadioButton();
        searchModeLbl = new javax.swing.JLabel();
        billPayerLbl = new javax.swing.JLabel();
        billPayerTxt = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        billTableJscrl = new javax.swing.JScrollPane();
        billTable = new com.afrisoftech.dbadmin.JTable();
        jPanel12 = new javax.swing.JPanel();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        paymentDetailsPanel = new javax.swing.JPanel();
        paymentModeLbl = new javax.swing.JLabel();
        paymentModeCmbx = new javax.swing.JComboBox();
        cashPointLbl = new javax.swing.JLabel();
        cashPointTxt = new javax.swing.JTextField();
        shiftNumberLbl = new javax.swing.JLabel();
        shiftNumberTxt = new javax.swing.JTextField();
        transactionDateLbl = new javax.swing.JLabel();
        transactionDateDpkr = new com.afrisoftech.lib.DatePicker();
        receiptnumberLbl = new javax.swing.JLabel();
        receiptNumberTxt = new javax.swing.JTextField();

        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jTextField11.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField11CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel.add(jTextField11, gridBagConstraints);

        jSearchTable.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton9.setText("Cancel");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        jSearchDialog1.setModal(true);
        jSearchDialog1.setUndecorated(true);
        jSearchDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel1.setLayout(new java.awt.GridBagLayout());

        jTextField112.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField112CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel1.add(jTextField112, gridBagConstraints);

        jSearchTable1.setShowHorizontalLines(false);
        jSearchTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable1MouseClicked(evt);
            }
        });
        jSearchScrollPane1.setViewportView(jSearchTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel1.add(jSearchScrollPane1, gridBagConstraints);

        jButton91.setText("Cancel");
        jButton91.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton91ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel1.add(jButton91, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog1.getContentPane().add(jSearchPanel1, gridBagConstraints);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("In Patient Receipts");
        setFrameIcon(null);
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jSeparator1, gridBagConstraints);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jLabel3, gridBagConstraints);

        jPanel711.setLayout(new java.awt.GridBagLayout());

        jLabel711.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel711.add(jLabel711, gridBagConstraints);

        jPanel1111.setLayout(new java.awt.GridBagLayout());

        saveReceiptJbtn.setBackground(new java.awt.Color(230, 230, 230));
        saveReceiptJbtn.setMnemonic('O');
        saveReceiptJbtn.setText("Save & Print Receipt");
        saveReceiptJbtn.setToolTipText("Click here enter data");
        saveReceiptJbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveReceiptJbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1111.add(saveReceiptJbtn, gridBagConstraints);

        clearDataJbtn.setMnemonic('l');
        clearDataJbtn.setText("Clear File Data");
        clearDataJbtn.setToolTipText("Click here to clear textfields");
        clearDataJbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearDataJbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1111.add(clearDataJbtn, gridBagConstraints);

        jButton4111.setMnemonic('C');
        jButton4111.setText("Close");
        jButton4111.setToolTipText("Click here to close window");
        jButton4111.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4111ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1111.add(jButton4111, gridBagConstraints);

        jButton5111.setMnemonic('h');
        jButton5111.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1111.add(jButton5111, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        jPanel1111.add(jSeparator1111, gridBagConstraints);

        chequeDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Cheque Details"));
        chequeDetailsPanel.setLayout(new java.awt.GridBagLayout());

        chequeNumberLbl.setText("Cheque No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        chequeDetailsPanel.add(chequeNumberLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        chequeDetailsPanel.add(chequeNumberTxt, gridBagConstraints);

        chequeDrawerLbl.setText("Drawer");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        chequeDetailsPanel.add(chequeDrawerLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        chequeDetailsPanel.add(chequeDrawerTxt, gridBagConstraints);

        chequeBankerLbl.setText("Drawer's Bank");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        chequeDetailsPanel.add(chequeBankerLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        chequeDetailsPanel.add(chequeBankerTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 1, 0, 1);
        jPanel1111.add(chequeDetailsPanel, gridBagConstraints);

        reprintReceiptJbtn.setMnemonic('p');
        reprintReceiptJbtn.setText("RePrint Receipt");
        reprintReceiptJbtn.setToolTipText("Click here to edit data");
        reprintReceiptJbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reprintReceiptJbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1111.add(reprintReceiptJbtn, gridBagConstraints);

        removeRowJbtn.setMnemonic('r');
        removeRowJbtn.setText("Remove Data Row");
        removeRowJbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRowJbtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1111.add(removeRowJbtn, gridBagConstraints);

        creditCardDetailPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Card Details"));
        creditCardDetailPane.setLayout(new java.awt.GridBagLayout());

        creditCardNumberLbl.setText("Card No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        creditCardDetailPane.add(creditCardNumberLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        creditCardDetailPane.add(creditCardNumberTxt, gridBagConstraints);

        cardCompanyLbl.setText("Card Company");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        creditCardDetailPane.add(cardCompanyLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        creditCardDetailPane.add(cardCompanyTxt, gridBagConstraints);

        cardNameLbl.setText("Card Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        creditCardDetailPane.add(cardNameLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        creditCardDetailPane.add(cardNameTxt, gridBagConstraints);

        expiryDateLbl.setText("Expiry Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        creditCardDetailPane.add(expiryDateLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
        creditCardDetailPane.add(cardExpiryDatePicker, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel1111.add(creditCardDetailPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        jPanel711.add(jPanel1111, gridBagConstraints);

        billDataPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Patient here"));
        billDataPanel.setLayout(new java.awt.GridBagLayout());

        patientNumberLbl.setText("Patient No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        billDataPanel.add(patientNumberLbl, gridBagConstraints);

        patientNameLbl.setText("Patient Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        billDataPanel.add(patientNameLbl, gridBagConstraints);

        patientNameTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        billDataPanel.add(patientNameTxt, gridBagConstraints);

        visitIDLbl.setText("Visit Id");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        billDataPanel.add(visitIDLbl, gridBagConstraints);

        patientcategoryLbl.setText("Patient Category");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        billDataPanel.add(patientcategoryLbl, gridBagConstraints);

        patientCategoryTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        billDataPanel.add(patientCategoryTxt, gridBagConstraints);

        billBalanceTxt.setEditable(false);
        billBalanceTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        billBalanceTxt.setText("0.00");
        billBalanceTxt.setMinimumSize(new java.awt.Dimension(100, 20));
        billBalanceTxt.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        billDataPanel.add(billBalanceTxt, gridBagConstraints);

        jTextField152.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField152.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        billDataPanel.add(jTextField152, gridBagConstraints);

        visitIDTxt.setEditable(false);
        visitIDTxt.setMinimumSize(new java.awt.Dimension(100, 20));
        visitIDTxt.setPreferredSize(new java.awt.Dimension(100, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        billDataPanel.add(visitIDTxt, gridBagConstraints);

        billBalanceLbl.setText("Bill Balance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        billDataPanel.add(billBalanceLbl, gridBagConstraints);

        cashPaidLbl.setText("Amount Paid");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        billDataPanel.add(cashPaidLbl, gridBagConstraints);

        amountPaidTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        amountPaidTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        billDataPanel.add(amountPaidTxt, gridBagConstraints);

        patientNumberPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        patientNumberPanel.setMinimumSize(new java.awt.Dimension(150, 57));
        patientNumberPanel.setPreferredSize(new java.awt.Dimension(100, 24));
        patientNumberPanel.setLayout(new java.awt.GridBagLayout());

        patientNumberTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientNumberPanel.add(patientNumberTxt, gridBagConstraints);

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton.setToolTipText("Search");
        searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        patientNumberPanel.add(searchButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        billDataPanel.add(patientNumberPanel, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(patientNumberChbx);
        patientNumberChbx.setSelected(true);
        patientNumberChbx.setText("Patient No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(patientNumberChbx, gridBagConstraints);

        buttonGroup1.add(patientNameChbx);
        patientNameChbx.setText("Patient Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(patientNameChbx, gridBagConstraints);

        buttonGroup2.add(dischargeFinaliseBillRbtn);
        dischargeFinaliseBillRbtn.setText("Discharge & Finalise Invoice");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(dischargeFinaliseBillRbtn, gridBagConstraints);

        buttonGroup2.add(partPaymentRbtn);
        partPaymentRbtn.setSelected(true);
        partPaymentRbtn.setText("Part Payment/Deposit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(partPaymentRbtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        billDataPanel.add(jPanel1, gridBagConstraints);

        searchModeLbl.setText("Search By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        billDataPanel.add(searchModeLbl, gridBagConstraints);

        billPayerLbl.setText("Name of person/Entity paying bill");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        billDataPanel.add(billPayerLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        billDataPanel.add(billPayerTxt, gridBagConstraints);

        jTextField2.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField2.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        billDataPanel.add(jTextField2, gridBagConstraints);

        billTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", null, null, null, null, null, null, new Boolean(false), null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Description", "Qty", "Gross", "Discount", "Disc. Amt", "Net Amt.", "Gl Account", "Paid ?", "Paid Amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        billTable.setShowHorizontalLines(false);
        /*       cmbox2 = new javax.swing.JComboBox();

        try {

            crset1.setConnectionSource(pConnDB);
            crset1.execute("select description from st_stock_item");

            cmbox2.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset1, "description", null, null,null));

            javax.swing.table.TableColumn seditor = this.jTable1.getColumn("Product");

            seditor.setCellEditor(new javax.swing.DefaultCellEditor(cmbox2));

            cmbox2.addActionListener(new java.awt.event.ActionListener() {

                public void actionPerformed(java.awt.event.ActionEvent evt) {

                    cmbox2ActionPerformed(evt);
                }
            });
        } catch(java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        javax.swing.table.TableColumn column1 = null;
        for (int i = 0; i < 4; i++) {
            column1 = jTable1.getColumnModel().getColumn(i);
            if (i == 0) {

                column1.setPreferredWidth(200); //sport column is bigger
            } else {
                if (i == 1) {
                    column1.setPreferredWidth(200);
                } else {
                    if (i == 2) {
                        column1.setPreferredWidth(100);
                    }  else
                    column1.setPreferredWidth(100);

                }
            }
        }
        */
        billTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                billTableMouseClicked(evt);
            }
        });
        billTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                billTableKeyReleased(evt);
            }
        });
        billTableJscrl.setViewportView(billTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 50.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        billDataPanel.add(billTableJscrl, gridBagConstraints);

        jPanel12.setBackground(new java.awt.Color(204, 255, 204));
        jPanel12.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel12.setLayout(new java.awt.GridBagLayout());

        jCheckBox4.setBackground(new java.awt.Color(204, 255, 204));
        buttonGroup3.add(jCheckBox4);
        jCheckBox4.setSelected(true);
        jCheckBox4.setText("Item Code");
        jCheckBox4.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jPanel12.add(jCheckBox4, new java.awt.GridBagConstraints());

        jCheckBox5.setBackground(new java.awt.Color(204, 255, 204));
        buttonGroup3.add(jCheckBox5);
        jCheckBox5.setText("Description");
        jCheckBox5.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jPanel12.add(jCheckBox5, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        billDataPanel.add(jPanel12, gridBagConstraints);

        paymentDetailsPanel.setLayout(new java.awt.GridBagLayout());

        paymentModeLbl.setText("Payment Mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        paymentDetailsPanel.add(paymentModeLbl, gridBagConstraints);

        paymentModeCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select DISTINCT initcap(payment_mode) as payment_mode from pb_paymentmodes order by payment_mode"));
        paymentModeCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentModeCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        paymentDetailsPanel.add(paymentModeCmbx, gridBagConstraints);

        cashPointLbl.setText("Cash Point");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        paymentDetailsPanel.add(cashPointLbl, gridBagConstraints);

        cashPointTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.5;
        gridBagConstraints.weighty = 1.0;
        paymentDetailsPanel.add(cashPointTxt, gridBagConstraints);

        shiftNumberLbl.setText("Shift No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        paymentDetailsPanel.add(shiftNumberLbl, gridBagConstraints);

        shiftNumberTxt.setEditable(false);
        shiftNumberTxt.setMinimumSize(new java.awt.Dimension(60, 20));
        shiftNumberTxt.setPreferredSize(new java.awt.Dimension(60, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        paymentDetailsPanel.add(shiftNumberTxt, gridBagConstraints);

        transactionDateLbl.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        paymentDetailsPanel.add(transactionDateLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 40);
        paymentDetailsPanel.add(transactionDateDpkr, gridBagConstraints);

        receiptnumberLbl.setText("Rcpt. No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        paymentDetailsPanel.add(receiptnumberLbl, gridBagConstraints);

        receiptNumberTxt.setEditable(false);
        receiptNumberTxt.setFont(new java.awt.Font("Dialog", 0, 14));
        receiptNumberTxt.setForeground(new java.awt.Color(251, 9, 102));
        receiptNumberTxt.setMinimumSize(new java.awt.Dimension(60, 25));
        receiptNumberTxt.setPreferredSize(new java.awt.Dimension(60, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        paymentDetailsPanel.add(receiptNumberTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        billDataPanel.add(paymentDetailsPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 40.0;
        jPanel711.add(billDataPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel711, gridBagConstraints);

        setBounds(0, 0, 889, 517);
    }// </editor-fold>//GEN-END:initComponents

    private void reprintReceiptJbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reprintReceiptJbtnActionPerformed
        String receiptNo1 = null;
        String rct = null;
        try {
            connectDB.setAutoCommit(false);



            /*java.sql.Statement ps1 = connectDB.createStatement();
            java.sql.ResultSet rst1 = ps1.executeQuery("select currval('receipt_no_seq')");
            while (rst1.next()){*/
            receiptNo1 = receiptNumberTxt.getText();
            // }
            String nodetails = null;

            java.sql.Statement ps11 = connectDB.createStatement();
            java.sql.ResultSet rst11 = ps11.executeQuery("select nodetails from receipt_pref");
            while (rst11.next()) {
                nodetails = rst11.getObject(1).toString();
            }
            java.sql.Statement ps112 = connectDB.createStatement();
            java.sql.ResultSet rst112 = ps112.executeQuery("select rct_format from receipt_pref");
            while (rst112.next()) {
                rct = rst112.getObject(1).toString();
            }
            /*  if (nodetails.equalsIgnoreCase("NoDetails")) {

            com.afrisoftech.txtreports.NoDetReceiptsTxt policy = new com.afrisoftech.txtreports.NoDetReceiptsTxt(connectDB, jTextField9.getText(), jTextField20.getText(), jTextField17.getText(), receiptNo1, this.jComboBox411.getSelectedItem().toString());
            } else {
            if (nodetails.equalsIgnoreCase("Codes")) {
            com.afrisoftech.txtreports.CodeReceiptsTxt policy = new com.afrisoftech.txtreports.CodeReceiptsTxt(connectDB, jTextField9.getText(), jTextField20.getText(), jTextField17.getText(), receiptNo1, this.jComboBox411.getSelectedItem().toString());

            } else {
            if (nodetails.equalsIgnoreCase("dept")) {
            com.afrisoftech.txtreports.ReceiptsPerDeptTxt policy = new com.afrisoftech.txtreports.ReceiptsPerDeptTxt(connectDB, jTextField9.getText(), jTextField20.getText(), jTextField17.getText(), receiptNo1, this.jComboBox411.getSelectedItem().toString());

            } else {
            if (nodetails.equalsIgnoreCase("Prints") && rct.equalsIgnoreCase("Pdf")) {
            com.afrisoftech.reports.ReceiptsPdf policy = new com.afrisoftech.reports.ReceiptsPdf();
            policy.ReceiptsPdf(connectDB, receiptNo1);
            } else {
            com.afrisoftech.txtreports.ReceiptsTxt policy = new com.afrisoftech.txtreports.ReceiptsTxt(connectDB, jTextField9.getText(), jTextField20.getText(), jTextField17.getText(), receiptNo1, this.jComboBox411.getSelectedItem().toString());
            }
            }
            }
            }*/
            String clientReceipt = null;

            java.sql.PreparedStatement pstmtReprint = connectDB.prepareStatement("SELECT dealer FROM ac_cash_collection WHERE receipt_no = ?");

            pstmtReprint.setString(1, receiptNumberTxt.getText());
            java.sql.ResultSet rsetReprint = pstmtReprint.executeQuery();


            while (rsetReprint.next()) {
                clientReceipt = rsetReprint.getString(1);
            }
            com.afrisoftech.txtreports.GokReceiptsRTxt policy = new com.afrisoftech.txtreports.GokReceiptsRTxt(connectDB, clientReceipt, amountPaidTxt.getText(), receiptNo1, paymentModeCmbx.getSelectedItem().toString(), "0.00", "0.00", shiftNumberTxt.getText());


        } catch (java.sql.SQLException sq) {

            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }            // Add your handling code here:
    }//GEN-LAST:event_reprintReceiptJbtnActionPerformed

    private void jButton4111ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4111ActionPerformed
        this.setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_jButton4111ActionPerformed

    private void clearDataJbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearDataJbtnActionPerformed

        amountPaidTxt.setText("0.00");

        for (int k = 0; k < billTable.getRowCount(); k++) {
            for (int r = 0; r < billTable.getColumnCount(); r++) {
                billTable.getModel().setValueAt(null, k, r);
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_clearDataJbtnActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        this.jSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        saveReceiptJbtn.setEnabled(true);
        patientNameTxt.setText("");
        visitIDTxt.setText("");
        patientCategoryTxt.setText("");
        patientNumberTxt.setText("");
        amountPaidTxt.setText("");
        billBalanceTxt.setText("");
        amountPaidTxt.setText("0.00");

        for (int k = 0; k < billTable.getRowCount(); k++) {
            for (int r = 0; r < billTable.getColumnCount(); r++) {
                billTable.getModel().setValueAt(null, k, r);
            }
        }
        int j = 0;

        patientNameTxt.setText(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1).toString());
        patientNumberTxt.setText(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0).toString());
        visitIDTxt.setText(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 2).toString());

        try {

            java.sql.Statement stmt111 = connectDB.createStatement();
            java.sql.ResultSet rsetTable11 = stmt111.executeQuery("SELECT count(patient_no) FROM hp_admission WHERE patient_no = '" + patientNumberTxt.getText() + "' AND check_out = false AND visit_id = '" + visitIDTxt.getText() + "'");

            while (rsetTable11.next()) {
                j = rsetTable11.getInt(1);
            }
            if (j > 0) {

                java.sql.Statement stmt = connectDB.createStatement();
                java.sql.ResultSet rset = stmt.executeQuery("select patient_name,visit_id,ward,wing from hp_admission WHERE patient_no = '" + patientNumberTxt.getText() + "' AND visit_id = '" + visitIDTxt.getText() + "' ORDER BY date_admitted DESC LIMIT 1");
                while (rset.next()) {
                    patientNameTxt.setText(rset.getObject(1).toString());
                    visitIDTxt.setText(rset.getObject(2).toString());
                    jTextField2.setText(rset.getObject(3).toString());
                    patientCategoryTxt.setText(rset.getObject(4).toString());
                }


                java.sql.Statement stmt11 = connectDB.createStatement();
                java.sql.ResultSet rset11 = stmt11.executeQuery("SELECT sum(debit-credit) FROM hp_patient_card WHERE  patient_no  = '" + patientNumberTxt.getText() + "' and (invoice_no NOT ILIKE 'I%' OR invoice_no NOT ILIKE 'O%') AND visit_id = '" + visitIDTxt.getText() + "'");
                while (rset11.next()) {
                    billBalanceTxt.setText(rset11.getObject(1).toString());
                }
            } else {
                billBalanceTxt.setText("0.00");
                jTextField2.setText("-");
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }
        //   jButton301.setEnabled(true);




        this.populateTable2(patientNumberTxt.getText());
        jSearchDialog.dispose();         // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked
    private void populateTable2(java.lang.String patient_no) {
        float grossTotal = java.lang.Float.parseFloat(billBalanceTxt.getText().toString());
        if (grossTotal >= 0) {
            int i = 0;
            int j = 0;
            try {

                //  java.lang.Object[] listofAct = this.getListofActivities();


                java.sql.Statement stmt = connectDB.createStatement();

                java.sql.ResultSet rset = stmt.executeQuery("SELECT count(patient_no) FROM hp_patient_card WHERE patient_no = '" + patient_no + "' AND visit_id = '" + visitIDTxt.getText() + "'");

                while (rset.next()) {
                    j = rset.getInt(1);
                }
                if (j > 0) {
                    //for (int x = 0; x < listofAct.length; x++) {

                    java.sql.Statement stmtTable1 = connectDB.createStatement();
                    java.sql.Statement stmtTable11 = connectDB.createStatement();
                    java.sql.Statement stmtTable111 = connectDB.createStatement();
                    //       java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select date::date as date,service,dosage as quantity,debit-credit as amount FROM hp_patient_card WHERE patient_no ='"+jTextField91.getText()+"' and paid = false AND (invoice_no NOT ILIKE 'O%' OR invoice_no NOT ILIKE 'I%')  AND visit_id = '"+jTextField16.getText()+"'");
                    java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select main_service,"
                            + "CASE WHEN (sum(dosage)=0) THEN (sum(debit-credit)/sum(1))::NUMERIC(10,2) ELSE (sum(debit-credit)/sum(dosage))::NUMERIC(10,2) END AS amount,"
                            + "service,sum(dosage),sum(debit-credit),visit_id FROM hp_patient_card WHERE patient_no ='" + patientNumberTxt.getText() + "'"
                            + " AND (invoice_no NOT ILIKE 'O%' OR invoice_no NOT ILIKE 'I%')  AND visit_id = '" + visitIDTxt.getText() + "'  GROUP BY main_service,service,visit_id ");

                    while (rsetTable1.next()) {
                        java.sql.ResultSet rsetTable1x = stmtTable11.executeQuery("SELECT DISTINCT gl_account FROM pb_operating_parameters WHERE main_service ilike '" + rsetTable1.getObject(1) + "'");
                        while (rsetTable1x.next()) {
                            java.sql.ResultSet rsetx = stmtTable111.executeQuery("SELECT sum(debit-credit),sum(quantity) FROM ac_cash_collection WHERE description = '" + rsetTable1.getObject(3) + "' AND activity_code = '" + rsetTable1x.getObject(1) + "' AND journal_no = '" + visitIDTxt.getText() + "'");
                            while (rsetx.next()) {
                                double amount = rsetTable1.getDouble(5);
                                double receipts = rsetx.getDouble(1);
                                double qty = rsetTable1.getDouble(4);
                                double paidQty = rsetx.getDouble(2);
                                if ((amount - receipts) == 0) {
                                } else {
                                    System.out.println("Working at table row " + i);
                                    billTable.setValueAt(rsetTable1.getObject(3), i, 0);
                                    billTable.setValueAt(java.lang.Double.valueOf(qty - paidQty), i, 1);
                                    billTable.setValueAt(java.lang.Double.valueOf((amount - receipts) / (qty - paidQty)), i, 2);
                                    billTable.setValueAt(0.00, i, 3);
                                    billTable.setValueAt(0.00, i, 4);
                                    billTable.setValueAt(java.lang.Double.valueOf(amount - receipts), i, 5);
                                    //jTable11.setValueAt(rsetTable1.getObject(5), i, 5);
                                    billTable.setValueAt(rsetTable1x.getObject(1), i, 6);
                                    billTable.setValueAt(false, i, 7);
                                    billTable.setValueAt(null, i, 8);
                                    //   jTable11.setValueAt(rsetTable1.getObject(5), i, 4);

                                    i++;

                                    //                i = i + i;
                                }
                                //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                            }
                        }

                    }

                    // java.sql.Statement stmtTable11 = connectDB.createStatement();

                    /* java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("select date::date as date,service,dosage as quantity,debit-credit as amount FROM hp_patient_card WHERE patient_no ='"+jTextField91.getText()+"' and paid = false AND (invoice_no NOT ILIKE 'O%' OR invoice_no NOT ILIKE 'I%') AND visit_id = '"+jTextField16.getText()+"'");

                    while (rsetTable11.next()) {

                    jTextField22.setText(rsetTable11.getString(1));
                    }
                     */
                }



            } catch (java.sql.SQLException sqlExec) {

                javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

            }


        }
    }

    /* public java.lang.Object[] getListofActivities() {

    java.lang.Object[] listofActivities = null;

    java.util.Vector listActVector = new java.util.Vector(1, 1);


    try {


    java.sql.Statement stmt1 = connectDB.createStatement();

    java.sql.ResultSet rSet1 = stmt1.executeQuery("SELECT DISTINCT service FROM hp_patient_card WHERE patient_no = '" + jTextField9.getText() + "' AND visit_id = '" + jTextField16.getText() + "' AND service != 'Receipt'");

    while (rSet1.next()) {

    listActVector.addElement(rSet1.getObject(1).toString().toUpperCase());

    }

    } catch (java.sql.SQLException sqlExec) {

    javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), sqlExec.getMessage());

    }

    listofActivities = listActVector.toArray();
    System.out.println("Done list of activities ...");
    return listofActivities;
    }*/
    private void jTextField11CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11CaretUpdate
        if (jTextField11.getCaretPosition() < 3) {

            System.out.println("Nothing");
        } else {
            if (patientNameChbx.isSelected()) {
                jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no,patient_name,visit_id FROM hp_admission WHERE patient_name ILIKE '" + jTextField11.getText() + "%' AND check_out = false ORDER BY patient_name"));


                jSearchTable.setShowHorizontalLines(false);
                jSearchScrollPane.setViewportView(jSearchTable);



            } else {

                if (patientNumberChbx.isSelected()) {
                    jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no,patient_name,visit_id FROM hp_admission WHERE patient_no ILIKE '" + jTextField11.getText() + "%' AND check_out = false ORDER BY patient_no"));

                    jSearchTable.setShowHorizontalLines(false);
                    jSearchScrollPane.setViewportView(jSearchTable);



                }
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_jTextField11CaretUpdate

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchButtonClicked();

        // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed
    private void searchButtonClicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = patientNumberTxt.getLocationOnScreen();

        jSearchDialog.setSize(400, 200);

        jSearchDialog.setLocation(point);

        jSearchDialog.setVisible(true);



    }
    private void saveReceiptJbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveReceiptJbtnActionPerformed

        java.util.Date periodFrom = null;
        java.util.Date periodTo = null;

        java.sql.Savepoint registerSavePoint = null;
        try {
            connectDB.setAutoCommit(false);
            registerSavePoint = connectDB.setSavepoint("registration");
        } catch (java.sql.SQLException ex) {
            ex.printStackTrace();
        }


        try {

            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + transactionDateDpkr.getDate() + "' BETWEEN period_from AND period_to");
            while (rsetf.next()) {
                periodFrom = rsetf.getDate(1);
                periodTo = rsetf.getDate(2);
            }


            if (transactionDateDpkr.getDate().before(periodFrom) || transactionDateDpkr.getDate().after(periodTo)) {
                javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            } else {
                if (patientNameTxt.getText().equalsIgnoreCase("")) {
                    javax.swing.JOptionPane.showMessageDialog(this, "You cannot save without the name", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                } else {

                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 8);
                    double totalSumDisc = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 4);
                    // jTextField17.setText(java.lang.String.valueOf(totalSumDisc));
                    amountPaidTxt.setText(java.lang.String.valueOf(totalSum - totalSumDisc));

                    //try{
                    String glAcc = null;
                    String receiptNo1 = null;
                    String receiptNo2 = null;
                    String actCode1 = null;
                    String glCode1 = null;
                    String transNo1 = null;
                    String actNames1 = null;
                    String patientAcc = null;
                    String user = null;
                    String AccDesc = null;
                    String name = null;
                    String rcode = null;
                    String rname = null;
                    //   String glAcc = null;
                    String Activity = null;
                    // String userName = null;
                    String voucherNo = null;
                    String visitid = "-";
                    String Stock = null;
                    String voucNo = null;
                    String accountCode = null;
                    String TransNo = null;
                    String glType = null;
                    String nodetails = null;
                    int vid = 0;
                    String rct = null;

                    java.util.Calendar calendar = java.util.Calendar.getInstance();

                    long dateNow = calendar.getTimeInMillis();

                    java.sql.Date datenowSql1 = new java.sql.Date(dateNow);
                    java.sql.Statement stm121xx = connectDB.createStatement();
                    java.sql.ResultSet rse121xx = stm121xx.executeQuery("select shift_no from ac_shifts WHERE user_name = current_user and status = 'Running' AND cash_point = '" + cashPointTxt.getText() + "'");
                    while (rse121xx.next()) {

                        shiftNumberTxt.setText(rse121xx.getString(1));

                    }
                    java.sql.Statement stm12 = connectDB.createStatement();
                    java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                    while (rse12.next()) {

                        patientAcc = rse12.getObject(1).toString();
                        AccDesc = rse12.getObject(2).toString();
                    }
                    java.sql.Statement stm12z = connectDB.createStatement();
                    java.sql.ResultSet rse12z = stm12z.executeQuery("select current_user");
                    while (rse12z.next()) {
                        user = rse12z.getObject(1).toString();
                    }
                    java.sql.Statement stm1211 = connectDB.createStatement();
                    java.sql.ResultSet rse1211 = stm1211.executeQuery("select activity,code from pb_activity where activity_category ='RC'");
                    while (rse1211.next()) {
                        rname = rse1211.getObject(1).toString();
                        rcode = rse1211.getObject(2).toString();
                    }
                    java.sql.Statement stm1211x = connectDB.createStatement();
                    java.sql.ResultSet rse1211x = stm1211x.executeQuery("select ward_name,revcode from hp_wards where ward_name ilike '" + jTextField2.getText() + "'");
                    while (rse1211x.next()) {
                        rnamex = rse1211x.getObject(1).toString();
                        rcodex = rse1211x.getObject(2).toString();
                    }
                    java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);
                    //receiptNo1 = com.afrisoftech.lib.DateLables.getDateLabel();
                    java.sql.Statement stm12f = connectDB.createStatement();
                    java.sql.ResultSet rse12f = stm12f.executeQuery("select current_timestamp");
                    while (rse12f.next()) {
                        datenowSql = rse12f.getTimestamp(1);
                    }
                    receiptNo1 = datenowSql.toString();
                    java.sql.Statement pss = connectDB.createStatement();
                    java.sql.ResultSet rss = pss.executeQuery("select nextval('transaction_no_seq')");
                    while (rss.next()) {
                        transNo1 = rss.getObject(1).toString();
                    }

                    System.out.println(actNames1);
                    java.sql.PreparedStatement pstmtx = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                    pstmtx.setString(1, patientNumberTxt.getText());
                    pstmtx.setObject(2, "Receipt");
                    pstmtx.setObject(3, patientCategoryTxt.getText());
                    pstmtx.setObject(4, paymentModeCmbx.getSelectedItem().toString());
                    pstmtx.setString(5, transNo1);
                    pstmtx.setString(7, "");
                    pstmtx.setString(6, creditCardNumberTxt.getText());
                    pstmtx.setString(8, cardNameTxt.getText());
                    pstmtx.setString(9, cardCompanyTxt.getText());
                    pstmtx.setDate(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDateDpkr.getDate()));
                    pstmtx.setString(11, "");
                    pstmtx.setDouble(13, java.lang.Double.valueOf(amountPaidTxt.getText()));
                    pstmtx.setDouble(12, 0.0);
                    pstmtx.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDateDpkr.getDate()));
                    pstmtx.setObject(15, patientAcc);
                    pstmtx.setString(16, "Receipt");
                    pstmtx.setDouble(17, 1);
                    pstmtx.setObject(18, "");
                    pstmtx.setBoolean(19, true);
                    pstmtx.setString(20, "Receipt");
                    pstmtx.setBoolean(21, true);
                    pstmtx.setString(22, AccDesc);
                    pstmtx.setString(23, visitid);
                    pstmtx.setString(24, user);
                    pstmtx.setString(25, cashPointTxt.getText());
                    pstmtx.setString(26, "IP");
                    pstmtx.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                    pstmtx.setString(28, visitIDTxt.getText());
                    pstmtx.setString(29, receiptNo1);
                    pstmtx.executeUpdate();

                    for (int i = 0; i < billTable.getRowCount(); i++) {
                        if ((billTable.getModel().getValueAt(i, 0) != null) && (Boolean.getBoolean(billTable.getValueAt(i, 7).toString()) == java.lang.Boolean.TRUE)) {
                            //double negative = java.lang.Double.valueOf(billTable.getValueAt(i, 5).toString());
                            if (billTable.getValueAt(i, 5).toString() != null) {
                                java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("INSERT INTO ac_cash_collection VALUES(?,?,?,initcap(?),?,?, ?, initcap(?), initcap(?), ?, ?, ?, initcap(?), ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                                pstmt2.setObject(1, billTable.getValueAt(i, 6).toString());
                                pstmt2.setObject(5, paymentModeCmbx.getSelectedItem().toString());
                                pstmt2.setString(2, billTable.getValueAt(i, 0).toString());
                                pstmt2.setString(3, patientNumberTxt.getText());
                                pstmt2.setString(4, patientNameTxt.getText());
                                pstmt2.setString(6, creditCardNumberTxt.getText());
                                pstmt2.setString(7, cardNameTxt.getText());
                                pstmt2.setString(8, chequeDrawerTxt.getText());
                                pstmt2.setString(9, chequeBankerTxt.getText());
                                pstmt2.setString(10, rcode);
                                pstmt2.setString(12, receiptNo1);
                                pstmt2.setString(11, chequeNumberTxt.getText());
                                pstmt2.setString(13, visitIDTxt.getText());
                                pstmt2.setString(14, billPayerTxt.getText());
                                pstmt2.setObject(15, "Receipts");
                                pstmt2.setDouble(16, java.lang.Double.valueOf(billTable.getValueAt(i, 5).toString()));
                                pstmt2.setDouble(17, 0.00);
                                pstmt2.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDateDpkr.getDate()));
                                pstmt2.setString(19, transNo1);
                                pstmt2.setBoolean(20, false);
                                pstmt2.setBoolean(21, false);
                                pstmt2.setBoolean(22, false);
                                pstmt2.setString(23, user);
                                pstmt2.setString(25, shiftNumberTxt.getText());
                                pstmt2.setString(24, cashPointTxt.getText());
                                pstmt2.setDate(26, null);
                                pstmt2.setDouble(27, 1);
                                pstmt2.executeUpdate();
                            } else {
                                String waivNumber = "-";
                                java.sql.Statement pssg = connectDB.createStatement();
                                java.sql.ResultSet rssg = pssg.executeQuery("SELECT requisition_no FROM hp_patient_card WHERE service = '" + billTable.getValueAt(i, 0) + "' AND visit_id = '" + visitIDTxt.getText() + "' AND credit > 0");
                                while (rssg.next()) {
                                    waivNumber = rssg.getObject(1).toString();
                                }
                                java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("INSERT INTO ac_cash_collection VALUES(?,?,?,initcap(?),?,?, ?, initcap(?), initcap(?), ?, ?, ?, initcap(?), ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                                pstmt2.setObject(1, billTable.getValueAt(i, 6).toString());
                                pstmt2.setObject(5, paymentModeCmbx.getSelectedItem().toString());
                                pstmt2.setString(2, billTable.getValueAt(i, 0).toString());
                                pstmt2.setString(3, patientNumberTxt.getText());
                                pstmt2.setString(4, patientNameTxt.getText());
                                pstmt2.setString(6, creditCardNumberTxt.getText());
                                pstmt2.setString(7, cardNameTxt.getText());
                                pstmt2.setString(8, chequeDrawerTxt.getText());
                                pstmt2.setString(9, chequeBankerTxt.getText());
                                pstmt2.setString(10, rcode);
                                pstmt2.setString(12, receiptNo1);
                                pstmt2.setString(11, chequeNumberTxt.getText());
                                pstmt2.setString(13, waivNumber);
                                pstmt2.setString(14, billPayerTxt.getText());
                                if (billTable.getValueAt(i, 0).toString().startsWith("Wai")) {
                                    pstmt2.setObject(15, "Waiver");
                                } else {
                                    pstmt2.setObject(15, "Exemptions");
                                }
                                pstmt2.setDouble(17, java.lang.Double.valueOf(billTable.getValueAt(i, 5).toString()) * -1);
                                pstmt2.setDouble(16, 0.00);
                                pstmt2.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDateDpkr.getDate()));
                                pstmt2.setString(19, transNo1);
                                pstmt2.setBoolean(20, false);
                                pstmt2.setBoolean(21, false);
                                pstmt2.setBoolean(22, false);
                                pstmt2.setString(23, user);
                                pstmt2.setString(25, shiftNumberTxt.getText());
                                pstmt2.setString(24, cashPointTxt.getText());
                                pstmt2.setDate(26, null);
                                pstmt2.setDouble(27, java.lang.Double.valueOf(billTable.getValueAt(i, 1).toString()));
                                pstmt2.executeUpdate();

                            }
                        }
                    }

                    /*java.sql.Statement ps1 = connectDB.createStatement();
                    java.sql.ResultSet rst1 = ps1.executeQuery("select nextval('receipt_no_seq')");
                    while (rst1.next()) {
                    receiptNo2 = rst1.getObject(1).toString();
                    }*/
                    java.sql.PreparedStatement psr = connectDB.prepareStatement("INSERT INTO ac_receipts_no("
                            + "account_no, account_name, date, amount, shift_no, "
                            + "cash_point, reference, user_name) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
                    psr.setString(1, patientNumberTxt.getText());
                    psr.setString(2, patientNameTxt.getText());
                    psr.setDate(3, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDateDpkr.getDate()));
                    psr.setDouble(4, java.lang.Double.valueOf(amountPaidTxt.getText()));
                    psr.setInt(5, java.lang.Integer.valueOf(shiftNumberTxt.getText()));
                    psr.setString(6, cashPointTxt.getText());
                    psr.setString(7, receiptNo1);
                    psr.setString(8, user);
                    psr.executeUpdate();

                    java.sql.Statement ps1q = connectDB.createStatement();
                    java.sql.ResultSet rst1q = ps1q.executeQuery("SELECT receipt_no FROM ac_receipts_no WHERE reference = '" + receiptNo1 + "'");
                    while (rst1q.next()) {
                        receiptNo2 = rst1q.getObject(1).toString();
                    }
                    java.sql.PreparedStatement pstmt112 = connectDB.prepareStatement("UPDATE ac_cash_collection SET receipt_no = '" + receiptNo2 + "' WHERE receipt_no = '" + receiptNo1 + "'");
                    pstmt112.executeUpdate();
                    java.sql.PreparedStatement pstmt112z = connectDB.prepareStatement("UPDATE hp_patient_card SET requisition_no = '" + receiptNo2 + "' WHERE requisition_no = '" + receiptNo1 + "'");
                    pstmt112z.executeUpdate();

                    receiptNumberTxt.setText(receiptNo2);


                    java.sql.Statement ps11 = connectDB.createStatement();
                    java.sql.ResultSet rst11 = ps11.executeQuery("select nodetails from receipt_pref");
                    while (rst11.next()) {
                        nodetails = rst11.getObject(1).toString();
                    }
                    java.sql.Statement ps112 = connectDB.createStatement();
                    java.sql.ResultSet rst112 = ps112.executeQuery("select rct_format from receipt_pref");
                    while (rst112.next()) {
                        rct = rst112.getObject(1).toString();
                    }


                    /*  java.sql.Statement ps1 = connectDB.createStatement();
                    java.sql.ResultSet rst1 = ps1.executeQuery("select currval('receipt_no_seq')");
                    while (rst1.next()){
                     */
                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("");

                    receiptNo1 = receiptNumberTxt.getText();
                    // }
                    //            CashReceiptsPdf policy = new CashReceiptsPdf();
                    //            policy.CashReceiptsPdf(connectDB, jTextField91.getText().toUpperCase(),jTextField311.getText(),receiptNo1,this.jComboBox41.getSelectedItem().toString(),jTextField121.getText(),jTextField131.getText());

                    String clientReceipt = null;

                    java.sql.PreparedStatement pstmtReprint = connectDB.prepareStatement("SELECT dealer FROM ac_cash_collection WHERE receipt_no = ?");

                    pstmtReprint.setString(1, receiptNumberTxt.getText());
                    java.sql.ResultSet rsetReprint = pstmtReprint.executeQuery();


                    while (rsetReprint.next()) {
                        clientReceipt = rsetReprint.getString(1);
                    }

                    com.afrisoftech.txtreports.GokReceiptsTxt policy = new com.afrisoftech.txtreports.GokReceiptsTxt(connectDB, clientReceipt, amountPaidTxt.getText(), receiptNo1, paymentModeCmbx.getSelectedItem().toString(), "0.00", "0.00", shiftNumberTxt.getText(), "0.00");



                    /* if (nodetails.equalsIgnoreCase("NoDetails")) {

                    com.afrisoftech.txtreports.NoDetReceiptsTxt policy = new com.afrisoftech.txtreports.NoDetReceiptsTxt(connectDB, jTextField9.getText(), jTextField20.getText(), jTextField17.getText(), receiptNo1, this.jComboBox411.getSelectedItem().toString());
                    } else {
                    if (nodetails.equalsIgnoreCase("Codes")) {
                    com.afrisoftech.txtreports.CodeReceiptsTxt policy = new com.afrisoftech.txtreports.CodeReceiptsTxt(connectDB, jTextField9.getText(), jTextField20.getText(), jTextField17.getText(), receiptNo1, this.jComboBox411.getSelectedItem().toString());

                    } else {
                    if (nodetails.equalsIgnoreCase("dept")) {
                    com.afrisoftech.txtreports.ReceiptsPerDeptTxt policy = new com.afrisoftech.txtreports.ReceiptsPerDeptTxt(connectDB, jTextField9.getText(), jTextField20.getText(), jTextField17.getText(), receiptNo1, this.jComboBox411.getSelectedItem().toString());

                    } else {
                    if (nodetails.equalsIgnoreCase("Prints") && rct.equalsIgnoreCase("Pdf")) {
                    com.afrisoftech.reports.ReceiptsPdf policy = new com.afrisoftech.reports.ReceiptsPdf();
                    policy.ReceiptsPdf(connectDB, receiptNo1);
                    } else {
                    com.afrisoftech.txtreports.ReceiptsTxt policy = new com.afrisoftech.txtreports.ReceiptsTxt(connectDB, jTextField9.getText(), jTextField20.getText(), jTextField17.getText(), receiptNo1, this.jComboBox411.getSelectedItem().toString());
                    }
                    }
                    }
                    }
                    /* if(nodetails.equalsIgnoreCase("NoDetails")){
                    com.afrisoftech.txtreports.IPDebtorsReceiptsTxt policy = new com.afrisoftech.txtreports.IPDebtorsReceiptsTxt(connectDB, "Deposits",this.jTextField1.getText(),jTextField9.getText()+" "+jTextField20.getText(),jTextField17.getText(),receiptNo1,this.jComboBox411.getSelectedItem().toString(),jTextField221.getText());
                    }else{
                    if(nodetails.equalsIgnoreCase("Prints") && rct.equalsIgnoreCase("Pdf") ){
                    com.afrisoftech.reports.ReceiptsPdf policy = new com.afrisoftech.reports.ReceiptsPdf();
                    policy.ReceiptsPdf(connectDB,receiptNo1);
                    }else{
                    //   com.afrisoftech.txtreports.InpatientReceiptsTxt policy = new com.afrisoftech.txtreports.InpatientReceiptsTxt(connectDB, jTextField9.getText(),jTextField20.getText(),jTextField17.getText(),receiptNo1,this.jComboBox411.getSelectedItem().toString(),jTextField221.getText(),this.jTextField1.getText());
                    com.afrisoftech.txtreports.DebtorsReceiptsTxt policy = new com.afrisoftech.txtreports.DebtorsReceiptsTxt(connectDB, "Deposits",this.jTextField1.getText(),jTextField9.getText()+" "+jTextField20.getText(),jTextField17.getText(),receiptNo1,this.jComboBox411.getSelectedItem().toString(),jTextField221.getText());
                    }
                    }
                     */
                    // jTextField3.setText(receiptNo1);
                    //  com.afrisoftech.accounting.InPatientsReceiptsPdf policy = new com.afrisoftech.accounting.InPatientsReceiptsPdf();
                    //  policy.InPatientsReceiptsPdf(connectDB, jTextField9.getText(),jTextField20.getText(),jTextField17.getText(),receiptNo1,this.jComboBox411.getSelectedItem().toString(),jTextField221.getText(),this.jTextField1.getText());

                    //InPatientsReceiptsPdf policy = new InPatientsReceiptsPdf();
                    // policy.InPatientsReceiptsPdf(connectDB, jTextField9.getText(),jTextField20.getText(),jTextField17.getText(),receiptNo1,this.jComboBox411.getSelectedItem().toString(),this.jTextField221,this.jTextField1.getText());
                    if (dischargeFinaliseBillRbtn.isSelected()) {
                        String invoiceNo = null;
                        String disno = null;
                        String ward = null;
                        String bed_no = null;
                        java.sql.Date admDate = null;
                        java.sql.Statement pss1 = connectDB.createStatement();
                        java.sql.ResultSet rss1 = pss1.executeQuery("select 'I'||(nextval('ipinvoice_no_seq'))");
                        while (rss1.next()) {
                            invoiceNo = rss1.getObject(1).toString();
                        }

                        java.sql.Statement ps = connectDB.createStatement();
                        java.sql.ResultSet rst = ps.executeQuery("select nextval('discharge_no_seq'),current_user");
                        while (rst.next()) {
                            rst.getObject(1).toString();

                            disno = rst.getObject(1).toString();
                            //UserName = rst.getObject(2).toString();
                        }

                        java.sql.Statement pse = connectDB.createStatement();
                        java.sql.ResultSet rste = pse.executeQuery("SELECT ward,bed_no,date_admitted FROM hp_admission WHERE visit_id = '" + visitIDTxt.getText() + "'");
                        while (rste.next()) {
                            ward = rste.getObject(1).toString();
                            bed_no = rste.getObject(2).toString();
                            admDate = rste.getDate(3);
                            //UserName = rst.getObject(2).toString();
                        }
                        // java.sql.Statement pst63x = connectDB.createStatement();
                        java.sql.PreparedStatement pst63x = connectDB.prepareStatement("INSERT INTO hp_patient_discharge VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                        pst63x.setString(1, patientNumberTxt.getText());
                        pst63x.setString(2, patientNameTxt.getText());
                        pst63x.setString(3, "");
                        pst63x.setString(4, ward);
                        pst63x.setString(5, "");
                        pst63x.setString(6, bed_no);
                        pst63x.setDate(7, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDateDpkr.getDate()));
                        pst63x.setDate(8, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDateDpkr.getDate()));
                        pst63x.setString(9, "");
                        pst63x.setString(10, "");
                        pst63x.setString(11, "");
                        pst63x.setDouble(12, java.lang.Double.valueOf(amountPaidTxt.getText()));
                        pst63x.setString(13, "");
                        pst63x.setString(14, invoiceNo);
                        pst63x.setString(15, disno);
                        pst63x.setDate(16, admDate);
                        pst63x.setTime(17, new java.sql.Time(java.util.Calendar.getInstance().getTimeInMillis()));
                        pst63x.setString(18, user);
                        pst63x.executeUpdate();
                        double TotalBill = java.lang.Double.parseDouble(billBalanceTxt.getText());
                        double AmountPaid = java.lang.Double.parseDouble(amountPaidTxt.getText());
                        if (TotalBill <= AmountPaid) {
                            java.sql.PreparedStatement pstmt12 = connectDB.prepareStatement("UPDATE hp_admission SET invoice_no = '" + invoiceNo + "',balance = '" + amountPaidTxt.getText() + "',discharge = true,check_out = true,discharge_date = '" + transactionDateDpkr.getDate() + "'  WHERE patient_no = '" + patientNumberTxt.getText() + "' AND visit_id = '" + visitIDTxt.getText() + "'");
                            pstmt12.executeUpdate();
                        }
                        java.sql.PreparedStatement pstmt21 = connectDB.prepareStatement("UPDATE hp_patient_card set paid = true,invoice_no = '" + invoiceNo + "' WHERE patient_no = '" + patientNumberTxt.getText() + "' AND visit_id = '" + visitIDTxt.getText() + "' AND invoice_no NOT ILIKE 'I%'");
                        pstmt21.executeUpdate();

                        java.sql.PreparedStatement pstmt21x = connectDB.prepareStatement("UPDATE ac_doctors_ledger set pat_inv = '" + invoiceNo + "' WHERE patient_no = '" + patientNumberTxt.getText() + "' AND input_date between '" + admDate + "' AND '" + transactionDateDpkr.getDate() + "'");
                        pstmt21x.executeUpdate();
                    }
                    connectDB.commit();
                    connectDB.setAutoCommit(true);

                    saveReceiptJbtn.setEnabled(false);

                    dischargeFinaliseBillRbtn.setSelected(true);
                    javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);


                }
            }

        } catch (java.sql.SQLException sq) {

            try {
                connectDB.rollback(registerSavePoint);
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }

        /*} catch(java.lang.Exception ex) {
        System.out.println(ex.getMessage());
        javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error",javax.swing.JOptionPane.ERROR_MESSAGE);


        }
         */
        // }

        // Add your handling code here:
    }//GEN-LAST:event_saveReceiptJbtnActionPerformed

    private void paymentModeCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentModeCmbxActionPerformed
      /*  try {
            java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rset1 = stmt1.executeQuery("select gl_account from ac_cash_points where description  ='" + paymentModeCmbx.getSelectedItem() + "'");
            while (rset1.next()) {
                glAccountTxt.setText(rset1.getObject(1).toString());
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();

        }*/

        if (paymentModeCmbx.getSelectedItem().equals("Credit Card")) {
            //   jPanel11.setVisible(true);
            chequeDetailsPanel.setVisible(false);
            creditCardDetailPane.setVisible(true);
            //   jPanel4.setVisible(false);
            creditCardNumberTxt.setText("");
            cardNameTxt.setText("");
            cardCompanyTxt.setText("");


        } else {
            if (paymentModeCmbx.getSelectedItem().equals("Cheque")) {
                chequeDetailsPanel.setVisible(true);
                //                jPanel11.setVisible(true);
                creditCardDetailPane.setVisible(false);
                chequeNumberTxt.setText("");
                chequeBankerTxt.setText("");
                chequeDrawerTxt.setText("");
                // jPanel321.setVisible(false);
            } else {
                // jPanel4.setVisible(false);
                //                jPanel11.setVisible(true);
                creditCardDetailPane.setVisible(false);
                chequeDetailsPanel.setVisible(false);
                chequeNumberTxt.setText("");
                chequeBankerTxt.setText("");
                chequeDrawerTxt.setText("");
                creditCardNumberTxt.setText("");
                //                jTextField5511.setText("");
                cardCompanyTxt.setText("");
            }
        }        // Add your handling code here:
    }//GEN-LAST:event_paymentModeCmbxActionPerformed

    private void billTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_billTableKeyReleased
        if (billTable.getValueAt(billTable.getSelectedRow(), 1) != null) {
            if (billTable.getModel().getValueAt(billTable.getSelectedRow(), 1) != null) {
                if (billTable.getSelectedColumn() == billTable.getSelectedColumn()) {
                    float qty = java.lang.Float.parseFloat(billTable.getValueAt(billTable.getSelectedRow(), 1).toString());

                    float gross = java.lang.Float.parseFloat(billTable.getValueAt(billTable.getSelectedRow(), 2).toString());
                    gross = gross * qty;
                    float Disc = java.lang.Float.parseFloat(billTable.getValueAt(billTable.getSelectedRow(), 3).toString());

                    float total = gross - java.lang.Math.round((gross) * Disc / 100);
                    float totalDisc = java.lang.Math.round((gross) * Disc / 100);
                    billTable.setValueAt(totalDisc, billTable.getSelectedRow(), 3);
                    billTable.setValueAt(gross, billTable.getSelectedRow(), 5);
                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 5);
                    double totalSumDisc = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 4);
                    // jTextField17.setText(java.lang.String.valueOf(totalSumDisc));
                    amountPaidTxt.setText(java.lang.String.valueOf(totalSum - totalSumDisc));

                }
            }
        } else {
            if (billTable.getValueAt(billTable.getSelectedRow(), 1) != null) {
                if (billTable.getModel().getValueAt(billTable.getSelectedRow(), 1) != null) {
                    if (billTable.getSelectedColumn() == billTable.getSelectedColumn()) {
                        float qty = java.lang.Float.parseFloat(billTable.getValueAt(billTable.getSelectedRow(), 1).toString());

                        float gross = java.lang.Float.parseFloat(billTable.getValueAt(billTable.getSelectedRow(), 2).toString());
                        float Disc = java.lang.Float.parseFloat(billTable.getValueAt(billTable.getSelectedRow(), 4).toString());
                        float total = gross - Disc;
                        float totalDisc = Disc;
                        billTable.setValueAt(totalDisc, billTable.getSelectedRow(), 4);
                        billTable.setValueAt(gross, billTable.getSelectedRow(), 4);
                        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 5);
                        double totalSumDisc = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 4);
                        //jTextField17.setText(java.lang.String.valueOf(totalSumDisc));
                        amountPaidTxt.setText(java.lang.String.valueOf(totalSum - totalSumDisc));

                    }
                }
            }
        }
        // TODO add your handling code here:
}//GEN-LAST:event_billTableKeyReleased

    private void billTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_billTableMouseClicked
        if (billTable.getSelectedColumn() == 0) {

            this.cmbox221MouseClicked();

        } else /*(billTable.getSelectedColumn() == 7)*/ {
            System.out.println("Selected cash allocation ...");
            allocateCashPayment();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_billTableMouseClicked
    private void cmbox221MouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = billTableJscrl.getLocationOnScreen();
        jSearchDialog1.setSize(400, 200);
        jSearchDialog1.setLocation(point);
        jSearchDialog1.setVisible(true);


    }
    private void jTextField112CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField112CaretUpdate

        if (jTextField112.getCaretPosition() < 1) {

            System.out.println("Nothing");
        } else {
            if (jCheckBox5.isSelected()) {
                // try {
                jSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select service_type,rate::numeric,gl_account FROM pb_operating_parameters WHERE service_type ILIKE '%" + jTextField112.getText() + "%' order by service_type"));

                jSearchScrollPane1.setViewportView(jSearchTable1);
                System.out.println("Cannot sort out");
            } else {
                jSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select service_type,rate::numeric,gl_account FROM pb_operating_parameters WHERE code ILIKE '" + jTextField112.getText() + "%' order by service_type"));

                jSearchScrollPane1.setViewportView(jSearchTable1);
                System.out.println("Cannot sort out");
            }
        }

        // Add your handling code here:
}//GEN-LAST:event_jTextField112CaretUpdate

    private void jSearchTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable1MouseClicked
        billTable.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 0), billTable.getSelectedRow(), 0);
        billTable.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 1), billTable.getSelectedRow(), 2);
        billTable.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 2), billTable.getSelectedRow(), 6);
        billTable.setValueAt("0.00", billTable.getSelectedRow(), 3);
        billTable.setValueAt("0.00", billTable.getSelectedRow(), 4);
        billTable.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 1), billTable.getSelectedRow(), 5);

        jSearchDialog1.dispose();         // Add your handling code here:
}//GEN-LAST:event_jSearchTable1MouseClicked

    private void jButton91ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton91ActionPerformed
        this.jSearchDialog1.dispose();        // Add your handling code here:
}//GEN-LAST:event_jButton91ActionPerformed

    private void removeRowJbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRowJbtnActionPerformed
        if (billTable.isRowSelected(billTable.getSelectedRow())) {
            int rows2Delete = billTable.getSelectedRowCount();

            int[] selectedRows = billTable.getSelectedRows();

            if (rows2Delete < 1) {

                java.awt.Toolkit.getDefaultToolkit().beep();

                javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

            } else {

                if (rows2Delete > 1) {

                    for (int i = 0; i < selectedRows.length; i++) {



                        javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) billTable.getModel();

                        defTableModel.removeRow(selectedRows[i]);

                    }



                } else {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) billTable.getModel();

                    defTableModel.removeRow(billTable.getSelectedRow());

                    //calculateTotals();
                }
            }
        } else {
        }

        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 5);
        double totalSumDisc = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 4);
        // jTextField17.setText(java.lang.String.valueOf(totalSumDisc));
        amountPaidTxt.setText(java.lang.String.valueOf(totalSum - totalSumDisc));

        // double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable11, 3);
        //  jTextField31.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
        //jTextField31.setText(java.lang.String.valueOf(totalSum));
        //  jTextField18.setText(java.lang.String.valueOf(totalSum));

        // this.tableModelTableChanged();// Add your handling code here:
}//GEN-LAST:event_removeRowJbtnActionPerformed

    public java.lang.String getShiftNumber() {

        
        try {

            java.sql.Statement stmt = connectDB.createStatement();

             java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE cash_point = '"+System.getProperty("cashpoint")+"' AND user_name = current_user AND (status = 'Running' OR status = 'Suspended')");
            //java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE cash_point = '" + cashPoint + "' AND user_name = current_user AND (status = 'Running' OR status = 'Suspended')");

            while (rset.next()) {

                shift_no = rset.getString(1);

            }




        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        return shift_no;

    }

    public java.lang.String getCashPoint() {

        /*try {

            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("select code from ac_cash_points_setup where description = current_user");
            while (rsetf.next()) {
                cashPoint = rsetf.getObject(1).toString();

            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("select not successful");
        }*/
        try {

            java.sql.Statement stmt = connectDB.createStatement();

            java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE cash_point = '"+System.getProperty("cashpoint")+"' AND user_name = current_user AND (status = 'Running' OR status = 'Suspended')");
            //java.sql.ResultSet rset = stmt.executeQuery("SELECT cash_point FROM ac_shifts WHERE user_name = current_user AND (status = 'Running' OR status = 'Suspended')");

            while (rset.next()) {

                cash_no = rset.getString(1);

            }




        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        return cash_no;

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amountPaidTxt;
    private javax.swing.JLabel billBalanceLbl;
    private javax.swing.JTextField billBalanceTxt;
    private javax.swing.JPanel billDataPanel;
    private javax.swing.JLabel billPayerLbl;
    private javax.swing.JTextField billPayerTxt;
    private javax.swing.JTable billTable;
    private javax.swing.JScrollPane billTableJscrl;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JLabel cardCompanyLbl;
    private javax.swing.JTextField cardCompanyTxt;
    private com.afrisoftech.lib.DatePicker cardExpiryDatePicker;
    private javax.swing.JLabel cardNameLbl;
    private javax.swing.JTextField cardNameTxt;
    private javax.swing.JLabel cashPaidLbl;
    private javax.swing.JLabel cashPointLbl;
    private javax.swing.JTextField cashPointTxt;
    private javax.swing.JLabel chequeBankerLbl;
    private javax.swing.JTextField chequeBankerTxt;
    private javax.swing.JPanel chequeDetailsPanel;
    private javax.swing.JLabel chequeDrawerLbl;
    private javax.swing.JTextField chequeDrawerTxt;
    private javax.swing.JLabel chequeNumberLbl;
    private javax.swing.JTextField chequeNumberTxt;
    private javax.swing.JButton clearDataJbtn;
    private javax.swing.JPanel creditCardDetailPane;
    private javax.swing.JLabel creditCardNumberLbl;
    private javax.swing.JTextField creditCardNumberTxt;
    private javax.swing.JRadioButton dischargeFinaliseBillRbtn;
    private javax.swing.JLabel expiryDateLbl;
    public javax.swing.JButton jButton4111;
    private javax.swing.JButton jButton5111;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButton91;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel711;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel1111;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel711;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JDialog jSearchDialog1;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jSearchPanel1;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane1;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTable jSearchTable1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator1111;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField112;
    private javax.swing.JTextField jTextField152;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JRadioButton partPaymentRbtn;
    private javax.swing.JTextField patientCategoryTxt;
    private javax.swing.JCheckBox patientNameChbx;
    private javax.swing.JLabel patientNameLbl;
    private javax.swing.JTextField patientNameTxt;
    private javax.swing.JCheckBox patientNumberChbx;
    private javax.swing.JLabel patientNumberLbl;
    private javax.swing.JPanel patientNumberPanel;
    private javax.swing.JTextField patientNumberTxt;
    private javax.swing.JLabel patientcategoryLbl;
    private javax.swing.JPanel paymentDetailsPanel;
    private javax.swing.JComboBox paymentModeCmbx;
    private javax.swing.JLabel paymentModeLbl;
    private javax.swing.JTextField receiptNumberTxt;
    private javax.swing.JLabel receiptnumberLbl;
    private javax.swing.JButton removeRowJbtn;
    private javax.swing.JButton reprintReceiptJbtn;
    private javax.swing.JButton saveReceiptJbtn;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel searchModeLbl;
    private javax.swing.JLabel shiftNumberLbl;
    private javax.swing.JTextField shiftNumberTxt;
    private com.afrisoftech.lib.DatePicker transactionDateDpkr;
    private javax.swing.JLabel transactionDateLbl;
    private javax.swing.JLabel visitIDLbl;
    private javax.swing.JTextField visitIDTxt;
    // End of variables declaration//GEN-END:variables

    private void allocateCashPayment() {
        System.out.println("Allocating bills ...");
        double cashPaid = Double.parseDouble(amountPaidTxt.getText());
        double billBalance = Double.parseDouble(billBalanceTxt.getText());
        /* for (int rowCount = 0; rowCount < billTable.getRowCount(); rowCount++) {
        if (billTable.getValueAt(rowCount, 7) != null) {
        if (Boolean.getBoolean(billTable.getValueAt(rowCount, 7).toString()) == java.lang.Boolean.TRUE) {

        allocatedBalance = allocatedBalance + Double.parseDouble(billTable.getValueAt(billTable.getSelectedRow(), 5).toString());
        System.out.println("Allocated balance = [" + allocatedBalance + "]");
        }
        }
        }

         */
        allocatedBalance = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(billTable, 8);
        System.out.println("Allocated balance = [" + allocatedBalance + "]");
        if (allocatedBalance < cashPaid) {

            if (Double.parseDouble(billTable.getValueAt(billTable.getSelectedRow(), 5).toString()) <= (cashPaid - allocatedBalance)) {
                billTable.setValueAt(Double.parseDouble(billTable.getValueAt(billTable.getSelectedRow(), 5).toString()), billTable.getSelectedRow(), 8);
            } else if(Double.parseDouble(billTable.getValueAt(billTable.getSelectedRow(), 5).toString()) > (cashPaid - allocatedBalance)){
                                billTable.setValueAt(cashPaid-allocatedBalance, billTable.getSelectedRow(), 8);

            }
        }
    }
}
