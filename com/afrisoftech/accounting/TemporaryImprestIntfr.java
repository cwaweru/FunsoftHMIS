/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */
package com.afrisoftech.accounting;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author root
 */
public class TemporaryImprestIntfr extends javax.swing.JInternalFrame {

    /**
     * Creates new form loanpymntintfr
     */
    String desc = null;
    String billNo = null;
    String transNo = null;
    String payMode = null;
    String patientAcc = null;
    String cardNo = null;
    String AccDesc = null;
    String scheme = null;
    String cardName = null;
    String isurer = null;
    String expDate = null;
    String staffNo = null;
    String glAcc = null;
    String receiptNo1 = null;
    String actCode1 = null;
    String glCode1 = null;
    String bankAcc1 = null;
    String transNo1 = null;
    String actNames1 = null;
    String patCat1 = null;
    String patientAcc1 = null;
    String user = null;
    String glAcc1 = null;
    String accDesc1 = null;
    String name = null;
    String rname = null;
    String rcode = null;
    java.sql.Connection connectDB = null;
    String cashPoint = null;
    private java.lang.String shift_no = null;
    private java.lang.String cash_no = null;
    javax.swing.table.TableModel tableModel;
    private javax.swing.JComboBox cmbox;
    private javax.swing.JComboBox cmbox1;
    private javax.swing.JComboBox cmbox2;
    //   java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;

    public TemporaryImprestIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();

        System.out.println("Cashpoint : " + System.getProperty("cashpoint"));

        cashPointTxt.setText(getCashPoint());
        shiftNumberTxt.setText(getShiftNumber());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog11 = new javax.swing.JDialog();
        jSearchPanel11 = new javax.swing.JPanel();
        jTextField11111 = new javax.swing.JTextField();
        jSearchScrollPane11 = new javax.swing.JScrollPane();
        jSearchTable11 = new com.afrisoftech.dbadmin.JTable();
        jButton9 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton42 = new javax.swing.JButton();
        jButton52 = new javax.swing.JButton();
        jSearchDialog12 = new javax.swing.JDialog();
        jSearchPanel13 = new javax.swing.JPanel();
        jTextField11113 = new javax.swing.JTextField();
        jSearchScrollPane13 = new javax.swing.JScrollPane();
        jSearchTable13 = new com.afrisoftech.dbadmin.JTable();
        jButton512 = new javax.swing.JButton();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jTextField6 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        ApprovalTblscr = new javax.swing.JScrollPane();
        ApprovalTbl = new com.afrisoftech.dbadmin.JTable();
        jLabel76 = new javax.swing.JLabel();
        imprestTypeTxt = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        standingImprestHolderTxt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel31 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        paymentsTable = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        };
        jPanel10 = new javax.swing.JPanel();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jLabel53 = new javax.swing.JLabel();
        amountTxt = new javax.swing.JTextField();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        dealerCodeTxt = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        standingImprestAccount = new javax.swing.JTextField();
        standingImprestNumberTxt = new javax.swing.JTextField();
        temporaryImprestHolderTxt = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        departmentCmbx = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        requisitionNoTxt = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        savePrintBtn = new javax.swing.JButton();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        jButton12 = new javax.swing.JButton();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        saveOnlyBtn = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        shiftNumberTxt = new javax.swing.JTextField();
        jLabel131 = new javax.swing.JLabel();
        cashPointTxt = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();

        jSearchDialog11.setModal(true);
        jSearchDialog11.setUndecorated(true);
        jSearchDialog11.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel11.setLayout(new java.awt.GridBagLayout());

        jTextField11111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField11111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel11.add(jTextField11111, gridBagConstraints);

        jSearchTable11.setShowHorizontalLines(false);
        /*    try {
            searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
            searchRowSet.setConnectionSource(pConnDB);

            searchRowSet.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

            }));
            // jSearchScrollPane.setViewportView(jSearchTable);

        } catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        */
        jSearchTable11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable11MouseClicked(evt);
            }
        });
        jSearchScrollPane11.setViewportView(jSearchTable11);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel11.add(jSearchScrollPane11, gridBagConstraints);

        jButton9.setText("Dispose");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel11.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog11.getContentPane().add(jSearchPanel11, gridBagConstraints);

        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField111CaretUpdate(evt);
            }
        });
        jTextField111.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField111ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel.add(jTextField111, gridBagConstraints);

        jSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton42.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton42, gridBagConstraints);

        jButton52.setText("Dispose");
        jButton52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton52, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        jSearchDialog12.setModal(true);
        jSearchDialog12.setUndecorated(true);
        jSearchDialog12.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel13.setLayout(new java.awt.GridBagLayout());

        jTextField11113.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField11113CaretUpdate(evt);
            }
        });
        jTextField11113.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField11113ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel13.add(jTextField11113, gridBagConstraints);

        jSearchTable13.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable13.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable13MouseClicked(evt);
            }
        });
        jSearchScrollPane13.setViewportView(jSearchTable13);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel13.add(jSearchScrollPane13, gridBagConstraints);

        jButton512.setText("Close");
        jButton512.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton512ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel13.add(jButton512, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog12.getContentPane().add(jSearchPanel13, gridBagConstraints);

        setBorder(null);
        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Petty Cash Payments");
        setPreferredSize(new java.awt.Dimension(950, 526));
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jTextField6.setEditable(false);
        jTextField6.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField6.setPreferredSize(new java.awt.Dimension(0, 0));
        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jTextField6, gridBagConstraints);

        jTextField8.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField8.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        getContentPane().add(jTextField8, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select Imprest here", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanel7.setMinimumSize(new java.awt.Dimension(100, 250));
        jPanel7.setPreferredSize(new java.awt.Dimension(100, 250));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        ApprovalTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select distinct dealer_code, final_voucher_no from ac_petty_cash_requisition WHERE paid = false AND approved = true and commited = true ORDER BY 2 "));
        ApprovalTbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ApprovalTblMouseClicked(evt);
            }
        });
        ApprovalTblscr.setViewportView(ApprovalTbl);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 500.0;
        jPanel7.add(ApprovalTblscr, gridBagConstraints);

        jLabel76.setText("IMP no:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(jLabel76, gridBagConstraints);

        imprestTypeTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                imprestTypeTxtKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 4.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(imprestTypeTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(jPanel7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.4;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel6, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jPanel3.setLayout(new java.awt.GridBagLayout());

        standingImprestHolderTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(standingImprestHolderTxt, gridBagConstraints);

        jLabel9.setText("Temporary Imprest Holder");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel3.add(jLabel9, gridBagConstraints);

        jLabel2.setText("Standing Imprest Holder");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel3.add(jLabel2, gridBagConstraints);

        jLabel1.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel3.add(jLabel1, gridBagConstraints);

        jPanel31.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel31.setLayout(new java.awt.GridBagLayout());

        paymentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Purpose", "Reason", "Qty", "Amount", "Gl Acc"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        paymentsTable.setShowHorizontalLines(false);
        /*cmbox = new javax.swing.JComboBox();

        cmbox.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select code from ac_donor ORDER BY code"));
        javax.swing.table.TableColumn s = this.jTable1.getColumn("Donor");
        s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
        cmbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxActionPerformed(evt);
            }
        });

        cmbox1 = new javax.swing.JComboBox();

        cmbox1.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select code from ac_project ORDER BY code"));
        javax.swing.table.TableColumn t = this.jTable1.getColumn("Proj");
        t.setCellEditor(new javax.swing.DefaultCellEditor(cmbox1));
        cmbox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbox1ActionPerformed(evt);
            }
        });

        cmbox2 = new javax.swing.JComboBox();

        cmbox2.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select code from ac_branch ORDER BY code"));
        javax.swing.table.TableColumn n = this.jTable1.getColumn("Unit");
        n.setCellEditor(new javax.swing.DefaultCellEditor(cmbox2));
        cmbox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbox2ActionPerformed(evt);
            }
        });
        */

        javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 5; i++) {

            column = paymentsTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {
                if(i == 0){
                    column.setPreferredWidth(200);
                }else{
                    if( i == 2){
                        column.setPreferredWidth(50);
                    }else{
                        column.setPreferredWidth(100);
                    }
                }
            }

        }
        paymentsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paymentsTableMouseClicked(evt);
            }
        });
        paymentsTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                paymentsTableKeyReleased(evt);
            }
        });
        jScrollPane11.setViewportView(paymentsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 50.0;
        jPanel31.add(jScrollPane11, gridBagConstraints);

        jPanel10.setLayout(new java.awt.GridBagLayout());

        buttonGroup1.add(jCheckBox4);
        jCheckBox4.setSelected(true);
        jCheckBox4.setText("Search By Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel10.add(jCheckBox4, gridBagConstraints);

        buttonGroup1.add(jCheckBox5);
        jCheckBox5.setText("Search By Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel10.add(jCheckBox5, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel31.add(jPanel10, gridBagConstraints);

        jLabel53.setText("Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel31.add(jLabel53, gridBagConstraints);

        amountTxt.setEditable(false);
        amountTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        amountTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 50, 0, 10);
        jPanel31.add(amountTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jPanel3.add(jPanel31, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel3.add(datePicker1, gridBagConstraints);

        jLabel11.setText("Invoice Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel3.add(jLabel11, gridBagConstraints);

        jLabel12.setText("Voucher No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel3.add(jLabel12, gridBagConstraints);

        dealerCodeTxt.setEditable(false);
        dealerCodeTxt.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel3.add(dealerCodeTxt, gridBagConstraints);

        jLabel14.setText("Requisition No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel3.add(jLabel14, gridBagConstraints);

        jLabel15.setText("Standing Imprest GL Account");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel3.add(jLabel15, gridBagConstraints);

        standingImprestAccount.setEditable(false);
        standingImprestAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                standingImprestAccountActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(standingImprestAccount, gridBagConstraints);

        standingImprestNumberTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel3.add(standingImprestNumberTxt, gridBagConstraints);

        temporaryImprestHolderTxt.setEditable(false);
        temporaryImprestHolderTxt.setMinimumSize(new java.awt.Dimension(26, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel3.add(temporaryImprestHolderTxt, gridBagConstraints);

        jPanel8.setLayout(new java.awt.GridBagLayout());

        departmentCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '-' union select DISTINCT  depart_name FROM pb_main_department ORDER BY 1"));
        departmentCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departmentCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.9;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(departmentCmbx, gridBagConstraints);

        jLabel4.setText("Department");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel8.add(jLabel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jPanel8, gridBagConstraints);

        requisitionNoTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(requisitionNoTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jPanel3, gridBagConstraints);

        jPanel5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        savePrintBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/check.gif"))); // NOI18N
        savePrintBtn.setMnemonic('p');
        savePrintBtn.setText("Save & Print");
        savePrintBtn.setToolTipText("Click here enter data");
        savePrintBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePrintBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(savePrintBtn, gridBagConstraints);

        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/check.gif"))); // NOI18N
        jButton12.setMnemonic('p');
        jButton12.setText("Reprint");
        jButton12.setToolTipText("Click here enter data");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jButton12, gridBagConstraints);

        saveOnlyBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/check.gif"))); // NOI18N
        saveOnlyBtn.setMnemonic('s');
        saveOnlyBtn.setText("Save");
        saveOnlyBtn.setToolTipText("Click here enter data");
        saveOnlyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveOnlyBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(saveOnlyBtn, gridBagConstraints);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/note[1].gif"))); // NOI18N
        jButton2.setMnemonic('R');
        jButton2.setText("Remove Row");
        jButton2.setToolTipText("Click here to edit data");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jButton2, gridBagConstraints);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/minusarm.gif"))); // NOI18N
        jButton3.setMnemonic('l');
        jButton3.setText("Clear");
        jButton3.setToolTipText("Click here to clear textfields");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jButton3, gridBagConstraints);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/BD14755_.GIF"))); // NOI18N
        jButton4.setMnemonic('C');
        jButton4.setText("Close");
        jButton4.setToolTipText("Click here to close window");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(jButton4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jPanel5, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        shiftNumberTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel2.add(shiftNumberTxt, gridBagConstraints);

        jLabel131.setText("Shift No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel2.add(jLabel131, gridBagConstraints);

        cashPointTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.5;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(cashPointTxt, gridBagConstraints);

        jLabel10.setText("Cash Point");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel2.add(jLabel10, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        jPanel4.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.6;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel1, gridBagConstraints);

        setBounds(0, 0, 950, 526);
    }// </editor-fold>//GEN-END:initComponents
    private void populateTable12x(java.lang.String requisitioner) {
        int j = 0;
        int i = 0;

        try {

            java.sql.Statement stmtTable11 = connectDB.createStatement();

            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("select purpose,reason,quantity,sum(credit),code from ac_petty_cash_requisition where requisition_no ='" + requisitioner + "' AND approved = true AND paid = false GROUP By purpose,reason,quantity,code");

            while (rsetTable11.next()) {

                System.out.println("Working at table row " + i);
                paymentsTable.setValueAt(rsetTable11.getObject(1), i, 0);
                paymentsTable.setValueAt(rsetTable11.getObject(2), i, 1);
                paymentsTable.setValueAt(rsetTable11.getObject(3), i, 2);
                paymentsTable.setValueAt(rsetTable11.getObject(4), i, 3);
                paymentsTable.setValueAt(rsetTable11.getObject(5), i, 4);

                i++;

            }

        } catch (java.sql.SQLException sqlExec) {
            sqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
    }
    private void jButton512ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton512ActionPerformed
        jSearchDialog12.dispose();
    }//GEN-LAST:event_jButton512ActionPerformed

    private void jSearchTable13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable13MouseClicked
        standingImprestNumberTxt.setText(jSearchTable13.getValueAt(jSearchTable13.getSelectedRow(), 0).toString());
        for (int k = 0; k < paymentsTable.getRowCount(); k++) {
            for (int r = 0; r < paymentsTable.getColumnCount(); r++) {
                paymentsTable.getModel().setValueAt(null, k, r);
            }
        }
        amountTxt.setText("");
        int j = 0;
        int i = 0;
        try {
            java.sql.Statement stmtTable1 = connectDB.createStatement();

            java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT description, reason,'1',sum(credit-debit),activity_code  FROM ac_ledger WHERE voucher_no = '" + standingImprestNumberTxt.getText() + "'  and dealer ilike '%" + temporaryImprestHolderTxt.getText() + "%' group by description, reason,activity_code");

            while (rsetTable1.next()) {

                System.out.println("Working at table row " + i);
                paymentsTable.setValueAt(rsetTable1.getObject(1), i, 0);
                paymentsTable.setValueAt(rsetTable1.getObject(2), i, 1);
                paymentsTable.setValueAt(rsetTable1.getObject(3), i, 2);
                paymentsTable.setValueAt(rsetTable1.getObject(4), i, 3);
                paymentsTable.setValueAt(rsetTable1.getObject(5), i, 4);
                i++;
                java.sql.Statement stmtTable11 = connectDB.createStatement();

                java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT sum(credit-debit)  FROM ac_ledger WHERE voucher_no = '" + standingImprestNumberTxt.getText() + "' and dealer ilike '" + temporaryImprestHolderTxt.getText() + "' ");

                while (rsetTable11.next()) {
                    amountTxt.setText(rsetTable11.getObject(1).toString());
                }

            }

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

            // }
        }
        jSearchDialog12.dispose();          // Add your handling code here:
    }//GEN-LAST:event_jSearchTable13MouseClicked

    private void jTextField11113ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField11113ActionPerformed
// Add your handling code here:
    }//GEN-LAST:event_jTextField11113ActionPerformed

    private void jTextField11113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11113CaretUpdate
        for (int k = 0; k < paymentsTable.getRowCount(); k++) {
            for (int r = 0; r < paymentsTable.getColumnCount(); r++) {
                paymentsTable.getModel().setValueAt(null, k, r);
            }
        }
        jSearchTable13.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct trim(voucher_no) as invoice_no,sum(credit-debit) as amount from ac_ledger where voucher_no ILIKE '" + jTextField11113.getText().toString() + "%' and dealer = '" + this.temporaryImprestHolderTxt.getText() + "' GROUP BY 1  HAVING 2 > 0 ORDER BY invoice_no"));
        jSearchTable13.setShowHorizontalLines(false);
        jSearchScrollPane13.setViewportView(jSearchTable13);

    }//GEN-LAST:event_jTextField11113CaretUpdate

    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate
        if (this.jTextField111.getCaretPosition() < 1) {
            System.out.print("Nothing");
        } else {
            jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select code,supplier_name as name from st_suppliers where supplier_name ILIKE '" + jTextField111.getText() + "%' order by supplier_name"));

            jSearchScrollPane.setViewportView(jSearchTable);
            System.out.println("Cannot sort out");

        }           // Add your handling code here:
    }//GEN-LAST:event_jTextField111CaretUpdate

    private void jTextField111ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField111ActionPerformed
// Add your handling code here:
    }//GEN-LAST:event_jTextField111ActionPerformed

    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        temporaryImprestHolderTxt.setText(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1).toString());

        //  this.populateTable1(jTextField9.getText());
        this.jSearchDialog.dispose();     // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked

    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed
        this.jSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton52ActionPerformed
    private void searchButton22Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.temporaryImprestHolderTxt.getLocationOnScreen();

        jSearchDialog.setSize(300, 200);

        jSearchDialog.setLocation(point);

        jSearchDialog.setVisible(true);

    }

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed

        java.util.Calendar calendar = java.util.Calendar.getInstance();

        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql = new java.sql.Date(dateNow);

        System.out.println(datenowSql.toString());
        try {

            String glAcc = null;
            String Activity = null;
            String userName = null;
            String voucherNo = null;
            String transNo = null;
            String Stock = null;
            String voucNo = null;
            String accountCode = null;
            String TransNo = null;
            String glType = null;
            try {
                connectDB.setAutoCommit(false);
                // jButton11ActionPerformed(evt);

                if (dealerCodeTxt.getText().equalsIgnoreCase("-")) {
                    java.sql.Statement stm1 = connectDB.createStatement();
                    java.sql.ResultSet rse1 = stm1.executeQuery("select lpad(currval('pet_voucher_no')::text,5,0::text)");
                    while (rse1.next()) {

                        voucherNo = rse1.getObject(1).toString();
                        // transNo = rse1.getObject(2).toString();
                    }
                } else {
                    java.sql.Statement stm1 = connectDB.createStatement();
                    java.sql.ResultSet rse1 = stm1.executeQuery("select nextval('transaction_no_seq')");
                    while (rse1.next()) {

                        voucherNo = dealerCodeTxt.getText();
                        // transNo = rse1.getObject(1).toString();
                    }

                }
                connectDB.commit();
                connectDB.setAutoCommit(true);
                com.afrisoftech.reports.PettyNgoPayVoucherPdf policy = new com.afrisoftech.reports.PettyNgoPayVoucherPdf();
                policy.PettyNgoPayVoucherPdf(connectDB, voucherNo);

                for (int k = 0; k < paymentsTable.getRowCount(); k++) {
                    for (int r = 0; r < paymentsTable.getColumnCount(); r++) {
                        paymentsTable.getModel().setValueAt(null, k, r);
                    }
                }
                savePrintBtn.setEnabled(false);
                saveOnlyBtn.setEnabled(false);
                //                crset1.execute();

            } catch (java.sql.SQLException sq) {
                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                System.out.println(sq.getMessage());
            }

        } catch (java.lang.Exception ex) {
            System.out.println(ex.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }       // Add your handling code here:
    }//GEN-LAST:event_jButton12ActionPerformed

    private void paymentsTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paymentsTableKeyReleased
        if (paymentsTable.getModel().getValueAt(paymentsTable.getSelectedRow(), 3) != null) {
            if (paymentsTable.getSelectedColumn() == paymentsTable.getSelectedColumn()) {
                float resVal = java.lang.Float.parseFloat(paymentsTable.getValueAt(paymentsTable.getSelectedRow(), 3).toString());

                java.lang.Float resFloat = new java.lang.Float(resVal);

                paymentsTable.setValueAt(resFloat, paymentsTable.getSelectedRow(), 3);

                double tableSum = java.lang.Double.parseDouble(resFloat.toString());
                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(paymentsTable, 3);
                amountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
            }
        }        // Add your handling code here:
    }//GEN-LAST:event_paymentsTableKeyReleased
    private void populateTable1(java.lang.String patient_no) {
        int j = 0;
        int i = 0;

        try {
            java.sql.Statement stmtTable11 = connectDB.createStatement();

            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT count(voucher_no)  FROM ac_petty_cash WHERE voucher_no = '" + patient_no + "' and date = '" + datePicker1.getDate() + "'");

            while (rsetTable11.next()) {
                j = rsetTable11.getInt(1);
            }
            if (j > 0) {
                java.sql.Statement stmtTable1 = connectDB.createStatement();

                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT description,status,1,credit,code  FROM ac_petty_cash WHERE voucher_no = '" + patient_no + "' and date = '" + datePicker1.getDate() + "' and credit > 0");

                while (rsetTable1.next()) {

                    System.out.println("Working at table row " + i);
                    paymentsTable.setValueAt(rsetTable1.getObject(1), i, 0);
                    paymentsTable.setValueAt(rsetTable1.getObject(2), i, 1);
                    paymentsTable.setValueAt(rsetTable1.getObject(3), i, 2);
                    paymentsTable.setValueAt(rsetTable1.getObject(4), i, 3);
                    paymentsTable.setValueAt(rsetTable1.getObject(5), i, 4);

                    i++;

                }
                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("SELECT sum(credit) FROM ac_petty_cash WHERE voucher_no = '" + patient_no + "' and date = '" + datePicker1.getDate() + "'");
                while (rset1.next()) {
                    amountTxt.setText(rset1.getObject(1).toString());
                }
            }

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
    }
    private void saveOnlyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveOnlyBtnActionPerformed
        java.util.Date periodFrom = null;
        java.util.Date periodTo = null;

        try {

            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + datePicker1.getDate() + "' BETWEEN period_from AND period_to");
            while (rsetf.next()) {
                periodFrom = rsetf.getDate(1);
                periodTo = rsetf.getDate(2);
            }

        } catch (java.sql.SQLException sq) {
            sq.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());

        }

        if (datePicker1.getDate().before(periodFrom) || datePicker1.getDate().after(periodTo)) {
            javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        } else {
            if (paymentsTable.isEditing()) {
                paymentsTable.getCellEditor().stopCellEditing();
            }
            java.util.Calendar calendar = java.util.Calendar.getInstance();

            long dateNow = calendar.getTimeInMillis();

            java.sql.Date datenowSql = new java.sql.Date(dateNow);

            System.out.println(datenowSql.toString());
            try {

                String glAcc = null;
                String Activity = null;
                String userName = null;
                String voucherNo = null;
                String transNo = null;
                String Stock = null;
                String voucNo = null;
                String accountCode = null;
                String TransNo = null;
                String glType = null;
                String user = null;

                try {
                    connectDB.setAutoCommit(false);
                    java.sql.Statement ps = connectDB.createStatement();
                    java.sql.ResultSet rs2 = ps.executeQuery("select nextval('transaction_no_seq'),current_user");
                    while (rs2.next()) {
                        transNo = rs2.getObject(1).toString();
                        user = rs2.getObject(2).toString();
                    }
                    for (int x = 0; x < paymentsTable.getRowCount(); x++) {

                        if (paymentsTable.getValueAt(x, 3) != null) {

                            java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("INSERT INTO"
                                    + "  ac_petty_cash(activity_code, activity, payee, description, debit,"
                                    + "  credit, paid, voucher_no, date, approved, department, requisitioner,"
                                    + "  status, document, transaction_no, cash_point, shift_no, request_no,"
                                    + " code, requisition_no, donor, proj, branch, user_name, staff_veh) "
                                    + "    VALUES (?, ?, ?, ?, ?, ?, ?,  "
                                    + "            ?, ?, ?, ?, ?,  "
                                    + "            ?, ?, ?, ?, ?, ?, ?,  "
                                    + "            ?, ?, ?, ?, ?, ? )");
                            pstmt1.setObject(1, standingImprestAccount.getText());
                            pstmt1.setString(2, paymentsTable.getValueAt(x, 0).toString());
                            pstmt1.setObject(3, temporaryImprestHolderTxt.getText());
                            pstmt1.setString(4, paymentsTable.getValueAt(x, 1).toString());
                            pstmt1.setDouble(5, 0.00);//debit or issues 
                            pstmt1.setDouble(6, java.lang.Double.valueOf(paymentsTable.getValueAt(x, 3).toString()));
                            pstmt1.setBoolean(7, true);
                            pstmt1.setString(8, requisitionNoTxt.getText().toString());
                            pstmt1.setDate(9, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                            pstmt1.setBoolean(10, true);
                            pstmt1.setString(11, departmentCmbx.getSelectedItem().toString());
                            pstmt1.setString(12, standingImprestHolderTxt.getText());
                            pstmt1.setString(13, "Payment Done");
                            pstmt1.setString(14, standingImprestNumberTxt.getText());
                            pstmt1.setString(15, transNo);
                            pstmt1.setString(16, cashPointTxt.getText());
                            pstmt1.setString(17, shiftNumberTxt.getText());
                            pstmt1.setString(18, "");
                            pstmt1.setString(19, "");
                            pstmt1.setString(20, "");
                            pstmt1.setString(21, "");
                            pstmt1.setString(22, "");
                            pstmt1.setString(23, "");
                            pstmt1.setString(24, user);
                            pstmt1.setString(25, dealerCodeTxt.getText());
                            pstmt1.executeUpdate();

                            java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
                            pstmt2.setObject(1, paymentsTable.getValueAt(x, 4).toString());
                            pstmt2.setString(2, com.afrisoftech.lib.GLCodesFactory.getActivityDescription(connectDB, paymentsTable.getValueAt(x, 4).toString()));
                            pstmt2.setString(3, dealerCodeTxt.getText());
                            pstmt2.setString(4, temporaryImprestHolderTxt.getText());
                            pstmt2.setString(5, paymentsTable.getValueAt(x, 1).toString());
                            pstmt2.setString(6, requisitionNoTxt.getText().toString());
                            pstmt2.setString(7, standingImprestHolderTxt.getText());
                            pstmt2.setString(8, "");
                            pstmt2.setString(9, standingImprestHolderTxt.getText());
                            pstmt2.setString(10, "Cash");//jComboBox1.getSelectedItem().toString());
                            pstmt2.setString(11, "");
                            pstmt2.setString(12, "");
                            pstmt2.setString(13, "");
                            pstmt2.setString(14, paymentsTable.getValueAt(x, 1).toString());
                            pstmt2.setString(15, "Expenses");
                            pstmt2.setDouble(16, java.lang.Double.valueOf(paymentsTable.getValueAt(x, 3).toString()));
                            pstmt2.setDouble(17, 0.00);
                            pstmt2.setDate(18, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //
                            pstmt2.setString(19, transNo);
                            pstmt2.setBoolean(20, false);
                            pstmt2.setBoolean(21, false);
                            pstmt2.setBoolean(22, false);
                            pstmt2.setString(23, user);
                            pstmt2.execute();
//
//                            java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("INSERT INTO"
//                                    + "  ac_petty_cash(activity_code, activity, payee, description, debit,"
//                                    + "  credit, paid, voucher_no, date, approved, department, requisitioner,"
//                                    + "  status, document, transaction_no, cash_point, shift_no, request_no,"
//                                    + " code, requisition_no, donor, proj, branch, user_name, staff_veh) "
//                                    + "    VALUES (?, ?, ?, ?, ?, ?, ?, " + "            ?, ?, ?, ?, ?,  "
//                                    + "            ?, ?, ?, ?, ?, ?, ?," + "            ?, ?, ?, ?, ?, ? )");
//                            pstmt2.setObject(1, paymentsTable.getValueAt(x, 4).toString());
//                            pstmt2.setString(2, paymentsTable.getValueAt(x, 0).toString());
//                            pstmt2.setObject(3, temporaryImprestHolderTxt.getText());
//                            pstmt2.setString(4, paymentsTable.getValueAt(x, 1).toString());
//                            pstmt2.setDouble(5, java.lang.Double.valueOf(paymentsTable.getValueAt(x, 3).toString()));
//                            pstmt2.setDouble(6, 0.00);
//                            pstmt2.setBoolean(7, true);
//                            pstmt2.setString(8, requisitionNoTxt.getText().toString());
//                            pstmt2.setDate(9, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
//                            pstmt2.setBoolean(10, true);
//                            pstmt2.setString(11, departmentCmbx.getSelectedItem().toString());
//                            pstmt2.setString(12, standingImprestHolderTxt.getText());
//                            pstmt2.setString(13, "Payment Issued");
//                            pstmt2.setString(14, standingImprestNumberTxt.getText());
//                            pstmt2.setString(15, transNo);
//                            pstmt2.setString(16, cashPointTxt.getText());
//                            pstmt2.setString(17, shiftNumberTxt.getText());
//                            pstmt2.setString(18, "");
//                            pstmt2.setString(19, "");
//                            pstmt2.setString(20, "");
//                            pstmt2.setString(21, "");
//                            pstmt2.setString(22, "");
//                            pstmt2.setString(23, "");
//                            pstmt2.setString(24, user);
//                            pstmt2.setString(25, dealerCodeTxt.getText());
//                            pstmt2.executeUpdate();

                            java.sql.PreparedStatement pstmt22 = connectDB.prepareStatement("UPDATE ac_petty_cash_requisition SET paid = 'true', debit = " + java.lang.Double.valueOf(paymentsTable.getValueAt(x, 3).toString()) + " WHERE (requisition_no = '" + requisitionNoTxt.getText().toString() + "' or final_voucher_no = '" + requisitionNoTxt.getText().toString() + "')");
                            pstmt22.executeUpdate();

                            double surrenderedAmount = 0;
                            java.sql.Statement stmtget = connectDB.createStatement();
                            java.sql.ResultSet rsetget = stmtget.executeQuery("SELECT CASE WHEN surrender_amount::numeric IS NULL THEN (0.00)  \n"
                                    + "ELSE (surrender_amount::numeric) END AS surrender_amount from ac_bills where (final_voucher_no = '" + paymentsTable.getValueAt(x, 0).toString() + "' or voucher_no = '" + paymentsTable.getValueAt(x, 0).toString() + "')");
                            while (rsetget.next()) {
                                surrenderedAmount = Double.valueOf(rsetget.getString(1));
                                System.out.println("loop amount " + Double.valueOf(rsetget.getString(1)));

                            }
                            System.out.println("surrenderd amount before " + surrenderedAmount);
                            System.out.println("Text field amount " + Double.valueOf(amountTxt.getText()));
                            surrenderedAmount = surrenderedAmount + Double.valueOf(amountTxt.getText());

                            java.sql.PreparedStatement stmtBill = connectDB.prepareStatement("update ac_bills set surrender_amount = ? where (final_voucher_no = '" + paymentsTable.getValueAt(x, 0).toString() + "' or voucher_no = '" + paymentsTable.getValueAt(x, 0).toString() + "')");
                            stmtBill.setObject(1, surrenderedAmount);
                            System.out.println("finally surrendered amount " + surrenderedAmount);
                            stmtBill.executeUpdate();

                            //Decommit personal claims from vote book
                            if (paymentsTable.getValueAt(x, 0).toString().contains("P_IMPREST")) {
                                com.afrisoftech.lib.VoteBook.decommitVoteBook(connectDB, standingImprestNumberTxt.getText(), java.lang.Double.valueOf(paymentsTable.getValueAt(x, 3).toString()));
                            }
                        }

                    }
                    connectDB.commit();
                    connectDB.setAutoCommit(true);
                    java.sql.PreparedStatement pstmt91 = connectDB.prepareStatement("UPDATE ac_dashboard SET cash=now(),cash_by=current_user where voucher_no = '" + requisitionNoTxt.getText().toString() + "' and supplier ILIKE '" + this.temporaryImprestHolderTxt.getText() + "'");
                    pstmt91.executeUpdate();
                    ApprovalTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct dealer_code, final_voucher_no from ac_petty_cash_requisition WHERE paid = false AND approved = true and commited = true ORDER BY 2 "));
                    //   requisitionNumberCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select distinct requisition_no from ac_petty_cash_requisition WHERE paid = false AND approved = true ORDER BY requisition_no "));
                    javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully", "Comfirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select distinct requisition_no from ac_petty_cash_requisition WHERE paid = false AND approved = true ORDER BY 1 ");

                    for (int k = 0; k < paymentsTable.getRowCount(); k++) {
                        for (int r = 0; r < paymentsTable.getColumnCount(); r++) {
                            paymentsTable.getModel().setValueAt(null, k, r);
                        }
                    }
                    amountTxt.setText("0.00");
                    dealerCodeTxt.setText("-");
                    savePrintBtn.setEnabled(false);
                    saveOnlyBtn.setEnabled(false);

                    //                crset1.execute();
                } catch (Exception sq) {
                    sq.printStackTrace();
                    try {
                        connectDB.rollback();
                    } catch (java.sql.SQLException sql) {
                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    System.out.println(sq.getMessage());
                }

            } catch (Exception ex) {
                ex.printStackTrace();
                System.out.println(ex.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }
        }        // Add your handling code here:
    }//GEN-LAST:event_saveOnlyBtnActionPerformed

    private void departmentCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departmentCmbxActionPerformed
        savePrintBtn.setEnabled(true);
        saveOnlyBtn.setEnabled(true);      // Add your handling code here:
    }//GEN-LAST:event_departmentCmbxActionPerformed

    private void jSearchTable11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable11MouseClicked
        paymentsTable.setValueAt(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 0), paymentsTable.getSelectedRow(), 0);
        paymentsTable.setValueAt(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 1), paymentsTable.getSelectedRow(), 4);
        this.jSearchDialog11.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable11MouseClicked

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        this.jSearchDialog11.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jTextField11111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11111CaretUpdate
        if (jCheckBox5.isSelected()) {
            jSearchTable11.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT activity,code from pb_activity WHERE activity ILIKE '%" + jTextField11111.getText() + "%' order by activity"));

            jSearchScrollPane11.setViewportView(jSearchTable11);
        } else {
            jSearchTable11.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT activity,code from pb_activity where code ILIKE '" + jTextField11111.getText() + "%' order by code"));

            jSearchScrollPane11.setViewportView(jSearchTable11);
        }

        // Add your handling code here:
    }//GEN-LAST:event_jTextField11111CaretUpdate

    private void paymentsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paymentsTableMouseClicked
//        if (paymentsTable.getSelectedColumn() == 0) {
//            this.cmboxMouseClicked();
//        }
        // Add your handling code here:
    }//GEN-LAST:event_paymentsTableMouseClicked
    private void cmboxMouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane11.getLocationOnScreen();
        jSearchDialog11.setSize(400, 200);
        jSearchDialog11.setLocation(point);
        jSearchDialog11.setVisible(true);
    }


    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed
    private void populateTable11(java.lang.String requisitioner) {
        int j = 0;
        int i = 0;

        try {
            java.sql.Statement stmtTable1 = connectDB.createStatement();

            /* java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select count(requisition_no) from ac_petty_cash_requisition where requisitioner ='"+requisitioner+"' AND approved = true AND paid = false");
            
             while (rsetTable1.next()) {
             j = rsetTable1.getInt(1);
             }
             if (j > 0) {
             */
            java.sql.Statement stmtTable11 = connectDB.createStatement();

            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("select purpose,reason,quantity,sum(credit),code from ac_petty_cash_requisition where requisition_no ='" + requisitioner + "' AND approved = true AND paid = false GROUP By purpose,reason,quantity,code");

            while (rsetTable11.next()) {

                System.out.println("Working at table row " + i);
                paymentsTable.setValueAt(rsetTable11.getObject(1), i, 0);
                paymentsTable.setValueAt(rsetTable11.getObject(2), i, 1);
                paymentsTable.setValueAt(rsetTable11.getObject(3), i, 2);
                paymentsTable.setValueAt(rsetTable11.getObject(4), i, 3);
                paymentsTable.setValueAt(rsetTable11.getObject(5), i, 4);
                ///  jTable11.setValueAt(rsetTable11.getObject(6), i, 6);

                i++;

                //                i = i + i;
                //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
            }
            //}

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
    }
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        for (int k = 0; k < paymentsTable.getRowCount(); k++) {
            for (int r = 0; r < paymentsTable.getColumnCount(); r++) {
                paymentsTable.getModel().setValueAt(null, k, r);
            }
        }
        amountTxt.setText("");
        standingImprestHolderTxt.setText("");
        savePrintBtn.setEnabled(true);
        //   jTextField31.setText("");

        //        this.jComboBox131.setSelectedItem(null);
        // Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        int rows2Delete = paymentsTable.getSelectedRowCount();

        int[] selectedRows = paymentsTable.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) paymentsTable.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) paymentsTable.getModel();

                defTableModel.removeRow(paymentsTable.getSelectedRow());
            }
        }
        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(paymentsTable, 3);
        amountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));

        //   javax.swing.JFrame other = new OtherPayments(connectDB, pConnDB);
        //   other.setVisible(true);  // Add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void savePrintBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePrintBtnActionPerformed

        java.util.Calendar calendar = java.util.Calendar.getInstance();

        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql = new java.sql.Date(dateNow);

        System.out.println(datenowSql.toString());
        try {

            String glAcc = null;
            String Activity = null;
            String userName = null;
            String voucherNo = null;
            String transNo = null;
            String Stock = null;
            String voucNo = null;
            String accountCode = null;
            String TransNo = null;
            String glType = null;
//            try {
//                connectDB.setAutoCommit(false);
            saveOnlyBtnActionPerformed(evt);

            /*
             java.sql.Statement stm1 = connectDB.createStatement();
             java.sql.ResultSet rse1 = stm1.executeQuery("select lpad(currval('pet_voucher_no'),5,0)");
             while (rse1.next()){
               
             voucherNo = rse1.getObject(1).toString();
             }*/
//                if (dealerCodeTxt.getText().equalsIgnoreCase("-")) {
//                    java.sql.Statement stm1 = connectDB.createStatement();
//                    java.sql.ResultSet rse1 = stm1.executeQuery("select lpad(currval('pet_voucher_no')::text,5,0::text)");
//                    while (rse1.next()) {
//
//                        voucherNo = rse1.getObject(1).toString();
//                        // transNo = rse1.getObject(2).toString();
//                    }
//                } else {
//                    java.sql.Statement stm1 = connectDB.createStatement();
//                    java.sql.ResultSet rse1 = stm1.executeQuery("select nextval('transaction_no_seq')");
//                    while (rse1.next()) {
//
//                        voucherNo = dealerCodeTxt.getText();
//
//                    }
//
//                }
//                connectDB.commit();
//                connectDB.setAutoCommit(true);
            com.afrisoftech.reports.PettyNgoPayVoucherPdf policy = new com.afrisoftech.reports.PettyNgoPayVoucherPdf();
            policy.PettyNgoPayVoucherPdf(connectDB, requisitionNoTxt.getText());
            //policy.PettyNgoPayVoucherPdf(connectDB, voucherNo);

            for (int k = 0; k < paymentsTable.getRowCount(); k++) {
                for (int r = 0; r < paymentsTable.getColumnCount(); r++) {
                    paymentsTable.getModel().setValueAt(null, k, r);
                }
            }
            savePrintBtn.setEnabled(false);
            saveOnlyBtn.setEnabled(false);
                //                crset1.execute();

//            } catch (java.sql.SQLException sq) {
//                sq.printStackTrace();
////                try {
////                    connectDB.rollback();
////                } catch (java.sql.SQLException sql) {
////                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
////                }
//                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
//                System.out.println(sq.getMessage());
//            }
        } catch (java.lang.Exception ex) {
            System.out.println(ex.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }
        // Add your handling code here:
    }//GEN-LAST:event_savePrintBtnActionPerformed

    private void standingImprestAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_standingImprestAccountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_standingImprestAccountActionPerformed

    private void ApprovalTblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ApprovalTblMouseClicked

        for (int k = 0; k < paymentsTable.getRowCount(); k++) {
            for (int r = 0; r < paymentsTable.getColumnCount(); r++) {
                paymentsTable.getModel().setValueAt(null, k, r);
            }
        }
        savePrintBtn.setEnabled(true);
        saveOnlyBtn.setEnabled(true);
        requisitionNoTxt.setText(ApprovalTbl.getModel().getValueAt(ApprovalTbl.getSelectedRow(), 1).toString());
        try {
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select requisitioner,payee,department,date_required, dealer_code from ac_petty_cash_requisition where (requisition_no ='" + ApprovalTbl.getModel().getValueAt(ApprovalTbl.getSelectedRow(), 1) + "' or final_voucher_no ='" + ApprovalTbl.getModel().getValueAt(ApprovalTbl.getSelectedRow(), 1) + "' ) AND approved = true AND paid = false");
            while (rset.next()) {

                standingImprestHolderTxt.setText(rset.getObject(1).toString());
                temporaryImprestHolderTxt.setText(rset.getObject(2).toString());
                dealerCodeTxt.setText(rset.getString(5));

                java.text.DateFormat df = java.text.DateFormat.getDateInstance();

                java.text.SimpleDateFormat sdf = (java.text.SimpleDateFormat) df;

                sdf.applyPattern("yyyy-MM-dd");

                try {
                    datePicker1.setDate(sdf.parse(rset.getObject(4).toString()));
                } catch (java.text.ParseException pe) {
                    javax.swing.JOptionPane.showMessageDialog(this, pe.getMessage());
                }
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }

        try {
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select SUM(credit) from ac_petty_cash_requisition where (requisition_no ='" + ApprovalTbl.getModel().getValueAt(ApprovalTbl.getSelectedRow(), 1) + "' or final_voucher_no ='" + ApprovalTbl.getModel().getValueAt(ApprovalTbl.getSelectedRow(), 1) + "') AND approved = true AND paid = false");
            while (rset.next()) {

                amountTxt.setText(rset.getObject(1).toString());

            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }
        try {
            java.sql.PreparedStatement pstmtt = connectDB.prepareStatement("SELECT code FROM pb_activity WHERE activity ilike '%Standing Imprest%'");
            java.sql.ResultSet rstmt = pstmtt.executeQuery();
            while (rstmt.next()) {
                standingImprestAccount.setText(rstmt.getString(1));
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            Logger.getLogger(TemporaryImprestIntfr.class.getName()).log(Level.SEVERE, null, ex);
        }

        //this.populateTable12x(this.ApprovalTbl.getModel().getValueAt(ApprovalTbl.getSelectedRow(), 1).toString());
        paymentsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select purpose,reason,quantity,sum(credit),code from ac_petty_cash_requisition where (requisition_no ='" + ApprovalTbl.getModel().getValueAt(ApprovalTbl.getSelectedRow(), 1) + "' or final_voucher_no ='" + ApprovalTbl.getModel().getValueAt(ApprovalTbl.getSelectedRow(), 1) + "') AND approved = true AND paid = false GROUP By purpose,reason,quantity,code"));
    }//GEN-LAST:event_ApprovalTblMouseClicked

    private void imprestTypeTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_imprestTypeTxtKeyPressed

        ApprovalTbl.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct dealer_code, final_voucher_no from ac_petty_cash_requisition WHERE (payee ilike '%" + imprestTypeTxt.getText().toString() + "%' or dealer_code ilike '%" + imprestTypeTxt.getText().toString() + "%') and paid = false AND approved = true ORDER BY final_voucher_no "));
    }//GEN-LAST:event_imprestTypeTxtKeyPressed
    public java.lang.String getShiftNumber() {

        try {

            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("select pett_point from ac_cash_points_setup where description = current_user");
            while (rsetf.next()) {
                cashPoint = rsetf.getObject(1).toString();

            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("select not successful");
        }
        try {

            java.sql.Statement stmt = connectDB.createStatement();

            // java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE cash_point = '"+System.getProperty("cashpoint")+"' AND user_name = current_user AND (status = 'Running' OR status = 'Suspended')");
            java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE cash_point = '" + cashPoint + "' AND user_name = current_user AND (status = 'Running' OR status = 'Suspended')");

            while (rset.next()) {

                shift_no = rset.getString(1);

            }

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        return shift_no;

    }

    public java.lang.String getCashPoint() {

        try {

            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("select pett_point from ac_cash_points_setup where description = current_user");
            while (rsetf.next()) {
                cashPoint = rsetf.getObject(1).toString();

            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("select not successful");
        }
        try {

            java.sql.Statement stmt = connectDB.createStatement();

            // java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE cash_point = '"+System.getProperty("cashpoint")+"' AND user_name = current_user AND (status = 'Running' OR status = 'Suspended')");
            java.sql.ResultSet rset = stmt.executeQuery("SELECT cash_point FROM ac_shifts WHERE cash_point = '" + cashPoint + "' AND user_name = current_user AND (status = 'Running' OR status = 'Suspended')");

            while (rset.next()) {

                cash_no = rset.getString(1);

            }

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        return cash_no;

    }

    private void cmboxActionPerformed(java.awt.event.ActionEvent evt) {
    }

    private void cmbox1ActionPerformed(java.awt.event.ActionEvent evt) {
    }

    private void cmbox2ActionPerformed(java.awt.event.ActionEvent evt) {
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ApprovalTbl;
    private javax.swing.JScrollPane ApprovalTblscr;
    private javax.swing.JTextField amountTxt;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JTextField cashPointTxt;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private javax.swing.JTextField dealerCodeTxt;
    private javax.swing.JComboBox departmentCmbx;
    private javax.swing.JTextField imprestTypeTxt;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    public javax.swing.JButton jButton4;
    private javax.swing.JButton jButton42;
    private javax.swing.JButton jButton512;
    private javax.swing.JButton jButton52;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel131;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JDialog jSearchDialog11;
    private javax.swing.JDialog jSearchDialog12;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jSearchPanel11;
    private javax.swing.JPanel jSearchPanel13;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane11;
    private javax.swing.JScrollPane jSearchScrollPane13;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTable jSearchTable11;
    private javax.swing.JTable jSearchTable13;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JTextField jTextField11111;
    private javax.swing.JTextField jTextField11113;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTable paymentsTable;
    private javax.swing.JTextField requisitionNoTxt;
    private javax.swing.JButton saveOnlyBtn;
    private javax.swing.JButton savePrintBtn;
    private javax.swing.JTextField shiftNumberTxt;
    private javax.swing.JTextField standingImprestAccount;
    private javax.swing.JTextField standingImprestHolderTxt;
    private javax.swing.JTextField standingImprestNumberTxt;
    private javax.swing.JTextField temporaryImprestHolderTxt;
    // End of variables declaration//GEN-END:variables
}
