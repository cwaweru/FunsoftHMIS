
/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */

package com.afrisoftech.accounting;

import java.sql.SQLException;
import java.util.Date;
//

/**
 *
 * @author  root
 */
public class BankReconintfr extends javax.swing.JInternalFrame {
    
    /** Creates new form loanpymntintfr */
    java.sql.Connection connectDB = null;
    
    javax.swing.table.TableModel tableModel = null;
    
    javax.swing.JSpinner beginDateSpinner = null;
    
    javax.swing.JSpinner endDateSpinner = null;
    
    
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    
    
    public BankReconintfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {
        
        connectDB = connDb;
        
        pConnDB = pconnDB;
        
        initComponents();
        cashBookBal.setText("0.00");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        try  {
            java.lang.Class.forName("org.postgresql.Driver");
            System.out.println("Found driver");
        } catch(java.lang.ClassNotFoundException cnf){
            System.out.println("driver not found");
        }
        reconcileAccountBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        closeFormBtn = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        datePicker2 = new com.afrisoftech.lib.DatePicker();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        datePicker3 = new com.afrisoftech.lib.DatePicker();
        jPanel6 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        jToggleButton1 = new javax.swing.JToggleButton();
        chequeNoTxt = new javax.swing.JTextField();
        netBalanceTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        unbalancedAmountTxt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        unbalancedItemsTxt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        unbalancedItemsValueTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        amountTxt = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        reconciliationTable = new com.afrisoftech.dbadmin.JTable();
        bankAccountName = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cashBookNoCmb = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        actualBankBal = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        cashBookBal = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        saveActualAmountOnlyBtn = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Bank Reconciliation");
        setToolTipText("Actual Bank Balance field is mandatory");
        setVisible(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        reconcileAccountBtn.setMnemonic('O');
        reconcileAccountBtn.setText("Reconcile Account");
        reconcileAccountBtn.setToolTipText("Click here to enter data");
        reconcileAccountBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reconcileAccountBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(reconcileAccountBtn, gridBagConstraints);

        clearBtn.setMnemonic('l');
        clearBtn.setText("Clear entries");
        clearBtn.setToolTipText("Click here to clear fields");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(clearBtn, gridBagConstraints);

        closeFormBtn.setMnemonic('C');
        closeFormBtn.setText("Close reconciliation form");
        closeFormBtn.setToolTipText("Click here to close ");
        closeFormBtn.setSelected(true);
        closeFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(closeFormBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jSeparator1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jSeparator2, gridBagConstraints);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jLabel7, gridBagConstraints);

        /*        try {
            java.text.DateFormat dateFormat = java.text.DateFormat.getDateInstance(java.text.DateFormat.MEDIUM);
            java.util.Date dateInstance = java.util.Calendar.getInstance().getTime();
            //        java.lang.String dateString2Parse = null;
            //        dateString2Parse = String.valueOf(dateInstance.getDate())+"-"+String.valueOf(dateInstance.getMonth()+1)+"-200"+String.valueOf(dateInstance.getYear()-100);

            java.util.Date formattedDate = dateFormat.parse(dateInstance.toLocaleString());
            System.out.println(dateFormat.format(formattedDate));
            javax.swing.SpinnerDateModel beginDate = new javax.swing.SpinnerDateModel(formattedDate, null, null,java.util.Calendar.DAY_OF_MONTH);
            javax.swing.SpinnerDateModel endDate = new javax.swing.SpinnerDateModel(formattedDate, null, null,java.util.Calendar.DAY_OF_MONTH);

            beginDateSpinner = new javax.swing.JSpinner(beginDate);
            endDateSpinner = new javax.swing.JSpinner(endDate);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel1.add(beginDateSpinner, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel1.add(endDateSpinner, gridBagConstraints);

        } catch(java.text.ParseException parseExec) {

            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), parseExec.getMessage());

        }
        */
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Reconciliation Period"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel5.setText("From Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabel5, gridBagConstraints);

        jLabel4.setText("To Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jLabel4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(datePicker1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(datePicker2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 100;
        gridBagConstraints.weightx = 4.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 0);
        getContentPane().add(jPanel1, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Cheque No. Search"));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel5.setBackground(new java.awt.Color(91, 251, 147));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SELECT A DATE TO MOVE THE SELECTED ITEMS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Trebuchet MS", 1, 11), new java.awt.Color(204, 0, 51))); // NOI18N
        jPanel5.setLayout(new java.awt.GridBagLayout());

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setText("Move the selected Items to the specified date");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel5.add(jButton1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel5.add(datePicker3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 4.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel5, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        jLabel31.setText("Unbalanced Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel6.add(jLabel31, gridBagConstraints);

        jToggleButton1.setText("Search No.");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel6.add(jToggleButton1, gridBagConstraints);

        chequeNoTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chequeNoTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(chequeNoTxt, gridBagConstraints);

        netBalanceTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(netBalanceTxt, gridBagConstraints);

        jLabel6.setText("Cheque No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel6.add(jLabel6, gridBagConstraints);

        unbalancedAmountTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel6.add(unbalancedAmountTxt, gridBagConstraints);

        jLabel12.setText("Net Balance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel6.add(jLabel12, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel6, gridBagConstraints);

        jPanel7.setLayout(new java.awt.GridBagLayout());

        jLabel10.setText("Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel7.add(jLabel10, gridBagConstraints);

        unbalancedItemsTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(unbalancedItemsTxt, gridBagConstraints);

        jLabel8.setText("Unbalanced Items");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        jPanel7.add(jLabel8, gridBagConstraints);

        unbalancedItemsValueTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel7.add(unbalancedItemsValueTxt, gridBagConstraints);

        jLabel3.setText("Unbalanced Items Value");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        jPanel7.add(jLabel3, gridBagConstraints);

        amountTxt.setEditable(false);
        amountTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel7.add(amountTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        getContentPane().add(jPanel2, gridBagConstraints);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Account"));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        tableModel = reconciliationTable.getModel();

        tableModel.addTableModelListener(new javax.swing.event.TableModelListener() {

            public void tableChanged(javax.swing.event.TableModelEvent evt) {

                tableModelTableChanged(evt);

            }

        });
        reconciliationTable.setToolTipText("Please enter actual bank balance");
        reconciliationTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                reconciliationTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(reconciliationTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 10, 10);
        jPanel3.add(jScrollPane1, gridBagConstraints);

        bankAccountName.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(bankAccountName, gridBagConstraints);

        jLabel9.setText("Bank Account Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jLabel9, gridBagConstraints);

        jLabel2.setText("Cashbook Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(jLabel2, gridBagConstraints);

        cashBookNoCmb.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select DISTINCT bank_account_no from ac_banks_setup ORDER BY bank_account_no"));
        cashBookNoCmb.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cashBookNoCmbItemStateChanged(evt);
            }
        });
        cashBookNoCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cashBookNoCmbActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(cashBookNoCmb, gridBagConstraints);

        jPanel4.setBackground(new java.awt.Color(91, 251, 147));
        jPanel4.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Abyssinica SIL", 1, 14)); // NOI18N
        jLabel1.setText("Cashbook Balance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jLabel1, gridBagConstraints);

        actualBankBal.setFont(new java.awt.Font("Abyssinica SIL", 1, 14)); // NOI18N
        actualBankBal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        actualBankBal.setText("0.00");
        actualBankBal.setToolTipText("MUST have actual bank balance");
        actualBankBal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                actualBankBalFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                actualBankBalFocusLost(evt);
            }
        });
        actualBankBal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                actualBankBalKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel4.add(actualBankBal, gridBagConstraints);

        jLabel11.setFont(new java.awt.Font("Cantarell", 1, 15)); // NOI18N
        jLabel11.setText("Actual Bank Balance");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel4.add(jLabel11, gridBagConstraints);

        cashBookBal.setEditable(false);
        cashBookBal.setFont(new java.awt.Font("Abyssinica SIL", 1, 14)); // NOI18N
        cashBookBal.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        jPanel4.add(cashBookBal, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        jPanel3.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        getContentPane().add(jPanel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 6000.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jLabel13, gridBagConstraints);

        saveActualAmountOnlyBtn.setText("Save Actual Balance Only");
        saveActualAmountOnlyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActualAmountOnlyBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(saveActualAmountOnlyBtn, gridBagConstraints);

        setBounds(0, 0, 734, 500);
    }// </editor-fold>//GEN-END:initComponents
            /*public void tableModelTableChanged2() {
        System.out.println("Calculating totals for table 11 and 2.");
        //        double resFloat = 0.00;
        double resFloat = 0.00;
        double netPay = 0.00;
        double floatDeduct = java.lang.Double.parseDouble(jTextField6.getText());
        // double floatTotal = java.lang.Double.parseDouble(jTextField3.getText());
     
        for (int i = 0; i < jTable2.getRowCount(); i++) {
     
            if (jTable2.getModel().getValueAt(i, 1) != null) {
     
                resFloat = resFloat + Double.parseDouble(jTable2.getModel().getValueAt(i, 1).toString());
     
                jTextField6.setText(java.lang.String.valueOf(resFloat));
     
            } else{
                resFloat = resFloat + Double.parseDouble(jTable2.getModel().getValueAt(i, 1).toString());
     
                jTextField6.setText(java.lang.String.valueOf(resFloat));
     
            }
            netPay =  floatDeduct;
            this.jTextField6.setText(java.lang.String.valueOf(netPay));
        }
     
    }            private void cmboxMouseClicked1() {
     
        System.out.println("Showing dialog");
        java.awt.Point point = jTable2.getLocationOnScreen();
        jSearchDialog1.setSize(400,200);
        jSearchDialog1.setLocation(point);
        jSearchDialog1.setVisible(true);
    }
     */
    private void actualBankBalKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_actualBankBalKeyReleased
        double cbookAmt =0.0;
        float bStmt = 0;
        if(java.lang.Double.valueOf(cashBookBal.getText().toString().replace(",", ""))>0){
            }
            cbookAmt = com.afrisoftech.lib.CurrencyFormatter.parseFormattedString(cashBookBal.getText().toString());    
        //}
        
        if(actualBankBal.equals("")){
            actualBankBal.setText("0.00");
        }else{
             bStmt = java.lang.Float.parseFloat(actualBankBal.getText().toString().replace(",", ""));
            
            double bal = cbookAmt - bStmt;
            String balance = ""+bal+"";
            unbalancedAmountTxt.setText(balance);
        }
        
        
        // Add your handling code here:
    }//GEN-LAST:event_actualBankBalKeyReleased
    
    private void actualBankBalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_actualBankBalFocusLost
        
        
        // Add your handling code here:
    }//GEN-LAST:event_actualBankBalFocusLost
    
    private void closeFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFormBtnActionPerformed
        
        this.dispose();
        
        // Add your handling code here:
    }//GEN-LAST:event_closeFormBtnActionPerformed
    
    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        int selectedRow = 0;
        java.lang.String text2Search = null;
        
        java.lang.String text2Comp = "0.00";
        
        text2Search = chequeNoTxt.getText();
        
        //      javax.swing.table.TableColumn checkNoColumn = jTable1.getModel().getColumnName(1);
        
        javax.swing.table.TableModel tableModel = reconciliationTable.getModel();
        
        for (int j = 0; j < reconciliationTable.getRowCount(); j++) {
            
            if (tableModel.getValueAt(j, 2) != null) {
                
                if (tableModel.getValueAt(j, 2).toString().matches(text2Search)) {
                    
                    reconciliationTable.setEditingRow(j);
                   //begin 
                    selectedRow = j;
                    if(reconciliationTable.getModel().getValueAt(j, 3).toString() !=null){
                    if (Float.parseFloat(reconciliationTable.getModel().getValueAt(j, 3).toString()) > 0.00) {
                        
                        amountTxt.setText(reconciliationTable.getValueAt(j, 3).toString());
                        
                    } else {
                        
                        amountTxt.setText(reconciliationTable.getValueAt(j, 4).toString());
                        
                    }
                  }
                    System.out.println(j);
                    
                }
                
            }
            
        }
        reconciliationTable.setEditingRow(selectedRow);
        
        // Add your handling code here:
    }//GEN-LAST:event_jToggleButton1ActionPerformed
    
    private void chequeNoTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chequeNoTxtActionPerformed
        
        // Add your handling code here:
    }//GEN-LAST:event_chequeNoTxtActionPerformed
    
    private void cashBookNoCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cashBookNoCmbActionPerformed
        double getActualAmount = 0.0;
        int countAccount = 0;
        bankAccountName.setText("");
        cashBookBal.setText("0.00");
        //actualBankBal.setText("0.00");
        
        com.afrisoftech.lib.ClearTable.clearthisTable(reconciliationTable);
        try{
                  java.sql.PreparedStatement pstmtcheckDate = connectDB.prepareStatement("SELECT amount, count(bank_account) FROM ac_actual_bank_statement WHERE bank_account = '"+cashBookNoCmb.getSelectedItem()+"' and end_date = '"+datePicker2.getDate()+"' and begin_date = '"+datePicker1.getDate()+"' group by 1");
                  java.sql.ResultSet rsultCheckDate = pstmtcheckDate.executeQuery();
                while(rsultCheckDate.next()){
                 countAccount =  rsultCheckDate.getInt(2);
                 getActualAmount = rsultCheckDate.getDouble(1);
                }
                if(getActualAmount>0){
                actualBankBal.setText(String.valueOf(getActualAmount));
                }else{
               // actualBankBal.setText(actualBankBal.getText());    
                }
        }catch(Exception e){
            javax.swing.JOptionPane.showMessageDialog(null, e.getMessage());
            e.printStackTrace();
        }
        if(Double.valueOf(actualBankBal.getText())>0){
        
           // if(Double.valueOf(actualBankBal.getText())>0){
            reconcileAccountBtn.setEnabled(true);
            this.jLabel7.setText("");
           // this.jTextField11.setText("");
            int rowsNo = 0;
         try {
                java.sql.Statement stmt = connectDB.createStatement();
                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.Statement stmt11 = connectDB.createStatement();
                java.sql.ResultSet rset11 = stmt11.executeQuery("select Sum(debit - credit) from ac_cash_book where account_no ='"+cashBookNoCmb.getSelectedItem().toString()+"'  AND date <= '"+datePicker2.getDate().toString()+"'  ");
                
                java.sql.ResultSet rset = stmt.executeQuery("select account_name,count(debit),sum(credit - debit) from ac_cash_book where account_no ='"+cashBookNoCmb.getSelectedItem().toString()+"'  and reconciled = false AND date <= '"+datePicker2.getDate().toString()+"' group by account_name ");
                java.sql.ResultSet rset1 = stmt1.executeQuery("select count(debit) from ac_cash_book where account_no ='"+cashBookNoCmb.getSelectedItem().toString()+"' and reconciled = false AND date <='"+datePicker2.getDate().toString()+"'");
                
                while (rset1.next()) {
                    
                    rowsNo = rset1.getInt(1);
                    
                }
                if (rowsNo < 1) {
                    javax.swing.JOptionPane.showMessageDialog(this, "There are no items to reconcile.");
                } else {
                    
                    while (rset.next()){
                        
                        bankAccountName.setText(rset.getObject(1).toString());
                        unbalancedItemsTxt.setText(rset.getObject(2).toString());
                        netBalanceTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(rset.getDouble(3)));
                        //jTextField1.setText(rset.getObject(3).toString());
                    }
                    while (rset11.next()){
                        
                        
                        cashBookBal.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(rset11.getDouble(1)));
                    }
                    

                    
                    double Unrec = com.afrisoftech.lib.CurrencyFormatter.parseFormattedString(netBalanceTxt.getText().toString());
                    double CbStmt = com.afrisoftech.lib.CurrencyFormatter.parseFormattedString(cashBookBal.getText());
                    
                    double Total = Unrec+CbStmt;
                    unbalancedItemsValueTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(Total));
                    
                    
     /*       } catch (java.sql.SQLException sqe) {
             javax.swing.JOptionPane.showMessageDialog(this,sqe.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
      
           sqe.printStackTrace();
            System.out.println(sqe.getMessage());
        }
      
      */
                    
                    //         crset4.setCommand("select date,cheque_no,debit as debit,credit as credit,reconciled from ac_cash_book where account_no ILIKE '"+jComboBox2.getSelectedItem().toString()+"%'  AND reconciled = false AND date <= '"+datePicker2.getDate().toString()+"'  ORDER BY date ASC");
                    //         crset4.setConnectionSource(pConnDB);
                    
                    // try {
                    //          crset4.execute();
                    
                    // crset2.setExecuteOnLoad(true);
     reconciliationTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,""
     + "select distinct user_name,shift_no,cheque_no, sum(debit) as debit,sum(credit) as credit,reconciled::boolean,date,payment_mode as receipt_or_payment_mode from "
     + "ac_cash_book where account_no= '"+cashBookNoCmb.getSelectedItem().toString()+"'  AND ((reconciled = false and moved_date::date IS NULL AND date between '"+datePicker1.getDate().toString()+"' and '"+datePicker2.getDate().toString()+"') "
             + "or (reconciled = false and moved_date::date between '"+datePicker1.getDate().toString()+"' and '"+datePicker2.getDate().toString()+"')) "
     + " group by 1,2,3,6,7,8 ORDER BY 2,3 ASC"));
                    
     
     System.out.println("select distinct user_name,shift_no,cheque_no, sum(debit) as debit,sum(credit) as credit,reconciled::boolean,date,payment_mode as receipt_or_payment_mode from "
     + "ac_cash_book where account_no= '"+cashBookNoCmb.getSelectedItem().toString()+"'  AND ((reconciled = false and moved_date::date IS NULL) or (reconciled = false and moved_date::date between '"+datePicker1.getDate().toString()+"' and '"+datePicker2.getDate().toString()+"')) "
     + "AND reconciled = false AND date between '"+datePicker1.getDate().toString()+"' and '"+datePicker2.getDate().toString()+"'  group by 1,2,3,6,7,8 ORDER BY 2,3 ASC");
       /*         jTable1.setModel(new org.netbeans.lib.sql.models.TableModel(crset4, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("date", "Date", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("cheque_no", "Cheque No.", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("debit", "Debit", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("credit", "Credit", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("reconciled", "Reconcile", true)
                    //new org.netbeans.lib.sql.models.TableModel.Column("transaction_no", "Transaction No", false)
                }));
        */
//                    tableModel = jTable1.getModel();
//                    
//                    tableModel.addTableModelListener(new javax.swing.event.TableModelListener(){
//                        @Override
//                        public void tableChanged(javax.swing.event.TableModelEvent evt){
//                            tableModelTableChanged(evt);
//                        }});
//                        
//                        jScrollPane1.setViewportView(jTable1);
                }
            }
            
            catch(java.sql.SQLException sqlex){
                javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                
                System.out.println(sqlex.getMessage());
                
            }
            
//          }  
//         else {
//        javax.swing.JOptionPane.showMessageDialog(this,"You MUST provide the actual book balance","Check Actual Book Balance field",javax.swing.JOptionPane.ERROR_MESSAGE);
//        bankAccountName.setText("");
//        cashBookBal.setText("0.00");
//        actualBankBal.setText("0.00");
//        com.afrisoftech.lib.ClearTable.clearthisTable(jTable1);
//        
//            }
       //actualBankBal.setText("0.00");
    }else{
      javax.swing.JOptionPane.showMessageDialog(this,"You MUST provide the actual book balance","Check Actual Book Balance field",javax.swing.JOptionPane.ERROR_MESSAGE);
        bankAccountName.setText("");
        cashBookBal.setText("0.00");
        actualBankBal.setText("0.00");
        actualBankBal.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        com.afrisoftech.lib.ClearTable.clearthisTable(reconciliationTable);
        
        }
        
        // Add your handling code here:
    }//GEN-LAST:event_cashBookNoCmbActionPerformed
    
    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        // Add your handling code here:
    }//GEN-LAST:event_formInternalFrameActivated
    
    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        
        this.getContentPane().removeAll();
        this.initComponents();
        bankAccountName.setText("");
        
        
        // Add your handling code here:
    }//GEN-LAST:event_clearBtnActionPerformed
    
    private void reconcileAccountBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reconcileAccountBtnActionPerformed
        java.util.Date periodFrom = null;
        java.util.Date periodTo = null;
        
        try {
            
            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("select period_from,period_to FROM period_setup WHERE period_status ilike 'Open'");
            while (rsetf.next()){
                periodFrom = rsetf.getDate(1);
                periodTo = rsetf.getDate(2);
            }
            
        }   catch(java.sql.SQLException sq){
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());
            
        }
        
        if(datePicker1.getDate().before(periodFrom) || datePicker2.getDate().after(periodTo)){
            javax.swing.JOptionPane.showMessageDialog(this,"You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(),"Caution Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);
            
        }else{
            
            
            java.sql.Savepoint registerSavePoint = null;
            try {
                connectDB.setAutoCommit(false);
                registerSavePoint = connectDB.setSavepoint("registration");
            } catch (java.sql.SQLException ex) {
                ex.printStackTrace();
            }
            
            try {
                Date dateChecker = null;
                Date beginDate = null;
                Object formDate = null;
                Object accCode = null;
                java.sql.Date invDate = null;
                java.sql.Date dateTo = null;
                Object accCombo;
                int calculate = 0;
                accCombo = cashBookNoCmb.getSelectedItem().toString().trim();
                for (int i=0; i < reconciliationTable.getRowCount(); i++) {
                    if (reconciliationTable.getModel().getValueAt(i,5) != null){
                        if (Boolean.valueOf(reconciliationTable.getModel().getValueAt(i, 5).toString()) == java.lang.Boolean.TRUE) {
//                            java.sql.Statement pst22 = connectDB.createStatement();
//                                    java.sql.ResultSet rs22 = pst22.executeQuery("select '" + reconciliationTable.getValueAt(i,0).toString() + "'::date ");
//                                    while (rs22.next()) {
//                                        invDate = rs22.getDate(1);
//                                        
//                                    }
                            java.util.Date tableDate = null;
//                            if(reconciliationTable.getValueAt(i,0)==null || reconciliationTable.getValueAt(i,0)==""){
//                              // tableDate = null; 
//                            }else{
//                            java.sql.Statement stmtDate = connectDB.createStatement();
//                            java.sql.ResultSet rsetDate = stmtDate.executeQuery("select '" + reconciliationTable.getValueAt(i, 0)+ "'::date");
//                            while(rsetDate.next()){
//                                tableDate = rsetDate.getDate(1);
//                            }
//                          }
    java.sql.PreparedStatement pstmt = connectDB.prepareStatement( "UPDATE ac_cash_book  SET reconciled = true ,date_reconcilled = '"+com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate())+"' WHERE date = '"+reconciliationTable.getValueAt(i,6)+"' and account_no = '"+cashBookNoCmb.getSelectedItem().toString()+"'" +
    " and cheque_no = '"+reconciliationTable.getValueAt(i,2)+"' and shift_no = '"+reconciliationTable.getValueAt(i,1)+"' and payment_mode = '"+reconciliationTable.getValueAt(i,7)+"' and (select sum(b.debit) from ac_cash_book b where b.cheque_no = '"+reconciliationTable.getValueAt(i,2)+"' and b.shift_no = '"+reconciliationTable.getValueAt(i,1)+"' and b.payment_mode = '"+reconciliationTable.getValueAt(i,7)+"' and b.date = '"+reconciliationTable.getValueAt(i,6)+"' and b.account_no = '"+cashBookNoCmb.getSelectedItem().toString()+"') = '"+reconciliationTable.getValueAt(i,3)+"' \n" +
    "and (select sum(c.credit) from ac_cash_book c where c.cheque_no = '"+reconciliationTable.getValueAt(i,2)+"' and c.shift_no = '"+reconciliationTable.getValueAt(i,1)+"' and c.payment_mode = '"+reconciliationTable.getValueAt(i,7)+"' and c.date = '"+reconciliationTable.getValueAt(i,6)+"' and c.account_no = '"+cashBookNoCmb.getSelectedItem().toString()+"') = '"+reconciliationTable.getValueAt(i,4)+"' ");
    pstmt.executeUpdate();
//    System.out.println("UPDATE ac_cash_book  SET reconciled = true ,date_reconcilled = '"+com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate())+"' WHERE date = '"+reconciliationTable.getValueAt(i,6)+"' and account_no = '"+cashBookNoCmb.getSelectedItem().toString()+"'" +
//    " and cheque_no = '"+reconciliationTable.getValueAt(i,2)+"' and shift_no = '"+reconciliationTable.getValueAt(i,1)+"' and payment_mode = '"+reconciliationTable.getValueAt(i,7)+"' and (select sum(b.debit) from ac_cash_book b where b.cheque_no = '"+reconciliationTable.getValueAt(i,2)+"' and b.shift_no = '"+reconciliationTable.getValueAt(i,1)+"' and b.payment_mode = '"+reconciliationTable.getValueAt(i,7)+"' and b.date = '"+reconciliationTable.getValueAt(i,6)+"' and b.account_no = '"+cashBookNoCmb.getSelectedItem().toString()+"') = '"+reconciliationTable.getValueAt(i,3)+"' \n" +
//    "and (select sum(c.credit) from ac_cash_book c where c.cheque_no = '"+reconciliationTable.getValueAt(i,2)+"' and c.shift_no = '"+reconciliationTable.getValueAt(i,1)+"' and c.payment_mode = '"+reconciliationTable.getValueAt(i,7)+"' and c.date = '"+reconciliationTable.getValueAt(i,6)+"' and c.account_no = '"+cashBookNoCmb.getSelectedItem().toString()+"') = '"+reconciliationTable.getValueAt(i,4)+"'");
    
//                            
//                            System.out.println("UPDATE ac_cash_book  SET reconciled = false ,date_reconcilled = '"+com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate())+"' WHERE date = '"+reconciliationTable.getValueAt(i,0)+"' and account_no = '"+cashBookNoCmb.getSelectedItem().toString()+"'" +
//" and cheque_no = '"+reconciliationTable.getValueAt(i,1)+"' and (select sum(b.debit) from ac_cash_book b where b.cheque_no = '"+reconciliationTable.getValueAt(i,1)+"' and b.date = '"+reconciliationTable.getValueAt(i,0)+"' and b.account_no = '"+cashBookNoCmb.getSelectedItem().toString()+"') = '"+reconciliationTable.getValueAt(i,2)+"' \n" +
//"and (select sum(c.credit) from ac_cash_book c where c.cheque_no = '"+reconciliationTable.getValueAt(i,1)+"' and c.date = '"+reconciliationTable.getValueAt(i,0)+"' and c.account_no = '"+cashBookNoCmb.getSelectedItem().toString()+"') = '"+reconciliationTable.getValueAt(i,3)+"'");
                        }
                    }
                }
                
                java.sql.PreparedStatement pstmt4 = connectDB.prepareStatement("insert into ac_bank_rec values(?,?,?,?,?,?)");
                pstmt4.setDate(1,com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                pstmt4.setObject(4,"Bank Statement Balance");
                pstmt4.setDouble(6,java.lang.Double.valueOf(actualBankBal.getText()));
                pstmt4.setObject(2,bankAccountName.getText().toString());
                pstmt4.setObject(3,cashBookNoCmb.getSelectedItem().toString());
                pstmt4.setTimestamp(5,new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                pstmt4.executeUpdate();
                
                java.sql.PreparedStatement pstmtcheckDate = connectDB.prepareStatement("SELECT count(bank_account) FROM ac_actual_bank_statement WHERE bank_account = '"+cashBookNoCmb.getSelectedItem()+"' and end_date = '"+datePicker2.getDate()+"' and begin_date = '"+datePicker1.getDate()+"'");
                java.sql.ResultSet rsultCheckDate = pstmtcheckDate.executeQuery();
                while(rsultCheckDate.next()){
//                 dateChecker = rsultCheckDate.getDate(2);
//                 accCode = rsultCheckDate.getObject(1);
                 calculate = rsultCheckDate.getInt(1);
                }
                 
                 formDate = com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate());
                 
                if(calculate>0){
                
                java.sql.PreparedStatement pstmtactualUpdate = connectDB.prepareStatement("UPDATE ac_actual_bank_statement SET amount=? WHERE bank_account = '"+cashBookNoCmb.getSelectedItem()+"' and end_date = '"+datePicker2.getDate()+"' and begin_date = '"+datePicker1.getDate()+"'");
                pstmtactualUpdate.setDouble(1,java.lang.Double.valueOf(actualBankBal.getText().toString()));
                pstmtactualUpdate.executeUpdate();
                javax.swing.JOptionPane.showMessageDialog(this, "Update Successfull");
                }else {
                java.sql.PreparedStatement pstmtactual = connectDB.prepareStatement("insert into ac_actual_bank_statement values(?,?,?,?)");
                System.out.println("(2).date checker from DB "+dateChecker+" date checker from form "+formDate+" aCCOUNT "+accCode==cashBookNoCmb.getSelectedItem());
                pstmtactual.setObject(1,cashBookNoCmb.getSelectedItem().toString());
                pstmtactual.setDate(2,com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                pstmtactual.setDouble(3,java.lang.Double.valueOf(actualBankBal.getText()));
                pstmtactual.setDate(4,com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                pstmtactual.executeUpdate(); 
                javax.swing.JOptionPane.showMessageDialog(this, "Insert Successfull");
                }
                 
                connectDB.commit();
                connectDB.setAutoCommit(true);
                
                javax.swing.JOptionPane.showMessageDialog(this, "Insert Done Successfully","Comfirmation Message",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                if(reconciliationTable.getModel().getValueAt(0, 0) ==null){
                 
                 actualBankBal.setText("0.00");
                }
                reconcileAccountBtn.setEnabled(false);
                //reconciliationTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"select distinct user_name,shift_no,cheque_no, sum(debit) as debit,sum(credit) as credit,reconciled::boolean,date,payment_mode as receipt_or_payment_mode from ac_cash_book where account_no ILIKE '"+cashBookNoCmb.getSelectedItem().toString()+"%'  AND reconciled = false AND date between '"+datePicker1.getDate().toString()+"' and '"+datePicker2.getDate().toString()+"'  group by 1,2,3,6,7,8 ORDER BY 2,3 ASC"));
//            crset2.execute();
       reconciliationTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,""
     + "select distinct user_name,shift_no,cheque_no, sum(debit) as debit,sum(credit) as credit,reconciled::boolean,date,payment_mode as receipt_or_payment_mode from "
     + "ac_cash_book where account_no= '"+cashBookNoCmb.getSelectedItem().toString()+"'  AND ((reconciled = false and moved_date::date IS NULL AND date between '"+datePicker1.getDate().toString()+"' and '"+datePicker2.getDate().toString()+"') "
             + "or (reconciled = false and moved_date::date between '"+datePicker1.getDate().toString()+"' and '"+datePicker2.getDate().toString()+"')) "
     + " group by 1,2,3,6,7,8 ORDER BY 2,3 ASC"));
                    
            }   catch(java.sql.SQLException sq){
                sq.printStackTrace();
                try {
                    
                    connectDB.rollback(registerSavePoint);
                    
                } catch(java.sql.SQLException sql) {
                    
                    javax.swing.JOptionPane.showMessageDialog(this,sql.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                    
                }
                
                javax.swing.JOptionPane.showMessageDialog(this,sq.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
                
                System.out.println(sq.getMessage());
            }
        }
        
    }//GEN-LAST:event_reconcileAccountBtnActionPerformed

    private void saveActualAmountOnlyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActualAmountOnlyBtnActionPerformed
        // TODO add your handling code here:
        try{
            
            connectDB.setAutoCommit(false);
             Date dateChecker = null;
             Date formDate = null;
             Object accCode = null;
             int calculate = 0;
            Object accCombo;
            accCombo = cashBookNoCmb.getSelectedItem().toString().trim();
            java.sql.PreparedStatement pstmtcheckDate = connectDB.prepareStatement("SELECT count(bank_account) FROM ac_actual_bank_statement WHERE bank_account = '"+cashBookNoCmb.getSelectedItem()+"' and end_date = '"+datePicker2.getDate()+"' and begin_date = '"+datePicker1.getDate()+"'");
            java.sql.ResultSet rsultCheckDate = pstmtcheckDate.executeQuery();
                while(rsultCheckDate.next()){
//                 dateChecker = rsultCheckDate.getDate(2);
//                 accCode = rsultCheckDate.getObject(1);
                 calculate = rsultCheckDate.getInt(1);
                }
                 formDate = com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate());
                 //earlier code ==formDate.equals(dateChecker) && accCode.equals(accCombo)
                if(calculate>0){
                    System.out.println("(1).date checker from DB "+dateChecker+" date checker from form "+formDate+" aCCOUNT "+accCode==cashBookNoCmb.getSelectedItem());
                java.sql.PreparedStatement pstmtactualUpdate = connectDB.prepareStatement("UPDATE ac_actual_bank_statement SET amount=? WHERE bank_account = '"+cashBookNoCmb.getSelectedItem()+"' and end_date = '"+datePicker2.getDate()+"' and begin_date = '"+datePicker1.getDate()+"'");
                pstmtactualUpdate.setDouble(1,java.lang.Double.valueOf(actualBankBal.getText().toString()));
                pstmtactualUpdate.executeUpdate();
                javax.swing.JOptionPane.showMessageDialog(this, "Update Successfull");
                }else {
                java.sql.PreparedStatement pstmtactual = connectDB.prepareStatement("insert into ac_actual_bank_statement values(?,?,?,?)");
                System.out.println("(2).date checker from DB "+dateChecker+" date checker from form "+formDate+" aCCOUNT "+accCode==cashBookNoCmb.getSelectedItem());
                pstmtactual.setObject(1,cashBookNoCmb.getSelectedItem().toString());
                pstmtactual.setDate(2,com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                pstmtactual.setDouble(3,java.lang.Double.valueOf(actualBankBal.getText()));
                pstmtactual.setDate(4,com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                pstmtactual.executeUpdate(); 
               javax.swing.JOptionPane.showMessageDialog(this, "Insert Successfull");
              
                }
                 connectDB.commit();
                connectDB.setAutoCommit(true);
                 if(formDate.equals(dateChecker) ){
                     System.out.println("Date equal\n");
                     if(accCode.equals(accCombo)){
                    System.out.println("Accounts are same\n"); 
                 }
                  }else{
                    System.out.println("Nothing");  
                 }
                 
                 if(formDate.equals(dateChecker) && accCode.equals(accCombo)){
                     System.out.println("Date equal and Accounts are same\n");
                 
                  }else{
                    System.out.println("Nothing");  
                 }
                 
        }catch(Exception e){
           e.printStackTrace();
           javax.swing.JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_saveActualAmountOnlyBtnActionPerformed

    private void actualBankBalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_actualBankBalFocusGained
        // TODO add your handling code here:
        actualBankBal.selectAll();
    }//GEN-LAST:event_actualBankBalFocusGained

    private void cashBookNoCmbItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cashBookNoCmbItemStateChanged
        // TODO add your handling code here:
       
    }//GEN-LAST:event_cashBookNoCmbItemStateChanged

    private void reconciliationTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reconciliationTableMouseClicked
        // TODO add your handling code here:
        //tableModelTableChanged(evt);
    }//GEN-LAST:event_reconciliationTableMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
        for (int i=0; i < reconciliationTable.getRowCount(); i++) {
                    if (reconciliationTable.getModel().getValueAt(i,5) != null){
                        if (Boolean.valueOf(reconciliationTable.getModel().getValueAt(i, 5).toString()) == java.lang.Boolean.TRUE) {
                            
                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement( "UPDATE ac_cash_book  SET moved_date = '"+com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker3.getDate())+"' WHERE date = '"+reconciliationTable.getValueAt(i,6)+"' and account_no = '"+cashBookNoCmb.getSelectedItem().toString()+"'" +
                                        " and cheque_no = '"+reconciliationTable.getValueAt(i,2)+"' and shift_no = '"+reconciliationTable.getValueAt(i,1)+"' and payment_mode = '"+reconciliationTable.getValueAt(i,7)+"' and (select sum(b.debit) from ac_cash_book b where b.cheque_no = '"+reconciliationTable.getValueAt(i,2)+"' and b.shift_no = '"+reconciliationTable.getValueAt(i,1)+"' and b.payment_mode = '"+reconciliationTable.getValueAt(i,7)+"' and b.date = '"+reconciliationTable.getValueAt(i,6)+"' and b.account_no = '"+cashBookNoCmb.getSelectedItem().toString()+"') = '"+reconciliationTable.getValueAt(i,3)+"' \n" +
                                        "and (select sum(c.credit) from ac_cash_book c where c.cheque_no = '"+reconciliationTable.getValueAt(i,2)+"' and c.shift_no = '"+reconciliationTable.getValueAt(i,1)+"' and c.payment_mode = '"+reconciliationTable.getValueAt(i,7)+"' and c.date = '"+reconciliationTable.getValueAt(i,6)+"' and c.account_no = '"+cashBookNoCmb.getSelectedItem().toString()+"') = '"+reconciliationTable.getValueAt(i,4)+"' ");   
                                pstmt.executeUpdate();  
                            
                        }
                    }
        }
        javax.swing.JOptionPane.showMessageDialog(this, "Movement Successfull");
     reconciliationTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,""
     + "select distinct user_name,shift_no,cheque_no, sum(debit) as debit,sum(credit) as credit,reconciled::boolean,date,payment_mode as receipt_or_payment_mode from "
     + "ac_cash_book where account_no= '"+cashBookNoCmb.getSelectedItem().toString()+"'  AND ((reconciled = false and moved_date::date IS NULL AND date between '"+datePicker1.getDate().toString()+"' and '"+datePicker2.getDate().toString()+"') "
     + "or (reconciled = false and moved_date::date between '"+datePicker1.getDate().toString()+"' and '"+datePicker2.getDate().toString()+"')) "
     + " group by 1,2,3,6,7,8 ORDER BY 2,3 ASC"));
          
            } catch (SQLException ex) {
                javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
                                    ex.printStackTrace();             //ex.printStackTrace();
                    }
    }//GEN-LAST:event_jButton1ActionPerformed
    
    
    public void tableModelTableChanged(javax.swing.event.TableModelEvent evt) {
        //   if (jTable2.getModel().getValueAt(jTable2.getSelectedRow(), 1) != null) {
        
        double totals = 0.00;
        
        // int j = jTable1.getModel().getValueAt(j, 4).toString()
        double Unrec = Double.parseDouble(netBalanceTxt.getText());
        double CbStmt = Double.parseDouble(cashBookBal.getText());
        double BStmt = Double.parseDouble(actualBankBal.getText());
        //   double Net = Double.parseDouble(jTextField6.getText());
        int i = 0;
        
        
        // double Net =  Double.parseDouble(jTextField6.getText());
        //     jTextField7.setText(Double.toString(Net-BStmt));
        //  for (int j = 0; j < jTable1.getRowCount(); j++) {
        
        // System.out.println(jTable1.getModel().getValueAt(j, 4).toString());
        if(reconciliationTable.getRowCount()>0 && reconciliationTable.getColumnCount()>0 && reconciliationTable.getModel().getValueAt(0, 0) !=null){
        if (Boolean.valueOf(reconciliationTable.getModel().getValueAt(reconciliationTable.getSelectedRow(), 5).toString()) == java.lang.Boolean.TRUE) {
            //  Unrec = Unrec - Double.parseDouble(jTable1.getModel().getValueAt(j, 3).toString();
            Unrec =Unrec + Double.parseDouble(reconciliationTable.getModel().getValueAt(reconciliationTable.getSelectedRow(), 3).toString()) - Double.parseDouble(reconciliationTable.getModel().getValueAt(reconciliationTable.getSelectedRow(), 4).toString());
            
            i++;
        }else{
            
            Unrec =Unrec - Double.parseDouble(reconciliationTable.getModel().getValueAt(reconciliationTable.getSelectedRow(), 3).toString()) + Double.parseDouble(reconciliationTable.getModel().getValueAt(reconciliationTable.getSelectedRow(), 4).toString());
            
            i++;//done
        }
        }
        //  }
        
        // jTextField6.setText(Double.toString(totals));
        //    double Net =  Double.parseDouble(jTextField6.getText());
        netBalanceTxt.setText(Double.toString(Unrec));
        double Total = Unrec+CbStmt;
        unbalancedItemsValueTxt.setText(Double.toString(Total));
        amountTxt.setText(Double.toString(Total-BStmt));
        
        
        unbalancedItemsTxt.setText(Integer.toString(i));
        //jTextField12.setText(Integer.toString(i));
        
        System.out.println(totals);
        
        System.out.println(i);
        
        System.out.println("This table has changed");
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField actualBankBal;
    private javax.swing.JTextField amountTxt;
    private javax.swing.JTextField bankAccountName;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField cashBookBal;
    private javax.swing.JComboBox cashBookNoCmb;
    private javax.swing.JTextField chequeNoTxt;
    private javax.swing.JButton clearBtn;
    public javax.swing.JButton closeFormBtn;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private com.afrisoftech.lib.DatePicker datePicker2;
    private com.afrisoftech.lib.DatePicker datePicker3;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTextField netBalanceTxt;
    private javax.swing.JButton reconcileAccountBtn;
    private javax.swing.JTable reconciliationTable;
    private javax.swing.JButton saveActualAmountOnlyBtn;
    private javax.swing.JTextField unbalancedAmountTxt;
    private javax.swing.JTextField unbalancedItemsTxt;
    private javax.swing.JTextField unbalancedItemsValueTxt;
    // End of variables declaration//GEN-END:variables
    
}
