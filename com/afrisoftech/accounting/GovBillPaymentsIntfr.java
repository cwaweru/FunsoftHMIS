/*
 * CafeteriaBillPaymentsIntfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */
package com.afrisoftech.accounting;

import com.afrisoftech.lib.ServerTime;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.openide.util.Exceptions;

/**
 *
 * @author Charles W. Waweru <cwaweru@systempartners.biz>, Francis K. Waweru
 * <francis@systempartners.biz>, Peter Ndung'u Waweru
 * <pndungu@systempartners.biz>
 */
public class GovBillPaymentsIntfr extends javax.swing.JInternalFrame implements java.lang.Runnable {

    private javax.swing.JComboBox cmbox;
    private javax.swing.JComboBox cmbox2;
    private javax.swing.JComboBox cmbox3;
    private javax.swing.JComboBox cmbox4;
    private javax.swing.JComboBox cmbox21;
    private final javax.swing.JTextField comboTextField = new javax.swing.JTextField();
    DispatchThread dispatchThread;
    javax.swing.ComboBoxModel mainComboBoxModel;
    javax.swing.ComboBoxModel oldComboBox1311Model;
    private boolean threadCheck = false;
    private boolean refreshStatus;
    String Categ = null;
    String desc = null;
    String billNo = null;
    String transNo = null;
    String payMode = null;
    String patientAcc = null;
    String cardNo = null;
    String AccDesc = null;
    String scheme = null;
    String cardName = null;
    String isurer = null;
    String expDate = null;
    String staffNo = null;
    String glAcc = null;
    String receiptNo1 = null;
    public static String receiptNo2 = null;
    String actCode1 = null;
    String glCode1 = null;
    String bankAcc1 = null;
    String transNo1 = null;
    String actNames1 = null;
    String patCat1 = null;
    String patientAcc1 = null;
    String user = null;
    String glAcc1 = null;
    String accDesc1 = null;
    String name = null;
    String rname = null;
    String rcode = null;
    String cashPoint = null;
    String cash_no = null;
    java.sql.Connection connectDB = null;
    private java.lang.String shift_no = null;
    javax.swing.table.TableModel tableModel;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    java.lang.Thread shiftThread = null;
    java.lang.Boolean processReceipt = false;
    private boolean check4Exemptions = false;
    boolean priceEdit = false;
    boolean rePrints = false;

    public GovBillPaymentsIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        refreshStatus = true;

        connectDB = connDb;

        pConnDB = pconnDB;

        shiftThread = new java.lang.Thread(this, "SHIFT_MONITOR");

        shiftThread.start();

        try {
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT edit_prices, re_prints FROM sales_prefs");
            java.sql.ResultSet rsetSales = pstmt.executeQuery();
            while (rsetSales.next()) {
                priceEdit = rsetSales.getBoolean(1);
                rePrints = rsetSales.getBoolean(2);
            }
            rsetSales.close();
            pstmt.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(CafeteriaBillPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
        }

        initComponents();

        payModecmbx.setSelectedItem("Cash");
        if (System.getProperty("exemptions.mode").equalsIgnoreCase("false")) {

            jCheckBox6.setEnabled(false);
            jTextField1211.setEnabled(false);
            exemptionNumberTxt.setEditable(false);
            check4Exemptions = false;

        } else {

            jCheckBox6.setEnabled(true);
            jTextField1211.setEnabled(true);
            exemptionNumberTxt.setEditable(true);
            check4Exemptions = true;

        }

        System.out.println("Cashpoint : " + System.getProperty("cashpoint"));

        //        System.out.println("Shift No. : "+getShiftMunber());
        //cashPointTxt.setText(System.getProperty("cashpoint"));
        cashPointTxt.setText(this.getCashPoint());

        shiftNoTxt.setText(getShiftNumber());

        reprintReceiptBtn.setVisible(rePrints);

        this.setSize(com.afrisoftech.hospital.HospitalMain.saccopn.getSize());
        //        startRunning();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField11 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            /*    false, true, priceEdit, false, false, false
        };*/

        boolean[] canEdit = new boolean [] {
            false, false, false, false, false
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    };
    jButton9 = new javax.swing.JButton();
    jSearchDialog1 = new javax.swing.JDialog();
    jSearchPanel1 = new javax.swing.JPanel();
    jTextField112 = new javax.swing.JTextField();
    jSearchScrollPane1 = new javax.swing.JScrollPane();
    jSearchTable1 = new com.afrisoftech.dbadmin.JTable(){
        Class[] types = new Class [] {
            java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
        };
        /*    false, true, priceEdit, false, false, false
    };*/

    boolean[] canEdit = new boolean [] {
        false, false, false, false, false
    };

    public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
    }

    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
    }
    };
    jButton91 = new javax.swing.JButton();
    jSearchDialog2 = new javax.swing.JDialog();
    jSearchPanel2 = new javax.swing.JPanel();
    jTextField113 = new javax.swing.JTextField();
    jSearchScrollPane2 = new javax.swing.JScrollPane();
    jSearchTable2 = new javax.swing.JTable();
    jButton42 = new javax.swing.JButton();
    jButton52 = new javax.swing.JButton();
    jSearchDialog21 = new javax.swing.JDialog();
    jSearchPanel21 = new javax.swing.JPanel();
    patientSearchTxt = new javax.swing.JTextField();
    jSearchScrollPane21 = new javax.swing.JScrollPane();
    jSearchTable21 = new javax.swing.JTable();
    jButton421 = new javax.swing.JButton();
    jButton521 = new javax.swing.JButton();
    jDialog31 = new javax.swing.JDialog();
    //jDialog3.setSize(600,400);
    jPanel121 = new javax.swing.JPanel();
    jPanel1111 = new javax.swing.JPanel();
    jLabel66111 = new javax.swing.JLabel();
    jTextField14111 = new javax.swing.JTextField();
    jLabel3111 = new javax.swing.JLabel();
    jTextField4111 = new javax.swing.JTextField();
    jPanel312 = new javax.swing.JPanel();
    jLabel582211 = new javax.swing.JLabel();
    jLabel5821111 = new javax.swing.JLabel();
    jTextField3111 = new javax.swing.JTextField();
    jPanel41 = new javax.swing.JPanel();
    jTextField1611 = new javax.swing.JTextField();
    searchButton13 = new javax.swing.JButton();
    jSeparator1111 = new javax.swing.JSeparator();
    jButton301111 = new javax.swing.JButton();
    jButton252111 = new javax.swing.JButton();
    jButton1111 = new javax.swing.JButton();
    jSearchDialog11 = new javax.swing.JDialog();
    jSearchPanel11 = new javax.swing.JPanel();
    jTextField1111 = new javax.swing.JTextField();
    jSearchScrollPane11 = new javax.swing.JScrollPane();
    jSearchTable11 = new javax.swing.JTable();
    dispose11 = new javax.swing.JButton();
    buttonGroup2 = new javax.swing.ButtonGroup();
    jTabbedPane1 = new javax.swing.JTabbedPane();
    jPanel8 = new javax.swing.JPanel();
    jPanel71 = new javax.swing.JPanel();
    jLabel71 = new javax.swing.JLabel();
    jTextField61 = new javax.swing.JTextField();
    jPanel111 = new javax.swing.JPanel();
    jPanel211 = new javax.swing.JPanel();
    jLabel111 = new javax.swing.JLabel();
    jComboBox111 = new javax.swing.JComboBox();
    jLabel2121 = new javax.swing.JLabel();
    jTextField151 = new javax.swing.JTextField();
    jPanel61 = new javax.swing.JPanel();
    patientNameTxt = new javax.swing.JTextField();
    searchButton1 = new javax.swing.JButton();
    jPanel14 = new javax.swing.JPanel();
    searchNoChbx = new javax.swing.JCheckBox();
    searchNameChbx = new javax.swing.JCheckBox();
    walkINChkbx = new javax.swing.JCheckBox();
    jLabel112 = new javax.swing.JLabel();
    patientNumberTxt = new javax.swing.JTextField();
    exemptionNumberLbl = new javax.swing.JLabel();
    exemptionNumberTxt = new javax.swing.JTextField();
    jLabel2 = new javax.swing.JLabel();
    jLabel16 = new javax.swing.JLabel();
    jTextField7 = new javax.swing.JTextField();
    jLabel3 = new javax.swing.JLabel();
    jTextField1 = new javax.swing.JTextField();
    jLabel4 = new javax.swing.JLabel();
    unitNumberTxt = new javax.swing.JTextField();
    mchfpChbx = new javax.swing.JCheckBox();
    jSeparator111 = new javax.swing.JSeparator();
    jPanel32 = new javax.swing.JPanel();
    jPanel32.setVisible(false);
    jLabel22 = new javax.swing.JLabel();
    jTextField22 = new javax.swing.JTextField();
    jLabel32 = new javax.swing.JLabel();
    jTextField42 = new javax.swing.JTextField();
    jLabel41 = new javax.swing.JLabel();
    jTextField51 = new javax.swing.JTextField();
    jPanel311 = new javax.swing.JPanel();
    jPanel311.setVisible(false);
    jLabel213 = new javax.swing.JLabel();
    jTextField212 = new javax.swing.JTextField();
    jLabel313 = new javax.swing.JLabel();
    jTextField411 = new javax.swing.JTextField();
    jLabel422 = new javax.swing.JLabel();
    jTextField521 = new javax.swing.JTextField();
    jLabel4112 = new javax.swing.JLabel();
    jTextField5111 = new javax.swing.JTextField();
    jPanel9 = new javax.swing.JPanel();
    jScrollPane211 = new javax.swing.JScrollPane();
    jTable111 = new com.afrisoftech.dbadmin.JTable(){
        Class[] types = new Class [] {
            java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class
        };
        /*    false, true, priceEdit, false, false, false
    };*/

    boolean[] canEdit = new boolean [] {
        false, true, false, false, false, false, false
    };

    public Class getColumnClass(int columnIndex) {
        return types [columnIndex];
    }

    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
    }
    };
    jPanel13 = new javax.swing.JPanel();
    jLabel1411 = new javax.swing.JLabel();
    jTextField1211 = new javax.swing.JTextField();
    jLabel14 = new javax.swing.JLabel();
    jTextField12 = new javax.swing.JTextField();
    jLabel141 = new javax.swing.JLabel();
    amountPaidTxt = new javax.swing.JTextField();
    jLabel151 = new javax.swing.JLabel();
    changeTxt = new javax.swing.JTextField();
    jLabel5311 = new javax.swing.JLabel();
    billAmountTxt = new javax.swing.JTextField();
    jCheckBox6 = new javax.swing.JCheckBox();
    jPanel12 = new javax.swing.JPanel();
    jCheckBox4 = new javax.swing.JCheckBox();
    jCheckBox5 = new javax.swing.JCheckBox();
    jRadioButton1 = new javax.swing.JRadioButton();
    jCheckBox7 = new javax.swing.JCheckBox();
    jPanel10 = new javax.swing.JPanel();
    try {
        java.lang.Class.forName("org.postgresql.Driver");
    }catch (java.lang.ClassNotFoundException sl){
        System.out.println(sl.getMessage());
    }

    postSaleDataBtn = new javax.swing.JButton();
    try {
        java.lang.Class.forName("org.postgresql.Driver");
    }catch (java.lang.ClassNotFoundException sl){
        System.out.println(sl.getMessage());
    }

    generateReceiptBtn = new javax.swing.JButton();
    reprintReceiptBtn = new javax.swing.JButton();
    removeRowBtn = new javax.swing.JButton();
    clearFormBtn = new javax.swing.JButton();
    closePosBtn = new javax.swing.JButton();
    helpBtn = new javax.swing.JButton();
    jLabel1 = new javax.swing.JLabel();
    jPanel51 = new javax.swing.JPanel();
    jLabel121 = new javax.swing.JLabel();
    payModecmbx = new javax.swing.JComboBox();
    jLabel132 = new javax.swing.JLabel();
    glAccountTxt = new javax.swing.JTextField();
    datePicker1 = new com.afrisoftech.lib.DatePicker();
    jLabel8 = new javax.swing.JLabel();
    jLabel101 = new javax.swing.JLabel();
    cashPointTxt = new javax.swing.JTextField();
    jLabel1311 = new javax.swing.JLabel();
    shiftNoTxt = new javax.swing.JTextField();
    jLabel113 = new javax.swing.JLabel();
    jTextField1113 = new javax.swing.JTextField();

    jSearchDialog.setModal(true);
    jSearchDialog.setUndecorated(true);
    jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

    jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jSearchPanel.setLayout(new java.awt.GridBagLayout());

    jTextField11.addCaretListener(new javax.swing.event.CaretListener() {
        public void caretUpdate(javax.swing.event.CaretEvent evt) {
            jTextField11CaretUpdate(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 10.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
    jSearchPanel.add(jTextField11, gridBagConstraints);

    jSearchScrollPane.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jSearchScrollPaneMouseClicked(evt);
        }
    });

    jSearchTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "Service Descr.", "Rate", "GL Account", "Code", "Main Service"
        }
    ));
    jSearchTable.setShowHorizontalLines(false);
    javax.swing.table.TableColumn column2 = null;
    for (int i = 0; i < 5; i++) {
        column2 = jSearchTable.getColumnModel().getColumn(i);
        if (i == 0) {

            column2.setPreferredWidth(300); //sport column is bigger
        } else {

            //if (i == 2) {
                column2.setPreferredWidth(150);
                // }  else
            //column.setPreferredWidth(50);

        }
    }
    jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jSearchTableMouseClicked(evt);
        }
    });
    jSearchScrollPane.setViewportView(jSearchTable);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 20.0;
    jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

    jButton9.setText("Dispose");
    jButton9.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton9ActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jSearchPanel.add(jButton9, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

    jSearchDialog1.setModal(true);
    jSearchDialog1.setUndecorated(true);
    jSearchDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

    jSearchPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jSearchPanel1.setLayout(new java.awt.GridBagLayout());

    jTextField112.addCaretListener(new javax.swing.event.CaretListener() {
        public void caretUpdate(javax.swing.event.CaretEvent evt) {
            jTextField112CaretUpdate(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 10.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
    jSearchPanel1.add(jTextField112, gridBagConstraints);

    jSearchTable1.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "SERVICE TYPE", "RATE", "GL ACCOUNT", "CODE", "MAIN SERVICE"
        }
    ) {
        boolean[] canEdit = new boolean [] {
            false, false, false, false, false
        };

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    jSearchTable1.setShowHorizontalLines(false);
    javax.swing.table.TableColumn column3 = null;
    for (int i = 0; i < 5; i++) {
        column3 = jSearchTable1.getColumnModel().getColumn(i);
        if (i == 0) {

            column3.setPreferredWidth(300); //sport column is bigger
        } else {

            //if (i == 2) {
                column3.setPreferredWidth(150);
                // }  else
            //column.setPreferredWidth(50);

        }
    }
    jSearchTable1.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jSearchTable1MouseClicked(evt);
        }
    });
    jSearchTable1.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            jSearchTable1KeyReleased(evt);
        }
    });
    jSearchScrollPane1.setViewportView(jSearchTable1);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 20.0;
    jSearchPanel1.add(jSearchScrollPane1, gridBagConstraints);

    jButton91.setText("Dispose");
    jButton91.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton91ActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jSearchPanel1.add(jButton91, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jSearchDialog1.getContentPane().add(jSearchPanel1, gridBagConstraints);

    jSearchDialog2.setModal(true);
    jSearchDialog2.setUndecorated(true);
    jSearchDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

    jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jSearchPanel2.setLayout(new java.awt.GridBagLayout());

    jTextField113.addCaretListener(new javax.swing.event.CaretListener() {
        public void caretUpdate(javax.swing.event.CaretEvent evt) {
            jTextField113CaretUpdate(evt);
        }
    });
    jTextField113.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jTextField113ActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 300.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
    jSearchPanel2.add(jTextField113, gridBagConstraints);

    jSearchTable2.setToolTipText("Click on the target row to select the patient from the search.");
    jSearchTable2.setShowHorizontalLines(false);
    /*javax.swing.table.TableColumn column = null;

    for (int i = 0; i < 4; i++) {

        column = jSearchTable2.getColumnModel().getColumn(i);

        if (i == 1) {

            column.setPreferredWidth(400);
            //sport column is bigger
        } else {

            column.setPreferredWidth(200);

        }
    }
    */
    jSearchTable2.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jSearchTable2MouseClicked(evt);
        }
    });
    jSearchScrollPane2.setViewportView(jSearchTable2);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 20.0;
    jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

    jButton42.setText("Select");
    jButton42.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton42ActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jSearchPanel2.add(jButton42, gridBagConstraints);

    jButton52.setText("Dispose");
    jButton52.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton52ActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jSearchPanel2.add(jButton52, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jSearchDialog2.getContentPane().add(jSearchPanel2, gridBagConstraints);

    jSearchDialog21.setModal(true);
    jSearchDialog21.setUndecorated(true);
    jSearchDialog21.getContentPane().setLayout(new java.awt.GridBagLayout());

    jSearchPanel21.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jSearchPanel21.setLayout(new java.awt.GridBagLayout());

    patientSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
        public void caretUpdate(javax.swing.event.CaretEvent evt) {
            patientSearchTxtCaretUpdate(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 300.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
    jSearchPanel21.add(patientSearchTxt, gridBagConstraints);

    jSearchTable21.setToolTipText("Click on the target row to select the patient from the search.");
    jSearchTable21.setShowHorizontalLines(false);
    /*javax.swing.table.TableColumn column = null;

    for (int i = 0; i < 4; i++) {

        column = jSearchTable2.getColumnModel().getColumn(i);

        if (i == 1) {

            column.setPreferredWidth(400);
            //sport column is bigger
        } else {

            column.setPreferredWidth(200);

        }
    }
    */
    jSearchTable21.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jSearchTable21MouseClicked(evt);
        }
        public void mouseEntered(java.awt.event.MouseEvent evt) {
            jSearchTable21MouseEntered(evt);
        }
    });
    jSearchScrollPane21.setViewportView(jSearchTable21);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 20.0;
    jSearchPanel21.add(jSearchScrollPane21, gridBagConstraints);

    jButton421.setText("Select");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jSearchPanel21.add(jButton421, gridBagConstraints);

    jButton521.setText("Dispose");
    jButton521.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton521ActionPerformed(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jSearchPanel21.add(jButton521, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jSearchDialog21.getContentPane().add(jSearchPanel21, gridBagConstraints);

    jDialog31.setTitle("Enter Doctors Fee");
    jDialog31.setModal(true);
    jDialog31.setSize(400,200);
    jDialog31.getContentPane().setLayout(new java.awt.GridBagLayout());

    jPanel121.setLayout(new java.awt.GridBagLayout());

    jPanel1111.setBackground(new java.awt.Color(130, 232, 255));
    jPanel1111.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter Doctor's details here"));
    jPanel1111.setLayout(new java.awt.GridBagLayout());

    jLabel66111.setText("Amount");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 2;
    jPanel1111.add(jLabel66111, gridBagConstraints);

    jTextField14111.setEditable(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
    jPanel1111.add(jTextField14111, gridBagConstraints);

    jLabel3111.setText("Category");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.weightx = 1.0;
    jPanel1111.add(jLabel3111, gridBagConstraints);

    jTextField4111.setEditable(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
    jPanel1111.add(jTextField4111, gridBagConstraints);

    jPanel312.setBackground(new java.awt.Color(204, 204, 255));
    jPanel312.setLayout(new java.awt.GridBagLayout());

    jLabel582211.setText("Doctor's No.");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel312.add(jLabel582211, gridBagConstraints);

    jLabel5821111.setText("Doc. Name");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel312.add(jLabel5821111, gridBagConstraints);

    jTextField3111.setEditable(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 4.0;
    gridBagConstraints.weighty = 1.0;
    jPanel312.add(jTextField3111, gridBagConstraints);

    jPanel41.setLayout(new java.awt.GridBagLayout());

    jTextField1611.setEditable(false);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel41.add(jTextField1611, gridBagConstraints);

    searchButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
    searchButton13.setToolTipText("Search");
    searchButton13.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
    searchButton13.setMaximumSize(new java.awt.Dimension(74, 53));
    searchButton13.setMinimumSize(new java.awt.Dimension(74, 53));
    searchButton13.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    jPanel41.add(searchButton13, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel312.add(jPanel41, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.gridheight = 5;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 2.0;
    gridBagConstraints.weighty = 1.0;
    jPanel1111.add(jPanel312, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 5;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    gridBagConstraints.weightx = 5.0;
    gridBagConstraints.weighty = 10.0;
    gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
    jPanel121.add(jPanel1111, gridBagConstraints);
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.gridwidth = 6;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel121.add(jSeparator1111, gridBagConstraints);

    jButton301111.setMnemonic('O');
    jButton301111.setText("Ok");
    jButton301111.setToolTipText("Click here to enter data");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 10;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel121.add(jButton301111, gridBagConstraints);

    jButton252111.setMnemonic('c');
    jButton252111.setText("Close");
    jButton252111.setToolTipText("Click here to close window");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 3;
    gridBagConstraints.gridy = 10;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel121.add(jButton252111, gridBagConstraints);

    jButton1111.setMnemonic('h');
    jButton1111.setText("Help");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 4;
    gridBagConstraints.gridy = 10;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jPanel121.add(jButton1111, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    jDialog31.getContentPane().add(jPanel121, gridBagConstraints);

    jSearchDialog11.setModal(true);
    jSearchDialog11.setUndecorated(true);
    jSearchDialog11.getContentPane().setLayout(new java.awt.GridBagLayout());

    jSearchPanel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());
    jSearchPanel11.setLayout(new java.awt.GridBagLayout());

    jTextField1111.addCaretListener(new javax.swing.event.CaretListener() {
        public void caretUpdate(javax.swing.event.CaretEvent evt) {
            jTextField1111CaretUpdate(evt);
        }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 300.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
    jSearchPanel11.add(jTextField1111, gridBagConstraints);

    jSearchTable11.setToolTipText("Click on the target row to select the patient from the search.");
    jSearchTable11.setShowHorizontalLines(false);
    /*int rowsNo = 0;
    //try {

        crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

        crset1.setConnectionSource(pConnDB);

        // try {
            //crset1.execute();

            // crset2.setExecuteOnLoad(true);
            jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

            }));

            tableModel = jSearchTable.getModel();

            jSearchScrollPane.setViewportView(jSearchTable);

            /*   }catch(java.sql.SQLException sqlex){
            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());

        }

        javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }*/
        jSearchScrollPane11.setViewportView(jSearchTable11);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel11.add(jSearchScrollPane11, gridBagConstraints);

        dispose11.setMnemonic('l');
        dispose11.setText("Close");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel11.add(dispose11, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog11.getContentPane().add(jSearchPanel11, gridBagConstraints);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("POINT OF SALE : Cash Sales (CASH REGISTER/POS)");
        setFrameIcon(null);
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
        });
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel8.setLayout(new java.awt.GridBagLayout());

        jPanel71.setLayout(new java.awt.GridBagLayout());

        jLabel71.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel71.add(jLabel71, gridBagConstraints);

        jTextField61.setEditable(false);
        jTextField61.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField61.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel71.add(jTextField61, gridBagConstraints);

        jPanel111.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel111.setLayout(new java.awt.GridBagLayout());

        jPanel211.setBackground(new java.awt.Color(204, 255, 204));
        jPanel211.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Patient File Billing Details (PLEASE NOTE THAT ALL SPACES HIGHLIGHTED IN RED ARE MANDATORY)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Abyssinica SIL", 0, 12), new java.awt.Color(255, 0, 51))); // NOI18N
        jPanel211.setLayout(new java.awt.GridBagLayout());

        jLabel111.setForeground(new java.awt.Color(255, 0, 51));
        jLabel111.setText("Patient Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel211.add(jLabel111, gridBagConstraints);

        jComboBox111.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select distinct upper(main_service)  as main_service from pb_operating_parameters  order by main_service"));
        jComboBox111.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox111ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel211.add(jComboBox111, gridBagConstraints);

        jLabel2121.setText("Revenue Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel211.add(jLabel2121, gridBagConstraints);

        jTextField151.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField151.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel211.add(jTextField151, gridBagConstraints);

        jPanel61.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel61.setMinimumSize(new java.awt.Dimension(82, 40));
        jPanel61.setPreferredSize(new java.awt.Dimension(87, 40));
        jPanel61.setLayout(new java.awt.GridBagLayout());

        patientNameTxt.setEditable(false);
        patientNameTxt.setBorder(javax.swing.BorderFactory.createTitledBorder("Please type at least 6 characters"));
        patientNameTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                patientNameTxtCaretUpdate(evt);
            }
        });
        patientNameTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                patientNameTxtFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1000.0;
        gridBagConstraints.weighty = 1.0;
        jPanel61.add(patientNameTxt, gridBagConstraints);

        searchButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/16x16/Find 2.png"))); // NOI18N
        searchButton1.setToolTipText("Search");
        searchButton1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton1.setIconTextGap(0);
        searchButton1.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton1.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton1.setPreferredSize(new java.awt.Dimension(33, 23));
        searchButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel61.add(searchButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel211.add(jPanel61, gridBagConstraints);

        searchNoChbx.setBackground(new java.awt.Color(153, 255, 255));
        buttonGroup1.add(searchNoChbx);
        searchNoChbx.setSelected(true);
        searchNoChbx.setText("Search By No.");
        searchNoChbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchNoChbxActionPerformed(evt);
            }
        });
        jPanel14.add(searchNoChbx);

        searchNameChbx.setBackground(new java.awt.Color(204, 255, 255));
        buttonGroup1.add(searchNameChbx);
        searchNameChbx.setText("Search By Name");
        searchNameChbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchNameChbxActionPerformed(evt);
            }
        });
        jPanel14.add(searchNameChbx);

        buttonGroup1.add(walkINChkbx);
        walkINChkbx.setText("Walk In");
        walkINChkbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                walkINChkbxActionPerformed(evt);
            }
        });
        jPanel14.add(walkINChkbx);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel211.add(jPanel14, gridBagConstraints);

        jLabel112.setForeground(new java.awt.Color(255, 0, 51));
        jLabel112.setText("Patient No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel211.add(jLabel112, gridBagConstraints);

        patientNumberTxt.setEditable(false);
        patientNumberTxt.setMinimumSize(new java.awt.Dimension(80, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel211.add(patientNumberTxt, gridBagConstraints);

        exemptionNumberLbl.setText("Exemption/Waiver Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel211.add(exemptionNumberLbl, gridBagConstraints);

        exemptionNumberTxt.setMinimumSize(new java.awt.Dimension(80, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel211.add(exemptionNumberTxt, gridBagConstraints);

        jLabel2.setText("File Selection Mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel211.add(jLabel2, gridBagConstraints);

        jLabel16.setText("A/C Code");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel211.add(jLabel16, gridBagConstraints);

        jTextField7.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel211.add(jTextField7, gridBagConstraints);

        jLabel3.setText("Patient Category");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel211.add(jLabel3, gridBagConstraints);

        jTextField1.setEditable(false);
        jTextField1.setText("Cash");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel211.add(jTextField1, gridBagConstraints);

        jLabel4.setText("Unit Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        jPanel211.add(jLabel4, gridBagConstraints);

        unitNumberTxt.setEditable(false);
        unitNumberTxt.setMinimumSize(new java.awt.Dimension(80, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel211.add(unitNumberTxt, gridBagConstraints);

        buttonGroup1.add(mchfpChbx);
        mchfpChbx.setText("MCH/FP");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel211.add(mchfpChbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel111.add(jPanel211, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        jPanel111.add(jSeparator111, gridBagConstraints);

        jPanel32.setBackground(new java.awt.Color(204, 255, 204));
        jPanel32.setBorder(javax.swing.BorderFactory.createTitledBorder("Cheque Details"));
        jPanel32.setLayout(new java.awt.GridBagLayout());

        jLabel22.setText("Cheque No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel32.add(jLabel22, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel32.add(jTextField22, gridBagConstraints);

        jLabel32.setText("Drawer");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
        jPanel32.add(jLabel32, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel32.add(jTextField42, gridBagConstraints);

        jLabel41.setText("Drawer's Bank");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel32.add(jLabel41, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel32.add(jTextField51, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel111.add(jPanel32, gridBagConstraints);

        jPanel311.setBorder(javax.swing.BorderFactory.createTitledBorder("Card Details"));
        jPanel311.setLayout(new java.awt.GridBagLayout());

        jLabel213.setText("Card No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel311.add(jLabel213, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel311.add(jTextField212, gridBagConstraints);

        jLabel313.setText("Card Company");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel311.add(jLabel313, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel311.add(jTextField411, gridBagConstraints);

        jLabel422.setText("Card Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel311.add(jLabel422, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel311.add(jTextField521, gridBagConstraints);

        jLabel4112.setText("Expiry Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel311.add(jLabel4112, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel311.add(jTextField5111, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel111.add(jPanel311, gridBagConstraints);

        jPanel9.setBackground(new java.awt.Color(204, 204, 255));
        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel9.setLayout(new java.awt.GridBagLayout());

        jScrollPane211.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Cash Sale Particulars - Select item/service (by clicking once on the ITEM/SERVICE column) and specify the quantity. Remember to press the TAB key to validate your entries.", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 153, 255))); // NOI18N

        jTable111.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTable111.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Service", "Quantity", "Price", "Total", "Gl Account", "Billed", "Item ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable111.setRowHeight(22);
        javax.swing.table.TableColumn column1 = null;
        for (int i = 0; i < 6; i++) {
            column1 = jTable111.getColumnModel().getColumn(i);
            if (i == 0) {

                column1.setPreferredWidth(300); //sport column is bigger
            } else {

                //if (i == 2) {
                    column1.setPreferredWidth(150);
                    // }  else
                //column.setPreferredWidth(50);

            }
        }
        jTable111.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable111MouseClicked(evt);
            }
        });
        jTable111.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jTable111ComponentShown(evt);
            }
        });
        jTable111.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable111KeyReleased(evt);
            }
        });
        jScrollPane211.setViewportView(jTable111);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 10;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 30.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel9.add(jScrollPane211, gridBagConstraints);

        jPanel13.setBackground(new java.awt.Color(204, 255, 204));
        jPanel13.setLayout(new java.awt.GridBagLayout());

        jLabel1411.setText("Waiver");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        jPanel13.add(jLabel1411, gridBagConstraints);

        jTextField1211.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField1211.setText("0.00");
        jTextField1211.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1211CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.weightx = 1.0;
        jPanel13.add(jTextField1211, gridBagConstraints);

        jLabel14.setText("Amt - Waiver");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        jPanel13.add(jLabel14, gridBagConstraints);

        jTextField12.setEditable(false);
        jTextField12.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField12.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel13.add(jTextField12, gridBagConstraints);

        jLabel141.setForeground(new java.awt.Color(255, 51, 51));
        jLabel141.setText("Money Paid");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        jPanel13.add(jLabel141, gridBagConstraints);

        amountPaidTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        amountPaidTxt.setText("0.00");
        amountPaidTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                amountPaidTxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.weightx = 1.0;
        jPanel13.add(amountPaidTxt, gridBagConstraints);

        jLabel151.setText("Change");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        jPanel13.add(jLabel151, gridBagConstraints);

        changeTxt.setEditable(false);
        changeTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        changeTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.weightx = 1.0;
        jPanel13.add(changeTxt, gridBagConstraints);

        jLabel5311.setText("Amt KShs.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel13.add(jLabel5311, gridBagConstraints);

        billAmountTxt.setEditable(false);
        billAmountTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        billAmountTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 10;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel13.add(billAmountTxt, gridBagConstraints);

        jCheckBox6.setBackground(new java.awt.Color(204, 255, 255));
        jCheckBox6.setForeground(new java.awt.Color(0, 51, 255));
        jCheckBox6.setText("Exemption?");
        jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel13.add(jCheckBox6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel9.add(jPanel13, gridBagConstraints);

        jPanel12.setBackground(new java.awt.Color(204, 255, 204));
        jPanel12.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel12.setLayout(new java.awt.GridBagLayout());

        jCheckBox4.setBackground(new java.awt.Color(204, 255, 204));
        buttonGroup2.add(jCheckBox4);
        jCheckBox4.setText("Item Code");
        jCheckBox4.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jPanel12.add(jCheckBox4, new java.awt.GridBagConstraints());

        jCheckBox5.setBackground(new java.awt.Color(204, 255, 204));
        buttonGroup2.add(jCheckBox5);
        jCheckBox5.setSelected(true);
        jCheckBox5.setText("Description");
        jCheckBox5.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jPanel12.add(jCheckBox5, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel9.add(jPanel12, gridBagConstraints);

        jRadioButton1.setText("Waived/Exempted");
        jRadioButton1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel9.add(jRadioButton1, gridBagConstraints);

        jCheckBox7.setBackground(new java.awt.Color(255, 204, 204));
        jCheckBox7.setForeground(new java.awt.Color(0, 0, 255));
        jCheckBox7.setMnemonic('y');
        jCheckBox7.setText("Copay");
        jCheckBox7.setToolTipText("Click here to receipt Co_payment Patients");
        jCheckBox7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox7ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel9.add(jCheckBox7, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 50;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 50.0;
        jPanel111.add(jPanel9, gridBagConstraints);

        jPanel10.setBackground(new java.awt.Color(204, 255, 204));
        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel10.setLayout(new java.awt.GridBagLayout());

        postSaleDataBtn.setBackground(new java.awt.Color(230, 230, 230));
        postSaleDataBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32x32/Folders/Folder Blue Documents.png"))); // NOI18N
        postSaleDataBtn.setMnemonic('O');
        postSaleDataBtn.setText("Post Receipt data");
        postSaleDataBtn.setToolTipText("Click here enter data");
        postSaleDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                postSaleDataBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel10.add(postSaleDataBtn, gridBagConstraints);

        generateReceiptBtn.setBackground(new java.awt.Color(230, 230, 230));
        generateReceiptBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32x32/Devices & Hardware/Printer 2.png"))); // NOI18N
        generateReceiptBtn.setMnemonic('O');
        generateReceiptBtn.setText("Print Receipt");
        generateReceiptBtn.setToolTipText("Click here enter data");
        generateReceiptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateReceiptBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel10.add(generateReceiptBtn, gridBagConstraints);

        reprintReceiptBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32x32/Devices & Hardware/Printer 3.png"))); // NOI18N
        reprintReceiptBtn.setMnemonic('p');
        reprintReceiptBtn.setText("Re-Print Receipt");
        reprintReceiptBtn.setToolTipText("Click here to edit data");
        reprintReceiptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reprintReceiptBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel10.add(reprintReceiptBtn, gridBagConstraints);

        removeRowBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32x32/Folders/Folder Blue Downloads.png"))); // NOI18N
        removeRowBtn.setMnemonic('r');
        removeRowBtn.setText("Remove Row");
        removeRowBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRowBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        jPanel10.add(removeRowBtn, gridBagConstraints);

        clearFormBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32x32/Devices & Hardware/Hard Drive Mac 2.png"))); // NOI18N
        clearFormBtn.setMnemonic('l');
        clearFormBtn.setText("Clear data");
        clearFormBtn.setToolTipText("Click here to clear textfields");
        clearFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel10.add(clearFormBtn, gridBagConstraints);

        closePosBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32x32/Devices & Hardware/Computer 1.png"))); // NOI18N
        closePosBtn.setMnemonic('C');
        closePosBtn.setText("Close POS");
        closePosBtn.setToolTipText("Click here to close window");
        closePosBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closePosBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel10.add(closePosBtn, gridBagConstraints);

        helpBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/32x32/Document.png"))); // NOI18N
        helpBtn.setMnemonic('h');
        helpBtn.setText("Help");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel10.add(helpBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3000.0;
        gridBagConstraints.weighty = 1.0;
        jPanel10.add(jLabel1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel111.add(jPanel10, gridBagConstraints);

        jPanel51.setBackground(new java.awt.Color(204, 255, 255));
        jPanel51.setBorder(javax.swing.BorderFactory.createTitledBorder("Shift Session Identity"));
        jPanel51.setLayout(new java.awt.GridBagLayout());

        jLabel121.setText("Payment Mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel51.add(jLabel121, gridBagConstraints);

        payModecmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select DISTINCT initcap(payment_mode) as payment_mode from pb_paymentmodes order by payment_mode"));
        payModecmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                payModecmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel51.add(payModecmbx, gridBagConstraints);

        jLabel132.setText("Gl Acc. No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel51.add(jLabel132, gridBagConstraints);

        glAccountTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel51.add(glAccountTxt, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel51.add(datePicker1, gridBagConstraints);

        jLabel8.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel51.add(jLabel8, gridBagConstraints);

        jLabel101.setText("Cash Point");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel51.add(jLabel101, gridBagConstraints);

        cashPointTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.5;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel51.add(cashPointTxt, gridBagConstraints);

        jLabel1311.setText("Shift No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel51.add(jLabel1311, gridBagConstraints);

        shiftNoTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel51.add(shiftNoTxt, gridBagConstraints);

        jLabel113.setText("Receipt No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        jPanel51.add(jLabel113, gridBagConstraints);

        jTextField1113.setEditable(false);
        jTextField1113.setForeground(new java.awt.Color(255, 102, 102));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.weightx = 9.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel51.add(jTextField1113, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        jPanel111.add(jPanel51, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 30.0;
        jPanel71.add(jPanel111, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel8.add(jPanel71, gridBagConstraints);

        jTabbedPane1.addTab("OUT-Patient Cash payments", jPanel8);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        setBounds(0, 0, 1151, 597);
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox6ActionPerformed
        if (check4Exemptions) {
            if (exemptionNumberTxt.getText().toCharArray().length > 0) {
                if (jCheckBox6.isSelected()) {
                    amountPaidTxt.setText("0.00");
                    amountPaidTxt.setEditable(false);
                    jTextField1211.setEditable(false);
                } else {
                    amountPaidTxt.setEditable(true);
                    jTextField1211.setEditable(true);
                    amountPaidTxt.setText(billAmountTxt.getText());
                }
            } else {
                if (jTextField1.getText().startsWith("Cash") || jTextField1.getText().startsWith("Staff")) {
                    javax.swing.JOptionPane.showMessageDialog(this, "You MUST provide a reference number for the Exemption!\n"
                            + "Type the Exemption Reference Number and select this checkbox again.", "Exemption Number!", javax.swing.JOptionPane.ERROR_MESSAGE);

                    jCheckBox6.setSelected(false);
                } else {
                }
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox6ActionPerformed

    private void patientNameTxtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_patientNameTxtFocusGained
        // Add your handling code here:
    }//GEN-LAST:event_patientNameTxtFocusGained

    private void patientNameTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_patientNameTxtCaretUpdate
        // Add your handling code here:
    }//GEN-LAST:event_patientNameTxtCaretUpdate

    private void jTextField1211CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1211CaretUpdate
        //if (check4Exemptions) {
        if (exemptionNumberTxt.getText().toCharArray().length > 0) {
            if (jTextField1211.getCaretPosition() >= 1) {
                double total = java.lang.Double.parseDouble(billAmountTxt.getText());
                double paid = java.lang.Double.parseDouble(amountPaidTxt.getText());
                double waiver = java.lang.Double.parseDouble(jTextField1211.getText());
                if (total >= waiver) {
                    jTextField12.setText(java.lang.String.valueOf(total - waiver));
                    amountPaidTxt.setText(java.lang.String.valueOf(total - waiver));
                } else {
                    if (waiver > total) {
                        javax.swing.JOptionPane.showMessageDialog(this, "Waiver Cannot be more than Total Bill !", "Caution message", javax.swing.JOptionPane.ERROR_MESSAGE);
                        waiver = 0.00;
                    }
                }
            }

        } else {
            if (jTextField1.getText().startsWith("Cash") || jTextField1.getText().startsWith("Staff") && java.lang.Double.parseDouble(jTextField1211.getText()) > 0) {
                //javax.swing.JOptionPane.showMessageDialog(this, "You MUST provide a reference number for the Waiver!\n"
                //        + "Type the Waiver Reference Number and select this checkbox again.", "Waiver Number!", javax.swing.JOptionPane.ERROR_MESSAGE);
            } else {

                if (jTextField1211.getCaretPosition() >= 1) {
                    double total = java.lang.Double.parseDouble(billAmountTxt.getText());
                    double paid = java.lang.Double.parseDouble(amountPaidTxt.getText());
                    double waiver = java.lang.Double.parseDouble(jTextField1211.getText());
                    if (total >= waiver) {
                        jTextField12.setText(java.lang.String.valueOf(total - waiver));
                        amountPaidTxt.setText(java.lang.String.valueOf(total - waiver));
                    } else {
                        if (waiver > total) {
                            javax.swing.JOptionPane.showMessageDialog(this, "Waiver Cannot be more than Total Bill !", "Caution message", javax.swing.JOptionPane.ERROR_MESSAGE);
                            waiver = 0.00;
                        }
                    }
                }
            }
        }
        //}
        // Add your handling code here:
    }//GEN-LAST:event_jTextField1211CaretUpdate

    private void amountPaidTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_amountPaidTxtCaretUpdate
        if (amountPaidTxt.getCaretPosition() >= 1) {
            double total = java.lang.Double.parseDouble(billAmountTxt.getText());
            double waiver = java.lang.Double.parseDouble(jTextField1211.getText());

            jTextField12.setText(java.lang.String.valueOf(total - waiver));
            double paid = java.lang.Double.parseDouble(amountPaidTxt.getText());
            double diff = java.lang.Double.parseDouble(jTextField12.getText());
            if (paid >= diff) {
                changeTxt.setText(java.lang.String.valueOf(paid - diff));
            }

        }         // Add your handling code here:
    }//GEN-LAST:event_amountPaidTxtCaretUpdate

    private void generateReceiptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateReceiptBtnActionPerformed

        if (walkINChkbx.isSelected()) {
            try {
                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT 'WLKN'||lpad(nextval('walkin_no_seq')::varchar,7,'0')");

                java.sql.ResultSet rset = pstmt.executeQuery();

                while (rset.next()) {
                    patientNumberTxt.setText(rset.getString(1));
                }

            } catch (SQLException ex) {
                Exceptions.printStackTrace(ex);
                javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
        /////          if ((Double.parseDouble(amountPaidTxt.getText()) >= Double.parseDouble(billAmountTxt.getText())) && (Double.parseDouble(billAmountTxt.getText()) > 0.00) & (patientNumberTxt.getText().toCharArray().length > 0)) {

        if ((Double.parseDouble(amountPaidTxt.getText()) >= Double.parseDouble(billAmountTxt.getText()) || jCheckBox6.isSelected()) && (patientNumberTxt.getText().toCharArray().length > 0)) {
            jTextField1113.setText(null);
            System.out.println("Printing the receipt.");
            try {
                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT count(status) FROM ac_shifts WHERE status ilike 'running' AND user_name = current_user");
                java.sql.ResultSet rset = pstmt.executeQuery();
                int i = 0;
                while (rset.next()) {
                    i = rset.getInt(1);
                }
                if (i < 1) {
                    com.afrisoftech.hospital.HospitalMain.saccopn.remove(this);
                    //  thisgetParent().remove(this);
                    javax.swing.JOptionPane.showMessageDialog(this, "You MUST open a new shift in order to continue.\n Please close Front End Operations and open afresh.");
                } else {
                    java.util.Calendar calendar = java.util.Calendar.getInstance();

                    long dateNow = calendar.getTimeInMillis();

                    java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

                    System.out.println(datenowSql1.toString());

                    java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

                    System.out.println(datenowSql.toString());
                    int k = 1;
                    String receiptNo1 = null;

                    postSaleDataBtnActionPerformed(evt);

                    //////jButton111ActionPerformed(evt);
// Auto register patient visit
//                    java.sql.PreparedStatement pstmt21a = connectDB.prepareStatement("INSERT INTO hp_patient_visit("
//                            + "patient_no, name, ip_no, payment, visit_no, services, quantity,"
//                            + "department, amount, test, date, result, doctor_name, user_name,"
//                            + "input_date, transaction_type, nature, time, comments, parameter,"
//                            + "status, age, gender, marital_status)"
//                            + "VALUES (?, ?, ?, ?, ?, ?, ?,"
//                            + "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
//                    pstmt21a.setString(1, patientNumberTxt.getText());
//                    pstmt21a.setString(2, patientNameTxt.getText());
//                    pstmt21a.setString(3, "OP");
//                    pstmt21a.setString(4, "Cash");
//                    pstmt21a.setInt(5, 999999999);
//                    pstmt21a.setString(6, "Clinic");
//                    pstmt21a.setDouble(7, 1);
//                    pstmt21a.setString(8, "General");
//                    pstmt21a.setDouble(9, 0.00);
//                    pstmt21a.setString(10, "");
//                    pstmt21a.setDate(11, ServerTime.getSQLDate(connectDB));
//                    pstmt21a.setDouble(12, 0.00);
//                    pstmt21a.setString(13, "");
//                    pstmt21a.setString(14, user);
//                    pstmt21a.setTimestamp(15, datenowSql);
//                    pstmt21a.setString(16, "Revisit");
//                    pstmt21a.setString(17, "1");
//                    pstmt21a.setInt(18, Integer.parseInt("0"));
//                    pstmt21a.setString(19, "Old");
//                    pstmt21a.setString(20, "");
//                    pstmt21a.setBoolean(21, false);
//                    pstmt21a.setDouble(22, Double.parseDouble("1"));
//                    pstmt21a.setString(23, "");
//                    pstmt21a.setString(24, "");
//                    pstmt21a.executeUpdate();
                    System.out.println("PROCESS RECEIPT BOOLEAN [" + processReceipt + "]");

                    if (processReceipt) {

                        try {

//try {
                            connectDB.setAutoCommit(false);

                            System.out.println("This is the receipt no " + receiptNo2);

                            //receiptNo1 = jTextField1113.getText();
                            if (jTextField1113.getText().toCharArray().length > 0) {
                                String receiptNo = jTextField1.getText();
                                String rct = null;
                                java.sql.Statement ps112 = connectDB.createStatement();
                                java.sql.ResultSet rst112 = ps112.executeQuery("select rct_format from receipt_pref");
                                while (rst112.next()) {
                                    rct = rst112.getObject(1).toString();
                                }
                                if (rct.equalsIgnoreCase("Pdf")) {
                                    com.afrisoftech.reports.ReceiptsPdf policy = new com.afrisoftech.reports.ReceiptsPdf();
                                    policy.ReceiptsPdf(connectDB, receiptNo2);
                                } else {
                                    com.afrisoftech.txtreports.GokReceiptsTxt policy = new com.afrisoftech.txtreports.GokReceiptsTxt(connectDB, patientNameTxt.getText(), billAmountTxt.getText(), receiptNo2, this.payModecmbx.getSelectedItem().toString(), amountPaidTxt.getText(), changeTxt.getText(), shiftNoTxt.getText(), unitNumberTxt.getText());

                                }
                                // jTextField1211.setText("0.00");
                                jTextField12.setText("0.00");
                                amountPaidTxt.setText("0.00");
                                changeTxt.setText("0.00");
                                billAmountTxt.setText("0.00");
                                patientNameTxt.setText(null);
                                patientNumberTxt.setText(null);
                                exemptionNumberTxt.setText(null);
                                jCheckBox6.setSelected(false);
                                for (int m = 0; m < jTable111.getRowCount(); m++) {
                                    for (int j = 0; j < jTable111.getColumnCount(); j++) {
                                        jTable111.setValueAt(null, m, j);
                                    }
                                }
                                jTextField12.setText("0.00");
                            } else {
                                javax.swing.JOptionPane.showMessageDialog(this, "Please fill in all the details including the patient name.");
                            }

                        } catch (java.sql.SQLException sq) {
                            sq.printStackTrace();
                            try {

                                connectDB.rollback();
                            } catch (java.sql.SQLException sql) {
                                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                            }
                            System.out.println(sq.getMessage());
                            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                        }
                    }

                    ////}
                    rset.close();
                    pstmt.close();
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, "ERROR: Can't close the cash collection form : Details : " + ex.getMessage());
                //Logger.getLogger(CafeteriaBillPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Please double check your entries.\nThere must be a selected patient file. \nThe cash indicated should be equal or more than the bill raised. \n"
                    + "You must also indicate the amount that the patient has given you. Check to ensure the field for \"Money Paid\" is correct. \n"
                    + "Click on the table on the row which contains the bill which the patient cannot pay and use \"Remove Row\" button to remove it.");
        }
        // Add your handling code here:

        // Add your handling code here:
    }//GEN-LAST:event_generateReceiptBtnActionPerformed
    private void searchButton111Clicked() {

        System.out.println("Showing dialog");

        jSearchDialog2.dispose();
        java.awt.Point point = this.jTextField3111.getLocationOnScreen();

        jSearchDialog2.setSize(400, 200);

        jSearchDialog2.setLocation(point);
        jSearchDialog2.setVisible(true);

    }
    private void jSearchTable21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable21MouseClicked
        patientNumberTxt.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 0).toString());
        patientNameTxt.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 1).toString());
        unitNumberTxt.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 2).toString());

        for (int s = 0; s < jTable111.getRowCount(); s++) {
            for (int r = 0; r < jTable111.getColumnCount(); r++) {
                jTable111.getModel().setValueAt(null, s, r);
            }

        }

        try {

            java.sql.Statement stx1 = connectDB.createStatement();
            java.sql.ResultSet rsx1 = stx1.executeQuery("SELECT DISTINCT payment FROM hp_patient_visit WHERE patient_no ILIKE '" + patientNumberTxt.getText() + "'");
            while (rsx1.next()) {
                jTextField1.setText(rsx1.getString(1));
            }

            stx1.close();
            rsx1.close();

        } catch (java.sql.SQLException sq) {
            sq.printStackTrace();
        }

        this.populateTable(this.patientNumberTxt.getText());
        billAmountTxt.setText(java.lang.String.valueOf(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable111, 3)));
        if (com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable111, 3) > 0) {
            generateReceiptBtn.setEnabled(true);
            this.postSaleDataBtn.setEnabled(true);
            this.reprintReceiptBtn.setEnabled(true);
        }
        jSearchDialog21.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable21MouseClicked

    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        searchButton212Clicked();        // Add your handling code here:
    }//GEN-LAST:event_searchButton1ActionPerformed
    private void searchButton212Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.patientNameTxt.getLocationOnScreen();

        jSearchDialog21.setSize(700, 200);

        jSearchDialog21.setLocation(point);

        jSearchDialog21.setVisible(true);
    }
    private void jButton521ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton521ActionPerformed
        this.jSearchDialog21.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton521ActionPerformed

    private void patientSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_patientSearchTxtCaretUpdate
        if (this.mchfpChbx.isSelected()) {
            if (patientSearchTxt.getCaretPosition() > 3) {
                jSearchTable21.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT DISTINCT anc as anc_no, first_name||' '||middle_name||' '||last_name, telephone from rh.mother_details where anc ILIKE '%" + patientSearchTxt.getText() + "%' or first_name||' '||middle_name||' '||last_name  ILIKE '%" + patientSearchTxt.getText() + "%' "
                        + " UNION SELECT DISTINCT fp_clinic_no as anc_no, full_name, telephone_no from rh.fp_services_register where fp_clinic_no ILIKE '%" + patientSearchTxt.getText() + "%' or full_name  ILIKE '%" + patientSearchTxt.getText() + "%'"
                        + " UNION SELECT DISTINCT pnc_no as anc_no, full_name, telephone from rh.post_natal_follow_up_register where pnc_no ILIKE '%" + patientSearchTxt.getText() + "%' or full_name  ILIKE '%" + patientSearchTxt.getText() + "%' ORDER BY 2"));
            }
        } else {
            if (this.searchNoChbx.isSelected()) {
                if (patientSearchTxt.getCaretPosition() > 3) {

                    System.out.println("SELECT "
                            + " DISTINCT patient_no,(second_name||' '||first_name) as patient_name, patient_race as unit_number FROM hp_patient_register "
                            + "WHERE patient_no ILIKE '%" + patientSearchTxt.getText() + "%' or patient_race ILIKE '%" + patientSearchTxt.getText() + "%' AND last_visit >= (current_date - 3) "
                            + " UNION ALL SELECT "
                            + " DISTINCT patient_no, patient_name, '' as unit_number from patient_bill WHERE patient_no ILIKE '" + patientSearchTxt.getText() + "%' "
                            + " AND date_prescribed >= (current_date - 3)"
                            + " UNION ALL SELECT patient_no,patient_name, sub_chief as unit_number FROM hp_admission WHERE "
                            + " patient_no ILIKE '%" + patientSearchTxt.getText() + "%' or sub_chief ilike '%" + patientSearchTxt.getText() + "%'  AND  "
                            + " discharge_date::DATE = ('now'::text)::date ORDER BY patient_no");
//            } else {

                    jSearchTable21.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT "
                            + " DISTINCT patient_no,(second_name||' '||first_name) as patient_name, patient_race as unit_number FROM hp_patient_register "
                            + "WHERE patient_no ILIKE '%" + patientSearchTxt.getText() + "%' or patient_race ILIKE '%" + patientSearchTxt.getText() + "%' AND last_visit >= (current_date - 3) "
                            + " UNION ALL SELECT "
                            + " DISTINCT patient_no, patient_name, '' as unit_number from patient_bill WHERE patient_no ILIKE '" + patientSearchTxt.getText() + "%' "
                            + " AND date_prescribed >= (current_date - 3)  and  patient_no ILIKE 'WK%' "
                            + " UNION ALL SELECT patient_no,patient_name, sub_chief as unit_number FROM hp_admission WHERE "
                            + " patient_no ILIKE '%" + patientSearchTxt.getText() + "%' or sub_chief ilike '%" + patientSearchTxt.getText() + "%'  AND  "
                            + " discharge_date::DATE = ('now'::text)::date ORDER BY patient_no"));

                    jSearchTable21.setShowHorizontalLines(false);

                    jSearchScrollPane21.setViewportView(jSearchTable21);

                }

            } else {

                if (patientSearchTxt.getCaretPosition() > 2) {

                    System.out.println("SELECT "
                            + "distinct patient_no, (second_name||' '||first_name)  as patient_name, patient_race as unit_number FROM hp_patient_register"
                            + " WHERE second_name||' '||first_name ILIKE '%" + patientSearchTxt.getText() + "%' and "
                            + "last_visit >= (current_date - 3) UNION ALL select DISTINCT patient_no,patient_name, '' as unit_number from hp_pharmacy "
                            + "where date_prescribed >= (current_date - 3) and patient_no ilike 'wk%' and patient_name "
                            + "ILIKE '%" + patientSearchTxt.getText() + "%'  AND paid = false UNION ALL SELECT DISTINCT patient_no,"
                            + "patient_name, sub_chief as unit_number FROM hp_admission WHERE patient_name ILIKE '%" + patientSearchTxt.getText() + "%' or sub_chief ilike '%" + patientSearchTxt.getText() + "%'  "
                            + "AND discharge_date::DATE = now() order by patient_name");
//            } else {
                    // try {
                    jSearchTable21.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT "
                            + "distinct patient_no, (second_name||' '||first_name)  as patient_name, patient_race as unit_number FROM hp_patient_register"
                            + " WHERE second_name||' '||first_name ILIKE '%" + patientSearchTxt.getText() + "%' and "
                            + "last_visit >= (current_date - 3) UNION ALL select DISTINCT patient_no,patient_name, '' as unit_number from hp_pharmacy "
                            + "where date_prescribed >= (current_date - 3) and patient_no ilike 'wk%' and patient_name "
                            + "ILIKE '%" + patientSearchTxt.getText() + "%'  AND paid = false UNION ALL SELECT DISTINCT patient_no,"
                            + "patient_name, sub_chief as unit_number FROM hp_admission WHERE patient_name ILIKE '%" + patientSearchTxt.getText() + "%' or sub_chief ilike '%" + patientSearchTxt.getText() + "%'  "
                            + "AND discharge_date::DATE = now() order by patient_name"));

                    jSearchTable21.setShowHorizontalLines(false);
                    jSearchScrollPane21.setViewportView(jSearchTable21);

                }
            }
        }      // Add your handling code here:
    }//GEN-LAST:event_patientSearchTxtCaretUpdate

    public class ComboTextField extends javax.swing.JTextField implements javax.swing.ComboBoxEditor {

        public ComboTextField() {

            initComponents();

        }

        void initComponents() {

            // oldComboBox1311Model = jComboBox1311.getModel();
            // comboTextField = new javax.swing.JTextField();
            comboTextField.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyTyped(java.awt.event.KeyEvent e) {

                    if (e.getID() == java.awt.event.KeyEvent.VK_BACK_SPACE) {

                        changeComboBoxModel(comboTextField.getText());

                        System.out.println(comboTextField.getText() + " Pressed Key " + e.getKeyText(e.getKeyCode()));
                    }
                }
            });

        }

        public java.awt.Component getEditorComponent() {

            return comboTextField;

        }

        public Object getItem() {

            return comboTextField.getText();

        }

        public void setItem(Object obj) {
            //    comboTextField.setText(jComboBox1311.getSelectedItem().toString());
        }

        public void changeComboBoxModel(java.lang.String typedLetters) {

            javax.swing.DefaultComboBoxModel newComboBox1311Model = new javax.swing.DefaultComboBoxModel();

            System.out.println("ComboBox Item No. " + oldComboBox1311Model.getSize());

            for (int i = 0; i < oldComboBox1311Model.getSize(); i++) {

                if (oldComboBox1311Model.getElementAt(i).toString().startsWith(typedLetters)) {

                    newComboBox1311Model.addElement(oldComboBox1311Model.getElementAt(i));

                    //                    jComboBox1311.setModel(newComboBox1311Model);
                }

            }

        }
        //      }
    }
    private void jSearchTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable1MouseClicked
        jTable111.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 0), jTable111.getSelectedRow(), 0);
        jTable111.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 1), jTable111.getSelectedRow(), 2);
        jTable111.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 2), jTable111.getSelectedRow(), 4);
        jTable111.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 3), jTable111.getSelectedRow(), 6);
        jTable111.setValueAt(1, jTable111.getSelectedRow(), 1);

        jTable111.setValueAt(false, jTable111.getSelectedRow(), 5);

        jSearchDialog1.dispose();

        float qty = java.lang.Float.parseFloat(jTable111.getValueAt(jTable111.getSelectedRow(), 1).toString());
        float price = java.lang.Float.parseFloat(jTable111.getValueAt(jTable111.getSelectedRow(), 2).toString());
        float total = qty * price;
        jTable111.setValueAt(total, jTable111.getSelectedRow(), 3);
        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable111, 3);
        billAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
        billAmountTxt.setText(java.lang.String.valueOf(totalSum));
        double totals = java.lang.Double.parseDouble(billAmountTxt.getText());
        ///   double paid = java.lang.Double.parseDouble(jTextField121.getText());
        double waiver = java.lang.Double.parseDouble(jTextField1211.getText());
        jTextField12.setText(java.lang.String.valueOf(totals - waiver));
        amountPaidTxt.setText(java.lang.String.valueOf(totals - waiver));

        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable1MouseClicked
    private void cmbox221MouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane211.getLocationOnScreen();
        jSearchDialog1.setSize(700, 200);
        jSearchDialog1.setLocation(point);
        jSearchDialog1.setVisible(true);

    }
    private void jButton91ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton91ActionPerformed
        this.jSearchDialog1.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton91ActionPerformed

    private void jTextField112CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField112CaretUpdate

        /*
         * if (jTable3.isEditing()) { jTable3.getCellEditor().stopCellEditing();
         * }
         */
        searchButton2122Clicked();
        // Add your handling code here:
    }//GEN-LAST:event_jTextField112CaretUpdate
    private void searchButton2122Clicked() {

        try {
            String patNationality = "";
            String patCateg = "";
            java.sql.Statement stmtTable11 = connectDB.createStatement();

            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT pat_nationality,category FROM hp_patient_register WHERE patient_no = '" + patientNumberTxt.getText() + "'");

            while (rsetTable11.next()) {
                patNationality = rsetTable11.getString(1);
                patCateg = rsetTable11.getString(2);
            }
            if (this.jCheckBox4.isSelected()) {

                if (jTextField112.getCaretPosition() < 1) {

                    System.out.println("Nothing");
                } else {
                    // try {
                    if (patNationality.startsWith("NON")) {
                        jSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, ""
                                + "SELECT DINSTINCT service_type,other_prices::numeric,gl_account,code,main_service FROM pb_operating_parameters WHERE code ILIKE '%" + jTextField112.getText() + "%'  ORDER BY 1"));
                    } else {
                        if (patCateg.startsWith("PRI")) {
                            jSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT service_type,anaesthetist_rate::numeric,gl_account,code,main_service FROM pb_operating_parameters WHERE code ILIKE '%" + jTextField112.getText() + "%'  ORDER BY 1"));
                        } else {
                            jSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT service_type,rate::numeric,gl_account,code,main_service FROM pb_operating_parameters WHERE code ILIKE '%" + jTextField112.getText() + "%'  ORDER BY 1"));// UNION ALL select distinct product,selling_price,gl_code,product_id,department FROM st_stock_prices WHERE product_id ILIKE '" + jTextField112.getText() + "%' and gl_code = '" + jTextField7.getText() + "' ORDER BY 1 LIMIT 30"));
                        }
                    }
                    /*
                     * {
                     * boolean[] canEdit = new boolean[]{ false, false, false,
                     * false, false };
                     *
                     *
                     * boolean isCellEditable(int rowIndex, int columnIndex) {
                     * return canEdit [columnIndex]; } });
                     */
                    jSearchScrollPane1.setViewportView(jSearchTable1);
                    System.out.println("Cannot sort out");

                }

            } else {
                if (jTextField112.getCaretPosition() < 3) {

                    System.out.println("Nothing");
                } else {

                    if (patNationality.startsWith("NON")) {
                        jSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT service_type,other_prices::numeric,gl_account,code,main_service FROM pb_operating_parameters WHERE service_type ILIKE '%" + jTextField112.getText() + "%'  ORDER BY 1"));
                    } else {
                        if (patCateg.startsWith("PRI")) {
                            jSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT service_type,anaesthetist_rate::numeric,gl_account,code,main_service FROM pb_operating_parameters WHERE service_type ILIKE '%" + jTextField112.getText() + "%'  ORDER BY 1"));
                        } else {
                            jSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectorsCaret(connectDB, "SELECT DISTINCT service_type,rate::numeric,gl_account,code,main_service FROM pb_operating_parameters WHERE service_type ILIKE '%" + jTextField112.getText() + "%'  ORDER BY 1"));// UNION ALL select distinct product,selling_price,gl_code,product_id,department FROM st_stock_prices WHERE product_id ILIKE '" + jTextField112.getText() + "%' and gl_code = '" + jTextField7.getText() + "' ORDER BY 1 LIMIT 30"));
                        }
                    }
                    //jSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select service_type,rate::numeric,gl_account,code,main_service FROM pb_operating_parameters WHERE service_type ILIKE '%" + jTextField112.getText() + "%'"));// UNION ALL select product,selling_price,gl_code,product_id,department  FROM st_stock_prices WHERE product ILIKE '%" + jTextField112.getText() + "%'  order by service_type  LIMIT 30"));

                    jSearchScrollPane1.setViewportView(jSearchTable1);
                    System.out.println("Cannot sort out");

                }

            }
            int i = jSearchTable1.getRowCount();
            int k = jSearchTable1.getColumnCount();

            jSearchTable1.editCellAt(-1, -1);

        } catch (java.sql.SQLException sqlExec) {

            sqlExec.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
        //jSearchTable1.setEnabled(false);
    }

    private void populateTable(java.lang.String patient_no) {
        int j = 0;
        int i = 0;

        try {
            java.sql.Statement stmtTable11 = connectDB.createStatement();

            // java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT count(patient_no) FROM patient_bill WHERE "
            //         + "patient_no = '" + patient_no + "'");
            java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("select count(*) from funsoft_outpatient_bills('" + datePicker1.getDate() + "', '" + patientNumberTxt.getText() + "')");
            while (rsetTable11.next()) {
                j = rsetTable11.getInt(1);
            }

            if (j > 0) {
                double waivexe = 0;
                java.sql.Statement stmtTable1c = connectDB.createStatement();

                java.sql.ResultSet rsetTable1c = stmtTable1c.executeQuery(""
                        + "SELECT DISTINCT visit_id,revenue_code,trans_date,sum(amount)*-1 "
                        + "FROM hp_patient_billing "
                        + "WHERE patient_no = '" + patient_no + "' AND amount < 0 and "
                        + "(revenue_code ILIKE 'exe%' OR revenue_code ILIKE 'wai%') AND trans_date > "
                        + "(current_date-2) GROUP BY visit_id,revenue_code,trans_date ORDER BY trans_date DESC LIMIT 1");

                while (rsetTable1c.next()) {
                    this.exemptionNumberTxt.setText(rsetTable1c.getString(1));
                    if (rsetTable1c.getString(2).startsWith("EXE")) {
                        jCheckBox6.setSelected(true);
                        jRadioButton1.setSelected(true);
                    } else {
                        jTextField1211.setText(rsetTable1c.getString(4));
                        jRadioButton1.setSelected(true);
                    }
                    waivexe = rsetTable1c.getDouble(4);
                }
                java.sql.Statement stmtTable1 = connectDB.createStatement();

                //  java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery(""
                //          + "SELECT description, quantity,price,amount,gl_code,true,item_code  FROM patient_bill "
                //          + "WHERE patient_no = '" + patient_no + "'");
                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select * from funsoft_outpatient_bills('" + datePicker1.getDate() + "', '" + patientNumberTxt.getText() + "')");

                while (rsetTable1.next()) {

                    System.out.println("Working at table row " + i);
                    jTable111.setValueAt(rsetTable1.getObject(1), i, 0);
                    jTable111.setValueAt(rsetTable1.getObject(2), i, 1);
                    jTable111.setValueAt(rsetTable1.getObject(3), i, 2);
                    jTable111.setValueAt(rsetTable1.getObject(4), i, 3);
                    jTable111.setValueAt(rsetTable1.getObject(5), i, 4);
                    jTable111.setValueAt(true, i, 5);
                    jTable111.setValueAt(rsetTable1.getObject(8), i, 6);

                    i++;

                }
                billAmountTxt.setText(String.valueOf(com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable111, 3)));

                java.sql.Statement stmtTable111 = connectDB.createStatement();

                java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery("SELECT sum(amount)+'" + waivexe + "' FROM patient_bill WHERE patient_no = '" + patient_no + "'");//AND paid = false UNION SELECT sum(amount) FROM hp_patient_billing WHERE patient_name = '"+patient_no+"' AND paid = false");

                while (rsetTable111.next()) {
                    billAmountTxt.setText(rsetTable111.getObject(1).toString());
                }
                rsetTable111.close();
                stmtTable111.close();
                rsetTable1.close();
                stmtTable1.close();
                rsetTable1c.close();
                stmtTable1c.close();

            }
            rsetTable11.close();
            stmtTable11.close();

        } catch (java.sql.SQLException sqlExec) {
            sqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

    }
    private void reprintReceiptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reprintReceiptBtnActionPerformed

        java.util.Calendar calendar = java.util.Calendar.getInstance();

        long dateNow = calendar.getTimeInMillis();

        java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

        System.out.println(datenowSql1.toString());

        java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

        System.out.println(datenowSql.toString());

        try {
            connectDB.setAutoCommit(false);

            /*
             * java.sql.Statement ps1 = connectDB.createStatement();
             * java.sql.ResultSet rst1 = ps1.executeQuery("select
             * currval('receipt_no_seq')"); while (rst1.next()){
             */
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("");

            receiptNo1 = jTextField1113.getText();
            // }
            //            CashReceiptsPdf policy = new CashReceiptsPdf();
            //            policy.CashReceiptsPdf(connectDB, jTextField91.getText().toUpperCase(),jTextField311.getText(),receiptNo1,this.jComboBox41.getSelectedItem().toString(),jTextField121.getText(),jTextField131.getText());

            String clientReceipt = null;

            java.sql.PreparedStatement pstmtReprint = connectDB.prepareStatement("SELECT dealer FROM ac_cash_collection WHERE receipt_no = ?");

            pstmtReprint.setString(1, jTextField1113.getText());
            java.sql.ResultSet rsetReprint = pstmtReprint.executeQuery();

            while (rsetReprint.next()) {
                clientReceipt = rsetReprint.getString(1);
            }
            //String receiptNo = jTextField1.getText();
            String rct = null;
            java.sql.Statement ps112 = connectDB.createStatement();
            java.sql.ResultSet rst112 = ps112.executeQuery("select rct_format from receipt_pref");
            while (rst112.next()) {
                rct = rst112.getObject(1).toString();
            }
            if (rct.equalsIgnoreCase("Pdf")) {
                com.afrisoftech.reports.ReceiptsPdf policy = new com.afrisoftech.reports.ReceiptsPdf();
                policy.ReceiptsPdf(connectDB, receiptNo1);
            } else {
                com.afrisoftech.txtreports.GokReceiptsRTxt policy = new com.afrisoftech.txtreports.GokReceiptsRTxt(connectDB, clientReceipt, billAmountTxt.getText(), receiptNo1, this.payModecmbx.getSelectedItem().toString(), amountPaidTxt.getText(), changeTxt.getText(), shiftNoTxt.getText());

            }
            rsetReprint.close();
            pstmtReprint.close();

        } catch (java.sql.SQLException sq) {
            sq.printStackTrace();
            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }

            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }          // Add your handling code here:
    }//GEN-LAST:event_reprintReceiptBtnActionPerformed

    private void jTable111MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable111MouseClicked

        if (jTable111.getSelectedColumn() == 0) {

            this.cmbox221MouseClicked();
        }

        //jButton111.setEnabled(true);
        generateReceiptBtn.setEnabled(true);
        reprintReceiptBtn.setEnabled(false);
        jTextField112.setText("");
        // Add your handling code here:
    }//GEN-LAST:event_jTable111MouseClicked

    private void jTable111ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTable111ComponentShown
        // Add your handling code here:
    }//GEN-LAST:event_jTable111ComponentShown

    private void removeRowBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRowBtnActionPerformed

        int rows2Delete = jTable111.getSelectedRowCount();

        int[] selectedRows = jTable111.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i
                        < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable111.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable111.getModel();

                defTableModel.removeRow(jTable111.getSelectedRow());
            }

        }

        //float qty = java.lang.Float.parseFloat(jTable111.getValueAt(jTable111.getSelectedRow(), 1).toString());
        // float price = java.lang.Float.parseFloat(jTable111.getValueAt(jTable111.getSelectedRow(), 2).toString());
        //float total = qty * price;
        // jTable111.setValueAt(total, jTable111.getSelectedRow(), 3);
        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable111, 3);
        billAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
        billAmountTxt.setText(java.lang.String.valueOf(totalSum));
        double totals = java.lang.Double.parseDouble(billAmountTxt.getText());
        ///   double paid = java.lang.Double.parseDouble(jTextField121.getText());
        double waiver = java.lang.Double.parseDouble(jTextField1211.getText());
        jTextField12.setText(java.lang.String.valueOf(totals - waiver));
        amountPaidTxt.setText(java.lang.String.valueOf(totals - waiver));

        // Add your handling code here:
    }//GEN-LAST:event_removeRowBtnActionPerformed

    private void clearFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFormBtnActionPerformed

        jCheckBox6.setSelected(false);
        patientNameTxt.setText("");
        for (int k = 0; k
                < jTable111.getRowCount(); k++) {
            for (int r = 0; r
                    < jTable111.getColumnCount(); r++) {
                jTable111.getModel().setValueAt(null, k, r);
            }

        }
        billAmountTxt.setText("0.00");
        ///       jTextField1211.setText("0.00");
        amountPaidTxt.setText("0.00");
        //       jTextField12.setText("0.00");
        changeTxt.setText("0.00");
        // Add your handling code here:
    }//GEN-LAST:event_clearFormBtnActionPerformed

    private void closePosBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closePosBtnActionPerformed
        this.dispose();       // Add your handling code here:
    }//GEN-LAST:event_closePosBtnActionPerformed

    private void jTable111KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable111KeyReleased
        if (jTable111.getModel().getValueAt(jTable111.getSelectedRow(), 1) != null) {
            if (jTable111.getSelectedColumn() == jTable111.getSelectedColumn()) {
                float qty = java.lang.Float.parseFloat(jTable111.getValueAt(jTable111.getSelectedRow(), 1).toString());
                float price = java.lang.Float.parseFloat(jTable111.getValueAt(jTable111.getSelectedRow(), 2).toString());
                float total = qty * price;
                jTable111.setValueAt(total, jTable111.getSelectedRow(), 3);
                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable111, 3);
                billAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                billAmountTxt.setText(java.lang.String.valueOf(totalSum));
                amountPaidTxt.setText(java.lang.String.valueOf(totalSum));
            }

        }

        /*
         * double resFloat = 0.00; // double totalSum = 0.00; double floatTotal
         * = java.lang.Double.parseDouble(jTextField311.getText());
         *
         * if (jTable111.getValueAt(jTable111.getSelectedRow(),
         * jTable111.getSelectedColumn()) != null) {
         *
         *
         * double floatCol2 =
         * java.lang.Double.parseDouble(jTable111.getValueAt(jTable111.getSelectedRow(),
         * 1).toString());
         *
         * double floatCol3 =
         * java.lang.Double.parseDouble(jTable111.getValueAt(jTable111.getSelectedRow(),
         * 2).toString());
         *
         * double resVal = floatCol2 * floatCol3;
         *
         *
         * jTable111.setValueAt(new java.lang.Float(resVal),
         * jTable111.getSelectedRow(), 3);
         *
         * // System.out.println("Value at cell 3 is : "+
         * jTable11.getValueAt(jTable11.getSelectedRow(),3)); // }
         *
         * for (int i = 0; i < jTable111.getRowCount(); i++) {
         *
         * if (jTable111.getModel().getValueAt(i, 0) != null)
         * {//toString().compareToIgnoreCase(null) {
         *
         * resFloat = resFloat + Double.parseDouble(jTable111.getValueAt(i,
         * 3).toString());
         *
         *
         * // totalSum = floatTotal + resFloat;
         *
         * }
         * }
         *
         * this.tableModelTableChanged1(); }
         * //jTextField31.setText(java.lang.String.valueOf(resFloat)); //}
         *
         *
         * /*
         * double resFloat = 0.00; double floatTotal =
         * java.lang.Double.parseDouble(jTextField311.getText());
         *
         * for (int i = 0; i < jTable111.getRowCount(); i++) {
         *
         * if (jTable111.getModel().getValueAt(jTable111.getSelectedRow(), 0) !=
         * null) {
         *
         * if (jTable111.getSelectedColumn() == 1) {
         *
         * double floatCol2 =
         * java.lang.Double.parseDouble(jTable111.getValueAt(jTable111.getSelectedRow(),
         * 1).toString());
         *
         * double floatCol3 =
         * java.lang.Double.parseDouble(jTable111.getValueAt(jTable111.getSelectedRow(),
         * 2).toString());
         *
         * double resVal = floatCol2 * floatCol3; jTable111.setValueAt(new
         * java.lang.Float(resVal), jTable111.getSelectedRow(), 3); resFloat =
         * resFloat + Double.parseDouble(jTable111.getModel().getValueAt(i,
         * 3).toString());
         *
         * }
         * }
         * jTextField311.setText(java.lang.String.valueOf(resFloat)); }
         */
        // Add your handling code here:
    }//GEN-LAST:event_jTable111KeyReleased
    private void cmbox21ActionPerformed(java.awt.event.ActionEvent evt) {
        java.lang.Object selectedGuaran = cmbox21.getSelectedItem();
        int i = jTable111.getSelectedRow();

        if (selectedGuaran != null) {

            try {
                java.sql.Statement pstmt = connectDB.createStatement();
                java.sql.ResultSet rs = pstmt.executeQuery("select rate::numeric as rate,gl_account from pb_operating_parameters where service_type = '" + selectedGuaran + "' UNION ALL select sp.selling_price,sp.gl_code from st_stock_prices sp where sp.product = '" + selectedGuaran + "'");
                while (rs.next()) {
                    jTable111.setValueAt(rs.getObject(1), i, 2);
                    jTable111.setValueAt(rs.getObject(2), i, 4);
                }
                rs.close();
                pstmt.close();

            } catch (java.sql.SQLException sqlex) {
                System.out.println(sqlex.getMessage());
            }

        }

    }
    private void postSaleDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_postSaleDataBtnActionPerformed

        try {
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT count(status) FROM ac_shifts WHERE status ilike 'running' AND user_name = current_user");
            java.sql.ResultSet rset = pstmt.executeQuery();
            int i = 0;
            while (rset.next()) {
                i = rset.getInt(1);
            }
            if (i < 1) {
                com.afrisoftech.hospital.HospitalMain.saccopn.remove(this);
                //  thisgetParent().remove(this);
                javax.swing.JOptionPane.showMessageDialog(this, "You MUST open a new shift in order to continue.\n Please close Front End Operations and open afresh.");
            } else {

                this.saveData();
                //      dispatchThread = new DispatchThread();

                //     dispatchThread.start();
                if (processReceipt) {
                    postSaleDataBtn.setEnabled(false);

                    generateReceiptBtn.setEnabled(false);
                }
            }
            rset.close();
            pstmt.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, "ERROR: Can't close the cash collection form : Details : " + ex.getMessage());
            //Logger.getLogger(CafeteriaBillPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Add your handling code here:
    }//GEN-LAST:event_postSaleDataBtnActionPerformed

    private void jComboBox111ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox111ActionPerformed
        postSaleDataBtn.setEnabled(true);
        generateReceiptBtn.setEnabled(true);
        reprintReceiptBtn.setEnabled(true);

        try {
            java.sql.Statement ps11 = connectDB.createStatement();
            java.sql.ResultSet rst11 = ps11.executeQuery("select code,sub_code from pb_activity WHERE activity ilike '" + jComboBox111.getSelectedItem() + "'");
            while (rst11.next()) {

                jTextField7.setText(rst11.getString(1));
                //jTextField22.setText(rst11.getString(2));

            }
            ps11.close();
            ps11.close();
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
        }

        // Add your handling code here:
    }//GEN-LAST:event_jComboBox111ActionPerformed

    private void payModecmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_payModecmbxActionPerformed
        try {
            java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rset1 = stmt1.executeQuery("select code from pb_activity where activity_category   ILIKE 'RC'");
            while (rset1.next()) {
                glAccountTxt.setText(rset1.getObject(1).toString());
            }

            stmt1.close();
            rset1.close();
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();

        }

        if (payModecmbx.getSelectedItem().equals("Credit Card")) {
            // jDialog3.setVisible(true);
            // int resOptt =  javax.swing.JOptionPane.showOptionDialog(this, "Select Account Type", "Select Account Type Here", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE, null, new java.lang.String[]{"Credit Card", "Scheme", "Cancel"}, "");

            //  if (resOptt == javax.swing.JOptionPane.YES_OPTION) {
            jPanel32.setVisible(false);
            // jPanel41.setVisible(true);
            jPanel311.setVisible(true);
            jTextField42.setText("");
            jTextField51.setText("");
            jTextField22.setText("");
        } else {
            if (payModecmbx.getSelectedItem().equals("Cheque")) {
                //                jPanel41.setVisible(false);
                jPanel311.setVisible(false);
                jPanel32.setVisible(true);
                jTextField212.setText("");
                jTextField521.setText("");
                jTextField411.setText("");
            } else {

                jPanel311.setVisible(false);
                jPanel32.setVisible(false);
                jTextField212.setText("");
                jTextField521.setText("");
                jTextField411.setText("");
                jTextField42.setText("");
                jTextField51.setText("");
                jTextField22.setText("");
            }

        }

        postSaleDataBtn.setEnabled(true);
        generateReceiptBtn.setEnabled(true);
        reprintReceiptBtn.setEnabled(true);
        // Add your handling code here:
    }//GEN-LAST:event_payModecmbxActionPerformed

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden

        System.setProperty("billpmnt", "closed");

        System.out.println("Form closed");

        System.out.println(System.getProperty("billpmnt"));// Add your handling code here:
    }//GEN-LAST:event_formComponentHidden

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed

        System.setProperty("billpmnt", "closed");

        System.out.println("Form closed");
        // Add your handling code here:
    }//GEN-LAST:event_formInternalFrameClosed

    private void walkINChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_walkINChkbxActionPerformed
        patientNameTxt.setEditable(true);
// TODO add your handling code here:
    }//GEN-LAST:event_walkINChkbxActionPerformed

    private void searchNoChbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchNoChbxActionPerformed
        patientNameTxt.setEditable(false);        // TODO add your handling code here:
    }//GEN-LAST:event_searchNoChbxActionPerformed

    private void searchNameChbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchNameChbxActionPerformed
        patientNameTxt.setEditable(false);        // TODO add your handling code here:
    }//GEN-LAST:event_searchNameChbxActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jSearchTable21MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable21MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jSearchTable21MouseEntered

    private void jSearchTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jSearchTable1KeyReleased
        // for (int i = 0; i  < jTable111.getRowCount(); i++) {

        if (jSearchTable1.editCellAt(jSearchTable1.getSelectedRow(), jSearchTable1.getSelectedColumn())) {
            javax.swing.JOptionPane.showMessageDialog(this, "Be warned  you cannot alter date".toUpperCase(), "Warning Message", javax.swing.JOptionPane.WARNING_MESSAGE);
            for (int k = 0; k < jSearchTable1.getRowCount(); k++) {
                for (int r = 0; r < jSearchTable1.getColumnCount(); r++) {
                    jSearchTable1.setValueAt(null, k, r);
                }
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jSearchTable1KeyReleased

    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed
        jSearchDialog2.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton52ActionPerformed

    private void jButton42ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton42ActionPerformed
        //     jComboBox1311.setSelectedItem(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0));
        //      jTextField111.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
        //     jSearchDialog2.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jButton42ActionPerformed

    private void jSearchTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2MouseClicked
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable2MouseClicked

    private void jTextField113ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField113ActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jTextField113ActionPerformed

    private void jTextField113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField113CaretUpdate
        // Add your handling code here:
    }//GEN-LAST:event_jTextField113CaretUpdate

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        this.jSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jSearchScrollPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchScrollPaneMouseClicked
        // Add your handling code here:
    }//GEN-LAST:event_jSearchScrollPaneMouseClicked

    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        //      jT.setSelectedItem(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0));
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked

    private void jTextField11CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11CaretUpdate
        // Add your handling code here:
    }//GEN-LAST:event_jTextField11CaretUpdate

    private void jTextField1111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1111CaretUpdate
        // Add your handling code here:
    }//GEN-LAST:event_jTextField1111CaretUpdate

    private void jCheckBox7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox7ActionPerformed
        com.afrisoftech.accounting.CopayReceiptsIntfr other = new com.afrisoftech.accounting.CopayReceiptsIntfr(connectDB, pConnDB, billAmountTxt.getText(), this.shiftNoTxt.getText(), this.glAccountTxt.getText(), this.patientNumberTxt.getText(), this.patientNameTxt.getText(), this.cashPointTxt.getText());
        this.getParent().add(other, javax.swing.JLayeredPane.DEFAULT_LAYER);
        try {
            other.setSelected(true);
        } catch (java.beans.PropertyVetoException pvt) {
        }
        other.setVisible(true);         // Add your handling code here:
    }//GEN-LAST:event_jCheckBox7ActionPerformed

    public void tableModelTableChanged1() {
        System.out.println("Calculating totals for table 11 and 2.");
        //        double resFloat = 0.00;
        double resFloat = 0.00;

        for (int i = 0; i < jTable111.getRowCount(); i++) {

            if (jTable111.getModel().getValueAt(i, 0) != null) {

                if (jTable111.getSelectedColumn() == 1) {

                    resFloat = resFloat + Double.parseDouble(jTable111.getModel().getValueAt(i, 3).toString());

                    billAmountTxt.setText(java.lang.String.valueOf(resFloat));
                } else {
                    resFloat = resFloat + Double.parseDouble(jTable111.getModel().getValueAt(i, 3).toString());
                }

                billAmountTxt.setText(java.lang.String.valueOf(resFloat));
            }

        }

        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    public void tableModelTableChanged1(javax.swing.event.TableModelEvent evt) {

        //        double resFloat = 0.00;
        double resFloat = 0.00;

        for (int i = 0; i
                < jTable111.getRowCount(); i++) {

            if (jTable111.getModel().getValueAt(i, 0) != null) {

                if (jTable111.getSelectedColumn() == 1) {

                    resFloat = resFloat + Double.parseDouble(jTable111.getModel().getValueAt(i, 3).toString());

                    billAmountTxt.setText(java.lang.String.valueOf(resFloat));
                } else {
                    resFloat = resFloat + Double.parseDouble(jTable111.getModel().getValueAt(i, 3).toString());
                }

                billAmountTxt.setText(java.lang.String.valueOf(resFloat));

            }

        }

        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    public java.lang.String getShiftNumber() {

        try {

            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("select code from ac_cash_points_setup where description = current_user");
            while (rsetf.next()) {
                // cashPoint = rsetf.getObject(1).toString();
            }
            rsetf.close();
            stmtf.close();
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("select not successful");
        }

        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE user_name = current_user AND (status = 'Running' OR status = 'Suspended')");

            while (rset.next()) {

                shift_no = rset.getString(1);

            }
            stmt.close();
            rset.close();
        } catch (java.sql.SQLException sqlExec) {
            sqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        return shift_no;

    }

    public java.lang.String getCashPoint() {

        try {

            java.sql.Statement stmt = connectDB.createStatement();

            // java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE cash_point = '"+System.getProperty("cashpoint")+"' AND user_name = current_user AND (status = 'Running' OR status = 'Suspended')");
            java.sql.ResultSet rset = stmt.executeQuery("SELECT cash_point FROM ac_shifts WHERE user_name = current_user AND (status = 'Running' OR status = 'Suspended')");

            while (rset.next()) {

                cash_no = rset.getString(1);
                cashPointTxt.setText(cash_no);

            }
            rset.close();
            stmt.close();

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        return cash_no;

    }

    private class DispatchThread extends java.lang.Thread {

        public synchronized void run() {
            saveData();
            ////  processReceipt = true;
        }
    }

    private void saveData() {

        if ((jCheckBox6.isSelected() || Double.parseDouble(jTextField1211.getText()) > 0.00) && exemptionNumberTxt.getText().toCharArray().length < 1) {

            //System.out.println("Can't process receipt...");
            // processReceipt = false;
            javax.swing.JOptionPane.showMessageDialog(this, "You MUST provide Exemption/Waiver number.\n Please type the reference number for the Exemption/Waiver\n on the [Exemption/Waiver Number] field on the POS form.", "WARNING: EXEMPTION/WAIVER NUMBER!", javax.swing.JOptionPane.WARNING_MESSAGE);
        } else {

            processReceipt = true;

            ///  System.
            if (patientNameTxt.getText().equalsIgnoreCase("")) {
                javax.swing.JOptionPane.showMessageDialog(this, "You cannot save without the name", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            } else {
                if (shiftNoTxt.getText().equalsIgnoreCase("")) {
                    javax.swing.JOptionPane.showMessageDialog(this, "You cannot save without the shift No \n enquire if you are created as a shift operator", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                } else {
                    jTextField1113.setText("");

                    java.util.Calendar calendar = java.util.Calendar.getInstance();

                    long dateNow = calendar.getTimeInMillis();

                    java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

                    System.out.println("RECEIPT DATE : [" + datenowSql1.toString() + "]");

                    java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

                    System.out.println(datenowSql.toString());
                    String desc = null;
                    String billNo = null;
                    String transNo = null;
                    String payMode = null;
                    String patientAcc = null;
                    String cardNo = null;
                    String AccDesc = null;
                    String scheme = null;
                    String cardName = null;
                    String isurer = null;
                    String expDate = null;
                    String staffNo = null;
                    String glAcc = null;
                    String receiptNo1 = null;
                    String actCode1 = null;
                    String glCode1 = null;
                    String bankAcc1 = null;
                    String transNo1 = null;
                    String actNames1 = null;
                    String patCat1 = null;
                    String patientAcc1 = null;
                    String user = null;
                    String glAcc1 = null;
                    String priceCategory = null;
                    String name = null;
                    String mdepartment = null;
                    java.sql.Date dates = null;
                    receiptNo2 = null;
                    java.sql.Savepoint registerSavePoint = null;
                    try {
                        connectDB.setAutoCommit(false);
                        registerSavePoint
                                = connectDB.setSavepoint("registration");
                    } catch (java.sql.SQLException ex) {
                        ex.printStackTrace();
                    }

                    try {
                        java.sql.Statement stm1211 = connectDB.createStatement();
                        //    java.sql.Statement ps1 = connectDB.createStatement();
                        java.sql.Statement pss = connectDB.createStatement();
                        //   java.sql.Statement stm122 = connectDB.createStatement();
                        java.sql.Statement pss1 = connectDB.createStatement();
                        java.sql.Statement stm121 = connectDB.createStatement();
                        java.sql.ResultSet rse121 = null;
                        java.sql.Statement stm121s = connectDB.createStatement();
                        java.sql.ResultSet rse121s = null;
                        java.sql.Statement stm121w = connectDB.createStatement();
                        java.sql.Statement stm121r = connectDB.createStatement();
                        java.sql.Statement ps1q = connectDB.createStatement();
                        java.sql.PreparedStatement pstmt112F = null;
                        java.sql.PreparedStatement pstmt112 = null;
                        java.sql.ResultSet rst1q = null;
                        java.sql.PreparedStatement psr = null;
                        java.sql.PreparedStatement pstmt25 = null;
                        java.sql.PreparedStatement pstmt212 = null;
                        java.sql.ResultSet rse121w = null;
                        java.sql.ResultSet rse121r = null;
                        java.sql.PreparedStatement pstmt41d = null;
                        java.sql.PreparedStatement pstmt41 = null;
                        java.sql.PreparedStatement pstmt411 = null;
                        java.sql.PreparedStatement pstmt25e = null;
                        java.sql.Statement ps = connectDB.createStatement();
                        java.sql.ResultSet rst = null;
                        java.sql.Statement stm12fx = connectDB.createStatement();
                        java.sql.ResultSet rse12fx = null;
                        java.sql.Statement stm12f = connectDB.createStatement();
                        java.sql.ResultSet rse12f = null;
                        java.sql.Statement stm12 = connectDB.createStatement();
                        java.sql.ResultSet rse12 = null;
                        java.sql.ResultSet rse1211 = null;
                        java.sql.ResultSet rsts = null;
                        java.sql.ResultSet rss = null;

//select current_timestamp
                        rse12fx = stm12fx.executeQuery("select cash_point,start_date::DATE from ac_shifts WHERE shift_no = '" + shiftNoTxt.getText() + "'");
                        while (rse12fx.next()) {
                            cashPointTxt.setText(rse12fx.getString(1));
                            dates = rse12fx.getDate(2);
                        }
                        dates = com.afrisoftech.lib.ServerTime.getSQLDate(connectDB);
                        rse12f = stm12f.executeQuery("select now()");
                        while (rse12f.next()) {
                            datenowSql = rse12f.getTimestamp(1);
                        }

                        rse12 = stm12.executeQuery("select code,activity,current_user from pb_activity where activity_category ='PR'");
                        while (rse12.next()) {

                            patientAcc = rse12.getObject(1).toString();
                            AccDesc = rse12.getObject(2).toString();
                            user = rse12.getObject(3).toString();
                        }

                        rse1211 = stm1211.executeQuery("select activity,code from pb_activity where activity_category ='RC'");
                        while (rse1211.next()) {
                            rname = rse1211.getObject(1).toString();
                            rcode = rse1211.getObject(2).toString();
                        }

                        /*
                         * java.sql.ResultSet rst1 = ps1.executeQuery("select
                         * nextval('receipt_no_seq')"); while (rst1.next()){
                         * receiptNo1 = rst1.getObject(1).toString(); }
                         */
                        //receiptNo1 = datenowSql.toString();//com.afrisoftech.lib.DateLables.getDateLabel();
                        rss = pss.executeQuery("select nextval('transaction_no_seq')");
                        while (rss.next()) {
                            transNo1 = rss.getObject(1).toString();
                            receiptNo1 = "O" + rss.getObject(1).toString();
                        }

                        rsts = pss1.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                        while (rsts.next()) {
                            actCode1 = rsts.getObject(1).toString();
                            actNames1 = rsts.getObject(2).toString();
                        }

                        for (int i = 0; i < jTable111.getRowCount(); i++) {
                            if (jTable111.getModel().getValueAt(i, 0) != null) {
                                double waived = java.lang.Double.valueOf(jTable111.getValueAt(i, 3).toString());

                                System.out.println("Bill No 2 " + billNo);

                                rse121 = stm121.executeQuery("select activity,code,department from pb_activity where code ='" + jTable111.getModel().getValueAt(i, 4).toString() + "'");
                                while (rse121.next()) {

                                    glAcc = rse121.getObject(1).toString();
                                    if (rse121.getObject(3) != null) {
                                        mdepartment = rse121.getObject(3).toString();
                                    } else {
                                        mdepartment = "-";
                                    }
                                }
                                rse121s = stm121s.executeQuery("SELECT prov_code FROM st_stock_item WHERE item_code = '" + jTable111.getModel().getValueAt(i, 6).toString() + "' "
                                        + "UNION ALL SELECT price_category FROM pb_operating_parameters WHERE code = '" + jTable111.getModel().getValueAt(i, 6).toString() + "'");
                                while (rse121s.next()) {

                                    if (rse121s.getObject(1) == null) {
                                        priceCategory = "0";
                                    } else {
                                        priceCategory = rse121s.getObject(1).toString();
                                    }
                                }

                                if (waived > 0) {
                                    if (jTable111.getValueAt(i, 0).toString().equalsIgnoreCase("NHIF PAYMENTS") || jTable111.getValueAt(i, 0).toString().equalsIgnoreCase("OTHER DEBTORS PAYMENTS")) {
                                    } else {

                                        System.out.println("Bill No 4" + billNo);
                                        pstmt212 = connectDB.prepareStatement("INSERT INTO ac_ledger values(?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                        pstmt212.setObject(1, jTable111.getValueAt(i, 4).toString());
                                        pstmt212.setString(2, glAcc);
                                        pstmt212.setString(3, patientNumberTxt.getText());
                                        if (patientNameTxt.getText().equals("") || patientNameTxt.getText().equals(null)) {
                                            javax.swing.JOptionPane.showMessageDialog(this, "PATIENT NAME MISSING !!", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                        } else {
                                            pstmt212.setString(4, patientNameTxt.getText());
                                        }

                                        pstmt212.setString(5, "");
                                        pstmt212.setString(6, "");
                                        pstmt212.setString(7, "");
                                        pstmt212.setString(8, "OP");
                                        pstmt212.setString(9, jTextField51.getText());
                                        pstmt212.setString(10, payModecmbx.getSelectedItem().toString());
                                        pstmt212.setString(11, jTextField22.getText());
                                        pstmt212.setString(12, receiptNo1);
                                        pstmt212.setString(13, "");
                                        pstmt212.setString(14, jTable111.getValueAt(i, 0).toString());
                                        pstmt212.setString(15, "Revenue");
                                        pstmt212.setDouble(16, 0.00);
                                        pstmt212.setDouble(17, java.lang.Double.valueOf(jTable111.getValueAt(i, 3).toString()));
                                        pstmt212.setDate(18, dates);//.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                        pstmt212.setString(19, transNo1);
                                        pstmt212.setBoolean(20, false);
                                        pstmt212.setBoolean(21, false);
                                        pstmt212.setBoolean(22, false);
                                        pstmt212.setString(23, user);
                                        pstmt212.setString(24, cashPointTxt.getText());
                                        pstmt212.setString(25, shiftNoTxt.getText());
                                        pstmt212.executeUpdate();
                                        pstmt212.close();
                                        //}
                                    }

                                    pstmt25 = connectDB.prepareStatement("INSERT INTO "
                                            + "ac_cash_collection values(?,?,?,?,?,?,?,?, "
                                            + "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, "
                                            + "?,?,?,?,?,?,?,?,?,?,?,?)");
                                    pstmt25.setObject(1, jTable111.getValueAt(i, 4).toString());
                                    pstmt25.setObject(2, jTable111.getValueAt(i, 0).toString());
                                    pstmt25.setString(3, patientNumberTxt.getText());
                                    pstmt25.setString(4, patientNameTxt.getText().toUpperCase());
                                    pstmt25.setString(5, payModecmbx.getSelectedItem().toString());
                                    pstmt25.setString(6, jTextField212.getText());
                                    pstmt25.setString(7, jTextField521.getText());
                                    pstmt25.setString(8, jTextField42.getText());
                                    if (jTextField51.getText().equals("")) {
                                        pstmt25.setString(9, jTextField411.getText());
                                    } else {
                                        pstmt25.setString(9, jTextField51.getText());
                                    }

                                    pstmt25.setString(10, rcode);
                                    pstmt25.setString(11, jTextField22.getText());
                                    pstmt25.setString(12, receiptNo1);
                                    pstmt25.setString(13, exemptionNumberTxt.getText());
                                    pstmt25.setString(14, patientNameTxt.getText().toUpperCase());
                                    pstmt25.setString(15, "Receipts");
                                    pstmt25.setDouble(16, java.lang.Double.valueOf(jTable111.getValueAt(i, 3).toString()));
                                    pstmt25.setDouble(17, 0.00);
                                    pstmt25.setDate(18, dates);//com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt25.setString(19, "" + transNo1 + "");
                                    pstmt25.setBoolean(20, false);
                                    pstmt25.setBoolean(21, false);
                                    pstmt25.setBoolean(22, false);
                                    pstmt25.setString(23, user);
                                    pstmt25.setString(24, cashPointTxt.getText());
                                    pstmt25.setString(25, shiftNoTxt.getText());
                                    pstmt25.setDate(26, null);
                                    pstmt25.setDouble(27, java.lang.Double.valueOf(jTable111.getValueAt(i, 1).toString()));
                                    pstmt25.setDate(28, null);
                                    pstmt25.setTimestamp(29, datenowSql);
                                    pstmt25.setString(30, mdepartment);
                                    pstmt25.setBoolean(31, false);
                                    pstmt25.setObject(32, priceCategory);
                                    pstmt25.setObject(33, jTable111.getValueAt(i, 6).toString());
                                    pstmt25.setDouble(34, java.lang.Double.valueOf(jTable111.getValueAt(i, 2).toString()));

                                    pstmt25.executeUpdate();
//
//                                    pstmt41d = connectDB.prepareStatement("UPDATE pb_doctors_request SET paid = true WHERE patient_no = '" + patientNumberTxt.getText() + "' AND service = '" + jTable111.getValueAt(i, 0) + "' AND trans_date >= current_date - 1");
//                                    pstmt41d.executeUpdate();
//                                    pstmt41 = connectDB.prepareStatement("UPDATE hp_pharmacy SET paid = true, collected = false WHERE patient_no = '" + patientNumberTxt.getText() + "' AND description = '" + jTable111.getValueAt(i, 0) + "' AND date_prescribed > current_date - 2");
//                                    pstmt41.executeUpdate();
//
//                                    pstmt411 = connectDB.prepareStatement("UPDATE hp_patient_billing SET paid = true, collected = false WHERE patient_no = '" + patientNumberTxt.getText() + "' AND service = '" + jTable111.getValueAt(i, 0) + "' AND trans_date > current_date - 2");
//                                    pstmt411.executeUpdate();

                                    if (jTable111.getValueAt(i, 0).toString().equalsIgnoreCase("NHIF PAYMENTS")) {
                                        pstmt25e = connectDB.prepareStatement("INSERT INTO ac_debtors values(?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");

                                        pstmt25e.setObject(1, rcode);
                                        pstmt25e.setObject(2, jComboBox111.getSelectedItem().toString());
                                        pstmt25e.setString(3, patientNameTxt.getText());
                                        pstmt25e.setString(4, "");
                                        pstmt25e.setString(5, jTable111.getValueAt(i, 0).toString());
                                        pstmt25e.setString(6, "");
                                        pstmt25e.setString(7, "");
                                        pstmt25e.setString(8, receiptNo1);
                                        pstmt25e.setString(9, "");
                                        pstmt25e.setString(10, "");
                                        pstmt25e.setString(11, transNo1);
                                        pstmt25e.setString(12, "Debt Payments");
                                        pstmt25e.setDouble(13, 0.00);
                                        pstmt25e.setDouble(14, java.lang.Double.valueOf(jTable111.getValueAt(i, 3).toString()));
                                        pstmt25e.setDate(15, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                        pstmt25e.setString(16, "");
                                        pstmt25e.setObject(17, "DEBTORS ACCOUNT");
                                        pstmt25e.setBoolean(18, false);
                                        pstmt25e.setBoolean(19, false);
                                        pstmt25e.setString(20, user);
                                        pstmt25e.setString(21, "");
                                        pstmt25e.setDouble(22, 0.00);
                                        pstmt25e.setBoolean(23, false);
                                        pstmt25e.setDouble(24, 0.00);
                                        pstmt25e.setString(25, "");
                                        pstmt25e.setDate(26, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                        pstmt25e.setBoolean(27, false);
                                        pstmt25e.executeUpdate();

                                    }

                                    if (jTable111.getValueAt(i, 0).toString().equalsIgnoreCase("OTHER DEBTORS PAYMENTS")) {
                                        pstmt25e = connectDB.prepareStatement("INSERT INTO ac_debtors VALUES(?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");

                                        pstmt25e.setObject(1, rcode);
                                        pstmt25e.setObject(2, jComboBox111.getSelectedItem().toString());
                                        pstmt25e.setString(3, patientNameTxt.getText());
                                        pstmt25e.setString(4, "");
                                        pstmt25e.setString(5, jTable111.getValueAt(i, 0).toString());
                                        pstmt25e.setString(6, "");
                                        pstmt25e.setString(7, "");
                                        pstmt25e.setString(8, receiptNo1);
                                        pstmt25e.setString(9, "");
                                        pstmt25e.setString(10, "");
                                        pstmt25e.setString(11, transNo1);
                                        pstmt25e.setString(12, "Debt Payments");
                                        pstmt25e.setDouble(13, 0.00);
                                        pstmt25e.setDouble(14, java.lang.Double.valueOf(jTable111.getValueAt(i, 3).toString()));
                                        pstmt25e.setDate(15, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                        pstmt25e.setString(16, "");
                                        pstmt25e.setObject(17, "DEBTORS ACCOUNT");
                                        pstmt25e.setBoolean(18, false);
                                        pstmt25e.setBoolean(19, false);
                                        pstmt25e.setString(20, user);
                                        pstmt25e.setString(21, "");
                                        pstmt25e.setDouble(22, 0.00);
                                        pstmt25e.setBoolean(23, false);
                                        pstmt25e.setDouble(24, 0.00);
                                        pstmt25e.setString(25, "");
                                        pstmt25e.setDate(26, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                        pstmt25e.setBoolean(27, false);
                                        pstmt25e.executeUpdate();
                                        pstmt25e.close();
                                    } else {
                                    }

                                }

                            }

                        }
                        double waiver = 0.00;
                        if (jTextField1211.getText().toCharArray().length > 0) {
                            waiver = java.lang.Double.parseDouble(jTextField1211.getText());
                        }

                        String glAcc1q = null;
                        String glAcc2 = null;
                        String glAcc11 = null;
                        String glAcc21 = null;

                        rse121r = stm121r.executeQuery("select activity,code from pb_activity where activity_category ILIKE 'RC'");
                        while (rse121r.next()) {
                            glAcc21 = rse121r.getObject(2).toString();
                            glAcc11 = rse121r.getObject(1).toString();
                        }
                        rse121w = stm121w.executeQuery("select activity,code,department from pb_activity where activity_category ILIKE 'IEXE'");
                        while (rse121w.next()) {
                            glAcc2 = rse121w.getObject(1).toString();
                            glAcc1q = rse121w.getObject(2).toString();
                            mdepartment = rse121w.getObject(3).toString();
                        }
                        if (jCheckBox6.isSelected()) {

                            if (exemptionNumberTxt.getText().toCharArray().length < 1) {
                                ps = connectDB.createStatement();
                                rst = ps.executeQuery("select 'E'||lpad(nextval('exemption')::text, 7, 0::text)");
                                while (rst.next()) {
                                    exemptionNumberTxt.setText(rst.getString(1));
                                }
                                rst.close();
                            }
                            //          javax.swing.JOptionPane.showMessageDialog(this, "You MUST provide the reference number for the exemption or waiver.",  "WARNING: EXEMPTION NUMBER!", javax.swing.JOptionPane.WARNING_MESSAGE);
                            //      } else {
                            for (int k = 0; k < jTable111.getRowCount(); k++) {
                                if (jTable111.getModel().getValueAt(k, 0) != null) {

                                    double waived = java.lang.Double.valueOf(jTable111.getValueAt(k, 3).toString());
                                    if (jRadioButton1.isSelected()) {
                                        if (waived < 0) {

                                            rse121s = stm121s.executeQuery("SELECT prov_code FROM st_stock_item WHERE item_code = '" + jTable111.getModel().getValueAt(k, 6).toString() + "'");
                                            while (rse121s.next()) {

                                                if (priceCategory == null) {
                                                    priceCategory = "0";
                                                } else {
                                                    priceCategory = rse121s.getObject(1).toString();
                                                }
                                            }

                                            System.out.println("Bill No 4" + billNo);
                                            pstmt212 = connectDB.prepareStatement("INSERT INTO ac_ledger values(?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                            pstmt212.setString(1, glAcc1q);
                                            pstmt212.setString(2, jTable111.getValueAt(k, 0).toString());
                                            pstmt212.setString(3, patientNumberTxt.getText());
                                            pstmt212.setString(4, patientNameTxt.getText().toUpperCase());
                                            pstmt212.setString(5, "");
                                            pstmt212.setString(6, "");
                                            pstmt212.setString(7, "");
                                            pstmt212.setString(8, "OP");
                                            pstmt212.setString(9, jTextField51.getText());
                                            pstmt212.setString(10, payModecmbx.getSelectedItem().toString());
                                            pstmt212.setString(11, jTextField22.getText());
                                            pstmt212.setString(12, receiptNo1);
                                            pstmt212.setString(13, "");
                                            pstmt212.setString(14, "Exemption");
                                            pstmt212.setString(15, "Exemption");
                                            pstmt212.setDouble(16, -1 * java.lang.Double.valueOf(jTable111.getValueAt(k, 3).toString()));
                                            pstmt212.setDouble(17, 0.00);
                                            pstmt212.setDate(18, dates);// com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                            pstmt212.setString(19, transNo1);
                                            pstmt212.setBoolean(20, false);
                                            pstmt212.setBoolean(21, false);
                                            pstmt212.setBoolean(22, false);
                                            pstmt212.setString(23, user);
                                            pstmt212.setString(24, cashPointTxt.getText());
                                            pstmt212.setString(25, shiftNoTxt.getText());
                                            pstmt212.executeUpdate();

                                            pstmt25 = connectDB.prepareStatement("INSERT INTO ac_cash_collection values(?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?)");

                                            pstmt25.setObject(1, glAcc1q);
                                            pstmt25.setObject(2, jTable111.getValueAt(k, 0).toString());
                                            pstmt25.setString(3, patientNumberTxt.getText());
                                            pstmt25.setString(4, patientNameTxt.getText().toUpperCase());
                                            pstmt25.setString(5, payModecmbx.getSelectedItem().toString());
                                            pstmt25.setString(6, jTextField212.getText());
                                            pstmt25.setString(7, jTextField521.getText());
                                            pstmt25.setString(8, jTextField42.getText());
                                            if (jTextField51.getText().equals("")) {
                                                pstmt25.setString(9, jTextField411.getText());
                                            } else {
                                                pstmt25.setString(9, jTextField51.getText());
                                            }

                                            pstmt25.setString(10, rcode);
                                            pstmt25.setString(11, jTextField22.getText());
                                            pstmt25.setString(12, receiptNo1);
                                            pstmt25.setString(13, exemptionNumberTxt.getText());
                                            pstmt25.setString(14, patientNameTxt.getText().toUpperCase());
                                            pstmt25.setString(15, "Exemptions");
                                            pstmt25.setDouble(16, 0.00);
                                            pstmt25.setDouble(17, -1 * java.lang.Double.valueOf(jTable111.getValueAt(k, 3).toString()));
                                            pstmt25.setDate(18, dates); //com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                            pstmt25.setString(19, "" + transNo1 + "");
                                            pstmt25.setBoolean(20, false);
                                            pstmt25.setBoolean(21, false);
                                            pstmt25.setBoolean(22, false);
                                            pstmt25.setString(23, user);
                                            pstmt25.setString(24, cashPointTxt.getText());
                                            pstmt25.setString(25, shiftNoTxt.getText());
                                            pstmt25.setDate(26, null);
                                            pstmt25.setDouble(27, 1);
                                            pstmt25.setDate(28, null);
                                            pstmt25.setTimestamp(29, datenowSql);
                                            pstmt25.setString(30, mdepartment);
                                            pstmt25.setBoolean(31, false);
                                            pstmt25.setObject(32, priceCategory);
                                            pstmt25.setObject(33, jTable111.getValueAt(k, 6).toString());
                                            pstmt25.setDouble(34, java.lang.Double.valueOf(jTable111.getValueAt(k, 2).toString()));

                                            pstmt25.executeUpdate();

                                        }
                                    } else {
                                        //if (waived < 0) {

                                        rse121w = stm121w.executeQuery("select activity,code,department from pb_activity where activity_category ILIKE 'IEXE'");
                                        while (rse121w.next()) {
                                            glAcc2 = rse121w.getObject(1).toString();
                                            glAcc1q = rse121w.getObject(2).toString();
                                            mdepartment = rse121w.getObject(3).toString();
                                        }

                                        rse121r = stm121r.executeQuery("select activity,code from pb_activity where activity_category ILIKE 'RC'");
                                        while (rse121r.next()) {
                                            glAcc21 = rse121r.getObject(2).toString();
                                            glAcc11 = rse121r.getObject(1).toString();
                                        }

                                        System.out.println("Bill No 4" + billNo);

                                        pstmt212 = connectDB.prepareStatement("INSERT INTO ac_ledger values(?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                        pstmt212.setString(1, glAcc1q);
                                        pstmt212.setString(2, jTable111.getValueAt(k, 0).toString());
                                        pstmt212.setString(3, patientNumberTxt.getText());
                                        pstmt212.setString(4, patientNameTxt.getText().toUpperCase());
                                        pstmt212.setString(5, "");
                                        pstmt212.setString(6, "");
                                        pstmt212.setString(7, "");
                                        pstmt212.setString(8, "OP");
                                        pstmt212.setString(9, jTextField51.getText());
                                        pstmt212.setString(10, payModecmbx.getSelectedItem().toString());
                                        pstmt212.setString(11, jTextField22.getText());
                                        pstmt212.setString(12, receiptNo1);
                                        pstmt212.setString(13, "");
                                        pstmt212.setString(14, "Exemption");
                                        pstmt212.setString(15, "Exemption");
                                        pstmt212.setDouble(16, java.lang.Double.valueOf(jTable111.getValueAt(k, 3).toString()));
                                        pstmt212.setDouble(17, 0.00);
                                        pstmt212.setDate(18, dates);//com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                        pstmt212.setString(19, transNo1);
                                        pstmt212.setBoolean(20, false);
                                        pstmt212.setBoolean(21, false);
                                        pstmt212.setBoolean(22, false);
                                        pstmt212.setString(23, user);
                                        pstmt212.setString(24, cashPointTxt.getText());
                                        pstmt212.setString(25, shiftNoTxt.getText());
                                        pstmt212.executeUpdate();

                                        pstmt25 = connectDB.prepareStatement("INSERT INTO ac_cash_collection values(?,?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");

                                        pstmt25.setObject(1, glAcc1q);
                                        pstmt25.setObject(2, jTable111.getValueAt(k, 0).toString());
                                        pstmt25.setString(3, patientNumberTxt.getText());
                                        pstmt25.setString(4, patientNameTxt.getText().toUpperCase());
                                        pstmt25.setString(5, payModecmbx.getSelectedItem().toString());
                                        pstmt25.setString(6, jTextField212.getText());
                                        pstmt25.setString(7, jTextField521.getText());
                                        pstmt25.setString(8, jTextField42.getText());
                                        if (jTextField51.getText().equals("")) {
                                            pstmt25.setString(9, jTextField411.getText());
                                        } else {
                                            pstmt25.setString(9, jTextField51.getText());
                                        }

                                        pstmt25.setString(10, rcode);
                                        pstmt25.setString(11, jTextField22.getText());
                                        pstmt25.setString(12, receiptNo1);
                                        pstmt25.setString(13, exemptionNumberTxt.getText());
                                        pstmt25.setString(14, patientNameTxt.getText().toUpperCase());
                                        pstmt25.setString(15, "Exemptions");
                                        pstmt25.setDouble(16, 0.00);
                                        pstmt25.setDouble(17, java.lang.Double.valueOf(jTable111.getValueAt(k, 3).toString()));
                                        pstmt25.setDate(18, dates);//com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                        pstmt25.setString(19, "" + transNo1 + "");
                                        pstmt25.setBoolean(20, false);
                                        pstmt25.setBoolean(21, false);
                                        pstmt25.setBoolean(22, false);
                                        pstmt25.setString(23, user);
                                        pstmt25.setString(24, cashPointTxt.getText());
                                        pstmt25.setString(25, shiftNoTxt.getText());
                                        pstmt25.setDate(26, null);
                                        pstmt25.setDouble(27, 1);
                                        pstmt25.setDate(28, null);
                                        pstmt25.setTimestamp(29, datenowSql);
                                        pstmt25.setString(30, mdepartment);
                                        pstmt25.setBoolean(31, false);
                                        pstmt25.setObject(32, priceCategory);
                                        pstmt25.setObject(33, jTable111.getValueAt(k, 6).toString());
                                        pstmt25.setDouble(34, java.lang.Double.valueOf(jTable111.getValueAt(k, 2).toString()));

                                        pstmt25.executeUpdate();

                                        //}
                                    }
                                }

                            }
                        } else {
                            if (waiver > 0) {
                                if (exemptionNumberTxt.getText().toCharArray().length < 1) {
                                    ps = connectDB.createStatement();
                                    rst = ps.executeQuery("select 'W'||lpad(nextval('waiver')::text, 5, 0::text)");
                                    while (rst.next()) {
                                        exemptionNumberTxt.setText(rst.getString(1));
                                    }

                                }

                                rse121w = stm121w.executeQuery("select activity,code,department from pb_activity where activity_category ILIKE 'IEDS'");
                                while (rse121w.next()) {

                                    glAcc2 = rse121w.getObject(1).toString();
                                    glAcc1q = rse121w.getObject(2).toString();
                                    mdepartment = rse121w.getObject(3).toString();
                                }

                                rse121r = stm121r.executeQuery("select activity,code from pb_activity where activity_category ILIKE 'RC'");
                                while (rse121r.next()) {

                                    glAcc21 = rse121r.getObject(2).toString();
                                    glAcc11 = rse121r.getObject(1).toString();
                                }

                                if (jRadioButton1.isSelected()) {
                                    for (int k = 0; k < jTable111.getRowCount(); k++) {
                                        if (jTable111.getModel().getValueAt(k, 0) != null) {

                                            rse121 = stm121s.executeQuery("SELECT prov_code FROM st_stock_item WHERE item_code = '" + jTable111.getModel().getValueAt(k, 6).toString() + "'");
                                            while (rse121.next()) {

                                                if (priceCategory == null) {
                                                    priceCategory = "0";
                                                } else {
                                                    priceCategory = rse121.getObject(1).toString();
                                                }
                                            }
                                            //        if (exemptionNumberTxt.getText().toCharArray().length < 1) {
                                            //            javax.swing.JOptionPane.showMessageDialog(this,  "You MUST provide the reference number for the exemption or waiver.", "WARNING: EXEMPTION NUMBER!", javax.swing.JOptionPane.WARNING_MESSAGE);
                                            //        } else {

                                            double waived = java.lang.Double.valueOf(jTable111.getValueAt(k, 3).toString());

                                            if (waived < 0) {

                                                System.out.println("Bill No 4" + billNo);

                                                pstmt212 = connectDB.prepareStatement("INSERT INTO ac_ledger values(?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                                pstmt212.setObject(1, glAcc1q);
                                                pstmt212.setString(2, jTable111.getValueAt(k, 0).toString());
                                                pstmt212.setString(3, patientNumberTxt.getText());
                                                pstmt212.setString(4, patientNameTxt.getText().toUpperCase());
                                                pstmt212.setString(5, "");
                                                pstmt212.setString(6, "");
                                                pstmt212.setString(7, "");
                                                pstmt212.setString(8, "OP");
                                                pstmt212.setString(9, jTextField51.getText());
                                                pstmt212.setString(10, payModecmbx.getSelectedItem().toString());
                                                pstmt212.setString(11, jTextField22.getText());
                                                pstmt212.setString(12, receiptNo1);
                                                pstmt212.setString(13, "");
                                                pstmt212.setString(14, "Waiver");
                                                pstmt212.setString(15, "Waiver");
                                                pstmt212.setDouble(16, -1 * java.lang.Double.valueOf(jTable111.getValueAt(k, 3).toString()));
                                                pstmt212.setDouble(17, 0.00);
                                                pstmt212.setDate(18, dates);//com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                                pstmt212.setString(19, transNo1);
                                                pstmt212.setBoolean(20, false);
                                                pstmt212.setBoolean(21, false);
                                                pstmt212.setBoolean(22, false);
                                                pstmt212.setString(23, user);
                                                pstmt212.setString(24, cashPointTxt.getText());
                                                pstmt212.setString(25, shiftNoTxt.getText());
                                                pstmt212.executeUpdate();

                                                pstmt25 = connectDB.prepareStatement("INSERT INTO ac_cash_collection values(?,?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                                pstmt25.setObject(1, glAcc1q);
                                                pstmt25.setObject(2, jTable111.getValueAt(k, 0).toString());
                                                pstmt25.setString(3, patientNumberTxt.getText());
                                                pstmt25.setString(4, patientNameTxt.getText().toUpperCase());
                                                pstmt25.setString(5, payModecmbx.getSelectedItem().toString());
                                                pstmt25.setString(6, jTextField212.getText());
                                                pstmt25.setString(7, jTextField521.getText());
                                                pstmt25.setString(8, jTextField42.getText());
                                                if (jTextField51.getText().equals("")) {
                                                    pstmt25.setString(9, jTextField411.getText());
                                                } else {
                                                    pstmt25.setString(9, jTextField51.getText());
                                                }

                                                pstmt25.setString(10, rcode);
                                                pstmt25.setString(11, jTextField22.getText());
                                                pstmt25.setString(12, receiptNo1);
                                                pstmt25.setString(13, exemptionNumberTxt.getText());
                                                pstmt25.setString(14, patientNameTxt.getText().toUpperCase());
                                                pstmt25.setString(15, "Waiver");
                                                pstmt25.setDouble(16, 0.00);
                                                pstmt25.setDouble(17, -1 * java.lang.Double.valueOf(jTable111.getValueAt(k, 3).toString()));
                                                pstmt25.setDate(18, dates);//com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                                pstmt25.setString(19, "" + transNo1 + "");
                                                pstmt25.setBoolean(20, false);
                                                pstmt25.setBoolean(21, false);
                                                pstmt25.setBoolean(22, false);
                                                pstmt25.setString(23, user);
                                                pstmt25.setString(24, cashPointTxt.getText());
                                                pstmt25.setString(25, shiftNoTxt.getText());
                                                pstmt25.setDate(26, null);
                                                pstmt25.setDouble(27, 1);
                                                pstmt25.setDate(28, null);
                                                pstmt25.setTimestamp(29, datenowSql);
                                                pstmt25.setString(30, mdepartment);
                                                pstmt25.setBoolean(31, false);
                                                pstmt25.setObject(32, priceCategory);
                                                pstmt25.setObject(33, jTable111.getValueAt(k, 6).toString());
                                                pstmt25.setDouble(34, java.lang.Double.valueOf(jTable111.getValueAt(k, 2).toString()));

                                                pstmt25.executeUpdate();
                                                pstmt25.close();
                                                pstmt212.close();

                                            }
                                        }
                                    }

                                } else {
                                    System.out.println("Bill No 4" + billNo);

                                    pstmt212 = connectDB.prepareStatement("INSERT INTO ac_ledger values(?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                    pstmt212.setObject(1, glAcc1q);
                                    pstmt212.setString(2, "Waiver");
                                    pstmt212.setString(3, patientNumberTxt.getText());
                                    pstmt212.setString(4, patientNameTxt.getText().toUpperCase());
                                    pstmt212.setString(5, "");
                                    pstmt212.setString(6, "");
                                    pstmt212.setString(7, "");
                                    pstmt212.setString(8, "OP");
                                    pstmt212.setString(9, jTextField51.getText());
                                    pstmt212.setString(10, payModecmbx.getSelectedItem().toString());
                                    pstmt212.setString(11, jTextField22.getText());
                                    pstmt212.setString(12, receiptNo1);
                                    pstmt212.setString(13, "");
                                    pstmt212.setString(14, "Waiver");
                                    pstmt212.setString(15, "Waiver");
                                    pstmt212.setDouble(16, java.lang.Double.valueOf(jTextField1211.getText().toString()));
                                    pstmt212.setDouble(17, 0.00);
                                    pstmt212.setDate(18, dates);//com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt212.setString(19, transNo1);
                                    pstmt212.setBoolean(20, false);
                                    pstmt212.setBoolean(21, false);
                                    pstmt212.setBoolean(22, false);
                                    pstmt212.setString(23, user);
                                    pstmt212.setString(24, cashPointTxt.getText());
                                    pstmt212.setString(25, shiftNoTxt.getText());
                                    pstmt212.executeUpdate();

                                    pstmt25 = connectDB.prepareStatement("INSERT INTO ac_cash_collection values(?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                    pstmt25.setObject(1, glAcc1q);
                                    pstmt25.setObject(2, "Waiver");
                                    pstmt25.setString(3, patientNumberTxt.getText());
                                    pstmt25.setString(4, patientNameTxt.getText().toUpperCase());
                                    pstmt25.setString(5, payModecmbx.getSelectedItem().toString());
                                    pstmt25.setString(6, jTextField212.getText());
                                    pstmt25.setString(7, jTextField521.getText());
                                    pstmt25.setString(8, jTextField42.getText());
                                    if (jTextField51.getText().equals("")) {
                                        pstmt25.setString(9, jTextField411.getText());
                                    } else {
                                        pstmt25.setString(9, jTextField51.getText());
                                    }

                                    pstmt25.setString(10, rcode);
                                    pstmt25.setString(11, jTextField22.getText());
                                    pstmt25.setString(12, receiptNo1);
                                    pstmt25.setString(13, exemptionNumberTxt.getText());
                                    pstmt25.setString(14, patientNameTxt.getText().toUpperCase());
                                    pstmt25.setString(15, "Waiver");
                                    pstmt25.setDouble(16, 0.00);
                                    pstmt25.setDouble(17, java.lang.Double.valueOf(jTextField1211.getText().toString()));
                                    pstmt25.setDate(18, dates); //com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                    pstmt25.setString(19, "" + transNo1 + "");
                                    pstmt25.setBoolean(20, false);
                                    pstmt25.setBoolean(21, false);
                                    pstmt25.setBoolean(22, false);
                                    pstmt25.setString(23, user);
                                    pstmt25.setString(24, cashPointTxt.getText());
                                    pstmt25.setString(25, shiftNoTxt.getText());
                                    pstmt25.setDate(26, null);
                                    pstmt25.setDouble(27, 1);
                                    pstmt25.setDate(28, null);
                                    pstmt25.setTimestamp(29, datenowSql);
                                    pstmt25.setString(30, mdepartment);
                                    // pstmt25.executeUpdate();
                                    pstmt25.executeUpdate();

                                }
                            }
                        }


                        /*
                         psr = connectDB.prepareStatement("INSERT INTO ac_receipts_no("
                         + "account_no, account_name, date, amount, shift_no, "
                         + "cash_point, reference, user_name) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
                         psr.setString(1, patientNumberTxt.getText());
                         psr.setString(2, patientNameTxt.getText());
                         psr.setDate(3, dates); //com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                         psr.setDouble(4, java.lang.Double.valueOf(billAmountTxt.getText()));
                         psr.setInt(5, java.lang.Integer.valueOf(jTextField811.getText()));
                         psr.setString(6, jTextField141.getText());
                         psr.setString(7, receiptNo1);
                         psr.setString(8, user);
                         psr.executeUpdate();
                         */
                        psr = connectDB.prepareStatement("INSERT INTO ac_receipts_no("
                                + "account_no, account_name, date, amount, shift_no, "
                                + "cash_point, reference) VALUES (?, ?, ?, ?, ?, ?, ?)");
                        psr.setString(1, patientNumberTxt.getText());
                        psr.setString(2, patientNameTxt.getText());
                        psr.setDate(3, dates); //com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                        psr.setDouble(4, java.lang.Double.valueOf(billAmountTxt.getText()));
                        psr.setInt(5, java.lang.Integer.valueOf(shiftNoTxt.getText()));
                        psr.setString(6, cashPointTxt.getText());
                        psr.setString(7, receiptNo1);
                        // psr.setString(8, user);
                        psr.executeUpdate();

                        rst1q = ps1q.executeQuery("SELECT LPAD(receipt_no::TEXT,8,'0'::TEXT) FROM ac_receipts_no WHERE reference = '" + receiptNo1 + "'");
                        while (rst1q.next()) {
                            receiptNo2 = rst1q.getObject(1).toString();
                        }

                        pstmt112 = connectDB.prepareStatement("UPDATE ac_cash_collection SET receipt_no = '" + receiptNo2 + "' WHERE receipt_no = '" + receiptNo1 + "'");
                        pstmt112.executeUpdate();

                        //PreparedStatement pstmt112a = connectDB.prepareStatement(user);
                        PreparedStatement pstmt112a = connectDB.prepareStatement("UPDATE ac_ledger SET receipt_no = '" + receiptNo2 + "' WHERE receipt_no = '" + receiptNo1 + "'");
                        pstmt112a.executeUpdate();

                        pstmt112F = connectDB.prepareStatement("UPDATE ac_debtors SET receipt_no = '" + receiptNo2 + "' WHERE receipt_no = '" + receiptNo1 + "'");
                        pstmt112F.executeUpdate();

//                        for(int i=0;i<jTable111.getRowCount();i++){
//                            if(jTable111.getValueAt(i, 0)!=null){
//                        java.sql.PreparedStatement pstPh = connectDB.prepareStatement("Update hp_pharmacy   set manual_pr ='"+receiptNo2+"' where patient_no ='"+patientNumberTxt.getText()+"' AND description = '" + jTable111.getValueAt(i, 0) + "' AND date_prescribed > current_date - 2");
//                        pstPh.executeUpdate();
//                            }
//                        }
                        for (int i = 0; i < jTable111.getRowCount(); i++) {
                            if (jTable111.getValueAt(i, 0) != null) {
                                pstmt41d = connectDB.prepareStatement("UPDATE pb_doctors_request SET paid = true WHERE patient_no = '" + patientNumberTxt.getText() + "' AND service = '" + jTable111.getValueAt(i, 0) + "' AND trans_date >= current_date - 1");
                                pstmt41d.executeUpdate();
                                pstmt41 = connectDB.prepareStatement("UPDATE hp_pharmacy SET manual_pr='" + receiptNo2 + "', paid = true, collected = false WHERE collected = true and patient_no = '" + patientNumberTxt.getText() + "' AND description = '" + jTable111.getValueAt(i, 0) + "' AND date_prescribed > current_date - 2 AND paid = false AND collected = true");
                                pstmt41.executeUpdate();

                                pstmt411 = connectDB.prepareStatement("UPDATE hp_patient_billing SET doctor='" + receiptNo2 + "', paid = true, collected = false WHERE patient_no = '" + patientNumberTxt.getText() + "' AND service = '" + jTable111.getValueAt(i, 0) + "' AND trans_date > current_date - 2");
                                pstmt411.executeUpdate();
                            }
                        }

                        connectDB.commit();
                        connectDB.setAutoCommit(true);
                        if (processReceipt) {
                            jTextField1113.setText(receiptNo2);
                            postSaleDataBtn.setEnabled(false);
                            generateReceiptBtn.setEnabled(false);
                            reprintReceiptBtn.setEnabled(true);
                        }

                        /*    pstmt112.close();
                         pstmt112F.close();
                         psr.close();
                         ps1q.close();
                         rst1q.close();
                         rsts.close();
                         pss1.close();
                         pss.close();
                         rss.close();
                         stm1211.close();
                         rse1211.close();
                         stm12.close();
                         rse12.close();
                         stm12f.close();
                         rse12f.close();
                         stm12fx.close();
                         rse12fx.close();
                         stm1211.close();
                         pss.close();
                         pss1.close();
                         stm121.close();

                         pstmt212.close();
                         pstmt25.close();
                         stm121w.close();
                         stm121r.close();
                         rse121w.close();
                         rse121r.close();
                         ps.close();
                         pstmt25.close();
                         pstmt212.close();
                         rse121r.close();
                         stm121w.close();
                         stm121r.close();
                         // rse121w.close();
                         pstmt25.close();
                         pstmt41d.close();
                         pstmt41.close();
                         pstmt411.close();
                         rse121.close();
                         stm121.close();*/
//                        rst.close();
                        //  jTextField91.setEditable(false);
                    } catch (java.sql.SQLException sq) {

                        try {
                            connectDB.rollback(registerSavePoint);
                        } catch (java.sql.SQLException sql) {
                            javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
                        sq.printStackTrace();
                        System.out.println(sq.getMessage());
                        javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                    }

                }
            }

        }

    }

    public void run() {
        while (true) {
            try {
                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT count(status) FROM ac_shifts WHERE status ilike 'running' AND user_name = current_user");
                java.sql.ResultSet rset = pstmt.executeQuery();
                int i = 0;
                while (rset.next()) {
                    i = rset.getInt(1);
                }
                if (i < 1) {
                    this.dispose();
                    javax.swing.JOptionPane.showMessageDialog(this, "You MUST open a new shift in order to continue.\n Please close Front End Operations and open afresh.");
                }
                rset.close();
                pstmt.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, "ERROR: Can't close the cash collection form : Details : " + ex.getMessage());
                //Logger.getLogger(CafeteriaBillPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                Thread.sleep(10000);
            } catch (InterruptedException ex) {
                ex.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, "ERROR: Can't close the cash collection form : Details : " + ex.getMessage());

                // Logger.getLogger(CafeteriaBillPaymentsIntfr.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amountPaidTxt;
    private javax.swing.JTextField billAmountTxt;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JTextField cashPointTxt;
    private javax.swing.JTextField changeTxt;
    private javax.swing.JButton clearFormBtn;
    public javax.swing.JButton closePosBtn;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private javax.swing.JButton dispose11;
    private javax.swing.JLabel exemptionNumberLbl;
    private javax.swing.JTextField exemptionNumberTxt;
    private javax.swing.JButton generateReceiptBtn;
    private javax.swing.JTextField glAccountTxt;
    private javax.swing.JButton helpBtn;
    private javax.swing.JButton jButton1111;
    private javax.swing.JButton jButton252111;
    private javax.swing.JButton jButton301111;
    private javax.swing.JButton jButton42;
    private javax.swing.JButton jButton421;
    private javax.swing.JButton jButton52;
    private javax.swing.JButton jButton521;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButton91;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    public javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JComboBox jComboBox111;
    private javax.swing.JDialog jDialog31;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel101;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JLabel jLabel112;
    private javax.swing.JLabel jLabel113;
    private javax.swing.JLabel jLabel121;
    private javax.swing.JLabel jLabel1311;
    private javax.swing.JLabel jLabel132;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel141;
    private javax.swing.JLabel jLabel1411;
    private javax.swing.JLabel jLabel151;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel2121;
    private javax.swing.JLabel jLabel213;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel3111;
    private javax.swing.JLabel jLabel313;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel4112;
    private javax.swing.JLabel jLabel422;
    private javax.swing.JLabel jLabel5311;
    private javax.swing.JLabel jLabel5821111;
    private javax.swing.JLabel jLabel582211;
    private javax.swing.JLabel jLabel66111;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel111;
    private javax.swing.JPanel jPanel1111;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel121;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel211;
    private javax.swing.JPanel jPanel311;
    private javax.swing.JPanel jPanel312;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel51;
    private javax.swing.JPanel jPanel61;
    private javax.swing.JPanel jPanel71;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane211;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JDialog jSearchDialog1;
    private javax.swing.JDialog jSearchDialog11;
    private javax.swing.JDialog jSearchDialog2;
    private javax.swing.JDialog jSearchDialog21;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jSearchPanel1;
    private javax.swing.JPanel jSearchPanel11;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JPanel jSearchPanel21;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane1;
    private javax.swing.JScrollPane jSearchScrollPane11;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JScrollPane jSearchScrollPane21;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTable jSearchTable1;
    private javax.swing.JTable jSearchTable11;
    private javax.swing.JTable jSearchTable2;
    private javax.swing.JTable jSearchTable21;
    private javax.swing.JSeparator jSeparator111;
    private javax.swing.JSeparator jSeparator1111;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable111;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField1111;
    private javax.swing.JTextField jTextField1113;
    private javax.swing.JTextField jTextField112;
    private javax.swing.JTextField jTextField113;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField1211;
    private javax.swing.JTextField jTextField14111;
    private javax.swing.JTextField jTextField151;
    private javax.swing.JTextField jTextField1611;
    private javax.swing.JTextField jTextField212;
    private javax.swing.JTextField jTextField22;
    private javax.swing.JTextField jTextField3111;
    private javax.swing.JTextField jTextField411;
    private javax.swing.JTextField jTextField4111;
    private javax.swing.JTextField jTextField42;
    private javax.swing.JTextField jTextField51;
    private javax.swing.JTextField jTextField5111;
    private javax.swing.JTextField jTextField521;
    private javax.swing.JTextField jTextField61;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JCheckBox mchfpChbx;
    private javax.swing.JTextField patientNameTxt;
    private javax.swing.JTextField patientNumberTxt;
    private javax.swing.JTextField patientSearchTxt;
    private javax.swing.JComboBox payModecmbx;
    private javax.swing.JButton postSaleDataBtn;
    private javax.swing.JButton removeRowBtn;
    private javax.swing.JButton reprintReceiptBtn;
    private javax.swing.JButton searchButton1;
    private javax.swing.JButton searchButton13;
    private javax.swing.JCheckBox searchNameChbx;
    private javax.swing.JCheckBox searchNoChbx;
    private javax.swing.JTextField shiftNoTxt;
    private javax.swing.JTextField unitNumberTxt;
    private javax.swing.JCheckBox walkINChkbx;
    // End of variables declaration//GEN-END:variables
}
