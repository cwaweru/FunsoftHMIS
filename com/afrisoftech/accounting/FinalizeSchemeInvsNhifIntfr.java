/*
 * stockprices.java
 *
 * Created on July 5, 2008, 11:47 AM
 */
package com.afrisoftech.accounting;

import java.util.Locale;

/**
 *
 * @author Francis Waweru
 */
public class FinalizeSchemeInvsNhifIntfr extends javax.swing.JInternalFrame {

    javax.swing.JComboBox cmbox2 = null;
    java.sql.Connection connectDB = null;
    private javax.swing.JComboBox cmbox;
    com.afrisoftech.lib.DBObject dbObject;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    String cashPoint = null;
    private java.lang.String shift_no = null;
    private java.lang.String cash_no = null;
    private String discode;
    private String discglAcc;
    double sam = 0.0;
    double ledgerAmount = 0.0;
    double determineBill =0.0;

    public FinalizeSchemeInvsNhifIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        dbObject = new com.afrisoftech.lib.DBObject();

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();

        System.out.println("Cashpoint : " + System.getProperty("cashpoint"));

        jTextField14.setText(System.getProperty("cashpoint"));//getCashPoint());
        jTextField81.setText(getShiftNumber());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog2 = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        jTextField113 = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        jSearchTable2 = new com.afrisoftech.dbadmin.JTable();
        jButton42 = new javax.swing.JButton();
        jButton52 = new javax.swing.JButton();
        jSearchDialog11 = new javax.swing.JDialog();
        jSearchPanel11 = new javax.swing.JPanel();
        jTextField1111 = new javax.swing.JTextField();
        jSearchScrollPane11 = new javax.swing.JScrollPane();
        jSearchTable11 = new com.afrisoftech.dbadmin.JTable();
        dispose11 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton9 = new javax.swing.JButton();
        patientSearchDialog = new javax.swing.JDialog();
        jSearchPanel21 = new javax.swing.JPanel();
        patientSearchTxt = new javax.swing.JTextField();
        jSearchScrollPane21 = new javax.swing.JScrollPane();
        patientSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton421 = new javax.swing.JButton();
        jButton521 = new javax.swing.JButton();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jSearchDialog13 = new javax.swing.JDialog();
        jSearchPanel13 = new javax.swing.JPanel();
        jTextField1113 = new javax.swing.JTextField();
        jSearchScrollPane13 = new javax.swing.JScrollPane();
        jSearchTable13 = new com.afrisoftech.dbadmin.JTable();
        dispose12 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        billTable = new javax.swing.JTable();
        jPanel21 = new javax.swing.JPanel();
        jTextField51 = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel42 = new javax.swing.JLabel();
        claimNumberTxt = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        nhifRebateRbtn = new javax.swing.JRadioButton();
        schemeCardNumberTxt = new javax.swing.JTextField();
        jLabel81 = new javax.swing.JLabel();
        payModeTxt = new javax.swing.JTextField();
        jLabel82 = new javax.swing.JLabel();
        daystoChargeTxt = new javax.swing.JTextField();
        noNHIFRebateRbtn = new javax.swing.JRadioButton();
        linkToReceiptsBtn = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        nhifCategoryCmbx = new javax.swing.JComboBox();
        jPanel8 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        dischargeDatePicker = new com.afrisoftech.lib.DatePicker();
        checkoutDatePicker = new com.afrisoftech.lib.DatePicker();
        jLabel18 = new javax.swing.JLabel();
        schemeInvoicingJscrl = new javax.swing.JScrollPane();
        schemeInvoicingTable = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        admissionDatePicker = new com.afrisoftech.lib.DatePicker();
        jLabel31 = new javax.swing.JLabel();
        jPanel41 = new javax.swing.JPanel();
        patientNumberTxt = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        visitIDTxt = new javax.swing.JTextField();
        patientNameTxt = new javax.swing.JTextField();
        schemeMemberNumberTxt = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel2122 = new javax.swing.JLabel();
        invoiceNoLbl = new javax.swing.JLabel();
        invoiceNoTxt = new javax.swing.JTextField();
        jSeparator11 = new javax.swing.JSeparator();
        jPanel5 = new javax.swing.JPanel();
        try  {
            java.lang.Class.forName("org.postgresql.Driver");
            System.out.println("Found driver");
        } catch(java.lang.ClassNotFoundException cnf){
            System.out.println("driver not found");
        }
        finalizeInvoiceBtn = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        jButton41 = new javax.swing.JButton();
        jButton51 = new javax.swing.JButton();
        jButton61 = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        discountAmountTxt = new javax.swing.JTextField();
        jLabel61 = new javax.swing.JLabel();
        billTotalTxt = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        netBillValueTxt = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        nhifDiffTxt = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        nhifRebateTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        totalDepositsTxt = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        patientRefundTxt = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        };
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jTextField9 = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jPanel641 = new javax.swing.JPanel();
        searchButton2 = new javax.swing.JButton();
        jTextField7 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        jTextField12 = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jTextField3 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTable12 = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        jLabel51 = new javax.swing.JLabel();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        jLabel62 = new javax.swing.JLabel();
        datePicker3 = new com.afrisoftech.lib.DatePicker();
        jCheckBox2 = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        try  {
            java.lang.Class.forName("org.postgresql.Driver");
            System.out.println("Found driver");
        } catch(java.lang.ClassNotFoundException cnf){
            System.out.println("driver not found");
        }
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jTextField14 = new javax.swing.JTextField();
        jLabel131 = new javax.swing.JLabel();
        jTextField81 = new javax.swing.JTextField();
        jTextField13 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextField15 = new javax.swing.JTextField();

        jSearchDialog2.setModal(true);
        jSearchDialog2.setUndecorated(true);
        jSearchDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        jTextField113.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField113CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel2.add(jTextField113, gridBagConstraints);

        jSearchTable2.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable2.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable2MouseClicked(evt);
            }
        });
        jSearchScrollPane2.setViewportView(jSearchTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

        jButton42.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton42, gridBagConstraints);

        jButton52.setText("Dispose");
        jButton52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton52, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog2.getContentPane().add(jSearchPanel2, gridBagConstraints);

        jSearchDialog11.setModal(true);
        jSearchDialog11.setUndecorated(true);
        jSearchDialog11.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel11.setLayout(new java.awt.GridBagLayout());

        jTextField1111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel11.add(jTextField1111, gridBagConstraints);

        jSearchTable11.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable11.setShowHorizontalLines(false);
        /*int rowsNo = 0;
        //try {

            crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

            crset1.setConnectionSource(pConnDB);

            // try {
                //crset1.execute();

                // crset2.setExecuteOnLoad(true);
                jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                    new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                    new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

                }));

                tableModel = jSearchTable.getModel();

                jSearchScrollPane.setViewportView(jSearchTable);

                /*   }catch(java.sql.SQLException sqlex){
                javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                System.out.println(sqlex.getMessage());

            }

            javax.swing.table.TableColumn column = null;

            for (int i = 0; i < 4; i++) {

                column = jSearchTable.getColumnModel().getColumn(i);

                if (i == 1) {

                    column.setPreferredWidth(400);
                    //sport column is bigger
                } else {

                    column.setPreferredWidth(200);

                }
            }*/
            jSearchTable11.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jSearchTable11MouseClicked(evt);
                }
            });
            jSearchScrollPane11.setViewportView(jSearchTable11);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            jSearchPanel11.add(jSearchScrollPane11, gridBagConstraints);

            dispose11.setMnemonic('l');
            dispose11.setText("Close");
            dispose11.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    dispose11ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel11.add(dispose11, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchDialog11.getContentPane().add(jSearchPanel11, gridBagConstraints);

            jSearchDialog.setModal(true);
            jSearchDialog.setUndecorated(true);
            jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

            jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jSearchPanel.setLayout(new java.awt.GridBagLayout());

            jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    jTextField111CaretUpdate(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 10.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
            jSearchPanel.add(jTextField111, gridBagConstraints);

            jSearchTable.setShowHorizontalLines(false);
            /*    try {
                searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
                searchRowSet.setConnectionSource(pConnDB);

                searchRowSet.execute();

                // crset2.setExecuteOnLoad(true);
                jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

                }));
                // jSearchScrollPane.setViewportView(jSearchTable);

            } catch(java.sql.SQLException sqlex){
                javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                System.out.println(sqlex.getMessage());
            }
            */
            jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jSearchTableMouseClicked(evt);
                }
            });
            jSearchScrollPane.setViewportView(jSearchTable);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

            jButton9.setText("Dispose");
            jButton9.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton9ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel.add(jButton9, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

            patientSearchDialog.setModal(true);
            patientSearchDialog.setUndecorated(true);
            patientSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

            jSearchPanel21.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jSearchPanel21.setLayout(new java.awt.GridBagLayout());

            patientSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    patientSearchTxtCaretUpdate(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 300.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
            jSearchPanel21.add(patientSearchTxt, gridBagConstraints);

            patientSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
            patientSearchTable.setShowHorizontalLines(false);
            /*javax.swing.table.TableColumn column = null;

            for (int i = 0; i < 4; i++) {

                column = jSearchTable2.getColumnModel().getColumn(i);

                if (i == 1) {

                    column.setPreferredWidth(400);
                    //sport column is bigger
                } else {

                    column.setPreferredWidth(200);

                }
            }
            */
            patientSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    patientSearchTableMouseClicked(evt);
                }
            });
            jSearchScrollPane21.setViewportView(patientSearchTable);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            jSearchPanel21.add(jSearchScrollPane21, gridBagConstraints);

            jButton421.setText("Select");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel21.add(jButton421, gridBagConstraints);

            jButton521.setText("Close");
            jButton521.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton521ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel21.add(jButton521, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            patientSearchDialog.getContentPane().add(jSearchPanel21, gridBagConstraints);

            jSearchDialog13.setModal(true);
            jSearchDialog13.setUndecorated(true);
            jSearchDialog13.getContentPane().setLayout(new java.awt.GridBagLayout());

            jSearchPanel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jSearchPanel13.setLayout(new java.awt.GridBagLayout());

            jTextField1113.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    jTextField1113CaretUpdate(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 300.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
            jSearchPanel13.add(jTextField1113, gridBagConstraints);

            jSearchTable13.setToolTipText("Click on the target row to select the patient from the search.");
            jSearchTable13.setShowHorizontalLines(false);
            /*int rowsNo = 0;
            //try {

                crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

                crset1.setConnectionSource(pConnDB);

                // try {
                    //crset1.execute();

                    // crset2.setExecuteOnLoad(true);
                    jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                        new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                        new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                        new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                        new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

                    }));

                    tableModel = jSearchTable.getModel();

                    jSearchScrollPane.setViewportView(jSearchTable);

                    /*   }catch(java.sql.SQLException sqlex){
                    javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                    System.out.println(sqlex.getMessage());

                }

                javax.swing.table.TableColumn column = null;

                for (int i = 0; i < 4; i++) {

                    column = jSearchTable.getColumnModel().getColumn(i);

                    if (i == 1) {

                        column.setPreferredWidth(400);
                        //sport column is bigger
                    } else {

                        column.setPreferredWidth(200);

                    }
                }*/
                jSearchTable13.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        jSearchTable13MouseClicked(evt);
                    }
                });
                jSearchScrollPane13.setViewportView(jSearchTable13);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 20.0;
                jSearchPanel13.add(jSearchScrollPane13, gridBagConstraints);

                dispose12.setMnemonic('l');
                dispose12.setText("Close");
                dispose12.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        dispose12ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jSearchPanel13.add(dispose12, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jSearchDialog13.getContentPane().add(jSearchPanel13, gridBagConstraints);

                setClosable(true);
                setIconifiable(true);
                setMaximizable(true);
                setResizable(true);
                setTitle("Patient Check-Out and Release");
                setPreferredSize(new java.awt.Dimension(650, 700));
                setVisible(true);
                getContentPane().setLayout(new java.awt.GridBagLayout());
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.gridwidth = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                getContentPane().add(jLabel5, gridBagConstraints);

                jPanel11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
                jPanel11.setLayout(new java.awt.GridBagLayout());

                billTable.setAutoCreateRowSorter(true);
                billTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null},
                        {null, null, null, null, null}
                    },
                    new String [] {
                        "Description", "Gross", "Discount", "Disc. Amt", "Net Amt."
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
                    };
                    boolean[] canEdit = new boolean [] {
                        false, false, false, false, false
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }

                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit [columnIndex];
                    }
                });
                billTable.setShowHorizontalLines(false);
                /*       cmbox2 = new javax.swing.JComboBox();

                try {

                    crset1.setConnectionSource(pConnDB);
                    crset1.execute("select description from st_stock_item");

                    cmbox2.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset1, "description", null, null,null));

                    javax.swing.table.TableColumn seditor = this.jTable1.getColumn("Product");

                    seditor.setCellEditor(new javax.swing.DefaultCellEditor(cmbox2));

                    cmbox2.addActionListener(new java.awt.event.ActionListener() {

                        public void actionPerformed(java.awt.event.ActionEvent evt) {

                            cmbox2ActionPerformed(evt);
                        }
                    });
                } catch(java.sql.SQLException sqlExec) {

                    javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

                }

                javax.swing.table.TableColumn column1 = null;
                for (int i = 0; i < 4; i++) {
                    column1 = jTable1.getColumnModel().getColumn(i);
                    if (i == 0) {

                        column1.setPreferredWidth(200); //sport column is bigger
                    } else {
                        if (i == 1) {
                            column1.setPreferredWidth(200);
                        } else {
                            if (i == 2) {
                                column1.setPreferredWidth(100);
                            }  else
                            column1.setPreferredWidth(100);

                        }
                    }
                }
                */
                billTable.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyReleased(java.awt.event.KeyEvent evt) {
                        billTableKeyReleased(evt);
                    }
                });
                jScrollPane11.setViewportView(billTable);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.gridwidth = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 5.0;
                gridBagConstraints.weighty = 15.0;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel11.add(jScrollPane11, gridBagConstraints);

                jPanel21.setLayout(new java.awt.GridBagLayout());

                jTextField51.setEditable(false);
                jTextField51.setMinimumSize(new java.awt.Dimension(0, 0));
                jTextField51.setPreferredSize(new java.awt.Dimension(0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 9;
                gridBagConstraints.gridy = 5;
                jPanel21.add(jTextField51, gridBagConstraints);

                jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                jPanel6.setLayout(new java.awt.GridBagLayout());

                jLabel42.setText("Claim No");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel6.add(jLabel42, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel6.add(claimNumberTxt, gridBagConstraints);

                jLabel19.setText("Card No");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel6.add(jLabel19, gridBagConstraints);

                buttonGroup2.add(nhifRebateRbtn);
                nhifRebateRbtn.setText("Nhif Rebate     ");
                nhifRebateRbtn.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                nhifRebateRbtn.setEnabled(false);
                nhifRebateRbtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
                nhifRebateRbtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                nhifRebateRbtn.setIconTextGap(20);
                nhifRebateRbtn.setMargin(new java.awt.Insets(0, 0, 0, 0));
                nhifRebateRbtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        nhifRebateRbtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel6.add(nhifRebateRbtn, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weighty = 1.0;
                jPanel6.add(schemeCardNumberTxt, gridBagConstraints);

                jLabel81.setText("Pay Mode");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel6.add(jLabel81, gridBagConstraints);

                payModeTxt.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel6.add(payModeTxt, gridBagConstraints);

                jLabel82.setText("No Of Days");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel6.add(jLabel82, gridBagConstraints);

                daystoChargeTxt.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 2.0;
                gridBagConstraints.weighty = 1.0;
                jPanel6.add(daystoChargeTxt, gridBagConstraints);

                buttonGroup2.add(noNHIFRebateRbtn);
                noNHIFRebateRbtn.setText("No Nhif Rebate");
                noNHIFRebateRbtn.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                noNHIFRebateRbtn.setEnabled(false);
                noNHIFRebateRbtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
                noNHIFRebateRbtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                noNHIFRebateRbtn.setIconTextGap(20);
                noNHIFRebateRbtn.setMargin(new java.awt.Insets(0, 0, 0, 0));
                noNHIFRebateRbtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        noNHIFRebateRbtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel6.add(noNHIFRebateRbtn, gridBagConstraints);

                linkToReceiptsBtn.setText("Link to Receipts & Deposits");
                linkToReceiptsBtn.setEnabled(false);
                linkToReceiptsBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        linkToReceiptsBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                jPanel6.add(linkToReceiptsBtn, gridBagConstraints);

                jLabel24.setText("Nhif Category");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel6.add(jLabel24, gridBagConstraints);

                nhifCategoryCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT name FROM pb_nssf_rebeats ORDER BY 1"));
                nhifCategoryCmbx.setEnabled(false);
                nhifCategoryCmbx.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        nhifCategoryCmbxActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel6.add(nhifCategoryCmbx, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridwidth = 5;
                gridBagConstraints.gridheight = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                jPanel21.add(jPanel6, gridBagConstraints);

                jPanel8.setLayout(new java.awt.GridBagLayout());

                jLabel14.setText("Discharge Date");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel8.add(jLabel14, gridBagConstraints);

                dischargeDatePicker.setEnabled(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel8.add(dischargeDatePicker, gridBagConstraints);

                checkoutDatePicker.setEnabled(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 2.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel8.add(checkoutDatePicker, gridBagConstraints);

                jLabel18.setText("Leave Date");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel8.add(jLabel18, gridBagConstraints);

                schemeInvoicingTable.setAutoCreateRowSorter(true);
                schemeInvoicingTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null},
                        {null, null, null}
                    },
                    new String [] {
                        "A/C No", "Name", "AMT"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
                    };
                    boolean[] canEdit = new boolean [] {
                        false, false, false
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }

                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit [columnIndex];
                    }
                });
                schemeInvoicingTable.setEnabled(false);
                schemeInvoicingTable.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        schemeInvoicingTableMouseClicked(evt);
                    }
                });
                schemeInvoicingTable.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyReleased(java.awt.event.KeyEvent evt) {
                        schemeInvoicingTableKeyReleased(evt);
                    }
                });
                schemeInvoicingJscrl.setViewportView(schemeInvoicingTable);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.gridheight = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.2;
                gridBagConstraints.weighty = 3.0;
                jPanel8.add(schemeInvoicingJscrl, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridwidth = 3;
                gridBagConstraints.gridheight = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 5.0;
                gridBagConstraints.weighty = 1.0;
                jPanel21.add(jPanel8, gridBagConstraints);

                jPanel9.setLayout(new java.awt.GridBagLayout());

                jLabel13.setText("Admission Date");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel9.add(jLabel13, gridBagConstraints);

                admissionDatePicker.setEnabled(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel9.add(admissionDatePicker, gridBagConstraints);

                jLabel31.setText("Patient No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel9.add(jLabel31, gridBagConstraints);

                jPanel41.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                jPanel41.setLayout(new java.awt.GridBagLayout());

                patientNumberTxt.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel41.add(patientNumberTxt, gridBagConstraints);

                searchButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
                searchButton1.setToolTipText("Search");
                searchButton1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                searchButton1.setMaximumSize(new java.awt.Dimension(74, 53));
                searchButton1.setMinimumSize(new java.awt.Dimension(74, 53));
                searchButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                searchButton1.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        searchButton1ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 2;
                jPanel41.add(searchButton1, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel9.add(jPanel41, gridBagConstraints);

                visitIDTxt.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel9.add(visitIDTxt, gridBagConstraints);

                patientNameTxt.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel9.add(patientNameTxt, gridBagConstraints);

                schemeMemberNumberTxt.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel9.add(schemeMemberNumberTxt, gridBagConstraints);

                jLabel21.setText("Scheme Member No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel9.add(jLabel21, gridBagConstraints);

                jLabel41.setText("Patient Name");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel9.add(jLabel41, gridBagConstraints);

                jLabel2122.setText("Visit No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel9.add(jLabel2122, gridBagConstraints);

                invoiceNoLbl.setText("Invoice Number");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel9.add(invoiceNoLbl, gridBagConstraints);

                invoiceNoTxt.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel9.add(invoiceNoTxt, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridheight = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 3.0;
                gridBagConstraints.weighty = 1.0;
                jPanel21.add(jPanel9, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridwidth = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 5.0;
                jPanel11.add(jPanel21, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.gridwidth = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                jPanel11.add(jSeparator11, gridBagConstraints);

                jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
                jPanel5.setLayout(new java.awt.GridBagLayout());

                finalizeInvoiceBtn.setMnemonic('O');
                finalizeInvoiceBtn.setText("Finalise Invoice");
                finalizeInvoiceBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        finalizeInvoiceBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel5.add(finalizeInvoiceBtn, gridBagConstraints);

                jButton31.setMnemonic('R');
                jButton31.setText("Refresh");
                jButton31.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton31ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel5.add(jButton31, gridBagConstraints);

                jButton41.setMnemonic('C');
                jButton41.setText("Close");
                jButton41.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton41ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel5.add(jButton41, gridBagConstraints);

                jButton51.setMnemonic('h');
                jButton51.setText("Help");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel5.add(jButton51, gridBagConstraints);

                jButton61.setMnemonic('r');
                jButton61.setText("R A/C Row");
                jButton61.setEnabled(false);
                jButton61.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton61ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel5.add(jButton61, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 200.0;
                gridBagConstraints.weighty = 1.0;
                jPanel5.add(jLabel25, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.gridwidth = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel11.add(jPanel5, gridBagConstraints);

                jPanel7.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(51, 102, 255), null, null));
                jPanel7.setLayout(new java.awt.GridBagLayout());

                jLabel15.setText("Discount Amt");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel7.add(jLabel15, gridBagConstraints);

                discountAmountTxt.setEditable(false);
                discountAmountTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                discountAmountTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(discountAmountTxt, gridBagConstraints);

                jLabel61.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                jLabel61.setText("Bill Total");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel7.add(jLabel61, gridBagConstraints);

                billTotalTxt.setEditable(false);
                billTotalTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                billTotalTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(billTotalTxt, gridBagConstraints);

                jLabel17.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                jLabel17.setText("Net value");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel7.add(jLabel17, gridBagConstraints);

                netBillValueTxt.setEditable(false);
                netBillValueTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                netBillValueTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(netBillValueTxt, gridBagConstraints);

                jLabel20.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                jLabel20.setText("Nhif Diff");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel7.add(jLabel20, gridBagConstraints);

                nhifDiffTxt.setEditable(false);
                nhifDiffTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                nhifDiffTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(nhifDiffTxt, gridBagConstraints);

                jLabel22.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                jLabel22.setText("Nhif Rebate");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel7.add(jLabel22, gridBagConstraints);

                nhifRebateTxt.setEditable(false);
                nhifRebateTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                nhifRebateTxt.setText("0.00");
                nhifRebateTxt.addCaretListener(new javax.swing.event.CaretListener() {
                    public void caretUpdate(javax.swing.event.CaretEvent evt) {
                        nhifRebateTxtCaretUpdate(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(nhifRebateTxt, gridBagConstraints);

                jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                jLabel11.setText("Total Deposits");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel7.add(jLabel11, gridBagConstraints);

                totalDepositsTxt.setEditable(false);
                totalDepositsTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                totalDepositsTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(totalDepositsTxt, gridBagConstraints);

                jLabel23.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                jLabel23.setText("Refund");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel7.add(jLabel23, gridBagConstraints);

                patientRefundTxt.setEditable(false);
                patientRefundTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                patientRefundTxt.setText("0.00");
                patientRefundTxt.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyReleased(java.awt.event.KeyEvent evt) {
                        patientRefundTxtKeyReleased(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel7.add(patientRefundTxt, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                jPanel11.add(jPanel7, gridBagConstraints);

                jTabbedPane1.addTab("Inpatients", jPanel11);

                jPanel1.setBackground(new java.awt.Color(204, 204, 255));
                jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
                jPanel1.setLayout(new java.awt.GridBagLayout());

                jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null}
                    },
                    new String [] {
                        "Date", "Description", "Quantity", "Rate", "Discount", "Total Disc.", "Amount", "Gl Code"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }
                });
                jTable1.setShowHorizontalLines(false);
                cmbox = new javax.swing.JComboBox();
                javax.swing.table.TableColumn dateEditor = jTable1.getColumnModel().getColumn(0);
                com.afrisoftech.lib.DateCellEditor dateCellEditor = new com.afrisoftech.lib.DateCellEditor(new com.afrisoftech.lib.DatePicker(), jTable1);
                dateEditor.setCellEditor(dateCellEditor);
                //jTable1.setRowHeight(30);
                javax.swing.table.DefaultTableCellRenderer cellRenderer = new javax.swing.table.DefaultTableCellRenderer();
                cellRenderer.setHorizontalAlignment(cellRenderer.TRAILING);
                dateEditor.setCellRenderer(cellRenderer);

                javax.swing.table.TableColumn column = null;
                for (int i = 0; i < 8; i++) {
                    column = jTable1.getColumnModel().getColumn(i);
                    if (i == 0) {

                        column.setPreferredWidth(100); //sport column is bigger
                    } else {
                        if (i == 1) {
                            column.setPreferredWidth(200);
                        } else {
                            if (i == 2) {
                                column.setPreferredWidth(100);
                            }  else
                            column.setPreferredWidth(100);

                        }
                    }
                }
                jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        jTable1MouseClicked(evt);
                    }
                });
                jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyReleased(java.awt.event.KeyEvent evt) {
                        jTable1KeyReleased(evt);
                    }
                });
                jScrollPane1.setViewportView(jTable1);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.gridwidth = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 15.0;
                gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
                jPanel1.add(jScrollPane1, gridBagConstraints);

                jPanel2.setBackground(new java.awt.Color(255, 204, 204));
                jPanel2.setLayout(new java.awt.GridBagLayout());

                jLabel1.setText("Scheme Name");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel2.add(jLabel1, gridBagConstraints);

                jLabel2.setText("Scheme Member No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
                jPanel2.add(jLabel2, gridBagConstraints);

                jTextField1.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel2.add(jTextField1, gridBagConstraints);

                jLabel3.setText("Patient No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
                jPanel2.add(jLabel3, gridBagConstraints);

                jLabel4.setText("Patient Name");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
                jPanel2.add(jLabel4, gridBagConstraints);

                jTextField2.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel2.add(jTextField2, gridBagConstraints);

                jLabel7.setText("Scheme Payer");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel2.add(jLabel7, gridBagConstraints);

                jTextField4.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
                jPanel2.add(jTextField4, gridBagConstraints);

                jTextField5.setEditable(false);
                jTextField5.setMinimumSize(new java.awt.Dimension(0, 0));
                jTextField5.setPreferredSize(new java.awt.Dimension(0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                jPanel2.add(jTextField5, gridBagConstraints);

                jTextField6.setEditable(false);
                jTextField6.setMinimumSize(new java.awt.Dimension(0, 0));
                jTextField6.setPreferredSize(new java.awt.Dimension(0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel2.add(jTextField6, gridBagConstraints);

                jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                jPanel4.setLayout(new java.awt.GridBagLayout());

                jTextField9.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel4.add(jTextField9, gridBagConstraints);

                searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
                searchButton.setToolTipText("Search");
                searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
                searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
                searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                searchButton.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        searchButtonActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 2;
                jPanel4.add(searchButton, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel2.add(jPanel4, gridBagConstraints);

                jPanel641.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                jPanel641.setMinimumSize(new java.awt.Dimension(82, 37));
                jPanel641.setLayout(new java.awt.GridBagLayout());

                searchButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
                searchButton2.setToolTipText("Search");
                searchButton2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                searchButton2.setMaximumSize(new java.awt.Dimension(74, 53));
                searchButton2.setMinimumSize(new java.awt.Dimension(74, 53));
                searchButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                searchButton2.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        searchButton2ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                jPanel641.add(searchButton2, gridBagConstraints);

                jTextField7.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel641.add(jTextField7, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
                jPanel2.add(jPanel641, gridBagConstraints);

                jLabel10.setText("Account No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel2.add(jLabel10, gridBagConstraints);

                jTextField8.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
                jPanel2.add(jTextField8, gridBagConstraints);

                buttonGroup1.add(jCheckBox1);
                jCheckBox1.setText("Search By No.");
                jPanel2.add(jCheckBox1, new java.awt.GridBagConstraints());

                buttonGroup1.add(jCheckBox3);
                jCheckBox3.setText("Search By Name");
                jPanel2.add(jCheckBox3, new java.awt.GridBagConstraints());

                jLabel8.setText("Invoice No");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel2.add(jLabel8, gridBagConstraints);

                jTextField12.setText("-");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
                jPanel2.add(jTextField12, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.gridwidth = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.ipady = -10;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel1.add(jPanel2, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.gridwidth = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                jPanel1.add(jSeparator1, gridBagConstraints);

                jTextField3.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                jTextField3.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 10);
                jPanel1.add(jTextField3, gridBagConstraints);

                jLabel6.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
                jLabel6.setText("Total KShs.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 5;
                jPanel1.add(jLabel6, gridBagConstraints);

                jTable12.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                    },
                    new String [] {
                        "Date", "Patient No", "Scheme", "Amount"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }
                });
                jTable12.setShowHorizontalLines(false);
                /*       cmbox2 = new javax.swing.JComboBox();

                try {

                    crset1.setConnectionSource(pConnDB);
                    crset1.execute("select description from st_stock_item");

                    cmbox2.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset1, "description", null, null,null));

                    javax.swing.table.TableColumn seditor = this.jTable1.getColumn("Product");

                    seditor.setCellEditor(new javax.swing.DefaultCellEditor(cmbox2));

                    cmbox2.addActionListener(new java.awt.event.ActionListener() {

                        public void actionPerformed(java.awt.event.ActionEvent evt) {

                            cmbox2ActionPerformed(evt);
                        }
                    });
                } catch(java.sql.SQLException sqlExec) {

                    javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

                }
                */

                javax.swing.table.TableColumn column12 = null;
                for (int i = 0; i < 3; i++) {
                    column12 = jTable12.getColumnModel().getColumn(i);
                    if (i == 0) {

                        column12.setPreferredWidth(100); //sport column is bigger
                    } else {
                        if (i == 1) {
                            column12.setPreferredWidth(200);
                        } else {
                            if (i == 2) {
                                column12.setPreferredWidth(300);
                            }  else
                            column12.setPreferredWidth(100);

                        }
                    }
                }
                jTable12.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        jTable12MouseClicked(evt);
                    }
                });
                jScrollPane12.setViewportView(jTable12);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.gridwidth = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 15.0;
                gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
                jPanel1.add(jScrollPane12, gridBagConstraints);

                jLabel51.setText("From Date");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel1.add(jLabel51, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.ipadx = 20;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel1.add(datePicker1, gridBagConstraints);

                jLabel62.setText("To Date");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel1.add(jLabel62, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel1.add(datePicker3, gridBagConstraints);

                jCheckBox2.setForeground(new java.awt.Color(0, 0, 255));
                jCheckBox2.setText("View");
                jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jCheckBox2ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 1;
                jPanel1.add(jCheckBox2, gridBagConstraints);

                jPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
                jPanel3.setLayout(new java.awt.GridBagLayout());

                jButton1.setMnemonic('O');
                jButton1.setText("Finalise Invoice");
                jButton1.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton1ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel3.add(jButton1, gridBagConstraints);

                jButton3.setMnemonic('R');
                jButton3.setText("Refresh");
                jButton3.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton3ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel3.add(jButton3, gridBagConstraints);

                jButton6.setMnemonic('r');
                jButton6.setText("Remove Row");
                jButton6.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton6ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.weightx = 1.0;
                jPanel3.add(jButton6, gridBagConstraints);

                jButton4.setMnemonic('C');
                jButton4.setText("Close");
                jButton4.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton4ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel3.add(jButton4, gridBagConstraints);

                jButton5.setMnemonic('h');
                jButton5.setText("Help");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel3.add(jButton5, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.gridwidth = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                jPanel1.add(jPanel3, gridBagConstraints);

                jLabel16.setText("Cash Point");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel1.add(jLabel16, gridBagConstraints);

                jTextField14.setEditable(false);
                jTextField14.addComponentListener(new java.awt.event.ComponentAdapter() {
                    public void componentShown(java.awt.event.ComponentEvent evt) {
                        jTextField14ComponentShown(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 2.5;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel1.add(jTextField14, gridBagConstraints);

                jLabel131.setText("Shift No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel1.add(jLabel131, gridBagConstraints);

                jTextField81.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 2.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel1.add(jTextField81, gridBagConstraints);

                jTextField13.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                jTextField13.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
                jPanel1.add(jTextField13, gridBagConstraints);

                jLabel9.setText("Discount");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 5;
                jPanel1.add(jLabel9, gridBagConstraints);

                jLabel12.setText("Net Total");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.weightx = 1.0;
                jPanel1.add(jLabel12, gridBagConstraints);

                jTextField15.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                jTextField15.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.ipadx = 3;
                gridBagConstraints.weightx = 1.0;
                jPanel1.add(jTextField15, gridBagConstraints);

                jTabbedPane1.addTab("Out Patients", jPanel1);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                getContentPane().add(jTabbedPane1, gridBagConstraints);

                setBounds(0, 0, 1084, 446);
            }// </editor-fold>//GEN-END:initComponents

    private void patientRefundTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patientRefundTxtKeyReleased
        float nhifDiff = 0;
        float net = 0;
        float refund = java.lang.Float.parseFloat(patientRefundTxt.getText());
        float bill = java.lang.Float.parseFloat(billTotalTxt.getText());
        float disc = java.lang.Float.parseFloat(netBillValueTxt.getText());
        float deposit = java.lang.Float.parseFloat(totalDepositsTxt.getText());
        float rebate = java.lang.Float.parseFloat(nhifRebateTxt.getText());

        if (nhifRebateRbtn.isSelected()) {
            nhifDiff = (bill + refund) - (deposit + rebate);
            nhifDiffTxt.setText("" + nhifDiff + "");
        } else {
            net = (bill + refund) - (deposit);
            netBillValueTxt.setText("" + net + "");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_patientRefundTxtKeyReleased

    private void schemeInvoicingTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_schemeInvoicingTableKeyReleased
        if (schemeInvoicingTable.getModel().getValueAt(schemeInvoicingTable.getSelectedRow(), 2) != null) {
            if (schemeInvoicingTable.getSelectedColumn() == schemeInvoicingTable.getSelectedColumn()) {
                float disc = java.lang.Float.parseFloat(netBillValueTxt.getText());
                float deposit = java.lang.Float.parseFloat(totalDepositsTxt.getText());
                float rebate = java.lang.Float.parseFloat(nhifRebateTxt.getText());
                float bill = java.lang.Float.parseFloat(billTotalTxt.getText());
                if (nhifRebateRbtn.isSelected()) {
                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(schemeInvoicingTable, 2);
                    nhifDiffTxt.setText(java.lang.String.valueOf(bill - (totalSum + deposit + rebate)));
                } else {
                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(schemeInvoicingTable, 2);
                    netBillValueTxt.setText(java.lang.String.valueOf(bill - (totalSum + deposit + rebate)));
                }
            }
        }
        
        /*
         * float nhifDiff = 0; float net = 0; float refund =
         * java.lang.Float.parseFloat(jTextField24.getText()); float bill =
         * java.lang.Float.parseFloat(jTextField31.getText());
         *
         *
         *
         * if(jRadioButton1.isSelected()){ nhifDiff =
         * (bill+refund)-(deposit+rebate); jTextField23.setText(""+nhifDiff+"");
         * }else{ net = (bill+refund)-(deposit);
         * jTextField18.setText(""+net+""); }
         */
// TODO add your handling code here:
    }//GEN-LAST:event_schemeInvoicingTableKeyReleased

    private void linkToReceiptsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkToReceiptsBtnActionPerformed
        com.afrisoftech.accounting.InpatientRecpIntfr other = new com.afrisoftech.accounting.InpatientRecpIntfr(connectDB, pConnDB);
        this.getParent().add(other, javax.swing.JLayeredPane.DEFAULT_LAYER);
        try {
            other.setSelected(true);
        } catch (java.beans.PropertyVetoException pvt) {
        }
        other.setVisible(true);
// TODO add your handling code here:
    }//GEN-LAST:event_linkToReceiptsBtnActionPerformed

    private void jButton61ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton61ActionPerformed
        if (schemeInvoicingTable.isRowSelected(schemeInvoicingTable.getSelectedRow())) {
            int rows2Delete = schemeInvoicingTable.getSelectedRowCount();

            int[] selectedRows = schemeInvoicingTable.getSelectedRows();

            if (rows2Delete < 1) {

                java.awt.Toolkit.getDefaultToolkit().beep();

                javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

            } else {

                if (rows2Delete > 1) {

                    for (int i = 0; i < selectedRows.length; i++) {



                        javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) schemeInvoicingTable.getModel();

                        defTableModel.removeRow(selectedRows[i]);

                    }



                } else {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) schemeInvoicingTable.getModel();

                    defTableModel.removeRow(schemeInvoicingTable.getSelectedRow());

                    //calculateTotals();
                }
            }
        } else {
        }

        if (schemeInvoicingTable.getModel().getValueAt(schemeInvoicingTable.getSelectedRow(), 2) != null) {
            if (schemeInvoicingTable.getSelectedColumn() == schemeInvoicingTable.getSelectedColumn()) {
                float disc = java.lang.Float.parseFloat(netBillValueTxt.getText());
                float deposit = java.lang.Float.parseFloat(totalDepositsTxt.getText());
                float rebate = java.lang.Float.parseFloat(nhifRebateTxt.getText());
                float bill = java.lang.Float.parseFloat(billTotalTxt.getText());
                if (nhifRebateRbtn.isSelected()) {
                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(schemeInvoicingTable, 2);
                    nhifDiffTxt.setText(java.lang.String.valueOf(bill - (totalSum + deposit + rebate)));
                } else {
                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(schemeInvoicingTable, 2);
                    netBillValueTxt.setText(java.lang.String.valueOf(bill - (totalSum + deposit + rebate)));
                }
            }
        }
        // double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable11, 3);
        //  jTextField31.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
        //jTextField31.setText(java.lang.String.valueOf(totalSum));
        //  jTextField18.setText(java.lang.String.valueOf(totalSum));

// this.tableModelTableChanged();// Add your handling code here:
    }//GEN-LAST:event_jButton61ActionPerformed

    private void dispose12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispose12ActionPerformed
        jSearchDialog13.dispose(); // Add your handling code here:
    }//GEN-LAST:event_dispose12ActionPerformed

    private void jSearchTable13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable13MouseClicked
        schemeInvoicingTable.setValueAt(jSearchTable13.getValueAt(jSearchTable13.getSelectedRow(), 0), schemeInvoicingTable.getSelectedRow(), 0);
        schemeInvoicingTable.setValueAt(jSearchTable13.getValueAt(jSearchTable13.getSelectedRow(), 1), schemeInvoicingTable.getSelectedRow(), 1);

        jSearchDialog13.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable13MouseClicked

    private void jTextField1113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1113CaretUpdate
        if (jTextField1113.getCaretPosition() < 1) {

            System.out.println("Nothing");
        } else {

            jSearchTable13.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT account_no,scheme_name,payer_name from ac_schemes where scheme_name ILIKE '" + jTextField1113.getText() + "%' order by scheme_name"));

            jSearchTable13.setShowHorizontalLines(false);
            jSearchScrollPane13.setViewportView(jSearchTable13);


        }         // Add your handling code here:
    }//GEN-LAST:event_jTextField1113CaretUpdate

    private void schemeInvoicingTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_schemeInvoicingTableMouseClicked
        // if (jTable2.getSelectedColumn() == 0) {
        //   searchButton11bClicked();
        //  }
        // TODO add your handling code here:
    }//GEN-LAST:event_schemeInvoicingTableMouseClicked
    private void searchButton11bClicked() {

        System.out.println("Showing dialog");


        java.awt.Point point = this.schemeInvoicingJscrl.getLocationOnScreen();

        jSearchDialog13.setSize(400, 200);

        jSearchDialog13.setLocation(point);

        jSearchDialog13.setVisible(true);
        // jSearchDialog13.dispose();

    }
    private void noNHIFRebateRbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noNHIFRebateRbtnActionPerformed
        nhifCategoryCmbx.setEnabled(false);
        try {
            claimNumberTxt.setText("");
            schemeCardNumberTxt.setText("");
            nhifRebateTxt.setText("0.00");
            nhifDiffTxt.setText("0.00");
            float noofDays = 0;
            float balance = java.lang.Float.parseFloat(billTotalTxt.getText());
            float deposits = java.lang.Float.parseFloat(totalDepositsTxt.getText());
            double net = java.lang.Double.valueOf(balance - deposits);
            double nhif = 0;
            double nhifDiff = 0;
            double Rate = 0;
            nhif = noofDays * 0;

            nhifRebateTxt.setText(java.lang.String.valueOf(nhif));
            nhifDiffTxt.setText(java.lang.String.valueOf(nhifDiff));
            netBillValueTxt.setText(java.lang.String.valueOf(net + nhif));
            java.sql.Statement pss111xx = connectDB.createStatement();
            /*
             * java.sql.ResultSet rss111xx = pss111xx.executeQuery("select
             * ROUND('"+nhifDiff+"')::numeric"); while (rss111xx.next()){ //
             * jTextField23.setText(java.lang.String.valueOf(rss111xx.getDouble(1)));
             * } java.sql.Statement pss111x = connectDB.createStatement();
             * java.sql.ResultSet rss111x = pss111x.executeQuery("select
             * ROUND('"+net+nhif+"')::numeric"); while (rss111x.next()){ //
             * jTextField18.setText(java.lang.String.valueOf(rss111x.getDouble(1)));
             * }
             */
        } catch (java.sql.SQLException sqlex) {
            javax.swing.JOptionPane.showMessageDialog(this, sqlex.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
// TODO add your handling code here:
    }//GEN-LAST:event_noNHIFRebateRbtnActionPerformed

    private void nhifRebateRbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nhifRebateRbtnActionPerformed
        nhifCategoryCmbx.setEnabled(true);
// TODO add your handling code here:
    }//GEN-LAST:event_nhifRebateRbtnActionPerformed

    private void billTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_billTableKeyReleased
        /*
         * if (jTable11.getValueAt(jTable11.getSelectedRow(), 2) != null) { if
         * (jTable11.getModel().getValueAt(jTable11.getSelectedRow(), 2) !=
         * null) { if (jTable11.getSelectedColumn() ==
         * jTable11.getSelectedColumn()) { float grossTotal =
         * java.lang.Float.parseFloat(jTextField31.getText().toString());
         *
         * float gross =
         * java.lang.Float.parseFloat(jTable11.getValueAt(jTable11.getSelectedRow(),
         * 1).toString());
         *
         * float Disc =
         * java.lang.Float.parseFloat(jTable11.getValueAt(jTable11.getSelectedRow(),
         * 2).toString());
         *
         * float total = gross - java.lang.Math.round((gross) * Disc / 100);
         * float totalDisc = java.lang.Math.round((gross) * Disc / 100);
         * jTable11.setValueAt(totalDisc, jTable11.getSelectedRow(), 3);
         * jTable11.setValueAt(total, jTable11.getSelectedRow(), 4); double
         * totalSum =
         * com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable11,
         * 4); double totalSumDisc =
         * com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable11,
         * 3); jTextField17.setText(java.lang.String.valueOf(totalSumDisc));
         * jTextField18.setText(java.lang.String.valueOf(grossTotal -
         * totalSumDisc));
         *
         * }
         * }
         * } else { if (jTable11.getValueAt(jTable11.getSelectedRow(), 3) !=
         * null) { if (jTable11.getModel().getValueAt(jTable11.getSelectedRow(),
         * 3) != null) { if (jTable11.getSelectedColumn() ==
         * jTable11.getSelectedColumn()) { float grossTotal =
         * java.lang.Float.parseFloat(jTextField31.getText().toString()); float
         * gross =
         * java.lang.Float.parseFloat(jTable11.getValueAt(jTable11.getSelectedRow(),
         * 1).toString()); float Disc =
         * java.lang.Float.parseFloat(jTable11.getValueAt(jTable11.getSelectedRow(),
         * 3).toString()); float total = gross - Disc; float totalDisc = Disc;
         * jTable11.setValueAt(totalDisc, jTable11.getSelectedRow(), 3);
         * jTable11.setValueAt(total, jTable11.getSelectedRow(), 4); double
         * totalSum =
         * com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable11,
         * 4); double totalSumDisc =
         * com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable11,
         * 3); jTextField17.setText(java.lang.String.valueOf(totalSumDisc));
         * jTextField18.setText(java.lang.String.valueOf(grossTotal -
         * totalSumDisc));
         *
         * }
         * }
         * }
         * }
         */
        // TODO add your handling code here:
    }//GEN-LAST:event_billTableKeyReleased

    private void jButton521ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton521ActionPerformed
        patientSearchDialog.dispose();      // Add your handling code here:
    }//GEN-LAST:event_jButton521ActionPerformed

    private void patientSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientSearchTableMouseClicked
        String payer = null;
        String scm = null;
        String accno = null;
        String date = null;
        String cat = null;
        String code = null;
        
        patientRefundTxt.setText("0.00");
        claimNumberTxt.setText("");
        schemeCardNumberTxt.setText("");
        nhifRebateTxt.setText("0.00");
        daystoChargeTxt.setText("0.00");
        nhifDiffTxt.setText("0.00");
        patientNameTxt.setText(patientSearchTable.getValueAt(patientSearchTable.getSelectedRow(), 1).toString());
        patientNumberTxt.setText(patientSearchTable.getValueAt(patientSearchTable.getSelectedRow(), 0).toString());
        visitIDTxt.setText(patientSearchTable.getValueAt(patientSearchTable.getSelectedRow(), 2).toString());
        invoiceNoTxt.setText(patientSearchTable.getValueAt(patientSearchTable.getSelectedRow(), 5).toString());

        java.text.DateFormat df = java.text.DateFormat.getDateInstance();

        java.text.SimpleDateFormat sdf = (java.text.SimpleDateFormat) df;

        sdf.applyPattern("yyyy-MM-dd");

        try {
            admissionDatePicker.setDate(sdf.parse(patientSearchTable.getValueAt(patientSearchTable.getSelectedRow(), 3).toString()));
            if(patientSearchTable.getValueAt(patientSearchTable.getSelectedRow(), 4) != null && patientSearchTable.getValueAt(patientSearchTable.getSelectedRow(), 4) != ""){
            dischargeDatePicker.setDate(sdf.parse(patientSearchTable.getValueAt(patientSearchTable.getSelectedRow(), 4).toString()));
            }
        } catch (java.text.ParseException pe) {
            pe.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, pe.getMessage());
        }
        //jTextField21.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 2).toString());
        //jTextField71.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 3).toString());


        try {
            double noofDays = 0.00;
            java.sql.Statement pss111 = connectDB.createStatement();
            java.sql.ResultSet rss111 = pss111.executeQuery("select ('" + dischargeDatePicker.getDate() + "'::date - '" + admissionDatePicker.getDate() + "'::date)");
            while (rss111.next()) {
                noofDays = rss111.getFloat(1);
                daystoChargeTxt.setText(java.lang.String.valueOf(noofDays));
            }
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select account_no, description,payer from hp_inpatient_register where patient_no ILIKE '" + patientNumberTxt.getText() + "%'");
            while (rset.next()) {
                // jComboBox6.setSelectedItem(rset.getObject(1).toString());
                payer = dbObject.getDBObject(rset.getObject(3), "-");
                scm = dbObject.getDBObject(rset.getObject(2), "-");
                accno = dbObject.getDBObject(rset.getObject(1), "-");
                schemeMemberNumberTxt.setText(accno);
                //jTextField71.setText(scm);
                //jTextField41.setText(payer);

            }

            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT ward_code FROM hp_admission WHERE patient_no ILIKE '" + patientNumberTxt.getText() + "%' AND visit_id = '" + visitIDTxt.getText() + "' "
                    + " UNION ALL SELECT 'Self' FROM hp_mortuary WHERE annual_no ILIKE '" + patientNumberTxt.getText() + "%'");
            while (rsetf.next()) {
                if (rsetf.getString(1).equalsIgnoreCase("Self")) {
                    payModeTxt.setText("Cash");
                } else {
                    payModeTxt.setText("Scheme");
                }
            }

            java.sql.Statement pss1x = connectDB.createStatement();
            java.sql.ResultSet rset1x = pss1x.executeQuery("select account_no,expiry_date,category from hp_inpatient_register where patient_no = '" + patientNumberTxt.getText() + "'");
            while (rset1x.next()) {
                cat = dbObject.getDBObject(rset1x.getObject(3), "-");
                date = dbObject.getDBObject(rset1x.getObject(2), null);
                accno = dbObject.getDBObject(rset1x.getObject(1), "-");

                schemeMemberNumberTxt.setText(accno);
                jTextField51.setText(date);
                // jTextField61.setText(cat);
            }

            java.sql.Statement pss11 = connectDB.createStatement();
            java.sql.ResultSet rss11 = pss11.executeQuery("select round(sum(debit-credit),2) from hp_patient_card where patient_no = '" + patientNumberTxt.getText() + "' AND visit_id = '" + visitIDTxt.getText() + "' AND (invoice_no NOT LIKE 'I%' OR invoice_no NOT LIKE 'O%') AND service not ilike 'Receipt%'");
            while (rss11.next()) {
                // jTextField2.setText(rss1.getObject(1).toString());
                billTotalTxt.setText(dbObject.getDBObject(rss11.getObject(1), "0.00"));
               
            }
            
            
//            java.sql.Statement pss11sam = connectDB.createStatement();
//            java.sql.ResultSet rss11sam = pss11sam.executeQuery("select round(sum(debit-credit),2),round(sum(credit-debit),2) from hp_patient_card where patient_no = '" + patientNumberTxt.getText() + "' AND visit_id = '" + visitIDTxt.getText() + "' AND (invoice_no NOT LIKE 'I%' OR invoice_no NOT LIKE 'O%')");
//            while (rss11sam.next()) {
//                //sam = rss11sam.getDouble(1);
//                if(sam<0){
//                 netBillValueTxt.setText("0.00");  
//                 patientRefundTxt.setText(dbObject.getDBObject(rss11sam.getObject(2), "0.00"));
//                }else {
//                netBillValueTxt.setText(dbObject.getDBObject(rss11sam.getObject(1), "0.00"));
//                // jTextField23.setText(rss11.getObject(1).toString());
//                }
//            }
//0166479

            java.sql.Statement pss11s = connectDB.createStatement();
            java.sql.ResultSet rss11s = pss11s.executeQuery("select round(sum(debit-credit),2),round(sum(credit-debit),2) from hp_patient_card where patient_no = '" + patientNumberTxt.getText() + "' AND visit_id = '" + visitIDTxt.getText() + "' AND (invoice_no NOT LIKE 'I%' OR invoice_no NOT LIKE 'O%')");
            while (rss11s.next()) {
                sam = rss11s.getDouble(1);
               
            }

            
            java.sql.Statement pstDeposit = connectDB.createStatement();
            java.sql.ResultSet rsetDeposit = pstDeposit.executeQuery("select round(sum(credit-debit),2) from ac_ledger where patient_no = '" + patientNumberTxt.getText() + "' AND voucher_no = '" + visitIDTxt.getText() + "' AND transaction_type='Unutilized patient deposit' ");
            while (rsetDeposit.next()){
                ledgerAmount = rsetDeposit.getDouble(1); //java.lang.Double.valueOf(dbObject.getDBObject(rsetDeposit.getObject(1), "0.00"));
                totalDepositsTxt.setText(dbObject.getDBObject(rsetDeposit.getObject(1), "0.00"));
            }
            determineBill = ledgerAmount-sam;
            if(ledgerAmount>0){
                if(determineBill>0){
                System.out.println("deposit - patient card is "+determineBill);
                patientRefundTxt.setText(java.lang.String.valueOf(determineBill));
                netBillValueTxt.setText("0.00");
                
            }else if(determineBill<0){
            netBillValueTxt.setText(dbObject.getDBObject((java.lang.String.valueOf(sam-ledgerAmount)), "0.00").toString());
            System.out.println("ledger amount "+ledgerAmount+" sum from card " +sam+" Difference is" +(sam-ledgerAmount));
            }else if(determineBill==0){
            netBillValueTxt.setText("0.00"); 
            System.out.println("Bill is equal " +ledgerAmount);
            determineBill = ledgerAmount;
            System.out.println("Bill is equal " +determineBill);
            }
            }else{
             netBillValueTxt.setText(dbObject.getDBObject((java.lang.String.valueOf(sam)), "0.00").toString());   
            }
        } catch (java.sql.SQLException sqlex) {
            sqlex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlex.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        for (int k = 0; k < billTable.getRowCount(); k++) {
            for (int r = 0; r < billTable.getColumnCount(); r++) {
                billTable.getModel().setValueAt(null, k, r);
            }
        }

        for (int g = 0; g < schemeInvoicingTable.getRowCount(); g++) {
            for (int l = 0; l < schemeInvoicingTable.getColumnCount(); l++) {
                schemeInvoicingTable.getModel().setValueAt(null, g, l);
            }
        }
        this.populateTable2(patientNumberTxt.getText());


        patientSearchDialog.dispose();   // Add your handling code here:
    }//GEN-LAST:event_patientSearchTableMouseClicked
    private void populateTable2(java.lang.String patient_no) {
 
        int i = 0;
        int j = 0;
        try {
            java.sql.Statement stmt = connectDB.createStatement();

            java.sql.ResultSet rset = stmt.executeQuery("SELECT count(patient_no) FROM hp_patient_card WHERE patient_no = '" + patient_no + "' AND visit_id = '" + visitIDTxt.getText() + "'");

            while (rset.next()) {
                j = rset.getInt(1);
            }
            if (j > 0) {
                java.sql.Statement stmtTable1 = connectDB.createStatement();
                java.sql.Statement stmtTable11 = connectDB.createStatement();

               java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select "
                        + "main_service,sum(debit-credit) as amount FROM hp_patient_card "
                        + "WHERE patient_no ='" + patientNumberTxt.getText() + "' AND "
                        + "(invoice_no NOT ILIKE 'O%' OR invoice_no NOT ILIKE 'I%')  AND "
                        + "visit_id = '" + visitIDTxt.getText() + "' GROUP BY main_service");

                while (rsetTable1.next()) {

                    System.out.println("Working at table row " + i);
                    billTable.setValueAt(rsetTable1.getObject(1), i, 0);
                    billTable.setValueAt(rsetTable1.getObject(2), i, 1);
                    billTable.setValueAt(rsetTable1.getObject(2), i, 4);

                    i++;

                }
 
            }



        } catch (java.sql.SQLException sqlExec) {
            
            sqlExec.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }


    }
    private void patientSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_patientSearchTxtCaretUpdate
        patientSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT "
                + "ha.patient_no as pat_no,ha.patient_name as name,ha.visit_id,ha.date_admitted::date as date_admitted,"
                + "ha.discharge_date::date AS date_discharged, ha.invoice_no as INV_NO FROM hp_admission ha "
                + "WHERE ha.patient_no ILIKE '" + patientSearchTxt.getText() + "%' AND ha.check_out = false "
                + "UNION ALL SELECT annual_no AS patient_no,patient_name,annual_no as visit_id,date_received,discharge_date, "
                + "invoice_no FROM "
                + "hp_mortuary WHERE annual_no ILIKE '" + patientSearchTxt.getText() + "%' AND discharged = false"                
                + " ORDER BY 1"));
        //+ " ha.invoice_no notnull order by ha.patient_no,ha.date_admitted"));

        jSearchScrollPane21.setViewportView(patientSearchTable);
        System.out.println("Cannot sort out");


        // Add your handling code here:
    }//GEN-LAST:event_patientSearchTxtCaretUpdate

    private void jButton41ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton41ActionPerformed
        this.setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_jButton41ActionPerformed

    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton31ActionPerformed
//        this.getContentPane().removeAll();
        //        this.initComponents();        // Add your handling code here:
    }//GEN-LAST:event_jButton31ActionPerformed

    private void finalizeInvoiceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalizeInvoiceBtnActionPerformed
        if (Double.parseDouble(netBillValueTxt.getText()) <= 0) {
            java.util.Date periodFrom = null;
            java.util.Date periodTo = null;
            float refund = java.lang.Float.parseFloat(patientRefundTxt.getText());
            try {

                
                
                java.sql.Statement stmtf = connectDB.createStatement();
                java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open'");
                while (rsetf.next()) {
                    periodFrom = rsetf.getDate(1);
                    periodTo = rsetf.getDate(2);
                }

            } catch (java.sql.SQLException sq) {
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                System.out.println(sq.getMessage());

            }

            if (admissionDatePicker.getDate().before(periodFrom) || dischargeDatePicker.getDate().after(periodTo)) {
                javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            } else {
                if (billTable.isEditing()) {
                    billTable.getCellEditor().stopCellEditing();
                }

                java.util.Calendar calendar = java.util.Calendar.getInstance();

                long dateNow = calendar.getTimeInMillis();

                java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

                System.out.println(datenowSql1.toString());

                java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

                System.out.println(datenowSql.toString());
                //      try{
                String receiptNo = null;
                String actCode = null;
                String glCode = null;
                java.sql.Date DischDate = null;
                String glCode1 = null;
                String bankAcc1 = null;
                String transNo = null;
                String payMode = null;
                String patCat = null;
                String patientAcc = null;
                String cardNo = null;
                String scheme = null;
                String cardName = null;
                String isurer = null;
                String expDate = null;
                String staffNo = null;
                String actNames = null;
                String user = null;
                String actNames1 = null;
                String actCode1 = null;
                String invoiceNo = null;
                String ClaimNo = null;
                String visitid = null;
                String disno = null;
                String UserName = null;
                String ward = null;
                String bed_no = null;
                String AccDesc = null;
                String rnamex = null;
                String rcodex = null;
                
                com.afrisoftech.lib.InvoiceNumbers.invoiceType = true;
                int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "Do you want to Finalise Invoice?", "Caution before Finalising Invoice!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

                if (exitOption == javax.swing.JOptionPane.YES_OPTION) {



                    try {
                        connectDB.setAutoCommit(false);
                java.sql.Statement pss = connectDB.createStatement();
                java.sql.ResultSet rss = pss.executeQuery("select nextval('transaction_no_seq')");

                while (rss.next()) {
                    transNo = rss.getObject(1).toString();
                }
                java.sql.Statement stm12 = connectDB.createStatement();
                java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                while (rse12.next()) {

                    patientAcc = rse12.getObject(1).toString();
                    AccDesc = rse12.getObject(2).toString();
                }
                        java.sql.Statement pss1 = connectDB.createStatement();
                        if (payModeTxt.getText().toString().equalsIgnoreCase("Cash") && Double.parseDouble(netBillValueTxt.getText()) <= 0 && invoiceNoTxt.getText().equalsIgnoreCase("")) {
                          //  java.sql.ResultSet rss1 = pss1.executeQuery("select 'I'||(nextval('ipinvoice_no_seq'))");
                          //  while (rss1.next()) {
                          //      invoiceNo = rss1.getObject(1).toString();
                           
                          ///  }

                            java.sql.Statement stmtf = connectDB.createStatement();
                            java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT ward,ward_code,bed_no FROM hp_admission where patient_no "
                                    + "ILIKE '" + patientNumberTxt.getText() + "%' AND visit_id = '" + visitIDTxt.getText() + "' "
                                    + "UNION ALL SELECT deseased_sourse,'','' FROM hp_mortuary WHERE annual_no "
                                    + "ILIKE '" + patientNumberTxt.getText() + "%'");
                            while (rsetf.next()) {
                                ward = rsetf.getObject(1).toString();
                                bed_no = rsetf.getObject(3).toString();
                            }

                            java.sql.Statement ps = connectDB.createStatement();
                            java.sql.ResultSet rst = ps.executeQuery("select nextval('discharge_no_seq'),current_user");
                            while (rst.next()) {
                                rst.getObject(1).toString();

                                disno = rst.getObject(1).toString();
                                UserName = rst.getObject(2).toString();
                            }
                             invoiceNo = com.afrisoftech.lib.InvoiceNumbers.getInvoiceNumber();    
                            this.invoiceNoTxt.setText(invoiceNo);
                            java.sql.PreparedStatement pstmtx = connectDB.prepareStatement("INSERT INTO hp_patient_discharge VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                            pstmtx.setString(1, patientNumberTxt.getText());
                            pstmtx.setString(2, patientNameTxt.getText());
                            pstmtx.setString(3, "");
                            pstmtx.setString(4, ward);
                            pstmtx.setString(5, "");
                            pstmtx.setString(6, bed_no);
                            pstmtx.setDate(7, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dischargeDatePicker.getDate()));
                            pstmtx.setDate(8, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dischargeDatePicker.getDate()));
                            pstmtx.setString(9, "");
                            pstmtx.setString(10, "");
                            pstmtx.setString(11, "");
                            if(java.lang.Double.valueOf(totalDepositsTxt.getText())>0){
                            pstmtx.setDouble(12, determineBill);    
                            }else{
                            pstmtx.setDouble(12, java.lang.Double.valueOf(netBillValueTxt.getText()));
                            }
                            pstmtx.setString(13, "");
                            pstmtx.setString(14, invoiceNo);
                            pstmtx.setString(15, disno);
                            pstmtx.setDate(16, com.afrisoftech.lib.SQLDateFormat.getSQLDate(admissionDatePicker.getDate()));
                            pstmtx.setTime(17, new java.sql.Time(java.util.Calendar.getInstance().getTimeInMillis()));
                            pstmtx.setString(18, UserName);
                            pstmtx.executeUpdate();

    if(Double.valueOf(totalDepositsTxt.getText())>0) {                                                      
    java.sql.PreparedStatement pstmtx1 = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?::date, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
    pstmtx1.setString(1, patientNumberTxt.getText());
    pstmtx1.setObject(2, "Receipt");
    pstmtx1.setObject(3, "");
    pstmtx1.setObject(4, payModeTxt.getText().toString());
    pstmtx1.setString(5, transNo);
    pstmtx1.setString(7, schemeCardNumberTxt.getText());
    pstmtx1.setString(6, "");
    pstmtx1.setString(8, claimNumberTxt.getText().toString());
    pstmtx1.setString(9, "");
    pstmtx1.setObject(10, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dischargeDatePicker.getDate()));//expiry date
    pstmtx1.setString(11, "");
    //if(determineBill)
    if(java.lang.Double.valueOf(totalDepositsTxt.getText())>0){
    pstmtx1.setDouble(13, determineBill);    
    }else{
    pstmtx1.setDouble(13, java.lang.Double.valueOf(netBillValueTxt.getText()));
    }
    //pstmtx1.setDouble(13, determineBill);//credit
    pstmtx1.setDouble(12, 0.0);//debit
    pstmtx1.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dischargeDatePicker.getDate()));
    pstmtx1.setObject(15, patientAcc);
    pstmtx1.setObject(16, AccDesc);
    //}
    pstmtx1.setDouble(17, 1);
    pstmtx1.setObject(18, "");
    pstmtx1.setBoolean(19, true);
    pstmtx1.setString(20, "Receipt");
    pstmtx1.setBoolean(21, true);
    pstmtx1.setString(22, AccDesc);
    if (patientNumberTxt.getText().startsWith("INT") || patientNumberTxt.getText().startsWith("BID")) {
        pstmtx1.setString(23, patientNumberTxt.getText());
    } else {
        pstmtx1.setString(23, visitid);
    }
    pstmtx1.setString(24, user);
    pstmtx1.setString(25, jTextField14.getText());

    pstmtx1.setString(26, "IP");

    pstmtx1.setTimestamp(27, com.afrisoftech.lib.ServerTime.getSQLTimeStamp(connectDB));//new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));

    if (patientNumberTxt.getText().startsWith("INT") || patientNumberTxt.getText().startsWith("BID")) {
        pstmtx1.setString(28, patientNumberTxt.getText());
    } else {
        pstmtx1.setString(28, visitIDTxt.getText());
    }
    pstmtx1.setString(29, receiptNo);
    pstmtx1.executeUpdate();    
                

                    java.sql.Statement stm1211x = connectDB.createStatement();                            
                    java.sql.ResultSet rse1211x = stm1211x.executeQuery("SELECT distinct description, activity_code FROM ac_ledger WHERE patient_no = '"+patientNumberTxt.getText()+"' and transaction_type = 'Unutilized patient deposit'");
                    while (rse1211x.next()) {
                        rnamex = rse1211x.getObject(1).toString();
                        rcodex = rse1211x.getObject(2).toString();
                    }
    java.sql.PreparedStatement pstmt1q1 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                                    pstmt1q1.setObject(1,rcodex);
                                    pstmt1q1.setString(2, rnamex);
                                    pstmt1q1.setString(3,patientNumberTxt.getText());
                                    pstmt1q1.setString(4,patientNameTxt.getText());
                                    pstmt1q1.setObject(6, visitIDTxt.getText());
                                    pstmt1q1.setString(5, "Patient deposit");
                                    pstmt1q1.setString(7, visitid);
                                   // if(inPatientRbtn.isSelected()){
                                      pstmt1q1.setString(8, "IP");  
//                                    }else{
//                                     pstmt1q1.setString(8, "OP");   
//                                    }
                                    
                                    pstmt1q1.setString(9,"");
                                    pstmt1q1.setString(10,payModeTxt.getText().toString() );
                                    pstmt1q1.setString(11, "");
                                    pstmt1q1.setString(12, receiptNo);
                                    pstmt1q1.setString(13, "");
                                    pstmt1q1.setString(14, "Receipt");
                                    pstmt1q1.setString(15, "Unutilized patient deposit");
                                    pstmt1q1.setDouble(17, 0.00);
                                    if(java.lang.Double.valueOf(totalDepositsTxt.getText())>0){
                                    pstmt1q1.setDouble(16, determineBill);    
                                    }else{
                                    pstmt1q1.setDouble(16, java.lang.Double.valueOf(netBillValueTxt.getText()));
                                    }
                                    pstmt1q1.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(dischargeDatePicker.getDate()));
                                    pstmt1q1.setString(19, transNo);
                                    pstmt1q1.setBoolean(20, false);
                                    pstmt1q1.setBoolean(21, true);
                                    pstmt1q1.setBoolean(22, false);
                                    pstmt1q1.setString(23, user);
                                    pstmt1q1.setString(24, "");//cash point
                                    pstmt1q1.setString(25, "");//shift
                                    pstmt1q1.setTimestamp(26, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                    pstmt1q1.executeUpdate();
                            
 }          
              System.out.println("The invoice is currently::"+invoiceNo);
                            java.sql.PreparedStatement pstmt12 = connectDB.prepareStatement("UPDATE hp_admission SET invoice_no = '" + invoiceNo + "',balance = '" + netBillValueTxt.getText() + "',discharge = true,check_out = true,date_admitted = '" + admissionDatePicker.getDate() + "',discharge_date = '" + dischargeDatePicker.getDate() + "'  WHERE patient_no = '" + this.patientNumberTxt.getText() + "' AND visit_id = '" + visitIDTxt.getText() + "'");
                            pstmt12.executeUpdate();
                            
                            java.sql.PreparedStatement pstmt12f = connectDB.prepareStatement("UPDATE hp_mortuary SET invoice_no = '" + invoiceNo + "',check_out = true,date_received = '" + admissionDatePicker.getDate() + "',discharge_date = '" + dischargeDatePicker.getDate() + "'  WHERE annual_no = '" + this.patientNumberTxt.getText() + "'");
                            pstmt12f.executeUpdate();
                            
                            System.out.println("UPDATE hp_patient_card set paid = true,invoice_no = '" + invoiceNo + "' WHERE patient_no = '" + patientNumberTxt.getText() + "' AND visit_id = '" + visitIDTxt.getText() + "' AND (invoice_no NOT ILIKE 'I%' or  invoice_no is null)");
                            java.sql.PreparedStatement pstmt21 = connectDB.prepareStatement("UPDATE hp_patient_card set paid = true,invoice_no = '" + invoiceNo + "' WHERE patient_no = '" + patientNumberTxt.getText() + "' AND visit_id = '" + visitIDTxt.getText() + "' AND (invoice_no NOT ILIKE 'I%' or  invoice_no is null)");
                            pstmt21.executeUpdate();

                            java.sql.PreparedStatement pstmt21x = connectDB.prepareStatement("UPDATE ac_doctors_ledger set pat_inv = '" + invoiceNo + "',paid = true WHERE patient_no = '" + patientNumberTxt.getText() + "' AND input_date between '" + admissionDatePicker.getDate() + "' AND '" + dischargeDatePicker.getDate() + "'");
                            pstmt21x.executeUpdate();

                            java.sql.PreparedStatement pstmt12d = connectDB.prepareStatement("UPDATE hp_admission SET check_out = true,discharged_by = '"+UserName+"' WHERE patient_no = '" + this.patientNumberTxt.getText() + "' AND visit_id = '" + visitIDTxt.getText() + "'");
                            pstmt12d.executeUpdate();


                            javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully \n  Inv. No. is " + invoiceNo + " ", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                        }

                        java.sql.PreparedStatement pstmt12d = connectDB.prepareStatement("UPDATE hp_admission SET discharge = true,check_out = true,discharged_by = '"+UserName+"' WHERE patient_no = '" + this.patientNumberTxt.getText() + "' AND visit_id = '" + visitIDTxt.getText() + "'");
                        pstmt12d.executeUpdate();
                        
                        java.sql.PreparedStatement pstmt12da = connectDB.prepareStatement("UPDATE hp_mortuary SET check_out = true,discharged_by = '"+UserName+"' WHERE annual_no = '" + this.patientNumberTxt.getText() + "'");
                        pstmt12da.executeUpdate();
                            
                        javax.swing.JOptionPane.showMessageDialog(this, "Patient [" + patientNameTxt.getText().toUpperCase() + "] released.\n  Inv. No. is " + invoiceNoTxt.getText() + ". The final invoice form and release letter shall be printed shortly.", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                        

                        java.sql.Statement ps1 = connectDB.createStatement();
                        java.sql.ResultSet rst1 = ps1.executeQuery("SELECT discharge_no FROM hp_patient_discharge WHERE inv_no = '"+invoiceNoTxt.getText()+"'");
                        while (rst1.next()) {
                            rst1.getObject(1).toString();

                            disno = rst1.getObject(1).toString();
//                            UserName = rst1.getObject(2).toString();
                        }
                        //com.afrisoftech.txtreports.GatePassTxt policy = new com.afrisoftech.txtreports.GatePassTxt(connectDB, disno);

                        com.afrisoftech.reports.FinalInPatientInvSummPdf policy = new com.afrisoftech.reports.FinalInPatientInvSummPdf();
                        policy.FinalInPatientInvSummPdf(connectDB, invoiceNoTxt.getText());
                        
                        com.afrisoftech.reports.GatePassPdf policy2 = new com.afrisoftech.reports.GatePassPdf();
                        policy2.GatePassPdf(connectDB, disno, invoiceNoTxt.getText(), patientNumberTxt.getText());
                        
                        java.sql.PreparedStatement pstmtNHIF = connectDB.prepareStatement("SELECT count(*) FROM hp_patient_card where patient_no = ? and visit_id = ? and main_service ilike '%nhif%'");
                        pstmtNHIF.setString(1, patientNumberTxt.getText());
                        pstmtNHIF.setString(2, visitIDTxt.getText());
                        java.sql.ResultSet rsetNHIF = pstmtNHIF.executeQuery();
                        int claimNumber = 0;
                        while (rsetNHIF.next()){
                            claimNumber = rsetNHIF.getInt(1);
                            if(claimNumber > 0){
                                com.afrisoftech.reports.NHIFInvoicePdf nhifInvoice = new com.afrisoftech.reports.NHIFInvoicePdf();
                                nhifInvoice.NHIFInvoicePdf(connectDB, invoiceNoTxt.getText(), admissionDatePicker.getDate(), dischargeDatePicker.getDate(), patientNumberTxt.getText(),"NHIF");
                            }
                        }

                        patientRefundTxt.setText("0.00");
                        patientNameTxt.setText("");
                        schemeMemberNumberTxt.setText("");
                        billTotalTxt.setText("");
                        for (int k = 0; k < billTable.getRowCount(); k++) {
                            for (int r = 0; r < billTable.getColumnCount(); r++) {
                                billTable.getModel().setValueAt(null, k, r);
                            }
                        }
                        billTotalTxt.setText("");
                        connectDB.commit();
                        connectDB.setAutoCommit(true);

                        //            jComboBox1.setSelectedItem(null);
                        //  jComboBox2.setSelectedItem(null);
                    } catch (java.sql.SQLException sq) {
                        sq.printStackTrace();
                        javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage());
                        try {
                            connectDB.rollback();
                        } catch (java.sql.SQLException sql) {
                            javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
                        System.out.println(sq.getMessage());
                        javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                    }
                }
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "You cannot finalise a bill with a balance. Please consult the Accounts department.");
        }
        // Add your handling code here:
    }//GEN-LAST:event_finalizeInvoiceBtnActionPerformed

    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        searchButton21Clicked(); // Add your handling code here:
    }//GEN-LAST:event_searchButton1ActionPerformed
    private void searchButton21Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.patientNumberTxt.getLocationOnScreen();

        patientSearchDialog.setSize(600, 200);

        patientSearchDialog.setLocation(point);

        patientSearchDialog.setVisible(true);
    }
    private void jTextField14ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTextField14ComponentShown
// Add your handling code here:
    }//GEN-LAST:event_jTextField14ComponentShown

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        if (jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 2) != null) {
            if (jTable1.getSelectedColumn() == jTable1.getSelectedColumn()) {
                float qty = java.lang.Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString());
                float price = java.lang.Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString());
                float Disc = java.lang.Float.parseFloat(jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString());

                float total = qty * price;
                float totalDisc = (qty * price) * Disc / 100;
                jTable1.setValueAt(total, jTable1.getSelectedRow(), 6);
                jTable1.setValueAt(totalDisc, jTable1.getSelectedRow(), 5);
                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable1, 6);
                double totalSumDisc = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable1, 5);
                // jTextField13.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSumDisc));
                //  jTextField3.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
                //  jTextField15.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum-totalSumDisc));
                jTextField13.setText(java.lang.String.valueOf(totalSumDisc));
                jTextField3.setText(java.lang.String.valueOf(totalSum));
                jTextField15.setText(java.lang.String.valueOf(totalSum - totalSumDisc));

            }

        }


        // Add your handling code here:
    }//GEN-LAST:event_jTable1KeyReleased
    public void tableModelTableChanged() {
        System.out.println("Calculating totals for table 11 and 2.");
        //        double resFloat = 0.00;
        double resFloat = 0.00;


        for (int i = 0; i < jTable1.getRowCount(); i++) {

            if (jTable1.getModel().getValueAt(i, 0) != null) {

                resFloat = resFloat + Double.parseDouble(jTable1.getModel().getValueAt(i, 3).toString());

                jTextField3.setText(java.lang.String.valueOf(resFloat));

            } else {
                resFloat = resFloat + Double.parseDouble(jTable1.getModel().getValueAt(i, 3).toString());

                jTextField3.setText(java.lang.String.valueOf(resFloat));

            }
        }
        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        //jTextField11.setText("");
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0), jTable1.getSelectedRow(), 1);
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1), jTable1.getSelectedRow(), 3);
        jTable1.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 2), jTable1.getSelectedRow(), 7);
        jTable1.setValueAt(0, jTable1.getSelectedRow(), 4);

        jSearchDialog.dispose();
        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable1, 6);
        double totalSumDisc = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable1, 5);
        jTextField13.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSumDisc));
        jTextField3.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
        jTextField15.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum - totalSumDisc));

// Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        jSearchDialog.dispose();           // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate
        if (jTextField111.getCaretPosition() < 0) {

            System.out.println("Nothing");
        } else {
            jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select service_type,rate as price,gl_account as gl_code FROM pb_operating_parameters WHERE service_type ILIKE '" + jTextField111.getText() + "%'  order by service_type"));

            jSearchTable.setShowHorizontalLines(false);
            jSearchScrollPane.setViewportView(jSearchTable);


        }  // Add your handling code here:
    }//GEN-LAST:event_jTextField111CaretUpdate

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (jTable1.getSelectedColumn() == 1) {

            this.cmboxMouseClicked();
        }          // Add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked
    private void cmboxMouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = jTable1.getLocationOnScreen();
        jSearchDialog.setSize(400, 200);
        jSearchDialog.setLocation(point);
        jSearchDialog.setVisible(true);
    }
    private void jTable12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable12MouseClicked
        this.jTextField13.setText("0.00");
        //  this.jTextField5.setText("0.00");
        this.jTextField15.setText("0.00");
        String receiptNo = null;
        receiptNo = jTable12.getValueAt(jTable12.getSelectedRow(), 1).toString();
        if (jTable12.getSelectedColumn() == 1) {
            this.jTextField9.setText(receiptNo);
            try {

                java.sql.Statement stmt = connectDB.createStatement();
                java.sql.ResultSet rset = stmt.executeQuery("select (second_name||' '||first_name||' '||last_name) as name,account_no AS staff_no,description AS description from hp_patient_register  where patient_no ='" + jTextField9.getText() + "'");
                while (rset.next()) {
                    // jComboBox6.setSelectedItem(rset.getObject(1).toString());
                    jTextField1.setText(rset.getObject(1).toString());
                    //jTextField2.setText(rset.getObject(2).toString());
                    jTextField7.setText(rset.getObject(3).toString());


                }
            } catch (java.sql.SQLException sqe) {
                sqe.printStackTrace();
                System.out.println("Select not successful");
            }
            /*
             * try {
             *
             * java.sql.Statement stmt = connectDB.createStatement();
             * java.sql.ResultSet rset = stmt.executeQuery("select payer from
             * hp_patient_register where patient_no
             * ='"+jTextField9.getText()+"'"); while (rset.next()){ //
             * jComboBox6.setSelectedItem(rset.getObject(1).toString());
             * jTextField4.setText(rset.getObject(1).toString());
             *
             *
             * }
             * } catch (java.sql.SQLException sqe) { sqe.printStackTrace();
             * System.out.println("Select not successful"); }
             */
            String Code = null;
            try {

                java.sql.Statement pss1 = connectDB.createStatement();
                java.sql.ResultSet rset11 = pss1.executeQuery("select account_no,payer_name from ac_schemes where scheme_name = '" + jTextField7.getText() + "'");
                while (rset11.next()) {
                    Code = dbObject.getDBObject(rset11.getObject(1), "-");


                    jTextField8.setText(Code);
                    jTextField4.setText(rset11.getObject(2).toString());
                }
            } catch (java.sql.SQLException sqe) {
                sqe.printStackTrace();
                System.out.println("select not successful");
            }

            try {

                java.sql.Statement pss11 = connectDB.createStatement();
                java.sql.ResultSet rss11 = pss11.executeQuery("select sum(amount) from patient_bill where patient_no = '" + jTextField9.getText() + "' and date_prescribed = '" + jTable12.getValueAt(jTable12.getSelectedRow(), 0) + "'");
                while (rss11.next()) {
                    // jTextField2.setText(rss1.getObject(1).toString());
                    jTextField3.setText(rss11.getObject(1).toString());
                    jTextField15.setText(rss11.getObject(1).toString());
                }
            } catch (java.sql.SQLException sqlex) {
                javax.swing.JOptionPane.showMessageDialog(this, sqlex.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

                System.out.println(sqlex.getMessage());
            }


            this.populateTable1(jTextField9.getText());
            //  jSearchTable2MouseClicked(evt);
            // this.populateTable1(jTextField9.getText());
        } else {
        }

        // Add your handling code here:
    }//GEN-LAST:event_jTable12MouseClicked

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        this.jTextField3.setText("");
        for (int k = 0; k < jTable12.getRowCount(); k++) {
            for (int r = 0; r < jTable12.getColumnCount(); r++) {
                jTable12.getModel().setValueAt(null, k, r);
            }
        }

        for (int k = 0; k < jTable1.getRowCount(); k++) {
            for (int r = 0; r < jTable1.getColumnCount(); r++) {
                jTable1.getModel().setValueAt(null, k, r);
            }
        }
        //       this.jComboBox1.setSelectedItem(null);
        //       this.jTextField3.setText("");
        int i = 0;
        int j = 0;
        try {
            java.sql.Statement stmt = connectDB.createStatement();

            java.sql.ResultSet rset = stmt.executeQuery("SELECT count(patient_no) FROM op_unfinalised_inv WHERE trans_date between '" + datePicker1.getDate().toString() + "' and '" + datePicker3.getDate().toString() + "'");

            while (rset.next()) {
                j = rset.getInt(1);
            }
            if (j > 0) {
                java.sql.Statement stmtTable1 = connectDB.createStatement();

                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select trans_date,patient_no,description,sum(amount) FROM op_unfinalised_inv WHERE trans_date between '" + datePicker1.getDate().toString() + "' and '" + datePicker3.getDate().toString() + "' group by trans_date,patient_no,description");

                while (rsetTable1.next()) {

                    System.out.println("Working at table row " + i);
                    jTable12.setValueAt(rsetTable1.getObject(1), i, 0);
                    jTable12.setValueAt(rsetTable1.getObject(2), i, 1);
                    jTable12.setValueAt(rsetTable1.getObject(3), i, 2);
                    jTable12.setValueAt(rsetTable1.getObject(4), i, 3);
                    // jTable1.setValueAt(rsetTable1.getObject(5), i, 4);

                    i++;

                    //                i = i + i;
                    //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                }
            }

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }


        jTextField8.setText("");



        //  this.populateTable1(jTextField9.getText());        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void dispose11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispose11ActionPerformed
        jSearchDialog11.dispose(); // Add your handling code here:
    }//GEN-LAST:event_dispose11ActionPerformed

    private void jSearchTable11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable11MouseClicked
        jTextField7.setText(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 1).toString());
        jTextField4.setText(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 2).toString());
        jTextField8.setText(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 0).toString());

        jSearchDialog11.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable11MouseClicked

    private void searchButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton2ActionPerformed
        searchButton11aClicked();         // Add your handling code here:
    }//GEN-LAST:event_searchButton2ActionPerformed

    private void jTextField1111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1111CaretUpdate
        if (jTextField1111.getCaretPosition() < 0) {

            System.out.println("Nothing");
        } else {
            jSearchTable11.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT account_no,scheme_name,payer_name from ac_schemes where scheme_name ILIKE '" + jTextField1111.getText() + "%' order by scheme_name"));

            jSearchTable11.setShowHorizontalLines(false);
            jSearchScrollPane11.setViewportView(jSearchTable11);

        }         // Add your handling code here:
    }//GEN-LAST:event_jTextField1111CaretUpdate
    private void searchButton11aClicked() {

        System.out.println("Showing dialog");

        jSearchDialog11.dispose();
        java.awt.Point point = this.jTextField7.getLocationOnScreen();

        jSearchDialog11.setSize(350, 200);

        jSearchDialog11.setLocation(point);
        jSearchDialog11.setVisible(true);
    }

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        int rows2Delete = jTable1.getSelectedRowCount();

        int[] selectedRows = jTable1.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {



                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable1.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }



            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) jTable1.getModel();

                defTableModel.removeRow(jTable1.getSelectedRow());
            }
        }
        // double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable1, 3);
        //jTextField3.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable1, 6);
        double totalSumDisc = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable1, 5);
        jTextField13.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSumDisc));
        jTextField3.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
        jTextField15.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum - totalSumDisc));

        // Add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchButton2Clicked();        // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed
    private void searchButton2Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.jTextField9.getLocationOnScreen();

        jSearchDialog2.setSize(400, 200);

        jSearchDialog2.setLocation(point);

        jSearchDialog2.setVisible(true);
    }
    private void jTextField113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField113CaretUpdate
        if (this.jCheckBox3.isSelected()) {
            if (this.jTextField113.getCaretPosition() < 0) {
                System.out.print("Nothing");
            } else {
                jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select patient_no as pat_no,(second_name||' '||first_name||' '||last_name) as name,account_no AS staff_no,description AS description from hp_patient_register  where second_name||' '||first_name||' '||last_name ILIKE '" + jTextField113.getText() + "%' AND pay_mode = 'Scheme' order by second_name"));


                jSearchTable2.setShowHorizontalLines(false);
                jSearchScrollPane2.setViewportView(jSearchTable2);



            }


        } else {

            if (this.jCheckBox1.isSelected()) {
                if (this.jTextField113.getCaretPosition() < 0) {
                    System.out.print("Nothing");
                } else {

                    jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select patient_no as pat_no,(second_name||' '||first_name||' '||last_name) as name,account_no AS staff_no,description AS description from hp_patient_register  where patient_no ILIKE '" + jTextField113.getText() + "%' AND pay_mode = 'Scheme' order by second_name"));

                    jSearchTable2.setShowHorizontalLines(false);
                    jSearchScrollPane2.setViewportView(jSearchTable2);



                }


            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jTextField113CaretUpdate

    private void jSearchTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2MouseClicked

        this.jTextField13.setText("0.00");
        //  this.jTextField5.setText("0.00");
        this.jTextField15.setText("0.00");
        this.jTextField3.setText("");
        for (int k = 0; k < jTable1.getRowCount(); k++) {
            for (int r = 0; r < jTable1.getColumnCount(); r++) {
                jTable1.getModel().setValueAt(null, k, r);
            }
        }

        for (int x = 0; x < schemeInvoicingTable.getRowCount(); x++) {
            for (int y = 0; y < schemeInvoicingTable.getColumnCount(); y++) {
                schemeInvoicingTable.getModel().setValueAt(null, x, y);
            }
        }
        jTextField8.setText("");

        String code = null;

        jTextField1.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
        jTextField9.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0).toString());
        jTextField2.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 2).toString());
        jTextField7.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 3).toString());

        jSearchDialog2.dispose();
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select payer from hp_patient_register where patient_no ='" + jTextField9.getText() + "'");
            while (rset.next()) {
                jTextField4.setText(rset.getObject(1).toString());

            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Insert not successful");
        }

        try {

            java.sql.Statement pss1 = connectDB.createStatement();
            java.sql.ResultSet rset11 = pss1.executeQuery("select account_no from ac_schemes where scheme_name = '" + jTextField7.getText() + "' and payer_name = '" + jTextField4.getText() + "'");
            while (rset11.next()) {
                code = dbObject.getDBObject(rset11.getObject(1), "-");
                jTextField8.setText(code);
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("select not successful");
        }

        try {
            // java.sql.Statement pss = connectDB.createStatement();
            //  java.sql.ResultSet rss = pss.executeQuery("select first_name||' '||second_name||' '||last_name from hp_patient_register where patient_no ='"+jTextField9.getText()+"'");
            // while (rss.next()){
            //     jTextField1.setText(rss.getObject(1).toString());
            //}

            java.sql.Statement pss1 = connectDB.createStatement();
            java.sql.ResultSet rss1 = pss1.executeQuery("select account_no,expiry_date,category from hp_patient_register where patient_no = '" + jTextField9.getText() + "'");
            while (rss1.next()) {
                jTextField2.setText(rss1.getObject(1).toString());
                jTextField5.setText(rss1.getObject(2).toString());
                jTextField6.setText(rss1.getObject(3).toString());
            }

            java.sql.Statement pss11 = connectDB.createStatement();
            java.sql.ResultSet rss11 = pss11.executeQuery("select sum(amount) from patient_bill where patient_no = '" + jTextField9.getText() + "' and date_prescribed = '" + datePicker1.getDate() + "'");
            while (rss11.next()) {
                // jTextField2.setText(rss1.getObject(1).toString());
                jTextField3.setText(rss11.getObject(1).toString());
                jTextField15.setText(rss11.getObject(1).toString());
            }
        } catch (java.sql.SQLException sqlex) {
            javax.swing.JOptionPane.showMessageDialog(this, sqlex.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        /*
         * try { crset2.setCommand("select date::date,service,dosage,debit FROM
         * hp_patient_card WHERE patient_no ='"+jComboBox2.getSelectedItem()+"'
         * and paid = false AND payment_mode = 'Scheme' AND scheme
         * ='"+jComboBox1.getSelectedItem()+"' and debit >0");
         *
         * crset2.setConnectionSource(pConnDB);
         *
         * crset2.execute();
         *
         * // crset2.setExecuteOnLoad(true); jTable1.setModel(new
         * org.netbeans.lib.sql.models.TableModel(crset2, new
         * org.netbeans.lib.sql.models.TableModel.Column[] { new
         * org.netbeans.lib.sql.models.TableModel.Column("date", "Date", false),
         * new org.netbeans.lib.sql.models.TableModel.Column("service",
         * "Description", false), new
         * org.netbeans.lib.sql.models.TableModel.Column("dosage", "Quantity",
         * false), new org.netbeans.lib.sql.models.TableModel.Column("debit",
         * "Amount KShs.", false)
         *
         * }));
         *
         * // tableModel = jTable1.getModel();
         *
         * jScrollPane1.setViewportView(jTable1);
         *
         * } catch(java.sql.SQLException sqlex){
         * javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error
         * Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
         *
         * System.out.println(sqlex.getMessage()); }
         */

        this.populateTable1(jTextField9.getText());
        /*
         * try { crset2.setCommand("select trans_date::date as
         * date,service,quantity,amount,gl_code FROM hp_patient_billing WHERE
         * patient_no ='"+jTextField9.getText()+"' and paid = false AND
         * payment_mode = 'Scheme' union select date_prescribed as
         * date,description as service,quantity,amount,gl_code from hp_pharmacy
         * WHERE patient_no ='"+jTextField9.getText()+"' and paid = false");
         *
         * crset2.setConnectionSource(pConnDB);
         *
         * crset2.execute();
         *
         * // crset2.setExecuteOnLoad(true); jTable1.setModel(new
         * org.netbeans.lib.sql.models.TableModel(crset2, new
         * org.netbeans.lib.sql.models.TableModel.Column[] { new
         * org.netbeans.lib.sql.models.TableModel.Column("date", "Date", false),
         * new org.netbeans.lib.sql.models.TableModel.Column("service",
         * "Description", false), new
         * org.netbeans.lib.sql.models.TableModel.Column("quantity", "Quantity",
         * false), new org.netbeans.lib.sql.models.TableModel.Column("amount",
         * "Amount KShs.", false), new
         * org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl Code",
         * false)
         *
         * }));
         *
         * // tableModel = jTable1.getModel();
         *
         * jScrollPane1.setViewportView(jTable1);
         *
         * } catch(java.sql.SQLException sqlex){
         * javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error
         * Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
         *
         * System.out.println(sqlex.getMessage()); }
         */

        jSearchDialog2.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable2MouseClicked
    private void populateTable1(java.lang.String patient_no) {
        for (int k = 0; k < jTable1.getRowCount(); k++) {
            for (int r = 0; r < jTable1.getColumnCount(); r++) {
                jTable1.getModel().setValueAt(null, k, r);
            }
        }
        //       this.jComboBox1.setSelectedItem(null);
        //       this.jTextField3.setText("");
        int i = 0;
        int j = 0;
        try {
            java.sql.Statement stmt = connectDB.createStatement();

            java.sql.ResultSet rset = stmt.executeQuery("SELECT count(patient_name) FROM patient_bill WHERE patient_no = '" + patient_no + "'");

            while (rset.next()) {
                j = rset.getInt(1);
            }
            if (j > 0) {
                java.sql.Statement stmtTable1 = connectDB.createStatement();

                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select date_prescribed::date as date,description,quantity,sum(amount),gl_code,sum(amount/quantity) FROM patient_bill WHERE patient_no ='" + jTextField9.getText() + "' and date_prescribed = '" + jTable12.getValueAt(jTable12.getSelectedRow(), 0) + "' GROUP BY date_prescribed::date,description,quantity,gl_code");

                while (rsetTable1.next()) {

                    System.out.println("Working at table row " + i);
                    jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                    jTable1.setValueAt(rsetTable1.getObject(2), i, 1);
                    jTable1.setValueAt(rsetTable1.getObject(3), i, 2);
                    jTable1.setValueAt(rsetTable1.getObject(6), i, 3);
                    jTable1.setValueAt(rsetTable1.getObject(4), i, 6);
                    jTable1.setValueAt(rsetTable1.getObject(5), i, 7);
                    jTable1.setValueAt(0.0, i, 4);
                    i++;

                    //                i = i + i;
                    //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                }
            }

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }


    }

    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed
        jSearchDialog2.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton52ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //       this.getContentPane().removeAll();
        //       this.initComponents();
        // Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed
    //    private void cmbox2ActionPerformed(java.awt.event.ActionEvent evt){
       /*
     * java.lang.Object selectedGuaran = cmbox2.getSelectedItem(); int i =
     * jTable1.getSelectedRow();
     *
     * if (selectedGuaran != null) {
     *
     * try { java.sql.Statement pstmt = connectDB.createStatement();
     * java.sql.ResultSet rs = pstmt.executeQuery("select item_code,units from
     * st_stock_item where description = '"+selectedGuaran+"'"); while
     * (rs.next()) jTable1.setValueAt(rs.getObject(1),i,1);
     * jTable1.setValueAt(rs.getObject(2),i,2); } catch(java.sql.SQLException
     * sqlex){ System.out.println(sqlex.getMessage());
     *
     * }
     */
    //}
    //   }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        setVisible(false); // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        java.util.Date periodFrom = null;
        java.util.Date periodTo = null;

        java.sql.Savepoint registerSavePoint = null;
        try {
            connectDB.setAutoCommit(false);
            registerSavePoint = connectDB.setSavepoint("registration");
        } catch (java.sql.SQLException ex) {
            ex.printStackTrace();
        }



        try {

            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + datePicker3.getDate() + "' BETWEEN period_from AND period_to");
            while (rsetf.next()) {
                periodFrom = rsetf.getDate(1);
                periodTo = rsetf.getDate(2);
            }



            if (datePicker1.getDate().before(periodFrom) || datePicker3.getDate().after(periodTo)) {
                javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            } else {
                if (jTable1.isEditing()) {
                    jTable1.getCellEditor().stopCellEditing();
                }
                java.util.Calendar calendar = java.util.Calendar.getInstance();

                long dateNow = calendar.getTimeInMillis();

                java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

                System.out.println(datenowSql1.toString());

                java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

                System.out.println(datenowSql.toString());

                String receiptNo = null;
                String actCode = null;
                String glCode = null;
                String bankAcc = null;
                String glCode1 = null;
                String bankAcc1 = null;
                String transNo = null;
                String payMode = null;
                String patCat = null;
                String patientAcc = null;
                String cardNo = null;
                String scheme = null;
                String cardName = null;
                String isurer = null;
                String expDate = null;
                String staffNo = null;
                String actNames = null;
                String user = null;
                String actNames1 = null;
                String actCode1 = null;
                String invoiceNo = null;

                double credits = java.lang.Double.parseDouble(jTextField15.getText());


                java.sql.Statement stm1 = connectDB.createStatement();
                if (jTextField12.getText().equalsIgnoreCase("-")) {
                    java.sql.Statement pss1 = connectDB.createStatement();
                    java.sql.ResultSet rss1 = pss1.executeQuery("select 'O'||(nextval('pinvoice_no_seq'))");
                    while (rss1.next()) {
                        invoiceNo = rss1.getObject(1).toString();
                    }
                } else {
                    invoiceNo = jTextField12.getText();
                }


                java.sql.Statement pss12 = connectDB.createStatement();
                java.sql.ResultSet rsts11 = pss12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                while (rsts11.next()) {
                    actCode = rsts11.getObject(1).toString();
                    actNames = rsts11.getObject(2).toString();
                }

                java.sql.Statement pss = connectDB.createStatement();
                java.sql.ResultSet rss = pss.executeQuery("select nextval('transaction_no_seq')");

                while (rss.next()) {
                    transNo = rss.getObject(1).toString();
                }
                java.sql.Statement pss11 = connectDB.createStatement();
                java.sql.ResultSet rsts1 = pss11.executeQuery("SELECT gl_code,gl_name FROM ac_schemes where account_no =  '" + jTextField8.getText() + "'");
                while (rsts1.next()) {
                    actCode1 = rsts1.getObject(1).toString();
                    actNames1 = rsts1.getObject(2).toString();
                }
                java.sql.Statement pss111 = connectDB.createStatement();
                java.sql.ResultSet rsts111 = pss111.executeQuery("select current_user");
                while (rsts111.next()) {
                    user = rsts111.getObject(1).toString();
                }
                for (int i = 0; i < jTable1.getRowCount(); i++) {


                    if (jTable1.getModel().getValueAt(i, 0) != null) {

                        java.sql.Statement pssq = connectDB.createStatement();
                        java.sql.ResultSet rse121 = pssq.executeQuery("select main_service from patient_bill where description = '" + jTable1.getModel().getValueAt(i, 1).toString() + "'");

                        while (rse121.next()) {
                            glCode = dbObject.getDBObject(rse121.getObject(1), "-");
                        }
                        /*
                         * java.sql.PreparedStatement pstmt =
                         * connectDB.prepareStatement("insert into
                         * hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?,
                         * ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                         * pstmt.setString(1,jTextField9.getText());
                         * pstmt.setObject(2,jTable1.getValueAt(i,1).toString());
                         * pstmt.setString(3,""); pstmt.setString(4,"Scheme");
                         * pstmt.setString(5,transNo);
                         * pstmt.setString(7,jTextField7.getText());
                         * pstmt.setString(6,""); pstmt.setString(8,"");
                         * pstmt.setString(9,jTextField4.getText());
                         * pstmt.setString(10,jTextField5.getText());
                         * pstmt.setString(11,"");
                         * pstmt.setDouble(12,java.lang.Double.valueOf(jTable1.getValueAt(i,3).toString()));
                         * pstmt.setDouble(13,0.00);
                         * pstmt.setDate(14,com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(jTable1.getValueAt(i,0).toString())));
                         * pstmt.setObject(15,actCode);
                         * pstmt.setString(16,glCode);
                         * pstmt.setDouble(17,java.lang.Double.valueOf(jTable1.getValueAt(i,2).toString()));
                         * pstmt.setObject(18,jTextField2.getText());
                         * pstmt.setBoolean(19,true);
                         * pstmt.setString(20,"Receipts");
                         * pstmt.setBoolean(21,true);
                         * pstmt.setString(22,actNames);
                         * pstmt.setString(23,invoiceNo);
                         * pstmt.setString(24,user); pstmt.setString(25,"");
                         * pstmt.setString(26,""); pstmt.executeUpdate();
                         *
                         */
                      /* java.sql.PreparedStatement pstmt2 =
                         * connectDB.prepareStatement("insert into ac_ledger
                         * values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
                         * ?, ?, ?,?,?,?)");
                         * pstmt2.setObject(1,jTable1.getValueAt(i,4).toString());
                         * pstmt2.setObject(2,glCode);
                         * pstmt2.setString(3,jTextField9.getText());
                         * pstmt2.setString(4,jTextField1.getText());
                         * pstmt2.setString(5,""); pstmt2.setString(6,cardNo);
                         * pstmt2.setString(7,cardName);
                         * pstmt2.setString(10,"Scheme");
                         * pstmt2.setString(9,isurer); pstmt2.setString(8,"OP");
                         * pstmt2.setString(11,""); pstmt2.setString(12,"");
                         * pstmt2.setString(13,"");
                         * pstmt2.setString(14,jTable1.getValueAt(i,1).toString());
                         * pstmt2.setString(15,"Revenue");
                         * pstmt2.setDouble(16,0.00);
                         * pstmt2.setDouble(17,java.lang.Double.valueOf(jTable1.getValueAt(i,3).toString()));
                         * pstmt2.setDate(18,com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(jTable1.getValueAt(i,0).toString())));
                         * pstmt2.setString(19,transNo);
                         * pstmt2.setBoolean(20,false);
                         * pstmt2.setBoolean(21,false);
                         * pstmt2.setBoolean(22,false);
                         * pstmt2.setString(23,user); pstmt2.executeUpdate();
                         *
                         */
                        java.sql.PreparedStatement pstmt22a = connectDB.prepareStatement("UPDATE hp_patient_card set paid = true,invoice_no = '" + invoiceNo + "' WHERE patient_no = '" + jTextField9.getText() + "' and date::date = '" + jTable1.getValueAt(i, 0).toString() + "' and paid = false");
                        pstmt22a.executeUpdate();
                        java.sql.PreparedStatement pstmt22 = connectDB.prepareStatement("UPDATE hp_patient_billing set paid = true WHERE patient_no = '" + jTextField9.getText() + "' and trans_date = '" + jTable1.getValueAt(i, 0).toString() + "' and service = '" + jTable1.getValueAt(i, 1).toString() + "'");
                        pstmt22.executeUpdate();
                        java.sql.PreparedStatement pstmt21 = connectDB.prepareStatement("UPDATE hp_pharmacy set paid = true WHERE patient_no = '" + jTextField9.getText() + "'  and date_prescribed = '" + jTable1.getValueAt(i, 0).toString() + "' and description = '" + jTable1.getValueAt(i, 1).toString() + "'");
                        pstmt21.executeUpdate();
                        java.sql.PreparedStatement pstmt11 = connectDB.prepareStatement("UPDATE ac_doctors_ledger SET pat_inv = '" + invoiceNo + "' where patient_no = '" + this.jTextField9.getText() + "' and input_date = '" + jTable1.getValueAt(i, 0).toString() + "' AND pat_inv not ilike 'O%'");
                        pstmt11.executeUpdate();

                    }
                }

                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into ac_debtors values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                pstmt.setObject(1, actCode1);
                pstmt.setString(2, jTextField4.getText());
                pstmt.setString(3, jTextField1.getText());
                pstmt.setString(4, jTextField9.getText());
                pstmt.setString(5, jTextField7.getText());
                pstmt.setString(6, "");
                if (this.jTextField8.getText().equals(null) || this.jTextField8.getText().equals("-")) {
                    javax.swing.JOptionPane.showMessageDialog(this, "Account NO. MISSING !!!", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                } else {
                    pstmt.setString(7, jTextField8.getText());
                }
                pstmt.setString(8, "");
                pstmt.setString(9, "");
                pstmt.setString(10, jTextField2.getText());
                pstmt.setString(11, transNo);
                pstmt.setString(12, "Raise Invoice");
                if (credits > 0) {
                    pstmt.setDouble(13, java.lang.Double.valueOf(jTextField15.getText()));
                } else {
                    pstmt.setDouble(13, credits * -1);
                }
                pstmt.setDouble(14, 0.00);
                pstmt.setObject(15, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(jTable1.getValueAt(0, 0).toString())));
                pstmt.setObject(16, invoiceNo);
                pstmt.setString(17, actNames1);
                pstmt.setBoolean(18, false);
                pstmt.setBoolean(19, false);
                pstmt.setString(20, user);
                pstmt.setString(21, "");
                if (credits > 0) {
                    pstmt.setDouble(22, java.lang.Double.valueOf(jTextField15.getText()));
                } else {
                    pstmt.setDouble(22, credits * -1);
                }
                pstmt.setBoolean(23, false);
                pstmt.setDouble(24, 0.00);
                pstmt.setObject(25, "");
                pstmt.setObject(26, null);
                pstmt.setBoolean(27, false);
                pstmt.setDouble(28, 0.00);
                pstmt.setObject(29, null);
                pstmt.setString(30, "");
                pstmt.setBoolean(31, false);
                pstmt.setDouble(32, 0.00);
                pstmt.setObject(33, null);
                pstmt.setString(34, "");
                pstmt.setString(35, jTextField2.getText());
                pstmt.executeUpdate();



                java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                pstmt1.setString(1, jTextField9.getText());
                pstmt1.setObject(2, "Invoice");
                pstmt1.setString(3, "");
                pstmt1.setString(4, "Scheme");
                pstmt1.setString(5, transNo);
                pstmt1.setString(7, jTextField7.getText());
                pstmt1.setString(6, "");
                pstmt1.setString(8, "");
                pstmt1.setString(9, jTextField4.getText());
                pstmt1.setObject(10, null);
                pstmt1.setString(11, "");
                if (credits > 0) {
                    pstmt1.setDouble(13, java.lang.Double.valueOf(jTextField15.getText()));
                } else {
                    pstmt1.setDouble(13, credits * -1);

                }
                pstmt1.setDouble(12, 0.00);
                pstmt1.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(jTable1.getValueAt(0, 0).toString())));
                pstmt1.setObject(15, actCode);
                pstmt1.setString(16, glCode);
                pstmt1.setDouble(17, 1);
                pstmt1.setObject(18, jTextField2.getText());
                pstmt1.setBoolean(19, true);
                pstmt1.setString(20, "Receipts");
                pstmt1.setBoolean(21, true);
                pstmt1.setString(22, actNames);
                pstmt1.setString(23, invoiceNo);
                pstmt1.setString(24, user);
                pstmt1.executeUpdate();

                double Disc = java.lang.Double.valueOf(jTextField13.getText());
                if (Disc > 0) {

                    java.sql.Statement stm122x = connectDB.createStatement();
                    java.sql.ResultSet rse122x = stm122x.executeQuery("select code,activity from pb_activity where activity_category ='EDS'");
                    while (rse122x.next()) {

                        discode = rse122x.getObject(1).toString();
                        discglAcc = rse122x.getObject(2).toString();
                    }
                    java.sql.PreparedStatement pstmt1f = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                    pstmt1f.setString(1, jTextField9.getText());
                    pstmt1f.setObject(2, "Discount");
                    pstmt1f.setString(3, "");
                    pstmt1f.setString(4, "Scheme");
                    pstmt1f.setString(5, transNo);
                    pstmt1f.setString(7, jTextField7.getText());
                    pstmt1f.setString(6, "");
                    pstmt1f.setString(8, "");
                    pstmt1f.setString(9, jTextField4.getText());
                    pstmt1f.setObject(10, null);
                    pstmt1f.setString(11, "");
                    pstmt1f.setDouble(13, java.lang.Double.valueOf(jTextField13.getText()));
                    pstmt1f.setDouble(12, 0.00);
                    pstmt1f.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(jTable1.getValueAt(0, 0).toString())));
                    pstmt1f.setObject(15, actCode);
                    pstmt1f.setString(16, glCode);
                    pstmt1f.setDouble(17, 1);
                    pstmt1f.setObject(18, jTextField2.getText());
                    pstmt1f.setBoolean(19, true);
                    pstmt1f.setString(20, "Receipts");
                    pstmt1f.setBoolean(21, true);
                    pstmt1f.setString(22, actNames);
                    pstmt1f.setString(23, invoiceNo);
                    pstmt1f.setString(24, user);
                    pstmt1f.executeUpdate();


                    java.sql.PreparedStatement pstmt2v = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
                    pstmt2v.setString(1, discode);
                    pstmt2v.setString(2, discglAcc);
                    pstmt2v.setString(3, jTextField9.getText());
                    pstmt2v.setString(4, jTextField1.getText());
                    pstmt2v.setString(5, "");
                    pstmt2v.setString(6, cardNo);
                    pstmt2v.setString(7, cardName);
                    pstmt2v.setString(8, "OP");
                    pstmt2v.setString(9, isurer);
                    pstmt2v.setString(10, "Scheme");
                    pstmt2v.setString(11, "");
                    pstmt2v.setString(12, "");
                    pstmt2v.setString(13, "");
                    pstmt2v.setString(14, "Discount");
                    pstmt2v.setString(15, "Revenue");
                    pstmt2v.setString(16, jTextField13.getText());
                    pstmt2v.setDouble(17, 0.00);
                    pstmt2v.setString(18, jTable1.getValueAt(0, 0).toString());
                    pstmt2v.setString(19, transNo);
                    pstmt2v.setString(20, "false");
                    pstmt2v.setString(21, "false");
                    pstmt2v.setString(22, "false");
                    pstmt2v.setString(23, user);
                    pstmt2v.executeUpdate();
                }
                connectDB.commit();
                connectDB.setAutoCommit(true);

                com.afrisoftech.reports.FinalInvoiceByinvPdf policy = new com.afrisoftech.reports.FinalInvoiceByinvPdf();
                policy.FinalInvoiceByinvPdf(connectDB, invoiceNo, invoiceNo);

                javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully \n Inv No. is: " + invoiceNo + "", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                jTextField1.setText("");
                jTextField2.setText("");
                jTextField3.setText("");
                for (int k = 0; k < jTable1.getRowCount(); k++) {
                    for (int r = 0; r < jTable1.getColumnCount(); r++) {
                        jTable1.getModel().setValueAt(null, k, r);
                    }
                }
                jTextField3.setText("");
                jTextField12.setText("-");
                jCheckBox2ActionPerformed(evt);
            }
        } catch (java.sql.SQLException sq) {

            try {
                connectDB.rollback(registerSavePoint);
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sq.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }
        //}
        // }// Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void nhifRebateTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_nhifRebateTxtCaretUpdate
        /*
         * float noofDays = 0; float balance =
         * java.lang.Float.parseFloat(jTextField18.getText()); float nhif = 0;
         * float Rate = 0; java.util.Date admDate = datePicker12.getDate();
         * java.util.Date disDate = datePicker11.getDate();
         *
         *
         * try { double net = 0.00; // noofDays = disDate.getDate() -
         * admDate.getDate(); double Bill =
         * java.lang.Double.valueOf(jTextField31.getText()); double deposits =
         * java.lang.Double.valueOf(jTextField10.getText()); // double net =
         * java.lang.Double.valueOf(jTextField18.getText()); nhif =
         * java.lang.Float.parseFloat(jTextField22.getText()); //
         * jTextField22.setText(java.lang.String.valueOf(nhif));
         * jTextField23.setText(java.lang.String.valueOf(Bill-(nhif+deposits)));
         * double nhifDiff = Bill-(nhif+deposits);
         *
         *
         * if(nhifDiff > 0){ net = Bill-(nhif+deposits+nhifDiff); }else{ net =
         * Bill-(nhif+deposits+nhifDiff); } // net =
         * (Bill-nhif-deposits)+nhifDiff*-1;
         * //jTextField18.setText(java.lang.String.valueOf((Bill-nhif-deposits)+nhifDiff*-1));
         * //} java.sql.Statement pss111xx = connectDB.createStatement();
         * java.sql.ResultSet rss111xx = pss111xx.executeQuery("select
         * ROUND('"+nhifDiff+"',2)::numeric"); while (rss111xx.next()){
         * jTextField23.setText(java.lang.String.valueOf(rss111xx.getDouble(1)));
         * } java.sql.Statement pss111x = connectDB.createStatement();
         * java.sql.ResultSet rss111x = pss111x.executeQuery("select
         * ROUND('"+net+"',2)::numeric"); while (rss111x.next()){
         * jTextField18.setText(java.lang.String.valueOf(rss111x.getDouble(1)));
         * } } catch(java.sql.SQLException sqlex){
         * javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error
         * Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
         *
         * System.out.println(sqlex.getMessage()); }
         */
        // TODO add your handling code here:
    }//GEN-LAST:event_nhifRebateTxtCaretUpdate

    private void nhifCategoryCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nhifCategoryCmbxActionPerformed
        float noofDays = 0;
        float balance = java.lang.Float.parseFloat(netBillValueTxt.getText());
        float nhif = 0;
        float Rate = 0;
        boolean computeDays = false;
        java.util.Date admDate = admissionDatePicker.getDate();
        java.util.Date disDate = dischargeDatePicker.getDate();

        try {
            java.sql.Statement pss11 = connectDB.createStatement();
            java.sql.ResultSet rss11 = pss11.executeQuery("SELECT rate,compute_days FROM pb_nssf_rebeats WHERE name ILIKE '" + nhifCategoryCmbx.getSelectedItem().toString() + "'");
            while (rss11.next()) {
                Rate = rss11.getFloat(1);
                computeDays = rss11.getBoolean(2);
            }

            java.sql.Statement pss111 = connectDB.createStatement();
            java.sql.ResultSet rss111 = pss111.executeQuery("select ('" + dischargeDatePicker.getDate() + "'::date - '" + admissionDatePicker.getDate() + "'::date)");
            while (rss111.next()) {
                noofDays = rss111.getFloat(1);
                daystoChargeTxt.setText(java.lang.String.valueOf(noofDays));
            }

        } catch (java.sql.SQLException sqlex) {
            javax.swing.JOptionPane.showMessageDialog(this, sqlex.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        try {
            double net = 0.00;
            // noofDays = disDate.getDate() - admDate.getDate();
            double Bill = java.lang.Double.valueOf(billTotalTxt.getText());
            double deposits = java.lang.Double.valueOf(totalDepositsTxt.getText());
            // double net = java.lang.Double.valueOf(jTextField18.getText());
            if (computeDays) {
                nhif = noofDays * Rate;
            } else {
                nhif = Rate;
            }
            nhifRebateTxt.setText(java.lang.String.valueOf(nhif));
            nhifDiffTxt.setText(java.lang.String.valueOf(Bill - (nhif + deposits)));
            double nhifDiff = Bill - (nhif + deposits);

            /*
             * if(balance-nhif > 0){ net = Bill-(nhif+deposits); }else{
             */
            if (nhifDiff > 0) {
                net = Bill - (nhif + deposits + nhifDiff);
            } else {
                net = Bill - (nhif + deposits + nhifDiff);
            }
            // net = (Bill-nhif-deposits)+nhifDiff*-1;
            //jTextField18.setText(java.lang.String.valueOf((Bill-nhif-deposits)+nhifDiff*-1));
            //}
            java.sql.Statement pss111xx = connectDB.createStatement();
            java.sql.ResultSet rss111xx = pss111xx.executeQuery("select ROUND('" + nhifDiff + "',2)::numeric");
            while (rss111xx.next()) {
                nhifDiffTxt.setText(java.lang.String.valueOf(rss111xx.getDouble(1)));
            }
            java.sql.Statement pss111x = connectDB.createStatement();
            java.sql.ResultSet rss111x = pss111x.executeQuery("select ROUND('" + net + "',2)::numeric");
            while (rss111x.next()) {
                netBillValueTxt.setText(java.lang.String.valueOf(rss111x.getDouble(1)));
            }
        } catch (java.sql.SQLException sqlex) {
            javax.swing.JOptionPane.showMessageDialog(this, sqlex.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }        // TODO add your handling code here:
    }//GEN-LAST:event_nhifCategoryCmbxActionPerformed
    public java.lang.String getShiftNumber() {


        try {

            java.sql.Statement stmt = connectDB.createStatement();

            java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE cash_point = '" + System.getProperty("cashpoint") + "' AND user_name = current_user AND (status = 'Running' OR status = 'Suspended')");
            //java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE cash_point = '" + cashPoint + "' AND user_name = current_user AND (status = 'Running' OR status = 'Suspended')");

            while (rset.next()) {

                shift_no = rset.getString(1);

            }




        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        return shift_no;

    }

    public java.lang.String getCashPoint() {

        /*
         * try {
         *
         * java.sql.Statement stmtf = connectDB.createStatement();
         * java.sql.ResultSet rsetf = stmtf.executeQuery("select code from
         * ac_cash_points_setup where description = current_user"); while
         * (rsetf.next()) { cashPoint = rsetf.getObject(1).toString();
         *
         * }
         * } catch (java.sql.SQLException sqe) { sqe.printStackTrace();
         * System.out.println("select not successful"); }
         */
        try {

            java.sql.Statement stmt = connectDB.createStatement();

            java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE cash_point = '" + System.getProperty("cashpoint") + "' AND user_name = current_user AND (status = 'Running' OR status = 'Suspended')");
            //java.sql.ResultSet rset = stmt.executeQuery("SELECT cash_point FROM ac_shifts WHERE user_name = current_user AND (status = 'Running' OR status = 'Suspended')");

            while (rset.next()) {

                cash_no = rset.getString(1);

            }




        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        return cash_no;

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.afrisoftech.lib.DatePicker admissionDatePicker;
    private javax.swing.JTable billTable;
    private javax.swing.JTextField billTotalTxt;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private com.afrisoftech.lib.DatePicker checkoutDatePicker;
    private javax.swing.JTextField claimNumberTxt;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private com.afrisoftech.lib.DatePicker datePicker3;
    private javax.swing.JTextField daystoChargeTxt;
    private com.afrisoftech.lib.DatePicker dischargeDatePicker;
    private javax.swing.JTextField discountAmountTxt;
    private javax.swing.JButton dispose11;
    private javax.swing.JButton dispose12;
    private javax.swing.JButton finalizeInvoiceBtn;
    private javax.swing.JLabel invoiceNoLbl;
    private javax.swing.JTextField invoiceNoTxt;
    public static javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton31;
    public static javax.swing.JButton jButton4;
    private javax.swing.JButton jButton41;
    private javax.swing.JButton jButton42;
    private javax.swing.JButton jButton421;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton51;
    private javax.swing.JButton jButton52;
    private javax.swing.JButton jButton521;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton61;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel131;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel2122;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel641;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JDialog jSearchDialog11;
    private javax.swing.JDialog jSearchDialog13;
    private javax.swing.JDialog jSearchDialog2;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jSearchPanel11;
    private javax.swing.JPanel jSearchPanel13;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JPanel jSearchPanel21;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane11;
    private javax.swing.JScrollPane jSearchScrollPane13;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JScrollPane jSearchScrollPane21;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTable jSearchTable11;
    private javax.swing.JTable jSearchTable13;
    private javax.swing.JTable jSearchTable2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable12;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JTextField jTextField1111;
    private javax.swing.JTextField jTextField1113;
    private javax.swing.JTextField jTextField113;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField51;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField81;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JButton linkToReceiptsBtn;
    private javax.swing.JTextField netBillValueTxt;
    private javax.swing.JComboBox nhifCategoryCmbx;
    private javax.swing.JTextField nhifDiffTxt;
    private javax.swing.JRadioButton nhifRebateRbtn;
    private javax.swing.JTextField nhifRebateTxt;
    private javax.swing.JRadioButton noNHIFRebateRbtn;
    private javax.swing.JTextField patientNameTxt;
    private javax.swing.JTextField patientNumberTxt;
    private javax.swing.JTextField patientRefundTxt;
    private javax.swing.JDialog patientSearchDialog;
    private javax.swing.JTable patientSearchTable;
    private javax.swing.JTextField patientSearchTxt;
    private javax.swing.JTextField payModeTxt;
    private javax.swing.JTextField schemeCardNumberTxt;
    private javax.swing.JScrollPane schemeInvoicingJscrl;
    private javax.swing.JTable schemeInvoicingTable;
    private javax.swing.JTextField schemeMemberNumberTxt;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchButton1;
    private javax.swing.JButton searchButton2;
    private javax.swing.JTextField totalDepositsTxt;
    private javax.swing.JTextField visitIDTxt;
    // End of variables declaration//GEN-END:variables
}
