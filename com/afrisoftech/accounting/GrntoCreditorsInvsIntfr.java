/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */
package com.afrisoftech.accounting;

import com.afrisoftech.dbadmin.TableModel;
import static com.afrisoftech.hospinventory.Items2OrderIntfr.jComboBox1;
import static com.afrisoftech.hospital.HospitalMain.saccopn;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author root
 */
public class GrntoCreditorsInvsIntfr extends javax.swing.JInternalFrame {

    /**
     * Creates new form loanpymntintfr
     */
    javax.swing.table.TableModel tableModel = null;
    Date todayDate=new Date();
    double lpoAmount = 0.0;
    double WithHoldTaxAmount = 0.0;
    double TaxAmountRetained = 0.0;
    boolean controlFlag = true;
    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    int st_cardex_oid;
    Vector v = new Vector();
    private String transaction_no = null;
    private String withHeldaccountCode;
    private String RetentionaccountCode;
    private String withholdingname;
    public String invoice="";
    private int lastRow;
    public GrntoCreditorsInvsIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton51 = new javax.swing.JButton();
        jSearchDialog1 = new javax.swing.JDialog();
        jSearchPanel1 = new javax.swing.JPanel();
        jTextField1111 = new javax.swing.JTextField();
        jSearchScrollPane1 = new javax.swing.JScrollPane();
        jSearchTable1 = new com.afrisoftech.dbadmin.JTable();
        jButton511 = new javax.swing.JButton();
        lpolsoSearch = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        orderNumberTxt = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        grnDetailsTable = new com.afrisoftech.dbadmin.JTable();
        jButton52 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        grnsearchTxt = new javax.swing.JTextField();
        jSearchDialog4 = new javax.swing.JDialog();
        jSearchPanel5 = new javax.swing.JPanel();
        jTextField112 = new javax.swing.JTextField();
        jSearchScrollPane5 = new javax.swing.JScrollPane();
        jSearchTable4 = new com.afrisoftech.dbadmin.JTable();
        jButton45 = new javax.swing.JButton();
        jButton54 = new javax.swing.JButton();
        lposearchdialog = new javax.swing.JDialog();
        jSearchPanel3 = new javax.swing.JPanel();
        lpotxt = new javax.swing.JTextField();
        jSearchScrollPane3 = new javax.swing.JScrollPane();
        lpotable = new com.afrisoftech.dbadmin.JTable();
        jButton53 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        try {
            java.lang.Class.forName("org.postgresql.Driver");
        }catch (java.lang.ClassNotFoundException sl){
            System.out.println(sl.getMessage());
        }

        linkGRNToCreditorBtn = new javax.swing.JButton();
        clearFormBtn = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        grn2PayablesLinkingTable = new com.afrisoftech.dbadmin.JTable();
        jButton6 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        lpoAmountTxt = new javax.swing.JTextField();
        withHoldChk = new javax.swing.JCheckBox();
        withHoldTaxTxt = new javax.swing.JTextField();
        retentionAmountChk = new javax.swing.JCheckBox();
        retentionAmountTxt = new javax.swing.JTextField();
        taxPercentageTxt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        retentionPercentageTxt = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        netAmountPayable = new javax.swing.JTextField();
        retentionDateDue = new com.afrisoftech.lib.DatePicker();
        jLabel22 = new javax.swing.JLabel();
        jCheckBox2 = new javax.swing.JCheckBox();
        vatxt = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jPanel61 = new javax.swing.JPanel();
        dealerNameTxt = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        dealerNameTxt1 = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel23 = new javax.swing.JPanel();
        lpoNumberTxt = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        supplierNameTxt = new javax.swing.JTextField();
        invoiceDate = new com.afrisoftech.lib.DatePicker();
        jLabel9 = new javax.swing.JLabel();
        invoiceReceivedDatePicker = new com.afrisoftech.lib.DatePicker();
        jLabel17 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        invoiceNoTxt = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        linkGRNChk = new javax.swing.JCheckBox();
        jButton3 = new javax.swing.JButton();
        supplierCodeTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        totalGrnAmountTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        qtyTtField = new javax.swing.JTextField();
        returnDocumentBtn = new javax.swing.JButton();
        commentsTxt = new javax.swing.JTextField();

        jSearchDialog.setModal(true);
        jSearchDialog.setUndecorated(true);
        jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel.setLayout(new java.awt.GridBagLayout());

        jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel.add(jTextField111, gridBagConstraints);

        jSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTableMouseClicked(evt);
            }
        });
        jSearchScrollPane.setViewportView(jSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

        jButton51.setText("Dispose");
        jButton51.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton51ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel.add(jButton51, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

        jSearchDialog1.setModal(true);
        jSearchDialog1.setUndecorated(true);
        jSearchDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel1.setLayout(new java.awt.GridBagLayout());

        jTextField1111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel1.add(jTextField1111, gridBagConstraints);

        jSearchTable1.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable1.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable1MouseClicked(evt);
            }
        });
        jSearchScrollPane1.setViewportView(jSearchTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel1.add(jSearchScrollPane1, gridBagConstraints);

        jButton511.setText("Dispose");
        jButton511.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton511ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel1.add(jButton511, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog1.getContentPane().add(jSearchPanel1, gridBagConstraints);

        lpolsoSearch.setLocationByPlatform(true);
        lpolsoSearch.setModal(true);
        lpolsoSearch.setUndecorated(true);
        lpolsoSearch.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        orderNumberTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                orderNumberTxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel2.add(orderNumberTxt, gridBagConstraints);

        grnDetailsTable.setToolTipText("Click on the target row to select the patient from the search.");
        grnDetailsTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        grnDetailsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                grnDetailsTableMouseClicked(evt);
            }
        });
        jSearchScrollPane2.setViewportView(grnDetailsTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

        jButton52.setText("Close Dialog");
        jButton52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton52, gridBagConstraints);

        jLabel4.setText("Total Amount for Goods Receipt Note (GRN)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jLabel4, gridBagConstraints);

        grnsearchTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(grnsearchTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        lpolsoSearch.getContentPane().add(jSearchPanel2, gridBagConstraints);

        jSearchDialog4.setModal(true);
        jSearchDialog4.setUndecorated(true);
        jSearchDialog4.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel5.setLayout(new java.awt.GridBagLayout());

        jTextField112.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField112CaretUpdate(evt);
            }
        });
        jTextField112.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField112ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel5.add(jTextField112, gridBagConstraints);

        jSearchTable4.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable4.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable4MouseClicked(evt);
            }
        });
        jSearchScrollPane5.setViewportView(jSearchTable4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel5.add(jSearchScrollPane5, gridBagConstraints);

        jButton45.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel5.add(jButton45, gridBagConstraints);

        jButton54.setText("Dispose");
        jButton54.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton54ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel5.add(jButton54, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog4.getContentPane().add(jSearchPanel5, gridBagConstraints);

        lposearchdialog.setModal(true);
        lposearchdialog.setUndecorated(true);
        lposearchdialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel3.setLayout(new java.awt.GridBagLayout());

        lpotxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                lpotxtCaretUpdate(evt);
            }
        });
        lpotxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lpotxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel3.add(lpotxt, gridBagConstraints);

        jSearchScrollPane3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchScrollPane3MouseClicked(evt);
            }
        });

        lpotable.setToolTipText("Click on the target row to select the patient from the search.");
        lpotable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        lpotable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lpotableMouseClicked(evt);
            }
        });
        jSearchScrollPane3.setViewportView(lpotable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel3.add(jSearchScrollPane3, gridBagConstraints);

        jButton53.setText("Dispose");
        jButton53.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton53ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel3.add(jButton53, gridBagConstraints);

        jButton5.setText("Ok");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        jSearchPanel3.add(jButton5, gridBagConstraints);

        jTextField1.setEditable(false);
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 2.0;
        jSearchPanel3.add(jTextField1, gridBagConstraints);

        jLabel18.setText("Total");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weighty = 2.0;
        jSearchPanel3.add(jLabel18, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        lposearchdialog.getContentPane().add(jSearchPanel3, gridBagConstraints);

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Examination of Creditors Invoices");
        setFrameIcon(null);
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        linkGRNToCreditorBtn.setMnemonic('O');
        linkGRNToCreditorBtn.setText("Link GRN to Payables");
        linkGRNToCreditorBtn.setToolTipText("Click here enter data");
        linkGRNToCreditorBtn.setEnabled(false);
        linkGRNToCreditorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkGRNToCreditorBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(linkGRNToCreditorBtn, gridBagConstraints);

        clearFormBtn.setMnemonic('l');
        clearFormBtn.setText("Clear");
        clearFormBtn.setToolTipText("Click here to clear textfields");
        clearFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(clearFormBtn, gridBagConstraints);

        jButton4.setMnemonic('C');
        jButton4.setText("Close");
        jButton4.setToolTipText("Click here to close window");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jSeparator1, gridBagConstraints);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(jLabel7, gridBagConstraints);

        jTextField6.setEditable(false);
        jTextField6.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField6.setPreferredSize(new java.awt.Dimension(0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(jTextField6, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel21.setLayout(new java.awt.GridBagLayout());

        grn2PayablesLinkingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Date", "Lpo No", "Delivey No", "Invoice No.", "Reference", "Price/Item", "QTY", "GRN Amt", "Amt To Transfer", "Link"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        grn2PayablesLinkingTable.setGridColor(new java.awt.Color(204, 204, 255));
        javax.swing.table.TableColumn dateEditor = grn2PayablesLinkingTable.getColumnModel().getColumn(0);
        //com.afrisoftech.lib.DateCellEditor dateCellEditor = new com.afrisoftech.lib.DateCellEditor(new org.jdesktop.swingx.JXDatePicker(), grn2PayablesLinkingTable);
        com.afrisoftech.lib.DateCellEditor dateCellEditor = new com.afrisoftech.lib.DateCellEditor(new com.afrisoftech.lib.DatePicker(), grn2PayablesLinkingTable);
        dateEditor.setCellEditor(dateCellEditor);
        //jTable1.setRowHeight(30);
        javax.swing.table.DefaultTableCellRenderer cellRenderer = new javax.swing.table.DefaultTableCellRenderer();
        cellRenderer.setHorizontalAlignment(cellRenderer.TRAILING);
        dateEditor.setCellRenderer(cellRenderer);

        javax.swing.table.TableColumn ccDateEditorw = grn2PayablesLinkingTable.getColumnModel().getColumn(7);
        com.afrisoftech.lib.DateCellEditor ccDateCellEditorw = new com.afrisoftech.lib.DateCellEditor(new com.afrisoftech.lib.DatePicker(), grn2PayablesLinkingTable);
        ccDateEditorw.setCellEditor(ccDateCellEditorw);
        //jTable1.setRowHeight(30);
        //this.procurementPlanTbl.getColumnModel().getColumn(i).setCellEditor(new javax.swing.DefaultCellEditor((javax.swing.JComboBox)new com.afrisoftech.lib.DatePicker()));
        grn2PayablesLinkingTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                grn2PayablesLinkingTableMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                grn2PayablesLinkingTableMouseReleased(evt);
            }
        });
        grn2PayablesLinkingTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                grn2PayablesLinkingTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(grn2PayablesLinkingTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel21.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        jPanel2.add(jPanel21, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 100.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jPanel2, gridBagConstraints);

        jButton6.setText("Cancel All");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jButton6, gridBagConstraints);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.blue, java.awt.Color.magenta, null, null));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Tax Pane", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 1, 11), new java.awt.Color(153, 0, 0))); // NOI18N
        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel5.setText("LPO Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jLabel5, gridBagConstraints);

        lpoAmountTxt.setEditable(false);
        lpoAmountTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        lpoAmountTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(lpoAmountTxt, gridBagConstraints);

        withHoldChk.setText("Withhold Tax");
        withHoldChk.setEnabled(false);
        withHoldChk.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        withHoldChk.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        withHoldChk.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                withHoldChkItemStateChanged(evt);
            }
        });
        withHoldChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                withHoldChkActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 15);
        jPanel3.add(withHoldChk, gridBagConstraints);

        withHoldTaxTxt.setEditable(false);
        withHoldTaxTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        withHoldTaxTxt.setText("0.00");
        withHoldTaxTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                withHoldTaxTxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(withHoldTaxTxt, gridBagConstraints);

        retentionAmountChk.setText("Retain Amount");
        retentionAmountChk.setEnabled(false);
        retentionAmountChk.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        retentionAmountChk.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        retentionAmountChk.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                retentionAmountChkItemStateChanged(evt);
            }
        });
        retentionAmountChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retentionAmountChkActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 25);
        jPanel3.add(retentionAmountChk, gridBagConstraints);

        retentionAmountTxt.setEditable(false);
        retentionAmountTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        retentionAmountTxt.setText("0.00");
        retentionAmountTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                retentionAmountTxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(retentionAmountTxt, gridBagConstraints);

        taxPercentageTxt.setEditable(false);
        taxPercentageTxt.setText(" 0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(taxPercentageTxt, gridBagConstraints);

        jLabel8.setText("%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jLabel8, gridBagConstraints);

        retentionPercentageTxt.setEditable(false);
        retentionPercentageTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(retentionPercentageTxt, gridBagConstraints);

        jLabel12.setText("%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jLabel12, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 0.1;
        jPanel3.add(jLabel13, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 0.1;
        jPanel3.add(jLabel14, gridBagConstraints);

        jLabel15.setText("Net Amount");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jLabel15, gridBagConstraints);

        netAmountPayable.setEditable(false);
        netAmountPayable.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        netAmountPayable.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(netAmountPayable, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(retentionDateDue, gridBagConstraints);

        jLabel22.setText("VAT PAYEE");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 25);
        jPanel3.add(jLabel22, gridBagConstraints);

        jCheckBox2.setText("V.A.T Tax");
        jCheckBox2.setEnabled(false);
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jCheckBox2, gridBagConstraints);

        vatxt.setEditable(false);
        vatxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        vatxt.setText("0.00");
        vatxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                vatxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(vatxt, gridBagConstraints);

        jTextField2.setEditable(false);
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField2.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jTextField2, gridBagConstraints);

        jLabel23.setText("%");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 7;
        jPanel3.add(jLabel23, gridBagConstraints);

        jPanel61.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel61.setMinimumSize(new java.awt.Dimension(84, 25));
        jPanel61.setPreferredSize(new java.awt.Dimension(59, 25));
        jPanel61.setLayout(new java.awt.GridBagLayout());

        dealerNameTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel61.add(dealerNameTxt, gridBagConstraints);

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton.setToolTipText("Search patient name");
        searchButton.setEnabled(false);
        searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        jPanel61.add(searchButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jPanel61, gridBagConstraints);

        jLabel16.setText("Withholding Tax Payee");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jLabel16, gridBagConstraints);

        dealerNameTxt1.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(dealerNameTxt1, gridBagConstraints);

        jLabel24.setText("Retention Due Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 25);
        jPanel3.add(jLabel24, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jPanel3, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText(" Supplier");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel4.add(jLabel1, gridBagConstraints);

        jLabel10.setText("Invoice No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel4.add(jLabel10, gridBagConstraints);

        jPanel23.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel23.setLayout(new java.awt.GridBagLayout());

        lpoNumberTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel23.add(lpoNumberTxt, gridBagConstraints);

        searchButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton1.setToolTipText("Search");
        searchButton1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton1.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton1.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel23.add(searchButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(jPanel23, gridBagConstraints);

        jLabel3.setText("Search by GRN/LPO/LSO Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel4.add(jLabel3, gridBagConstraints);

        supplierNameTxt.setEditable(false);
        supplierNameTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierNameTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(supplierNameTxt, gridBagConstraints);

        invoiceDate.setDate(null);
        invoiceDate.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel4.add(invoiceDate, gridBagConstraints);

        jLabel9.setText("Invoice Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel4.add(jLabel9, gridBagConstraints);

        invoiceReceivedDatePicker.setForeground(new java.awt.Color(255, 255, 255));
        invoiceReceivedDatePicker.setDate(null);
        invoiceReceivedDatePicker.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel4.add(invoiceReceivedDatePicker, gridBagConstraints);

        jLabel17.setText("Date Invoice Received at Expenditure");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
        jPanel4.add(jLabel17, gridBagConstraints);

        jPanel6.setLayout(new java.awt.GridBagLayout());

        invoiceNoTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel6.add(invoiceNoTxt, gridBagConstraints);

        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel6.add(searchBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel4.add(jPanel6, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 3.0;
        jPanel1.add(jPanel4, gridBagConstraints);

        jPanel5.setLayout(new java.awt.GridBagLayout());

        jButton2.setText("Acceptance Document");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jButton2, gridBagConstraints);

        jButton1.setText("GRN");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jButton1, gridBagConstraints);

        linkGRNChk.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        linkGRNChk.setForeground(new java.awt.Color(204, 0, 0));
        linkGRNChk.setText("Link GRN");
        linkGRNChk.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                linkGRNChkItemStateChanged(evt);
            }
        });
        linkGRNChk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linkGRNChkActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(linkGRNChk, gridBagConstraints);

        jButton3.setText("Credit Note");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        jPanel5.add(jButton3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel1.add(jPanel5, gridBagConstraints);

        supplierCodeTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(supplierCodeTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jPanel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 500.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jLabel2, gridBagConstraints);

        jLabel6.setText("Total Amount Payable");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        getContentPane().add(jLabel6, gridBagConstraints);

        totalGrnAmountTxt.setEditable(false);
        totalGrnAmountTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        totalGrnAmountTxt.setForeground(new java.awt.Color(204, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(totalGrnAmountTxt, gridBagConstraints);

        jLabel11.setText("QTY Total");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jLabel11, gridBagConstraints);

        qtyTtField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(qtyTtField, gridBagConstraints);

        returnDocumentBtn.setText("View Pending GRNs");
        returnDocumentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnDocumentBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(returnDocumentBtn, gridBagConstraints);

        commentsTxt.setBorder(javax.swing.BorderFactory.createTitledBorder("Comments to recipient"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(commentsTxt, gridBagConstraints);

        setBounds(0, 0, 734, 436);
    }// </editor-fold>//GEN-END:initComponents

    private void grn2PayablesLinkingTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_grn2PayablesLinkingTableKeyReleased
        /*     double resFloat = 0.00;
         //  double totalSum = 0.00;
         double floatTotal = java.lang.Double.parseDouble(jTextField1.getText());
    
         if (jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 4) != null) {
         double amtToalloc = java.lang.Double.parseDouble(jTextField2.getText());
         double floatCol2 = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString());
    
         double floatCol3 = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 4).toString());
         double balance = java.lang.Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString());
    
    
         if (floatCol3 <= amtToalloc && amtToalloc >= 0){
    
         double resVal =floatCol2 - floatCol3;
    
    
         jTable1.setValueAt(new java.lang.Float(resVal), jTable1.getSelectedRow(), 5);
         } else
         if (floatCol3 > amtToalloc && amtToalloc > 0){
         javax.swing.JOptionPane.showMessageDialog(this,"You cannot allocate amount higher than the amount to allocate","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
         }
    
    
    
         this.tableModelTableChanged();
         }else
         if (jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 4) == null) {
         jTable1.setValueAt(new java.lang.Double(jTable1.getValueAt(jTable1.getSelectedRow(), 3).toString()), jTable1.getSelectedRow(), 5);
         this.tableModelTableChanged();
         }
         */
        // Add your handling code here:
    }//GEN-LAST:event_grn2PayablesLinkingTableKeyReleased

    private void jButton511ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton511ActionPerformed
        jSearchDialog1.dispose();  // Add your handling code here:
    }//GEN-LAST:event_jButton511ActionPerformed
    private void clearTaxPanel(){
        lpoAmountTxt.setText("0.00");
        withHoldTaxTxt.setText("0.00");
        retentionAmountTxt.setText("0.00");
        retentionAmountChk.setSelected(false);
        jCheckBox2.setSelected(false);
        withHoldChk.setSelected(false);
        netAmountPayable.setText("0.00");
        retentionPercentageTxt.setText("0.00");
        taxPercentageTxt.setText("0.00");
        vatxt.setText("0.00");
        dealerNameTxt1.setText("");
                dealerNameTxt.setText("");
    }
    private void jSearchTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable1MouseClicked
        /*      jTextField3.setText("00");
         jTextField1.setText("0.00");
         jTextField2.setText("0.00");
         jTextField361.setText(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 0).toString());
         jTextField1.setText(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 1).toString());
         jTextField2.setText(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 1).toString());
         jSearchDialog1.dispose();
   
         try {
         java.sql.Statement stmt = connectDB.createStatement();
         java.sql.Statement stmt1 = connectDB.createStatement();
         java.sql.ResultSet rset = stmt.executeQuery("select rc.cheque_no,rc.account_no,rc.account_name from ac_accounts_payable db,ac_cash_book rc where  db.voucher_no = '"+this.jTextField361.getText()+"' and db.voucher_no = rc.voucher_no");
         //  java.sql.ResultSet rset1 = stmt1.executeQuery("select count(debit) from ac_cash_collection where cash_point ='"+jComboBox2.getSelectedItem()+"' and shift_no = '"+jTextField9.getText()+"'");
   
   
         while (rset.next()){
   
         jTextField3.setText(rset.getObject(1).toString());
         //  jTextField1.setText(rset.getObject(2).toString());
         }
   
         } catch(java.sql.SQLException sqlExec) {
   
         javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
   
         }
         jSearchDialog1.dispose();
         */
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable1MouseClicked

    private void jTextField1111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1111CaretUpdate
        jSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select voucher_no,numeric_uminus(balance) as balance from ac_accounts_payable where dealer ilike '" + supplierNameTxt.getText() + "' and balance < 0 and voucher_no ILIKE '" + jTextField1111.getText().toString() + "%'"));

        /* try {
         // searchRowSet.execute("select scheme_manager as scheme from ac_schemes");
        
         searchRowSet1.execute("select voucher_no,numeric_uminus(balance) as balance from ac_accounts_payable where dealer ilike '"+jTextField36.getText()+"' and balance < 0 and voucher_no ILIKE '"+jTextField1111.getText().toString()+"%'");
         //   searchRowSet.execute();
         //     searchRowSet.execute("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register where first_name '~ '~"+jTextField11.getText()+"' order by name");
        
         jSearchTable1.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet1, new org.netbeans.lib.sql.models.TableModel.Column[] {
         new org.netbeans.lib.sql.models.TableModel.Column("voucher_no", "Voucher No.", false),
         new org.netbeans.lib.sql.models.TableModel.Column("balance", "Amount", false)
         // new org.netbeans.lib.sql.models.TableModel.Column("payer_name", "Payer", false)
         }));
         */
        jSearchTable1.setShowHorizontalLines(false);
        jSearchScrollPane1.setViewportView(jSearchTable1);


        /*  } catch(java.sql.SQLException sqlExec) {
       
         javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
       
         }*/
        // Add your handling code here:
    }//GEN-LAST:event_jTextField1111CaretUpdate

    private void grn2PayablesLinkingTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grn2PayablesLinkingTableMouseClicked
        if (grn2PayablesLinkingTable.getSelectedColumn() == 9) // jCheckBox2.setSelected(false);
        {
            linkGRNToCreditorBtn.setEnabled(false);
        }
        {
            Double totalAmnt = 0.0, qtytotal = 0.0;
            if (Boolean.valueOf(grn2PayablesLinkingTable.getModel().getValueAt(grn2PayablesLinkingTable.getSelectedRow(), 9).toString()) == java.lang.Boolean.TRUE) {
                totalAmnt = 0.0;
                qtytotal = 0.0;
                if (v.contains(grn2PayablesLinkingTable.getSelectedRow())) {
                    //  v.remove(grn2PayablesLinkingTable.getSelectedRow());
                } else if (!v.contains(grn2PayablesLinkingTable.getSelectedRow())) {
                    v.add(grn2PayablesLinkingTable.getSelectedRow());
                }
            } else if (Boolean.valueOf(grn2PayablesLinkingTable.getModel().getValueAt(grn2PayablesLinkingTable.getSelectedRow(), 9).toString()) == java.lang.Boolean.FALSE) {
                totalAmnt = 0.0;
                qtytotal = 0.0;
                v.remove(grn2PayablesLinkingTable.getSelectedRow());
            }

            for (int i = 0; i < v.size(); i++) {
                Double total = Double.parseDouble(grn2PayablesLinkingTable.getModel().getValueAt(Integer.parseInt(v.elementAt(i).toString()), 7).toString());
                totalAmnt = totalAmnt + total;
                Double totals = Double.parseDouble(grn2PayablesLinkingTable.getModel().getValueAt(Integer.parseInt(v.elementAt(i).toString()), 6).toString());
                qtytotal = qtytotal + totals;

            }

            System.out.println(totalAmnt);
            totalGrnAmountTxt.setText(totalAmnt.toString());
            qtyTtField.setText(qtytotal.toString());

        }


    }//GEN-LAST:event_grn2PayablesLinkingTableMouseClicked

    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        supplierCodeTxt.setText("");
        //  jTextField2.setText("");
        //     jTextField3.setText("");
        for (int k = 0; k < grn2PayablesLinkingTable.getRowCount(); k++) {
            for (int r = 0; r < grn2PayablesLinkingTable.getColumnCount(); r++) {
                grn2PayablesLinkingTable.getModel().setValueAt(null, k, r);
            }
        }
        this.supplierNameTxt.setText("");
        linkGRNToCreditorBtn.setEnabled(true);

        supplierNameTxt.setText(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0).toString());
        supplierCodeTxt.setText(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1).toString());
        jSearchDialog.dispose();


    }//GEN-LAST:event_jSearchTableMouseClicked

    private void jButton51ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton51ActionPerformed
        jSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton51ActionPerformed

    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate
        if (jTextField111.getCaretPosition() < 3) {

            System.out.println("Nothing");
        } else {
            jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select trim(supplier_name) as scheme ,code from st_suppliers where supplier_name ILIKE '" + jTextField111.getText().toString() + "%'"));

            jSearchTable.setShowHorizontalLines(false);
            jSearchScrollPane.setViewportView(jSearchTable);

        }           // Add your handling code here:
    }//GEN-LAST:event_jTextField111CaretUpdate
    private void searchButtonClicked() {

        System.out.println("Showing dialog");

        java.awt.Point point = this.supplierNameTxt.getLocationOnScreen();

        jSearchDialog.setSize(600, 200);

        jSearchDialog.setLocation(point);

        jSearchDialog.setVisible(true);

    }
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.setVisible(false);   // Add your handling code here:

    }//GEN-LAST:event_jButton4ActionPerformed

    private void clearFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFormBtnActionPerformed

        v.removeAllElements();
        invoiceNoTxt.setText("");
        lpoNumberTxt.setText("");
        totalGrnAmountTxt.setText("");
        supplierCodeTxt.setText("");
        //jTextField2.setText("");
        //   jTextField3.setText("");
        for (int k = 0; k < grn2PayablesLinkingTable.getRowCount(); k++) {
            for (int r = 0; r < grn2PayablesLinkingTable.getColumnCount(); r++) {
                grn2PayablesLinkingTable.getModel().setValueAt(null, k, r);
            }
        }
        this.supplierNameTxt.setText("");
        linkGRNToCreditorBtn.setEnabled(true);
        // Add your handling code here:
    }//GEN-LAST:event_clearFormBtnActionPerformed

    private void linkGRNToCreditorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkGRNToCreditorBtnActionPerformed
 if (invoiceNoTxt.getText().length() > 0) {

            Boolean errorInvoice=false;
            java.util.Date periodFrom = null;
            java.util.Date periodTo = null;

            java.sql.Savepoint registerSavePoint = null;
            try {
                connectDB.setAutoCommit(false);
                registerSavePoint = connectDB.setSavepoint("registration");
            } catch (java.sql.SQLException ex) {
                ex.printStackTrace();
            }

            try {
                 java.sql.Statement stmtf2 = connectDB.createStatement();
                java.sql.ResultSet rsetf2 = stmtf2.executeQuery("select * from ac_accounts_payable where dealer='"+supplierNameTxt.getText()+"' and invoice_no='"+invoiceNoTxt.getText()+"'");
                while (rsetf2.next()) {
                    errorInvoice=true;
                }
                
                java.sql.Statement stmtf = connectDB.createStatement();
                java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + invoiceDate.getDate() + "' BETWEEN period_from AND period_to");
                while (rsetf.next()) {
                    periodFrom = rsetf.getDate(1);
                    periodTo = rsetf.getDate(2);
                }
                if (invoiceReceivedDatePicker.getDate()==null) {
                    javax.swing.JOptionPane.showMessageDialog(this, "You cannot save without date".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                }else
//                if (invoiceReceivedDatePicker.getDate().before(periodFrom) || invoiceReceivedDatePicker.getDate().after(periodTo)) {
//                    javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
//
//                }
                if (invoiceDate.getDate()==null) {
                    javax.swing.JOptionPane.showMessageDialog(this, "You cannot save without date".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                }
                    
                else if (errorInvoice==true) {
             javax.swing.JOptionPane.showMessageDialog(this, "The invoice is already in the system".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

            }  else {
                    if (grn2PayablesLinkingTable.isEditing()) {
                        grn2PayablesLinkingTable.getCellEditor().stopCellEditing();
                    }
                    double quantity = 0.00;
                    double price = 0.00;
                    double pkge = 1.00;
                    double qty = 0.00;
                    double uprice = 0.00;
                    double rates = 0.00;
                    String Stock = null;
                    String actCode = null;
                    String accountCode = null;
                    String glType = null;
                    String transNo = null;
                    String accountCoded = null;
                    String glTyped = null;
                    String VouchNo = null;
                    String StocktransNo = null;
                    int invoices = 0;
                    String supCode = null;
                    String Purchases = null;
                    String cosCode = null;
                    String CostofSale = null;

                    linkGRNToCreditorBtn.setEnabled(false);

                    java.util.Calendar calendar = java.util.Calendar.getInstance();

                    long dateNow = calendar.getTimeInMillis();

                    java.sql.Date datenowSql = new java.sql.Date(dateNow);

                    System.out.println(datenowSql.toString());
                    // try{
                    int j = grn2PayablesLinkingTable.getRowCount();
                    String Alloc = null;
                    String User = null;

                    java.sql.Statement pst1i = connectDB.createStatement();
                    java.sql.ResultSet rs1i = pst1i.executeQuery("select code,activity from pb_activity where activity_category ILIKE 'GRN'");
                    while (rs1i.next()) {
                        accountCoded = rs1i.getObject(1).toString();
                        glTyped = rs1i.getObject(2).toString();
                    }

                    java.sql.Statement pst1 = connectDB.createStatement();
                    java.sql.ResultSet rs1 = pst1.executeQuery("select code,activity from pb_activity where activity_category ILIKE 'CP'");
                    while (rs1.next()) {
                        accountCode = rs1.getObject(1).toString();
                        glType = rs1.getObject(2).toString();
                    }
                    java.sql.Statement pss1 = connectDB.createStatement();
                    java.sql.ResultSet rsts = pss1.executeQuery("select current_user");
                    while (rsts.next()) {
                        User = rsts.getObject(1).toString();
                    }

                    java.sql.Statement ps = connectDB.createStatement();
                    java.sql.ResultSet rst = ps.executeQuery("select nextval('transaction_no_seq')");
                    while (rst.next()) {
                        rst.getObject(1).toString();

                        transNo = rst.getObject(1).toString();
                    }
                    String Supplier = null;
                    java.sql.Statement pstmtSupplier = connectDB.createStatement();
                    java.sql.ResultSet rstSupplier = pstmtSupplier.executeQuery("select code from st_suppliers where gl_code = '" + accountCode + "' and supplier_name='" + supplierNameTxt.getText().trim() + "'");
                    while (rstSupplier.next()) {
                        Supplier = rstSupplier.getObject(1).toString();
                    }

                    java.sql.Date invRecDate = null,invDate = null;
                    Object newdate = datenowSql;
                    for (int i = 0; i < 1; i++) {
                        if (grn2PayablesLinkingTable.getModel().getValueAt(i, 8) != null) {
                            if (grn2PayablesLinkingTable.getModel().getValueAt(i, 9) != null) {

                                if (Boolean.valueOf(grn2PayablesLinkingTable.getModel().getValueAt(i, 9).toString()) == java.lang.Boolean.TRUE) {
                                    invRecDate = com.afrisoftech.lib.SQLDateFormat.getSQLDate(invoiceReceivedDatePicker.getDate());
                                    invDate = com.afrisoftech.lib.SQLDateFormat.getSQLDate(invoiceDate.getDate());
                                    java.sql.PreparedStatement pstmt1q1 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?,"
                                            + " ?, ?, ?, ?, ?,"
                                            + " ?, ?, ?, ?, ?,"
                                            + " ?, ?, now()::date, ?, ?,"
                                            + "?,?,?,?,?,?)");
                                    pstmt1q1.setObject(1, accountCoded);
                                    pstmt1q1.setString(2, glTyped);
                                    pstmt1q1.setString(3, "");
                                    pstmt1q1.setString(4, supplierNameTxt.getText());
                                    pstmt1q1.setObject(6, "");
                                    pstmt1q1.setString(5, "Medical Supplies");
                                    pstmt1q1.setString(7, Supplier);
                                    pstmt1q1.setString(8, "");
                                    pstmt1q1.setString(9, "");
                                    pstmt1q1.setString(10, "");
                                    pstmt1q1.setString(11, grn2PayablesLinkingTable.getValueAt(i, 1).toString());
                                    pstmt1q1.setString(12, invoiceNoTxt.getText());
                                    pstmt1q1.setString(13, "");
                                    pstmt1q1.setString(14, "Medical Supplies");
                                    pstmt1q1.setString(15, "Stock Delivery");
                                    pstmt1q1.setDouble(17, 0.00);
                                    pstmt1q1.setDouble(16, java.lang.Double.valueOf(totalGrnAmountTxt.getText().replace(",", "")));
                                  //  pstmt1q1.setDate(18, invDate);
                                    pstmt1q1.setString(18, transNo);
                                    pstmt1q1.setBoolean(19, false);
                                    pstmt1q1.setBoolean(20, true);
                                    pstmt1q1.setBoolean(21, false);
                                    pstmt1q1.setString(22, User);
                                    pstmt1q1.setString(23, "");
                                    pstmt1q1.setString(24, "");
                                    pstmt1q1.setTimestamp(25, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                    pstmt1q1.executeUpdate();

                                    java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into ac_accounts_payable values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                    pstmt1.setObject(1, accountCode);
                                    pstmt1.setString(2, supplierNameTxt.getText().toString());
                                    pstmt1.setString(3, "Stock Supplies");
                                    pstmt1.setString(4, "");
                                    pstmt1.setString(5, "");
                                    if (commentsTxt.getText().equalsIgnoreCase("") || commentsTxt.getText() == null) {
                                        pstmt1.setString(6, "Supplies");
                                    } else {
                                        pstmt1.setString(6, commentsTxt.getText());
                                    }

                                    pstmt1.setString(7, "");
                                    pstmt1.setString(8, "");
                                    pstmt1.setString(9, "");
                                    pstmt1.setString(10, "");
                                    pstmt1.setString(11, transNo);
//                                    if(lpoNumberTxt.getText().contains("DIR_PU")){
//                                       pstmt1.setString(12, "Raise Invoice"); 
//                                    }else{
                                    pstmt1.setString(12, "Stock Delivery");
//                                    }

                                    pstmt1.setDouble(13, 0.00);
                                    
                                    pstmt1.setDouble(25, java.lang.Double.valueOf(totalGrnAmountTxt.getText().replace(",", "")));
                                    pstmt1.setDouble(14, java.lang.Double.valueOf(totalGrnAmountTxt.getText().replace(",", "")));
                                    
                                    pstmt1.setDate(15, datenowSql);
                                    pstmt1.setObject(16, invoiceNoTxt.getText());
                                    pstmt1.setString(17, glType);
                                    pstmt1.setBoolean(18, false);
                                    pstmt1.setBoolean(19, false);
                                    pstmt1.setString(20, User);
                                    pstmt1.setString(21, "");
                                    pstmt1.setObject(22, invDate);
                                    pstmt1.setObject(23, invRecDate);
                                    pstmt1.setDouble(24, 0.00);

                                    pstmt1.setDouble(26, 0.00);
                                    pstmt1.setDate(27, null);
                                    pstmt1.setObject(28, java.lang.Double.valueOf(retentionAmountTxt.getText().toString()));
                                    pstmt1.setObject(29, java.lang.Double.valueOf(withHoldTaxTxt.getText().toString()));
                                    pstmt1.setDouble(30, 0.00);
                                    pstmt1.setDouble(31, 0.00);
                                    pstmt1.setString(32, grn2PayablesLinkingTable.getValueAt(i, 1).toString());
                                    pstmt1.setBoolean(33, false);
                                    pstmt1.executeUpdate();

                                    if (java.lang.Double.valueOf(netAmountPayable.getText().toString().replace(",","")) > 0) {
                                        if(java.lang.Double.valueOf(retentionAmountTxt.getText())>0){
                                        
                                        
                                    java.sql.PreparedStatement pstmt12 = connectDB.prepareStatement("insert into ac_accounts_payable values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                    pstmt12.setObject(1, accountCode);
                                    pstmt12.setString(2, supplierNameTxt.getText().toString());
                                    pstmt12.setString(3, "Stock Supplies");
                                    pstmt12.setString(4, "");
                                    pstmt12.setString(5, "");
                                    pstmt12.setString(6, "\nRetention - invoice no:"+invoiceNoTxt.getText());
                                    pstmt12.setString(7, "");
                                    pstmt12.setString(8, "");
                                    pstmt12.setString(9, "");
                                    pstmt12.setString(10, "");
                                    pstmt12.setString(11, transNo);
//                                    if(lpoNumberTxt.getText().contains("DIR_PU")){
//                                       pstmt1.setString(12, "Raise Invoice"); 
//                                    }else{
                                    pstmt12.setString(12, "Retention");
//                                    }

                                    
                                    
                                   pstmt12.setDouble(13, java.lang.Double.valueOf(retentionAmountTxt.getText().replace(",", "")));
                                        pstmt12.setDouble(14, 0.00);
                                        pstmt12.setDouble(25, java.lang.Double.valueOf(retentionAmountTxt.getText().replace(",", "")));
                                       
                                    pstmt12.setDate(15, datenowSql);
                                    pstmt12.setObject(16, invoiceNoTxt.getText());
                                    pstmt12.setString(17, glType);
                                    pstmt12.setBoolean(18, false);
                                    pstmt12.setBoolean(19, false);
                                    pstmt12.setString(20, User);
                                    pstmt12.setString(21, "");
                                    pstmt12.setObject(22, invDate);
                                    pstmt12.setObject(23, invRecDate);
                                    pstmt12.setDouble(24, java.lang.Double.valueOf(vatxt.getText().replace(",", "")));

                                    pstmt12.setDouble(26, java.lang.Double.valueOf(vatxt.getText().replace(",", "")));
                                    pstmt12.setDate(27, null);
                                    pstmt12.setObject(28, java.lang.Double.valueOf(retentionAmountTxt.getText().toString()));
                                    pstmt12.setObject(29, java.lang.Double.valueOf(withHoldTaxTxt.getText().toString()));
                                    
//                                    pstmt1.setDouble(28, 0.00);
//                                    pstmt1.setDouble(29, 0.00);
                                    pstmt12.setDouble(30, 0.00);
                                    pstmt12.setDouble(31, 0.00);
                                    pstmt12.setString(32, grn2PayablesLinkingTable.getValueAt(i, 1).toString());
                                    pstmt12.setBoolean(33, false);
                                    pstmt12.executeUpdate();
                                        
                                        //hgjik
                                    java.sql.PreparedStatement pstmtRet = connectDB.prepareStatement("insert into ac_accounts_payable values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                        pstmtRet.setObject(1, accountCode);
                                        pstmtRet.setString(2, supplierNameTxt.getText().toString());
                                        pstmtRet.setString(3, "Stock Supplies");
                                        pstmtRet.setString(4, "");
                                        pstmtRet.setString(5, "");
                                         pstmtRet.setString(6, "\nRetention - invoice no:"+invoiceNoTxt.getText());
                                       

                                        pstmtRet.setString(7, "");
                                        pstmtRet.setString(8, "");
                                        pstmtRet.setString(9, "");
                                        pstmtRet.setString(10, "");
                                        pstmtRet.setString(11, transNo);

                                        pstmtRet.setString(12, "Raise Retention");

                                        pstmtRet.setDouble(14, java.lang.Double.valueOf(retentionAmountTxt.getText().replace(",", "")));
                                        pstmtRet.setDouble(13, 0.00);
                                        pstmtRet.setDouble(25, java.lang.Double.valueOf(retentionAmountTxt.getText().replace(",", "")));
                                       
                                        pstmtRet.setDate(15, datenowSql);
                                        pstmtRet.setObject(16, "RT:"+invoiceNoTxt.getText());
                                        pstmtRet.setString(17, glType);
                                        pstmtRet.setBoolean(18, false);
                                        pstmtRet.setBoolean(19, false);
                                        pstmtRet.setString(20, User);
                                        pstmtRet.setString(21, "");
                                        pstmtRet.setObject(22, invDate);
                                        pstmtRet.setObject(23, invRecDate);
                                        pstmtRet.setDouble(24, 0.00);

                                        pstmtRet.setDouble(26, 0.00);
                                        pstmtRet.setDate(27, com.afrisoftech.lib.SQLDateFormat.getSQLDate(retentionDateDue.getDate()));
                                        pstmtRet.setDouble(28, 0.00);
                                        pstmtRet.setDouble(29, 0.00);
                                        pstmtRet.setDouble(30, 0.00);
                                        pstmtRet.setDouble(31, 0.00);
                                        pstmtRet.setString(32, grn2PayablesLinkingTable.getValueAt(i, 1).toString());
                                        pstmtRet.setBoolean(33, false);
                                        pstmtRet.executeUpdate(); 
                                        java.sql.PreparedStatement pstmt7 = connectDB.prepareStatement("insert into ac_dashboard values(?,?,now(),current_user)");
                                                pstmt7.setString(1, supplierNameTxt.getText().toString());
                                                pstmt7.setObject(2,  "RT:"+invoiceNoTxt.getText());
                                                pstmt7.executeUpdate();
                                        }
                                        System.out.println("fggf"+withholdingname+" "+withHeldaccountCode);
                            if(java.lang.Double.valueOf(withHoldTaxTxt.getText().toString())>0){
                                        
                                                 // java.sql.PreparedStatement pstmtRet = connectDB.prepareStatement("insert into ac_accounts_payable values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                        
                                    java.sql.PreparedStatement pstmt12 = connectDB.prepareStatement("insert into ac_accounts_payable values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                    pstmt12.setObject(1, accountCode);
                                    pstmt12.setString(2, supplierNameTxt.getText().toString());
                                    pstmt12.setString(3, "Stock Supplies");
                                    pstmt12.setString(4, "");
                                    pstmt12.setString(5, "");
                                      pstmt12.setString(6, "\n Witholding Tax - invoice no: "+invoiceNoTxt.getText()+" from "+supplierNameTxt.getText().toString());
                                   
                                    pstmt12.setString(7, "");
                                    pstmt12.setString(8, "");
                                    pstmt12.setString(9, "");
                                    pstmt12.setString(10, "");
                                    pstmt12.setString(11, transNo);
//                                    if(lpoNumberTxt.getText().contains("DIR_PU")){
//                                       pstmt1.setString(12, "Raise Invoice"); 
//                                    }else{
                                    pstmt12.setString(12, "Witholding Tax");
//                                    }

                                    
                                    
                                   pstmt12.setDouble(13, java.lang.Double.valueOf(withHoldTaxTxt.getText().replace(",", "")));
                                        pstmt12.setDouble(14, 0.00);
                                        pstmt12.setDouble(25, java.lang.Double.valueOf(withHoldTaxTxt.getText().replace(",", "")));
                                       
                                    pstmt12.setDate(15, datenowSql);
                                    pstmt12.setObject(16, invoiceNoTxt.getText());
                                    pstmt12.setString(17, glType);
                                    pstmt12.setBoolean(18, false);
                                    pstmt12.setBoolean(19, false);
                                    pstmt12.setString(20, User);
                                    pstmt12.setString(21, "");
                                    pstmt12.setObject(22, invDate);
                                    pstmt12.setObject(23, invRecDate);
                                    pstmt12.setDouble(24, java.lang.Double.valueOf(vatxt.getText().replace(",", "")));

                                    pstmt12.setDouble(26, java.lang.Double.valueOf(vatxt.getText().replace(",", "")));
                                    pstmt12.setDate(27, null);
                                    pstmt12.setObject(28, java.lang.Double.valueOf(retentionAmountTxt.getText().toString()));
                                    pstmt12.setObject(29, java.lang.Double.valueOf(withHoldTaxTxt.getText().toString()));
                                    
//                                    pstmt1.setDouble(28, 0.00);
//                                    pstmt1.setDouble(29, 0.00);
                                    pstmt12.setDouble(30, 0.00);
                                    pstmt12.setDouble(31, 0.00);
                                    pstmt12.setString(32, grn2PayablesLinkingTable.getValueAt(i, 1).toString());
                                    pstmt12.setBoolean(33, false);
                                    pstmt12.executeUpdate();
                                            
                                        //hynm
                                        java.sql.PreparedStatement pstmtTax = connectDB.prepareStatement("insert into ac_accounts_payable values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                        pstmtTax.setObject(1,  withHeldaccountCode);
                                        pstmtTax.setString(2, dealerNameTxt.getText());
                                        pstmtTax.setString(3, "Stock Supplies");
                                        pstmtTax.setString(4, "");
                                        pstmtTax.setString(5, "");
                                       
                                            pstmtTax.setString(6, "\n Witholding Tax - invoice no: "+invoiceNoTxt.getText()+" from "+supplierNameTxt.getText().toString());
                                        

                                        pstmtTax.setString(7, "");
                                        pstmtTax.setString(8, "");
                                        pstmtTax.setString(9, "");
                                        pstmtTax.setString(10, "");
                                        pstmtTax.setString(11, transNo);

                                        pstmtTax.setString(12, "Witholding Tax");

                                        pstmtTax.setDouble(13, 0.00);
                                        pstmtTax.setDouble(25, java.lang.Double.valueOf(withHoldTaxTxt.getText().replace(",", "")));
                                        pstmtTax.setDouble(14, java.lang.Double.valueOf(withHoldTaxTxt.getText().replace(",", "")));
                                        

                                        pstmtTax.setDate(15, datenowSql);
                                        pstmtTax.setObject(16, "WT:"+invoiceNoTxt.getText());
                                        pstmtTax.setString(17, glType);
                                        pstmtTax.setBoolean(18, false);
                                        pstmtTax.setBoolean(19, false);
                                        pstmtTax.setString(20, User);
                                        pstmtTax.setString(21, "");
                                        pstmtTax.setObject(22, invDate);
                                        pstmtTax.setObject(23, invRecDate);
                                        pstmtTax.setDouble(24, 0.00);

                                        pstmtTax.setDouble(26, 0.00);
                                        pstmtTax.setDate(27,null);
                                        pstmtTax.setDouble(28, 0.00);
                                        pstmtTax.setDouble(29, 0.00);
                                        pstmtTax.setDouble(30, 0.00);
                                        pstmtTax.setDouble(31, 0.00);
                                        pstmtTax.setString(32, grn2PayablesLinkingTable.getValueAt(i, 1).toString());
                                        pstmtTax.setBoolean(33, false);
                                        pstmtTax.executeUpdate();
                                        
                                        java.sql.PreparedStatement pstmt7 = connectDB.prepareStatement("insert into ac_dashboard values(?,?,now(),current_user)");
                                                pstmt7.setString(1, dealerNameTxt.getText().toString());
                                                pstmt7.setObject(2,  "WT:"+invoiceNoTxt.getText());
                                                pstmt7.executeUpdate();
                                            
                                    }
                      if(java.lang.Double.valueOf(vatxt.getText().toString())>0){
                                        
                                                 // java.sql.PreparedStatement pstmtRet = connectDB.prepareStatement("insert into ac_accounts_payable values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                        
                                    java.sql.PreparedStatement pstmt12 = connectDB.prepareStatement("insert into ac_accounts_payable values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                    pstmt12.setObject(1, accountCode);
                                    pstmt12.setString(2, supplierNameTxt.getText().toString());
                                    pstmt12.setString(3, "Stock Supplies");
                                    pstmt12.setString(4, "");
                                    pstmt12.setString(5, "");
                                      pstmt12.setString(6, "\n V.A.T - invoice no: "+invoiceNoTxt.getText()+" from "+supplierNameTxt.getText().toString());
                                   
                                    pstmt12.setString(7, "");
                                    pstmt12.setString(8, "");
                                    pstmt12.setString(9, "");
                                    pstmt12.setString(10, "");
                                    pstmt12.setString(11, transNo);
//                                    if(lpoNumberTxt.getText().contains("DIR_PU")){
//                                       pstmt1.setString(12, "Raise Invoice"); 
//                                    }else{
                                    pstmt12.setString(12, "Witholding Tax");
//                                    }

                                    
                                    
                                   pstmt12.setDouble(13, java.lang.Double.valueOf(vatxt.getText().replace(",", "")));
                                        pstmt12.setDouble(14, 0.00);
                                        pstmt12.setDouble(25, java.lang.Double.valueOf(vatxt.getText().replace(",", "")));
                                       
                                    pstmt12.setDate(15, datenowSql);
                                    pstmt12.setObject(16, invoiceNoTxt.getText());
                                    pstmt12.setString(17, glType);
                                    pstmt12.setBoolean(18, false);
                                    pstmt12.setBoolean(19, false);
                                    pstmt12.setString(20, User);
                                    pstmt12.setString(21, "");
                                    pstmt12.setObject(22, invDate);
                                    pstmt12.setObject(23, invRecDate);
                                    pstmt12.setDouble(24, java.lang.Double.valueOf(vatxt.getText().replace(",", "")));

                                    pstmt12.setDouble(26, java.lang.Double.valueOf(vatxt.getText().replace(",", "")));
                                    pstmt12.setDate(27, null);
                                    pstmt12.setObject(28, java.lang.Double.valueOf(retentionAmountTxt.getText().toString()));
                                    pstmt12.setObject(29, java.lang.Double.valueOf(withHoldTaxTxt.getText().toString()));
                                    
//                                    pstmt1.setDouble(28, 0.00);
//                                    pstmt1.setDouble(29, 0.00);
                                    pstmt12.setDouble(30, 0.00);
                                    pstmt12.setDouble(31, 0.00);
                                    pstmt12.setString(32, grn2PayablesLinkingTable.getValueAt(i, 1).toString());
                                    pstmt12.setBoolean(33, false);
                                    pstmt12.executeUpdate();
                                            
                                        //hynm
                                        java.sql.PreparedStatement pstmtTax = connectDB.prepareStatement("insert into ac_accounts_payable values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                        pstmtTax.setObject(1,  accountCode);
                                        pstmtTax.setString(2, dealerNameTxt1.getText());
                                        pstmtTax.setString(3, "Stock Supplies");
                                        pstmtTax.setString(4, "");
                                        pstmtTax.setString(5, "");
                                       
                                            pstmtTax.setString(6, "\n V.A.T - invoice no: "+invoiceNoTxt.getText()+" from "+supplierNameTxt.getText().toString());
                                        

                                        pstmtTax.setString(7, "");
                                        pstmtTax.setString(8, "");
                                        pstmtTax.setString(9, "");
                                        pstmtTax.setString(10, "");
                                        pstmtTax.setString(11, transNo);

                                        pstmtTax.setString(12, "Witholding Tax");

                                        pstmtTax.setDouble(13, 0.00);
                                        pstmtTax.setDouble(25, java.lang.Double.valueOf(vatxt.getText().replace(",", "")));
                                        pstmtTax.setDouble(14, java.lang.Double.valueOf(vatxt.getText().replace(",", "")));
                                        

                                        pstmtTax.setDate(15, datenowSql);
                                        pstmtTax.setObject(16, "VAT:"+invoiceNoTxt.getText());
                                        pstmtTax.setString(17, glType);
                                        pstmtTax.setBoolean(18, false);
                                        pstmtTax.setBoolean(19, false);
                                        pstmtTax.setString(20, User);
                                        pstmtTax.setString(21, "");
                                        pstmtTax.setObject(22, invDate);
                                        pstmtTax.setObject(23, invRecDate);
                                        pstmtTax.setDouble(24, 0.00);

                                        pstmtTax.setDouble(26, 0.00);
                                        pstmtTax.setDate(27,null);
                                        pstmtTax.setDouble(28, 0.00);
                                        pstmtTax.setDouble(29, 0.00);
                                        pstmtTax.setDouble(30, 0.00);
                                        pstmtTax.setDouble(31, 0.00);
                                        pstmtTax.setString(32, grn2PayablesLinkingTable.getValueAt(i, 1).toString());
                                        pstmtTax.setBoolean(33, false);
                                        pstmtTax.executeUpdate();
                                        java.sql.PreparedStatement pstmt7 = connectDB.prepareStatement("insert into ac_dashboard values(?,?,now(),current_user)");
                                                pstmt7.setString(1, dealerNameTxt1.getText().toString());
                                                pstmt7.setObject(2,  "VAT:"+invoiceNoTxt.getText());
                                                pstmt7.executeUpdate();
                                    }   
                                    }

                                    java.sql.PreparedStatement pstmt7 = connectDB.prepareStatement("insert into ac_dashboard values(?,?,now(),?)");
                                    pstmt7.setString(1, supplierNameTxt.getText().toString());
                                    pstmt7.setObject(2, invoiceNoTxt.getText());
                                    pstmt7.setString(3, User);

                                    pstmt7.executeUpdate();

                                    //update invoice register
                                    String [] invoiceReg=invoiceNoTxt.getText().split("/");
                                    for(int z=0;z<invoiceReg.length;z++){
                                         java.sql.PreparedStatement pstmt81212 = connectDB.prepareStatement(""
                                                    + "update ac_creditor_invoice_register set status=true where invoice_no='" + invoiceReg[z]+"'");
                                         pstmt81212.executeUpdate();
                                    }
                                   
                                    
                                    //   javax.swing.JOptionPane.showMessageDialog(this,"3","Comfirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
                                    for (int k = 0; k < grn2PayablesLinkingTable.getRowCount(); k++) {
                                        if (grn2PayablesLinkingTable.getValueAt(k, 0) != null) {
                                            java.sql.PreparedStatement pstmt81212 = connectDB.prepareStatement(""
                                                    + "update st_stock_cardex set approved=true,inv_no='" + invoiceNoTxt.getText() + "' where approved=false and supplies=true and chairperson=true and technical=true and certficate_no is not null and delivery_note_no='" + grn2PayablesLinkingTable.getValueAt(k, 2).toString() + "' and order_no='" + grn2PayablesLinkingTable.getValueAt(k, 1) + "'");
                                            //        java.sql.PreparedStatement pstmt8121 = connectDB.prepareStatement("UPDATE ac_ledger SET reconciled = true WHERE cheque_no ILIKE '" + grn2PayablesLinkingTable.getValueAt(i, 1).toString() + "' AND dealer ilike '" + supplierNameTxt.getText().toString() + "' and date = '" + grn2PayablesLinkingTable.getValueAt(i, 0).toString() + "' and transaction_no = '" + grn2PayablesLinkingTable.getValueAt(i, 4).toString() + "'");

                                            pstmt81212.executeUpdate();
                                        }
                                    }
                                } else {
                                }
                            }
                        }
                    }

                    //flagging the st_cardex tbl 
                    // java.sql.PreparedStatement pstmt1q12 = connectDB.prepareStatement("UPDATE st_stock_cardex SET approved=TRUE where oid='"++"'");
                    // pstmt1q12.setObject(1, accountCoded);
                    connectDB.commit();
                    connectDB.setAutoCommit(true);
                    //com.afrisoftech.lib.DocumentTracer.setDocumentLocation(connectDB, lpoNumberTxt.getText(), commentsTxt.getText(), "EXPENDITURE_EXAMINATION", "EXPENDITURE_VOTEBOOK");
                    javax.swing.JOptionPane.showMessageDialog(this, "Well Done !! Insert Done Successfully", "Comfirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                    linkGRNToCreditorBtn.setEnabled(false);
                    clearFormBtn.doClick();
                    clearTaxPanel();
                    // nBCachedRowSet1.execute();
                }
            } catch (java.sql.SQLException sq) {
                sq.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                System.out.println(sq.getMessage());
                try {
                    connectDB.rollback(registerSavePoint);
                } catch (java.sql.SQLException sql) {
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                jLabel7.setForeground(java.awt.Color.red);
                jLabel7.setText("Sorry. Please Check The Fields");
            }
        
        } else {
            
               javax.swing.JOptionPane.showMessageDialog(this, "INVOICE NO  : Invoice number is mandatory.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE); 
           
            

        }
    }//GEN-LAST:event_linkGRNToCreditorBtnActionPerformed

    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed

        System.out.println("Showing dialog");

        java.awt.Point point = this.lpoNumberTxt.getLocationOnScreen();

        lpolsoSearch.setSize(500, 200);

        lpolsoSearch.setLocation(point);

        lpolsoSearch.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_searchButton1ActionPerformed

    private void orderNumberTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_orderNumberTxtCaretUpdate

        v.removeAllElements();
        if (orderNumberTxt.getText().length() > 4) {

            grnDetailsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT distinct supplier as supplier_name,order_no as LPO_LSO_NO from st_stock_cardex st where st.approved=FALSE "
                    + "and supplies=true and chairperson=true and technical=true and certficate_no is not null and order_no ilike '%" + orderNumberTxt.getText() + "%' and st.transaction_type ilike 'Receiving' and delivered_by!= 'Reversal' group by supplier,order_no  order by supplier_name"));

        }        // TODO add your handling code here:
    }//GEN-LAST:event_orderNumberTxtCaretUpdate

    private void grnDetailsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grnDetailsTableMouseClicked

        v.removeAllElements();
        supplierCodeTxt.setText("");
        lpoNumberTxt.setText(grnDetailsTable.getValueAt(grnDetailsTable.getSelectedRow(), 1).toString());
        for (int k = 0; k < grn2PayablesLinkingTable.getRowCount(); k++) {
            for (int r = 0; r < grn2PayablesLinkingTable.getColumnCount(); r++) {
                grn2PayablesLinkingTable.getModel().setValueAt(null, k, r);
            }
        }
       clearTaxPanel();
        try {
            java.sql.Statement pstmtSupplierAmount = connectDB.createStatement();
            java.sql.ResultSet rsetSupplierAmount = pstmtSupplierAmount.executeQuery("SELECT sum(debit-credit) from st_stock_cardex st where st.approved=FALSE "
                    + "and supplies=true and chairperson=true and technical=true and certficate_no is not null and order_no = '" + lpoNumberTxt.getText() + "' and st.transaction_type ilike 'Receiving' and delivered_by!= 'Reversal'");
            while (rsetSupplierAmount.next()) {
                //lpoAmountTxt.setText(java.lang.String.valueOf(rsetSupplierAmount.getDouble(1)));
                // lpoAmount = rsetSupplierAmount.getDouble(1);
            }

            java.sql.Statement pstmtSupplier = connectDB.createStatement();

            try {

                int k = 0;
                java.sql.ResultSet rsetSupplier = pstmtSupplier.executeQuery("SELECT  supplier as supplier_name,"
                        + "(select summer from funsoft_link_grn (order_no,invoice_no,item,item_code)) as quantity_received,"
                        + " order_no as LPO_LSO_NO, delivery_note_no, invoice_no,item,store as receiving_store "
                        + " from st_stock_cardex where approved=false and supplies=true and chairperson=true and technical=true and certficate_no is not null and invoice_no in "
                        + "(select invoice_no from st_stock_cardex where approved=false and supplies=true and chairperson=true and technical=true and certficate_no is not null and"
                        + " order_no= '" + grnDetailsTable.getValueAt(grnDetailsTable.getSelectedRow(), 1) + "') and "
                        + "order_no= '" + grnDetailsTable.getValueAt(grnDetailsTable.getSelectedRow(), 1) + "' "
                        + " group by 5,1,2,3,4,6,7 having sum(debit-quantity_ordered) > 0 order by item");

                while (rsetSupplier.next()) {

                    supplierNameTxt.setText(rsetSupplier.getString(1));
                    grn2PayablesLinkingTable.setValueAt(rsetSupplier.getObject(3), k, 1);
                    grn2PayablesLinkingTable.setValueAt(rsetSupplier.getObject(4), k, 2);
                    grn2PayablesLinkingTable.setValueAt(rsetSupplier.getObject(5), k, 3);
                    grn2PayablesLinkingTable.setValueAt(rsetSupplier.getObject(6), k, 4);
                    grn2PayablesLinkingTable.setValueAt(rsetSupplier.getObject(2), k, 6);

                    String name = rsetSupplier.getString(6);
                    String correct_name = name;

                    if (correct_name.contains("'")) {
                        correct_name = name.substring(0, name.indexOf("'"));
                    } else if (!correct_name.contains("'")) {
                        correct_name = name;
                    }

                    java.sql.Statement pstmtSupplierDate = connectDB.createStatement();
                    java.sql.ResultSet rsetSupplierDate = pstmtSupplierDate.executeQuery(""
                            + "SELECT  date,sum(debit-quantity_ordered) as reversed_qty,price_per_item FROM st_stock_cardex  where "
                            + " approved=false and supplies=true and chairperson=true and technical=true and certficate_no is not null and order_no='" + rsetSupplier.getObject(3) + "' "
                            + " and invoice_no='" + rsetSupplier.getObject(5) + "' and supplier ='" + rsetSupplier.getObject(1) + "' "
                            + " and item ilike'%" + correct_name + "%' and store ilike '" + rsetSupplier.getObject(7) + "' "
                            + "                             group by date,price_per_item ");

                    if (rsetSupplierDate.next()) {
                        grn2PayablesLinkingTable.setValueAt(rsetSupplierDate.getObject(1), k, 0);

                        grn2PayablesLinkingTable.setValueAt(rsetSupplierDate.getObject(3), k, 5);
                    }

                    java.sql.Statement pstmtdebit = connectDB.createStatement();
                    java.sql.ResultSet rsetdebit = pstmtdebit.executeQuery(""
                            + "SELECT  sum(debit-quantity_ordered) as reversed_qty FROM st_stock_cardex  where "
                            + " approved=false and supplies=true and chairperson=true and technical=true and certficate_no is not null and order_no='" + rsetSupplier.getObject(3) + "' "
                            + " and invoice_no='" + rsetSupplier.getObject(5) + "' and supplier ='" + rsetSupplier.getObject(1) + "' "
                            + " and item ilike'%" + correct_name + "%' and store ilike '" + rsetSupplier.getObject(7) + "' "
                            + "                            ");

                    if (rsetdebit.next()) {

                        grn2PayablesLinkingTable.setValueAt(rsetdebit.getObject(1), k, 7);

                    }

                    k = k + 1;

                }
            } catch (Exception r) {
                r.printStackTrace();
            }

            java.sql.PreparedStatement pstmtSuppliercode = connectDB.prepareStatement("SELECT code FROM st_suppliers WHERE supplier_name = '" + grnDetailsTable.getValueAt(grnDetailsTable.getSelectedRow(), 0) + "'");

            java.sql.ResultSet rsetSuppliercode = pstmtSuppliercode.executeQuery();

            while (rsetSuppliercode.next()) {
                supplierCodeTxt.setText(rsetSuppliercode.getString(1));
            }
        } catch (Exception y) {
            y.printStackTrace();
            System.out.println(y);
        }

        lpolsoSearch.dispose();
    }//GEN-LAST:event_grnDetailsTableMouseClicked

    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed

        lpolsoSearch.dispose();         // TODO add your handling code here:
    }//GEN-LAST:event_jButton52ActionPerformed

    private void grn2PayablesLinkingTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grn2PayablesLinkingTableMouseReleased
        if (grn2PayablesLinkingTable.getSelectedColumn() == 1) {

            if (grn2PayablesLinkingTable.getValueAt(grn2PayablesLinkingTable.getSelectedRow(), 1) != null) {

                java.awt.Point point = this.lpoNumberTxt.getLocationOnScreen();

                lpolsoSearch.setSize(900, 200);

                lpolsoSearch.setLocation(point);

                lpolsoSearch.setVisible(true);

                orderNumberTxt.grabFocus();

                orderNumberTxt.setText(grn2PayablesLinkingTable.getValueAt(grn2PayablesLinkingTable.getSelectedRow(), 1).toString());
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_grn2PayablesLinkingTableMouseReleased

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        supplierCodeTxt.setText("");
        //jTextField2.setText("");
        //   jTextField3.setText("");
        for (int k = 0; k < grn2PayablesLinkingTable.getRowCount(); k++) {
            for (int r = 0; r < grn2PayablesLinkingTable.getColumnCount(); r++) {
                grn2PayablesLinkingTable.getModel().setValueAt(null, k, r);
            }
        }
        this.supplierNameTxt.setText("");
        linkGRNToCreditorBtn.setEnabled(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void supplierNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierNameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_supplierNameTxtActionPerformed

    private void linkGRNChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linkGRNChkActionPerformed
        if (invoiceNoTxt.getText().length() > 0) {
            Double total = 0.0, qtytotal = 0.0;
            for (int k = 0; k < grn2PayablesLinkingTable.getRowCount(); k++) {
                if (linkGRNChk.isSelected() == true) {
                    linkGRNToCreditorBtn.setEnabled(true);
                    
                    if (grn2PayablesLinkingTable.getValueAt(k, 0) != null) {
                        total = total + Double.parseDouble(grn2PayablesLinkingTable.getValueAt(k, 7).toString());
                        grn2PayablesLinkingTable.setValueAt(grn2PayablesLinkingTable.getValueAt(k, 7), k, 8);
                        grn2PayablesLinkingTable.setValueAt(true, k, 9);

                        Double totals = Double.parseDouble(grn2PayablesLinkingTable.getModel().getValueAt(k, 6).toString());
                        qtytotal = qtytotal + totals;

                    }
                 lpoAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(total));
                 totalGrnAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(calculategrn(total)));
                    qtyTtField.setText(qtytotal.toString());
                    if(total>0){
                    withHoldChk.setEnabled(true);
                    retentionAmountChk.setEnabled(true);  
                  jCheckBox2.setEnabled(true); 
                    }
                } else if (linkGRNChk.isSelected() == false) {
                    linkGRNToCreditorBtn.setEnabled(false);
                    withHoldChk.setEnabled(false);
                    retentionAmountChk.setEnabled(false);
                    if (grn2PayablesLinkingTable.getValueAt(k, 0) != null) {

                        totalGrnAmountTxt.setText("0.00");

                        grn2PayablesLinkingTable.setValueAt(0.0, k, 8);
                        total = 0.0;
                        grn2PayablesLinkingTable.setValueAt(false, k, 9);
                        qtyTtField.setText("0.00");

                    }
                }
            }
        } else if (invoiceNoTxt.getText().length() == 0) {
            javax.swing.JOptionPane.showMessageDialog(null, "Please entr the Invoice NO first");
            linkGRNChk.setSelected(false);
        }
        netAmountPayable.setText(String.valueOf(Double.valueOf(lpoAmountTxt.getText().replace(",", "").trim())-Double.valueOf(retentionAmountTxt.getText().replace(",", "").trim())-Double.valueOf(withHoldTaxTxt.getText().replace(",", "").trim())));


    }//GEN-LAST:event_linkGRNChkActionPerformed
public double calculategrn(double result){
     
    BigDecimal result2 = new BigDecimal(result).setScale(2, BigDecimal.ROUND_HALF_UP);

    double twoDecimalPoints= Double.parseDouble(String.valueOf(result2).substring(String.valueOf(result2).indexOf(".")+1, String.valueOf(result2).length()));
   //double x=Math.round(twoDecimalPoints / 5) * 5;
     double x = Math.round(twoDecimalPoints);
     x = x - (x % 5); 
    
    String fin=String.valueOf(result2).substring(0,String.valueOf(result2).indexOf("."))+".";
    fin=fin.concat(String.valueOf(x).substring(0,String.valueOf(x).indexOf(".")));
   
    System.out.println(fin);
    return Double.parseDouble(fin);

}
    private void linkGRNChkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_linkGRNChkItemStateChanged
//        // TODO add your handling code here:
//        if(jCheckBox2.isSelected()==false){
//            totalGrnAmountTxt.setText("0.0");
//            v.removeAllElements();
//               for (int k = 0; k < grn2PayablesLinkingTable.getRowCount(); k++) {
//                        if (grn2PayablesLinkingTable.getValueAt(k, 0) != null) {
//                            grn2PayablesLinkingTable.setValueAt(false, k, 8);
//                        }
//                    }
//            }  
    }//GEN-LAST:event_linkGRNChkItemStateChanged

    private void returnDocumentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnDocumentBtnActionPerformed

        //  com.afrisoftech.lib.DocumentTracer.setDocumentLocation(connectDB, lpoNumberTxt.getText(), commentsTxt.getText(), "EXPENDITURE_EXAMINATION", documentTargetCmbx.getSelectedItem().toString());
        com.afrisoftech.accounting.ViewPendingGrn dismth = new com.afrisoftech.accounting.ViewPendingGrn(connectDB);
        saccopn.add(dismth, javax.swing.JLayeredPane.DEFAULT_LAYER);
        try {
            dismth.setSelected(true);
        } catch (java.beans.PropertyVetoException pvt) {
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_returnDocumentBtnActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {
            java.sql.Statement st119 = connectDB.createStatement();
            java.sql.ResultSet ress19 = st119.executeQuery("select cert_no from st_certificate where lpo= '" + lpoNumberTxt.getText() + "'");
            while (ress19.next()) {

                com.afrisoftech.hospinventory.ComplianceCertificatePdf policy = new com.afrisoftech.hospinventory.ComplianceCertificatePdf();
                policy.ComplianceCertificatePdf(connectDB, ress19.getString(1), lpoNumberTxt.getText());

            }
        } catch (Exception t) {
            t.printStackTrace();
        }


    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
//        lpo=reportBodyTable.getValueAt(reportBodyTable.getSelectedRow(), 0).toString();
//        supplier=reportBodyTable.getValueAt(reportBodyTable.getSelectedRow(), 1).toString();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ShowCreditNote dialog = new ShowCreditNote(new javax.swing.JFrame(), true, connectDB, lpoNumberTxt.getText(), supplierNameTxt.getText());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            java.sql.Statement st119 = connectDB.createStatement();
            java.sql.ResultSet ress19 = st119.executeQuery("select grn_no from st_stock_cardex where order_no= '" + lpoNumberTxt.getText() + "'");
            while (ress19.next()) {
                com.afrisoftech.hospinventory.mtrhreports.MtrhSthirteenPdf policy1 = new com.afrisoftech.hospinventory.mtrhreports.MtrhSthirteenPdf();
                policy1.MtrhSthirteenPdf(connectDB, lpoNumberTxt.getText(), supplierNameTxt.getText(), ress19.getString(1));

            }
        } catch (Exception t) {
            t.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void withHoldChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_withHoldChkActionPerformed
 dealerNameTxt.setText("COMMISSIONER OF INCOME TAX");
        if (withHoldChk.isSelected()==true) {
     withHoldTaxTxt.setEditable(true);
     
        try {
            String mainService = null;
            String glAccount = null;
            java.sql.PreparedStatement pstmtPrepay = connectDB.prepareStatement("select code,activity from pb_activity where activity_category ILIKE 'CP' ");

            java.sql.ResultSet rsetTax = pstmtPrepay.executeQuery();

            if (rsetTax.next()) {
                mainService = rsetTax.getString(2);
                glAccount = rsetTax.getString(1);
            }

            ArrayList taxDetails = new ArrayList();
            taxDetails = com.afrisoftech.lib.CheckTaxStatus.returnTax(connectDB, mainService, glAccount);
            if (taxDetails.isEmpty() == false) {
                //witholding tax
               //setting withholding tax rate
                    taxPercentageTxt.setText(String.valueOf(taxDetails.get(0)));
                    
                    ArrayList taxCalc = new ArrayList();
                    taxCalc = com.afrisoftech.lib.CheckTaxStatus.calculateTax(connectDB, Double.valueOf(taxPercentageTxt.getText().trim()), Double.valueOf(lpoAmountTxt.getText().replace(",", "").trim()));
                    withHeldaccountCode=String.valueOf(taxDetails.get(2));
                        
                          java.sql.PreparedStatement pstmtPrepa = connectDB.prepareStatement(""
                    + "SELECT   activity   FROM pb_activity "
                    + " where   code='"+withHeldaccountCode+"'");
            
            java.sql.ResultSet rsetTa = pstmtPrepa.executeQuery();
            if(rsetTa.next()){
                withholdingname=rsetTa.getString(1);
            }

                    
                    
                    
                    if (taxCalc.isEmpty() == false) {
                        withHoldTaxTxt.setText(String.valueOf(taxCalc.get(0)));
                       
                    } else {
                       withHoldTaxTxt.setText("0.00");
                    }
               
            
            }

        } catch (SQLException ex) {
            Logger.getLogger(DebtorsBillingIntfr.class.getName()).log(Level.SEVERE, null, ex);
        }
      
 
        } else {
            //javax.swing.JOptionPane.showMessageDialog(this, "Empty Entries. Check !!\nMake you link all, LPO Amount and tax field should not Empty", "ERROR Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            withHoldChk.setSelected(false);
            withHoldTaxTxt.setText("0.00");
        }
          netAmountPayable.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble (Double.valueOf(lpoAmountTxt.getText().replace(",", "").trim())-Double.valueOf(retentionAmountTxt.getText().replace(",", "").trim())-Double.valueOf(withHoldTaxTxt.getText().replace(",", "").trim())));

    }//GEN-LAST:event_withHoldChkActionPerformed

    private void withHoldChkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_withHoldChkItemStateChanged
        // netAmountPayable.setText(String.valueOf(Double.valueOf(lpoAmountTxt.getText().replace(",", "").trim())-Double.valueOf(retentionAmountTxt.getText().replace(",", "").trim())-Double.valueOf(withHoldTaxTxt.getText().replace(",", "").trim())));


    }//GEN-LAST:event_withHoldChkItemStateChanged

    private void retentionAmountChkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_retentionAmountChkItemStateChanged
       // netAmountPayable.setText(String.valueOf(Double.valueOf(lpoAmountTxt.getText().replace(",", "").trim())-Double.valueOf(retentionAmountTxt.getText().replace(",", "").trim())-Double.valueOf(withHoldTaxTxt.getText().replace(",", "").trim())));

    }//GEN-LAST:event_retentionAmountChkItemStateChanged

    private void retentionAmountChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retentionAmountChkActionPerformed

        if (retentionAmountChk.isSelected()==true) {
            retentionAmountTxt.setEditable(true);
          try {
            String mainService = null;
            String glAccount = null;
            java.sql.PreparedStatement pstmtPrepay = connectDB.prepareStatement("select code,activity from pb_activity where activity ILIKE 'Retention Fees' AND activity_category ILIKE 'BL'");

            java.sql.ResultSet rsetTax = pstmtPrepay.executeQuery();

            if (rsetTax.next()) {
                mainService = rsetTax.getString(2);
                glAccount = rsetTax.getString(1);
                RetentionaccountCode=rsetTax.getString(1);
            }

            ArrayList taxDetails = new ArrayList();
            taxDetails = com.afrisoftech.lib.CheckTaxStatus.returnTax(connectDB, mainService, RetentionaccountCode);
            if (taxDetails.isEmpty() == false) {
                //witholding tax
               
                
                    retentionPercentageTxt.setText(String.valueOf(taxDetails.get(1)));
                    RetentionaccountCode=String.valueOf(taxDetails.get(2));
                    ArrayList taxCalc = new ArrayList();
                    taxCalc = com.afrisoftech.lib.CheckTaxStatus.calculateTax(connectDB, Double.valueOf(retentionPercentageTxt.getText().trim()),  Double.valueOf(lpoAmountTxt.getText().replace(",", "").trim()));
                    if (taxCalc.isEmpty() == false) {
                        retentionAmountTxt.setText(String.valueOf(taxCalc.get(0)));

                    } else {
                        retentionAmountTxt.setText("0.00");
                    }
                   
            }

        } catch (SQLException ex) {
            Logger.getLogger(DebtorsBillingIntfr.class.getName()).log(Level.SEVERE, null, ex);
        }
        
  } else {
            
            retentionAmountChk.setSelected(false);
            retentionAmountTxt.setText("0.00");
        }
  netAmountPayable.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble (Double.valueOf(lpoAmountTxt.getText().replace(",", "").trim())-Double.valueOf(retentionAmountTxt.getText().replace(",", "").trim())));

    }//GEN-LAST:event_retentionAmountChkActionPerformed

    private void withHoldTaxTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_withHoldTaxTxtCaretUpdate
        // TODO add your handling code here:
       if(withHoldTaxTxt.getText().length()>1){
          calc();
        }
    }//GEN-LAST:event_withHoldTaxTxtCaretUpdate

    private void retentionAmountTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_retentionAmountTxtCaretUpdate
        // TODO add your handling code here:
      if(retentionAmountTxt.getText().length()>1){
          calc();
        }
    }//GEN-LAST:event_retentionAmountTxtCaretUpdate

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
       searchButton3Clicked();
//        this.paymentRequestBtn.setEnabled(true);

        // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed
private void searchButton3Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.dealerNameTxt.getLocationOnScreen();

        jSearchDialog4.setSize(600, 200);

        jSearchDialog4.setLocation(point);

        jSearchDialog4.setVisible(true);
    }
    private void jTextField112CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField112CaretUpdate
        // TODO add your handling code here:
        jSearchTable4.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select code,supplier_name as name from st_suppliers where supplier_name in (select supplier_name from st_suppliers where supplier_name ilike '%tax%') and supplier_name ILIKE '" + jTextField112.getText() + "%' order by supplier_name"));

        jSearchScrollPane5.setViewportView(jSearchTable4);
    }//GEN-LAST:event_jTextField112CaretUpdate

    private void jTextField112ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField112ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField112ActionPerformed

    private void jSearchTable4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable4MouseClicked
        // TODO add your handling code here:
        dealerNameTxt.setText(jSearchTable4.getValueAt(jSearchTable4.getSelectedRow(), 1).toString());
        jSearchDialog4.dispose();
    }//GEN-LAST:event_jSearchTable4MouseClicked

    private void jButton54ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton54ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton54ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
        dealerNameTxt1.setText("COMMISSIONER OF DOMESTIC TAX");
        if(jCheckBox2.isSelected()){
             vatxt.setEditable(true);
        }else{
             vatxt.setEditable(false);
        }
       
    }//GEN-LAST:event_jCheckBox2ActionPerformed
public void calc(){
        double total=0.0,sum=0.0,ret=0.0,vat=0.0,wt=0.0;
       if(retentionAmountTxt.getText()==""){ret=0.0;}else{ret=Double.parseDouble(retentionAmountTxt.getText().replace(",",""));}
       if(vatxt.getText()==""){vat=0.0;}else{vat=Double.parseDouble(vatxt.getText().replace(",",""));} 
       if(withHoldTaxTxt.getText()==""){wt=0.0;}else{wt=Double.parseDouble(withHoldTaxTxt.getText().replace(",",""));} 
       sum=wt+vat+ret;
         total= Double.parseDouble(lpoAmountTxt.getText().replace(",",""))-sum;
         netAmountPayable.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(calculategrn(total))); 
        
   }
    private void vatxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_vatxtCaretUpdate
        // TODO add your handling code here:
           if(vatxt.getText().length()>1){
             calc();
             }
    }//GEN-LAST:event_vatxtCaretUpdate

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        java.awt.Point point = this.invoiceNoTxt.getLocationOnScreen();

        lposearchdialog.setSize(600,200);

        lposearchdialog.setLocation(point);

        lposearchdialog.setVisible(true);
    }//GEN-LAST:event_searchBtnActionPerformed

    private void lpotxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_lpotxtCaretUpdate
        // TODO add your handling code here:
        if(lpotxt.getCaretPosition()>1){

            lpotable.setModel(TableModel.createTableVectorsCaret(connectDB, "SELECT distinct invoice_no,date_received,date_on_invoice,amount,doc_type,false as Tick from ac_creditor_invoice_register where code='"+supplierCodeTxt.getText()+"' and invoice_no ilike '%"+lpotxt.getText()+"%' and status =false order by date_received asc"));

        }
    }//GEN-LAST:event_lpotxtCaretUpdate

    private void lpotxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lpotxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lpotxtActionPerformed
    private double calculate(){
        double y=0.0;
        lastRow=0;
        invoice="";
          for(int i=0;i<lpotable.getRowCount();i++){
               
                       if(Boolean.valueOf(lpotable.getValueAt(i, 5).toString())==true){
                           if(y==0){
                              invoice=lpotable.getValueAt(i, 0).toString(); 
                           }else{
                                invoice=invoice+"/"+lpotable.getValueAt(i, 0).toString();
                           }
                          System.err.println(y);
                           y=y+Double.parseDouble(lpotable.getValueAt(i, 3).toString());
                          lastRow=i;
                       }
               
            }  
        return y;
    }
    private void lpotableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lpotableMouseClicked
        // TODO add your handling code here:
        System.err.println("here");
        if(lpotable.getSelectedColumn()==-1){
            System.err.println("hre");
            jTextField1.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(calculate()));
        }
    }//GEN-LAST:event_lpotableMouseClicked

    private void jButton53ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton53ActionPerformed
        // TODO add your handling code here:
        this.lposearchdialog.dispose();
    }//GEN-LAST:event_jButton53ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        calculate();

        invoiceNoTxt.setText(invoice);
        java.text.DateFormat df = java.text.DateFormat.getDateInstance();

        java.text.SimpleDateFormat sdf = (java.text.SimpleDateFormat) df;

        sdf.applyPattern("yyyy-MM-dd");

        try {
              invoiceDate.setDate(sdf.parse(lpotable.getValueAt(lastRow, 2).toString()));
              invoiceReceivedDatePicker.setDate(sdf.parse(lpotable.getValueAt(lastRow, 1).toString()));
            
        }catch(Exception r){
            r.printStackTrace();
        }
        lposearchdialog.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jSearchScrollPane3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchScrollPane3MouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jSearchScrollPane3MouseClicked

    private void populateTable1(java.lang.String patient_no) {

        int i = 0;
        int j = 0;
        try {
            java.sql.Statement stmt = connectDB.createStatement();

            java.sql.ResultSet rset = stmt.executeQuery("SELECT count(dealer) FROM ac_ledger WHERE dealer ilike '" + patient_no + "' and date between '" + this.invoiceDate.getDate().toString() + "' and '" + this.invoiceReceivedDatePicker.getDate().toString() + "'");// and revenue_code = '"+jTextField5.getText()+"' AND paid = false");

            while (rset.next()) {
                j = rset.getInt(1);
            }

            System.out.println("The occurences for GRN for " + patient_no + " are [" + j + "]");

            if (j > 0) {
                java.sql.PreparedStatement pstmtUnlinked = connectDB.prepareStatement("SELECT voucher_no, sum(credit-debit) FROM ac_ledger WHERE dealer ilike '" + patient_no + "' AND date between '" + this.invoiceDate.getDate().toString() + "' AND '" + this.invoiceReceivedDatePicker.getDate().toString() + "'  GROUP BY voucher_no having sum(credit-debit) > 0  ORDER BY voucher_no");

                java.sql.ResultSet rsetUnlinked = pstmtUnlinked.executeQuery();

                while (rsetUnlinked.next()) {
                    java.sql.Statement stmtTable1 = connectDB.createStatement();
                    java.sql.Statement stmtTable11 = connectDB.createStatement();
                    java.sql.Statement stmtTable12 = connectDB.createStatement();
                    //java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT date, invoice_no, admission_no,debit::numeric,balance::numeric ,null::boolean as allocated FROM ac_debtors WHERE account_no = '"+patient_no+"' AND balance > 0 order by date");// and revenue_code = '"+jTextField5.getText()+"' AND paid = false");
                    java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT date, voucher_no,receipt_no,'',sum(credit-debit) FROM ac_ledger WHERE dealer ilike '" + patient_no + "' AND date between '" + this.invoiceDate.getDate().toString() + "' AND '" + this.invoiceReceivedDatePicker.getDate().toString() + "' AND credit-debit > 0 AND voucher_no = '" + rsetUnlinked.getString(1) + "'  GROUP BY receipt_no, date,voucher_no HAVING SUM(credit-debit) > 0 ORDER BY date");// and revenue_code = '"+jTextField5.getText()+"' AND paid = false");
                    String orderNumber = null;
                    while (rsetTable1.next()) {
                        System.out.println("The occurences for Voucher Number for " + patient_no + " are [" + rsetTable1.getObject(2) + "]");
                        java.sql.ResultSet rsetTable11 = stmtTable11.executeQuery("SELECT DISTINCT transaction_no FROM ac_ledger WHERE dealer ILIKE '" + patient_no + "' AND voucher_no = '" + rsetTable1.getObject(2) + "' AND credit > 0");

                        while (rsetTable11.next()) {
                            java.sql.ResultSet rsetTable12 = stmtTable12.executeQuery("SELECT order_no FROM st_stock_cardex WHERE supplier ilike '" + patient_no + "' AND date between '" + this.invoiceDate.getDate().toString() + "' AND '" + this.invoiceReceivedDatePicker.getDate().toString() + "' AND delivery_note_no = '" + rsetTable1.getObject(2) + "' LIMIT 1");// and revenue_code = '"+jTextField5.getText()+"' AND paid = false");
                            while (rsetTable12.next()) {
                                orderNumber = rsetTable12.getString(1);
                            }
                            System.out.println("Working at table row " + i);
                            grn2PayablesLinkingTable.setValueAt(rsetTable1.getObject(1), i, 0);
                            grn2PayablesLinkingTable.setValueAt(orderNumber, i, 1);
                            grn2PayablesLinkingTable.setValueAt(rsetTable1.getObject(2), i, 2);
                            grn2PayablesLinkingTable.setValueAt(rsetTable1.getObject(4), i, 3);
                            grn2PayablesLinkingTable.setValueAt(rsetTable11.getObject(1), i, 4);

                            grn2PayablesLinkingTable.setValueAt(rsetTable1.getObject(5), i, 5);
                            grn2PayablesLinkingTable.setValueAt(java.lang.Boolean.valueOf(false), i, 7);
                            // jTable1.setValueAt(rsetTable1.getObject(6), i, 5);

                            i++;

                            //                i = i + i;
                        }

                    }//            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                }
            }
        } catch (java.sql.SQLException sqlExec) {

            sqlExec.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearFormBtn;
    private javax.swing.JTextField commentsTxt;
    private javax.swing.JTextField dealerNameTxt;
    private javax.swing.JTextField dealerNameTxt1;
    private javax.swing.JTable grn2PayablesLinkingTable;
    private javax.swing.JTable grnDetailsTable;
    private javax.swing.JTextField grnsearchTxt;
    private com.afrisoftech.lib.DatePicker invoiceDate;
    private javax.swing.JTextField invoiceNoTxt;
    private com.afrisoftech.lib.DatePicker invoiceReceivedDatePicker;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    public javax.swing.JButton jButton4;
    private javax.swing.JButton jButton45;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton51;
    private javax.swing.JButton jButton511;
    private javax.swing.JButton jButton52;
    private javax.swing.JButton jButton53;
    private javax.swing.JButton jButton54;
    private javax.swing.JButton jButton6;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel61;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JDialog jSearchDialog1;
    private javax.swing.JDialog jSearchDialog4;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jSearchPanel1;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JPanel jSearchPanel3;
    private javax.swing.JPanel jSearchPanel5;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane1;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JScrollPane jSearchScrollPane3;
    private javax.swing.JScrollPane jSearchScrollPane5;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTable jSearchTable1;
    private javax.swing.JTable jSearchTable4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JTextField jTextField1111;
    private javax.swing.JTextField jTextField112;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JCheckBox linkGRNChk;
    private javax.swing.JButton linkGRNToCreditorBtn;
    private javax.swing.JTextField lpoAmountTxt;
    private javax.swing.JTextField lpoNumberTxt;
    private javax.swing.JDialog lpolsoSearch;
    private javax.swing.JDialog lposearchdialog;
    private javax.swing.JTable lpotable;
    private javax.swing.JTextField lpotxt;
    private javax.swing.JTextField netAmountPayable;
    private javax.swing.JTextField orderNumberTxt;
    private javax.swing.JTextField qtyTtField;
    private javax.swing.JCheckBox retentionAmountChk;
    private javax.swing.JTextField retentionAmountTxt;
    private com.afrisoftech.lib.DatePicker retentionDateDue;
    private javax.swing.JTextField retentionPercentageTxt;
    private javax.swing.JButton returnDocumentBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchButton1;
    private javax.swing.JTextField supplierCodeTxt;
    private javax.swing.JTextField supplierNameTxt;
    private javax.swing.JTextField taxPercentageTxt;
    private javax.swing.JTextField totalGrnAmountTxt;
    private javax.swing.JTextField vatxt;
    private javax.swing.JCheckBox withHoldChk;
    private javax.swing.JTextField withHoldTaxTxt;
    // End of variables declaration//GEN-END:variables
}
