/*
 * stockprices.java
 *
 * Created on November 5, 2002, 11:47 AM
 */
package com.afrisoftech.accounting;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author root
 */
public class FinSchemeInvsIntfr extends javax.swing.JInternalFrame {

    String todays = null;
    javax.swing.JComboBox cmbox2 = null;
    java.sql.Connection connectDB = null;
    private javax.swing.JComboBox cmbox;
    com.afrisoftech.lib.DBObject dbObject;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    String cashPoint = null;
    private java.lang.String shift_no = null;
    private java.lang.String cash_no = null;
    private String discode;
    private String discglAcc;
    double copaymentsTotal = 0.00;

    public FinSchemeInvsIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        dbObject = new com.afrisoftech.lib.DBObject();

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();

        // System.out.println("Cashpoint : " + System.getProperty("cashpoint"));
        //jTextField14.setText(getCashPoint());
        //jTextField81.setText(getShiftNumber());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        patientDialog = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        searchPatientTxt = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        loadPatientDateTable = new com.afrisoftech.dbadmin.JTable();
        jButton42 = new javax.swing.JButton();
        jButton52 = new javax.swing.JButton();
        jSearchDialog11 = new javax.swing.JDialog();
        jSearchPanel11 = new javax.swing.JPanel();
        jTextField1111 = new javax.swing.JTextField();
        jSearchScrollPane11 = new javax.swing.JScrollPane();
        jSearchTable11 = new com.afrisoftech.dbadmin.JTable();
        dispose11 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton9 = new javax.swing.JButton();
        jSearchDialog21 = new javax.swing.JDialog();
        jSearchPanel21 = new javax.swing.JPanel();
        jTextField1131 = new javax.swing.JTextField();
        jSearchScrollPane21 = new javax.swing.JScrollPane();
        jSearchTable21 = new com.afrisoftech.dbadmin.JTable();
        jButton421 = new javax.swing.JButton();
        jButton521 = new javax.swing.JButton();
        buttonGroup2 = new javax.swing.ButtonGroup();
        schemeSearchDialog = new javax.swing.JDialog();
        jSearchPanel12 = new javax.swing.JPanel();
        schemeSearchTxt = new javax.swing.JTextField();
        schemeSearchScrollPane = new javax.swing.JScrollPane();
        schemeSearchTable = new com.afrisoftech.dbadmin.JTable();
        dispose12 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        schemeDataTable = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        };
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        patientNameTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        memberNoTxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        schemePayerTxt = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        patientNotxt = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jPanel641 = new javax.swing.JPanel();
        searchButton2 = new javax.swing.JButton();
        schemeNameTxt = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        accountNoTxt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        invoiceNoTxt = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        claimNumberTxt = new javax.swing.JTextField();
        cardNumberTxt = new javax.swing.JTextField();
        tickChk = new javax.swing.JCheckBox();
        jLabel22 = new javax.swing.JLabel();
        totalDepositBalTxt = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        refundTxt = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        searchByNameChk = new javax.swing.JCheckBox();
        searchByNoChk = new javax.swing.JCheckBox();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        unutilisedSchemeDepositTxt = new javax.swing.JTextField();
        schemeBalAfterUtilisationTxt = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        dmuBalanceTxt = new javax.swing.JTextField();
        utilizeDepositChkbx = new javax.swing.JCheckBox();
        jLabel16 = new javax.swing.JLabel();
        coPaymentsTxt = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        totalAmountTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane12 = new javax.swing.JScrollPane();
        viewTable = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false,false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        jLabel51 = new javax.swing.JLabel();
        beginDate = new com.afrisoftech.lib.DatePicker();
        jLabel62 = new javax.swing.JLabel();
        endDate = new com.afrisoftech.lib.DatePicker();
        jCheckBox2 = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        try  {
            java.lang.Class.forName("org.postgresql.Driver");
            System.out.println("Found driver");
        } catch(java.lang.ClassNotFoundException cnf){
            System.out.println("driver not found");
        }
        finalizeInvoiceBtn = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        utlizeDepositBtn = new javax.swing.JButton();
        utilizedepositTxt = new javax.swing.JTextField();
        totalDiscountTxt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        totalNetTxt = new javax.swing.JTextField();
        jPanel642 = new javax.swing.JPanel();
        searchButton3 = new javax.swing.JButton();
        schemeNameTxt1 = new javax.swing.JTextField();
        viewAllChkbx = new javax.swing.JCheckBox();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTable11 = new javax.swing.JTable();
        jPanel21 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jTextField11 = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jTextField21 = new javax.swing.JTextField();
        jLabel71 = new javax.swing.JLabel();
        jTextField41 = new javax.swing.JTextField();
        jLabel81 = new javax.swing.JLabel();
        jTextField51 = new javax.swing.JTextField();
        jLabel91 = new javax.swing.JLabel();
        jTextField61 = new javax.swing.JTextField();
        jPanel41 = new javax.swing.JPanel();
        jTextField91 = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        jTextField71 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        datePicker11 = new com.afrisoftech.lib.DatePicker();
        datePicker12 = new com.afrisoftech.lib.DatePicker();
        jLabel14 = new javax.swing.JLabel();
        jLabel2122 = new javax.swing.JLabel();
        jTextField16 = new javax.swing.JTextField();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jSeparator11 = new javax.swing.JSeparator();
        jTextField31 = new javax.swing.JTextField();
        jLabel61 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        try  {
            java.lang.Class.forName("org.postgresql.Driver");
            System.out.println("Found driver");
        } catch(java.lang.ClassNotFoundException cnf){
            System.out.println("driver not found");
        }
        jButton11 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        jButton41 = new javax.swing.JButton();
        jButton51 = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        jTextField17 = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jTextField18 = new javax.swing.JTextField();

        patientDialog.setModal(true);
        patientDialog.setUndecorated(true);
        patientDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        searchPatientTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchPatientTxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel2.add(searchPatientTxt, gridBagConstraints);

        loadPatientDateTable.setToolTipText("Click on the target row to select the patient from the search.");
        loadPatientDateTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = loadPatientDateTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        loadPatientDateTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadPatientDateTableMouseClicked(evt);
            }
        });
        jSearchScrollPane2.setViewportView(loadPatientDateTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

        jButton42.setText("Select");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton42, gridBagConstraints);

        jButton52.setText("Dispose");
        jButton52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton52, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientDialog.getContentPane().add(jSearchPanel2, gridBagConstraints);

        jSearchDialog11.setModal(true);
        jSearchDialog11.setUndecorated(true);
        jSearchDialog11.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel11.setLayout(new java.awt.GridBagLayout());

        jTextField1111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel11.add(jTextField1111, gridBagConstraints);

        jSearchTable11.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable11.setShowHorizontalLines(false);
        /*int rowsNo = 0;
        //try {

            crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

            crset1.setConnectionSource(pConnDB);

            // try {
                //crset1.execute();

                // crset2.setExecuteOnLoad(true);
                jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                    new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                    new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

                }));

                tableModel = jSearchTable.getModel();

                jSearchScrollPane.setViewportView(jSearchTable);

                /*   }catch(java.sql.SQLException sqlex){
                javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                System.out.println(sqlex.getMessage());

            }

            javax.swing.table.TableColumn column = null;

            for (int i = 0; i < 4; i++) {

                column = jSearchTable.getColumnModel().getColumn(i);

                if (i == 1) {

                    column.setPreferredWidth(400);
                    //sport column is bigger
                } else {

                    column.setPreferredWidth(200);

                }
            }*/
            jSearchTable11.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jSearchTable11MouseClicked(evt);
                }
            });
            jSearchScrollPane11.setViewportView(jSearchTable11);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            jSearchPanel11.add(jSearchScrollPane11, gridBagConstraints);

            dispose11.setMnemonic('l');
            dispose11.setText("Close");
            dispose11.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    dispose11ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel11.add(dispose11, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchDialog11.getContentPane().add(jSearchPanel11, gridBagConstraints);

            jSearchDialog.setModal(true);
            jSearchDialog.setUndecorated(true);
            jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

            jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jSearchPanel.setLayout(new java.awt.GridBagLayout());

            jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    jTextField111CaretUpdate(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 10.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
            jSearchPanel.add(jTextField111, gridBagConstraints);

            jSearchTable.setShowHorizontalLines(false);
            /*    try {
                searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
                searchRowSet.setConnectionSource(pConnDB);

                searchRowSet.execute();

                // crset2.setExecuteOnLoad(true);
                jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

                }));
                // jSearchScrollPane.setViewportView(jSearchTable);

            } catch(java.sql.SQLException sqlex){
                javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                System.out.println(sqlex.getMessage());
            }
            */
            jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jSearchTableMouseClicked(evt);
                }
            });
            jSearchScrollPane.setViewportView(jSearchTable);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

            jButton9.setText("Dispose");
            jButton9.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton9ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel.add(jButton9, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

            jSearchDialog21.setModal(true);
            jSearchDialog21.setUndecorated(true);
            jSearchDialog21.getContentPane().setLayout(new java.awt.GridBagLayout());

            jSearchPanel21.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jSearchPanel21.setLayout(new java.awt.GridBagLayout());

            jTextField1131.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    jTextField1131CaretUpdate(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 300.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
            jSearchPanel21.add(jTextField1131, gridBagConstraints);

            jSearchTable21.setToolTipText("Click on the target row to select the patient from the search.");
            jSearchTable21.setShowHorizontalLines(false);
            /*javax.swing.table.TableColumn column = null;

            for (int i = 0; i < 4; i++) {

                column = loadPatientDateTable.getColumnModel().getColumn(i);

                if (i == 1) {

                    column.setPreferredWidth(400);
                    //sport column is bigger
                } else {

                    column.setPreferredWidth(200);

                }
            }
            */
            jSearchTable21.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jSearchTable21MouseClicked(evt);
                }
            });
            jSearchScrollPane21.setViewportView(jSearchTable21);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            jSearchPanel21.add(jSearchScrollPane21, gridBagConstraints);

            jButton421.setText("Select");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel21.add(jButton421, gridBagConstraints);

            jButton521.setText("Close");
            jButton521.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton521ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel21.add(jButton521, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchDialog21.getContentPane().add(jSearchPanel21, gridBagConstraints);

            schemeSearchDialog.setModal(true);
            schemeSearchDialog.setUndecorated(true);
            schemeSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

            jSearchPanel12.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jSearchPanel12.setLayout(new java.awt.GridBagLayout());

            schemeSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    schemeSearchTxtCaretUpdate(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 300.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
            jSearchPanel12.add(schemeSearchTxt, gridBagConstraints);

            schemeSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
            schemeSearchTable.setShowHorizontalLines(false);
            /*int rowsNo = 0;
            //try {

                crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

                crset1.setConnectionSource(pConnDB);

                // try {
                    //crset1.execute();

                    // crset2.setExecuteOnLoad(true);
                    jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                        new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                        new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                        new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                        new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

                    }));

                    tableModel = jSearchTable.getModel();

                    jSearchScrollPane.setViewportView(jSearchTable);

                    /*   }catch(java.sql.SQLException sqlex){
                    javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                    System.out.println(sqlex.getMessage());

                }

                javax.swing.table.TableColumn column = null;

                for (int i = 0; i < 4; i++) {

                    column = jSearchTable.getColumnModel().getColumn(i);

                    if (i == 1) {

                        column.setPreferredWidth(400);
                        //sport column is bigger
                    } else {

                        column.setPreferredWidth(200);

                    }
                }*/
                schemeSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        schemeSearchTableMouseClicked(evt);
                    }
                });
                schemeSearchScrollPane.setViewportView(schemeSearchTable);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 20.0;
                jSearchPanel12.add(schemeSearchScrollPane, gridBagConstraints);

                dispose12.setMnemonic('l');
                dispose12.setText("Close");
                dispose12.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        dispose12ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jSearchPanel12.add(dispose12, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                schemeSearchDialog.getContentPane().add(jSearchPanel12, gridBagConstraints);

                setClosable(true);
                setIconifiable(true);
                setMaximizable(true);
                setResizable(true);
                setTitle("Scheme Invoice");
                setPreferredSize(new java.awt.Dimension(650, 700));
                setVisible(true);
                getContentPane().setLayout(new java.awt.GridBagLayout());
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.gridwidth = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                getContentPane().add(jLabel5, gridBagConstraints);

                jPanel1.setBackground(new java.awt.Color(204, 204, 255));
                jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
                jPanel1.setLayout(new java.awt.GridBagLayout());

                schemeDataTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null},
                        {null, null, null, null, null, null, null, null, null, null}
                    },
                    new String [] {
                        "Date", "Description", "Quantity", "Rate", "Discount", "Total Disc.", "Amount", "Gl Code", "Items To Claim", "Reference"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class
                    };
                    boolean[] canEdit = new boolean [] {
                        false, false, false, false, false, false, false, false, false, false
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }

                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit [columnIndex];
                    }
                });
                schemeDataTable.setShowHorizontalLines(false);
                cmbox = new javax.swing.JComboBox();
                javax.swing.table.TableColumn dateEditor = schemeDataTable.getColumnModel().getColumn(0);
                com.afrisoftech.lib.DateCellEditor dateCellEditor = new com.afrisoftech.lib.DateCellEditor(new com.afrisoftech.lib.DatePicker(), schemeDataTable);
                dateEditor.setCellEditor(dateCellEditor);
                //jTable1.setRowHeight(30);
                javax.swing.table.DefaultTableCellRenderer cellRenderer = new javax.swing.table.DefaultTableCellRenderer();
                cellRenderer.setHorizontalAlignment(cellRenderer.TRAILING);
                dateEditor.setCellRenderer(cellRenderer);

                javax.swing.table.TableColumn column = null;
                for (int i = 0; i < 8; i++) {
                    column = schemeDataTable.getColumnModel().getColumn(i);
                    if (i == 0) {

                        column.setPreferredWidth(100); //sport column is bigger
                    } else {
                        if (i == 1) {
                            column.setPreferredWidth(200);
                        } else {
                            if (i == 2) {
                                column.setPreferredWidth(100);
                            }  else
                            column.setPreferredWidth(100);

                        }
                    }
                }
                schemeDataTable.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        schemeDataTableMouseClicked(evt);
                    }
                });
                schemeDataTable.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyReleased(java.awt.event.KeyEvent evt) {
                        schemeDataTableKeyReleased(evt);
                    }
                });
                jScrollPane1.setViewportView(schemeDataTable);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.gridwidth = 8;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 500.0;
                gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
                jPanel1.add(jScrollPane1, gridBagConstraints);

                jPanel2.setBackground(new java.awt.Color(255, 204, 204));
                jPanel2.setLayout(new java.awt.GridBagLayout());

                jLabel1.setText("Scheme Name");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel2.add(jLabel1, gridBagConstraints);

                jLabel2.setText("Scheme Member No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
                jPanel2.add(jLabel2, gridBagConstraints);

                patientNameTxt.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel2.add(patientNameTxt, gridBagConstraints);

                jLabel3.setText("Patient No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
                jPanel2.add(jLabel3, gridBagConstraints);

                jLabel4.setText("Patient Name");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
                jPanel2.add(jLabel4, gridBagConstraints);

                memberNoTxt.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel2.add(memberNoTxt, gridBagConstraints);

                jLabel7.setText("Scheme Payer");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel2.add(jLabel7, gridBagConstraints);

                schemePayerTxt.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
                jPanel2.add(schemePayerTxt, gridBagConstraints);

                jTextField5.setEditable(false);
                jTextField5.setMinimumSize(new java.awt.Dimension(0, 0));
                jTextField5.setPreferredSize(new java.awt.Dimension(0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                jPanel2.add(jTextField5, gridBagConstraints);

                jTextField6.setEditable(false);
                jTextField6.setMinimumSize(new java.awt.Dimension(0, 0));
                jTextField6.setPreferredSize(new java.awt.Dimension(0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel2.add(jTextField6, gridBagConstraints);

                jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                jPanel4.setLayout(new java.awt.GridBagLayout());

                patientNotxt.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel4.add(patientNotxt, gridBagConstraints);

                searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
                searchButton.setToolTipText("Search");
                searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
                searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
                searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                searchButton.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        searchButtonActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
                jPanel4.add(searchButton, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel2.add(jPanel4, gridBagConstraints);

                jPanel641.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                jPanel641.setMinimumSize(new java.awt.Dimension(82, 37));
                jPanel641.setLayout(new java.awt.GridBagLayout());

                searchButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
                searchButton2.setToolTipText("Search");
                searchButton2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                searchButton2.setMaximumSize(new java.awt.Dimension(74, 53));
                searchButton2.setMinimumSize(new java.awt.Dimension(74, 53));
                searchButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                searchButton2.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        searchButton2ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
                jPanel641.add(searchButton2, gridBagConstraints);

                schemeNameTxt.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel641.add(schemeNameTxt, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
                jPanel2.add(jPanel641, gridBagConstraints);

                jLabel10.setText("Account No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel2.add(jLabel10, gridBagConstraints);

                accountNoTxt.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
                jPanel2.add(accountNoTxt, gridBagConstraints);

                jLabel8.setText("Invoice No");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel2.add(jLabel8, gridBagConstraints);

                invoiceNoTxt.setText("-");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
                jPanel2.add(invoiceNoTxt, gridBagConstraints);

                jLabel19.setText("Claim Number");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
                jPanel2.add(jLabel19, gridBagConstraints);

                jLabel20.setText("Unutilised Scheme Deposit");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel2.add(jLabel20, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel2.add(claimNumberTxt, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
                jPanel2.add(cardNumberTxt, gridBagConstraints);

                tickChk.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
                tickChk.setForeground(new java.awt.Color(204, 0, 0));
                tickChk.setText("Tick ALL");
                tickChk.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                tickChk.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        tickChkActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 6;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel2.add(tickChk, gridBagConstraints);

                jLabel22.setText("Patient DMU Debt");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
                jPanel2.add(jLabel22, gridBagConstraints);

                totalDepositBalTxt.setEditable(false);
                totalDepositBalTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                totalDepositBalTxt.setForeground(new java.awt.Color(0, 0, 204));
                totalDepositBalTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                totalDepositBalTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 6;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel2.add(totalDepositBalTxt, gridBagConstraints);

                jLabel23.setText("Patient's Unutilized Deposit");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
                jPanel2.add(jLabel23, gridBagConstraints);

                refundTxt.setEditable(false);
                refundTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                refundTxt.setForeground(new java.awt.Color(0, 0, 204));
                refundTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                refundTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 6;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel2.add(refundTxt, gridBagConstraints);

                jPanel6.setBackground(new java.awt.Color(255, 204, 204));
                jPanel6.setLayout(new java.awt.GridBagLayout());

                searchByNameChk.setBackground(new java.awt.Color(255, 204, 204));
                buttonGroup1.add(searchByNameChk);
                searchByNameChk.setText("Search By Name");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 50, 0, 0);
                jPanel6.add(searchByNameChk, gridBagConstraints);

                searchByNoChk.setBackground(new java.awt.Color(255, 204, 204));
                buttonGroup1.add(searchByNoChk);
                searchByNoChk.setSelected(true);
                searchByNoChk.setText("Search By No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel6.add(searchByNoChk, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                jPanel2.add(jPanel6, gridBagConstraints);

                jLabel24.setText("Scheme Balance After Utilisation");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel2.add(jLabel24, gridBagConstraints);

                jLabel25.setText("Card/Referral No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel2.add(jLabel25, gridBagConstraints);

                unutilisedSchemeDepositTxt.setEditable(false);
                unutilisedSchemeDepositTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                unutilisedSchemeDepositTxt.setForeground(new java.awt.Color(0, 0, 204));
                unutilisedSchemeDepositTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                unutilisedSchemeDepositTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 6;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel2.add(unutilisedSchemeDepositTxt, gridBagConstraints);

                schemeBalAfterUtilisationTxt.setEditable(false);
                schemeBalAfterUtilisationTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                schemeBalAfterUtilisationTxt.setForeground(new java.awt.Color(0, 0, 204));
                schemeBalAfterUtilisationTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                schemeBalAfterUtilisationTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 6;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel2.add(schemeBalAfterUtilisationTxt, gridBagConstraints);

                jLabel26.setText("Patient Refund");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
                jPanel2.add(jLabel26, gridBagConstraints);

                dmuBalanceTxt.setEditable(false);
                dmuBalanceTxt.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                dmuBalanceTxt.setForeground(new java.awt.Color(204, 0, 0));
                dmuBalanceTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                dmuBalanceTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 6;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel2.add(dmuBalanceTxt, gridBagConstraints);

                utilizeDepositChkbx.setText("Utilize Deposit");
                utilizeDepositChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel2.add(utilizeDepositChkbx, gridBagConstraints);

                jLabel16.setText("Co-Payments");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel2.add(jLabel16, gridBagConstraints);

                coPaymentsTxt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
                coPaymentsTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
                coPaymentsTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
                jPanel2.add(coPaymentsTxt, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.gridwidth = 8;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.ipady = -10;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel1.add(jPanel2, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.gridwidth = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                jPanel1.add(jSeparator1, gridBagConstraints);

                totalAmountTxt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
                totalAmountTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                totalAmountTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 10);
                jPanel1.add(totalAmountTxt, gridBagConstraints);

                jLabel6.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
                jLabel6.setText("Total Amount");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 5;
                jPanel1.add(jLabel6, gridBagConstraints);

                viewTable.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                    },
                    new String [] {
                        "Date", "Patient No", "Scheme", "Amount"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }
                });
                viewTable.setShowHorizontalLines(false);
                javax.swing.table.TableColumn column12 = null;
                for (int i = 0; i < 4; i++) {
                    column12 = viewTable.getColumnModel().getColumn(i);
                    if (i == 0) {

                        column12.setPreferredWidth(100); //sport column is bigger
                    } else {
                        if (i == 1) {
                            column12.setPreferredWidth(200);
                        } else {
                            if (i == 2) {
                                column12.setPreferredWidth(300);
                            }  else
                            column12.setPreferredWidth(100);

                        }
                    }
                }
                viewTable.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        viewTableMouseClicked(evt);
                    }
                });
                jScrollPane12.setViewportView(viewTable);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.gridwidth = 8;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 500.0;
                gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
                jPanel1.add(jScrollPane12, gridBagConstraints);

                jLabel51.setText("Start Date");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel1.add(jLabel51, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.ipadx = 20;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel1.add(beginDate, gridBagConstraints);

                jLabel62.setText("End Date");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
                jPanel1.add(jLabel62, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel1.add(endDate, gridBagConstraints);

                jCheckBox2.setForeground(new java.awt.Color(0, 0, 255));
                jCheckBox2.setText("View by Scheme");
                jCheckBox2.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jCheckBox2ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 6;
                gridBagConstraints.gridy = 0;
                jPanel1.add(jCheckBox2, gridBagConstraints);

                jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("For Deposit utilization,type the amount to be utilized and click \"Utilize Patient Deposit/Print Final Invoice\""));
                jPanel3.setLayout(new java.awt.GridBagLayout());

                finalizeInvoiceBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
                finalizeInvoiceBtn.setMnemonic('O');
                finalizeInvoiceBtn.setText("Finalise Invoice");
                finalizeInvoiceBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        finalizeInvoiceBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel3.add(finalizeInvoiceBtn, gridBagConstraints);

                jButton3.setMnemonic('R');
                jButton3.setText("Refresh");
                jButton3.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton3ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel3.add(jButton3, gridBagConstraints);

                jButton6.setMnemonic('r');
                jButton6.setText("Remove Row");
                jButton6.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton6ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.weightx = 1.0;
                jPanel3.add(jButton6, gridBagConstraints);

                jButton4.setMnemonic('C');
                jButton4.setText("Close");
                jButton4.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton4ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel3.add(jButton4, gridBagConstraints);

                jButton5.setMnemonic('h');
                jButton5.setText("Help");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 6;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel3.add(jButton5, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 500.0;
                gridBagConstraints.weighty = 1.0;
                jPanel3.add(jLabel18, gridBagConstraints);

                utlizeDepositBtn.setText("Utilize Patient Deposit/Print Final Invoice");
                utlizeDepositBtn.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        utlizeDepositBtnActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 6;
                jPanel3.add(utlizeDepositBtn, gridBagConstraints);

                utilizedepositTxt.setForeground(new java.awt.Color(255, 0, 0));
                utilizedepositTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                utilizedepositTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel3.add(utilizedepositTxt, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.gridwidth = 8;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                jPanel1.add(jPanel3, gridBagConstraints);

                totalDiscountTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                totalDiscountTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
                jPanel1.add(totalDiscountTxt, gridBagConstraints);

                jLabel9.setText("Discount");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 5;
                jPanel1.add(jLabel9, gridBagConstraints);

                jLabel12.setText("Net Total");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.weightx = 1.0;
                jPanel1.add(jLabel12, gridBagConstraints);

                totalNetTxt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
                totalNetTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                totalNetTxt.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 6;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.ipadx = 3;
                gridBagConstraints.weightx = 1.0;
                jPanel1.add(totalNetTxt, gridBagConstraints);

                jPanel642.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Scheme/Debtor"));
                jPanel642.setMinimumSize(new java.awt.Dimension(82, 37));
                jPanel642.setLayout(new java.awt.GridBagLayout());

                searchButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
                searchButton3.setToolTipText("Search");
                searchButton3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                searchButton3.setMaximumSize(new java.awt.Dimension(74, 53));
                searchButton3.setMinimumSize(new java.awt.Dimension(74, 53));
                searchButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                searchButton3.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        searchButton3ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
                jPanel642.add(searchButton3, gridBagConstraints);

                schemeNameTxt1.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel642.add(schemeNameTxt1, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 2.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
                jPanel1.add(jPanel642, gridBagConstraints);

                viewAllChkbx.setForeground(new java.awt.Color(255, 0, 51));
                viewAllChkbx.setText("View ALL");
                viewAllChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                viewAllChkbx.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        viewAllChkbxActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 7;
                gridBagConstraints.gridy = 0;
                jPanel1.add(viewAllChkbx, gridBagConstraints);

                jTabbedPane1.addTab("Out Patients", jPanel1);

                jPanel11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
                jPanel11.setLayout(new java.awt.GridBagLayout());

                jTable11.setModel(new javax.swing.table.DefaultTableModel(
                    new Object [][] {
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null},
                        {null, null, null, null, null, null}
                    },
                    new String [] {
                        "Description", "Gross", "Discount", "Disc. Amt", "Net Amt.", "Items To Claim"
                    }
                ) {
                    Class[] types = new Class [] {
                        java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.Boolean.class
                    };
                    boolean[] canEdit = new boolean [] {
                        false, false, true, true, false, true
                    };

                    public Class getColumnClass(int columnIndex) {
                        return types [columnIndex];
                    }

                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return canEdit [columnIndex];
                    }
                });
                jTable11.setShowHorizontalLines(false);
                /*       cmbox2 = new javax.swing.JComboBox();

                try {

                    crset1.setConnectionSource(pConnDB);
                    crset1.execute("select description from st_stock_item");

                    cmbox2.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(crset1, "description", null, null,null));

                    javax.swing.table.TableColumn seditor = this.jTable1.getColumn("Product");

                    seditor.setCellEditor(new javax.swing.DefaultCellEditor(cmbox2));

                    cmbox2.addActionListener(new java.awt.event.ActionListener() {

                        public void actionPerformed(java.awt.event.ActionEvent evt) {

                            cmbox2ActionPerformed(evt);
                        }
                    });
                } catch(java.sql.SQLException sqlExec) {

                    javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

                }
                */

                javax.swing.table.TableColumn column1 = null;
                for (int i = 0; i < 4; i++) {
                    column1 = schemeDataTable.getColumnModel().getColumn(i);
                    if (i == 0) {

                        column1.setPreferredWidth(200); //sport column is bigger
                    } else {
                        if (i == 1) {
                            column1.setPreferredWidth(200);
                        } else {
                            if (i == 2) {
                                column1.setPreferredWidth(100);
                            }  else
                            column1.setPreferredWidth(100);

                        }
                    }
                }
                jTable11.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        jTable11MouseClicked(evt);
                    }
                });
                jTable11.addKeyListener(new java.awt.event.KeyAdapter() {
                    public void keyReleased(java.awt.event.KeyEvent evt) {
                        jTable11KeyReleased(evt);
                    }
                });
                jScrollPane11.setViewportView(jTable11);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.gridwidth = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 15.0;
                gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                jPanel11.add(jScrollPane11, gridBagConstraints);

                jPanel21.setLayout(new java.awt.GridBagLayout());

                jLabel11.setText("Scheme Name");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel21.add(jLabel11, gridBagConstraints);

                jLabel21.setText("Scheme Member No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel21.add(jLabel21, gridBagConstraints);

                jTextField11.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel21.add(jTextField11, gridBagConstraints);

                jLabel31.setText("Patient No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel21.add(jLabel31, gridBagConstraints);

                jLabel41.setText("Patient Name");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel21.add(jLabel41, gridBagConstraints);

                jTextField21.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel21.add(jTextField21, gridBagConstraints);

                jLabel71.setText("Scheme Payer");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 2;
                jPanel21.add(jLabel71, gridBagConstraints);

                jTextField41.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel21.add(jTextField41, gridBagConstraints);

                jLabel81.setText("Department");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 4;
                jPanel21.add(jLabel81, gridBagConstraints);

                jTextField51.setEditable(false);
                jTextField51.setMinimumSize(new java.awt.Dimension(0, 0));
                jTextField51.setPreferredSize(new java.awt.Dimension(0, 0));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 3;
                jPanel21.add(jTextField51, gridBagConstraints);

                jLabel91.setText("Acc No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 3;
                jPanel21.add(jLabel91, gridBagConstraints);

                jTextField61.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel21.add(jTextField61, gridBagConstraints);

                jPanel41.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                jPanel41.setLayout(new java.awt.GridBagLayout());

                jTextField91.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel41.add(jTextField91, gridBagConstraints);

                searchButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
                searchButton1.setToolTipText("Search");
                searchButton1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                searchButton1.setMaximumSize(new java.awt.Dimension(74, 53));
                searchButton1.setMinimumSize(new java.awt.Dimension(74, 53));
                searchButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                searchButton1.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        searchButton1ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 2;
                jPanel41.add(searchButton1, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel21.add(jPanel41, gridBagConstraints);

                jTextField71.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel21.add(jTextField71, gridBagConstraints);

                jTextField10.setEditable(false);
                jTextField10.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jTextField10ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                jPanel21.add(jTextField10, gridBagConstraints);

                jLabel13.setText("Admission Date");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel21.add(jLabel13, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel21.add(datePicker11, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel21.add(datePicker12, gridBagConstraints);

                jLabel14.setText("Discharge date");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                jPanel21.add(jLabel14, gridBagConstraints);

                jLabel2122.setText("Visit No.");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                jPanel21.add(jLabel2122, gridBagConstraints);

                jTextField16.setEditable(false);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                jPanel21.add(jTextField16, gridBagConstraints);

                buttonGroup2.add(jCheckBox6);
                jCheckBox6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                jCheckBox6.setForeground(new java.awt.Color(102, 0, 102));
                jCheckBox6.setText("Un Tick All");
                jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jCheckBox6ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                gridBagConstraints.weightx = 1.0;
                jPanel21.add(jCheckBox6, gridBagConstraints);

                buttonGroup2.add(jCheckBox4);
                jCheckBox4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
                jCheckBox4.setForeground(new java.awt.Color(0, 0, 255));
                jCheckBox4.setText("Tick All");
                jCheckBox4.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jCheckBox4ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                gridBagConstraints.weightx = 1.0;
                jPanel21.add(jCheckBox4, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridwidth = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 5.0;
                jPanel11.add(jPanel21, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.gridwidth = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                jPanel11.add(jSeparator11, gridBagConstraints);

                jTextField31.setEditable(false);
                jTextField31.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                jTextField31.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel11.add(jTextField31, gridBagConstraints);

                jLabel61.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
                jLabel61.setText("Total");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.weightx = 1.0;
                jPanel11.add(jLabel61, gridBagConstraints);

                jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
                jPanel5.setLayout(new java.awt.GridBagLayout());

                jButton11.setMnemonic('O');
                jButton11.setText("Finalise Invoice");
                jButton11.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton11ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel5.add(jButton11, gridBagConstraints);

                jButton31.setMnemonic('R');
                jButton31.setText("Refresh");
                jButton31.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton31ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel5.add(jButton31, gridBagConstraints);

                jButton41.setMnemonic('C');
                jButton41.setText("Close");
                jButton41.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jButton41ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel5.add(jButton41, gridBagConstraints);

                jButton51.setMnemonic('h');
                jButton51.setText("Help");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel5.add(jButton51, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.gridwidth = 6;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jPanel11.add(jPanel5, gridBagConstraints);

                jLabel15.setText("Discount Amt");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.weightx = 1.0;
                jPanel11.add(jLabel15, gridBagConstraints);

                jTextField17.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                jTextField17.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                jPanel11.add(jTextField17, gridBagConstraints);

                jLabel17.setText("Net value");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.weightx = 1.0;
                jPanel11.add(jLabel17, gridBagConstraints);

                jTextField18.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
                jTextField18.setText("0.00");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 1.0;
                jPanel11.add(jTextField18, gridBagConstraints);

                jTabbedPane1.addTab("Inpatients", jPanel11);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                getContentPane().add(jTabbedPane1, gridBagConstraints);

                setBounds(0, 0, 1260, 510);
            }// </editor-fold>//GEN-END:initComponents

    private void jTable11KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable11KeyReleased
        if (jTable11.getValueAt(jTable11.getSelectedRow(), 2) != null) {
            if (jTable11.getModel().getValueAt(jTable11.getSelectedRow(), 2) != null) {
                if (jTable11.getSelectedColumn() == jTable11.getSelectedColumn()) {
                    float grossTotal = java.lang.Float.parseFloat(jTextField31.getText().toString());

                    float gross = java.lang.Float.parseFloat(jTable11.getValueAt(jTable11.getSelectedRow(), 1).toString());

                    float Disc = java.lang.Float.parseFloat(jTable11.getValueAt(jTable11.getSelectedRow(), 2).toString());

                    float total = gross - java.lang.Math.round((gross) * Disc / 100);
                    float totalDisc = java.lang.Math.round((gross) * Disc / 100);
                    jTable11.setValueAt(totalDisc, jTable11.getSelectedRow(), 3);
                    jTable11.setValueAt(total, jTable11.getSelectedRow(), 4);
                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable11, 4);
                    double totalSumDisc = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable11, 3);
                    jTextField17.setText(java.lang.String.valueOf(totalSumDisc));
                    jTextField18.setText(java.lang.String.valueOf(grossTotal - totalSumDisc));

                }
            }
        } else {
            if (jTable11.getValueAt(jTable11.getSelectedRow(), 3) != null) {
                if (jTable11.getModel().getValueAt(jTable11.getSelectedRow(), 3) != null) {
                    if (jTable11.getSelectedColumn() == jTable11.getSelectedColumn()) {
                        float grossTotal = java.lang.Float.parseFloat(jTextField31.getText().toString());

                        float gross = java.lang.Float.parseFloat(jTable11.getValueAt(jTable11.getSelectedRow(), 1).toString());

                        float Disc = java.lang.Float.parseFloat(jTable11.getValueAt(jTable11.getSelectedRow(), 3).toString());

                        float total = gross - Disc;
                        float totalDisc = Disc;
                        jTable11.setValueAt(totalDisc, jTable11.getSelectedRow(), 3);
                        jTable11.setValueAt(total, jTable11.getSelectedRow(), 4);
                        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable11, 4);
                        double totalSumDisc = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable11, 3);
                        // jTextField17.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSumDisc));
                        // jTextField18.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(grossTotal-totalSumDisc));
                        jTextField17.setText(java.lang.String.valueOf(totalSumDisc));
                        jTextField18.setText(java.lang.String.valueOf(grossTotal - totalSumDisc));

                    }
                }
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable11KeyReleased

    private void jButton521ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton521ActionPerformed
        jSearchDialog21.dispose();      // Add your handling code here:
    }//GEN-LAST:event_jButton521ActionPerformed

    private void jSearchTable21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable21MouseClicked
        String payer = null;
        String scm = null;
        String accno = null;
        String date = null;
        String cat = null;
        String code = null;
        jTextField11.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 1).toString());
        jTextField91.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 0).toString());
        jTextField16.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 2).toString());

        java.text.DateFormat df = java.text.DateFormat.getDateInstance();

        java.text.SimpleDateFormat sdf = (java.text.SimpleDateFormat) df;

        sdf.applyPattern("yyyy-MM-dd");

        try {
            datePicker12.setDate(sdf.parse(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 3).toString()));
            datePicker11.setDate(sdf.parse(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 4).toString()));
        } catch (java.text.ParseException pe) {
            javax.swing.JOptionPane.showMessageDialog(this, pe.getMessage());
        }
        //jTextField21.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 2).toString());
        //jTextField71.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 3).toString());

        try {
            //
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select account_no, description,payer from hp_inpatient_register where patient_no ILIKE '" + jTextField91.getText() + "%'");
            while (rset.next()) {
                // jComboBox6.setSelectedItem(rset.getObject(1).toString());
                payer = dbObject.getDBObject(rset.getObject(3), "-");
                scm = dbObject.getDBObject(rset.getObject(2), "-");
                accno = dbObject.getDBObject(rset.getObject(1), "-");
                jTextField21.setText(accno);
                jTextField71.setText(scm);
                jTextField41.setText(payer);

            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Insert not successful");
        }

        try {

            java.sql.Statement pss1 = connectDB.createStatement();
            java.sql.ResultSet rset11 = pss1.executeQuery("select account_no from ac_schemes where scheme_name = '" + jTextField71.getText() + "' and payer_name = '" + jTextField41.getText() + "'");
            while (rset11.next()) {
                code = dbObject.getDBObject(rset11.getObject(1), "-");

                jTextField10.setText(code);
                // jTextField51.setText(date);
                // jTextField61.setText(cat);
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("select not successful");
        }

        try {

            java.sql.Statement pss1 = connectDB.createStatement();
            java.sql.ResultSet rset1 = pss1.executeQuery("select account_no,expiry_date,category from hp_inpatient_register where patient_no = '" + jTextField91.getText() + "'");
            while (rset1.next()) {
                cat = dbObject.getDBObject(rset1.getObject(3), "-");
                date = dbObject.getDBObject(rset1.getObject(2), null);
                accno = dbObject.getDBObject(rset1.getObject(1), "-");

                jTextField21.setText(accno);
                jTextField51.setText(date);
                jTextField61.setText(cat);
            }

            java.sql.Statement pss11 = connectDB.createStatement();
            java.sql.ResultSet rss11 = pss11.executeQuery("select round(sum(debit-credit),2) from hp_patient_card where patient_no = '" + jTextField91.getText() + "' AND visit_id = '" + jTextField16.getText() + "' AND (invoice_no NOT LIKE 'I%' OR invoice_no NOT LIKE 'O%')");
            while (rss11.next()) {
                // jTextField2.setText(rss1.getObject(1).toString());
                jTextField31.setText(rss11.getObject(1).toString());
                jTextField18.setText(rss11.getObject(1).toString());
            }
        } catch (java.sql.SQLException sqlex) {
            javax.swing.JOptionPane.showMessageDialog(this, sqlex.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }
        for (int k = 0; k < jTable11.getRowCount(); k++) {
            for (int r = 0; r < jTable11.getColumnCount(); r++) {
                jTable11.getModel().setValueAt(null, k, r);
            }
        }
        this.populateTable2(jTextField91.getText());

        jSearchDialog21.dispose();   // Add your handling code here:
    }//GEN-LAST:event_jSearchTable21MouseClicked
    private void populateTable2(java.lang.String patient_no) {

        int i = 0;
        int j = 0;
        try {
            java.sql.Statement stmt = connectDB.createStatement();

            java.sql.ResultSet rset = stmt.executeQuery("SELECT count(patient_no) FROM hp_patient_card WHERE patient_no = '" + patient_no + "' AND visit_id = '" + jTextField16.getText() + "'");

            while (rset.next()) {
                j = rset.getInt(1);
            }
            if (j > 0) {
                java.sql.Statement stmtTable1 = connectDB.createStatement();
                java.sql.Statement stmtTable11 = connectDB.createStatement();

                //       java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select date::date as date,service,dosage as quantity,debit-credit as amount FROM hp_patient_card WHERE patient_no ='"+jTextField91.getText()+"' and paid = false AND (invoice_no NOT ILIKE 'O%' OR invoice_no NOT ILIKE 'I%')  AND visit_id = '"+jTextField16.getText()+"'");
                java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select service,sum(debit-credit) as amount,false::boolean as bill FROM hp_patient_card WHERE patient_no ='" + jTextField91.getText() + "' AND (invoice_no NOT ILIKE 'O%' OR invoice_no NOT ILIKE 'I%')  AND visit_id = '" + jTextField16.getText() + "' GROUP BY service,3");

                while (rsetTable1.next()) {

                    System.out.println("Working at table row " + i);
                    jTable11.setValueAt(rsetTable1.getObject(1), i, 0);
                    jTable11.setValueAt(rsetTable1.getObject(2), i, 1);
                    jTable11.setValueAt(rsetTable1.getObject(2), i, 4);
                    jTable11.setValueAt(rsetTable1.getObject(3), i, 5);

                    i++;

                    //                i = i + i;
                    //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
                }
                // java.sql.Statement stmtTable11 = connectDB.createStatement();

                /*
                 * java.sql.ResultSet rsetTable11 =
                 * stmtTable11.executeQuery("select date::date as
                 * date,service,dosage as quantity,debit-credit as amount FROM
                 * hp_patient_card WHERE patient_no
                 * ='"+jTextField91.getText()+"' and paid = false AND
                 * (invoice_no NOT ILIKE 'O%' OR invoice_no NOT ILIKE 'I%') AND
                 * visit_id = '"+jTextField16.getText()+"'");
                 *
                 * while (rsetTable11.next()) {
                 *
                 * jTextField22.setText(rsetTable11.getString(1)); }
                 */
            }

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

    }
    private void jTextField1131CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1131CaretUpdate
        jSearchTable21.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select patient_no as pat_no,patient_name as name,visit_id,date_admitted::date as date_admitted,discharge_date::date AS date_discharged from hp_admission where patient_no ILIKE '" + jTextField1131.getText() + "%' AND mode_of_payment = 'Scheme' UNION ALL SELECT annual_no,patient_name,annual_no,date_received,discharge_date FROM hp_mortuary WHERE annual_no ILIKE '" + jTextField1131.getText() + "%' AND discharged = false order by 1"));

        jSearchScrollPane21.setViewportView(jSearchTable21);
        System.out.println("Cannot sort out");

        // Add your handling code here:
    }//GEN-LAST:event_jTextField1131CaretUpdate

    private void jButton41ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton41ActionPerformed
        this.setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_jButton41ActionPerformed

    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton31ActionPerformed
//        this.getContentPane().removeAll();
        //        this.initComponents();        // Add your handling code here:
    }//GEN-LAST:event_jButton31ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        java.util.Date periodFrom = null;
        java.util.Date periodTo = null;

        try {

            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + datePicker11.getDate() + "' BETWEEN period_from AND period_to");
            while (rsetf.next()) {
                periodFrom = rsetf.getDate(1);
                periodTo = rsetf.getDate(2);
            }

        } catch (java.sql.SQLException sq) {
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());

        }

        if (datePicker12.getDate().before(periodFrom) || datePicker11.getDate().after(periodTo)) {
            javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        } else {
            if (jTable11.isEditing()) {
                jTable11.getCellEditor().stopCellEditing();
            }

            java.util.Calendar calendar = java.util.Calendar.getInstance();

            long dateNow = calendar.getTimeInMillis();

            java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

            System.out.println(datenowSql1.toString());

            java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

            System.out.println(datenowSql.toString());
            //      try{
            String receiptNo = null;
            String actCode = null;
            String glCode = null;
            java.sql.Date DischDate = null;
            String glCode1 = null;
            String bankAcc1 = null;
            String transNo = null;
            String payMode = null;
            String patCat = null;
            String patientAcc = null;
            String cardNo = null;
            String scheme = null;
            String cardName = null;
            String isurer = null;
            String expDate = null;
            String staffNo = null;
            String actNames = null;
            String user = null;
            String actNames1 = null;
            String actCode1 = null;
            String invoiceNo = null;
            String visitid = null;
            com.afrisoftech.lib.InvoiceNumbers.invoiceType = true;
            int exitOption = javax.swing.JOptionPane.showConfirmDialog(this, "Do you want to Finalise Invoice?", "Caution before Finalising Invoice!", javax.swing.JOptionPane.YES_NO_CANCEL_OPTION);

            if (exitOption == javax.swing.JOptionPane.YES_OPTION) {

                try {
                    connectDB.setAutoCommit(false);

                    java.sql.Statement stm1 = connectDB.createStatement();

                    java.sql.ResultSet rse1 = stm1.executeQuery("select pay_mode,payer,account_no,description,category from hp_inpatient_register where patient_no ='" + jTextField91.getText() + "'");// UNION ALL select pay_mode,payer,account_no,description,category from hp_patient_register where patient_no ='"+jTextField91.getText()+"'");
                    while (rse1.next()) {

                        payMode = dbObject.getDBObject(rse1.getObject(1), "-");
                        cardNo = dbObject.getDBObject(rse1.getObject(3), "-");
                        scheme = dbObject.getDBObject(rse1.getObject(4), "-");
                        isurer = dbObject.getDBObject(rse1.getObject(2), "-");
                        patCat = dbObject.getDBObject(rse1.getObject(5), "-");
                    }
                    java.sql.Statement stm11 = connectDB.createStatement();

                    java.sql.ResultSet rse11 = stm11.executeQuery("select discharge_date from hp_inpatient_register where patient_no ='" + jTextField91.getText() + "'");// UNION ALL select pay_mode,payer,account_no,description,category from hp_patient_register where patient_no ='"+jTextField91.getText()+"'");
                    while (rse11.next()) {
                        DischDate = rse11.getDate(1);
                    }
                    java.sql.Statement pss1 = connectDB.createStatement();
                    // java.sql.ResultSet rss1 = pss1.executeQuery("select 'I'||(nextval('ipinvoice_no_seq'))");
                    // while (rss1.next()){
                    //     invoiceNo = rss1.getObject(1).toString();
                    invoiceNo = com.afrisoftech.lib.InvoiceNumbers.getInvoiceNumber();
                    // }
                    java.sql.Statement pss12 = connectDB.createStatement();
                    java.sql.ResultSet rsts11 = pss12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                    while (rsts11.next()) {
                        actCode = rsts11.getObject(1).toString();
                        actNames = rsts11.getObject(2).toString();
                    }
                    java.sql.Statement pss11 = connectDB.createStatement();
                    java.sql.ResultSet rsts1 = pss11.executeQuery("select code,activity from pb_activity where activity_category ='DA'");
                    while (rsts1.next()) {
                        actCode1 = rsts1.getObject(1).toString();
                        actNames1 = rsts1.getObject(2).toString();

                    }

                    java.sql.Statement pss11x = connectDB.createStatement();
                    java.sql.ResultSet rsts1x = pss11x.executeQuery("select current_user");
                    while (rsts1x.next()) {
                        user = rsts1x.getObject(1).toString();
                    }
                    java.sql.Statement pss = connectDB.createStatement();
                    java.sql.ResultSet rss = pss.executeQuery("select nextval('transaction_no_seq')");
                    while (rss.next()) {
                        transNo = rss.getObject(1).toString();
                    }
//                double totalSum = java.lang.Double.parseDouble(jTextField18.getText());
                    java.sql.Statement pssq = connectDB.createStatement();
                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                    pstmt.setString(1, jTextField91.getText());
                    pstmt.setObject(2, "Invoice");
                    pstmt.setString(3, "");
                    pstmt.setString(4, "Scheme");
                    pstmt.setString(5, transNo);
                    pstmt.setString(7, jTextField71.getText());
                    pstmt.setString(6, "");
                    pstmt.setString(8, "");
                    pstmt.setString(9, jTextField41.getText());
                    pstmt.setDate(10, null);
                    pstmt.setString(11, "");
                    pstmt.setDouble(13, java.lang.Double.valueOf(jTextField18.getText()));
                    pstmt.setDouble(12, 0.00);
                    pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()));
                    pstmt.setObject(15, actCode);
                    pstmt.setString(16, "Invoice");
                    pstmt.setDouble(17, 1.00);
                    pstmt.setObject(18, jTextField21.getText());
                    pstmt.setBoolean(19, true);
                    pstmt.setString(20, "Receipts");
                    pstmt.setBoolean(21, true);
                    pstmt.setString(22, actNames);
                    pstmt.setString(23, invoiceNo);
                    pstmt.setString(24, user);
                    pstmt.setString(25, transNo);
                    pstmt.setString(26, "IP");
                    pstmt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                    pstmt.setString(28, jTextField16.getText());
                    pstmt.executeUpdate();

                    java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_debtors values(?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?, ?,?,?,?,?,?, ?,?,?,?,?,?)");
                    pstmt2.setObject(1, actCode1);
                    pstmt2.setString(4, jTextField91.getText());
                    pstmt2.setObject(3, jTextField11.getText());
                    pstmt2.setString(2, jTextField41.getText());
                    pstmt2.setString(5, jTextField71.getText());
                    pstmt2.setString(6, "");
                    pstmt2.setString(7, jTextField10.getText());
                    pstmt2.setString(8, "");
                    pstmt2.setString(9, "");
                    pstmt2.setString(10, jTextField21.getText());
                    pstmt2.setString(11, transNo);
                    pstmt2.setString(12, "Raise Invoice");
                    pstmt2.setDouble(13, java.lang.Double.valueOf(jTextField18.getText()));
                    pstmt2.setDouble(14, 0.00);
                    pstmt2.setDate(15, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()));
                    pstmt2.setObject(16, invoiceNo);
                    pstmt2.setString(17, actNames1);
                    pstmt2.setBoolean(18, true);
                    pstmt2.setBoolean(19, true);
                    pstmt2.setString(20, user);
                    pstmt2.setString(21, "");
                    pstmt2.setDouble(22, java.lang.Double.valueOf(jTextField18.getText()));
                    pstmt2.setBoolean(23, false);
                    pstmt2.setDouble(24, 0.00);
                    pstmt2.setObject(25, "");
                    pstmt2.setObject(26, null);
                    pstmt2.setBoolean(27, false);
                    pstmt2.setDouble(28, 0.00);
                    pstmt2.setObject(29, null);
                    pstmt2.setString(30, "");
                    pstmt2.setBoolean(31, false);
                    pstmt2.setDouble(32, 0.00);
                    pstmt2.setObject(33, null);
                    pstmt2.setString(34, "");
                    pstmt2.setString(35, jTextField21.getText());
                    pstmt2.executeUpdate();

                    java.sql.PreparedStatement pstmt12 = connectDB.prepareStatement("UPDATE hp_admission SET invoice_no = '" + invoiceNo + "',balance = '" + jTextField18.getText() + "',check_out = true where patient_no = '" + this.jTextField91.getText() + "' AND visit_id = '" + jTextField16.getText() + "'");
                    pstmt12.executeUpdate();

                    for (int i = 0; i < jTable11.getRowCount(); i++) {
                        //    invoiceNo = com.afrisoftech.lib.InvoiceNumbers.getInvoiceNumber();
                        if (jTable11.getModel().getValueAt(i, 4) != null) {
                            if (Boolean.valueOf(jTable11.getValueAt(i, 5).toString()) == java.lang.Boolean.TRUE) {
                                java.sql.PreparedStatement pstmt21 = connectDB.prepareStatement("UPDATE hp_patient_card set"
                                        + " paid = true,invoice_no = '" + invoiceNo + "' WHERE patient_no = '" + jTextField91.getText() + "'"
                                        + " AND visit_id = '" + jTextField16.getText() + "'"
                                        + " AND service ILIKE '" + jTable11.getModel().getValueAt(i, 0) + "' AND invoice_no NOT ILIKE 'I%'");
                                pstmt21.executeUpdate();
                            }
                        }
                    }

                    java.sql.PreparedStatement pstmt21x = connectDB.prepareStatement("UPDATE ac_doctors_ledger set pat_inv = '" + invoiceNo + "' WHERE patient_no = '" + jTextField91.getText() + "' AND input_date between '" + datePicker12.getDate() + "' AND '" + datePicker11.getDate() + "'");
                    pstmt21x.executeUpdate();
                    for (int i = 0; i < jTable11.getRowCount(); i++) {
                        if (jTable11.getModel().getValueAt(i, 3) != null && jTable11.getModel().getValueAt(i, 0) != null) {

                            float Disc = java.lang.Float.parseFloat(jTable11.getValueAt(i, 3).toString());
                            if (Disc > 0) {

                                String discode = null;
                                String discglAcc = null;
                                java.sql.Statement stm122x = connectDB.createStatement();
                                java.sql.ResultSet rse122x = stm122x.executeQuery("select code,activity from pb_activity where activity_category ='EDS'");
                                while (rse122x.next()) {

                                    discode = rse122x.getObject(1).toString();
                                    discglAcc = rse122x.getObject(2).toString();
                                }

//    java.sql.Statement pssq = connectDB.createStatement();
                                java.sql.PreparedStatement pstmtd = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                pstmtd.setString(1, jTextField91.getText());
                                pstmtd.setObject(2, "Discount " + jTable11.getValueAt(i, 0));
                                pstmtd.setString(3, "");
                                pstmtd.setString(4, "Scheme");
                                pstmtd.setString(5, transNo);
                                pstmtd.setString(7, jTextField71.getText());
                                pstmtd.setString(6, "");
                                pstmtd.setString(8, "");
                                pstmtd.setString(9, jTextField41.getText());
                                pstmtd.setDate(10, null);
                                pstmtd.setString(11, "");
                                pstmtd.setDouble(13, java.lang.Double.valueOf(jTable11.getValueAt(i, 3).toString()));
                                pstmtd.setDouble(12, 0.00);
                                pstmtd.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()));
                                pstmtd.setObject(15, actCode);
                                pstmtd.setObject(16, jTable11.getValueAt(i, 0));
                                pstmtd.setDouble(17, 1.00);
                                pstmtd.setObject(18, jTextField21.getText());
                                pstmtd.setBoolean(19, true);
                                pstmtd.setString(20, "Receipts");
                                pstmtd.setBoolean(21, true);
                                pstmtd.setString(22, actNames);
                                pstmtd.setString(23, invoiceNo);
                                pstmtd.setString(24, user);
                                pstmtd.setString(25, transNo);
                                pstmtd.setString(26, "IP");
                                pstmtd.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                pstmtd.setString(28, jTextField16.getText());
                                pstmtd.executeUpdate();

                                java.sql.PreparedStatement pstmt2x = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                pstmt2x.setObject(1, discode);
                                pstmt2x.setObject(2, jTable11.getValueAt(i, 0).toString());
                                pstmt2x.setString(3, jTextField91.getText());
                                pstmt2x.setString(4, jTextField11.getText());
                                pstmt2x.setString(5, "");
                                pstmt2x.setString(6, cardNo);
                                pstmt2x.setString(7, cardName);
                                pstmt2x.setString(10, "Scheme");
                                pstmt2x.setString(9, isurer);
                                pstmt2x.setString(8, "IP");
                                pstmt2x.setString(11, "");
                                pstmt2x.setString(12, "");
                                pstmt2x.setString(13, "");
                                pstmt2x.setString(14, "Discount " + jTable11.getValueAt(i, 0).toString());
                                pstmt2x.setString(15, "Discount");
                                pstmt2x.setDouble(17, 0.00);
                                pstmt2x.setDouble(16, java.lang.Double.valueOf(jTable11.getValueAt(i, 3).toString()));
                                pstmt2x.setObject(18, datePicker11.getDate().toString());
                                pstmt2x.setString(19, transNo);
                                pstmt2x.setBoolean(20, false);
                                pstmt2x.setBoolean(21, false);
                                pstmt2x.setBoolean(22, false);
                                pstmt2x.setString(23, user);
                                pstmt2x.executeUpdate();
                            }
                        }
                    }

                    connectDB.commit();
                    connectDB.setAutoCommit(true);
                    javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully \n  Inv. No. is " + invoiceNo + " ", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    com.afrisoftech.reports.FinalInPatientlnvPdf policy = new com.afrisoftech.reports.FinalInPatientlnvPdf();
                    policy.FinalInPatientInvPdf(connectDB, invoiceNo);

                    jTextField11.setText("");
                    jTextField21.setText("");
                    jTextField31.setText("");
                    for (int k = 0; k < jTable11.getRowCount(); k++) {
                        for (int r = 0; r < jTable11.getColumnCount(); r++) {
                            jTable11.getModel().setValueAt(null, k, r);
                        }
                    }
                    jTextField31.setText("");
                    //            jComboBox1.setSelectedItem(null);
                    //  jComboBox2.setSelectedItem(null);
                } catch (java.sql.SQLException sq) {

                    try {
                        connectDB.rollback();
                    } catch (java.sql.SQLException sql) {
                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                    System.out.println(sq.getMessage());
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                }
            }

        }

        // Add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jTextField10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField10ActionPerformed
// Add your handling code here:
    }//GEN-LAST:event_jTextField10ActionPerformed

    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        searchButton21Clicked(); // Add your handling code here:
    }//GEN-LAST:event_searchButton1ActionPerformed
    private void searchButton21Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.jTextField11.getLocationOnScreen();

        jSearchDialog21.setSize(400, 200);

        jSearchDialog21.setLocation(point);

        jSearchDialog21.setVisible(true);
    }
    private void schemeDataTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_schemeDataTableKeyReleased
        if (schemeDataTable.getModel().getValueAt(schemeDataTable.getSelectedRow(), 2) != null) {
            if (schemeDataTable.getSelectedColumn() == schemeDataTable.getSelectedColumn()) {
                float qty = java.lang.Float.parseFloat(schemeDataTable.getValueAt(schemeDataTable.getSelectedRow(), 2).toString());
                float price = java.lang.Float.parseFloat(schemeDataTable.getValueAt(schemeDataTable.getSelectedRow(), 3).toString());
                float Disc = java.lang.Float.parseFloat(schemeDataTable.getValueAt(schemeDataTable.getSelectedRow(), 4).toString());

                float total = qty * price;
                float totalDisc = (qty * price) * Disc / 100;
                schemeDataTable.setValueAt(total, schemeDataTable.getSelectedRow(), 6);
                schemeDataTable.setValueAt(totalDisc, schemeDataTable.getSelectedRow(), 5);
                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(schemeDataTable, 6);
                double totalSumDisc = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(schemeDataTable, 5);
                totalDiscountTxt.setText(java.lang.String.valueOf(totalSumDisc));
                totalAmountTxt.setText(java.lang.String.valueOf(totalSum));
                double totalNetSum = 0;
                for (int i = 0; i < schemeDataTable.getRowCount(); i++) {
                    if (Boolean.parseBoolean(schemeDataTable.getValueAt(i, 8).toString())) {
                        totalNetSum = totalNetSum + Double.parseDouble(schemeDataTable.getValueAt(i, 6).toString());
                    }
                }
                totalNetTxt.setText(java.lang.String.valueOf(totalNetSum));
                if (java.lang.Double.valueOf(totalDepositBalTxt.getText()) > 0) {
                    calculateRefund();
                }
            }

        }

        // Add your handling code here:
    }//GEN-LAST:event_schemeDataTableKeyReleased
    public void tableModelTableChanged() {
        System.out.println("Calculating totals for table 11 and 2.");
        //        double resFloat = 0.00;
        double resFloat = 0.00;

        for (int i = 0; i < schemeDataTable.getRowCount(); i++) {

            if (schemeDataTable.getModel().getValueAt(i, 0) != null) {

                resFloat = resFloat + Double.parseDouble(schemeDataTable.getModel().getValueAt(i, 3).toString());

                totalAmountTxt.setText(java.lang.String.valueOf(resFloat));

            } else {
                resFloat = resFloat + Double.parseDouble(schemeDataTable.getModel().getValueAt(i, 3).toString());

                totalAmountTxt.setText(java.lang.String.valueOf(resFloat));

            }
        }
        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked
        //jTextField11.setText("");
        schemeDataTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0), schemeDataTable.getSelectedRow(), 1);
        schemeDataTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1), schemeDataTable.getSelectedRow(), 3);
        schemeDataTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 2), schemeDataTable.getSelectedRow(), 7);
        schemeDataTable.setValueAt(0, schemeDataTable.getSelectedRow(), 4);

        jSearchDialog.dispose();
        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(schemeDataTable, 6);
        double totalSumDisc = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(schemeDataTable, 5);
        totalDiscountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSumDisc));
        totalAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));

        // txtNetTotal.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum - totalSumDisc));
// Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        jSearchDialog.dispose();           // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate
        if (jTextField111.getCaretPosition() < 0) {

            System.out.println("Nothing");
        } else {
            jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select service_type,rate as price,gl_account as gl_code FROM pb_operating_parameters WHERE service_type ILIKE '" + jTextField111.getText() + "%'  order by service_type"));

            jSearchTable.setShowHorizontalLines(false);
            jSearchScrollPane.setViewportView(jSearchTable);

        }  // Add your handling code here:
    }//GEN-LAST:event_jTextField111CaretUpdate

    private void schemeDataTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_schemeDataTableMouseClicked
        if (schemeDataTable.getSelectedColumn() == 1) {
            //this.cmboxMouseClicked();
        } else {

            if (schemeDataTable.getSelectedColumn() == 8) {

                if (Boolean.valueOf(schemeDataTable.getValueAt(schemeDataTable.getSelectedRow(), 8).toString()) == java.lang.Boolean.TRUE) {

                    float qty = java.lang.Float.parseFloat(schemeDataTable.getValueAt(schemeDataTable.getSelectedRow(), 2).toString());
                    float price = java.lang.Float.parseFloat(schemeDataTable.getValueAt(schemeDataTable.getSelectedRow(), 3).toString());
                    schemeDataTable.setValueAt(qty * price, schemeDataTable.getSelectedRow(), 6);
                    if (schemeDataTable.isEditing()) {
                        schemeDataTable.getCellEditor().stopCellEditing();
                    }

                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(schemeDataTable, 6);
                    this.totalNetTxt.setText(java.lang.String.valueOf(totalSum));

                } else {
                    schemeDataTable.setValueAt(0, schemeDataTable.getSelectedRow(), 6);
                    double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(schemeDataTable, 6);
                    this.totalNetTxt.setText(java.lang.String.valueOf(totalSum));
                }
            }
        }
        
        double totalNetSum = 0;
        for (int i = 0; i < schemeDataTable.getRowCount(); i++) {
            if (Boolean.parseBoolean(schemeDataTable.getValueAt(i, 8).toString())) {
                totalNetSum = totalNetSum + Double.parseDouble(schemeDataTable.getValueAt(i, 6).toString());
            }
        }
        totalNetTxt.setText(java.lang.String.valueOf(totalNetSum));
        // Add your handling code here:
    }//GEN-LAST:event_schemeDataTableMouseClicked
    private void cmboxMouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = schemeDataTable.getLocationOnScreen();
        jSearchDialog.setSize(400, 200);
        jSearchDialog.setLocation(point);
        jSearchDialog.setVisible(true);
    }
    private void viewTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewTableMouseClicked
        copaymentsTotal = 0.00;
        todays = viewTable.getValueAt(viewTable.getSelectedRow(), 0).toString();
        this.totalDiscountTxt.setText("0.00");
        //  this.jTextField5.setText("0.00");
        this.unutilisedSchemeDepositTxt.setText("0.00");
        this.dmuBalanceTxt.setText("0.00");
        this.refundTxt.setText("0.00");
        this.schemeBalAfterUtilisationTxt.setText("0.00");
        this.totalDepositBalTxt.setText("0.00");
        this.totalNetTxt.setText("0.00");
        this.coPaymentsTxt.setText("0.00");
        Object serviceDate = viewTable.getValueAt(viewTable.getSelectedRow(), 0);

        String receiptNo = null;
        receiptNo = viewTable.getValueAt(viewTable.getSelectedRow(), 1).toString();
        //  if (jTable12.getSelectedColumn() ==1) {
        this.patientNotxt.setText(receiptNo);
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select (second_name||' '||first_name||' '||last_name) as name,account_no AS staff_no,description AS description from hp_patient_register  where patient_no ='" + patientNotxt.getText() + "'");
            while (rset.next()) {
                // jComboBox6.setSelectedItem(rset.getObject(1).toString());
                patientNameTxt.setText(rset.getObject(1).toString());
                //jTextField2.setText(rset.getObject(2).toString());
                schemeNameTxt.setText(rset.getObject(3).toString());

            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
        }

        String Code = null;
        try {

            java.sql.Statement pss1 = connectDB.createStatement();
            java.sql.ResultSet rset11 = pss1.executeQuery("select account_no,payer_name from ac_schemes where scheme_name = '" + schemeNameTxt.getText() + "'");
            while (rset11.next()) {
                Code = dbObject.getDBObject(rset11.getObject(1), "-");

                accountNoTxt.setText(Code);
                schemePayerTxt.setText(rset11.getObject(2).toString());
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("select not successful");
        }

        double balDeposit = com.afrisoftech.lib.unUtelisedDeposit.getBalanceDeposit(connectDB, patientNotxt.getText());
        unutilisedSchemeDepositTxt.setText(String.valueOf(balDeposit));
        calculateDmu();

        try {

            java.sql.Statement pss11 = connectDB.createStatement();
            java.sql.ResultSet rss11 = pss11.executeQuery("select sum(amount) from patient_bill_scheme where patient_no = '" + patientNotxt.getText() + "' and date_prescribed = '" + viewTable.getValueAt(viewTable.getSelectedRow(), 0) + "'");
            while (rss11.next()) {
                // jTextField2.setText(rss1.getObject(1).toString());
                totalAmountTxt.setText(String.valueOf(rss11.getDouble(1)));
                // txtNetTotal.setText(rss11.getObject(1).toString());
            }

            //Calculate total of all payments (Co-Pay)
            java.sql.PreparedStatement pstmtCopay = connectDB.prepareStatement("SELECT sum(credit-debit) FROM hp_patient_card WHERE patient_no = ? AND (service ilike 'copay%' OR service ilike 'co-pay%') AND date::date = ?::date");
            pstmtCopay.setString(1, patientNotxt.getText());
            pstmtCopay.setObject(2, serviceDate);

            java.sql.ResultSet rsetCopay = pstmtCopay.executeQuery();

            while (rsetCopay.next()) {
                copaymentsTotal = rsetCopay.getDouble(1);
            }
            coPaymentsTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(copaymentsTotal));
        } catch (java.sql.SQLException sqlex) {
            sqlex.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlex.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

            System.out.println(sqlex.getMessage());
        }

        this.populateTable1(patientNotxt.getText());

        // Add your handling code here:
    }//GEN-LAST:event_viewTableMouseClicked

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        this.totalAmountTxt.setText("");
        for (int k = 0; k < viewTable.getRowCount(); k++) {
            for (int r = 0; r < viewTable.getColumnCount(); r++) {
                viewTable.getModel().setValueAt(null, k, r);
            }
        }

        for (int k = 0; k < schemeDataTable.getRowCount(); k++) {
            for (int r = 0; r < schemeDataTable.getColumnCount(); r++) {
                schemeDataTable.getModel().setValueAt(null, k, r);
            }
        }

        int i = 0;
        int j = 0;

        viewTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                + "select distinct date::date,patient_no,scheme,sum(debit-credit)   "
                + " FROM hp_patient_card where ip_no='OP' and scheme !='' and paid=false"
                + " and upper(scheme) = upper('" + schemeNameTxt1.getText() + "') and date between '" + beginDate.getDate().toString() + "'::date and '" + endDate.getDate().toString() + "'::date  "
                + "  group by 1,2,3 having sum(debit-credit)>0 order by patient_no"));

        System.err.println(""
                + "select distinct date::date,patient_no,scheme,sum(debit-credit)   "
                + " FROM hp_patient_card where ip_no='OP' and scheme !='' and paid=false"
                + " and upper(scheme) = upper('" + schemeNameTxt1.getText() + "') and date between '" + beginDate.getDate().toString() + "'::date and '" + endDate.getDate().toString() + "'::date  "
                + "  group by 1,2,3 having sum(debit-credit)>0 order by patient_no");

        accountNoTxt.setText("");

        //  this.populateTable1(jTextField9.getText());        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void dispose11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispose11ActionPerformed
        jSearchDialog11.dispose(); // Add your handling code here:
    }//GEN-LAST:event_dispose11ActionPerformed

    private void jSearchTable11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable11MouseClicked
        schemeNameTxt.setText(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 1).toString());
        schemePayerTxt.setText(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 2).toString());
        accountNoTxt.setText(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 0).toString());

        jSearchDialog11.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable11MouseClicked

    private void searchButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton2ActionPerformed
        searchButton11aClicked();         // Add your handling code here:
    }//GEN-LAST:event_searchButton2ActionPerformed

    private void jTextField1111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1111CaretUpdate
        if (jTextField1111.getCaretPosition() < 1) {

            System.out.println("Nothing");
        } else {
            jSearchTable11.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT account_no,scheme_name,payer_name from ac_schemes where scheme_name ILIKE '%" + jTextField1111.getText() + "%' AND suspended = false and closed = false order by scheme_name"));

            jSearchTable11.setShowHorizontalLines(false);
            jSearchScrollPane11.setViewportView(jSearchTable11);

        }         // Add your handling code here:
    }//GEN-LAST:event_jTextField1111CaretUpdate
    private void searchButton11aClicked() {

        System.out.println("Showing dialog");

        jSearchDialog11.dispose();
        java.awt.Point point = this.schemeNameTxt.getLocationOnScreen();

        jSearchDialog11.setSize(600, 200);

        jSearchDialog11.setLocation(point);
        jSearchDialog11.setVisible(true);
    }

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        int rows2Delete = schemeDataTable.getSelectedRowCount();

        int[] selectedRows = schemeDataTable.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) schemeDataTable.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) schemeDataTable.getModel();

                defTableModel.removeRow(schemeDataTable.getSelectedRow());
            }
        }
        // double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable1, 3);
        //jTextField3.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(schemeDataTable, 6);
        double totalSumDisc = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(schemeDataTable, 5);
        totalDiscountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSumDisc));
        totalAmountTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum));
        //  txtNetTotal.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalSum - totalSumDisc));

        // Add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchButton2Clicked();        // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed
    private void searchButton2Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.patientNotxt.getLocationOnScreen();

        patientDialog.setSize(400, 200);

        patientDialog.setLocation(point);

        patientDialog.setVisible(true);
    }
    private void searchPatientTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchPatientTxtCaretUpdate
        if (this.searchByNameChk.isSelected()) {
            if (this.searchPatientTxt.getCaretPosition() > 4) {
//                System.out.print("Nothing");
//            } else {
                loadPatientDateTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select patient_no as pat_no,(second_name||' '||first_name||' '||last_name) as name,account_no AS staff_no,description AS description from hp_patient_register  where second_name||' '||first_name||' '||last_name ILIKE '" + searchPatientTxt.getText() + "%' AND pay_mode = 'Scheme' order by second_name"));

                loadPatientDateTable.setShowHorizontalLines(false);
                jSearchScrollPane2.setViewportView(loadPatientDateTable);

            }

        } else {

            if (this.searchByNoChk.isSelected()) {
                if (this.searchPatientTxt.getCaretPosition() < 0) {
                    System.out.print("Nothing");
                } else {

                    loadPatientDateTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select patient_no as pat_no,(second_name||' '||first_name||' '||last_name) as name,account_no AS staff_no,description AS description from hp_patient_register  where patient_no ILIKE '" + searchPatientTxt.getText() + "%' AND pay_mode = 'Scheme' order by second_name"));

                    loadPatientDateTable.setShowHorizontalLines(false);
                    jSearchScrollPane2.setViewportView(loadPatientDateTable);

                }

            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_searchPatientTxtCaretUpdate
    private void calculateDmu() {
        try {
            String account_no = null;
            java.sql.Statement stmtDmu = connectDB.createStatement();
            java.sql.ResultSet rsetDmu = stmtDmu.executeQuery("select account_no from ac_debtors where dealer ilike '%DEBT MANAGEMENT UNIT DMU%'");
            while (rsetDmu.next()) {
                account_no = rsetDmu.getString(1);
            }
            dmuBalanceTxt.setText(String.valueOf(com.afrisoftech.lib.unUtelisedDeposit.getDmuBalanceAmount(connectDB, patientNotxt.getText(), account_no)));

        } catch (Exception e) {
        }
    }
    private void loadPatientDateTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadPatientDateTableMouseClicked

        this.totalDiscountTxt.setText("0.00");
        this.totalNetTxt.setText("0.00");
        this.memberNoTxt.setText("");
        this.totalAmountTxt.setText("");
        this.totalDepositBalTxt.setText("0.00");
        this.unutilisedSchemeDepositTxt.setText("0.00");
        this.dmuBalanceTxt.setText("0.00");
        this.refundTxt.setText("0.00");
        this.schemeBalAfterUtilisationTxt.setText("0.00");
        for (int k = 0; k < schemeDataTable.getRowCount(); k++) {
            for (int r = 0; r < schemeDataTable.getColumnCount(); r++) {
                schemeDataTable.getModel().setValueAt(null, k, r);
            }
        }
        accountNoTxt.setText("");

        String code = null;

        patientNameTxt.setText(loadPatientDateTable.getValueAt(loadPatientDateTable.getSelectedRow(), 1).toString());
        patientNotxt.setText(loadPatientDateTable.getValueAt(loadPatientDateTable.getSelectedRow(), 0).toString());
        memberNoTxt.setText(loadPatientDateTable.getValueAt(loadPatientDateTable.getSelectedRow(), 2).toString());
        schemeNameTxt.setText(loadPatientDateTable.getValueAt(loadPatientDateTable.getSelectedRow(), 3).toString());

        patientDialog.dispose();
        String Code = null;

        try {

            java.sql.Statement pss1 = connectDB.createStatement();
            java.sql.ResultSet rset11 = pss1.executeQuery("select account_no,payer_name from ac_schemes where scheme_name = '" + schemeNameTxt.getText() + "'");
            while (rset11.next()) {
                Code = dbObject.getDBObject(rset11.getObject(1), "-");

                accountNoTxt.setText(Code);
                schemePayerTxt.setText(rset11.getObject(2).toString());
            }
            double balDeposit = com.afrisoftech.lib.unUtelisedDeposit.getBalanceDeposit(connectDB, patientNotxt.getText());
            unutilisedSchemeDepositTxt.setText(String.valueOf(balDeposit));
            calculateDmu();
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("select not successful");
        }
//        try {
//
//            java.sql.Statement stmt = connectDB.createStatement();
//            java.sql.ResultSet rset = stmt.executeQuery("select payer from hp_patient_register where patient_no ='" + patientNotxt.getText() + "'");
//            while (rset.next()) {
//                 schemePayerTxt.setText(rset.getObject(1).toString());
//               
//            }
//        } catch (java.sql.SQLException sqe) {
//            sqe.printStackTrace();
//            System.out.println("Insert not successful");
//        }
//
//        try {
//
//            java.sql.Statement pss1 = connectDB.createStatement();
//            java.sql.ResultSet rset11 = pss1.executeQuery("select account_no from ac_schemes where scheme_name = '" + schemeNameTxt.getText() + "' and payer_name = '" + schemePayerTxt.getText() + "'");
//            while (rset11.next()) {
//                code = dbObject.getDBObject(rset11.getObject(1), "-");
//
//
//                accountNoTxt.setText(code);
//            }
//        } catch (java.sql.SQLException sqe) {
//            sqe.printStackTrace();
//            System.out.println("select not successful");
//        }

        try {

            java.sql.Statement pss1 = connectDB.createStatement();
            java.sql.ResultSet rss1 = pss1.executeQuery("select account_no,expiry_date,category from hp_patient_register where patient_no = '" + patientNotxt.getText() + "'");
            while (rss1.next()) {
                memberNoTxt.setText(rss1.getObject(1).toString());
                jTextField5.setText(rss1.getObject(2).toString());
                jTextField6.setText(rss1.getObject(3).toString());
            }

            java.sql.Statement pss113 = connectDB.createStatement();
            java.sql.ResultSet rss113 = pss113.executeQuery("select trans_date  ,patient_no,description,sum(amount) FROM op_unfinalised_inv_scheme WHERE trans_date between '" + beginDate.getDate().toString() + "' and '" + endDate.getDate().toString() + "' and patient_no='" + patientNotxt.getText() + "' group by trans_date,patient_no,description");
            while (rss113.next()) {
                todays = rss113.getString(1);

            }
            System.out.println("patient_no = '" + patientNotxt.getText() + "' and date_prescribed = '" + todays + "'");

            java.sql.Statement pss11 = connectDB.createStatement();
            java.sql.ResultSet rss11 = pss11.executeQuery("select sum(amount) from patient_bill_scheme  where patient_no = '" + patientNotxt.getText() + "' and date_prescribed = '" + todays + "'");
            while (rss11.next()) {

                totalAmountTxt.setText(rss11.getObject(1).toString());

            }
        } catch (java.sql.SQLException sqlex) {
            if (todays == null) {
                javax.swing.JOptionPane.showMessageDialog(this, "Vary the date Please", "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            } else {
                javax.swing.JOptionPane.showMessageDialog(this, sqlex.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
            System.out.println(sqlex.getMessage());
        }

        this.populateTable1(patientNotxt.getText());
        patientDialog.dispose();

    }//GEN-LAST:event_loadPatientDateTableMouseClicked
    private void populateTable1(java.lang.String patient_no) {
        for (int k = 0; k < schemeDataTable.getRowCount(); k++) {
            for (int r = 0; r < schemeDataTable.getColumnCount(); r++) {
                schemeDataTable.getModel().setValueAt(null, k, r);
            }
        }

        int i = 0;
        int j = 0;
        try {
            java.sql.Statement stmt = connectDB.createStatement();

//            java.sql.ResultSet rset = stmt.executeQuery("SELECT count(patient_name) FROM patient_bill_scheme WHERE patient_no = '" + patient_no + "'");
            java.sql.ResultSet rset = stmt.executeQuery("SELECT count(patient_no) FROM hp_patient_card WHERE patient_no = '" + patient_no + "' AND paid = false AND payment_mode ilike 'scheme'");

            while (rset.next()) {
                j = rset.getInt(1);
            }
            if (j > 0) {
                java.sql.Statement stmtTable1 = connectDB.createStatement();

                totalDepositBalTxt.setText(java.lang.String.valueOf(com.afrisoftech.lib.unUtelisedDeposit.getBalanceDeposit(connectDB, patientNotxt.getText().toString().trim())));
                this.schemeDataTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select date::date,service as Description,sum(dosage) as Qty,(sum(debit-credit)/sum(dosage))::numeric(15,2) as rate,"
                        + "0.0 as Discount,0.0 as Total_Discount,sum(debit-credit) as amount,main_service,false as Items_Approved,oid  "
                        + " FROM hp_patient_card where paid=false and date::date='" + todays + "'::date  and   patient_no ='" + patientNotxt.getText() + "' and transaction_type not ilike 'Receipts' "
                        + " group by 1,2,main_service,oid  having sum(debit-credit) > 0"));

            }

        } catch (java.sql.SQLException sqlExec) {
            sqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

    }

    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed
        patientDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton52ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //       this.getContentPane().removeAll();
        //       this.initComponents();
        // Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed
    //    private void cmbox2ActionPerformed(java.awt.event.ActionEvent evt){
    /*
     * java.lang.Object selectedGuaran = cmbox2.getSelectedItem(); int i =
     * jTable1.getSelectedRow();
     *
     * if (selectedGuaran != null) {
     *
     * try { java.sql.Statement pstmt = connectDB.createStatement();
     * java.sql.ResultSet rs = pstmt.executeQuery("select item_code,units from
     * st_stock_item where description = '"+selectedGuaran+"'"); while
     * (rs.next()) jTable1.setValueAt(rs.getObject(1),i,1);
     * jTable1.setValueAt(rs.getObject(2),i,2); } catch(java.sql.SQLException
     * sqlex){ System.out.println(sqlex.getMessage());
     *
     * }
     */
    //}
    //   }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        setVisible(false); // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void finalizeInvoiceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalizeInvoiceBtnActionPerformed
        if (Double.parseDouble(totalNetTxt.getText()) == 0.0) {
            javax.swing.JOptionPane.showMessageDialog(this, "You cannot save unless you tick select at least one bill.".toUpperCase(), "Caution Message", javax.swing.JOptionPane.ERROR_MESSAGE);
        } else if (Double.parseDouble(totalNetTxt.getText()) > 0.0) {
            java.util.Date periodFrom = null;
            java.util.Date periodTo = null;

            //java.sql.Savepoint registerSavePoint = null;
            try {
                connectDB.setAutoCommit(false);
                // registerSavePoint = connectDB.setSavepoint("registration");

                java.sql.Statement stmtf = connectDB.createStatement();
                java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + endDate.getDate() + "' BETWEEN period_from AND period_to");
                while (rsetf.next()) {
                    periodFrom = rsetf.getDate(1);
                    periodTo = rsetf.getDate(2);
                }

                if (beginDate.getDate().before(periodFrom) || endDate.getDate().after(periodTo)) {
                    javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                } else {
                    if (schemeDataTable.isEditing()) {
                        schemeDataTable.getCellEditor().stopCellEditing();
                    }
                    java.util.Calendar calendar = java.util.Calendar.getInstance();

                    long dateNow = calendar.getTimeInMillis();

                    java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

                    System.out.println(datenowSql1.toString());

                    java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

                    System.out.println(datenowSql.toString());

                    String receiptNo = null;
                    String actCode = null;
                    String glCode = null;
                    String bankAcc = null;
                    String glCode1 = null;
                    String bankAcc1 = null;
                    String transNo = null;
                    String payMode = null;
                    String patCat = null;
                    String patientAcc = null;
                    String cardNo = null;
                    String scheme = null;
                    String cardName = null;
                    String isurer = null;
                    String expDate = null;
                    String staffNo = null;
                    String actNames = null;
                    String user = null;
                    String actNames1 = null;
                    String actCode1 = null;
                    String invoiceNo = null;
                    com.afrisoftech.lib.InvoiceNumbers.invoiceType = false;

                    double credits = java.lang.Double.parseDouble(totalNetTxt.getText());
                    System.out.println("Started from the bottom........1");
                    java.sql.Statement stm1 = connectDB.createStatement();
                    // com.afrisoftech.lib.InvoiceNumbers.invoiceType = false;
                    invoiceNo = com.afrisoftech.lib.InvoiceNumbers.getInvoiceNumber();

                    java.sql.Statement pss12 = connectDB.createStatement();
                    java.sql.ResultSet rsts11 = pss12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                    while (rsts11.next()) {
                        actCode = rsts11.getObject(1).toString();
                        actNames = rsts11.getObject(2).toString();
                    }

                    java.sql.Statement pss = connectDB.createStatement();
                    java.sql.ResultSet rss = pss.executeQuery("select nextval('transaction_no_seq')");

                    while (rss.next()) {
                        transNo = rss.getObject(1).toString();
                    }
                    java.sql.Statement pss11 = connectDB.createStatement();
                    java.sql.ResultSet rsts1 = pss11.executeQuery("select code,activity from pb_activity where activity_category ='DA'");
                    while (rsts1.next()) {
                        actCode1 = rsts1.getObject(1).toString();
                        actNames1 = rsts1.getObject(2).toString();
                    }
                    java.sql.Statement pss111 = connectDB.createStatement();
                    java.sql.ResultSet rsts111 = pss111.executeQuery("select current_user");
                    while (rsts111.next()) {
                        user = rsts111.getObject(1).toString();
                    }

                    for (int i = 0; i < schemeDataTable.getRowCount(); i++) {

                        if (schemeDataTable.getModel().getValueAt(i, 8) != null) {
                            System.out.println("Started from the bottom........2");

                            java.sql.Statement pssq = connectDB.createStatement();
                            java.sql.ResultSet rse121 = pssq.executeQuery("select main_service from patient_bill where description = '" + schemeDataTable.getModel().getValueAt(i, 1).toString() + "'");

                            while (rse121.next()) {
                                glCode = dbObject.getDBObject(rse121.getObject(1), "-");
                            }

                            float amts = java.lang.Float.parseFloat(schemeDataTable.getValueAt(i, 6).toString());

                            if (Boolean.valueOf(schemeDataTable.getValueAt(i, 8).toString()) == java.lang.Boolean.TRUE && amts != 0) {

                                java.sql.PreparedStatement pstmt22a = connectDB.prepareStatement("UPDATE hp_patient_card set paid = true,invoice_no = '" + invoiceNo + "' WHERE patient_no = '" + patientNotxt.getText() + "' and date::date = '" + schemeDataTable.getValueAt(i, 0).toString() + "' and service = '" + schemeDataTable.getValueAt(i, 1).toString() + "' AND paid = false AND oid = '" + schemeDataTable.getValueAt(i, 9).toString() + "'");
                                pstmt22a.executeUpdate();
                                java.sql.PreparedStatement pstmt222a = connectDB.prepareStatement("UPDATE hp_patient_card set paid = true,invoice_no = '" + invoiceNo + "' WHERE patient_no = '" + patientNotxt.getText() + "' and date::date = '" + schemeDataTable.getValueAt(i, 0).toString() + "' and (service ilike '%copay%' OR service ilike '%co-pay%') AND invoice_no = '' AND paid = false");
                                pstmt222a.executeUpdate();
                                java.sql.PreparedStatement pstmt22 = connectDB.prepareStatement("UPDATE hp_patient_billing set paid = true WHERE patient_no = '" + patientNotxt.getText() + "' and trans_date = '" + schemeDataTable.getValueAt(i, 0).toString() + "' and service = '" + schemeDataTable.getValueAt(i, 1).toString() + "'");
                                pstmt22.executeUpdate();
                                java.sql.PreparedStatement pstmt21 = connectDB.prepareStatement("UPDATE hp_pharmacy set paid = true WHERE patient_no = '" + patientNotxt.getText() + "'  and date_prescribed = '" + schemeDataTable.getValueAt(i, 0).toString() + "' and description = '" + schemeDataTable.getValueAt(i, 1).toString() + "'");
                                pstmt21.executeUpdate();
                                java.sql.PreparedStatement pstmt11 = connectDB.prepareStatement("UPDATE ac_doctors_ledger SET pat_inv = '" + invoiceNo + "' where patient_no = '" + this.patientNotxt.getText() + "' and input_date = '" + schemeDataTable.getValueAt(i, 0).toString() + "' AND pat_inv not ilike 'O%'");
                                pstmt11.executeUpdate();
                            }

                        }
                    }
                    if (utilizeDepositChkbx.isSelected()) {
                        if (java.lang.Double.valueOf(totalDepositBalTxt.getText().toString()) > 0) {
                            System.out.println("Started from the bottom........3");
                            if (java.lang.Double.valueOf(totalDepositBalTxt.getText().toString()) >= java.lang.Double.valueOf(totalNetTxt.getText().toString())) {
                                double balAfterUtilization = java.lang.Double.valueOf(totalDepositBalTxt.getText()) - java.lang.Double.valueOf(refundTxt.getText());
                                java.sql.Statement stm1211x = connectDB.createStatement();
                                java.sql.ResultSet rse1211x = stm1211x.executeQuery("SELECT distinct description, activity_code FROM ac_ledger WHERE patient_no = '" + patientNotxt.getText() + "' and transaction_type = 'Unutilized patient deposit'");
                                String rnamex = null, rcodex = null;
                                while (rse1211x.next()) {
                                    rnamex = rse1211x.getObject(1).toString();
                                    rcodex = rse1211x.getObject(2).toString();
                                }
                                if (balAfterUtilization > 0) {
                                    System.out.println("Started from the bottom........4");

                                    java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("INSERT INTO hp_patient_card VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                    pstmt1.setString(1, patientNotxt.getText());
                                    pstmt1.setObject(2, "Receipt");
                                    pstmt1.setString(3, "");
                                    pstmt1.setString(4, "Scheme");
                                    pstmt1.setString(5, transNo);
                                    pstmt1.setString(7, schemeNameTxt.getText());
                                    pstmt1.setString(6, "");
                                    pstmt1.setString(8, "");
                                    pstmt1.setString(9, schemePayerTxt.getText());
                                    pstmt1.setObject(10, null);
                                    pstmt1.setString(11, "");
                                    pstmt1.setDouble(13, balAfterUtilization);
                                    pstmt1.setDouble(12, 0.00);
                                    //pstmt1.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(SchemeDataTable.getValueAt(0, 0).toString())));
                                    pstmt1.setDate(14, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
                                    pstmt1.setObject(15, actCode);
                                    pstmt1.setString(16, glCode);
                                    pstmt1.setDouble(17, 1);
                                    pstmt1.setObject(18, memberNoTxt.getText());
                                    pstmt1.setBoolean(19, true);
                                    pstmt1.setString(20, "Receipts");
                                    pstmt1.setBoolean(21, true);
                                    pstmt1.setString(22, actNames);
                                    pstmt1.setString(23, invoiceNo);
                                    pstmt1.setString(24, user);
                                    pstmt1.setString(25, "");
                                    pstmt1.setString(26, "OP");
                                    pstmt1.executeUpdate();

                                    java.sql.PreparedStatement pstmt2v = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
                                    pstmt2v.setString(1, rcodex);
                                    pstmt2v.setString(2, rnamex);
                                    pstmt2v.setString(3, patientNotxt.getText());
                                    pstmt2v.setString(4, patientNameTxt.getText());
                                    pstmt2v.setString(5, "Patient deposit");
                                    pstmt2v.setString(6, cardNo);
                                    pstmt2v.setString(7, cardName);
                                    pstmt2v.setString(8, "OP");
                                    pstmt2v.setString(9, isurer);
                                    pstmt2v.setString(10, "Scheme");
                                    pstmt2v.setString(11, "");
                                    pstmt2v.setString(12, "");
                                    pstmt2v.setString(13, "");
                                    pstmt2v.setString(14, "Receipt");
                                    pstmt2v.setString(15, "Unutilized patient deposit");
                                    pstmt2v.setDouble(16, balAfterUtilization);
                                    pstmt2v.setDouble(17, 0.00);

                                    pstmt2v.setDate(18, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
                                    pstmt2v.setString(19, transNo);
                                    pstmt2v.setBoolean(20, false);
                                    pstmt2v.setBoolean(21, false);
                                    pstmt2v.setBoolean(22, false);
                                    pstmt2v.setString(23, user);
                                    pstmt2v.setString(24, "");//cash point
                                    pstmt2v.setString(25, "");//shift
                                    pstmt2v.setTimestamp(26, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                    pstmt2v.executeUpdate();

                                } else if (balAfterUtilization < 0) {
                                    System.out.println("Started from the bottom........6");
                                    java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("INSERT INTO hp_patient_card VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                    pstmt1.setString(1, patientNotxt.getText());
                                    pstmt1.setObject(2, "Refund");
                                    pstmt1.setString(3, "");
                                    pstmt1.setString(4, "Scheme");
                                    pstmt1.setString(5, transNo);
                                    pstmt1.setString(7, schemeNameTxt.getText());
                                    pstmt1.setString(6, "");
                                    pstmt1.setString(8, "");
                                    pstmt1.setString(9, schemePayerTxt.getText());
                                    pstmt1.setObject(10, null);
                                    pstmt1.setString(11, "");
                                    pstmt1.setDouble(13, 0.00);
                                    pstmt1.setDouble(12, -1 * balAfterUtilization);
                                    pstmt1.setDate(14, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(SchemeDataTable.getValueAt(0, 0).toString())));
                                    pstmt1.setObject(15, actCode);
                                    pstmt1.setString(16, glCode);
                                    pstmt1.setDouble(17, 1);
                                    pstmt1.setObject(18, memberNoTxt.getText());
                                    pstmt1.setBoolean(19, true);
                                    pstmt1.setString(20, "Receipts");
                                    pstmt1.setBoolean(21, true);
                                    pstmt1.setString(22, actNames);
                                    pstmt1.setString(23, invoiceNo);
                                    pstmt1.setString(24, user);
                                    pstmt1.setString(25, "");
                                    pstmt1.setString(26, "OP");
                                    pstmt1.executeUpdate();

                                    java.sql.PreparedStatement pstmt2v = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
                                    pstmt2v.setString(1, rcodex);
                                    pstmt2v.setString(2, rnamex);
                                    pstmt2v.setString(3, patientNotxt.getText());
                                    pstmt2v.setString(4, patientNameTxt.getText());
                                    pstmt2v.setString(5, "Patient Refund");
                                    pstmt2v.setString(6, cardNo);
                                    pstmt2v.setString(7, cardName);
                                    pstmt2v.setString(8, "OP");
                                    pstmt2v.setString(9, isurer);
                                    pstmt2v.setString(10, "Scheme");
                                    pstmt2v.setString(11, "");
                                    pstmt2v.setString(12, "");
                                    pstmt2v.setString(13, "");
                                    pstmt2v.setString(14, "Receipt");
                                    pstmt2v.setString(15, "Unutilized patient deposit");
                                    pstmt2v.setDouble(16, 0.00);
                                    pstmt2v.setDouble(17, -1 * balAfterUtilization);
                                    pstmt2v.setDate(18, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));//com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(SchemeDataTable.getValueAt(0, 0).toString())));
                                    pstmt2v.setString(19, transNo);
                                    pstmt2v.setBoolean(20, false);
                                    pstmt2v.setBoolean(21, false);
                                    pstmt2v.setBoolean(22, false);
                                    pstmt2v.setString(23, user);
                                    pstmt2v.setString(24, "");//cash point
                                    pstmt2v.setString(25, "");//shift
                                    pstmt2v.setTimestamp(26, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                    pstmt2v.executeUpdate();
                                }
                                ///utilise scheme's deposit
                            } else if (java.lang.Double.valueOf(unutilisedSchemeDepositTxt.getText().toString()) > 0.00) {
                                double balAfterUtilization = java.lang.Double.valueOf(totalDepositBalTxt.getText()) - java.lang.Double.valueOf(refundTxt.getText());
                                System.out.println("Started from the bottom........7");
                                java.sql.Statement stm1211x = connectDB.createStatement();
                                java.sql.ResultSet rse1211x = stm1211x.executeQuery("SELECT distinct description, activity_code FROM ac_ledger WHERE patient_no = '" + accountNoTxt.getText() + "' and transaction_type = 'Unutilized patient deposit'");
                                String rnamex = null, rcodex = null;
                                while (rse1211x.next()) {
                                    rnamex = rse1211x.getObject(1).toString();
                                    rcodex = rse1211x.getObject(2).toString();
                                }
                                if (balAfterUtilization > 0) {

                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into ac_debtors values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                    pstmt.setObject(1, actCode1);
                                    pstmt.setString(2, schemePayerTxt.getText());
                                    pstmt.setString(3, patientNameTxt.getText());
                                    pstmt.setString(4, patientNotxt.getText());
                                    pstmt.setString(5, schemeNameTxt.getText());
                                    pstmt.setString(6, "");
                                    if (this.accountNoTxt.getText() == null || this.accountNoTxt.getText().equals("-")) {
                                        javax.swing.JOptionPane.showMessageDialog(this, "Account NO. MISSING !!!", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                                    } else {
                                        pstmt.setString(7, accountNoTxt.getText());
                                    }
                                    pstmt.setString(8, "");
                                    pstmt.setString(9, "");
                                    pstmt.setString(10, this.cardNumberTxt.getText());
                                    pstmt.setString(11, transNo);
                                    pstmt.setString(12, "Raise Invoice");
                                    if (credits > 0) {
                                        pstmt.setDouble(13, java.lang.Double.valueOf(totalNetTxt.getText()));
                                    } else {
                                        pstmt.setDouble(13, credits * -1);
                                    }
                                    pstmt.setDouble(14, 0.00);
                                    pstmt.setDate(15, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(SchemeDataTable.getValueAt(0, 0).toString())));
                                    pstmt.setObject(16, invoiceNo);
                                    pstmt.setString(17, actNames1);
                                    pstmt.setBoolean(18, false);
                                    pstmt.setBoolean(19, false);
                                    pstmt.setString(20, user);
                                    pstmt.setString(21, "");
                                    if (credits > 0) {
                                        pstmt.setDouble(22, java.lang.Double.valueOf(totalNetTxt.getText()));
                                    } else {
                                        pstmt.setDouble(22, credits * -1);
                                    }
                                    pstmt.setBoolean(23, false);
                                    pstmt.setDouble(24, 0.00);
                                    pstmt.setObject(25, "");
                                    pstmt.setObject(26, null);
                                    pstmt.setBoolean(27, false);
                                    pstmt.setDouble(28, 0.00);
                                    pstmt.setObject(29, null);
                                    pstmt.setString(30, "");
                                    pstmt.setBoolean(31, false);
                                    pstmt.setDouble(32, 0.00);
                                    pstmt.setObject(33, null);
                                    pstmt.setString(34, "");
                                    pstmt.setString(35, memberNoTxt.getText());
                                    pstmt.setString(36, com.afrisoftech.lib.ClaimNumberFactory.getClaimNumber(connectDB));// this.claimNumberTxt.getText());
                                    pstmt.executeUpdate();

                                    java.sql.PreparedStatement pstmt2v = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
                                    pstmt2v.setString(1, rcodex);
                                    pstmt2v.setString(2, rnamex);
                                    pstmt2v.setString(3, patientNotxt.getText());
                                    pstmt2v.setString(4, patientNameTxt.getText());
                                    pstmt2v.setString(5, "Patient deposit");
                                    pstmt2v.setString(6, cardNo);
                                    pstmt2v.setString(7, cardName);
                                    pstmt2v.setString(8, "OP");
                                    pstmt2v.setString(9, isurer);
                                    pstmt2v.setString(10, "Scheme");
                                    pstmt2v.setString(11, "");
                                    pstmt2v.setString(12, "");
                                    pstmt2v.setString(13, "");
                                    pstmt2v.setString(14, "Receipt");
                                    pstmt2v.setString(15, "Unutilized patient deposit");
                                    pstmt2v.setDouble(16, balAfterUtilization);
                                    pstmt2v.setDouble(17, 0.00);
                                    pstmt2v.setDate(18, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(SchemeDataTable.getValueAt(0, 0).toString())));
                                    pstmt2v.setString(19, transNo);
                                    pstmt2v.setBoolean(20, false);
                                    pstmt2v.setBoolean(21, false);
                                    pstmt2v.setBoolean(22, false);
                                    pstmt2v.setString(23, user);
                                    pstmt2v.setString(24, "");//cash point
                                    pstmt2v.setString(25, "");//shift
                                    pstmt2v.setTimestamp(26, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                    pstmt2v.executeUpdate();

                                } else if (balAfterUtilization < 0) {
                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into ac_debtors values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                                    pstmt.setObject(1, actCode1);
                                    pstmt.setString(2, schemePayerTxt.getText());
                                    pstmt.setString(3, patientNameTxt.getText());
                                    pstmt.setString(4, patientNotxt.getText());
                                    pstmt.setString(5, schemeNameTxt.getText());
                                    pstmt.setString(6, "");
                                    if (this.accountNoTxt.getText() == null || this.accountNoTxt.getText().equals("-")) {
                                        javax.swing.JOptionPane.showMessageDialog(this, "Account NO. MISSING !!!", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                                    } else {
                                        pstmt.setString(7, accountNoTxt.getText());
                                    }
                                    pstmt.setString(8, "");
                                    pstmt.setString(9, "");
                                    pstmt.setString(10, this.cardNumberTxt.getText());
                                    pstmt.setString(11, transNo);
                                    pstmt.setString(12, "Raise Invoice");
                                    if (credits > 0) {
                                        pstmt.setDouble(13, java.lang.Double.valueOf(totalNetTxt.getText()));
                                    } else {
                                        pstmt.setDouble(13, credits * -1);
                                    }
                                    pstmt.setDouble(14, 0.00);
                                    pstmt.setDate(15, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(SchemeDataTable.getValueAt(0, 0).toString())));
                                    pstmt.setObject(16, invoiceNo);
                                    pstmt.setString(17, actNames1);
                                    pstmt.setBoolean(18, false);
                                    pstmt.setBoolean(19, false);
                                    pstmt.setString(20, user);
                                    pstmt.setString(21, "");
                                    if (credits > 0) {
                                        pstmt.setDouble(22, java.lang.Double.valueOf(totalNetTxt.getText()));
                                    } else {
                                        pstmt.setDouble(22, credits * -1);
                                    }
                                    pstmt.setBoolean(23, false);
                                    pstmt.setDouble(24, 0.00);
                                    pstmt.setObject(25, "");
                                    pstmt.setObject(26, null);
                                    pstmt.setBoolean(27, false);
                                    pstmt.setDouble(28, 0.00);
                                    pstmt.setObject(29, null);
                                    pstmt.setString(30, "");
                                    pstmt.setBoolean(31, false);
                                    pstmt.setDouble(32, 0.00);
                                    pstmt.setObject(33, null);
                                    pstmt.setString(34, "");
                                    pstmt.setString(35, memberNoTxt.getText());
                                    pstmt.setString(36, com.afrisoftech.lib.ClaimNumberFactory.getClaimNumber(connectDB)); //this.claimNumberTxt.getText());
                                    pstmt.executeUpdate();

                                    java.sql.PreparedStatement pstmt2v = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
                                    pstmt2v.setString(1, rcodex);
                                    pstmt2v.setString(2, rnamex);
                                    pstmt2v.setString(3, patientNotxt.getText());
                                    pstmt2v.setString(4, patientNameTxt.getText());
                                    pstmt2v.setString(5, "Patient Refund");
                                    pstmt2v.setString(6, cardNo);
                                    pstmt2v.setString(7, cardName);
                                    pstmt2v.setString(8, "OP");
                                    pstmt2v.setString(9, isurer);
                                    pstmt2v.setString(10, "Scheme");
                                    pstmt2v.setString(11, "");
                                    pstmt2v.setString(12, "");
                                    pstmt2v.setString(13, "");
                                    pstmt2v.setString(14, "Receipt");
                                    pstmt2v.setString(15, "Unutilized patient deposit");
                                    pstmt2v.setDouble(16, 0.00);
                                    pstmt2v.setDouble(17, -1 * balAfterUtilization);
                                    pstmt2v.setDate(18, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(SchemeDataTable.getValueAt(0, 0).toString())));
                                    pstmt2v.setString(19, transNo);
                                    pstmt2v.setBoolean(20, false);
                                    pstmt2v.setBoolean(21, false);
                                    pstmt2v.setBoolean(22, false);
                                    pstmt2v.setString(23, user);
                                    pstmt2v.setString(24, "");//cash point
                                    pstmt2v.setString(25, "");//shift
                                    pstmt2v.setTimestamp(26, com.afrisoftech.lib.ServerTime.getSQLTimeStamp(connectDB)); //new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                    pstmt2v.executeUpdate();
                                }

                            }
                        }

                    } else {

                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into ac_debtors values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                        pstmt.setObject(1, actCode1);
                        pstmt.setString(2, schemePayerTxt.getText());
                        pstmt.setString(3, patientNameTxt.getText());
                        pstmt.setString(4, patientNotxt.getText());
                        pstmt.setString(5, schemeNameTxt.getText());
                        pstmt.setString(6, "");
                        if (this.accountNoTxt.getText() == null || this.accountNoTxt.getText().equals("-")) {
                            javax.swing.JOptionPane.showMessageDialog(this, "Account NO. MISSING !!!", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            pstmt.setString(7, accountNoTxt.getText());
                        }
                        pstmt.setString(8, "");
                        pstmt.setString(9, "");
                        pstmt.setString(10, this.cardNumberTxt.getText());
                        pstmt.setString(11, transNo);
                        pstmt.setString(12, "Raise Invoice");
                        if (credits > 0) {
                            pstmt.setDouble(13, java.lang.Double.valueOf(totalNetTxt.getText()));
                        } else {
                            pstmt.setDouble(13, credits * -1);
                        }
                        pstmt.setDouble(14, 0.00);
                        pstmt.setObject(15, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(SchemeDataTable.getValueAt(0, 0).toString())));
                        pstmt.setObject(16, invoiceNo);
                        pstmt.setString(17, actNames1);
                        pstmt.setBoolean(18, false);
                        pstmt.setBoolean(19, false);
                        pstmt.setString(20, user);
                        pstmt.setString(21, "");
                        if (credits > 0) {
                            pstmt.setDouble(22, java.lang.Double.valueOf(totalNetTxt.getText()));
                        } else {
                            pstmt.setDouble(22, credits * -1);
                        }
                        pstmt.setBoolean(23, false);
                        pstmt.setDouble(24, 0.00);
                        pstmt.setObject(25, "");
                        pstmt.setObject(26, null);
                        pstmt.setBoolean(27, false);
                        pstmt.setDouble(28, 0.00);
                        pstmt.setObject(29, null);
                        pstmt.setString(30, "");
                        pstmt.setBoolean(31, false);
                        pstmt.setDouble(32, 0.00);
                        pstmt.setObject(33, null);
                        pstmt.setString(34, "");
                        pstmt.setString(35, memberNoTxt.getText());
                        pstmt.setString(36, com.afrisoftech.lib.ClaimNumberFactory.getClaimNumber(connectDB)); //this.claimNumberTxt.getText());
                        pstmt.executeUpdate();

                        java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("INSERT INTO hp_patient_card VALUES(?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                        pstmt1.setString(1, patientNotxt.getText());
                        pstmt1.setObject(2, "Invoice");
                        pstmt1.setString(3, "");
                        pstmt1.setString(4, "Scheme");
                        pstmt1.setString(5, transNo);
                        pstmt1.setString(7, schemeNameTxt.getText());
                        pstmt1.setString(6, "");
                        pstmt1.setString(8, "");
                        pstmt1.setString(9, schemePayerTxt.getText());
                        pstmt1.setObject(10, null);
                        pstmt1.setString(11, "");
                        if (credits > 0) {
                            pstmt1.setDouble(13, java.lang.Double.valueOf(totalNetTxt.getText()));
                        } else {
                            pstmt1.setDouble(13, credits * -1);

                        }
                        pstmt1.setDouble(12, 0.00);
                        pstmt1.setDate(14, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(SchemeDataTable.getValueAt(0, 0).toString())));
                        pstmt1.setObject(15, actCode);
                        pstmt1.setString(16, glCode);
                        pstmt1.setDouble(17, 1);
                        pstmt1.setObject(18, memberNoTxt.getText());
                        pstmt1.setBoolean(19, true);
                        pstmt1.setString(20, "Receipts");
                        pstmt1.setBoolean(21, true);
                        pstmt1.setString(22, actNames);
                        pstmt1.setString(23, invoiceNo);
                        pstmt1.setString(24, user);
                        pstmt1.executeUpdate();

                    }
                    double Disc = java.lang.Double.valueOf(totalDiscountTxt.getText());
                    if (Disc > 0) {

                        java.sql.Statement stm122x = connectDB.createStatement();
                        java.sql.ResultSet rse122x = stm122x.executeQuery("select code,activity from pb_activity where activity_category ='EDS'");
                        while (rse122x.next()) {

                            discode = rse122x.getObject(1).toString();
                            discglAcc = rse122x.getObject(2).toString();
                        }
                        java.sql.PreparedStatement pstmt1f = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                        pstmt1f.setString(1, patientNotxt.getText());
                        pstmt1f.setObject(2, "Discount");
                        pstmt1f.setString(3, "");
                        pstmt1f.setString(4, "Scheme");
                        pstmt1f.setString(5, transNo);
                        pstmt1f.setString(7, schemeNameTxt.getText());
                        pstmt1f.setString(6, "");
                        pstmt1f.setString(8, "");
                        pstmt1f.setString(9, schemePayerTxt.getText());
                        pstmt1f.setObject(10, null);
                        pstmt1f.setString(11, "");
                        pstmt1f.setDouble(13, java.lang.Double.valueOf(totalDiscountTxt.getText()));
                        pstmt1f.setDouble(12, 0.00);
                        pstmt1f.setDate(14, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB)); //com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(SchemeDataTable.getValueAt(0, 0).toString())));
                        pstmt1f.setObject(15, actCode);
                        pstmt1f.setString(16, glCode);
                        pstmt1f.setDouble(17, 1);
                        pstmt1f.setObject(18, memberNoTxt.getText());
                        pstmt1f.setBoolean(19, true);
                        pstmt1f.setString(20, "Receipts");
                        pstmt1f.setBoolean(21, true);
                        pstmt1f.setString(22, actNames);
                        pstmt1f.setString(23, invoiceNo);
                        pstmt1f.setString(24, user);
                        pstmt1f.executeUpdate();

                        java.sql.PreparedStatement pstmt2v = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
                        pstmt2v.setString(1, discode);
                        pstmt2v.setString(2, discglAcc);
                        pstmt2v.setString(3, patientNotxt.getText());
                        pstmt2v.setString(4, patientNameTxt.getText());
                        pstmt2v.setString(5, "");
                        pstmt2v.setString(6, cardNo);
                        pstmt2v.setString(7, cardName);
                        pstmt2v.setString(8, "OP");
                        pstmt2v.setString(9, isurer);
                        pstmt2v.setString(10, "Scheme");
                        pstmt2v.setString(11, "");
                        pstmt2v.setString(12, "");
                        pstmt2v.setString(13, "");
                        pstmt2v.setString(14, "Discount");
                        pstmt2v.setString(15, "Revenue");
                        pstmt2v.setDouble(16, java.lang.Double.valueOf(totalDiscountTxt.getText()));
                        pstmt2v.setDouble(17, 0.00);
                        pstmt2v.setDate(18, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));   //com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(SchemeDataTable.getValueAt(0, 0).toString())));
                        pstmt2v.setString(19, transNo);
                        pstmt2v.setBoolean(20, false);
                        pstmt2v.setBoolean(21, false);
                        pstmt2v.setBoolean(22, false);
                        pstmt2v.setString(23, user);
                        pstmt2v.executeUpdate();
                    }
                    connectDB.commit();
                    connectDB.setAutoCommit(true);

                    ////       biz.systempartners.claims.SendSMS.SendSMS("INVOICE NO : ["+invoiceNo+"], PATIENT NO.: ["+jTextField9.getText()+"],NAME : "+jTextField1.getText()+"]", "0733367427", "SCHEME : ["+jTextField7.getText()+"], AMOUNT(KSH) : ["+jTextField15.getText()+"]");
                    com.afrisoftech.reports.FinalInvoiceByinvPdf policy = new com.afrisoftech.reports.FinalInvoiceByinvPdf();
                    policy.FinalInvoiceByinvPdf(connectDB, invoiceNo, invoiceNo, claimNumberTxt.getText(), cardNumberTxt.getText());

                    javax.swing.JOptionPane.showMessageDialog(this, "Data saved successfully \n Inv No. is: " + invoiceNo + "", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    patientNameTxt.setText("");
                    memberNoTxt.setText("");
                    totalAmountTxt.setText("");
                    viewTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select trans_date AS TRANSACTION_DATE, patient_no, description AS PARTICULARS,sum(amount) as INVOICE_TOTAL FROM op_unfinalised_inv WHERE trans_date between '" + beginDate.getDate().toString() + "' and '" + endDate.getDate().toString() + "' group by trans_date,patient_no,description"));
                    this.unutilisedSchemeDepositTxt.setText("0.00");
                    this.dmuBalanceTxt.setText("0.00");
                    this.refundTxt.setText("0.00");
                    this.schemeBalAfterUtilisationTxt.setText("0.00");
                    this.totalDepositBalTxt.setText("0.00");
                    totalAmountTxt.setText("");
                    invoiceNoTxt.setText("-");
                    utilizeDepositChkbx.setSelected(false);
                    tickChk.setSelected(false);
                    jCheckBox2ActionPerformed(evt);
                }
                //}
            } catch (java.lang.Exception sq) {
                sq.printStackTrace();
//                try {
//                    connectDB.rollback(registerSavePoint);
//                } catch (java.sql.SQLException sql) {
//                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
//                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }
        }
        // }// Add your handling code here:
    }//GEN-LAST:event_finalizeInvoiceBtnActionPerformed

    private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox6ActionPerformed
        for (int k = 0; k < jTable11.getColumnCount(); k++) {

            for (int r = 0; r < jTable11.getRowCount(); r++) {
                // if (jTable11.getValueAt(r, 5) != null) {

                jTable11.setValueAt(false, r, 5);
                jTable11.setValueAt(null, r, 4);
                // } else {
                //     jTable11.setValueAt(balance, k, 6);
                // }

                // this.tableModelTableChanged();
                if (jTable11.isEditing()) {
                    jTable11.getCellEditor().stopCellEditing();
                }

                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable11, 4);
                this.jTextField18.setText(java.lang.String.valueOf(0));
                // double amts = java.lang.Double.parseDouble(this.jTextField1.getText());
                // this.jTextField2.setText(java.lang.String.valueOf(amts - totalSum));
                //}
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox6ActionPerformed

    private void jCheckBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed

        // double orig = java.lang.Double.parseDouble(jTextField3111.getText().toString());
        // double alloc = java.lang.Double.parseDouble(jTextField4.getText().toString());
        for (int k = 0; k < jTable11.getColumnCount(); k++) {

            for (int r = 0; r < jTable11.getRowCount(); r++) {
                if (jTable11.getValueAt(r, 1) != null) {
                    float gross = java.lang.Float.parseFloat(jTable11.getValueAt(r, 1).toString());
                    if (gross > 0) {

                        //  float qty = java.lang.Float.parseFloat(jTable11.getValueAt(r, 1).toString());
                        //  float deposit = java.lang.Float.parseFloat(this.jTextField10.getText());
                        // float gross = java.lang.Float.parseFloat(jTable11.getValueAt(k, 5).toString());
                        //gross = gross * qty;
                        // if (gross < balance) {
                        jTable11.setValueAt(true, r, 5);
                        jTable11.setValueAt(gross, r, 4);
                        // } else {
                        //     jTable11.setValueAt(balance, k, 6);
                        // }

                        // this.tableModelTableChanged();
                        if (jTable11.isEditing()) {
                            jTable11.getCellEditor().stopCellEditing();
                        }

                        double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable11, 4);
                        this.jTextField18.setText(java.lang.String.valueOf(totalSum));
                        // double amts = java.lang.Double.parseDouble(this.jTextField1.getText());
                        // this.jTextField2.setText(java.lang.String.valueOf(amts - totalSum));
                    }
                }
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jTable11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable11MouseClicked

        if (jTable11.getSelectedColumn() == 5) {
            //double orig = java.lang.Double.parseDouble(jTextField4.getText().toString());
            // double alloc = java.lang.Double.parseDouble(jTextField17.getText().toString());

            // double balance = orig - alloc;
            if (Boolean.valueOf(jTable11.getValueAt(jTable11.getSelectedRow(), 5).toString()) == java.lang.Boolean.TRUE) {

                //float qty = java.lang.Float.parseFloat(jTable11.getValueAt(jTable11.getSelectedRow(), 1).toString());
                // float deposit = java.lang.Float.parseFloat(this.jTextField10.getText());
                float gross = java.lang.Float.parseFloat(jTable11.getValueAt(jTable11.getSelectedRow(), 1).toString());
                //gross = gross * qty;
                /// if (gross < balance) {
                jTable11.setValueAt(gross, jTable11.getSelectedRow(), 4);
                // } else {
                //     jTable11.setValueAt(balance, jTable11.getSelectedRow(), 4);
                // }

                // this.tableModelTableChanged();
                if (jTable11.isEditing()) {
                    jTable11.getCellEditor().stopCellEditing();
                }

                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable11, 4);
                this.jTextField18.setText(java.lang.String.valueOf(totalSum));
                // double amts = java.lang.Double.parseDouble(this.jTextField1.getText());
                // this.jTextField2.setText(java.lang.String.valueOf(amts - totalSum));
                // }
            } else {
                jTable11.setValueAt(0, jTable11.getSelectedRow(), 4);
                double totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(jTable11, 4);
                this.jTextField18.setText(java.lang.String.valueOf(totalSum));
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jTable11MouseClicked
    private void calculateRefund() {

        double calcSchemeBal = 0.0;
        double calcRefundAfter = 0.0;
        if (Double.valueOf(unutilisedSchemeDepositTxt.getText()) > 0) {
            calcSchemeBal = java.lang.Double.valueOf(unutilisedSchemeDepositTxt.getText()) - java.lang.Double.valueOf(totalNetTxt.getText());
            if (calcSchemeBal >= 0) {
                this.refundTxt.setText(totalDepositBalTxt.getText());
                this.schemeBalAfterUtilisationTxt.setText(java.lang.String.valueOf(calcSchemeBal));
            } else if (calcSchemeBal < 0) {
                this.schemeBalAfterUtilisationTxt.setText("0.00");

                if (Double.valueOf(totalDepositBalTxt.getText()) > 0) {
                    calcRefundAfter = java.lang.Double.valueOf(totalDepositBalTxt.getText()) + calcSchemeBal;
                    //+ ve refund
                    //== 0 no refund
                    //-ve dmu refund == 0
                    //this.refundTxt.setText(java.lang.String.valueOf());
                }

            }
        }

        //totalDepositBalTxt
    }
    private void tickChkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tickChkActionPerformed
        double total = 0.0;
        double totalSum = 0.0;
        if (tickChk.isSelected()) {
            for (int k = 0; k < schemeDataTable.getRowCount(); k++) {
                if (schemeDataTable.getValueAt(k, 0) != null) {

                    float qty = java.lang.Float.parseFloat(schemeDataTable.getValueAt(k, 2).toString());
                    float price = java.lang.Float.parseFloat(schemeDataTable.getValueAt(k, 3).toString());
                    schemeDataTable.setValueAt(qty * price, k, 6);
                    if (schemeDataTable.isEditing()) {
                        schemeDataTable.getCellEditor().stopCellEditing();
                    }

                    totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(schemeDataTable, 6);
                    this.totalNetTxt.setText(java.lang.String.valueOf(totalSum));
                    schemeDataTable.setValueAt(true, k, 8);

                    if (java.lang.Double.valueOf(totalDepositBalTxt.getText()) > 0) {
                        calculateRefund();
                    }

                }
            }
        } else {
            for (int k = 0; k < schemeDataTable.getRowCount(); k++) {
                if (schemeDataTable.getValueAt(k, 0) != null) {
                    schemeDataTable.setValueAt(0, k, 6);
                    totalSum = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(schemeDataTable, 6);
                    this.totalNetTxt.setText(java.lang.String.valueOf(totalSum));
                    schemeDataTable.setValueAt(false, k, 8);

                }
            }

        }
        this.totalAmountTxt.setText(java.lang.String.valueOf(totalSum));
        totalNetTxt.setText(String.valueOf(Double.parseDouble(totalNetTxt.getText()) - copaymentsTotal));
    }//GEN-LAST:event_tickChkActionPerformed

    private void utlizeDepositBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_utlizeDepositBtnActionPerformed
//        // TODO add your handling code here:
//         if (java.lang.Double.valueOf(totalDepositBalTxt.getText().toString()) >= java.lang.Double.valueOf(totalNetTxt.getText().toString())) {
//                String receiptNo = null;
//                    String actCode = null;
//                    String glCode = null;
//                    String bankAcc = null;
//                    String glCode1 = null;
//                    String bankAcc1 = null;
//                    String transNo = null;
//                    String payMode = null;
//                    String patCat = null;
//                    String patientAcc = null;
//                    String cardNo = null;
//                    String scheme = null;
//                    String cardName = null;
//                    String isurer = null;
//                    String expDate = null;
//                    String staffNo = null;
//                    String actNames = null;
//                    String user = null;
//                    String actNames1 = null;
//                    String actCode1 = null;
//                    String invoiceNo = null;
//                    com.afrisoftech.lib.InvoiceNumbers.invoiceType = false;
//                    
//             try {
//                 
//                 java.sql.Statement pss12 = connectDB.createStatement();
//                    java.sql.ResultSet rsts11 = pss12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
//                    while (rsts11.next()) {
//                        actCode = rsts11.getObject(1).toString();
//                        actNames = rsts11.getObject(2).toString();
//                    }
//
//                    java.sql.Statement pss = connectDB.createStatement();
//                    java.sql.ResultSet rss = pss.executeQuery("select nextval('transaction_no_seq')");
//
//                    while (rss.next()) {
//                        transNo = rss.getObject(1).toString();
//                    }
//                    java.sql.Statement pss11 = connectDB.createStatement();
//                    java.sql.ResultSet rsts1 = pss11.executeQuery("select code,activity from pb_activity where activity_category ='DA'");
//                    while (rsts1.next()) {
//                        actCode1 = rsts1.getObject(1).toString();
//                        actNames1 = rsts1.getObject(2).toString();
//                    }
//                    java.sql.Statement pss111 = connectDB.createStatement();
//                    java.sql.ResultSet rsts111 = pss111.executeQuery("select current_user");
//                    while (rsts111.next()) {
//                        user = rsts111.getObject(1).toString();
//                    }
//                 
//                 
//                 
//                 
//                 
//                 
//                 double balAfterUtilization = java.lang.Double.valueOf(totalDepositBalTxt.getText()) - java.lang.Double.valueOf(refundTxt.getText());
//                 java.sql.Statement stm1211x = connectDB.createStatement();
//                 java.sql.ResultSet rse1211x = stm1211x.executeQuery("SELECT distinct description, activity_code FROM ac_ledger WHERE patient_no = '" + patientNotxt.getText() + "' and transaction_type = 'Unutilized patient deposit'");
//                 String rnamex = null, rcodex = null;
//                 while (rse1211x.next()) {
//                     rnamex = rse1211x.getObject(1).toString();
//                     rcodex = rse1211x.getObject(2).toString();
//                 }
//                 if (balAfterUtilization > 0) {
//
//                     java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("INSERT INTO hp_patient_card VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
//                     pstmt1.setString(1, patientNotxt.getText());
//                     pstmt1.setObject(2, "Receipt");
//                     pstmt1.setString(3, "");
//                     pstmt1.setString(4, "Scheme");
//                     pstmt1.setString(5, transNo);
//                     pstmt1.setString(7, schemeNameTxt.getText());
//                     pstmt1.setString(6, "");
//                     pstmt1.setString(8, "");
//                     pstmt1.setString(9, schemePayerTxt.getText());
//                     pstmt1.setObject(10, null);
//                     pstmt1.setString(11, "");
//                     pstmt1.setDouble(13, balAfterUtilization);
//                     pstmt1.setDouble(12, 0.00);
//                     //pstmt1.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(SchemeDataTable.getValueAt(0, 0).toString())));
//                     pstmt1.setDate(14, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
//                     pstmt1.setObject(15, actCode);
//                     pstmt1.setString(16, glCode);
//                     pstmt1.setDouble(17, 1);
//                     pstmt1.setObject(18, memberNoTxt.getText());
//                     pstmt1.setBoolean(19, true);
//                     pstmt1.setString(20, "Receipts");
//                     pstmt1.setBoolean(21, true);
//                     pstmt1.setString(22, actNames);
//                     pstmt1.setString(23, invoiceNo);
//                     pstmt1.setString(24, user);
//                     pstmt1.setString(25, "");
//                     pstmt1.setString(26, "OP");
//                     pstmt1.executeUpdate();
//
//
//                     java.sql.PreparedStatement pstmt2v = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
//                     pstmt2v.setString(1, rcodex);
//                     pstmt2v.setString(2, rnamex);
//                     pstmt2v.setString(3, patientNotxt.getText());
//                     pstmt2v.setString(4, patientNameTxt.getText());
//                     pstmt2v.setString(5, "Patient deposit");
//                     pstmt2v.setString(6, cardNo);
//                     pstmt2v.setString(7, cardName);
//                     pstmt2v.setString(8, "OP");
//                     pstmt2v.setString(9, isurer);
//                     pstmt2v.setString(10, "Scheme");
//                     pstmt2v.setString(11, "");
//                     pstmt2v.setString(12, "");
//                     pstmt2v.setString(13, "");
//                     pstmt2v.setString(14, "Receipt");
//                     pstmt2v.setString(15, "Unutilized patient deposit");
//                     pstmt2v.setDouble(16, balAfterUtilization);
//                     pstmt2v.setDouble(17, 0.00);
//
//                     pstmt2v.setDate(18, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
//                     pstmt2v.setString(19, transNo);
//                     pstmt2v.setBoolean(20, false);
//                     pstmt2v.setBoolean(21, false);
//                     pstmt2v.setBoolean(22, false);
//                     pstmt2v.setString(23, user);
//                     pstmt2v.setString(24, "");//cash point
//                     pstmt2v.setString(25, "");//shift
//                     pstmt2v.setTimestamp(26, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
//                     pstmt2v.executeUpdate();
//
//
//                 } else if (balAfterUtilization < 0) {
//                     java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("INSERT INTO hp_patient_card VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
//                     pstmt1.setString(1, patientNotxt.getText());
//                     pstmt1.setObject(2, "Refund");
//                     pstmt1.setString(3, "");
//                     pstmt1.setString(4, "Scheme");
//                     pstmt1.setString(5, transNo);
//                     pstmt1.setString(7, schemeNameTxt.getText());
//                     pstmt1.setString(6, "");
//                     pstmt1.setString(8, "");
//                     pstmt1.setString(9, schemePayerTxt.getText());
//                     pstmt1.setObject(10, null);
//                     pstmt1.setString(11, "");
//                     pstmt1.setDouble(13, 0.00);
//                     pstmt1.setDouble(12, -1 * balAfterUtilization);
//                     pstmt1.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(SchemeDataTable.getValueAt(0, 0).toString())));
//                     pstmt1.setObject(15, actCode);
//                     pstmt1.setString(16, glCode);
//                     pstmt1.setDouble(17, 1);
//                     pstmt1.setObject(18, memberNoTxt.getText());
//                     pstmt1.setBoolean(19, true);
//                     pstmt1.setString(20, "Receipts");
//                     pstmt1.setBoolean(21, true);
//                     pstmt1.setString(22, actNames);
//                     pstmt1.setString(23, invoiceNo);
//                     pstmt1.setString(24, user);
//                     pstmt1.setString(25, "");
//                     pstmt1.setString(26, "OP");
//                     pstmt1.executeUpdate();
//
//
//                     java.sql.PreparedStatement pstmt2v = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
//                     pstmt2v.setString(1, rcodex);
//                     pstmt2v.setString(2, rnamex);
//                     pstmt2v.setString(3, patientNotxt.getText());
//                     pstmt2v.setString(4, patientNameTxt.getText());
//                     pstmt2v.setString(5, "Patient Refund");
//                     pstmt2v.setString(6, cardNo);
//                     pstmt2v.setString(7, cardName);
//                     pstmt2v.setString(8, "OP");
//                     pstmt2v.setString(9, isurer);
//                     pstmt2v.setString(10, "Scheme");
//                     pstmt2v.setString(11, "");
//                     pstmt2v.setString(12, "");
//                     pstmt2v.setString(13, "");
//                     pstmt2v.setString(14, "Receipt");
//                     pstmt2v.setString(15, "Unutilized patient deposit");
//                     pstmt2v.setDouble(16, 0.00);
//                     pstmt2v.setDouble(17, -1 * balAfterUtilization);
//                     pstmt2v.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.sql.Date.valueOf(SchemeDataTable.getValueAt(0, 0).toString())));
//                     pstmt2v.setString(19, transNo);
//                     pstmt2v.setBoolean(20, false);
//                     pstmt2v.setBoolean(21, false);
//                     pstmt2v.setBoolean(22, false);
//                     pstmt2v.setString(23, user);
//                     pstmt2v.setString(24, "");//cash point
//                     pstmt2v.setString(25, "");//shift
//                     pstmt2v.setTimestamp(26, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
//                     pstmt2v.executeUpdate();
//                 }
//                 ///utilise scheme's deposit
//             } catch (SQLException ex) {
//                 Logger.getLogger(FinSchemeInvsIntfr.class.getName()).log(Level.SEVERE, null, ex);
//             }
//                    }
//         
//         else{
        //JOptionPane.showMessageDialog(this,"The deposit amount isn't sufficient to clear the bill");
        JOptionPane.showMessageDialog(this, "Not yet implemented");
        //   utilizedepositTxt.setText("0.00") ;
        //}
    }//GEN-LAST:event_utlizeDepositBtnActionPerformed

    private void searchButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton3ActionPerformed

        schemeSearchDialog.dispose();
        java.awt.Point point = this.schemeNameTxt1.getLocationOnScreen();

        schemeSearchDialog.setSize(600, 200);

        schemeSearchDialog.setLocation(point);
        schemeSearchDialog.setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_searchButton3ActionPerformed

    private void schemeSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_schemeSearchTxtCaretUpdate
        if (schemeSearchTxt.getText().length() < 1) {

            System.out.println("Nothing");
        } else {
            schemeSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT account_no,scheme_name,payer_name from ac_schemes where scheme_name ILIKE '%" + schemeSearchTxt.getText() + "%' AND suspended = false and closed = false order by scheme_name"));

            schemeSearchTable.setShowHorizontalLines(false);
            schemeSearchScrollPane.setViewportView(schemeSearchTable);

        }         // TODO add your handling code here:
    }//GEN-LAST:event_schemeSearchTxtCaretUpdate

    private void schemeSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_schemeSearchTableMouseClicked

        schemeNameTxt1.setText(schemeSearchTable.getValueAt(schemeSearchTable.getSelectedRow(), 1).toString());

        schemeSearchDialog.dispose();

        // TODO add your handling code here:
    }//GEN-LAST:event_schemeSearchTableMouseClicked

    private void dispose12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispose12ActionPerformed

        schemeSearchDialog.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_dispose12ActionPerformed

    private void viewAllChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAllChkbxActionPerformed
        this.totalAmountTxt.setText("");
        for (int k = 0; k < viewTable.getRowCount(); k++) {
            for (int r = 0; r < viewTable.getColumnCount(); r++) {
                viewTable.getModel().setValueAt(null, k, r);
            }
        }

        for (int k = 0; k < schemeDataTable.getRowCount(); k++) {
            for (int r = 0; r < schemeDataTable.getColumnCount(); r++) {
                schemeDataTable.getModel().setValueAt(null, k, r);
            }
        }

        int i = 0;
        int j = 0;

        viewTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                + "select distinct date::date, patient_no, scheme, sum(debit-credit) as bill_amount, upper(funsoft_get_patient_name(patient_no)) as patient_name   "
                + " FROM hp_patient_card where (ip_no='OP' or ip_no = '') and scheme !='' and paid=false"
                + " and date between '" + beginDate.getDate().toString() + "'::date and '" + endDate.getDate().toString() + "'::date "
                + "  group by 1,2,3 having sum(debit-credit) > 0 order by patient_no"));

        System.err.println(""
                + "select distinct date::date,patient_no,scheme, sum(debit-credit), upper(funsoft_get_patient_name(patient_no))   "
                + " FROM hp_patient_card where (ip_no='OP' or ip_no = '') and scheme !='' and paid=false"
                + " and date between '" + beginDate.getDate().toString() + "'::date and '" + endDate.getDate().toString() + "'::date  "
                + "  group by 1,2,3 having sum(debit-credit)>0 order by patient_no");

        accountNoTxt.setText("");
        // TODO add your handling code here:
    }//GEN-LAST:event_viewAllChkbxActionPerformed
    public java.lang.String getShiftNumber() {

        /*
         * try {
         *
         * java.sql.Statement stmtf = connectDB.createStatement();
         * java.sql.ResultSet rsetf = stmtf.executeQuery("select code from
         * ac_cash_points_setup where description = current_user"); while
         * (rsetf.next()){ cashPoint = rsetf.getObject(1).toString();
         *
         * }
         * } catch (java.sql.SQLException sqe) { sqe.printStackTrace();
         * System.out.println("select not successful"); }
         */
        try {

            java.sql.Statement stmt = connectDB.createStatement();

            // java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE cash_point = '"+System.getProperty("cashpoint")+"' AND user_name = current_user AND (status = 'Running' OR status = 'Suspended')");
            java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE user_name = current_user AND (status = 'Running' OR status = 'Suspended')");

            while (rset.next()) {

                shift_no = rset.getString(1);

            }

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        return shift_no;

    }

    public java.lang.String getCashPoint() {

        /*
         * try {
         *
         * java.sql.Statement stmtf = connectDB.createStatement();
         * java.sql.ResultSet rsetf = stmtf.executeQuery("select code from
         * ac_cash_points_setup where description = current_user"); while
         * (rsetf.next()){ cashPoint = rsetf.getObject(1).toString();
         *
         * }
         * } catch (java.sql.SQLException sqe) { sqe.printStackTrace();
         * System.out.println("select not successful"); }
         */
        try {

            java.sql.Statement stmt = connectDB.createStatement();

            // java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE cash_point = '"+System.getProperty("cashpoint")+"' AND user_name = current_user AND (status = 'Running' OR status = 'Suspended')");
            java.sql.ResultSet rset = stmt.executeQuery("SELECT cash_point FROM ac_shifts WHERE user_name = current_user AND (status = 'Running' OR status = 'Suspended')");

            while (rset.next()) {

                cash_no = rset.getString(1);

            }

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        return cash_no;

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField accountNoTxt;
    private com.afrisoftech.lib.DatePicker beginDate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JTextField cardNumberTxt;
    private javax.swing.JTextField claimNumberTxt;
    private javax.swing.JTextField coPaymentsTxt;
    private com.afrisoftech.lib.DatePicker datePicker11;
    private com.afrisoftech.lib.DatePicker datePicker12;
    private javax.swing.JButton dispose11;
    private javax.swing.JButton dispose12;
    private javax.swing.JTextField dmuBalanceTxt;
    private com.afrisoftech.lib.DatePicker endDate;
    public static javax.swing.JButton finalizeInvoiceBtn;
    private javax.swing.JTextField invoiceNoTxt;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton31;
    public static javax.swing.JButton jButton4;
    private javax.swing.JButton jButton41;
    private javax.swing.JButton jButton42;
    private javax.swing.JButton jButton421;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton51;
    private javax.swing.JButton jButton52;
    private javax.swing.JButton jButton521;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton9;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel2122;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel641;
    private javax.swing.JPanel jPanel642;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JDialog jSearchDialog11;
    private javax.swing.JDialog jSearchDialog21;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jSearchPanel11;
    private javax.swing.JPanel jSearchPanel12;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JPanel jSearchPanel21;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane11;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JScrollPane jSearchScrollPane21;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTable jSearchTable11;
    private javax.swing.JTable jSearchTable21;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator11;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable11;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JTextField jTextField1111;
    private javax.swing.JTextField jTextField1131;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JTextField jTextField18;
    private javax.swing.JTextField jTextField21;
    private javax.swing.JTextField jTextField31;
    private javax.swing.JTextField jTextField41;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField51;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField61;
    private javax.swing.JTextField jTextField71;
    private javax.swing.JTextField jTextField91;
    private javax.swing.JTable loadPatientDateTable;
    private javax.swing.JTextField memberNoTxt;
    private javax.swing.JDialog patientDialog;
    private javax.swing.JTextField patientNameTxt;
    private javax.swing.JTextField patientNotxt;
    private javax.swing.JTextField refundTxt;
    private javax.swing.JTextField schemeBalAfterUtilisationTxt;
    private javax.swing.JTable schemeDataTable;
    private javax.swing.JTextField schemeNameTxt;
    private javax.swing.JTextField schemeNameTxt1;
    private javax.swing.JTextField schemePayerTxt;
    private javax.swing.JDialog schemeSearchDialog;
    private javax.swing.JScrollPane schemeSearchScrollPane;
    private javax.swing.JTable schemeSearchTable;
    private javax.swing.JTextField schemeSearchTxt;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchButton1;
    private javax.swing.JButton searchButton2;
    private javax.swing.JButton searchButton3;
    private javax.swing.JCheckBox searchByNameChk;
    private javax.swing.JCheckBox searchByNoChk;
    private javax.swing.JTextField searchPatientTxt;
    private javax.swing.JCheckBox tickChk;
    private javax.swing.JTextField totalAmountTxt;
    private javax.swing.JTextField totalDepositBalTxt;
    private javax.swing.JTextField totalDiscountTxt;
    private javax.swing.JTextField totalNetTxt;
    private javax.swing.JTextField unutilisedSchemeDepositTxt;
    private javax.swing.JCheckBox utilizeDepositChkbx;
    private javax.swing.JTextField utilizedepositTxt;
    private javax.swing.JButton utlizeDepositBtn;
    private javax.swing.JCheckBox viewAllChkbx;
    private javax.swing.JTable viewTable;
    // End of variables declaration//GEN-END:variables
}
