/*
 * loanpymntintfr.java
 *
 * Created on August 13, 2002, 1:09 PM
 */
package com.afrisoftech.accounting;

/**
 *
 * @author root
 */
public class Journalsintfr extends javax.swing.JInternalFrame {

    private javax.swing.JComboBox cmbox2;
    private javax.swing.JComboBox cmbox1;
    private javax.swing.JComboBox cmbox;

    /**
     * Creates new form loanpymntintfr
     */
    java.sql.Connection connectDB = null;
    javax.swing.JSpinner beginDateSpinner = null;
    com.afrisoftech.lib.DBObject dbObject;
    javax.swing.JSpinner endDateSpinner = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;

    public Journalsintfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;

        dbObject = new com.afrisoftech.lib.DBObject();

        initComponents();
        debtorsTable.getModel().addTableModelListener(new javax.swing.event.TableModelListener() {
            public void tableChanged(javax.swing.event.TableModelEvent evt) {

                setTotals();

            }
        });
        receiptsTable.getModel().addTableModelListener(new javax.swing.event.TableModelListener() {
            public void tableChanged(javax.swing.event.TableModelEvent evt) {

                setTotals();

            }
        });
        creditorsTable.getModel().addTableModelListener(new javax.swing.event.TableModelListener() {
            public void tableChanged(javax.swing.event.TableModelEvent evt) {

                setTotals();

            }
        });
        consultantsTable.getModel().addTableModelListener(new javax.swing.event.TableModelListener() {
            public void tableChanged(javax.swing.event.TableModelEvent evt) {

                setTotals();

            }
        });
        pettyCashTable.getModel().addTableModelListener(new javax.swing.event.TableModelListener() {
            public void tableChanged(javax.swing.event.TableModelEvent evt) {

                setTotals();

            }
        });
        generalLedgerTable.getModel().addTableModelListener(new javax.swing.event.TableModelListener() {
            public void tableChanged(javax.swing.event.TableModelEvent evt) {

                setTotals();

            }
        });
        patientControlAccountTable.getModel().addTableModelListener(new javax.swing.event.TableModelListener() {
            public void tableChanged(javax.swing.event.TableModelEvent evt) {

                setTotals();

            }
        });
        cashBookTable.getModel().addTableModelListener(new javax.swing.event.TableModelListener() {
            public void tableChanged(javax.swing.event.TableModelEvent evt) {

                setTotals();

            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        bankAccountSearchDialog = new javax.swing.JDialog();
        jSearchPanel1 = new javax.swing.JPanel();
        jTextField1111 = new javax.swing.JTextField();
        jSearchScrollPane1 = new javax.swing.JScrollPane();
        jSearchTable1 = new com.afrisoftech.dbadmin.JTable();
        jButton9 = new javax.swing.JButton();
        debtorSearchAccount = new javax.swing.JDialog();
        jSearchPanel11 = new javax.swing.JPanel();
        searchAccounttxt = new javax.swing.JTextField();
        jSearchScrollPane11 = new javax.swing.JScrollPane();
        jSearchTable11 = new com.afrisoftech.dbadmin.JTable();
        jButton91 = new javax.swing.JButton();
        creditorSearchDialog = new javax.swing.JDialog();
        jSearchPanel111 = new javax.swing.JPanel();
        jTextField111111 = new javax.swing.JTextField();
        jSearchScrollPane111 = new javax.swing.JScrollPane();
        jSearchTable111 = new com.afrisoftech.dbadmin.JTable();
        jButton911 = new javax.swing.JButton();
        glAccountSearchDialog = new javax.swing.JDialog();
        jSearchPanel12 = new javax.swing.JPanel();
        jTextField11112 = new javax.swing.JTextField();
        jSearchScrollPane12 = new javax.swing.JScrollPane();
        jSearchTable12 = new com.afrisoftech.dbadmin.JTable();
        jButton92 = new javax.swing.JButton();
        patientAccountSearchDialog = new javax.swing.JDialog();
        jSearchPanel13 = new javax.swing.JPanel();
        patientCltrtxt = new javax.swing.JTextField();
        jSearchScrollPane13 = new javax.swing.JScrollPane();
        jSearchTable13 = new com.afrisoftech.dbadmin.JTable();
        jButton93 = new javax.swing.JButton();
        patientControlAccountSearchDialog = new javax.swing.JDialog();
        jSearchPanel14 = new javax.swing.JPanel();
        jTextField11114 = new javax.swing.JTextField();
        jSearchScrollPane14 = new javax.swing.JScrollPane();
        jSearchTable14 = new com.afrisoftech.dbadmin.JTable();
        jButton94 = new javax.swing.JButton();
        patientAccountSearchDialog2 = new javax.swing.JDialog();
        jSearchPanel15 = new javax.swing.JPanel();
        patientCltrtxt1 = new javax.swing.JTextField();
        jSearchScrollPane15 = new javax.swing.JScrollPane();
        jSearchTable15 = new com.afrisoftech.dbadmin.JTable();
        jButton95 = new javax.swing.JButton();
        staffAccountSearchDialog = new javax.swing.JDialog();
        staffSearchPanel = new javax.swing.JPanel();
        staffCltrtxt = new javax.swing.JTextField();
        staffSearchScrollPane = new javax.swing.JScrollPane();
        staffSearchTable = new com.afrisoftech.dbadmin.JTable();
        staffCloseBtn = new javax.swing.JButton();
        shiftSearchDialog = new javax.swing.JDialog();
        shiftSearchPanel = new javax.swing.JPanel();
        shiftJTextField = new javax.swing.JTextField();
        shiftSearchScrollPane = new javax.swing.JScrollPane();
        shiftSearchTable = new com.afrisoftech.dbadmin.JTable();
        shiftjButton51 = new javax.swing.JButton();
        try  {
            java.lang.Class.forName("org.postgresql.Driver");
            System.out.println("Found driver");
        } catch(java.lang.ClassNotFoundException cnf){
            System.out.println("driver not found");
        }
        saveJournalBtn = new javax.swing.JButton();
        clearFormBtn = new javax.swing.JButton();
        closeFormBtn = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        journalTransactionPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        debtorsTable = debtorsTable = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        };
        generalLedgerTable = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        creditorsTable = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true, true, false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        cashBookTable = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        receiptsTable = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true, true, true,false,false,false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        pettyCashTable = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        consultantsTable = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        patientControlAccountTable = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        };
        removeRowBtn = new javax.swing.JButton();
        journalHeaderPanel = new javax.swing.JPanel();
        journalDateLbl = new javax.swing.JLabel();
        transactionTypeLbl = new javax.swing.JLabel();
        transactionDatePicker = new com.afrisoftech.lib.DatePicker();
        accountsSelectionPane = new javax.swing.JPanel();
        accountsSelectionPanel = new javax.swing.JPanel();
        jTextField10 = new javax.swing.JTextField();
        generalLedgerChkbx = new javax.swing.JCheckBox();
        debtorChkbx = new javax.swing.JCheckBox();
        creditorsChkbx = new javax.swing.JCheckBox();
        cashBookChkbx = new javax.swing.JCheckBox();
        consultantStaffchbx = new javax.swing.JCheckBox();
        pettyCashChkbx = new javax.swing.JCheckBox();
        salesChkbx = new javax.swing.JCheckBox();
        patientChkbx = new javax.swing.JCheckBox();
        transactionTypeCmbx = new javax.swing.JComboBox();
        manualJournalNumberLbl = new javax.swing.JLabel();
        journalNumberTxt = new javax.swing.JTextField();
        totalDebitLbl = new javax.swing.JLabel();
        totalDebitTxt = new javax.swing.JTextField();
        totalCreditLbl = new javax.swing.JLabel();
        totalCreditTxt = new javax.swing.JTextField();

        bankAccountSearchDialog.setModal(true);
        bankAccountSearchDialog.setUndecorated(true);
        bankAccountSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel1.setLayout(new java.awt.GridBagLayout());

        jTextField1111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1111CaretUpdate(evt);
            }
        });
        jTextField1111.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1111ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel1.add(jTextField1111, gridBagConstraints);

        jSearchTable1.setShowHorizontalLines(false);
        jSearchTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable1MouseClicked(evt);
            }
        });
        jSearchScrollPane1.setViewportView(jSearchTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel1.add(jSearchScrollPane1, gridBagConstraints);

        jButton9.setText("Dispose");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel1.add(jButton9, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        bankAccountSearchDialog.getContentPane().add(jSearchPanel1, gridBagConstraints);

        debtorSearchAccount.setModal(true);
        debtorSearchAccount.setUndecorated(true);
        debtorSearchAccount.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel11.setLayout(new java.awt.GridBagLayout());

        searchAccounttxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchAccounttxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel11.add(searchAccounttxt, gridBagConstraints);

        jSearchTable11.setShowHorizontalLines(false);
        jSearchTable11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable11MouseClicked(evt);
            }
        });
        jSearchScrollPane11.setViewportView(jSearchTable11);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel11.add(jSearchScrollPane11, gridBagConstraints);

        jButton91.setText("Dispose");
        jButton91.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton91ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel11.add(jButton91, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        debtorSearchAccount.getContentPane().add(jSearchPanel11, gridBagConstraints);

        creditorSearchDialog.setModal(true);
        creditorSearchDialog.setUndecorated(true);
        creditorSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel111.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel111.setLayout(new java.awt.GridBagLayout());

        jTextField111111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField111111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel111.add(jTextField111111, gridBagConstraints);

        jSearchTable111.setShowHorizontalLines(false);
        jSearchTable111.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable111MouseClicked(evt);
            }
        });
        jSearchScrollPane111.setViewportView(jSearchTable111);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel111.add(jSearchScrollPane111, gridBagConstraints);

        jButton911.setText("Dispose");
        jButton911.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton911ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel111.add(jButton911, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        creditorSearchDialog.getContentPane().add(jSearchPanel111, gridBagConstraints);

        glAccountSearchDialog.setModal(true);
        glAccountSearchDialog.setUndecorated(true);
        glAccountSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel12.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel12.setLayout(new java.awt.GridBagLayout());

        jTextField11112.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField11112CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel12.add(jTextField11112, gridBagConstraints);

        jSearchTable12.setShowHorizontalLines(false);
        jSearchTable12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable12MouseClicked(evt);
            }
        });
        jSearchScrollPane12.setViewportView(jSearchTable12);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel12.add(jSearchScrollPane12, gridBagConstraints);

        jButton92.setText("Dispose");
        jButton92.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton92ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel12.add(jButton92, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        glAccountSearchDialog.getContentPane().add(jSearchPanel12, gridBagConstraints);

        patientAccountSearchDialog.setModal(true);
        patientAccountSearchDialog.setUndecorated(true);
        patientAccountSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel13.setLayout(new java.awt.GridBagLayout());

        patientCltrtxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                patientCltrtxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel13.add(patientCltrtxt, gridBagConstraints);

        jSearchTable13.setShowHorizontalLines(false);
        jSearchTable13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable13MouseClicked(evt);
            }
        });
        jSearchScrollPane13.setViewportView(jSearchTable13);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel13.add(jSearchScrollPane13, gridBagConstraints);

        jButton93.setText("Dispose");
        jButton93.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton93ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel13.add(jButton93, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientAccountSearchDialog.getContentPane().add(jSearchPanel13, gridBagConstraints);

        patientControlAccountSearchDialog.setModal(true);
        patientControlAccountSearchDialog.setUndecorated(true);
        patientControlAccountSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel14.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel14.setLayout(new java.awt.GridBagLayout());

        jTextField11114.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField11114CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel14.add(jTextField11114, gridBagConstraints);

        jSearchTable14.setShowHorizontalLines(false);
        jSearchTable14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable14MouseClicked(evt);
            }
        });
        jSearchScrollPane14.setViewportView(jSearchTable14);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel14.add(jSearchScrollPane14, gridBagConstraints);

        jButton94.setText("Dispose");
        jButton94.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton94ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel14.add(jButton94, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientControlAccountSearchDialog.getContentPane().add(jSearchPanel14, gridBagConstraints);

        patientAccountSearchDialog2.setModal(true);
        patientAccountSearchDialog2.setUndecorated(true);
        patientAccountSearchDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel15.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel15.setLayout(new java.awt.GridBagLayout());

        patientCltrtxt1.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                patientCltrtxt1CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        jSearchPanel15.add(patientCltrtxt1, gridBagConstraints);

        jSearchTable15.setShowHorizontalLines(false);
        jSearchTable15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable15MouseClicked(evt);
            }
        });
        jSearchScrollPane15.setViewportView(jSearchTable15);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel15.add(jSearchScrollPane15, gridBagConstraints);

        jButton95.setText("Dispose");
        jButton95.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton95ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel15.add(jButton95, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        patientAccountSearchDialog2.getContentPane().add(jSearchPanel15, gridBagConstraints);

        staffAccountSearchDialog.setModal(true);
        staffAccountSearchDialog.setUndecorated(true);
        staffAccountSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        staffSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        staffSearchPanel.setLayout(new java.awt.GridBagLayout());

        staffCltrtxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                staffCltrtxtCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
        staffSearchPanel.add(staffCltrtxt, gridBagConstraints);

        staffSearchTable.setShowHorizontalLines(false);
        staffSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                staffSearchTableMouseClicked(evt);
            }
        });
        staffSearchScrollPane.setViewportView(staffSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        staffSearchPanel.add(staffSearchScrollPane, gridBagConstraints);

        staffCloseBtn.setText("Dispose");
        staffCloseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffCloseBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        staffSearchPanel.add(staffCloseBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        staffAccountSearchDialog.getContentPane().add(staffSearchPanel, gridBagConstraints);

        shiftSearchDialog.setModal(true);
        shiftSearchDialog.setUndecorated(true);
        shiftSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        shiftSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        shiftSearchPanel.setLayout(new java.awt.GridBagLayout());

        shiftJTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                shiftJTextFieldCaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        shiftSearchPanel.add(shiftJTextField, gridBagConstraints);

        shiftSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
        shiftSearchTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        shiftSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                shiftSearchTableMouseClicked(evt);
            }
        });
        shiftSearchScrollPane.setViewportView(shiftSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        shiftSearchPanel.add(shiftSearchScrollPane, gridBagConstraints);

        shiftjButton51.setText("Close");
        shiftjButton51.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shiftjButton51ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        shiftSearchPanel.add(shiftjButton51, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        shiftSearchDialog.getContentPane().add(shiftSearchPanel, gridBagConstraints);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Journal Vouchers posting");
        setVisible(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        saveJournalBtn.setMnemonic('P');
        saveJournalBtn.setText("Post Entries to GL");
        saveJournalBtn.setToolTipText("Click here to enter data");
        saveJournalBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveJournalBtnMouseClicked(evt);
            }
        });
        saveJournalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveJournalBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(saveJournalBtn, gridBagConstraints);

        clearFormBtn.setMnemonic('l');
        clearFormBtn.setText("Clear");
        clearFormBtn.setToolTipText("Click here to clear fields");
        clearFormBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearFormBtnMouseClicked(evt);
            }
        });
        clearFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(clearFormBtn, gridBagConstraints);

        closeFormBtn.setMnemonic('C');
        closeFormBtn.setText("Close");
        closeFormBtn.setToolTipText("Click here to close ");
        closeFormBtn.setSelected(true);
        closeFormBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeFormBtnMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(closeFormBtn, gridBagConstraints);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jLabel7, gridBagConstraints);

        journalTransactionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Select Accounts here"));
        journalTransactionPanel.setLayout(new java.awt.GridBagLayout());

        debtorsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Account", "Payer", "Scheme", "Debit", "Credit", "Reference", "Gl Code", "Reason"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        debtorsTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        debtorsTable.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        debtorsTable.setDragEnabled(true);
        debtorsTable.setShowHorizontalLines(false);
        debtorsTable.setSurrendersFocusOnKeystroke(true);

        /*   cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset3, "activity_code", null, null, null));
        //javax.swing.table.TableColumn s = this.jTable1.getColumnModel().getColumn(0);
        javax.swing.table.TableColumn s = this.jTable1.getColumn("GL Code");
        s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
        cmbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxActionPerformed(evt);
            }
        });
        */
        debtorsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                debtorsTableMouseClicked(evt);
            }
        });
        debtorsTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                debtorsTableKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(debtorsTable);

        generalLedgerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Account", "Reference", "Debit", "Credit", "Reason", "Client Account"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        generalLedgerTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        generalLedgerTable.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        generalLedgerTable.setDragEnabled(true);
        generalLedgerTable.setShowHorizontalLines(false);
        generalLedgerTable.setSurrendersFocusOnKeystroke(true);

        /*   cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset3, "activity_code", null, null, null));
        //javax.swing.table.TableColumn s = this.jTable1.getColumnModel().getColumn(0);
        javax.swing.table.TableColumn s = this.jTable1.getColumn("GL Code");
        s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
        cmbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxActionPerformed(evt);
            }
        });
        */
        generalLedgerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                generalLedgerTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(generalLedgerTable);

        creditorsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Account", "Creditor Name", "Debit", "Credit", "Reference", "Gl Code", "Invoice No", "Cheque No", "Narration"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        creditorsTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        creditorsTable.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        creditorsTable.setDragEnabled(true);
        creditorsTable.setShowHorizontalLines(false);
        creditorsTable.setSurrendersFocusOnKeystroke(true);

        /*   cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset3, "activity_code", null, null, null));
        //javax.swing.table.TableColumn s = this.jTable1.getColumnModel().getColumn(0);
        javax.swing.table.TableColumn s = this.jTable1.getColumn("GL Code");
        s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
        cmbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxActionPerformed(evt);
            }
        });
        */
        creditorsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                creditorsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(creditorsTable);

        cashBookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Bank A/C", "Debit", "Credit", "Reference", "GL A/C", "Cheque No."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cashBookTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        cashBookTable.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        cashBookTable.setDragEnabled(true);
        cashBookTable.setShowHorizontalLines(false);
        cashBookTable.setSurrendersFocusOnKeystroke(true);

        /*   cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset3, "activity_code", null, null, null));
        //javax.swing.table.TableColumn s = this.jTable1.getColumnModel().getColumn(0);
        javax.swing.table.TableColumn s = this.jTable1.getColumn("GL Code");
        s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
        cmbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxActionPerformed(evt);
            }
        });
        */
        cashBookTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cashBookTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(cashBookTable);

        receiptsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Sales A/C", "Ref.", "Debit", "Credit", "Reason", "Shift No", "UserName", "Receipt No"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        receiptsTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        receiptsTable.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        receiptsTable.setDragEnabled(true);
        receiptsTable.setShowHorizontalLines(false);
        receiptsTable.setSurrendersFocusOnKeystroke(true);
        /*   cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset3, "activity_code", null, null, null));
        //javax.swing.table.TableColumn s = this.jTable1.getColumnModel().getColumn(0);
        javax.swing.table.TableColumn s = this.jTable1.getColumn("GL Code");
        s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
        cmbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxActionPerformed(evt);
            }
        });
        */
        receiptsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                receiptsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(receiptsTable);

        pettyCashTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Petty Cash A/C", "Reference", "Debit", "Credit", "Reason", "Staff A/C", "Staff Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        pettyCashTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        pettyCashTable.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        pettyCashTable.setDragEnabled(true);
        pettyCashTable.setShowHorizontalLines(false);
        pettyCashTable.setSurrendersFocusOnKeystroke(true);

        /*   cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset3, "activity_code", null, null, null));
        //javax.swing.table.TableColumn s = this.jTable1.getColumnModel().getColumn(0);
        javax.swing.table.TableColumn s = this.jTable1.getColumn("GL Code");
        s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
        cmbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxActionPerformed(evt);
            }
        });
        */
        pettyCashTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pettyCashTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(pettyCashTable);

        consultantsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Account", "Doctor", "Reason", "Debit", "Credit", "Reference", "Gl Code"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        consultantsTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        consultantsTable.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        consultantsTable.setDragEnabled(true);
        consultantsTable.setShowHorizontalLines(false);
        consultantsTable.setSurrendersFocusOnKeystroke(true);

        /*   cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset3, "activity_code", null, null, null));
        //javax.swing.table.TableColumn s = this.jTable1.getColumnModel().getColumn(0);
        javax.swing.table.TableColumn s = this.jTable1.getColumn("GL Code");
        s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
        cmbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmboxActionPerformed(evt);
            }
        });
        */
        consultantsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                consultantsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(consultantsTable);

        patientControlAccountTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient No", "Patient Name", "Reason", "Debit", "Credit", "A/C Code", "A/C Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        patientControlAccountTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientControlAccountTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(patientControlAccountTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        journalTransactionPanel.add(jScrollPane1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 50.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        getContentPane().add(journalTransactionPanel, gridBagConstraints);

        removeRowBtn.setMnemonic('r');
        removeRowBtn.setText("Remove Row");
        removeRowBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRowBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(removeRowBtn, gridBagConstraints);

        /*    try {
            java.text.DateFormat dateFormat = java.text.DateFormat.getDateInstance(java.text.DateFormat.MEDIUM);
            java.util.Date dateInstance = java.util.Calendar.getInstance().getTime();
            //        java.lang.String dateString2Parse = null;
            //        dateString2Parse = String.valueOf(dateInstance.getDate())+"-"+String.valueOf(dateInstance.getMonth()+1)+"-200"+String.valueOf(dateInstance.getYear()-100);

            java.util.Date formattedDate = dateFormat.parse(dateInstance.toLocaleString());
            System.out.println(dateFormat.format(formattedDate));
            javax.swing.SpinnerDateModel beginDate = new javax.swing.SpinnerDateModel(formattedDate, null, null,java.util.Calendar.DAY_OF_MONTH);
            //   javax.swing.SpinnerDateModel endDate = new javax.swing.SpinnerDateModel(formattedDate, null, null,java.util.Calendar.DAY_OF_MONTH);

            beginDateSpinner = new javax.swing.JSpinner(beginDate);
            //     endDateSpinner = new javax.swing.JSpinner(endDate);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            journalHeaderPanel.add(beginDateSpinner, gridBagConstraints);

        } catch(java.text.ParseException parseExec) {

            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), parseExec.getMessage());

        }*/
        journalHeaderPanel.setBackground(new java.awt.Color(228, 237, 246));
        journalHeaderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter Date,Account & Journal No. here"));
        journalHeaderPanel.setLayout(new java.awt.GridBagLayout());

        journalDateLbl.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        journalHeaderPanel.add(journalDateLbl, gridBagConstraints);

        transactionTypeLbl.setText("Transaction Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        journalHeaderPanel.add(transactionTypeLbl, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        journalHeaderPanel.add(transactionDatePicker, gridBagConstraints);

        accountsSelectionPane.setBorder(javax.swing.BorderFactory.createTitledBorder(" Tick  type of GL Account here"));
        accountsSelectionPane.setLayout(new java.awt.GridBagLayout());

        /*  try {
            java.text.DateFormat dateFormat = java.text.DateFormat.getDateInstance(java.text.DateFormat.MEDIUM);
            java.util.Date dateInstance = java.util.Calendar.getInstance().getTime();
            //        java.lang.String dateString2Parse = null;
            //        dateString2Parse = String.valueOf(dateInstance.getDate())+"-"+String.valueOf(dateInstance.getMonth()+1)+"-200"+String.valueOf(dateInstance.getYear()-100);

            java.util.Date formattedDate = dateFormat.parse(dateInstance.toLocaleString());
            System.out.println(dateFormat.format(formattedDate));
            javax.swing.SpinnerDateModel beginDate = new javax.swing.SpinnerDateModel(formattedDate, null, null,java.util.Calendar.DAY_OF_MONTH);
            //   javax.swing.SpinnerDateModel endDate = new javax.swing.SpinnerDateModel(formattedDate, null, null,java.util.Calendar.DAY_OF_MONTH);

            beginDateSpinner = new javax.swing.JSpinner(beginDate);
            //     endDateSpinner = new javax.swing.JSpinner(endDate);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            accountsSelectionPanel.add(beginDateSpinner, gridBagConstraints);

        } catch(java.text.ParseException parseExec) {

            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), parseExec.getMessage());

        }
        */
        accountsSelectionPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        accountsSelectionPanel.setLayout(new java.awt.GridBagLayout());

        jTextField10.setEnabled(false);
        jTextField10.setFocusable(false);
        jTextField10.setMinimumSize(new java.awt.Dimension(0, 0));
        jTextField10.setPreferredSize(new java.awt.Dimension(0, 0));
        jTextField10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField10ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        accountsSelectionPanel.add(jTextField10, gridBagConstraints);

        buttonGroup1.add(generalLedgerChkbx);
        generalLedgerChkbx.setText("Other GL A/C");
        generalLedgerChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        generalLedgerChkbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generalLedgerChkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        accountsSelectionPanel.add(generalLedgerChkbx, gridBagConstraints);

        buttonGroup1.add(debtorChkbx);
        debtorChkbx.setText("Debtors");
        debtorChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        debtorChkbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debtorChkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        accountsSelectionPanel.add(debtorChkbx, gridBagConstraints);

        buttonGroup1.add(creditorsChkbx);
        creditorsChkbx.setText("Creditors");
        creditorsChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        creditorsChkbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creditorsChkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        accountsSelectionPanel.add(creditorsChkbx, gridBagConstraints);

        buttonGroup1.add(cashBookChkbx);
        cashBookChkbx.setText("Cashbook");
        cashBookChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        cashBookChkbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cashBookChkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        accountsSelectionPanel.add(cashBookChkbx, gridBagConstraints);

        buttonGroup1.add(consultantStaffchbx);
        consultantStaffchbx.setText("Consultants");
        consultantStaffchbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        consultantStaffchbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultantStaffchbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        accountsSelectionPanel.add(consultantStaffchbx, gridBagConstraints);

        buttonGroup1.add(pettyCashChkbx);
        pettyCashChkbx.setText("Imprest/Petty Cash");
        pettyCashChkbx.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        pettyCashChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        pettyCashChkbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pettyCashChkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        accountsSelectionPanel.add(pettyCashChkbx, gridBagConstraints);

        buttonGroup1.add(salesChkbx);
        salesChkbx.setText("Receipts");
        salesChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        salesChkbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salesChkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        accountsSelectionPanel.add(salesChkbx, gridBagConstraints);

        buttonGroup1.add(patientChkbx);
        patientChkbx.setText("Patient A/C");
        patientChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        patientChkbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientChkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        accountsSelectionPanel.add(patientChkbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        accountsSelectionPane.add(accountsSelectionPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        journalHeaderPanel.add(accountsSelectionPane, gridBagConstraints);

        transactionTypeCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select transaction_type from pb_transaction_type order by transaction_type"));
        transactionTypeCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transactionTypeCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        journalHeaderPanel.add(transactionTypeCmbx, gridBagConstraints);

        manualJournalNumberLbl.setText("Journal No");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        journalHeaderPanel.add(manualJournalNumberLbl, gridBagConstraints);

        journalNumberTxt.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        journalHeaderPanel.add(journalNumberTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(journalHeaderPanel, gridBagConstraints);

        totalDebitLbl.setText("Total Debit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(totalDebitLbl, gridBagConstraints);

        totalDebitTxt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        totalDebitTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        totalDebitTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(totalDebitTxt, gridBagConstraints);

        totalCreditLbl.setText("Total Credit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(totalCreditLbl, gridBagConstraints);

        totalCreditTxt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        totalCreditTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        totalCreditTxt.setText("0.00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        getContentPane().add(totalCreditTxt, gridBagConstraints);

        setBounds(0, 0, 878, 518);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton94ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton94ActionPerformed
        patientControlAccountSearchDialog.dispose();

// TODO add your handling code here:
    }//GEN-LAST:event_jButton94ActionPerformed

    private void jSearchTable14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable14MouseClicked
        if (patientChkbx.isSelected()) {
            patientControlAccountTable.setValueAt(jSearchTable14.getValueAt(jSearchTable14.getSelectedRow(), 0), patientControlAccountTable.getSelectedRow(), 5);
            patientControlAccountTable.setValueAt(jSearchTable14.getValueAt(jSearchTable14.getSelectedRow(), 1), patientControlAccountTable.getSelectedRow(), 6);
        }
        patientControlAccountSearchDialog.dispose();
// TODO add your handling code here:
    }//GEN-LAST:event_jSearchTable14MouseClicked

    private void jTextField11114CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11114CaretUpdate
        if (jTextField11114.getCaretPosition() < 1) {

            System.out.println("Nothing");
        } else {

            jSearchTable14.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT code,activity from pb_activity where activity ILIKE '" + jTextField11114.getText() + "%' AND activity_category ilike 'PR' order by activity"));
            jSearchTable14.setShowHorizontalLines(false);
            jSearchScrollPane14.setViewportView(jSearchTable14);
        }
// TODO add your handling code here:
    }//GEN-LAST:event_jTextField11114CaretUpdate

    private void patientControlAccountTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientControlAccountTableMouseClicked
        if (patientControlAccountTable.getSelectedColumn() == 0) {

            this.cmboxMouseClicked21zq();
        } else {
            if (patientControlAccountTable.getSelectedColumn() == 5) {

                this.cmboxMouseClicked21z();
            }
        }
// TODO add your handling code here:
    }//GEN-LAST:event_patientControlAccountTableMouseClicked
    private void cmboxMouseClicked21zq() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane1.getLocationOnScreen();
        patientAccountSearchDialog.setSize(700, 200);
        patientAccountSearchDialog.setLocation(point);
        patientAccountSearchDialog.setVisible(true);
    }

    private void cmboxMouseClicked21z() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane1.getLocationOnScreen();
        patientControlAccountSearchDialog.setSize(700, 200);
        patientControlAccountSearchDialog.setLocation(point);
        patientControlAccountSearchDialog.setVisible(true);
    }
    private void jButton93ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton93ActionPerformed
        patientAccountSearchDialog.dispose();
// TODO add your handling code here:
    }//GEN-LAST:event_jButton93ActionPerformed

    private void jSearchTable13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable13MouseClicked
        if (patientChkbx.isSelected()) {
            patientControlAccountTable.setValueAt(jSearchTable13.getValueAt(jSearchTable13.getSelectedRow(), 0), patientControlAccountTable.getSelectedRow(), 0);
            patientControlAccountTable.setValueAt(jSearchTable13.getValueAt(jSearchTable13.getSelectedRow(), 1), patientControlAccountTable.getSelectedRow(), 1);
        }
        patientAccountSearchDialog.dispose();
// TODO add your handling code here:
    }//GEN-LAST:event_jSearchTable13MouseClicked

    private void patientCltrtxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_patientCltrtxtCaretUpdate
        if (patientCltrtxt.getCaretPosition() > 3) {

//            System.out.println("Nothing");
//        }else{
            jSearchTable13.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register WHERE second_name||' '||first_name||' '||last_name ILIKE '%" + patientCltrtxt.getText() + "%' UNION ALL SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, year_of_birth, residence from hp_inpatient_register where patient_no ILIKE '%" + patientCltrtxt.getText() + "%' UNION ALL SELECT annual_no, upper(patient_name) as name,date_of_death::character varying dod,home_county from hp_mortuary where annual_no ilike '%" + patientCltrtxt.getText() + "%'  order by 2"));

            jSearchTable13.setShowHorizontalLines(false);
            jSearchScrollPane13.setViewportView(jSearchTable13);

        }
// TODO add your handling code here:
    }//GEN-LAST:event_patientCltrtxtCaretUpdate

    private void patientChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientChkbxActionPerformed
        this.invalidate();
        this.patientControlAccountTable.setVisible(true);
        patientControlAccountTable.grabFocus();
        this.jScrollPane1.setViewportView(patientControlAccountTable);
        this.validate();
        cmbox1 = new javax.swing.JComboBox();
// TODO add your handling code here:
    }//GEN-LAST:event_patientChkbxActionPerformed

    private void transactionTypeCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transactionTypeCmbxActionPerformed
        saveJournalBtn.setEnabled(true);      // Add your handling code here:
    }//GEN-LAST:event_transactionTypeCmbxActionPerformed

    private void consultantsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_consultantsTableMouseClicked
        if (consultantsTable.getSelectedColumn() == 0) {

            this.cmboxMouseClicked1();
        } else {
            if (consultantsTable.getSelectedColumn() == 6) {

                this.cmboxMouseClicked21();
            }
        }     // Add your handling code here:
    }//GEN-LAST:event_consultantsTableMouseClicked

    private void consultantStaffchbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultantStaffchbxActionPerformed
        this.invalidate();
        this.consultantsTable.grabFocus();
        this.consultantsTable.setVisible(true);
        this.jScrollPane1.setViewportView(consultantsTable);
        this.validate();
        cmbox1 = new javax.swing.JComboBox();
        cmbox = new javax.swing.JComboBox();
        cmbox2 = new javax.swing.JComboBox();
        // Add your handling code here:
    }//GEN-LAST:event_consultantStaffchbxActionPerformed

    private void pettyCashTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pettyCashTableMouseClicked
        if (pettyCashTable.getSelectedColumn() == 0) {

            this.cmboxMouseClicked212();
        } else if (pettyCashTable.getSelectedColumn() == 5 || pettyCashTable.getSelectedColumn() == 6) {
            this.cmboxMouseClicked21222();
        }// Add your handling code here:
    }//GEN-LAST:event_pettyCashTableMouseClicked
    private void cmboxMouseClicked212() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane1.getLocationOnScreen();
        glAccountSearchDialog.setSize(700, 200);
        glAccountSearchDialog.setLocation(point);
        glAccountSearchDialog.setVisible(true);
    }
    private void receiptsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_receiptsTableMouseClicked
        if (receiptsTable.getSelectedColumn() == 0) {

            this.cmboxMouseClicked211();
        }        // Add your handling code here:
        if (receiptsTable.getSelectedColumn() == 7) {

            shiftSearchDialog.dispose();
            java.awt.Point point = this.jScrollPane1.getLocationOnScreen();

            shiftSearchDialog.setSize(400, 200);

            shiftSearchDialog.setLocation(point);
            shiftSearchDialog.setVisible(true);
        }

        // Add your handling code here:
    }//GEN-LAST:event_receiptsTableMouseClicked
    private void cmboxMouseClicked211() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane1.getLocationOnScreen();
        glAccountSearchDialog.setSize(700, 200);
        glAccountSearchDialog.setLocation(point);
        glAccountSearchDialog.setVisible(true);
    }
    private void pettyCashChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pettyCashChkbxActionPerformed
        this.invalidate();
        this.pettyCashTable.setVisible(true);
        pettyCashTable.grabFocus();
        this.jScrollPane1.setViewportView(pettyCashTable);
        this.validate();
        cmbox1 = new javax.swing.JComboBox();
        // Add your handling code here:
    }//GEN-LAST:event_pettyCashChkbxActionPerformed

    private void salesChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salesChkbxActionPerformed
        this.invalidate();
        this.receiptsTable.setVisible(true);
        receiptsTable.grabFocus();
        this.jScrollPane1.setViewportView(receiptsTable);
        this.validate();
        cmbox1 = new javax.swing.JComboBox();
        // Add your handling code here:
    }//GEN-LAST:event_salesChkbxActionPerformed

    private void jSearchTable12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable12MouseClicked
        if (generalLedgerChkbx.isSelected()) {
            generalLedgerTable.setValueAt(jSearchTable12.getValueAt(jSearchTable12.getSelectedRow(), 0), generalLedgerTable.getSelectedRow(), 0);
            generalLedgerTable.setValueAt(jSearchTable12.getValueAt(jSearchTable12.getSelectedRow(), 1), generalLedgerTable.getSelectedRow(), 1);

            glAccountSearchDialog.dispose();
        } else {
            if (debtorChkbx.isSelected()) {
                debtorsTable.setValueAt(jSearchTable12.getValueAt(jSearchTable12.getSelectedRow(), 0), debtorsTable.getSelectedRow(), 6);
                debtorsTable.setValueAt(jSearchTable12.getValueAt(jSearchTable12.getSelectedRow(), 1), debtorsTable.getSelectedRow(), 5);

                glAccountSearchDialog.dispose();
            } else {
                if (creditorsChkbx.isSelected()) {
                    creditorsTable.setValueAt(jSearchTable12.getValueAt(jSearchTable12.getSelectedRow(), 0), creditorsTable.getSelectedRow(), 5);
                    creditorsTable.setValueAt(jSearchTable12.getValueAt(jSearchTable12.getSelectedRow(), 1), creditorsTable.getSelectedRow(), 4);

                    glAccountSearchDialog.dispose();
                } else {
                    if (salesChkbx.isSelected()) {
                        receiptsTable.setValueAt(jSearchTable12.getValueAt(jSearchTable12.getSelectedRow(), 0), receiptsTable.getSelectedRow(), 0);
                        receiptsTable.setValueAt(jSearchTable12.getValueAt(jSearchTable12.getSelectedRow(), 1), receiptsTable.getSelectedRow(), 1);

                        glAccountSearchDialog.dispose();
                    } else {
                        if (pettyCashChkbx.isSelected()) {
                            pettyCashTable.setValueAt(jSearchTable12.getValueAt(jSearchTable12.getSelectedRow(), 0), pettyCashTable.getSelectedRow(), 0);
                            pettyCashTable.setValueAt(jSearchTable12.getValueAt(jSearchTable12.getSelectedRow(), 1), pettyCashTable.getSelectedRow(), 1);

                            glAccountSearchDialog.dispose();
                        } else {
                            if (consultantStaffchbx.isSelected()) {
                                consultantsTable.setValueAt(jSearchTable12.getValueAt(jSearchTable12.getSelectedRow(), 0), consultantsTable.getSelectedRow(), 6);
                                consultantsTable.setValueAt(jSearchTable12.getValueAt(jSearchTable12.getSelectedRow(), 1), consultantsTable.getSelectedRow(), 5);

                                glAccountSearchDialog.dispose();
                            }
                        }
                    }
                }
            }

        }
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable12MouseClicked

    private void jTextField11112CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11112CaretUpdate
        if (jTextField11112.getCaretPosition() < 3) {

            System.out.println("Nothing");
        } else {

            jSearchTable12.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT code,activity from pb_activity where activity ILIKE '" + jTextField11112.getText() + "%' order by activity"));

            jSearchTable12.setShowHorizontalLines(false);
            jSearchScrollPane12.setViewportView(jSearchTable12);

        }        // Add your handling code here:
    }//GEN-LAST:event_jTextField11112CaretUpdate

    private void generalLedgerTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_generalLedgerTableMouseClicked
        if (generalLedgerTable.getSelectedColumn() == 0) {

            this.cmboxMouseClicked21();
        } else if (generalLedgerTable.getSelectedColumn() == 5) {
            cmboxMouseClicked2112();
        }// Add your handling code here:
    }//GEN-LAST:event_generalLedgerTableMouseClicked
    private void cmboxMouseClicked21() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane1.getLocationOnScreen();
        glAccountSearchDialog.setSize(700, 200);
        glAccountSearchDialog.setLocation(point);
        glAccountSearchDialog.setVisible(true);
    }

    private void cmboxMouseClicked2112() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane1.getLocationOnScreen();
        patientAccountSearchDialog2.setSize(700, 200);
        patientAccountSearchDialog2.setLocation(point);
        patientAccountSearchDialog2.setVisible(true);
    }
    private void jButton92ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton92ActionPerformed
        this.glAccountSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton92ActionPerformed

    private void jSearchTable111MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable111MouseClicked
        creditorsTable.setValueAt(jSearchTable111.getValueAt(jSearchTable111.getSelectedRow(), 0), creditorsTable.getSelectedRow(), 0);
        creditorsTable.setValueAt(jSearchTable111.getValueAt(jSearchTable111.getSelectedRow(), 1), creditorsTable.getSelectedRow(), 1);

        creditorSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable111MouseClicked

    private void jTextField111111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111111CaretUpdate
        if (jTextField111111.getCaretPosition() < 3) {

            System.out.println("Nothing");
        } else {
            jSearchTable111.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT code,supplier_name from st_suppliers where supplier_name ILIKE '" + jTextField111111.getText() + "%' order by supplier_name"));

            jSearchTable111.setShowHorizontalLines(false);
            jSearchScrollPane111.setViewportView(jSearchTable111);

            /*try {
             
             searchRowSet111.execute("SELECT code,supplier_name from st_suppliers where supplier_name ILIKE '"+jTextField111111.getText()+"%' order by supplier_name");
             //     searchRowSet.execute("SELECT patient_no, (upper(first_name||' '||second_name)) as name, year_of_birth, residence from hp_patient_register where (upper(first_name||' '||second_name)) ILIKE '"+jTextField11.getText()+"%' order by first_name");
             
             jSearchTable111.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet111, new org.netbeans.lib.sql.models.TableModel.Column[] {
             new org.netbeans.lib.sql.models.TableModel.Column("code", "Account no", false),
             new org.netbeans.lib.sql.models.TableModel.Column("supplier_name", "Creditor", false)
             // new org.netbeans.lib.sql.models.TableModel.Column("payer_name", "Payer", false)
             
             }));
             
             jSearchTable111.setShowHorizontalLines(false);
             jSearchScrollPane111.setViewportView(jSearchTable111);
             
             
             } catch(java.sql.SQLException sqlExec) {
             
             javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
             
             }
             */
        }       // Add your handling code here:
    }//GEN-LAST:event_jTextField111111CaretUpdate

    private void creditorsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_creditorsTableMouseClicked

        if (creditorsTable.getSelectedColumn() == 0) {

            this.cmboxMouseClicked2();
        } else {
            if (creditorsTable.getSelectedColumn() == 5) {

                this.cmboxMouseClicked21();
            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_creditorsTableMouseClicked
    private void cmboxMouseClicked2() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane1.getLocationOnScreen();
        creditorSearchDialog.setSize(700, 200);
        creditorSearchDialog.setLocation(point);
        creditorSearchDialog.setVisible(true);
    }
    private void jButton911ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton911ActionPerformed
        creditorSearchDialog.dispose();       // Add your handling code here:
    }//GEN-LAST:event_jButton911ActionPerformed

    private void jSearchTable11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable11MouseClicked

        if (debtorChkbx.isSelected()) {
            debtorsTable.setValueAt(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 0), debtorsTable.getSelectedRow(), 0);
            debtorsTable.setValueAt(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 2), debtorsTable.getSelectedRow(), 1);
            debtorsTable.setValueAt(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 1), debtorsTable.getSelectedRow(), 2);
        } else {
            if (consultantStaffchbx.isSelected()) {
                consultantsTable.setValueAt(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 0), consultantsTable.getSelectedRow(), 0);
                consultantsTable.setValueAt(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 1), consultantsTable.getSelectedRow(), 1);
            }
        }
        debtorSearchAccount.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable11MouseClicked

    private void jButton91ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton91ActionPerformed
        debtorSearchAccount.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton91ActionPerformed

    private void searchAccounttxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchAccounttxtCaretUpdate
        if (debtorChkbx.isSelected()) {
            if (searchAccounttxt.getCaretPosition() > 3) {

//                System.out.println("Nothing");
//            }
//            else{
                jSearchTable11.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT account_no,scheme_name,payer_name from ac_schemes where scheme_name ILIKE '" + searchAccounttxt.getText() + "%'  order by scheme_name"));

                jSearchTable11.setShowHorizontalLines(false);
                jSearchScrollPane11.setViewportView(jSearchTable11);

            }
        } else {
            if (consultantStaffchbx.isSelected()) {
                if (searchAccounttxt.getCaretPosition() > 3) {

//                    System.out.println("Nothing");
//                }else{
                    jSearchTable11.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT staff_no,first_name||' '||middle_name as name from pb_doctors_list where first_name||' '||middle_name ILIKE '" + searchAccounttxt.getText() + "%' order by name"));

                    jSearchTable11.setShowHorizontalLines(false);
                    jSearchScrollPane11.setViewportView(jSearchTable11);

                }
            }

        }
        // Add your handling code here:
    }//GEN-LAST:event_searchAccounttxtCaretUpdate

    private void jSearchTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable1MouseClicked
        cashBookTable.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 0), cashBookTable.getSelectedRow(), 0);
        cashBookTable.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 1), cashBookTable.getSelectedRow(), 3);
        cashBookTable.setValueAt(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 2), cashBookTable.getSelectedRow(), 4);

        bankAccountSearchDialog.dispose();         // Add your handling code here:
    }//GEN-LAST:event_jSearchTable1MouseClicked

    private void jTextField1111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1111CaretUpdate
        jSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT bank_account_no,bank_name||' - '||bank_account_name as name,gl_code from ac_banks_setup where bank_account_no ILIKE '%" + jTextField1111.getText() + "%' OR bank_name||' - '||bank_account_name  ILIKE '%" + jTextField1111.getText() + "%' order by bank_account_no"));
        jSearchScrollPane1.setViewportView(jSearchTable1);
        System.out.println("Cannot sort out");
        // Add your handling code here:
    }//GEN-LAST:event_jTextField1111CaretUpdate

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        bankAccountSearchDialog.dispose();     // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void cashBookTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cashBookTableMouseClicked
        if (cashBookTable.getSelectedColumn() == 0) {

            this.cmboxMouseClicked();
        }        // Add your handling code here:
    }//GEN-LAST:event_cashBookTableMouseClicked
    private void cmboxMouseClicked() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane1.getLocationOnScreen();
        bankAccountSearchDialog.setSize(700, 200);
        bankAccountSearchDialog.setLocation(point);
        bankAccountSearchDialog.setVisible(true);
    }
    private void debtorsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_debtorsTableMouseClicked
        if (debtorsTable.getSelectedColumn() == 0) {

            this.cmboxMouseClicked1();
        } else {
            if (debtorsTable.getSelectedColumn() == 6) {

                this.cmboxMouseClicked21();
            }
        }   // Add your handling code here:
    }//GEN-LAST:event_debtorsTableMouseClicked
    private void cmboxMouseClicked1() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane1.getLocationOnScreen();
        debtorSearchAccount.setSize(700, 200);
        debtorSearchAccount.setLocation(point);
        debtorSearchAccount.setVisible(true);
    }
    private void cashBookChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cashBookChkbxActionPerformed
        this.invalidate();
        this.cashBookTable.setVisible(true);
        cashBookTable.grabFocus();
        this.jScrollPane1.setViewportView(cashBookTable);
        this.validate();
        cmbox1 = new javax.swing.JComboBox();

        // Add your handling code here:
    }//GEN-LAST:event_cashBookChkbxActionPerformed

    private void generalLedgerChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generalLedgerChkbxActionPerformed
        this.invalidate();
        this.generalLedgerTable.setVisible(true);
        generalLedgerTable.grabFocus();
        this.jScrollPane1.setViewportView(generalLedgerTable);
        this.validate();
        cmbox1 = new javax.swing.JComboBox();


    }//GEN-LAST:event_generalLedgerChkbxActionPerformed

    private void debtorChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debtorChkbxActionPerformed
        /*      this.invalidate();
         //this.jTable11.hide();
         // this.jTable12.hide();
         this.jTable1.grabFocus();
         this.jTable1.setVisible(true);
         this.jScrollPane1.setViewportView(jTable1);
         this.validate();
         cmbox1 = new javax.swing.JComboBox();
         cmbox = new javax.swing.JComboBox();
         cmbox2 = new javax.swing.JComboBox();
   
         */
        this.invalidate();
        this.debtorsTable.grabFocus();
        this.debtorsTable.setVisible(true);
        this.jScrollPane1.setViewportView(debtorsTable);
        this.validate();
        cmbox1 = new javax.swing.JComboBox();
        cmbox = new javax.swing.JComboBox();
        cmbox2 = new javax.swing.JComboBox();

        // Add your handling code here:
    }//GEN-LAST:event_debtorChkbxActionPerformed

    private void creditorsChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creditorsChkbxActionPerformed
        this.invalidate();
        creditorsTable.grabFocus();
        this.creditorsTable.setVisible(true);
        this.jScrollPane1.setViewportView(creditorsTable);
        this.validate();
        cmbox1 = new javax.swing.JComboBox();
        cmbox = new javax.swing.JComboBox();
        cmbox2 = new javax.swing.JComboBox();

        // Add your handling code here:
    }//GEN-LAST:event_creditorsChkbxActionPerformed

    private void jTextField10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField10ActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jTextField10ActionPerformed

    private void clearFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFormBtnActionPerformed
        for (int k = 0; k < debtorsTable.getRowCount(); k++) {
            for (int r = 0; r < debtorsTable.getColumnCount(); r++) {
                debtorsTable.getModel().setValueAt(null, k, r);
            }
        }

        for (int k = 0; k < generalLedgerTable.getRowCount(); k++) {
            for (int r = 0; r < generalLedgerTable.getColumnCount(); r++) {
                creditorsTable.getModel().setValueAt(null, k, r);
            }
        }

        for (int k = 0; k < creditorsTable.getRowCount(); k++) {
            for (int r = 0; r < creditorsTable.getColumnCount(); r++) {
                creditorsTable.getModel().setValueAt(null, k, r);
            }
        }

        for (int k = 0; k < cashBookTable.getRowCount(); k++) {
            for (int r = 0; r < cashBookTable.getColumnCount(); r++) {
                cashBookTable.getModel().setValueAt(null, k, r);
            }
        }
        for (int k = 0; k < pettyCashTable.getRowCount(); k++) {
            for (int r = 0; r < pettyCashTable.getColumnCount(); r++) {
                pettyCashTable.getModel().setValueAt(null, k, r);
            }
        }

        for (int k = 0; k < patientControlAccountTable.getRowCount(); k++) {
            for (int r = 0; r < patientControlAccountTable.getColumnCount(); r++) {
                patientControlAccountTable.getModel().setValueAt(null, k, r);
            }
        }

        for (int k = 0; k < receiptsTable.getRowCount(); k++) {
            for (int r = 0; r < receiptsTable.getColumnCount(); r++) {
                receiptsTable.getModel().setValueAt(null, k, r);
            }
        }

        for (int k = 0; k < consultantsTable.getRowCount(); k++) {
            for (int r = 0; r < consultantsTable.getColumnCount(); r++) {
                consultantsTable.getModel().setValueAt(null, k, r);
            }
        }
        journalNumberTxt.setText("-");
        totalDebitTxt.setText("0.00");
        totalCreditTxt.setText("0.00");
        // Add your handling code here:
    }//GEN-LAST:event_clearFormBtnActionPerformed

    private void removeRowBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRowBtnActionPerformed

        int rows2Delete = debtorsTable.getSelectedRowCount();

        int[] selectedRows = debtorsTable.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {

                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) debtorsTable.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }

            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) debtorsTable.getModel();

                defTableModel.removeRow(debtorsTable.getSelectedRow());

            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_removeRowBtnActionPerformed
    private void cmbox2ActionPerformed(java.awt.event.ActionEvent evt) {
        /*     java.lang.Object selectedGuaran = cmbox2.getSelectedItem();
     
         System.out.println("Selected Guarntor : "+selectedGuaran);
     
         int j = jTable1.getSelectedRow();
         int i = jTable1.getSelectedRow();
         if (selectedGuaran != null) {
         // int i = jTable1.getSelectedRow();
     
         try {
     
         java.sql.Statement pstmt = connectDB.createStatement();
         java.sql.ResultSet rst = pstmt.executeQuery("select member_no,member_name from loan_transactions where loan_account_no = '"+selectedGuaran+"'");
         while (rst.next()){
     
         //jTextField4.setText(rs.getObject(1).toString());
         jTable1.setValueAt(rst.getObject(1),i,2);
         jTable1.setValueAt(rst.getObject(2),i,6);
     
         }
         } catch(java.sql.SQLException sqlex){
         System.out.println(sqlex.getMessage());
         }
         }*/
    }
    private void debtorsTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_debtorsTableKeyReleased
        Object floatCol2 = "00";

        if (debtorsTable.getSelectedColumn() == 2) {

            debtorsTable.setValueAt(floatCol2, debtorsTable.getSelectedRow(), 3);

        } else {
            if (debtorsTable.getSelectedColumn() == 3) {
                debtorsTable.setValueAt(floatCol2, debtorsTable.getSelectedRow(), 2);
            }
        }  // Add your handling code here:
    }//GEN-LAST:event_debtorsTableKeyReleased
    private void cmbox1ActionPerformed(java.awt.event.ActionEvent evt) {
        java.lang.Object selectedGuaran1 = cmbox1.getSelectedItem();

        System.out.println("Selected Guarntor : " + selectedGuaran1);

        int i = creditorsTable.getSelectedRow();
        int j = debtorsTable.getSelectedRow();
        int k = generalLedgerTable.getSelectedRow();
        int c = cashBookTable.getSelectedRow();
        try {
            //    if (jCheckBox1.getText().equals("Shares")){

            if (creditorsChkbx.isSelected()) {
                java.sql.Statement pstmt = connectDB.createStatement();
                java.sql.ResultSet rs = pstmt.executeQuery("select code from activity where activity = '" + selectedGuaran1 + "'");
                while (rs.next()) {
                    //jTextField4.setText(rs.getObject(1).toString());
                    creditorsTable.setValueAt(rs.getObject(1), i, 4);
                }
            } else {
                if (debtorChkbx.isSelected()) {

                    java.sql.Statement pstmt1 = connectDB.createStatement();
                    java.sql.ResultSet rs1 = pstmt1.executeQuery("select code from activity where activity = '" + selectedGuaran1 + "'");
                    while (rs1.next()) {
                        //jTextField4.setText(rs.getObject(1).toString());
                        debtorsTable.setValueAt(rs1.getObject(1), j, 5);
                    }

                } else {
                    if (cashBookChkbx.isSelected()) {

                        java.sql.Statement pstmt13 = connectDB.createStatement();
                        java.sql.ResultSet rs13 = pstmt13.executeQuery("select bank_account_code from bank_branches where bank_account_name = '" + selectedGuaran1 + "'");
                        while (rs13.next()) {
                            //jTextField4.setText(rs.getObject(1).toString());
                            cashBookTable.setValueAt(rs13.getObject(1), c, 3);
                        }

                    } else {
                        java.sql.Statement pstmt11 = connectDB.createStatement();
                        java.sql.ResultSet rs11 = pstmt11.executeQuery("select code from activity where activity = '" + selectedGuaran1 + "'");
                        while (rs11.next()) {
                            //jTextField4.setText(rs.getObject(1).toString());
                            generalLedgerTable.setValueAt(rs11.getObject(1), k, 4);
                        }
                    }

                }
            }
        } catch (java.sql.SQLException sqlex) {
            System.out.println(sqlex.getMessage());
        }
    }
    // }

    private void cmboxActionPerformed(java.awt.event.ActionEvent evt) {
        java.lang.Object selectedGuaran = cmbox.getSelectedItem();

        System.out.println("Selected Guarntor : " + selectedGuaran);

        int j = debtorsTable.getSelectedRow();
        int i = creditorsTable.getSelectedRow();
        if (selectedGuaran != null) {

            try {
                if (creditorsChkbx.isSelected()) {

                    java.sql.Statement pstmt = connectDB.createStatement();
                    java.sql.ResultSet rst = pstmt.executeQuery("select suffix||' '||first_name||' '||middle_name||' '||last_name from member where m_number = '" + selectedGuaran + "'");
                    while (rst.next()) {
                        //jTextField4.setText(rs.getObject(1).toString());
                        creditorsTable.setValueAt(rst.getObject(1), i, 5);
                    }

                } else {

                    if (debtorChkbx.isSelected()) {
                        java.sql.Statement pstmt1 = connectDB.createStatement();
                        java.sql.ResultSet rst1 = pstmt1.executeQuery("select suffix||' '||first_name||' '||middle_name||' '||last_name from member where m_number = '" + selectedGuaran + "'");
                        while (rst1.next()) {
                            //jTextField4.setText(rs.getObject(1).toString());
                            debtorsTable.setValueAt(rst1.getObject(1), j, 6);
                        }
                    }
                }
            } catch (java.sql.SQLException sqlex) {
                System.out.println(sqlex.getMessage());
            }

        }

    }

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        /*
         javax.swing.JComboBox cmbox = new javax.swing.JComboBox();
         //cmbox.setEditable(true);
         cmbox.setModel(new org.netbeans.lib.sql.models.ComboBoxModel (crset1, "description", null, null, null));
         //javax.swing.table.TableColumn s = this.jTable1.getColumnModel().getColumn(0);
         javax.swing.table.TableColumn s = this.jTable1.getColumn("ITEM DESCRIPTION");
         s.setCellEditor(new javax.swing.DefaultCellEditor(cmbox));
         */
        // Add your handling code here:
    }//GEN-LAST:event_formInternalFrameActivated

    private void saveJournalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveJournalBtnActionPerformed

        java.util.Date periodFrom = null;
        java.util.Date periodTo = null;

        try {

            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + transactionDatePicker.getDate() + "' BETWEEN period_from AND period_to");
            while (rsetf.next()) {
                periodFrom = rsetf.getDate(1);
                periodTo = rsetf.getDate(2);
            }

        } catch (java.sql.SQLException sq) {
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());

        }

        if (transactionDatePicker.getDate().before(periodFrom) || transactionDatePicker.getDate().after(periodTo)) {
            javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        } else {
            if (debtorsTable.isEditing()) {
                debtorsTable.getCellEditor().stopCellEditing();
            }
            if (creditorsTable.isEditing()) {
                creditorsTable.getCellEditor().stopCellEditing();
            }

            if (generalLedgerTable.isEditing()) {
                generalLedgerTable.getCellEditor().stopCellEditing();
            }
            if (receiptsTable.isEditing()) {
                receiptsTable.getCellEditor().stopCellEditing();
            }
            if (pettyCashTable.isEditing()) {
                pettyCashTable.getCellEditor().stopCellEditing();
            }
            if (cashBookTable.isEditing()) {
                cashBookTable.getCellEditor().stopCellEditing();
            }
            if (consultantsTable.isEditing()) {
                consultantsTable.getCellEditor().stopCellEditing();
            }
            if (patientControlAccountTable.isEditing()) {
                patientControlAccountTable.getCellEditor().stopCellEditing();
            }

            double debitsTable1 = 0.00;

            double debitsTable11 = 0.00;

            double debitsTable12 = 0.00;

            double debitsTable121 = 0.00;

            double debitsTable122 = 0.00;

            double debitsTable4 = 0.00;

            double creditsTable1 = 0.00;

            double creditsTable11 = 0.00;

            double creditsTable12 = 0.00;

            double creditsTable121 = 0.00;

            double creditsTable122 = 0.00;

            double creditsTable13 = 0.00;

            double creditsTable4 = 0.00;

            double debitsTable13 = 0.00;

            double totalDebits = 0.00;

            double totalCredits = 0.00;

            double Credit = 0.00;

            double Debit = 0.00;

            double creditsTable4x = 0.00;

            double debitsTable4x = 0.00;

            double diff = 0.00;
            //  String bal = null;

            try {
                java.util.Calendar calendar = java.util.Calendar.getInstance();

                long dateNow = calendar.getTimeInMillis();

                java.sql.Date datenowSql = new java.sql.Date(dateNow);

                System.out.println(datenowSql.toString());

                java.sql.Connection con;
                String vouchNo = null;
                String user = null;
                String InvNo = null;
                String KRA = null;
                String Code = null;
                String Codes = null;
                String invoice = null;
                String journal = null;

                for (int j = 0; j < debtorsTable.getModel().getRowCount(); j++) {

                    if (debtorsTable.getModel().getValueAt(j, 3) != null) {

                        debitsTable1 = debitsTable1 + Double.parseDouble(debtorsTable.getModel().getValueAt(j, 3).toString());

                    }

                }

                for (int k = 0; k < creditorsTable.getModel().getRowCount(); k++) {

                    if (creditorsTable.getModel().getValueAt(k, 2) != null) {

                        debitsTable11 = debitsTable11 + Double.parseDouble(creditorsTable.getModel().getValueAt(k, 2).toString());

                    }

                }

                for (int l = 0; l < generalLedgerTable.getModel().getRowCount(); l++) {

                    if (generalLedgerTable.getModel().getValueAt(l, 2) != null) {

                        debitsTable12 = debitsTable12 + Double.parseDouble(generalLedgerTable.getModel().getValueAt(l, 2).toString());

                    }

                }

                for (int s = 0; s < pettyCashTable.getModel().getRowCount(); s++) {

                    if (pettyCashTable.getModel().getValueAt(s, 2) != null) {

                        debitsTable122 = debitsTable122 + Double.parseDouble(pettyCashTable.getModel().getValueAt(s, 2).toString());

                    }

                }

                for (int x = 0; x < receiptsTable.getModel().getRowCount(); x++) {

                    if (receiptsTable.getModel().getValueAt(x, 2) != null) {

                        debitsTable121 = debitsTable121 + Double.parseDouble(receiptsTable.getModel().getValueAt(x, 2).toString());

                    }

                }

                for (int m = 0; m < debtorsTable.getModel().getRowCount(); m++) {

                    if (debtorsTable.getModel().getValueAt(m, 4) != null) {

                        creditsTable1 = creditsTable1 + Double.parseDouble(debtorsTable.getModel().getValueAt(m, 4).toString());

                    }

                }

                for (int n = 0; n < creditorsTable.getModel().getRowCount(); n++) {

                    if (creditorsTable.getModel().getValueAt(n, 3) != null) {

                        creditsTable11 = creditsTable11 + Double.parseDouble(creditorsTable.getModel().getValueAt(n, 3).toString());

                    }

                }

                for (int p = 0; p < generalLedgerTable.getModel().getRowCount(); p++) {

                    if (generalLedgerTable.getModel().getValueAt(p, 3) != null) {

                        creditsTable12 = creditsTable12 + Double.parseDouble(generalLedgerTable.getModel().getValueAt(p, 3).toString());

                    }

                }

                for (int q = 0; q < cashBookTable.getRowCount(); q++) {

                    if (cashBookTable.getModel().getValueAt(q, 2) != null) {

                        creditsTable13 = creditsTable13 + Double.parseDouble(cashBookTable.getModel().getValueAt(q, 2).toString());

                    }

                }

                for (int h = 0; h < receiptsTable.getModel().getRowCount(); h++) {

                    if (receiptsTable.getModel().getValueAt(h, 3) != null) {

                        creditsTable121 = creditsTable121 + Double.parseDouble(receiptsTable.getModel().getValueAt(h, 3).toString());

                    }

                }

                for (int d = 0; d < pettyCashTable.getModel().getRowCount(); d++) {

                    if (pettyCashTable.getModel().getValueAt(d, 3) != null) {

                        creditsTable122 = creditsTable122 + Double.parseDouble(pettyCashTable.getModel().getValueAt(d, 3).toString());

                    }

                }

                for (int r = 0; r < cashBookTable.getModel().getRowCount(); r++) {

                    if (cashBookTable.getModel().getValueAt(r, 1) != null) {

                        debitsTable13 = debitsTable13 + Double.parseDouble(cashBookTable.getModel().getValueAt(r, 1).toString());

                    }

                }

                for (int a = 0; a < consultantsTable.getModel().getRowCount(); a++) {

                    if (consultantsTable.getModel().getValueAt(a, 4) != null) {

                        creditsTable4 = creditsTable4 + Double.parseDouble(consultantsTable.getModel().getValueAt(a, 4).toString());

                    }

                }

                for (int q = 0; q < consultantsTable.getModel().getRowCount(); q++) {

                    if (consultantsTable.getModel().getValueAt(q, 3) != null) {

                        debitsTable4 = debitsTable4 + Double.parseDouble(consultantsTable.getModel().getValueAt(q, 3).toString());

                    }

                }

                for (int u = 0; u < patientControlAccountTable.getModel().getRowCount(); u++) {

                    if (patientControlAccountTable.getModel().getValueAt(u, 4) != null) {

                        creditsTable4x = creditsTable4x + Double.parseDouble(patientControlAccountTable.getModel().getValueAt(u, 4).toString());

                    }

                }

                for (int g = 0; g < patientControlAccountTable.getModel().getRowCount(); g++) {

                    if (patientControlAccountTable.getModel().getValueAt(g, 3) != null) {

                        debitsTable4x = debitsTable4x + Double.parseDouble(patientControlAccountTable.getModel().getValueAt(g, 3).toString());

                    }

                }

                totalDebits = debitsTable1 + debitsTable11 + debitsTable12 + debitsTable13 + debitsTable121 + debitsTable122 + debitsTable4 + debitsTable4x;

                System.out.println(totalDebits);

                totalCredits = creditsTable1 + creditsTable11 + creditsTable12 + creditsTable13 + creditsTable121 + creditsTable122 + creditsTable4 + creditsTable4x;

                System.out.println(totalCredits);

                //System.out.println("Difference Debits V Credits = "+(totalDebits - totalCredits));
                // bal = (totalDebits - totalCredits);
                String bal = new com.afrisoftech.sys.Format2Currency().Format2Currency(Double.toString(totalDebits - totalCredits));

                System.out.println("Difference Debits V Credits = " + bal);

                diff = Double.parseDouble(java.lang.String.valueOf(bal));

                System.out.println("Difference = " + diff);

                if (diff != 0.00) {
                    javax.swing.JOptionPane.showMessageDialog(this, "Debits and Credits MUST balance! Out of balance by " + new com.afrisoftech.sys.Format2Currency().Format2Currency(Double.toString(totalDebits - totalCredits)));

                } else {

                    String transNo = null;

                    java.sql.Savepoint registerSavePoint = null;
                    try {
                        connectDB.setAutoCommit(false);
                        registerSavePoint = connectDB.setSavepoint("registration");
                    } catch (java.sql.SQLException ex) {
                        ex.printStackTrace();
                    }

                    try {
                        java.sql.Statement ps = connectDB.createStatement();
                        java.sql.ResultSet rst = ps.executeQuery("select nextval('transaction_no_seq')");
                        while (rst.next()) {
                            transNo = rst.getObject(1).toString();
                        }

                        if (journalNumberTxt.getText().equalsIgnoreCase("-")) {
                            java.sql.Statement ps1 = connectDB.createStatement();
                            java.sql.ResultSet rst1 = ps1.executeQuery("select nextval('journal_no_seq')");
                            while (rst1.next()) {

                                journal = rst1.getObject(1).toString();
                            }
                        } else {
                            journal = journalNumberTxt.getText();
                        }

                        journal = transNo;

                        java.sql.Statement psg = connectDB.createStatement();
                        java.sql.ResultSet rstg = psg.executeQuery("select current_user");
                        while (rstg.next()) {
                            user = rstg.getObject(1).toString();
                        }
                        for (int i = 0; i < cashBookTable.getModel().getRowCount(); i++) {
                            if (cashBookTable.getModel().getValueAt(i, 0) != null) {
                                java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into ac_cash_book values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?)");
                                pstmt1.setObject(1, cashBookTable.getModel().getValueAt(i, 4));
                                pstmt1.setString(2, transactionTypeCmbx.getSelectedItem().toString());
                                pstmt1.setObject(3, cashBookTable.getModel().getValueAt(i, 3));
                                pstmt1.setObject(4, cashBookTable.getModel().getValueAt(i, 3));
                                pstmt1.setString(5, "-");
                                pstmt1.setString(6, "");
                                pstmt1.setString(7, "-");
                                pstmt1.setObject(9, cashBookTable.getModel().getValueAt(i, 4));
                                pstmt1.setObject(10, cashBookTable.getModel().getValueAt(i, 5));
                                pstmt1.setString(8, "-");
                                pstmt1.setString(11, "");
                                pstmt1.setString(12, "");
                                pstmt1.setString(13, journal);
                                pstmt1.setObject(14, cashBookTable.getModel().getValueAt(i, 0));
                                pstmt1.setObject(16, cashBookTable.getModel().getValueAt(i, 1));
                                pstmt1.setObject(15, cashBookTable.getModel().getValueAt(i, 3));
                                pstmt1.setString(17, transactionTypeCmbx.getSelectedItem().toString());
                                if (cashBookTable.getValueAt(i, 1) == null) {
                                    pstmt1.setDouble(18, 0.00);
                                } else {
                                    pstmt1.setDouble(18, java.lang.Double.valueOf(cashBookTable.getModel().getValueAt(i, 1).toString()));
                                }
                                if (cashBookTable.getValueAt(i, 2) == null) {
                                    pstmt1.setDouble(19, 0.00);
                                } else {
                                    pstmt1.setDouble(19, java.lang.Double.valueOf(cashBookTable.getModel().getValueAt(i, 2).toString()));

                                }
                                pstmt1.setDate(20, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                pstmt1.setString(21, transNo);
                                pstmt1.setBoolean(24, false);
                                pstmt1.setBoolean(22, false);
                                pstmt1.setBoolean(23, false);
                                pstmt1.setDate(25, null);
                                pstmt1.setDate(26, null);
                                pstmt1.setDate(27, null);
                                pstmt1.setString(28, user);
                                pstmt1.setObject(29, "-");
                                pstmt1.setString(30, "-");
                                pstmt1.executeUpdate();

                                java.sql.PreparedStatement pstmt2z1 = connectDB.prepareStatement("insert into ac_journal values(?,?,?,?,?,?,?, ?, ?, ?)");
                                pstmt2z1.setObject(1, cashBookTable.getModel().getValueAt(i, 4).toString());
                                pstmt2z1.setObject(2, cashBookTable.getModel().getValueAt(i, 3).toString());
                                pstmt2z1.setObject(3, cashBookTable.getModel().getValueAt(i, 3).toString());
                                pstmt2z1.setString(4, journal);

                                if (cashBookTable.getModel().getValueAt(i, 1) == null) {
                                    pstmt2z1.setDouble(6, 0.00);
                                } else {
                                    pstmt2z1.setDouble(6, java.lang.Double.valueOf(cashBookTable.getModel().getValueAt(i, 1).toString()));
                                }
                                if (cashBookTable.getModel().getValueAt(i, 2) == null) {
                                    pstmt2z1.setDouble(7, 0.00);
                                } else {
                                    pstmt2z1.setDouble(7, java.lang.Double.valueOf(cashBookTable.getModel().getValueAt(i, 2).toString()));
                                }
                                pstmt2z1.setDate(5, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                pstmt2z1.setString(8, user);
                                pstmt2z1.setObject(9, cashBookTable.getModel().getValueAt(i, 0).toString());
                                pstmt2z1.setObject(10, cashBookTable.getModel().getValueAt(i, 3).toString());
                                pstmt2z1.executeUpdate();

                            }
                        }
                        for (int i = 0; i < generalLedgerTable.getModel().getRowCount(); i++) {
                            if (generalLedgerTable.getModel().getValueAt(i, 0) != null) {

                                java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                pstmt2.setObject(1, generalLedgerTable.getModel().getValueAt(i, 0).toString());
                                pstmt2.setObject(2, generalLedgerTable.getModel().getValueAt(i, 1).toString());
                                pstmt2.setObject(3, generalLedgerTable.getModel().getValueAt(i, 5));
                                pstmt2.setObject(4, generalLedgerTable.getModel().getValueAt(i, 4).toString());
                                pstmt2.setObject(5, generalLedgerTable.getModel().getValueAt(i, 4).toString());
                                pstmt2.setObject(6, "");
                                pstmt2.setObject(7, "-");
                                pstmt2.setString(8, "");
                                pstmt2.setString(9, "");
                                pstmt2.setString(10, "");
                                pstmt2.setString(11, "");
                                pstmt2.setString(12, "");
                                pstmt2.setString(13, journal);
                                pstmt2.setString(14, generalLedgerTable.getModel().getValueAt(i, 4).toString());
                                pstmt2.setString(15, transactionTypeCmbx.getSelectedItem().toString());
                                if (generalLedgerTable.getModel().getValueAt(i, 2) == null) {
                                    pstmt2.setDouble(16, 0.00);
                                } else {
                                    pstmt2.setDouble(16, java.lang.Double.valueOf(generalLedgerTable.getModel().getValueAt(i, 2).toString()));

                                }
                                if (generalLedgerTable.getModel().getValueAt(i, 3) == null) {
                                    pstmt2.setDouble(17, 0.00);
                                } else {
                                    pstmt2.setDouble(17, java.lang.Double.valueOf(generalLedgerTable.getModel().getValueAt(i, 3).toString()));

                                }
                                pstmt2.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                pstmt2.setString(19, transNo);
                                pstmt2.setBoolean(20, false);
                                pstmt2.setBoolean(21, false);
                                pstmt2.setBoolean(22, false);
                                pstmt2.setString(23, user);
                                pstmt2.executeUpdate();

                                java.sql.PreparedStatement pstmt2z = connectDB.prepareStatement("insert into ac_journal values(?,?,?,?,?,?,?, ?, ?, ?)");
                                pstmt2z.setObject(1, generalLedgerTable.getModel().getValueAt(i, 0).toString());
                                pstmt2z.setObject(2, generalLedgerTable.getModel().getValueAt(i, 1).toString());
                                pstmt2z.setObject(3, generalLedgerTable.getModel().getValueAt(i, 4).toString());
                                pstmt2z.setString(4, journal);

                                if (generalLedgerTable.getModel().getValueAt(i, 2) == null) {
                                    pstmt2z.setDouble(6, 0.00);
                                } else {
                                    pstmt2z.setDouble(6, java.lang.Double.valueOf(generalLedgerTable.getModel().getValueAt(i, 2).toString()));
                                }
                                if (generalLedgerTable.getModel().getValueAt(i, 3) == null) {
                                    pstmt2z.setDouble(7, 0.00);
                                } else {
                                    pstmt2z.setDouble(7, java.lang.Double.valueOf(generalLedgerTable.getModel().getValueAt(i, 3).toString()));
                                }
                                pstmt2z.setDate(5, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                pstmt2z.setString(8, user);
                                pstmt2z.setString(9, "-");
                                pstmt2z.setObject(10, generalLedgerTable.getModel().getValueAt(i, 4).toString());
                                pstmt2z.executeUpdate();
                            }
                        }
                        String Payer = null;

                        for (int i = 0; i < debtorsTable.getModel().getRowCount(); i++) {
                            if (debtorsTable.getModel().getValueAt(i, 0) != null) {

                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into ac_debtors values(?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?)");
                                pstmt.setObject(1, debtorsTable.getModel().getValueAt(i, 6).toString());
                                pstmt.setObject(2, debtorsTable.getModel().getValueAt(i, 1).toString());
                                pstmt.setString(3, debtorsTable.getModel().getValueAt(i, 2).toString());
                                pstmt.setString(4, "-");
                                pstmt.setObject(5, debtorsTable.getValueAt(i, 2).toString());
                                pstmt.setObject(6, debtorsTable.getValueAt(i, 7).toString());
                                pstmt.setObject(7, debtorsTable.getModel().getValueAt(i, 0).toString());
                                pstmt.setString(8, journal);
                                pstmt.setString(9, journal);
                                pstmt.setString(10, journal);
                                pstmt.setString(11, transNo);
                                pstmt.setString(12, transactionTypeCmbx.getSelectedItem().toString());
                                if (debtorsTable.getValueAt(i, 3) == null) {
                                    pstmt.setDouble(13, 0.00);
                                } else {
                                    pstmt.setDouble(13, java.lang.Double.valueOf(debtorsTable.getModel().getValueAt(i, 3).toString()));

                                }
                                if (debtorsTable.getModel().getValueAt(i, 4) == null) {
                                    pstmt.setDouble(14, 0.00);
                                } else {
                                    pstmt.setDouble(14, java.lang.Double.valueOf(debtorsTable.getModel().getValueAt(i, 4).toString()));

                                }
                                pstmt.setString(16, "");
                                pstmt.setDate(15, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                pstmt.setObject(17, debtorsTable.getValueAt(i, 5).toString());
                                pstmt.setBoolean(18, true);
                                pstmt.setBoolean(19, true);
                                pstmt.setString(20, user);
                                pstmt.setString(21, "");
                                if (debtorsTable.getModel().getValueAt(i, 3) == null) {
                                    pstmt.setDouble(24, java.lang.Double.valueOf(debtorsTable.getModel().getValueAt(i, 4).toString()));
                                    pstmt.setDouble(22, 0.00);
                                } else {
                                    pstmt.setDouble(22, java.lang.Double.valueOf(debtorsTable.getModel().getValueAt(i, 3).toString()));
                                    pstmt.setDouble(24, 0.00);
                                }
                                pstmt.setBoolean(23, true);
                                pstmt.executeUpdate();

                                java.sql.PreparedStatement pstmt2x1 = connectDB.prepareStatement("insert into ac_journal values(?,?,?,?,?,?,?, ?, ?, ?)");
                                pstmt2x1.setObject(1, debtorsTable.getModel().getValueAt(i, 6).toString());
                                pstmt2x1.setObject(2, debtorsTable.getModel().getValueAt(i, 1).toString());
                                pstmt2x1.setObject(3, debtorsTable.getModel().getValueAt(i, 2).toString());
                                pstmt2x1.setString(4, journal);
                                pstmt2x1.setDate(5, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                if (debtorsTable.getModel().getValueAt(i, 3) == null) {
                                    pstmt2x1.setDouble(6, 0.00);
                                } else {
                                    pstmt2x1.setDouble(6, java.lang.Double.valueOf(debtorsTable.getModel().getValueAt(i, 3).toString()));
                                }
                                if (debtorsTable.getModel().getValueAt(i, 4) == null) {
                                    pstmt2x1.setDouble(7, 0.00);
                                } else {
                                    pstmt2x1.setDouble(7, java.lang.Double.valueOf(debtorsTable.getModel().getValueAt(i, 4).toString()));
                                }

                                pstmt2x1.setString(8, user);
                                pstmt2x1.setObject(9, debtorsTable.getModel().getValueAt(i, 0).toString());
                                pstmt2x1.setObject(10, debtorsTable.getModel().getValueAt(i, 1).toString());
                                pstmt2x1.executeUpdate();

                            }
                        }

                        for (int i = 0; i < creditorsTable.getModel().getRowCount(); i++) {
                            if (creditorsTable.getModel().getValueAt(i, 0) != null) {
                                java.sql.PreparedStatement pstmt3 = connectDB.prepareStatement("insert into ac_accounts_payable values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?)");
                                pstmt3.setObject(1, creditorsTable.getModel().getValueAt(i, 5).toString());
                                pstmt3.setString(4, journal);
                                pstmt3.setObject(3, creditorsTable.getModel().getValueAt(i, 8).toString());
                                pstmt3.setObject(2, creditorsTable.getModel().getValueAt(i, 1).toString());
                                pstmt3.setObject(5, creditorsTable.getModel().getValueAt(i, 1).toString());
                                pstmt3.setObject(6, creditorsTable.getModel().getValueAt(i, 8).toString());
                                pstmt3.setObject(7, creditorsTable.getModel().getValueAt(i, 0).toString());
                                pstmt3.setString(8, "-");
                                pstmt3.setString(9, journal);
                                pstmt3.setObject(10, creditorsTable.getModel().getValueAt(i, 7).toString());
                                pstmt3.setString(11, transNo);
                                pstmt3.setString(12, transactionTypeCmbx.getSelectedItem().toString());
                                if (creditorsTable.getModel().getValueAt(i, 2) == null) {
                                    pstmt3.setDouble(13, 0.00);
                                } else {
                                    pstmt3.setDouble(13, java.lang.Double.valueOf(creditorsTable.getModel().getValueAt(i, 2).toString()));

                                }
                                if (creditorsTable.getModel().getValueAt(i, 3) == null) {
                                    pstmt3.setDouble(14, 0.00);
                                } else {
                                    pstmt3.setDouble(14, java.lang.Double.valueOf(creditorsTable.getModel().getValueAt(i, 3).toString()));

                                }
                                pstmt3.setDate(15, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                pstmt3.setObject(16, creditorsTable.getModel().getValueAt(i, 6));
                                pstmt3.setString(17, "CREDITORS PAYABLES");
                                pstmt3.setBoolean(18, true);
                                pstmt3.setBoolean(19, true);
                                pstmt3.setString(20, user);
                                pstmt3.setString(21, journal);
                                pstmt3.setDate(22, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                pstmt3.setDate(23, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                pstmt3.setDouble(24, 0.00);
                                if (creditorsTable.getModel().getValueAt(i, 2) == null) {
                                    Credit = Double.parseDouble(creditorsTable.getModel().getValueAt(i, 3).toString());

                                    pstmt3.setDouble(25, Credit);
                                } else {
                                    Debit = Double.parseDouble(creditorsTable.getModel().getValueAt(i, 2).toString());

                                    System.out.println("How much is the debit " + Debit);
                                    pstmt3.setDouble(25, (Debit) * -1);

                                }

                                pstmt3.setDouble(26, 0.00);
                                pstmt3.executeUpdate();

                                java.sql.PreparedStatement pstmt2x = connectDB.prepareStatement("insert into ac_journal values(?,?,?,?,?,?,?, ?, ?, ?)");
                                pstmt2x.setObject(1, creditorsTable.getModel().getValueAt(i, 5).toString());
                                pstmt2x.setObject(2, creditorsTable.getModel().getValueAt(i, 1).toString());
                                pstmt2x.setObject(3, creditorsTable.getModel().getValueAt(i, 4).toString());
                                pstmt2x.setString(4, journal);
                                pstmt2x.setDate(5, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                if (creditorsTable.getValueAt(i, 2) == null) {
                                    pstmt2x.setDouble(6, 0.00);
                                } else {
                                    pstmt2x.setDouble(6, java.lang.Double.valueOf(creditorsTable.getModel().getValueAt(i, 2).toString()));
                                }
                                if (creditorsTable.getModel().getValueAt(i, 3) == null) {
                                    pstmt2x.setDouble(7, 0.00);
                                } else {
                                    pstmt2x.setDouble(7, java.lang.Double.valueOf(creditorsTable.getModel().getValueAt(i, 3).toString()));
                                }

                                pstmt2x.setString(8, user);
                                pstmt2x.setObject(9, creditorsTable.getModel().getValueAt(i, 0).toString());
                                pstmt2x.setObject(10, creditorsTable.getModel().getValueAt(i, 5).toString());
                                pstmt2x.executeUpdate();

                            }
                        }

                        for (int w = 0; w < receiptsTable.getModel().getRowCount(); w++) {
                            if (receiptsTable.getModel().getValueAt(w, 0) != null) {

                                java.sql.PreparedStatement pstmt25 = connectDB.prepareStatement("insert into ac_cash_collection values(?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?)");
                                pstmt25.setObject(1, receiptsTable.getModel().getValueAt(w, 0).toString());
                                pstmt25.setObject(2, receiptsTable.getModel().getValueAt(w, 1).toString());
                                pstmt25.setString(3, "-");
                                if (receiptsTable.getModel().getValueAt(w, 4) == null) {
                                    pstmt25.setString(4, "-");
                                } else {
                                    pstmt25.setObject(4, receiptsTable.getModel().getValueAt(w, 4).toString());
                                }
                                pstmt25.setString(5, "Cash");
                                pstmt25.setString(6, "-");
                                pstmt25.setString(7, "-");
                                pstmt25.setString(8, "-");
                                pstmt25.setString(9, "-");
                                pstmt25.setObject(10, receiptsTable.getModel().getValueAt(w, 0).toString());
                                pstmt25.setString(11, "-");
                                pstmt25.setString(12, receiptsTable.getModel().getValueAt(w, 7).toString());//pstmt25.setString(12, "-");
                                pstmt25.setString(13, journal);
                                pstmt25.setString(14, "-");
                                pstmt25.setString(15, transactionTypeCmbx.getSelectedItem().toString());
                                if (receiptsTable.getModel().getValueAt(w, 2) == null) {
                                    pstmt25.setDouble(16, 0.00);
                                } else {
                                    pstmt25.setDouble(16, java.lang.Double.valueOf(receiptsTable.getModel().getValueAt(w, 2).toString()));

                                }
                                if (receiptsTable.getModel().getValueAt(w, 3) == null) {
                                    pstmt25.setDouble(17, 0.00);
                                } else {
                                    pstmt25.setDouble(17, java.lang.Double.valueOf(receiptsTable.getModel().getValueAt(w, 3).toString()));

                                }
                                pstmt25.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                pstmt25.setString(19, transNo);
                                pstmt25.setBoolean(20, true);
                                pstmt25.setBoolean(21, false);
                                pstmt25.setBoolean(22, false);
                                pstmt25.setString(23, receiptsTable.getModel().getValueAt(w, 6).toString());//pstmt25.setString(23, user);
                                pstmt25.setString(24, "-");
                                pstmt25.setString(25, receiptsTable.getModel().getValueAt(w, 5).toString());
                                pstmt25.setDate(26, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                pstmt25.setDouble(27, 0.00);
                                pstmt25.executeUpdate();

                                java.sql.PreparedStatement pstmt25121 = connectDB.prepareStatement("insert into ac_journal values(?,?,?,?,?,?,?, ?, ?, ?)");
                                pstmt25121.setObject(1, receiptsTable.getModel().getValueAt(w, 0).toString());
                                pstmt25121.setObject(2, receiptsTable.getModel().getValueAt(w, 1).toString());
                                if (receiptsTable.getModel().getValueAt(w, 4) == null) {
                                    pstmt25121.setString(3, "-");
                                } else {
                                    pstmt25121.setObject(3, receiptsTable.getModel().getValueAt(w, 4).toString());
                                }
                                pstmt25121.setString(4, journal);

                                if (receiptsTable.getModel().getValueAt(w, 2) == null) {
                                    pstmt25121.setDouble(6, 0.00);
                                } else {
                                    pstmt25121.setDouble(6, java.lang.Double.valueOf(receiptsTable.getModel().getValueAt(w, 2).toString()));
                                }
                                if (receiptsTable.getModel().getValueAt(w, 3) == null) {
                                    pstmt25121.setDouble(7, 0.00);
                                } else {
                                    pstmt25121.setDouble(7, java.lang.Double.valueOf(receiptsTable.getModel().getValueAt(w, 3).toString()));
                                }
                                pstmt25121.setDate(5, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                pstmt25121.setString(8, user);
                                pstmt25121.setString(9, "-");
                                if (receiptsTable.getModel().getValueAt(w, 4) == null) {
                                    pstmt25121.setString(10, "-");
                                } else {
                                    pstmt25121.setObject(10, receiptsTable.getModel().getValueAt(w, 4).toString());
                                }
                                pstmt25121.executeUpdate();

                            }
                        }

                        for (int o = 0; o < pettyCashTable.getModel().getRowCount(); o++) {
                            if (pettyCashTable.getModel().getValueAt(o, 0) != null) {

                                java.sql.PreparedStatement pstmt251 = connectDB.prepareStatement("insert into ac_petty_cash values(?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                                pstmt251.setObject(1, pettyCashTable.getModel().getValueAt(o, 0).toString());
                                pstmt251.setObject(2, pettyCashTable.getModel().getValueAt(o, 1).toString());
                                pstmt251.setString(3, "Petty Cash Control");
                                if (pettyCashTable.getModel().getValueAt(o, 4) == null) {
                                    pstmt251.setString(4, "-");
                                } else {
                                    pstmt251.setObject(4, pettyCashTable.getModel().getValueAt(o, 4).toString());
                                }
                                if (pettyCashTable.getModel().getValueAt(o, 2) == null) {
                                    pstmt251.setDouble(5, 0.00);
                                } else {
                                    pstmt251.setDouble(5, java.lang.Double.valueOf(pettyCashTable.getModel().getValueAt(o, 2).toString()));
                                }
                                if (pettyCashTable.getModel().getValueAt(o, 3) == null) {
                                    pstmt251.setDouble(6, 0.00);
                                } else {
                                    pstmt251.setDouble(6, java.lang.Double.valueOf(pettyCashTable.getModel().getValueAt(o, 3).toString()));
                                }
                                pstmt251.setDate(7, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                pstmt251.setString(8, user);
                                pstmt251.setBoolean(9, true);
                                pstmt251.setString(10, journal);
                                pstmt251.setDate(11, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                pstmt251.setBoolean(12, true);
                                pstmt251.setString(13, "ACCOUNTS");
                                pstmt251.setString(14, "-");
                                pstmt251.setObject(15, pettyCashTable.getModel().getValueAt(o, 4));
                                pstmt251.setString(16, transactionTypeCmbx.getSelectedItem().toString());
                                pstmt251.setString(17, transNo);
                                pstmt251.setString(18, "-");
                                pstmt251.setString(19, "-");
                                pstmt251.executeUpdate();

                                java.sql.PreparedStatement pstmt2512 = connectDB.prepareStatement("insert into ac_journal values(?,?,?,?,?,?,?, ?, ?, ?)");
                                pstmt2512.setObject(1, pettyCashTable.getModel().getValueAt(o, 0).toString());
                                pstmt2512.setObject(2, pettyCashTable.getModel().getValueAt(o, 1).toString());
                                if (pettyCashTable.getModel().getValueAt(o, 4) == null) {
                                    pstmt2512.setString(3, "-");
                                } else {
                                    pstmt2512.setObject(3, pettyCashTable.getModel().getValueAt(o, 4).toString());
                                }

                                pstmt2512.setString(4, journal);

                                if (pettyCashTable.getModel().getValueAt(o, 2) == null) {
                                    pstmt2512.setDouble(6, 0.00);
                                } else {
                                    pstmt2512.setDouble(6, java.lang.Double.valueOf(pettyCashTable.getModel().getValueAt(o, 2).toString()));
                                }
                                if (pettyCashTable.getModel().getValueAt(o, 3) == null) {
                                    pstmt2512.setDouble(7, 0.00);
                                } else {
                                    pstmt2512.setDouble(7, java.lang.Double.valueOf(pettyCashTable.getModel().getValueAt(o, 3).toString()));
                                }
                                pstmt2512.setDate(5, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                pstmt2512.setString(8, user);
                                pstmt2512.setString(9, "-");
                                if (pettyCashTable.getModel().getValueAt(o, 4) == null) {
                                    pstmt2512.setString(10, "-");
                                } else {
                                    pstmt2512.setObject(10, pettyCashTable.getModel().getValueAt(o, 4).toString());
                                }
                                pstmt2512.executeUpdate();
                            }
                        }

                        // For all the rows that are populated on the consultants table     
                        for (int y = 0; y < consultantsTable.getModel().getRowCount(); y++) {
                            if (consultantsTable.getModel().getValueAt(y, 0) != null) {

                                java.sql.PreparedStatement pstmt251y = connectDB.prepareStatement("insert into ac_doctors_ledger values(?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                                pstmt251y.setObject(1, consultantsTable.getModel().getValueAt(y, 0).toString());
                                pstmt251y.setObject(2, consultantsTable.getModel().getValueAt(y, 2).toString());

                                pstmt251y.setObject(3, consultantsTable.getModel().getValueAt(y, 1).toString());

                                pstmt251y.setString(4, transNo);
                                pstmt251y.setObject(5, consultantsTable.getModel().getValueAt(y, 6).toString());
                                pstmt251y.setString(6, transactionTypeCmbx.getSelectedItem().toString());
                                if (consultantsTable.getModel().getValueAt(y, 3) == null) {
                                    pstmt251y.setDouble(7, 0.00);
                                } else {
                                    pstmt251y.setDouble(7, java.lang.Double.valueOf(consultantsTable.getModel().getValueAt(y, 3).toString()));

                                }
                                if (consultantsTable.getModel().getValueAt(y, 4) == null) {
                                    pstmt251y.setDouble(8, 0.00);
                                } else {
                                    pstmt251y.setDouble(8, java.lang.Double.valueOf(consultantsTable.getModel().getValueAt(y, 4).toString()));

                                }
                                pstmt251y.setString(9, journal);
                                pstmt251y.setObject(10, consultantsTable.getModel().getValueAt(y, 0).toString());
                                pstmt251y.setObject(11, consultantsTable.getModel().getValueAt(y, 5).toString());
                                pstmt251y.setBoolean(12, true);
                                pstmt251y.setString(13, user);
                                pstmt251y.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                pstmt251y.setString(15, journal);
                                pstmt251y.setObject(16, consultantsTable.getModel().getValueAt(y, 2).toString());
                                if (consultantsTable.getModel().getValueAt(y, 3) == null) {
                                    pstmt251y.setDouble(17, 0.00);
                                } else {
                                    pstmt251y.setDouble(17, java.lang.Double.valueOf(consultantsTable.getModel().getValueAt(y, 3).toString()));

                                }
                                if (consultantsTable.getModel().getValueAt(y, 4) == null) {
                                    pstmt251y.setDouble(18, 0.00);
                                } else {
                                    pstmt251y.setDouble(18, java.lang.Double.valueOf(consultantsTable.getModel().getValueAt(y, 4).toString()));

                                }
                                pstmt251y.setString(19, "Journal");
                                pstmt251y.executeUpdate();

                                java.sql.PreparedStatement pstmt2512y = connectDB.prepareStatement("insert into ac_journal values(?,?,?,?,?,?,?, ?, ?, ?,?)");
                                pstmt2512y.setObject(1, consultantsTable.getModel().getValueAt(y, 6).toString());
                                pstmt2512y.setObject(2, consultantsTable.getModel().getValueAt(y, 5).toString());
                                pstmt2512y.setObject(3, consultantsTable.getModel().getValueAt(y, 2).toString());
                                pstmt2512y.setString(4, journal);
                                pstmt2512y.setDate(5, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                if (consultantsTable.getModel().getValueAt(y, 3) == null) {
                                    pstmt2512y.setDouble(6, 0.00);
                                } else {
                                    pstmt2512y.setDouble(6, java.lang.Double.valueOf(consultantsTable.getModel().getValueAt(y, 3).toString()));
                                }
                                if (consultantsTable.getModel().getValueAt(y, 4) == null) {
                                    pstmt2512y.setDouble(7, 0.00);
                                } else {
                                    pstmt2512y.setDouble(7, java.lang.Double.valueOf(consultantsTable.getModel().getValueAt(y, 4).toString()));
                                }
                                pstmt2512y.setString(8, user);
                                pstmt2512y.setObject(9, consultantsTable.getModel().getValueAt(y, 0).toString());
                                pstmt2512y.setObject(10, consultantsTable.getModel().getValueAt(y, 1).toString());
                                pstmt2512y.setObject(11, "-");
                                pstmt2512y.executeUpdate();
                            }
                        }

                        for (int q = 0; q < patientControlAccountTable.getModel().getRowCount(); q++) {
                            if (patientControlAccountTable.getModel().getValueAt(q, 0) != null) {
                                String scheme = null;
                                String cardName = null;
                                String isurer = null;
                                java.sql.Date expDate = null;
                                String staffNo = null;
                                String patientAcc = null;
                                String cardNo = null;
                                String payMod = null;
                                String AccDesc = null;

                                java.sql.Statement stm1pt = connectDB.createStatement();
                                java.sql.ResultSet rse1pt = stm1pt.executeQuery("select pay_mode,account_no,description,payer,payer,expiry_date,account_no from hp_inpatient_register where patient_no = '" + patientControlAccountTable.getValueAt(q, 0).toString() + "'");
                                while (rse1pt.next()) {
                                    payMod = dbObject.getDBObject(rse1pt.getObject(1), "-");
                                    cardNo = dbObject.getDBObject(rse1pt.getObject(2), "-");
                                    scheme = dbObject.getDBObject(rse1pt.getObject(3), "-");
                                    cardName = dbObject.getDBObject(rse1pt.getObject(4), "-");
                                    isurer = dbObject.getDBObject(rse1pt.getObject(5), "-");
                                    expDate = rse1pt.getDate(6);
                                    staffNo = dbObject.getDBObject(rse1pt.getObject(7), "-");

                                }

                                java.sql.Statement stm12 = connectDB.createStatement();

                                java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                                while (rse12.next()) {

                                    patientAcc = rse12.getObject(1).toString();
                                    AccDesc = rse12.getObject(2).toString();
                                }

                                java.sql.PreparedStatement pstmtpt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?)");
                                pstmtpt.setObject(1, patientControlAccountTable.getValueAt(q, 0).toString());
                                if (transactionTypeCmbx.getSelectedItem().toString().contains("Receipt")) {
                                    pstmtpt.setObject(2, "Receipt");
                                } else {
                                    pstmtpt.setObject(2, patientControlAccountTable.getValueAt(q, 2).toString());
                                }
                                pstmtpt.setString(3, "General");
                                pstmtpt.setString(4, payMod);
                                pstmtpt.setString(5, journal);
                                pstmtpt.setString(7, scheme);
                                pstmtpt.setString(6, cardNo);
                                pstmtpt.setString(8, cardName);
                                pstmtpt.setString(9, isurer);
                                pstmtpt.setDate(10, null);
                                pstmtpt.setString(11, "");
                                if (patientControlAccountTable.getModel().getValueAt(q, 3) == null) {
                                    pstmtpt.setDouble(12, 0.00);
                                } else {
                                    pstmtpt.setDouble(12, java.lang.Double.valueOf(patientControlAccountTable.getModel().getValueAt(q, 3).toString()));

                                }
                                if (patientControlAccountTable.getModel().getValueAt(q, 4) == null) {
                                    pstmtpt.setDouble(13, 0.00);
                                } else {
                                    pstmtpt.setDouble(13, java.lang.Double.valueOf(patientControlAccountTable.getModel().getValueAt(q, 4).toString()));

                                }
                                pstmtpt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                pstmtpt.setObject(15, patientAcc);
                                if (transactionTypeCmbx.getSelectedItem().toString().contains("Receipt")) {
                                    pstmtpt.setObject(16, patientControlAccountTable.getValueAt(q, 2).toString());
                                } else {
                                    pstmtpt.setObject(16, patientControlAccountTable.getValueAt(q, 6).toString());
                                }

                                pstmtpt.setDouble(17, 1);
                                pstmtpt.setObject(18, staffNo);
                                pstmtpt.setBoolean(19, false);
                                if (transactionTypeCmbx.getSelectedItem().toString().contains("Receipt")) {
                                    pstmtpt.setString(20, "Receipt");
                                } else {
                                    pstmtpt.setString(20, transactionTypeCmbx.getSelectedItem().toString());
                                }
                                pstmtpt.setBoolean(21, false);
                                pstmtpt.setString(22, AccDesc);
                                pstmtpt.setString(23, "");
                                pstmtpt.setString(24, user);
                                pstmtpt.setString(25, "");
                                pstmtpt.setString(26, "");
                                java.sql.PreparedStatement pstmtt = connectDB.prepareStatement("select visit_id from hp_admission where patient_no = ? and check_out = false");
                                pstmtt.setString(1, patientControlAccountTable.getValueAt(q, 0).toString());
                                java.sql.ResultSet rsett = pstmtt.executeQuery();
                                String visitid = "";
                                while (rsett.next()) {
                                    visitid = rsett.getString(1);
                                }
                                pstmtpt.setTimestamp(27, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));//com.afrisoftech.lib.SQLDateFormat.getSQLDate(java.util.Calendar.getInstance().getTime()));
                                pstmtpt.setString(28, visitid);
                                pstmtpt.executeUpdate();

                                java.sql.PreparedStatement pstmt2512yq = connectDB.prepareStatement("insert into ac_journal values(?,?,?,?,?,?,?, ?, ?, ?,?)");
                                pstmt2512yq.setObject(1, patientControlAccountTable.getModel().getValueAt(q, 5).toString());
                                pstmt2512yq.setObject(2, patientControlAccountTable.getModel().getValueAt(q, 6).toString());
                                pstmt2512yq.setObject(3, patientControlAccountTable.getModel().getValueAt(q, 2).toString());
                                pstmt2512yq.setString(4, journal);
                                pstmt2512yq.setDate(5, com.afrisoftech.lib.SQLDateFormat.getSQLDate(transactionDatePicker.getDate()));
                                if (patientControlAccountTable.getModel().getValueAt(q, 3) == null) {
                                    pstmt2512yq.setDouble(6, 0.00);
                                } else {
                                    pstmt2512yq.setDouble(6, java.lang.Double.valueOf(patientControlAccountTable.getModel().getValueAt(q, 3).toString()));
                                }
                                if (patientControlAccountTable.getModel().getValueAt(q, 4) == null) {
                                    pstmt2512yq.setDouble(7, 0.00);
                                } else {
                                    pstmt2512yq.setDouble(7, java.lang.Double.valueOf(patientControlAccountTable.getModel().getValueAt(q, 4).toString()));
                                }
                                pstmt2512yq.setString(8, user);
                                pstmt2512yq.setObject(9, patientControlAccountTable.getModel().getValueAt(q, 0).toString());
                                pstmt2512yq.setObject(10, patientControlAccountTable.getModel().getValueAt(q, 1).toString());
                                pstmt2512yq.setObject(11, "-");
                                pstmt2512yq.executeUpdate();

                            }
                        }

                        connectDB.commit();
                        connectDB.setAutoCommit(true);

                        javax.swing.JOptionPane.showMessageDialog(this, "Data saved Successfully", "Comfirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                        for (int s = 0; s < creditorsTable.getModel().getRowCount(); s++) {
                            for (int r = 0; r < creditorsTable.getModel().getColumnCount(); r++) {
                                creditorsTable.getModel().setValueAt(null, s, r);
                            }
                        }

                        for (int s = 0; s < generalLedgerTable.getModel().getRowCount(); s++) {
                            for (int r = 0; r < generalLedgerTable.getModel().getColumnCount(); r++) {
                                generalLedgerTable.getModel().setValueAt(null, s, r);
                            }
                        }

                        for (int s = 0; s < cashBookTable.getModel().getRowCount(); s++) {
                            for (int r = 0; r < cashBookTable.getModel().getColumnCount(); r++) {
                                cashBookTable.getModel().setValueAt(null, s, r);
                            }
                        }

                        for (int s = 0; s < receiptsTable.getModel().getRowCount(); s++) {
                            for (int r = 0; r < receiptsTable.getModel().getColumnCount(); r++) {
                                receiptsTable.getModel().setValueAt(null, s, r);
                            }
                        }

                        for (int s = 0; s < pettyCashTable.getModel().getRowCount(); s++) {
                            for (int r = 0; r < pettyCashTable.getModel().getColumnCount(); r++) {
                                pettyCashTable.getModel().setValueAt(null, s, r);
                            }
                        }

                        for (int s = 0; s < debtorsTable.getModel().getRowCount(); s++) {
                            for (int r = 0; r < debtorsTable.getModel().getColumnCount(); r++) {
                                debtorsTable.getModel().setValueAt(null, s, r);
                            }
                        }
                        saveJournalBtn.setEnabled(false);
                    } catch (java.sql.SQLException sq) {
                        sq.printStackTrace();
                        javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

                        try {
                            connectDB.rollback(registerSavePoint);
                        } catch (java.sql.SQLException sql) {
                            sql.printStackTrace();
                            javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
                        ///// jLabel7.setForeground(java.awt.Color.red);
                        // jLabel7.setText("Data not inserted");
                        System.out.println(sq.getMessage());
                    }

                }

            } catch (java.lang.Exception ex) {
                ex.printStackTrace();
                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(ex.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, "Please click on the data entry table(s) and \n press the TAB key once then try saving again.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_saveJournalBtnActionPerformed
    //private void cmboxActionPerformed(javax.swing.
    private void saveJournalBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveJournalBtnMouseClicked
        // Add your handling code here:
    }//GEN-LAST:event_saveJournalBtnMouseClicked

    private void clearFormBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearFormBtnMouseClicked
        // jTextField1.setText("");
        //jTextField2.setText("");
        //jTextField3.setText("");
        //  jTextField4.setText("");
        //jTextField12.setText("");// Add your handling code here:
    }//GEN-LAST:event_clearFormBtnMouseClicked

    private void closeFormBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeFormBtnMouseClicked
        this.setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_closeFormBtnMouseClicked

    private void jTextField1111ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1111ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1111ActionPerformed

    private void patientCltrtxt1CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_patientCltrtxt1CaretUpdate
        if (patientCltrtxt1.getCaretPosition() > 3) {

            jSearchTable15.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register WHERE second_name||' '||first_name||' '||last_name ILIKE '%" + patientCltrtxt1.getText() + "%' UNION ALL SELECT patient_no, (upper(second_name||' '||first_name||' '||last_name)) as name, year_of_birth, residence from hp_inpatient_register where patient_no ILIKE '%" + patientCltrtxt1.getText() + "%' UNION ALL SELECT annual_no, upper(patient_name) as name,date_of_death::character varying dod,home_county from hp_mortuary where annual_no ilike '%" + patientCltrtxt1.getText() + "%'  order by 2"));

            jSearchTable15.setShowHorizontalLines(false);
            jSearchScrollPane15.setViewportView(jSearchTable15);

        }        // TODO add your handling code here:
    }//GEN-LAST:event_patientCltrtxt1CaretUpdate

    private void jSearchTable15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable15MouseClicked
        generalLedgerTable.setValueAt(jSearchTable15.getValueAt(jSearchTable15.getSelectedRow(), 0), generalLedgerTable.getSelectedRow(), 5);
        patientAccountSearchDialog2.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_jSearchTable15MouseClicked

    private void setTotals() {
        double totalDebits = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(debtorsTable, 3)
                + com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(generalLedgerTable, 2)
                + com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(creditorsTable, 2)
                + com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(cashBookTable, 1)
                + com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(receiptsTable, 2)
                + com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(pettyCashTable, 2)
                + com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(consultantsTable, 3)
                + com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(patientControlAccountTable, 3);

        double totalCredits = com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(debtorsTable, 4)
                + com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(generalLedgerTable, 3)
                + com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(creditorsTable, 3)
                + com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(cashBookTable, 2)
                + com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(receiptsTable, 3)
                + com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(pettyCashTable, 3)
                + com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(consultantsTable, 4)
                + com.afrisoftech.lib.TableColumnTotal.getTableColumnTotal(patientControlAccountTable, 4);

        totalDebitTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalDebits));
        totalCreditTxt.setText(com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(totalCredits));
    }
    private void jButton95ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton95ActionPerformed
        patientAccountSearchDialog2.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton95ActionPerformed

    private void staffCltrtxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_staffCltrtxtCaretUpdate

        staffSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT employee_no, first_name||' '||middle_name||' '||last_name FROM master_file WHERE employee_no ilike '%" + this.staffCltrtxt.getText() + "%' OR first_name||' '||middle_name||' '||last_name ilike '%" + this.staffCltrtxt.getText() + "%' ORDER BY 2"));
        // TODO add your handling code here:
    }//GEN-LAST:event_staffCltrtxtCaretUpdate

    private void staffSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_staffSearchTableMouseClicked

        pettyCashTable.setValueAt(staffSearchTable.getValueAt(staffSearchTable.getSelectedRow(), 0), pettyCashTable.getSelectedRow(), 5);
        pettyCashTable.setValueAt(staffSearchTable.getValueAt(staffSearchTable.getSelectedRow(), 1), pettyCashTable.getSelectedRow(), 6);
        this.staffAccountSearchDialog.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_staffSearchTableMouseClicked

    private void staffCloseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staffCloseBtnActionPerformed

        this.staffAccountSearchDialog.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_staffCloseBtnActionPerformed

    private void shiftJTextFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_shiftJTextFieldCaretUpdate
        if (shiftJTextField.getCaretPosition() < 5) {

        } else {
            shiftSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select shift_no as shift,receipt_no,user_name from ac_cash_collection where receipt_no::CHARACTER VARYING ILIKE '" + shiftJTextField.getText().toString() + "%'  ORDER BY receipt_no DESC"));

            shiftSearchTable.setShowHorizontalLines(false);
            shiftSearchScrollPane.setViewportView(shiftSearchTable);
        }


    }//GEN-LAST:event_shiftJTextFieldCaretUpdate

    private void shiftSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shiftSearchTableMouseClicked
        receiptsTable.setValueAt(shiftSearchTable.getValueAt(shiftSearchTable.getSelectedRow(), 0).toString(), receiptsTable.getSelectedRow(), 5);
        receiptsTable.setValueAt(shiftSearchTable.getValueAt(shiftSearchTable.getSelectedRow(), 2).toString(), receiptsTable.getSelectedRow(), 6);
        receiptsTable.setValueAt(shiftSearchTable.getValueAt(shiftSearchTable.getSelectedRow(), 1).toString(), receiptsTable.getSelectedRow(), 7);
        //statusTxt.setText(shiftSearchTable.getValueAt(shiftSearchTable.getSelectedRow(), 1).toString());

        /*
        * try { // if(this.jCheckBox1.isSelected()){ java.sql.Statement stmt1 =
            * connectDB.createStatement(); java.sql.ResultSet rset1 =
            * stmt1.executeQuery("select patient_category,payment_mode from
                * hp_patient_card where patient_no ='"+jTextField36.getText()+"' order
                * by date desc limit 1"); while (rset1.next()){
                * jTextField2.setText(rset1.getObject(1).toString());
                * jTextField4.setText(rset1.getObject(2).toString()); }
            *
            * } catch (java.sql.SQLException sqe) { sqe.printStackTrace(); //
            * System.out.println("Insert not successful"); }
        *
        *
        * }
        * }
         */
        shiftSearchDialog.dispose();         // Add your handling code here:
    }//GEN-LAST:event_shiftSearchTableMouseClicked

    private void shiftjButton51ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shiftjButton51ActionPerformed
        shiftSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_shiftjButton51ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel accountsSelectionPane;
    private javax.swing.JPanel accountsSelectionPanel;
    private javax.swing.JDialog bankAccountSearchDialog;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox cashBookChkbx;
    private javax.swing.JTable cashBookTable;
    private javax.swing.JButton clearFormBtn;
    public javax.swing.JButton closeFormBtn;
    private javax.swing.JCheckBox consultantStaffchbx;
    private javax.swing.JTable consultantsTable;
    private javax.swing.JDialog creditorSearchDialog;
    private javax.swing.JCheckBox creditorsChkbx;
    private javax.swing.JTable creditorsTable;
    private javax.swing.JCheckBox debtorChkbx;
    private javax.swing.JDialog debtorSearchAccount;
    private javax.swing.JTable debtorsTable;
    private javax.swing.JCheckBox generalLedgerChkbx;
    private javax.swing.JTable generalLedgerTable;
    private javax.swing.JDialog glAccountSearchDialog;
    private javax.swing.JButton jButton9;
    private javax.swing.JButton jButton91;
    private javax.swing.JButton jButton911;
    private javax.swing.JButton jButton92;
    private javax.swing.JButton jButton93;
    private javax.swing.JButton jButton94;
    private javax.swing.JButton jButton95;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jSearchPanel1;
    private javax.swing.JPanel jSearchPanel11;
    private javax.swing.JPanel jSearchPanel111;
    private javax.swing.JPanel jSearchPanel12;
    private javax.swing.JPanel jSearchPanel13;
    private javax.swing.JPanel jSearchPanel14;
    private javax.swing.JPanel jSearchPanel15;
    private javax.swing.JScrollPane jSearchScrollPane1;
    private javax.swing.JScrollPane jSearchScrollPane11;
    private javax.swing.JScrollPane jSearchScrollPane111;
    private javax.swing.JScrollPane jSearchScrollPane12;
    private javax.swing.JScrollPane jSearchScrollPane13;
    private javax.swing.JScrollPane jSearchScrollPane14;
    private javax.swing.JScrollPane jSearchScrollPane15;
    private javax.swing.JTable jSearchTable1;
    private javax.swing.JTable jSearchTable11;
    private javax.swing.JTable jSearchTable111;
    private javax.swing.JTable jSearchTable12;
    private javax.swing.JTable jSearchTable13;
    private javax.swing.JTable jSearchTable14;
    private javax.swing.JTable jSearchTable15;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField1111;
    private javax.swing.JTextField jTextField111111;
    private javax.swing.JTextField jTextField11112;
    private javax.swing.JTextField jTextField11114;
    private javax.swing.JLabel journalDateLbl;
    private javax.swing.JPanel journalHeaderPanel;
    private javax.swing.JTextField journalNumberTxt;
    private javax.swing.JPanel journalTransactionPanel;
    private javax.swing.JLabel manualJournalNumberLbl;
    private javax.swing.JDialog patientAccountSearchDialog;
    private javax.swing.JDialog patientAccountSearchDialog2;
    private javax.swing.JCheckBox patientChkbx;
    private javax.swing.JTextField patientCltrtxt;
    private javax.swing.JTextField patientCltrtxt1;
    private javax.swing.JDialog patientControlAccountSearchDialog;
    private javax.swing.JTable patientControlAccountTable;
    private javax.swing.JCheckBox pettyCashChkbx;
    private javax.swing.JTable pettyCashTable;
    private javax.swing.JTable receiptsTable;
    private javax.swing.JButton removeRowBtn;
    private javax.swing.JCheckBox salesChkbx;
    private javax.swing.JButton saveJournalBtn;
    private javax.swing.JTextField searchAccounttxt;
    private javax.swing.JTextField shiftJTextField;
    private javax.swing.JDialog shiftSearchDialog;
    private javax.swing.JPanel shiftSearchPanel;
    private javax.swing.JScrollPane shiftSearchScrollPane;
    private javax.swing.JTable shiftSearchTable;
    private javax.swing.JButton shiftjButton51;
    private javax.swing.JDialog staffAccountSearchDialog;
    private javax.swing.JButton staffCloseBtn;
    private javax.swing.JTextField staffCltrtxt;
    private javax.swing.JPanel staffSearchPanel;
    private javax.swing.JScrollPane staffSearchScrollPane;
    private javax.swing.JTable staffSearchTable;
    private javax.swing.JLabel totalCreditLbl;
    private javax.swing.JTextField totalCreditTxt;
    private javax.swing.JLabel totalDebitLbl;
    private javax.swing.JTextField totalDebitTxt;
    private com.afrisoftech.lib.DatePicker transactionDatePicker;
    private javax.swing.JComboBox transactionTypeCmbx;
    private javax.swing.JLabel transactionTypeLbl;
    // End of variables declaration//GEN-END:variables

    private void cmboxMouseClicked21222() {

        System.out.println("Showing dialog");
        java.awt.Point point = jScrollPane1.getLocationOnScreen();
        staffAccountSearchDialog.setSize(700, 200);
        staffAccountSearchDialog.setLocation(point);
        staffAccountSearchDialog.setVisible(true);
    }
}
