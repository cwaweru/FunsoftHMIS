/*
 * StaffLoanProcessingIntfr.java
 *
 * Created on February 1, 2005, 6:24 PM
 */
package com.afrisoftech.hr;

import java.awt.Color;
import java.beans.PropertyChangeEvent;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import main.Country;
//import org.openide.util.Exceptions;
import support.HolidayException;

/**
 *
 * @author afro
 */
public class LeaveApplicationIntfr extends javax.swing.JInternalFrame {

    com.afrisoftech.lib.DBObject dbObject;
    java.sql.Connection connectDB = null;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;

    public static String leave_applicant = null;
    public static String leave_rem_days = null;
    java.lang.String leave_days1;

    public LeaveApplicationIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        dbObject = new com.afrisoftech.lib.DBObject();
        connectDB = connDb;
        pConnDB = pconnDB;

        initComponents();

        startdatePickerDate.setEnabled(false);
        expirydatePickerDate.setEnabled(false);
        enddatePickerDate.setEnabled(false);

        setTitle("Leave Application Form");
        //divisionCmbx.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(nBCachedRowSet2, "division_name", null, null, null));

        nBCachedRowSet6.setCommand("SELECT DISTINCT(leave_type), leave_code FROM hr.hr_leave_type ORDER BY leave_code");
        nBCachedRowSet6.setConnectionSource(pConnDB);
        leavetypeCmbx.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(nBCachedRowSet6, "leave_type", null, null, null));

        try {
            java.sql.PreparedStatement pstmtUser = connectDB.prepareStatement("SELECT (SELECT upper(f_name||' '||l_name) FROM secure_menu_access "
                    + "where login_name = current_user order by 1 limit 1)");
            java.sql.ResultSet rsetUser = pstmtUser.executeQuery();

            while (rsetUser.next()) {
                leave_applicant = rsetUser.getString(1);

            }

        } catch (java.sql.SQLException SqlExec) {

            SqlExec.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), SqlExec.getMessage());

        }

        System.out.println("Login Guy - " + leave_applicant);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        try {
            nBCachedRowSet1 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            nBCachedRowSet2 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            nBCachedRowSet3 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            nBCachedRowSet4 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            nBCachedRowSet5 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        try {
            nBCachedRowSet6 = new org.netbeans.lib.sql.NBCachedRowSet();
        } catch (java.sql.SQLException e1) {
            e1.printStackTrace();
        }
        employeeSearchDialog = new javax.swing.JDialog();
        employeeSearchDialogPanel = new javax.swing.JPanel();
        searchEmployeeNumbTxt = new javax.swing.JTextField();
        searchEmployeeScrollPane = new javax.swing.JScrollPane();
        searchEmployeeTable = new com.afrisoftech.dbadmin.JTable();
        searchEmployeeBtn = new javax.swing.JButton();
        leaveStatusRBtnG = new javax.swing.ButtonGroup();
        leaveApplicationMainPanel = new javax.swing.JPanel();
        labelPanel3 = new javax.swing.JPanel();
        imgPanel3 = new javax.swing.JPanel();
        jLabel23 = new javax.swing.JLabel();
        actionsPanel3 = new javax.swing.JPanel();
        newAction3 = new javax.swing.JButton();
        clearAction3 = new javax.swing.JButton();
        spacerPanel3 = new javax.swing.JPanel();
        helpPanel3 = new javax.swing.JPanel();
        helpAction3 = new javax.swing.JButton();
        subMainPanel3 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        leaveCalcPanel = new javax.swing.JPanel();
        daysB4LeaveTxt = new javax.swing.JTextField();
        entitledLeaveDayTxt = new javax.swing.JTextField();
        employeeDetailsPanel = new javax.swing.JPanel();
        employeeNumbLbl = new javax.swing.JLabel();
        nameNoSearchPanel = new javax.swing.JPanel();
        employeeNoTxt = new javax.swing.JTextField();
        nameNoSearchBtn = new javax.swing.JButton();
        jLabel91 = new javax.swing.JLabel();
        employeeNameTxt = new javax.swing.JTextField();
        jLabel81 = new javax.swing.JLabel();
        jobgroupCmbx = new javax.swing.JComboBox();
        jLabel83 = new javax.swing.JLabel();
        designationCmbx = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        departmentCmbx = new javax.swing.JComboBox();
        jLabel61 = new javax.swing.JLabel();
        divisionCmbx = new javax.swing.JComboBox();
        jLabel71 = new javax.swing.JLabel();
        sectionCmbx = new javax.swing.JComboBox();
        jLabel73 = new javax.swing.JLabel();
        leavetypeCmbx = new javax.swing.JComboBox();
        leaveDayDetailsPanel = new javax.swing.JPanel();
        enddatePickerDate = new com.afrisoftech.lib.DatePicker();
        durationTxt = new javax.swing.JTextField();
        startdatePickerDate = new com.afrisoftech.lib.DatePicker();
        leaveDaysAfterLeaveTxt = new javax.swing.JTextField();
        expirydatePickerDate = new com.afrisoftech.lib.DatePicker();
        otherDetailsPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        emailOrAddressTxa = new javax.swing.JTextArea();
        emailPhyAddressPanel = new javax.swing.JLabel();
        jLabel82 = new javax.swing.JLabel();
        managerTxt = new javax.swing.JTextField();
        applicantTeleLbl = new javax.swing.JLabel();
        jLabel74 = new javax.swing.JLabel();
        telePhoneTxt = new javax.swing.JTextField();
        applicanttelephoneTxt = new javax.swing.JTextField();
        jLabel102 = new javax.swing.JLabel();
        applicationPickerDate = new com.afrisoftech.lib.DatePicker();
        jScrollPane1 = new javax.swing.JScrollPane();
        reasonTxa = new javax.swing.JTextArea();
        accompaniedByLbl = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        accompaniedByTxa = new javax.swing.JTextArea();
        radioButtonPanel = new javax.swing.JPanel();
        applyForLeaveRBtn = new javax.swing.JRadioButton();
        checkForLeaveStatusRBtn = new javax.swing.JRadioButton();

        nBCachedRowSet1.setConnectionSource(pConnDB);

        nBCachedRowSet2.setConnectionSource(pConnDB);

        nBCachedRowSet3.setConnectionSource(pConnDB);

        nBCachedRowSet4.setConnectionSource(pConnDB);

        nBCachedRowSet5.setConnectionSource(pConnDB);

        nBCachedRowSet6.setConnectionSource(pConnDB);

        employeeSearchDialog.setModal(true);
        employeeSearchDialog.setUndecorated(true);
        employeeSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        employeeSearchDialogPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        employeeSearchDialogPanel.setLayout(new java.awt.GridBagLayout());

        searchEmployeeNumbTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchEmployeeNumbTxtCaretUpdate(evt);
            }
        });
        searchEmployeeNumbTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchEmployeeNumbTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        employeeSearchDialogPanel.add(searchEmployeeNumbTxt, gridBagConstraints);

        searchEmployeeTable.setToolTipText("Click on the target row to select the patient from the search.");
        searchEmployeeTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = searchEmployeeTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        searchEmployeeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchEmployeeTableMouseClicked(evt);
            }
        });
        searchEmployeeScrollPane.setViewportView(searchEmployeeTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        employeeSearchDialogPanel.add(searchEmployeeScrollPane, gridBagConstraints);

        searchEmployeeBtn.setText("Dispose");
        searchEmployeeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchEmployeeBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        employeeSearchDialogPanel.add(searchEmployeeBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        employeeSearchDialog.getContentPane().add(employeeSearchDialogPanel, gridBagConstraints);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Leave Application Form");
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        leaveApplicationMainPanel.setLayout(new java.awt.GridBagLayout());

        labelPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        labelPanel3.setLayout(new java.awt.GridBagLayout());

        imgPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        imgPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/all_tracks.gif"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        imgPanel3.add(jLabel23, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        labelPanel3.add(imgPanel3, gridBagConstraints);

        actionsPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Actions"));
        actionsPanel3.setLayout(new java.awt.GridBagLayout());

        newAction3.setMnemonic('w');
        newAction3.setText("Apply Leave");
        newAction3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAction3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        actionsPanel3.add(newAction3, gridBagConstraints);

        clearAction3.setMnemonic('C');
        clearAction3.setText("Clear");
        clearAction3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAction3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        actionsPanel3.add(clearAction3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        actionsPanel3.add(spacerPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        labelPanel3.add(actionsPanel3, gridBagConstraints);

        helpPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Assistance"));
        helpPanel3.setLayout(new java.awt.GridBagLayout());

        helpAction3.setMnemonic('H');
        helpAction3.setText("Help");
        helpPanel3.add(helpAction3, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        labelPanel3.add(helpPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        leaveApplicationMainPanel.add(labelPanel3, gridBagConstraints);

        subMainPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        subMainPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel12.setLayout(new java.awt.GridBagLayout());
        jPanel12.add(jPanel1, new java.awt.GridBagConstraints());

        leaveCalcPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Leave Days", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(3, 7, 241))); // NOI18N
        leaveCalcPanel.setLayout(new java.awt.GridBagLayout());

        daysB4LeaveTxt.setEditable(false);
        daysB4LeaveTxt.setText("0");
        daysB4LeaveTxt.setBorder(javax.swing.BorderFactory.createTitledBorder("Days Before Leave"));
        daysB4LeaveTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                daysB4LeaveTxtMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        leaveCalcPanel.add(daysB4LeaveTxt, gridBagConstraints);

        entitledLeaveDayTxt.setEditable(false);
        entitledLeaveDayTxt.setText("0");
        entitledLeaveDayTxt.setBorder(javax.swing.BorderFactory.createTitledBorder("Entitled Days"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.weighty = 0.2;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        leaveCalcPanel.add(entitledLeaveDayTxt, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        jPanel12.add(leaveCalcPanel, gridBagConstraints);

        employeeDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Employee's Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(43, 22, 238))); // NOI18N
        employeeDetailsPanel.setLayout(new java.awt.GridBagLayout());

        employeeNumbLbl.setText("Employee Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        employeeDetailsPanel.add(employeeNumbLbl, gridBagConstraints);

        nameNoSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        nameNoSearchPanel.setLayout(new java.awt.GridBagLayout());

        employeeNoTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        nameNoSearchPanel.add(employeeNoTxt, gridBagConstraints);

        nameNoSearchBtn.setToolTipText("Click to Search for the Employee using Employee Number or ID");
        nameNoSearchBtn.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        nameNoSearchBtn.setMaximumSize(new java.awt.Dimension(74, 53));
        nameNoSearchBtn.setMinimumSize(new java.awt.Dimension(74, 53));
        nameNoSearchBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        nameNoSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameNoSearchBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        nameNoSearchPanel.add(nameNoSearchBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 0);
        employeeDetailsPanel.add(nameNoSearchPanel, gridBagConstraints);

        jLabel91.setText("Employee Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        employeeDetailsPanel.add(jLabel91, gridBagConstraints);

        employeeNameTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        employeeDetailsPanel.add(employeeNameTxt, gridBagConstraints);

        jLabel81.setText("Job Group");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        employeeDetailsPanel.add(jLabel81, gridBagConstraints);

        jobgroupCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT group_desc FROM hr.hr_job_groupings ORDER BY 1 ASC")
        );
        jobgroupCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jobgroupCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        employeeDetailsPanel.add(jobgroupCmbx, gridBagConstraints);

        jLabel83.setText("Designation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        employeeDetailsPanel.add(jLabel83, gridBagConstraints);

        designationCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT designation FROM hr.hr_job_designation ORDER BY 1 ASC")
        );
        designationCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                designationCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        employeeDetailsPanel.add(designationCmbx, gridBagConstraints);

        jLabel1.setText("Department/Unit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        employeeDetailsPanel.add(jLabel1, gridBagConstraints);

        departmentCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT depart_name FROM pb_main_department ORDER BY 1")
        );
        departmentCmbx.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                departmentCmbxItemStateChanged(evt);
            }
        });
        departmentCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departmentCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        employeeDetailsPanel.add(departmentCmbx, gridBagConstraints);

        jLabel61.setText("Division");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        employeeDetailsPanel.add(jLabel61, gridBagConstraints);

        divisionCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT donor FROM ac_branch ORDER BY 1")
        );
        divisionCmbx.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                divisionCmbxItemStateChanged(evt);
            }
        });
        divisionCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divisionCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        employeeDetailsPanel.add(divisionCmbx, gridBagConstraints);

        jLabel71.setText("Section/Ward");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        employeeDetailsPanel.add(jLabel71, gridBagConstraints);

        sectionCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT section FROM hr.hr_sections ORDER BY 1")
        );
        sectionCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sectionCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        employeeDetailsPanel.add(sectionCmbx, gridBagConstraints);

        jLabel73.setText("Type of Leave");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        employeeDetailsPanel.add(jLabel73, gridBagConstraints);

        leavetypeCmbx.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                leavetypeCmbxMouseClicked(evt);
            }
        });
        leavetypeCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leavetypeCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        employeeDetailsPanel.add(leavetypeCmbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel12.add(employeeDetailsPanel, gridBagConstraints);

        leaveDayDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Leave Days Details (Specify Working Days Only!!!)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(26, 23, 233))); // NOI18N
        leaveDayDetailsPanel.setLayout(new java.awt.GridBagLayout());

        this.enddatePickerDate.getDateEditor()
        .addPropertyChangeListener(new java.beans.PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                setLeaveRemaining();
            }
        });
        enddatePickerDate.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Work Return Date", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 0, 0))); // NOI18N
        enddatePickerDate.setToolTipText("The Date that you would want to return to work.");

        this.enddatePickerDate.getDateEditor().addPropertyChangeListener(new java.beans.PropertyChangeListener() {

            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                changeDate();
            }
        });

        enddatePickerDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                enddatePickerDatePropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        leaveDayDetailsPanel.add(enddatePickerDate, gridBagConstraints);

        durationTxt.setEditable(false);
        durationTxt.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        durationTxt.setForeground(new java.awt.Color(255, 0, 0));
        durationTxt.setBorder(javax.swing.BorderFactory.createTitledBorder("Leave Days Applied"));
        durationTxt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                durationTxtMouseClicked(evt);
            }
        });
        durationTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                durationTxtActionPerformed(evt);
            }
        });
        durationTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                durationTxtKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        leaveDayDetailsPanel.add(durationTxt, gridBagConstraints);

        startdatePickerDate.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Leave Start Date", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 0, 0))); // NOI18N
        startdatePickerDate.setToolTipText("The Date that you would want your leave to start.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        leaveDayDetailsPanel.add(startdatePickerDate, gridBagConstraints);

        leaveDaysAfterLeaveTxt.setEditable(false);
        leaveDaysAfterLeaveTxt.setBorder(javax.swing.BorderFactory.createTitledBorder("Once approved, remaining Days will be:-"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        leaveDayDetailsPanel.add(leaveDaysAfterLeaveTxt, gridBagConstraints);

        expirydatePickerDate.setBorder(javax.swing.BorderFactory.createTitledBorder("Leave Expiry Date"));
        expirydatePickerDate.setToolTipText("When your Leave will expire.");
        expirydatePickerDate.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                expirydatePickerDatePropertyChange(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        leaveDayDetailsPanel.add(expirydatePickerDate, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        jPanel12.add(leaveDayDetailsPanel, gridBagConstraints);

        otherDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Other Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(28, 23, 220))); // NOI18N
        otherDetailsPanel.setLayout(new java.awt.GridBagLayout());

        emailOrAddressTxa.setColumns(20);
        emailOrAddressTxa.setLineWrap(true);
        emailOrAddressTxa.setRows(5);
        emailOrAddressTxa.setWrapStyleWord(true);
        jScrollPane2.setViewportView(emailOrAddressTxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        otherDetailsPanel.add(jScrollPane2, gridBagConstraints);

        emailPhyAddressPanel.setText("Email/Physical Address");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        otherDetailsPanel.add(emailPhyAddressPanel, gridBagConstraints);

        jLabel82.setText("Manager/Team Leader");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        otherDetailsPanel.add(jLabel82, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        otherDetailsPanel.add(managerTxt, gridBagConstraints);

        applicantTeleLbl.setText("Applicant Mobile/Phone No.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        otherDetailsPanel.add(applicantTeleLbl, gridBagConstraints);

        jLabel74.setText("Telephone Extension");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        otherDetailsPanel.add(jLabel74, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        otherDetailsPanel.add(telePhoneTxt, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        otherDetailsPanel.add(applicanttelephoneTxt, gridBagConstraints);

        jLabel102.setText("Application date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        otherDetailsPanel.add(jLabel102, gridBagConstraints);

        applicationPickerDate.setMaxSelectableDate(new java.util.Date(253370757714000L));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        otherDetailsPanel.add(applicationPickerDate, gridBagConstraints);

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Reason For Leave", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(10, 49, 231))); // NOI18N
        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createTitledBorder(""));

        reasonTxa.setColumns(20);
        reasonTxa.setLineWrap(true);
        reasonTxa.setRows(5);
        reasonTxa.setWrapStyleWord(true);
        jScrollPane1.setViewportView(reasonTxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        otherDetailsPanel.add(jScrollPane1, gridBagConstraints);
        jScrollPane1.getAccessibleContext().setAccessibleName("Reason");

        accompaniedByLbl.setText("Accompanied By");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        otherDetailsPanel.add(accompaniedByLbl, gridBagConstraints);

        accompaniedByTxa.setColumns(20);
        accompaniedByTxa.setLineWrap(true);
        accompaniedByTxa.setRows(5);
        accompaniedByTxa.setWrapStyleWord(true);
        jScrollPane3.setViewportView(accompaniedByTxa);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 5.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        otherDetailsPanel.add(jScrollPane3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        jPanel12.add(otherDetailsPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 10.0;
        subMainPanel3.add(jPanel12, gridBagConstraints);

        radioButtonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Apply for Leave/Check Leave Status", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 0, 255))); // NOI18N
        radioButtonPanel.setLayout(new java.awt.GridBagLayout());

        leaveStatusRBtnG.add(applyForLeaveRBtn);
        applyForLeaveRBtn.setSelected(true);
        applyForLeaveRBtn.setText("Apply For Leave");
        applyForLeaveRBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyForLeaveRBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        radioButtonPanel.add(applyForLeaveRBtn, gridBagConstraints);

        leaveStatusRBtnG.add(checkForLeaveStatusRBtn);
        checkForLeaveStatusRBtn.setText("Check Leave Status.");
        checkForLeaveStatusRBtn.setToolTipText("Check if your Leave has been processed.");
        checkForLeaveStatusRBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkForLeaveStatusRBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        radioButtonPanel.add(checkForLeaveStatusRBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        subMainPanel3.add(radioButtonPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 50.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        leaveApplicationMainPanel.add(subMainPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(leaveApplicationMainPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newAction3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAction3ActionPerformed
//            
//        if (employeeNoTxt.getText().equals("") || jobgroupCmbx.getSelectedItem().equals("") || designationCmbx.getSelectedItem().equals("")
//                || departmentCmbx.getSelectedItem().equals("") || divisionCmbx.getSelectedItem().equals("") || sectionCmbx.getSelectedItem().equals("")
//                || leavetypeCmbx.getSelectedItem().equals("") || durationTxt.getText().equals("") || leaveDaysAfterLeaveTxt.getText().equals("")
//                || accompaniedByTxa.getText().equals("") || telePhoneTxt.getText().equals("")  || applicanttelephoneTxt.getText().equals("") 
//                || managerTxt.getText().equals("") || emailOrAddressTxa.getText().equals("")  || accompaniedByTxa.getText().equals("")  
//                || reasonTxa.getText().equals("")) {
//            
//            System.out.println("Employee Number is Missing.");
//            JOptionPane.showMessageDialog(rootPane, "Employee Information so far entered is not complete!");
//            
//            if (employeeNoTxt.getText().equals("")) {
//                employeeNumbLbl.setForeground(Color.red);
//                JOptionPane.showMessageDialog(rootPane, "Employee Number a required Values is missing.", 
//                    "Empty Value.", JOptionPane.ERROR_MESSAGE);
//            } else if (durationTxt.getText().equals("")) {
//                JOptionPane.showMessageDialog(rootPane, "Leave Duration a required Values is missing.", 
//                    "Empty Value.", JOptionPane.ERROR_MESSAGE);
//            } else if (telePhoneTxt.getText().equals("")) {
//                jLabel74.setForeground(Color.red);
//                JOptionPane.showMessageDialog(rootPane, "Telephone Extension a required Values is missing.", 
//                    "Empty Value.", JOptionPane.ERROR_MESSAGE);
//            } else if (applicanttelephoneTxt.getText().equals("")) {
//                applicantTeleLbl.setForeground(Color.red);
//                JOptionPane.showMessageDialog(rootPane, "Applicant Mobile/Phone No. a required Values is missing.", 
//                    "Empty Value.", JOptionPane.ERROR_MESSAGE);
//            } else if (managerTxt.getText().equals("")) {
//                jLabel82.setForeground(Color.red);
//                JOptionPane.showMessageDialog(rootPane, "Manager/Team Leader a required Values is missing.", 
//                    "Empty Value.", JOptionPane.ERROR_MESSAGE);
//            } else if (emailOrAddressTxa.getText().equals("")) {
//                emailPhyAddressPanel.setForeground(Color.red);
//                JOptionPane.showMessageDialog(rootPane, "Email/Physical Address a required Values is missing.", 
//                    "Empty Value.", JOptionPane.ERROR_MESSAGE);
//            } else if (accompaniedByTxa.getText().equals("")) {
//                accompaniedByLbl.setForeground(Color.red);
//                JOptionPane.showMessageDialog(rootPane, "Accompanied By a required Values is missing.", 
//                    "Empty Value.", JOptionPane.ERROR_MESSAGE);
//                        
//            } else if (reasonTxa.getText().equals("")) {
//                JOptionPane.showMessageDialog(emailPhyAddressPanel, "Ensure that the Reason for Leave is Filled.", 
//                        "Reason for Leave", JOptionPane.ERROR_MESSAGE);
//            }
//        
//        } else {

        try {
            connectDB.setAutoCommit(false);

            SimpleDateFormat sdf = new SimpleDateFormat("EEE, d MMM yyyy");

            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO hr.hr_leave_application(name_of_employee, "
                    + "emp_no, designination, job_group, divison, department, section, type_of_leave, "
                    + "manager, reason, local_address, leave_remaining_days, leave_days_after, duration, start_date, "
                    + "end_date, return_date, contact, tel_exnt, status, login_name, accompanied_by, "
                    + "timestamp) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

            pstmt.setString(1, employeeNameTxt.getText().trim());
            pstmt.setString(2, employeeNoTxt.getText().trim());
            pstmt.setString(3, designationCmbx.getSelectedItem().toString().trim());
            pstmt.setString(4, jobgroupCmbx.getSelectedItem().toString().trim());
            pstmt.setString(5, divisionCmbx.getSelectedItem().toString().trim());
            pstmt.setString(6, departmentCmbx.getSelectedItem().toString().trim());
            pstmt.setString(7, sectionCmbx.getSelectedItem().toString().trim());
            pstmt.setString(8, leavetypeCmbx.getSelectedItem().toString().trim());
            pstmt.setString(9, managerTxt.getText().trim());
            pstmt.setString(10, reasonTxa.getText().trim());
            pstmt.setString(11, emailOrAddressTxa.getText().trim());
            pstmt.setInt(12, Integer.valueOf(daysB4LeaveTxt.getText().trim()));
            pstmt.setInt(13, Integer.valueOf(leaveDaysAfterLeaveTxt.getText().trim()));
            pstmt.setInt(14, Integer.parseInt(durationTxt.getText().trim()));

            java.util.Date start_date = startdatePickerDate.getDate();
            pstmt.setObject(15, sdf.format(start_date));

            System.err.println("Leave Start Date " + sdf.format(start_date));

            java.util.Date expiry_date = expirydatePickerDate.getDate();
            pstmt.setObject(16, sdf.format(expiry_date));

            System.err.println("Leave Expiry Date " + sdf.format(expiry_date));

            java.util.Date end_date = enddatePickerDate.getDate();
            pstmt.setObject(17, sdf.format(end_date));

            System.err.println("Leave End Date " + sdf.format(end_date));

            pstmt.setString(18, applicanttelephoneTxt.getText().trim());
            pstmt.setString(19, telePhoneTxt.getText().trim());
            pstmt.setString(20, "Pending");
            pstmt.setString(21, leave_applicant);
            pstmt.setString(22, accompaniedByTxa.getText().trim());

            java.util.Date app_date = applicationPickerDate.getDate();
            pstmt.setObject(23, sdf.format(app_date));

            System.err.println("Leave Application Date " + sdf.format(app_date));

            pstmt.executeUpdate();
            connectDB.commit();
            connectDB.setAutoCommit(true);

            javax.swing.JOptionPane.showMessageDialog(this, "Leave has been applied successfully. To check the status of your Leave Application"
                    + "\nClick on the Check Leave Status"
                    + "\n\nOnce approved, your Leave Will Expire on - " + sdf.format(expirydatePickerDate.getDate()) + ".", "Confirmation Message",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);

            clear();

        } catch (java.sql.SQLException sq) {
            sq.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);

            try {
                connectDB.rollback();
            } catch (java.sql.SQLException sql) {
                javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            }

        }
        // }
    }//GEN-LAST:event_newAction3ActionPerformed

    private void departmentCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departmentCmbxActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_departmentCmbxActionPerformed

    private void divisionCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divisionCmbxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_divisionCmbxActionPerformed

    private void departmentCmbxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_departmentCmbxItemStateChanged
//        // TODO add your handling code here:
//        nBCachedRowSet3.setCommand("Select section  as name from hr.hr_sections where dept ='" + departmentCmbx.getSelectedItem() + "'");
//        System.out.println("Select section  as name from hr.hr_sections where dept ='" + departmentCmbx.getSelectedItem() + "'");
//        nBCachedRowSet3.setConnectionSource(pConnDB);
//
//        sectionCmbx.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(nBCachedRowSet3, "name", null, null, null));
    }//GEN-LAST:event_departmentCmbxItemStateChanged

    private void designationCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_designationCmbxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_designationCmbxActionPerformed

    private void jobgroupCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jobgroupCmbxActionPerformed

    }//GEN-LAST:event_jobgroupCmbxActionPerformed

    private void divisionCmbxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_divisionCmbxItemStateChanged
//        // TODO add your handling code here:
//        nBCachedRowSet1.setCommand("select department_name from hr.hr_department where remarks ='" + divisionCmbx.getSelectedItem() + "'");
//        System.out.println("select department_name from hr.hr_department where remarks ='" + divisionCmbx.getSelectedItem() + "'");
//        nBCachedRowSet1.setConnectionSource(pConnDB);
//
//        departmentCmbx.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(nBCachedRowSet1, "department_name", null, null, null));
    }//GEN-LAST:event_divisionCmbxItemStateChanged

    private void durationTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_durationTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_durationTxtActionPerformed

    private void sectionCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sectionCmbxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sectionCmbxActionPerformed

    private void searchEmployeeNumbTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchEmployeeNumbTxtCaretUpdate
        if (searchEmployeeNumbTxt.getCaretPosition() < 2) {
            System.out.println("Nothing...");
        } else {
            System.out.println("Searching...");

            searchEmployeeTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,
                    "SELECT employee_no, initcap(first_name) || ' '|| initcap(middle_name) || ' '|| initcap(last_name) AS employee_name, "
                    + "id_no FROM master_file WHERE employee_no ILIKE '%" + searchEmployeeNumbTxt.getText() + "%' "
                    + "OR id_no ILIKE '%" + searchEmployeeNumbTxt.getText() + "%' ORDER BY employee_no"));

            System.out.println("Showing...");

            searchEmployeeTable.setShowHorizontalLines(false);
            searchEmployeeTable.getColumnModel().getColumn(0).setPreferredWidth(350);
            searchEmployeeTable.getColumnModel().getColumn(1).setPreferredWidth(350);
            searchEmployeeScrollPane.setViewportView(searchEmployeeTable);
        }

    }//GEN-LAST:event_searchEmployeeNumbTxtCaretUpdate

    private void searchEmployeeNumbTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchEmployeeNumbTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchEmployeeNumbTxtActionPerformed

    private void searchEmployeeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchEmployeeTableMouseClicked

        employeeNoTxt.setText(searchEmployeeTable.getValueAt(searchEmployeeTable.getSelectedRow(), 0).toString());
        String title = "                           (" + searchEmployeeTable.getValueAt(searchEmployeeTable.getSelectedRow(), 0)
                .toString().concat("    ").
                concat(searchEmployeeTable.getValueAt(searchEmployeeTable.getSelectedRow(), 1).toString()).concat(")");

        this.setTitle(title);

        startdatePickerDate.setEnabled(true);
        expirydatePickerDate.setEnabled(true);
        enddatePickerDate.setEnabled(true);
        populateBioData(searchEmployeeTable.getValueAt(searchEmployeeTable.getSelectedRow(), 0).toString());

        leaveDaysAfterLeaveTxt.setText("0");
        employeeSearchDialog.dispose();
    }//GEN-LAST:event_searchEmployeeTableMouseClicked

    private void searchEmployeeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchEmployeeBtnActionPerformed
        this.employeeSearchDialog.dispose();
    }//GEN-LAST:event_searchEmployeeBtnActionPerformed

    private void nameNoSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameNoSearchBtnActionPerformed
        employeeSearchButtonClicked();
    }//GEN-LAST:event_nameNoSearchBtnActionPerformed

    private void durationTxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_durationTxtKeyReleased
        java.util.Date input_date = startdatePickerDate.getDate();
        if (durationTxt.isEditable()) {
            java.util.Date returnDate = addDays(input_date, Integer.valueOf(durationTxt.getText()));
            java.util.Date exp_Date = addDays(returnDate, -1);

            enddatePickerDate.setDate(returnDate);
            expirydatePickerDate.setDate(exp_Date);

            Integer leaveRem = Integer.valueOf(daysB4LeaveTxt.getText()) - Integer.valueOf(durationTxt.getText());
            leaveDaysAfterLeaveTxt.setText(Integer.toString(leaveRem));

        } else {
            System.out.println("Not editable!");
        }
    }//GEN-LAST:event_durationTxtKeyReleased

    private void leavetypeCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leavetypeCmbxActionPerformed
        leavetypeCmbx.setSelectedItem("");
        leaveDaysAfterLeaveTxt.setText("");

        if (employeeNoTxt.getText().equals("")) {
            JOptionPane.showMessageDialog(emailPhyAddressPanel, "Employee Number is Empty.", "Empty Value.", JOptionPane.ERROR_MESSAGE);
        } else {
            setLeaveDays();

        }

        java.util.Date endDate = new java.util.Date();

        java.util.Date startDate = startdatePickerDate.getDate();

        java.sql.Statement stmt;
        try {
            stmt = connectDB.createStatement();

            java.sql.ResultSet rset = stmt.executeQuery("SELECT '" + startdatePickerDate.getDate() + "'::date + " + Integer.parseInt(entitledLeaveDayTxt.getText()) + "");
            while(rset.next()){
            enddatePickerDate.setDate(rset.getDate(1));
            }
        } catch (SQLException ex) {
            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
                        ex.printStackTrace();             //Exceptions.printStackTrace(ex);
        }

    }//GEN-LAST:event_leavetypeCmbxActionPerformed

    private void clearAction3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAction3ActionPerformed
        clear();
    }//GEN-LAST:event_clearAction3ActionPerformed

    private void checkForLeaveStatusRBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkForLeaveStatusRBtnActionPerformed
        if (checkForLeaveStatusRBtn.isSelected()) {
            System.out.println("Yap its 1");

            String start_date = null, end_date = null, emp_no1 = null, emp_no = null, timestamp = "unknown", type_of_leave = null;

            try {
                connectDB.setAutoCommit(false);

                System.out.println("About to Get the Employee's Details");

                java.sql.Statement stm = connectDB.createStatement();
                java.sql.ResultSet rse = stm.executeQuery(
                        "SELECT start_date, end_date, emp_no, timestamp, type_of_leave FROM hr.hr_leave_application "
                        + "WHERE login_name = '" + leave_applicant + "'");

                System.out.println("To Get the Patient Details");

                while (rse.next()) {

                    System.out.println("Getting the user's Details");

                    start_date = rse.getObject(1).toString();
                    end_date = rse.getObject(2).toString();
                    emp_no1 = rse.getObject(3).toString();
                    timestamp = rse.getObject(4).toString();
                    type_of_leave = rse.getObject(5).toString();

                }

                System.out.println("The user's Details should be set! EMNO1 - " + emp_no1);

                connectDB.commit();
                connectDB.setAutoCommit(true);
            } catch (final Exception es) {
                System.out.println(es);

            }

            if ((start_date == null) || (end_date == null)) {
                System.out.println("Start Date - " + start_date + " End Date - " + end_date);
                JOptionPane.showMessageDialog(jLabel82, "Have you applied for a Leave? If not please do apply for one first.",
                        "Leave Application.", JOptionPane.INFORMATION_MESSAGE);

            } else {
                System.out.println("Start Date - " + start_date + " End Date - " + end_date);

                try {
                    connectDB.setAutoCommit(false);

                    System.out.println("About to Get the Employee's Details");

                    java.sql.Statement stm1 = connectDB.createStatement();
                    java.sql.ResultSet rse1 = stm1.executeQuery(
                            "SELECT emp_no FROM hr.hr_leave_approval "
                            + "WHERE login_name = '" + leave_applicant + "' "
                            + "AND leave_start_date = '" + start_date + "' "
                            + "AND leave_end_date = '" + end_date + "' ");

                    System.out.println("To Get the Patient Details EMP2 - 1 ");

                    while (rse1.next()) {

                        System.out.println("Getting the user's Details");

                        emp_no = rse1.getObject(1).toString();

                    }

                    System.out.println("The user's Details should be set! " + emp_no + " 2 " + emp_no1);

                    if ((emp_no1.equals(emp_no))) {
                        System.out.println("Time Applied - " + timestamp);
                        System.out.println("The user's Details should be set!" + emp_no + " 2 " + emp_no1);
                        JOptionPane.showMessageDialog(jLabel82, "Your " + type_of_leave + " Applied on " + timestamp + " Has been Approved. Pick you Leave Form from the HR Department.",
                                "Leave Approved", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        System.out.println("The user's Details should be set!" + emp_no + " 2 " + emp_no1);
                        JOptionPane.showMessageDialog(jLabel82, "Your " + type_of_leave + " Applied on " + timestamp + " is Still being Processed. Check again Later.",
                                "Leave Not Yet Approved", JOptionPane.INFORMATION_MESSAGE);

                    }
                    connectDB.commit();
                    connectDB.setAutoCommit(true);
                } catch (final Exception es) {
                    System.out.println(es);

                }
            }
        } else {
            System.out.println("Not Selected!");
        }
    }//GEN-LAST:event_checkForLeaveStatusRBtnActionPerformed

    private void applyForLeaveRBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyForLeaveRBtnActionPerformed
        if (applyForLeaveRBtn.isSelected()) {
            jPanel12.setVisible(true);
            labelPanel3.setVisible(true);
        } else {
            System.out.println("Applied Leave not Selected!");
        }
    }//GEN-LAST:event_applyForLeaveRBtnActionPerformed

    private void durationTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_durationTxtMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_durationTxtMouseClicked

    private void leavetypeCmbxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leavetypeCmbxMouseClicked

    }//GEN-LAST:event_leavetypeCmbxMouseClicked

    private void daysB4LeaveTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_daysB4LeaveTxtMouseClicked

    }//GEN-LAST:event_daysB4LeaveTxtMouseClicked

    private void expirydatePickerDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_expirydatePickerDatePropertyChange

    }//GEN-LAST:event_expirydatePickerDatePropertyChange

    private void enddatePickerDatePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_enddatePickerDatePropertyChange
        System.out.println("Yeah !!!!");
    }//GEN-LAST:event_enddatePickerDatePropertyChange

    private void employeeSearchButtonClicked() {

        System.out.println("Showing Employee Search Dialog");

        java.awt.Point point = this.employeeNoTxt.getLocationOnScreen();

        employeeSearchDialog.setSize(500, 200);

        employeeSearchDialog.setLocation(point);

        employeeSearchDialog.setVisible(true);

    }

    public String populateBioData(String employee_no) {

        String text = null;
        String emp_no = "Null", emp_name = "Null", id_no = "Null", division = "NUll", leave_remaining_days = "---", gender = "Unknown";
        String official_desgnation = "Null", department = "Null", section = "Null", branch = "Null", employee_group = "Null", employee_grade = "Null";

        try {
            connectDB.setAutoCommit(false);

            System.out.println("About to Get the Employee Details");

            java.sql.Statement stm12 = connectDB.createStatement();
            java.sql.ResultSet rse12 = stm12.executeQuery(
                    "SELECT employee_no, first_name, id_no, official_desgnation, department, section, "
                    + "branch, employee_group, employee_grade, middle_name, last_name, division, gender FROM master_file "
                    + "WHERE employee_no = '" + employee_no + "' ");

            System.out.println("To Get the Patient Details");

            while (rse12.next()) {

                System.out.println("Getting the user's Details");

                emp_no = dbObject.getDBObject(rse12.getObject(1), " ");
                emp_name = dbObject.getDBObject(rse12.getObject(2), " ").concat(" " + dbObject.getDBObject(rse12.getObject(10), " ")
                        .concat(" " + dbObject.getDBObject(rse12.getObject(11), " ")));
                id_no = dbObject.getDBObject(rse12.getObject(3), " ");
                official_desgnation = dbObject.getDBObject(rse12.getObject(4), " ");
                department = dbObject.getDBObject(rse12.getObject(5), " ");
                section = dbObject.getDBObject(rse12.getObject(6), " ");
                branch = dbObject.getDBObject(rse12.getObject(7), " ");
                employee_group = dbObject.getDBObject(rse12.getObject(8), " ");
                employee_grade = dbObject.getDBObject(rse12.getObject(9), " ");
                division = dbObject.getDBObject(rse12.getObject(12), " ");
                gender = dbObject.getDBObject(rse12.getObject(13), " ");

                String title = "Employee Number - " + emp_no + "              ( " + emp_name.concat("             ID - ").concat(id_no).concat(" )");

                this.setTitle(title);
            }

            System.out.println("User Details - " + title);

            employeeNameTxt.setText(emp_name);
            jobgroupCmbx.setSelectedItem(employee_grade);
            designationCmbx.setSelectedItem(official_desgnation);
            divisionCmbx.setSelectedItem(division);
            departmentCmbx.setSelectedItem(department);
            sectionCmbx.setSelectedItem(section);

            System.out.println("The user's Details should be set!");

            connectDB.commit();
            connectDB.setAutoCommit(true);
        } catch (final Exception es) {
            System.out.println(es);

        }

        try {
            connectDB.setAutoCommit(false);

            System.out.println("About to Get the Employee's Details");

            java.sql.Statement stm = connectDB.createStatement();
            java.sql.ResultSet rse = stm.executeQuery("SELECT leave_remaining_days FROM hr.hr_leave_approval WHERE emp_no = '" + employee_no + "' "
                    + "AND type_of_leave = 'Annual Leave'");

            System.err.println("To Get the Patient Details");

            while (rse.next()) {

                System.err.println("Getting the user's Details");

                leave_remaining_days = dbObject.getDBObject(rse.getObject(1), "---");

            }

            System.err.println("Employee Number - " + employee_no + " Leave Remaining Days - " + leave_remaining_days);

            if (leave_remaining_days.equals("0")) {

                if (gender.equals("Male")) {
                    nBCachedRowSet6.setCommand("SELECT DISTINCT(leave_type), leave_code FROM hr.hr_leave_type WHERE "
                            + " leave_code NOT LIKE '003' ORDER BY leave_code");
                    nBCachedRowSet6.setConnectionSource(pConnDB);
                    leavetypeCmbx.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(nBCachedRowSet6, "leave_type", null, null, null));
                } else {
                    nBCachedRowSet6.setCommand("SELECT DISTINCT(leave_type), leave_code FROM hr.hr_leave_type WHERE "
                            + " leave_code NOT LIKE '002' ORDER BY leave_code");
                    nBCachedRowSet6.setConnectionSource(pConnDB);
                    leavetypeCmbx.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(nBCachedRowSet6, "leave_type", null, null, null));
                }

            } else {

                if (gender.equals("Male")) {
                    nBCachedRowSet6.setCommand("SELECT DISTINCT(leave_type), leave_code FROM hr.hr_leave_type WHERE "
                            + " leave_code NOT LIKE '005' AND leave_code NOT LIKE '003' ORDER BY leave_code");
                    nBCachedRowSet6.setConnectionSource(pConnDB);
                    leavetypeCmbx.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(nBCachedRowSet6, "leave_type", null, null, null));
                } else {
                    nBCachedRowSet6.setCommand("SELECT DISTINCT(leave_type), leave_code FROM hr.hr_leave_type WHERE "
                            + " leave_code NOT LIKE '005' AND leave_code NOT LIKE '002' ORDER BY leave_code");
                    nBCachedRowSet6.setConnectionSource(pConnDB);
                    leavetypeCmbx.setModel(new org.netbeans.lib.sql.models.ComboBoxModel(nBCachedRowSet6, "leave_type", null, null, null));
                }

            }

            connectDB.commit();
            connectDB.setAutoCommit(true);
        } catch (final Exception es) {
            System.out.println(es);

        }

        return text;
    }

    public static long days(java.util.Date start, java.util.Date end) {
        //Ignore argument check

        Calendar c1 = Calendar.getInstance();
        c1.setTime(start);
        int w1 = c1.get(Calendar.DAY_OF_WEEK);
        c1.add(Calendar.DAY_OF_WEEK, -w1);

        Calendar c2 = Calendar.getInstance();
        c2.setTime(end);
        int w2 = c2.get(Calendar.DAY_OF_WEEK);
        c2.add(Calendar.DAY_OF_WEEK, -w2);

        //end Saturday to start Saturday 
        long days = (c2.getTimeInMillis() - c1.getTimeInMillis()) / (1000 * 60 * 60 * 24);
        long daysWithoutSunday = days - (days * 2 / 7);

        return daysWithoutSunday - w1 + w2;
    }

    public static java.util.Date addDays(java.util.Date date, int days) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        cal.add(Calendar.DATE, days); //minus number would decrement the days
        return cal.getTime();
    }

    public void leaveDays() {
        int days = 0;
        java.util.Date input_date = startdatePickerDate.getDate();
        java.util.Date leave_end_date = enddatePickerDate.getDate();

        try {

            days = Country.KENYA.getBusinessDayCount(input_date, leave_end_date);

            System.out.println("Days excluding Holidays -----------> " + days);

        } catch (HolidayException ex) {
            Logger.getLogger(LeaveApplicationIntfr.class.getName()).log(Level.SEVERE, null, ex);
        }

        durationTxt.setText(Integer.toString(days));

        java.util.Date leave_expiry_date = addDays(leave_end_date, -1);
        Calendar c = Calendar.getInstance();
        c.setTime(leave_expiry_date);
        int dayOfWeek = c.get(Calendar.DAY_OF_WEEK);

        if (Country.KENYA.isBusinessDay(leave_expiry_date)) {
            System.out.println("Leave Expiry Date falls on a Week day!");
            expirydatePickerDate.setDate(leave_expiry_date);

        } else {
            do {
                leave_expiry_date = addDays(leave_expiry_date, -1);
                System.out.println("Leave Expiry Date - " + leave_expiry_date);
            } while (!Country.KENYA.isBusinessDay(leave_expiry_date));

            expirydatePickerDate.setDate(leave_expiry_date);
        }

    }

    public void setLeaveRemaining() {
        java.util.Date input_date = startdatePickerDate.getDate();
        Calendar c = Calendar.getInstance();
        c.setTime(input_date);
        int dayOfWeek = c.get(Calendar.DAY_OF_WEEK);

        System.err.println("Selected Date, Day of the week is - " + dayOfWeek);

        if (durationTxt.getText().equals("") || durationTxt.getText().equals(" ")) {
            System.out.println("Empty Values!");

        } else {
            if (durationTxt.getText().matches("^[0-9]+(\\.[0-9]{1,4})?$")) {
                String leave_days = "0";
                try {

                    connectDB.setAutoCommit(false);

                    java.sql.Statement stm = connectDB.createStatement();
                    java.sql.ResultSet rst = stm.executeQuery("SELECT leave_days FROM hr.hr_leave_type "
                            + "WHERE leave_type = '" + leavetypeCmbx.getSelectedItem() + "'");

                    while (rst.next()) {
                        leave_days = dbObject.getDBObject(rst.getObject(1), "0");
                    }

                    if (Integer.valueOf(durationTxt.getText()) > Integer.valueOf(leave_days)) {

                        JOptionPane.showMessageDialog(emailPhyAddressPanel, "The Leave Duration should not exceed the allowed "
                                + "" + leave_days + " days of " + leavetypeCmbx.getSelectedItem() + ". ", "Leave Days Exceed Noted!", JOptionPane.INFORMATION_MESSAGE);
                        durationTxt.setText(daysB4LeaveTxt.getText());
                        leaveDaysAfterLeaveTxt.setText("");
                        startdatePickerDate.setDate(applicationPickerDate.getDate());
                        expirydatePickerDate.setDate(applicationPickerDate.getDate());
                        enddatePickerDate.setDate(applicationPickerDate.getDate());

                    } else {

                        String leave_day = null, leave_code = "000", leave_remaining_days = null;

                        try {
                            connectDB.setAutoCommit(false);

                            System.out.println("Creating the SQL statement that will get the Leave code and Leave Days");

                            java.sql.Statement stmA = connectDB.createStatement();
                            java.sql.ResultSet rsetA = stmA.executeQuery("SELECT leave_code, leave_days FROM hr.hr_leave_type "
                                    + "WHERE leave_type = '" + leavetypeCmbx.getSelectedItem() + "'");

                            System.out.println("ABout to get the Leave Days and Code");
                            while (rsetA.next()) {
                                System.out.println("Getting the Leave Days and Code");

                                leave_code = rsetA.getObject(1).toString();
                                leave_day = rsetA.getObject(2).toString();

                                System.out.println("Leave Code - " + leave_code + " Leave Days - " + leave_days);
                            }

                            System.out.println("I have got the Leave Code and Leave Days");
                            System.out.println("Leave Code - " + leave_code + " Leave Days - " + leave_days);

                            if (leave_code.equals("001") || leave_code.equals("004") || leave_code.equals("005")) {
                                if (!(daysB4LeaveTxt.getText().equals("") && durationTxt.getText().equals(""))) {

                                    if (leave_code.equals("004") || leave_code.equals("005")) {
                                        if (Double.valueOf(durationTxt.getText()) > Double.valueOf(daysB4LeaveTxt.getText())) {
                                            JOptionPane.showMessageDialog(applicantTeleLbl, "One cannot enter " + durationTxt.getText()
                                                    + " leave days which are greater than the " + daysB4LeaveTxt.getText() + " leave days remaining.",
                                                    "Wrong Values.", JOptionPane.ERROR_MESSAGE);
                                            durationTxt.setText(daysB4LeaveTxt.getText());
                                            leaveDaysAfterLeaveTxt.setText("");
                                            startdatePickerDate.setDate(applicationPickerDate.getDate());
                                            expirydatePickerDate.setDate(applicationPickerDate.getDate());
                                            enddatePickerDate.setDate(applicationPickerDate.getDate());
                                        } else {
                                            leaveDays();
                                            Integer leaveRem = Integer.valueOf(daysB4LeaveTxt.getText()) - Integer.valueOf(durationTxt.getText());
                                            leaveDaysAfterLeaveTxt.setText(Integer.toString(leaveRem));

                                        }
                                    } else {
                                        if (Double.valueOf(durationTxt.getText()) > Double.valueOf(daysB4LeaveTxt.getText())) {
                                            JOptionPane.showMessageDialog(applicantTeleLbl, "One cannot enter " + durationTxt.getText()
                                                    + " leave days which are greater than the " + daysB4LeaveTxt.getText() + " leave days remaining.",
                                                    "Wrong Values.", JOptionPane.ERROR_MESSAGE);
                                            durationTxt.setText(daysB4LeaveTxt.getText());
                                            leaveDaysAfterLeaveTxt.setText("");
                                            startdatePickerDate.setDate(applicationPickerDate.getDate());
                                            expirydatePickerDate.setDate(applicationPickerDate.getDate());
                                            enddatePickerDate.setDate(applicationPickerDate.getDate());
                                        } else {
                                            leaveDays();
                                            Integer leaveRem = Integer.valueOf(daysB4LeaveTxt.getText()) - Integer.valueOf(durationTxt.getText());
                                            leaveDaysAfterLeaveTxt.setText(Integer.toString(leaveRem));
                                        }
                                    }

                                } else {
                                    System.out.println("Empty Values.");
                                }
                            } else {
                                System.out.println("Selected Leave is Not 001, 004 or 005.");

                                if (durationTxt.isEditable()) {
                                    java.util.Date returnDate = addDays(input_date, Integer.valueOf(durationTxt.getText()));
                                    java.util.Date exp_Date = addDays(returnDate, -1);

                                    enddatePickerDate.setDate(returnDate);
                                    expirydatePickerDate.setDate(exp_Date);

                                    Integer leaveRem = Integer.valueOf(daysB4LeaveTxt.getText()) - Integer.valueOf(durationTxt.getText());
                                    leaveDaysAfterLeaveTxt.setText(Integer.toString(leaveRem));

                                } else {
                                    System.out.println("Not editable!");
                                }

                            }

                            connectDB.commit();
                            connectDB.setAutoCommit(true);

                        } catch (final Exception es) {
                            System.out.println(es);
                        }

                    }

                    connectDB.commit();
                    connectDB.setAutoCommit(true);

                } catch (java.sql.SQLException smth) {
                    System.out.println("Error - " + smth);
                }

                expirydatePickerDate.setForeground(Color.red);
            } else {
                JOptionPane.showMessageDialog(emailPhyAddressPanel, "Unrecognized Value at Leave Duration " + durationTxt.getText() + ".",
                        "Unrecognized Value", JOptionPane.ERROR_MESSAGE);

            }
        }
    }

    public void setLeaveDays() {

        String leave_code = null;
        String leave_days = null;
        String lv_rem_days = "0";
        leave_rem_days = null;
        System.out.println("Before Clearing Comb Box Selected Item - " + leavetypeCmbx.getSelectedItem());
        leavetypeCmbx.setSelectedItem("");
        System.out.println("After Clearing Comb Box Selected Item - " + leavetypeCmbx.getSelectedItem());

        try {
            connectDB.setAutoCommit(false);

            java.sql.Statement stm = connectDB.createStatement();
            java.sql.ResultSet rse = stm.executeQuery("SELECT leave_days, leave_code FROM hr.hr_leave_type "
                    + "WHERE leave_type = '" + leavetypeCmbx.getSelectedItem().toString().trim() + "'");

            System.out.println("Selected Item - " + leavetypeCmbx.getSelectedItem());
            System.out.println("Just before the rse loop - " + leave_days1);
            while (rse.next()) {
                System.out.println("Inside the Loop - Leave Days - " + leave_days1);
                leave_days1 = dbObject.getDBObject(rse.getObject(1), "0");
                leave_code = dbObject.getDBObject(rse.getObject(2), "0");
                System.out.println("Within the Loop - Leave Days - " + leave_days1);
            }

            try {
                connectDB.setAutoCommit(false);

                java.sql.Statement stmA = connectDB.createStatement();
                java.sql.ResultSet rseA = stmA.executeQuery("SELECT family_leave_days FROM hr.hr_job_family "
                        + "WHERE family_desc = '" + jobgroupCmbx.getSelectedItem() + "'");

                while (rseA.next()) {
                    System.out.println("Inside the Loop - Leave Rem Days - " + leave_days);
                    leave_days = dbObject.getDBObject(rseA.getObject(1), "30");
                    System.out.println("Within the Loop - Leave Rem Days - " + leave_days);
                }

                connectDB.commit();
                connectDB.setAutoCommit(true);
            } catch (final Exception es) {
                System.out.println(es);

            }

            if (leave_code.equals("001")) {
                System.out.println("Entitled Leave Days - " + leave_days);
                entitledLeaveDayTxt.setText(leave_days);
            } else {
                entitledLeaveDayTxt.setText(leave_days1);
            }

            System.out.println("After rse loop - " + leave_days1);

            if (leave_code.equals("001") || leave_code.equals("004") || leave_code.equals("005")) {
                durationTxt.setEditable(false);
            } else {
                durationTxt.setEditable(true);
            }

            connectDB.commit();
            connectDB.setAutoCommit(true);
        } catch (final Exception es) {
            System.out.println(es);

        }

        try {
            connectDB.setAutoCommit(false);

            java.sql.Statement stmZ = connectDB.createStatement();
            java.sql.ResultSet rseZ = stmZ.executeQuery("SELECT leave_remaining_days FROM hr.hr_leave_approval "
                    + "WHERE emp_no = '" + employeeNoTxt.getText() + "' AND type_of_leave = '" + leavetypeCmbx.getSelectedItem() + "'");

            while (rseZ.next()) {
                System.out.println("Inside the Loop - Leave Rem Days - " + leave_rem_days);
                leave_rem_days = dbObject.getDBObject(rseZ.getObject(1), "01");
                System.out.println("Within the Loop - Leave Rem Days - " + leave_rem_days);
            }

            java.sql.Statement stmA = connectDB.createStatement();
            java.sql.ResultSet rseA = stmA.executeQuery("SELECT leave_days FROM master_file "
                    + "WHERE employee_no = '" + employeeNoTxt.getText() + "'");

            while (rseA.next()) {
                System.out.println("Inside the Loop - Leave Rem Days - " + leave_rem_days);
                lv_rem_days = dbObject.getDBObject(rseA.getObject(1), "0");
                System.out.println("Within the Loop - Leave Rem Days - " + leave_rem_days);
            }

            System.out.println("Leave Remaining Days - " + leave_rem_days);
            System.out.println("Leave Days - " + lv_rem_days);
            if (leave_rem_days == null) {
                String rem_days = leave_days;

                System.out.println("Emp No - " + employeeNoTxt.getText() + " Type of Leave " + leavetypeCmbx.getSelectedItem() + " "
                        + "DISPLAYED LEAVE DAYS - " + rem_days + " Supposed Leave Days - " + leave_days1);

                try {

                    connectDB.setAutoCommit(false);

                    java.sql.PreparedStatement pst = connectDB.prepareStatement("SELECT leave_days FROM master_file "
                            + "WHERE employee_no = '" + employeeNoTxt.getText() + "';");
                    java.sql.ResultSet rst = pst.executeQuery();

                    while (rst.next()) {
                        rem_days = rst.getObject(1).toString();
                    }

                } catch (SQLException sqlE) {
                    System.out.println("SQL Error - " + sqlE);
                }

                daysB4LeaveTxt.setText(Integer.toString(Integer.valueOf(rem_days)));
                durationTxt.setText("0");
            } else {
                System.out.println("Emp No - " + employeeNoTxt.getText() + " Type of Leave " + leavetypeCmbx.getSelectedItem() + " "
                        + "DISPLAYED LEAVE DAYS - " + leave_rem_days + " Supposed Leave Days - " + leave_days1);
                daysB4LeaveTxt.setText(Integer.toString(Integer.valueOf(leave_rem_days) + Integer.valueOf(lv_rem_days)));
                durationTxt.setText("0");
            }

            connectDB.commit();
            connectDB.setAutoCommit(true);
        } catch (final Exception es) {
            System.out.println(es);

        }

    }

    public void LeaveCal() {
        int remDays = 0;

        remDays = Integer.valueOf(daysB4LeaveTxt.getText().toString()) - Integer.valueOf(durationTxt.getText().toString());
        leaveDaysAfterLeaveTxt.setText(Integer.toString(remDays));
        System.err.println("Remaining Days - " + remDays);
    }

    public void clear() {
        employeeNoTxt.setText("");
        employeeNameTxt.setText("");
        jobgroupCmbx.setSelectedItem("");
        designationCmbx.setSelectedItem("");
        divisionCmbx.setSelectedItem("");
        departmentCmbx.setSelectedItem("");
        sectionCmbx.setSelectedItem("");
        entitledLeaveDayTxt.setText("");
        daysB4LeaveTxt.setText("");
        durationTxt.setText("");
        expirydatePickerDate.setDate(applicationPickerDate.getDate());
        enddatePickerDate.setDate(applicationPickerDate.getDate());
        leaveDaysAfterLeaveTxt.setText("");
        reasonTxa.setText("");
        telePhoneTxt.setText("");
        applicanttelephoneTxt.setText("");
        managerTxt.setText("");
        emailOrAddressTxa.setText("");
        accompaniedByTxa.setText("");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel accompaniedByLbl;
    private javax.swing.JTextArea accompaniedByTxa;
    private javax.swing.JPanel actionsPanel3;
    private javax.swing.JLabel applicantTeleLbl;
    private javax.swing.JTextField applicanttelephoneTxt;
    private com.afrisoftech.lib.DatePicker applicationPickerDate;
    private javax.swing.JRadioButton applyForLeaveRBtn;
    private javax.swing.JRadioButton checkForLeaveStatusRBtn;
    private javax.swing.JButton clearAction3;
    private javax.swing.JTextField daysB4LeaveTxt;
    private javax.swing.JComboBox departmentCmbx;
    private javax.swing.JComboBox designationCmbx;
    private javax.swing.JComboBox divisionCmbx;
    private javax.swing.JTextField durationTxt;
    private javax.swing.JTextArea emailOrAddressTxa;
    private javax.swing.JLabel emailPhyAddressPanel;
    private javax.swing.JPanel employeeDetailsPanel;
    private javax.swing.JTextField employeeNameTxt;
    private javax.swing.JTextField employeeNoTxt;
    private javax.swing.JLabel employeeNumbLbl;
    private javax.swing.JDialog employeeSearchDialog;
    private javax.swing.JPanel employeeSearchDialogPanel;
    private com.afrisoftech.lib.DatePicker enddatePickerDate;
    private javax.swing.JTextField entitledLeaveDayTxt;
    private com.afrisoftech.lib.DatePicker expirydatePickerDate;
    private javax.swing.JButton helpAction3;
    private javax.swing.JPanel helpPanel3;
    private javax.swing.JPanel imgPanel3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel102;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox jobgroupCmbx;
    private javax.swing.JPanel labelPanel3;
    private javax.swing.JPanel leaveApplicationMainPanel;
    private javax.swing.JPanel leaveCalcPanel;
    private javax.swing.JPanel leaveDayDetailsPanel;
    private javax.swing.JTextField leaveDaysAfterLeaveTxt;
    private javax.swing.ButtonGroup leaveStatusRBtnG;
    private javax.swing.JComboBox leavetypeCmbx;
    private javax.swing.JTextField managerTxt;
    private org.netbeans.lib.sql.NBCachedRowSet nBCachedRowSet1;
    private org.netbeans.lib.sql.NBCachedRowSet nBCachedRowSet2;
    private org.netbeans.lib.sql.NBCachedRowSet nBCachedRowSet3;
    private org.netbeans.lib.sql.NBCachedRowSet nBCachedRowSet4;
    private org.netbeans.lib.sql.NBCachedRowSet nBCachedRowSet5;
    private org.netbeans.lib.sql.NBCachedRowSet nBCachedRowSet6;
    private javax.swing.JButton nameNoSearchBtn;
    private javax.swing.JPanel nameNoSearchPanel;
    private javax.swing.JButton newAction3;
    private javax.swing.JPanel otherDetailsPanel;
    private javax.swing.JPanel radioButtonPanel;
    private javax.swing.JTextArea reasonTxa;
    private javax.swing.JButton searchEmployeeBtn;
    private javax.swing.JTextField searchEmployeeNumbTxt;
    private javax.swing.JScrollPane searchEmployeeScrollPane;
    private javax.swing.JTable searchEmployeeTable;
    private javax.swing.JComboBox sectionCmbx;
    private javax.swing.JPanel spacerPanel3;
    private com.afrisoftech.lib.DatePicker startdatePickerDate;
    private javax.swing.JPanel subMainPanel3;
    private javax.swing.JTextField telePhoneTxt;
    // End of variables declaration//GEN-END:variables

    private void setLocationRelativeTo(Object object) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    private void changeDate(){
        try {
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("SELECT '"+enddatePickerDate.getDate()+"'::date - '"+startdatePickerDate.getDate()+"'::date");
            while(rset.next()){
                durationTxt.setText(String.valueOf(rset.getInt(1)));
            }
        } catch (SQLException ex) {
                        ex.printStackTrace();             //Exceptions.printStackTrace(ex);
        }
        
    }
}
