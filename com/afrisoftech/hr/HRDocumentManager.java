/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.afrisoftech.hr;

import com.itextpdf.text.DocumentException;
import com.itextpdf.text.pdf.BadPdfFormatException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
//import org.openide.util.Exceptions;

/**
 *
 * @author root
 */
public class HRDocumentManager extends javax.swing.JInternalFrame {

    private java.sql.Connection connectDB = null;
    private int n;
    private int documentRowID;
    public static org.icepdf.ri.common.SwingController controller = null;

    /**
     * Creates new form HRDocumentManager
     */
    public HRDocumentManager(java.sql.Connection dbConn) {

        connectDB = dbConn;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        employeeSearchDialog = new javax.swing.JDialog();
        employeeSearchPanel = new javax.swing.JPanel();
        employeeSearchTxt = new javax.swing.JTextField();
        employeeSearchScrollPane = new javax.swing.JScrollPane();
        employeeSearchTable = new com.afrisoftech.dbadmin.JTable();
        closeSearchBtn = new javax.swing.JButton();
        digitizingTabbedPane = new javax.swing.JTabbedPane();
        digitizingPanel = new javax.swing.JPanel();
        headerPanel = new javax.swing.JPanel();
        staffNoLbl = new javax.swing.JLabel();
        staffNameLbl = new javax.swing.JLabel();
        departmentLbl = new javax.swing.JLabel();
        designationLbl = new javax.swing.JLabel();
        staffNameTxt = new javax.swing.JTextField();
        departmentNameTxt = new javax.swing.JTextField();
        designationTxt = new javax.swing.JTextField();
        searchPanel = new javax.swing.JPanel();
        employeeNumberTxt = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        actionPanel = new javax.swing.JPanel();
        attachDocsBtn = new javax.swing.JButton();
        closeFormBtn = new javax.swing.JButton();
        spacerLbl = new javax.swing.JLabel();
        viewDocumentBtn = new javax.swing.JButton();
        clearFormBtn = new javax.swing.JButton();
        indexingPanel = new javax.swing.JPanel();
        indexingActionPanel = new javax.swing.JPanel();
        spacerIndexLable = new javax.swing.JLabel();
        indexBtn = new javax.swing.JButton();
        indexCloseFormBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        indexingHeaderPanel = new javax.swing.JPanel();
        documentIdentityTxt = new javax.swing.JTextField();
        folioTypeCmbx = new javax.swing.JComboBox<>();
        indexingBodyPanel = new javax.swing.JPanel();

        employeeSearchDialog.setModal(true);
        employeeSearchDialog.setUndecorated(true);
        employeeSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        employeeSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        employeeSearchPanel.setLayout(new java.awt.GridBagLayout());

        employeeSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                employeeSearchTxtCaretUpdate(evt);
            }
        });
        employeeSearchTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeSearchTxtActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        employeeSearchPanel.add(employeeSearchTxt, gridBagConstraints);

        employeeSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
        employeeSearchTable.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = employeeSearchTable.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        employeeSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                employeeSearchTableMouseClicked(evt);
            }
        });
        employeeSearchScrollPane.setViewportView(employeeSearchTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        employeeSearchPanel.add(employeeSearchScrollPane, gridBagConstraints);

        closeSearchBtn.setText("Dispose");
        closeSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeSearchBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        employeeSearchPanel.add(closeSearchBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        employeeSearchDialog.getContentPane().add(employeeSearchPanel, gridBagConstraints);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Human Capital Resources - Document Manager");
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        digitizingPanel.setLayout(new java.awt.GridBagLayout());

        headerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Please set the staff file number before proceeding"));
        headerPanel.setLayout(new java.awt.GridBagLayout());

        staffNoLbl.setText("Staff/PF Number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(staffNoLbl, gridBagConstraints);

        staffNameLbl.setText("Employee Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(staffNameLbl, gridBagConstraints);

        departmentLbl.setText("Department");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(departmentLbl, gridBagConstraints);

        designationLbl.setText("Designation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(designationLbl, gridBagConstraints);

        staffNameTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(staffNameTxt, gridBagConstraints);

        departmentNameTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(departmentNameTxt, gridBagConstraints);

        designationTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(designationTxt, gridBagConstraints);

        searchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        searchPanel.setLayout(new java.awt.GridBagLayout());

        employeeNumberTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        searchPanel.add(employeeNumberTxt, gridBagConstraints);

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
        searchButton.setToolTipText("Search");
        searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
        searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        searchPanel.add(searchButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 3.0;
        gridBagConstraints.weighty = 1.0;
        headerPanel.add(searchPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 200.0;
        digitizingPanel.add(headerPanel, gridBagConstraints);

        actionPanel.setLayout(new java.awt.GridBagLayout());

        attachDocsBtn.setText("Attach Documents");
        attachDocsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attachDocsBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        actionPanel.add(attachDocsBtn, gridBagConstraints);

        closeFormBtn.setText("Close");
        closeFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        actionPanel.add(closeFormBtn, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        actionPanel.add(spacerLbl, gridBagConstraints);

        viewDocumentBtn.setText("View Documents");
        viewDocumentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDocumentBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        actionPanel.add(viewDocumentBtn, gridBagConstraints);

        clearFormBtn.setText("Clear form");
        clearFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        actionPanel.add(clearFormBtn, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        digitizingPanel.add(actionPanel, gridBagConstraints);

        digitizingTabbedPane.addTab("Document digitizing panel", digitizingPanel);

        indexingPanel.setLayout(new java.awt.GridBagLayout());

        indexingActionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        indexingActionPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 100.0;
        gridBagConstraints.weighty = 1.0;
        indexingActionPanel.add(spacerIndexLable, gridBagConstraints);

        indexBtn.setText("Index page");
        indexBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indexBtnActionPerformed(evt);
            }
        });
        indexingActionPanel.add(indexBtn, new java.awt.GridBagConstraints());

        indexCloseFormBtn.setText("Close form");
        indexCloseFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                indexCloseFormBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        indexingActionPanel.add(indexCloseFormBtn, gridBagConstraints);

        jButton1.setText("View Selected Folio");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        indexingActionPanel.add(jButton1, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        indexingPanel.add(indexingActionPanel, gridBagConstraints);

        indexingHeaderPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Document Identity"));
        indexingHeaderPanel.setLayout(new java.awt.GridBagLayout());

        documentIdentityTxt.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        indexingHeaderPanel.add(documentIdentityTxt, gridBagConstraints);

        folioTypeCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '-' UNION SELECT DISTINCT folio_type_description FROM pb_edms_folio_type ORDER BY 1")
        );
        folioTypeCmbx.setBorder(javax.swing.BorderFactory.createTitledBorder("Folio Type"));
        folioTypeCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                folioTypeCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 5.0;
        gridBagConstraints.weighty = 1.0;
        indexingHeaderPanel.add(folioTypeCmbx, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        indexingPanel.add(indexingHeaderPanel, gridBagConstraints);

        indexingBodyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Document Viewer"));
        indexingBodyPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 100.0;
        indexingPanel.add(indexingBodyPanel, gridBagConstraints);

        digitizingTabbedPane.addTab("Document Indexing", indexingPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(digitizingTabbedPane, gridBagConstraints);
        digitizingTabbedPane.getAccessibleContext().setAccessibleName("Document digitizing panel");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFormBtnActionPerformed

        dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_closeFormBtnActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchButtonClicked();        // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed

    private void employeeSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_employeeSearchTxtCaretUpdate
        if (employeeSearchTxt.getCaretPosition() < 2) {

            System.out.println("Nothing");
        } else {
            employeeSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select employee_no,first_name||' '||middle_name||' '||last_name AS name,department, (CASE WHEN retired = true THEN 'RETIRED' WHEN suspend = TRUE THEN 'SUSPENDED' ELSE   'ACTIVE' END) AS STATUS from master_file where ( first_name||' '||middle_name||' '||last_name ILIKE '%" + employeeSearchTxt.getText() + "%' OR employee_no ILIKE '%" + employeeSearchTxt.getText() + "%' OR pin_no ILIKE '%" + employeeSearchTxt.getText() + "%' OR  id_no ILIKE '%" + employeeSearchTxt.getText() + "%') AND retired = false ORDER BY first_name||' '||middle_name||' '||last_name"));

            employeeSearchTable.setShowHorizontalLines(false);
            employeeSearchScrollPane.setViewportView(employeeSearchTable);

        }           // Add your handling code here:
    }//GEN-LAST:event_employeeSearchTxtCaretUpdate

    private void employeeSearchTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeSearchTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employeeSearchTxtActionPerformed

    private void employeeSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_employeeSearchTableMouseClicked
        // jTextField2.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
        employeeNumberTxt.setText(employeeSearchTable.getValueAt(employeeSearchTable.getSelectedRow(), 0).toString());
        //  jTextField3.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 2).toString());
        indexingBodyPanel.removeAll();
        indexingBodyPanel.add(new javax.swing.JPanel());

        com.afrisoftech.lib.DBObject dbObject = new com.afrisoftech.lib.DBObject();

        try {
            connectDB.setAutoCommit(false);
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("SELECT employee_no, first_name, middle_name, last_name, id_no,"
                    + " birth_date,"
                    + "nationality, trim(marital_status), trim(gender), date_employed, official_desgnation,"
                    + "department, section, branch, employee_group, employee_grade,"
                    + "pin_no, nhif_no, nssf_no, basic_pay, tax_relief, hourly_rate,"
                    + "unused_relief, bank, bank_account_no, address, tel_no, town,"
                    + "estate, mobile_no, division, district, village, lasc_no, date,"
                    + "trim(payment_mode), nhifexempt, unionexempt, nssfexempt, payeexempt,"
                    + "lascexempt, suspend, monthly_hours, company_name,email_address,withholding_tax,"
                    + "police_tax,branch_code,bank_code,pension,disabled,bank_branch,inremental_month,"
                    + "knun_ded,withholding_tax2,directorate,welfare,sacco FROM master_file where employee_no = '" + employeeNumberTxt.getText() + "'");

            while (rset.next()) {

                designationTxt.setText(rset.getString(11));
                departmentNameTxt.setText(rset.getString(12));
                staffNameTxt.setText(dbObject.getDBObject(rset.getObject(2), "") + ""
                        + " " + dbObject.getDBObject(rset.getObject(3), "") + ""
                        + " " + dbObject.getDBObject(rset.getObject(4), ""));

            }
            documentIdentityTxt.setText(employeeNumberTxt.getText() + " : " + staffNameTxt.getText());

        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqe.getMessage());
            System.out.println("Insert not successful");
        }

        employeeSearchDialog.dispose();        // Add your handling code here:
    }//GEN-LAST:event_employeeSearchTableMouseClicked

    private void closeSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeSearchBtnActionPerformed
        this.employeeSearchDialog.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_closeSearchBtnActionPerformed

    private void attachDocsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attachDocsBtnActionPerformed

        if (employeeNumberTxt.getText().length() > 1 && staffNameTxt.getText().length() > 1) {

            //String orderNumber = com.afrisoftech.lib.ProcurementFunctions.getOrderNumber(connectDB, refNoTxt.getText());
            com.afrisoftech.hospinventory.DocumentationIntfr docmanage = new com.afrisoftech.hospinventory.DocumentationIntfr(connectDB, null);

            docmanage.refNotxt.setText(employeeNumberTxt.getText());

            //        docmanage.orderNoTxt.setText(employeeNumberTxt.getText());
            docmanage.docNameTxt.setText(staffNameTxt.getText());

            docmanage.setVisible(true);

            //javax.swing.JInternalFrame dismth = new com.afrisoftech.hospinventory.ReqApprovalIntfr(connectDB);
            com.afrisoftech.hospital.HospitalMain.saccopn.add(docmanage, javax.swing.JLayeredPane.DEFAULT_LAYER);
            try {
                docmanage.setSelected(true);
                docmanage.setSize(com.afrisoftech.hospital.HospitalMain.saccopn.getSize());
                docmanage.setVisible(true);
            } catch (java.beans.PropertyVetoException pvt) {
            }

            //    dispose();
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Please select a employee file!");
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_attachDocsBtnActionPerformed

    private void viewDocumentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDocumentBtnActionPerformed
        if (employeeNumberTxt.getText().length() > 2) {
            File file = null;
            String ref = employeeNumberTxt.getText();
            indexingBodyPanel.removeAll();
            indexingBodyPanel.add(new javax.swing.JPanel());
            // String orderNumber = com.afrisoftech.lib.ProcurementFunctions.getOrderNumber(connectDB, ref);
            file = getStoredPDF(connectDB, ref, null);
            if (file != null) {
                if (n > 0) {
//                    com.afrisoftech.lib.PDFRenderer pdfRenderer = new com.afrisoftech.lib.PDFRenderer();
//                    
//                    pdfRenderer.renderPDF(file, new javax.swing.JPanel());
//                    
////                    com.afrisoftech.lib.PDFRenderer.
//                    javax.swing.JPanel viewerPanels = pdfRenderer.viewerComponentPanel;
                    indexingBodyPanel.removeAll();
                    indexingBodyPanel.add(com.afrisoftech.lib.PDFRenderer.renderPDF1(file, new javax.swing.JPanel()));
                    digitizingTabbedPane.setSelectedIndex(1);

                }
//                dispose();

            }

            // TODO add your handling code here:
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "The document number MUST be set.");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_viewDocumentBtnActionPerformed

    private void clearFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFormBtnActionPerformed
        employeeNumberTxt.setText(null);
        staffNameTxt.setText(null);
        departmentNameTxt.setText(null);
        designationTxt.setText(null);
        // TODO add your handling code here:
    }//GEN-LAST:event_clearFormBtnActionPerformed

    private void indexCloseFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indexCloseFormBtnActionPerformed

        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_indexCloseFormBtnActionPerformed

    private void indexBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_indexBtnActionPerformed

        int currentPageNumber = controller.getCurrentPageNumber() + 1;

        System.out.println("Current page number : [" + currentPageNumber + "]");

        if (documentIdentityTxt.getText().length() > 5 && !folioTypeCmbx.getSelectedItem().toString().equalsIgnoreCase("-")) {
            System.err.println("Inserting------------------");
            try {
                connectDB.setAutoCommit(true);

                java.sql.PreparedStatement pstmtIndex = connectDB.prepareStatement("INSERT INTO public.edms_document_index("
                        + "            document_row_id, document_index_page, "
                        + "            document_id, folio_type)"
                        + "    VALUES (?, ?, "
                        + "            ?, ?)");
                pstmtIndex.setInt(1, documentRowID);
                pstmtIndex.setInt(2, currentPageNumber);
                pstmtIndex.setString(3, employeeNumberTxt.getText());
                pstmtIndex.setString(4, folioTypeCmbx.getSelectedItem().toString());
                pstmtIndex.execute();
                //connectDB.commit();
                javax.swing.JOptionPane.showMessageDialog(this, "Document page indexed successfully.");
            } catch (SQLException ex) {
                ex.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
            }

        } else {

            javax.swing.JOptionPane.showMessageDialog(this, "You MUST set a document identity and folio before proceeding to index.");

        }

        // TODO add your handling code here:
    }//GEN-LAST:event_indexBtnActionPerformed

    private void folioTypeCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_folioTypeCmbxActionPerformed
//        if (employeeNumberTxt.getText().length() > 2) {
//            File file = null;
//            String ref = employeeNumberTxt.getText();
//            indexingBodyPanel.removeAll();
//            indexingBodyPanel.add(new javax.swing.JPanel());
//            // String orderNumber = com.afrisoftech.lib.ProcurementFunctions.getOrderNumber(connectDB, ref);
//            file = getSelectedPagesPDF(connectDB, ref, null);
//            if (file != null) {
//                if (n > 0) {
////                    com.afrisoftech.lib.PDFRenderer pdfRenderer = new com.afrisoftech.lib.PDFRenderer();
////                    
////                    pdfRenderer.renderPDF(file, new javax.swing.JPanel());
////                    
//////                    com.afrisoftech.lib.PDFRenderer.
////                    javax.swing.JPanel viewerPanels = pdfRenderer.viewerComponentPanel;
//                    indexingBodyPanel.removeAll();
//                    indexingBodyPanel.add(com.afrisoftech.lib.PDFRenderer.renderPDF(file, new javax.swing.JPanel()));
//                    digitizingTabbedPane.setSelectedIndex(1);
//
//                }
////                dispose();
//
//            }
//
//            // TODO add your handling code here:
//        } else {
//            javax.swing.JOptionPane.showMessageDialog(null, "The document number/identity and folio MUST be set.");
//        }
        // TODO add your handling code here:
    }//GEN-LAST:event_folioTypeCmbxActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (employeeNumberTxt.getText().length() > 2) {
            File file = null;
            String ref = employeeNumberTxt.getText();
            indexingBodyPanel.removeAll();
            indexingBodyPanel.add(new javax.swing.JPanel());
            // String orderNumber = com.afrisoftech.lib.ProcurementFunctions.getOrderNumber(connectDB, ref);
            file = getSelectedPagesPDF(connectDB, ref, null);

            if (file != null) {
                System.err.println("Fileee --- " + file.getPath());
                if (n > 0) {
//                    com.afrisoftech.lib.PDFRenderer pdfRenderer = new com.afrisoftech.lib.PDFRenderer();
//                    
//                    pdfRenderer.renderPDF(file, new javax.swing.JPanel());
//                    
////                    com.afrisoftech.lib.PDFRenderer.
//                    javax.swing.JPanel viewerPanels = pdfRenderer.viewerComponentPanel;
                    indexingBodyPanel.removeAll();
                    indexingBodyPanel.add(com.afrisoftech.lib.PDFRenderer.renderPDF1(file, new javax.swing.JPanel()));
                    digitizingTabbedPane.setSelectedIndex(1);
                    repaint();

                }
//                dispose();

            }

            // TODO add your handling code here:
        } else {
            javax.swing.JOptionPane.showMessageDialog(null, "The document number/identity and folio MUST be set.");
        }       // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void searchButtonClicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.employeeNumberTxt.getLocationOnScreen();

        employeeSearchDialog.setSize(700, 200);

        employeeSearchDialog.setLocation(point);

        employeeSearchDialog.setVisible(true);

    }

    public java.io.File getStoredPDF(java.sql.Connection connDB, String documentRefNumber, String orderNumber) /*throws FileNotFoundException, DocumentException*/ {
        java.io.File tempFile = null;
        java.io.File tempFile2 = null;
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        try {

            //           tempFile = java.io.File.createTempFile("REP" + com.afrisoftech.lib.DateLables.getDateLabel() + "_", ".pdf");
            tempFile2 = java.io.File.createTempFile("REP" + com.afrisoftech.lib.DateLables.getDateLabel() + "_", ".pdf");

//            tempFile.deleteOnExit();
//            java.io.OutputStream fileIS = null;
////                    fileIS.flush();
//            fileIS = new java.io.FileOutputStream(tempFile);
            com.itextpdf.text.Document document = new com.itextpdf.text.Document();
            // step 2
            com.itextpdf.text.pdf.PdfCopy copy = null;
            try {
                copy = new com.itextpdf.text.pdf.PdfCopy(document, new FileOutputStream(tempFile2));
            } catch (com.itextpdf.text.DocumentException ex) {
                ex.printStackTrace();
                this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
                javax.swing.JOptionPane.showMessageDialog(null, ex.getMessage());
            }
            // step 3
            document.open();
            // step 4
            com.itextpdf.text.pdf.PdfReader reader = null;
            try {
                // java.io.ByteArrayOutputStream byteaStream = new java.io.ByteArrayOutputStream();
                int bytePos = 0;
                java.sql.PreparedStatement pstmtR = null;
                if (orderNumber == null) {
                    pstmtR = connectDB.prepareStatement("SELECT DISTINCT uploaded_file, input_date FROM st_scm_docs  WHERE ref_no = ? ORDER BY 2");
                    pstmtR.setString(1, documentRefNumber);
                } else {
                    pstmtR = connectDB.prepareStatement("SELECT DISTINCT uploaded_file, input_date FROM st_scm_docs  WHERE ref_no = ? AND CASE WHEN document_initials = '' THEN document_initials = '' ELSE document_initials = ? END ORDER BY 2");
                    pstmtR.setString(1, documentRefNumber);
                    pstmtR.setString(2, orderNumber);
                }

                java.sql.ResultSet rs = pstmtR.executeQuery();
                while (rs.next()) {
                    tempFile = java.io.File.createTempFile("REP" + com.afrisoftech.lib.DateLables.getDateLabel() + "_", ".pdf");
                    java.io.OutputStream fileIS = null;
                    tempFile.deleteOnExit();
////                    fileIS.flush();
                    fileIS = new java.io.FileOutputStream(tempFile);
                    java.io.ByteArrayOutputStream byteaStream = new java.io.ByteArrayOutputStream();
                    byte[] imgBytes = rs.getBytes(1);

//                    try {
                    byteaStream.write(imgBytes);
                    //byteaStream.write(imgBytes, bytePos, imgBytes.length); //ite(imgBytes);

                    //bytePos = bytePos + imgBytes.length + 1;
//                    } catch (IOException ex) {
//                        ex.printStackTrace();
//
//                    }
                    fileIS.write(imgBytes);

                    fileIS.close();
                    System.out.println(tempFile.getPath());
                    // this is where i am trying to display the file
                    //  com.afrisoftech.lib.PDFRenderer.renderPDF(tempFile);
                    reader = new com.itextpdf.text.pdf.PdfReader(tempFile.getPath());
                    // loop over the pages in that document
                    n = reader.getNumberOfPages();
                    System.err.println("n-----" + n);
                    for (int page = 0; page < n;) {
                        try {
                            copy.addPage(copy.getImportedPage(reader, ++page));
                        } catch (BadPdfFormatException ex) {
                            ex.printStackTrace();
                            this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
                            javax.swing.JOptionPane.showMessageDialog(null, ex.getMessage());
                        }
                    }
                    copy.freeReader(reader);
                    reader.close();
                    //}

                }

            } catch (SQLException ex) {
                ex.printStackTrace();
                this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
                javax.swing.JOptionPane.showMessageDialog(null, ex.getMessage());

            }

            if (n > 0) {
                document.close();
            } else {
                this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
                javax.swing.JOptionPane.showMessageDialog(null, "The document has no pages.");
            }

        } catch (IOException ex) {
            ex.printStackTrace();
            this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
            javax.swing.JOptionPane.showMessageDialog(null, ex.getMessage());
        }

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        return tempFile2;

    }

    public java.io.File getSelectedPagesPDF(java.sql.Connection connDB, String documentRefNumber, String orderNumber) /*throws FileNotFoundException, DocumentException*/ {
        java.io.File tempFile = null;
        java.io.File tempFile2 = null;
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        try {

            //           tempFile = java.io.File.createTempFile("REP" + com.afrisoftech.lib.DateLables.getDateLabel() + "_", ".pdf");
            tempFile2 = java.io.File.createTempFile("REP" + com.afrisoftech.lib.DateLables.getDateLabel() + "_", ".pdf");

//            tempFile.deleteOnExit();
//            java.io.OutputStream fileIS = null;
////                    fileIS.flush();
//            fileIS = new java.io.FileOutputStream(tempFile);
            com.itextpdf.text.Document document = new com.itextpdf.text.Document();
            // step 2
            com.itextpdf.text.pdf.PdfCopy copy = null;
            try {
                copy = new com.itextpdf.text.pdf.PdfCopy(document, new FileOutputStream(tempFile2));
            } catch (com.itextpdf.text.DocumentException ex) {
                ex.printStackTrace();
                this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
                javax.swing.JOptionPane.showMessageDialog(null, ex.getMessage());
            }
            // step 3
            document.open();
            int ppages = 0;
            // step 4
            com.itextpdf.text.pdf.PdfReader reader = null;
            try {
                // java.io.ByteArrayOutputStream byteaStream = new java.io.ByteArrayOutputStream();
                int bytePos = 0;
                java.sql.PreparedStatement pstmtR = null;
                if (orderNumber == null) {
                    pstmtR = connectDB.prepareStatement("SELECT DISTINCT uploaded_file, input_date FROM st_scm_docs  WHERE ref_no = ? ORDER BY 2");
                    pstmtR.setString(1, documentRefNumber);
                } else {
                    pstmtR = connectDB.prepareStatement("SELECT DISTINCT uploaded_file, input_date FROM st_scm_docs  WHERE ref_no = ? AND CASE WHEN document_initials = '' THEN document_initials = '' ELSE document_initials = ? END ORDER BY 2");
                    pstmtR.setString(1, documentRefNumber);
                    pstmtR.setString(2, orderNumber);
                }

                java.sql.ResultSet rs = pstmtR.executeQuery();
                while (rs.next()) {
                    tempFile = java.io.File.createTempFile("REP" + com.afrisoftech.lib.DateLables.getDateLabel() + "_", ".pdf");
                    java.io.OutputStream fileIS = null;
                    tempFile.deleteOnExit();
////                    fileIS.flush();
                    fileIS = new java.io.FileOutputStream(tempFile);
                    java.io.ByteArrayOutputStream byteaStream = new java.io.ByteArrayOutputStream();
                    byte[] imgBytes = rs.getBytes(1);

//                    try {
                    byteaStream.write(imgBytes);
                    //byteaStream.write(imgBytes, bytePos, imgBytes.length); //ite(imgBytes);

                    //bytePos = bytePos + imgBytes.length + 1;
//                    } catch (IOException ex) {
//                        ex.printStackTrace();
//
//                    }
                    fileIS.write(imgBytes);

                    fileIS.close();
                    System.out.println(tempFile.getPath());
                    // this is where i am trying to display the file
                    //  com.afrisoftech.lib.PDFRenderer.renderPDF(tempFile);
                    reader = new com.itextpdf.text.pdf.PdfReader(tempFile.getPath());
                    // loop over the pages in that document
                    n = reader.getNumberOfPages();
                    System.err.println("n-----" + n);
                    System.err.println("Selected Folio " + folioTypeCmbx.getSelectedItem().toString());
                    for (int page = 1; page <= n; page++) {
                        System.err.println("Pages--------" + n);
                        try {

                            if (folioTypeCmbx.getSelectedItem().equals("-")) {
                                copy.addPage(copy.getImportedPage(reader, page));
                                ppages++;
                            } else {
                                java.sql.PreparedStatement pstmtSelectPages = connectDB.prepareStatement("SELECT DISTINCT document_index_page FROM edms_document_index WHERE document_id = ? AND folio_type = ?");
                                pstmtSelectPages.setString(1, employeeNumberTxt.getText());
                                pstmtSelectPages.setString(2, folioTypeCmbx.getSelectedItem().toString());
                                java.sql.ResultSet rsetSelectedpages = pstmtSelectPages.executeQuery();
                                while (rsetSelectedpages.next()) {
                                    if (page == rsetSelectedpages.getInt(1)) {
                                        System.err.println("Found Page ---- ");
                                        copy.addPage(copy.getImportedPage(reader, page));
                                        ppages++;
                                    }
                                }
                            }

                        } catch (BadPdfFormatException ex) {
                            ex.printStackTrace();
                            this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
                            javax.swing.JOptionPane.showMessageDialog(null, ex.getMessage());
                        }
                    }
                    System.err.println("Done Looping--------");
                    copy.freeReader(reader);
                    reader.close();
                    //}

                }

            } catch (SQLException ex) {
                ex.printStackTrace();
                this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
                javax.swing.JOptionPane.showMessageDialog(null, ex.getMessage());

            }

//            if (n > 0) {
            if (ppages > 0) {
                document.close();
            } else {
                this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
                javax.swing.JOptionPane.showMessageDialog(null, "The document has no pages.");
            }

        } catch (IOException ex) {
            ex.printStackTrace();
            this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
            javax.swing.JOptionPane.showMessageDialog(null, ex.getMessage());
        }

        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        return tempFile2;

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionPanel;
    private javax.swing.JButton attachDocsBtn;
    private javax.swing.JButton clearFormBtn;
    private javax.swing.JButton closeFormBtn;
    private javax.swing.JButton closeSearchBtn;
    private javax.swing.JLabel departmentLbl;
    private javax.swing.JTextField departmentNameTxt;
    private javax.swing.JLabel designationLbl;
    private javax.swing.JTextField designationTxt;
    private javax.swing.JPanel digitizingPanel;
    private javax.swing.JTabbedPane digitizingTabbedPane;
    private javax.swing.JTextField documentIdentityTxt;
    private javax.swing.JTextField employeeNumberTxt;
    private javax.swing.JDialog employeeSearchDialog;
    private javax.swing.JPanel employeeSearchPanel;
    private javax.swing.JScrollPane employeeSearchScrollPane;
    private javax.swing.JTable employeeSearchTable;
    private javax.swing.JTextField employeeSearchTxt;
    private javax.swing.JComboBox<String> folioTypeCmbx;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JButton indexBtn;
    private javax.swing.JButton indexCloseFormBtn;
    private javax.swing.JPanel indexingActionPanel;
    private javax.swing.JPanel indexingBodyPanel;
    private javax.swing.JPanel indexingHeaderPanel;
    private javax.swing.JPanel indexingPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JLabel spacerIndexLable;
    private javax.swing.JLabel spacerLbl;
    private javax.swing.JLabel staffNameLbl;
    private javax.swing.JTextField staffNameTxt;
    private javax.swing.JLabel staffNoLbl;
    private javax.swing.JButton viewDocumentBtn;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the controller
     */
    public org.icepdf.ri.common.SwingController getController() {
        return controller;
    }

    /**
     * @param controller the controller to set
     */
    public void setController(org.icepdf.ri.common.SwingController controller) {
        this.controller = controller;
    }
}
