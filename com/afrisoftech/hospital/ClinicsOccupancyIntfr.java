/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.afrisoftech.hospital;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author funsoft
 */
public class ClinicsOccupancyIntfr extends javax.swing.JInternalFrame {

    /**
     * Creates new form WardOccupancyIntfr
     */
    java.sql.Connection connectDB = null;

    public ClinicsOccupancyIntfr(java.sql.Connection connDB) {

        connectDB = connDB;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        occupationsPanel = new javax.swing.JPanel();
        occupationJScrl = new javax.swing.JScrollPane();
        occupationTable = new com.afrisoftech.dbadmin.JTable(){
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        occupationButtonPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        totalsLabel = new javax.swing.JLabel();
        occupationsHeaderTable = new javax.swing.JPanel();
        clinicsCmbx = new javax.swing.JComboBox();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        datePicker2 = new com.afrisoftech.lib.DatePicker();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        datePicker3 = new com.afrisoftech.lib.DatePicker();
        jLabel5 = new javax.swing.JLabel();
        datePicker4 = new com.afrisoftech.lib.DatePicker();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new com.afrisoftech.dbadmin.JTable();
        View = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        datePicker5 = new com.afrisoftech.lib.DatePicker();
        jLabel7 = new javax.swing.JLabel();
        datePicker6 = new com.afrisoftech.lib.DatePicker();
        View1 = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        bookingsReportTable = new com.afrisoftech.dbadmin.JTable();
        bookedChkbx = new javax.swing.JCheckBox();
        attendedChbx = new javax.swing.JCheckBox();
        cancelledChkbx = new javax.swing.JCheckBox();
        noshowChkbx = new javax.swing.JCheckBox();
        specialtyClinicCmbx = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Clinics Booking Reporting Form");
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        occupationsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Clinic Booking  - Tick on attendance column to confirm attendance then use the confirm button to update list", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11), new java.awt.Color(255, 0, 102))); // NOI18N
        occupationsPanel.setLayout(new java.awt.GridBagLayout());

        occupationJScrl.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(255, 0, 51))); // NOI18N

        occupationTable.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(255, 0, 51))); // NOI18N
        occupationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        occupationJScrl.setViewportView(occupationTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 431;
        gridBagConstraints.ipady = 292;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        occupationsPanel.add(occupationJScrl, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 500.0;
        jPanel1.add(occupationsPanel, gridBagConstraints);

        occupationButtonPanel.setLayout(new java.awt.GridBagLayout());

        jButton1.setMnemonic('U');
        jButton1.setText("Confirm attendance");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        occupationButtonPanel.add(jButton1, gridBagConstraints);

        jButton2.setMnemonic('C');
        jButton2.setText("Clear form");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        occupationButtonPanel.add(jButton2, gridBagConstraints);

        jButton3.setMnemonic('o');
        jButton3.setText("Close form");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        occupationButtonPanel.add(jButton3, gridBagConstraints);

        totalsLabel.setForeground(new java.awt.Color(0, 0, 204));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 200.0;
        gridBagConstraints.weighty = 1.0;
        occupationButtonPanel.add(totalsLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(occupationButtonPanel, gridBagConstraints);

        occupationsHeaderTable.setBorder(javax.swing.BorderFactory.createTitledBorder("Select the clinic name here to bookings generate  report"));
        occupationsHeaderTable.setLayout(new java.awt.GridBagLayout());

        clinicsCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT UPPER(clinic) FROM pb_bookings order by 1"));
        clinicsCmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clinicsCmbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        occupationsHeaderTable.add(clinicsCmbx, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        occupationsHeaderTable.add(datePicker1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        occupationsHeaderTable.add(datePicker2, gridBagConstraints);

        jLabel1.setText("Clinic Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        occupationsHeaderTable.add(jLabel1, gridBagConstraints);

        jLabel2.setText("Start Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        occupationsHeaderTable.add(jLabel2, gridBagConstraints);

        jLabel3.setText("End Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        occupationsHeaderTable.add(jLabel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(occupationsHeaderTable, gridBagConstraints);

        jTabbedPane1.addTab("View Booked Patients", jPanel1);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jLabel4.setText("Start Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jLabel4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel2.add(datePicker3, gridBagConstraints);

        jLabel5.setText("End Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jLabel5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel2.add(datePicker4, gridBagConstraints);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "clinic", "Booked", "Honoured", "No show appointments", "Canceled"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        jPanel2.add(jScrollPane1, gridBagConstraints);

        View.setText("View");
        View.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewActionPerformed(evt);
            }
        });
        jPanel2.add(View, new java.awt.GridBagConstraints());

        jTabbedPane1.addTab("Bookings summary", jPanel2);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jLabel6.setText("Start Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jLabel6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel3.add(datePicker5, gridBagConstraints);

        jLabel7.setText("End Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jLabel7, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel3.add(datePicker6, gridBagConstraints);

        View1.setText("View report");
        View1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                View1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 1;
        jPanel3.add(View1, gridBagConstraints);

        bookingsReportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Patient No.", "Patient Name", "Appointment date", "Telephone No", "Service", "Unit No"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(bookingsReportTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        jPanel3.add(jScrollPane2, gridBagConstraints);

        buttonGroup1.add(bookedChkbx);
        bookedChkbx.setSelected(true);
        bookedChkbx.setText("Booked");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        jPanel3.add(bookedChkbx, gridBagConstraints);

        buttonGroup1.add(attendedChbx);
        attendedChbx.setText("Honoured");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        jPanel3.add(attendedChbx, gridBagConstraints);

        buttonGroup1.add(cancelledChkbx);
        cancelledChkbx.setText("Cancelled");
        cancelledChkbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelledChkbxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        jPanel3.add(cancelledChkbx, gridBagConstraints);

        buttonGroup1.add(noshowChkbx);
        noshowChkbx.setText("No show");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        jPanel3.add(noshowChkbx, gridBagConstraints);

        specialtyClinicCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT distinct UPPER(clinic) FROM pb_bookings ORDER BY 1"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        jPanel3.add(specialtyClinicCmbx, gridBagConstraints);

        jLabel8.setText("Clinic");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel3.add(jLabel8, gridBagConstraints);

        jTabbedPane1.addTab("Booking Lists", jPanel3);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jTabbedPane1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {

            for (int i = 0; i < occupationTable.getRowCount(); i++) {

                if (Boolean.parseBoolean(occupationTable.getValueAt(i, 7).toString())) {
                    String gender = "";
                     String mS = "";
                      int age = 0;
                       String nok = "";
                        String residence = "";
                        String noktel ="";
                    
                    java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("SELECT nok,residence,year_of_birth,tel_no,address,upper(sex) as sex,"
                    + "pay_mode,last_visit,upper(second_name) as other_names, upper(first_name) as surname,emails,id_no,"
                    + "information_source,education_level,occupation, emails, id_no, nok_add, pat_nationality, nok_telno,"
                    + "nok_relationship, nok_residence, nok_email, pat_marital_status, tribe, district, locations,"
                    + "sub_location, chief_name, sub_chief, (current_date-year_of_birth::date)/365 AS age,pat_marital_status FROM hp_patient_register WHERE patient_no ILIKE '" + occupationTable.getValueAt(i, 0).toString() + "'");
            while (rset.next()) {
                residence = rset.getString(2);
                age = rset.getInt("age");
                gender = rset.getString("sex");
                mS = rset.getString("pat_marital_status");
                nok = rset.getString("nok");
                noktel = rset.getString("nok_telno");
            }

                    java.sql.PreparedStatement pstmt21a = connectDB.prepareStatement("INSERT INTO hp_patient_visit("
                            + "patient_no, name, ip_no, payment, visit_no, services, quantity,"
                            + "department, amount, test, date, result, doctor_name, user_name,"
                            + "input_date, transaction_type, nature, time, comments, parameter,"
                            + "status, age, gender, marital_status,clinic, urgency, patient_disability,"
                            + " service_start_time, samaritan_name, samaritan_tel_no, nok_name, nok_tel_no, "
                            + "referral_type, referral_county, referral_facility)"
                            + "VALUES (?, ?, ?, ?, ?, ?, ?,"
                            + "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,"
                            + "?,?,?,?, ?, ?, ?, ?, ?)");
                    pstmt21a.setString(1, occupationTable.getValueAt(i, 0).toString());
                    pstmt21a.setString(2, occupationTable.getValueAt(i, 2).toString());
                    pstmt21a.setString(3, "OP");
                    pstmt21a.setObject(4, "Cash");
                    pstmt21a.setInt(5, 0);
                    pstmt21a.setObject(6, "Clinic booking");
                    pstmt21a.setDouble(7, 1);
                    pstmt21a.setObject(8, clinicsCmbx.getSelectedItem());
                    pstmt21a.setDouble(9, 0.00);
                    pstmt21a.setString(10, residence);
                    pstmt21a.setDate(11, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker4.getDate()));
                    pstmt21a.setDouble(12, 0.00);
                    pstmt21a.setString(13, "");
                    pstmt21a.setString(14, com.afrisoftech.lib.UserName.getUserName(connectDB));
                    pstmt21a.setTimestamp(15, com.afrisoftech.lib.ServerTime.getSQLTimeStamp(connectDB));
                    pstmt21a.setString(16, "Registration");
                    pstmt21a.setString(17, "1");
                    pstmt21a.setInt(18, Integer.parseInt("0"));
                    pstmt21a.setString(19, "Old");
                    
                    pstmt21a.setObject(20, "Booking Office");
                    pstmt21a.setBoolean(21, false);
                    pstmt21a.setDouble(22, age);
                    pstmt21a.setString(23, gender);
                    pstmt21a.setString(24, mS);
                    pstmt21a.setObject(25, clinicsCmbx.getSelectedItem());
                    pstmt21a.setObject(26, "Normal");
                    pstmt21a.setObject(27, "No");
                    pstmt21a.setTimestamp(28, com.afrisoftech.lib.ServerTime.getSQLTimeStamp(connectDB));
//                    if (samaritanChkbx.isSelected()) {
//                        pstmt21a.setObject(29, nokNameTxt.getText());
//                        pstmt21a.setObject(30, nokTelephoneTxt.getText());
                        pstmt21a.setObject(31, null);
                        pstmt21a.setObject(32, null);
//                    } else {
                        pstmt21a.setObject(29, nok);
                        pstmt21a.setObject(30, noktel);
//                        pstmt21a.setObject(31, nokNameTxt.getText());
//                        pstmt21a.setObject(32, nokTelephoneTxt.getText());
//                    }
                    pstmt21a.setObject(33, "");
                    pstmt21a.setObject(34, "");
                    pstmt21a.setObject(35, "");
                    pstmt21a.executeUpdate();

                    java.sql.PreparedStatement pstmtTotal = connectDB.prepareStatement("UPDATE pb_bookings set attended = true WHERE patient_no = ? and appointment_date = ?");

                    pstmtTotal.setString(1, occupationTable.getValueAt(i, 0).toString());

                    pstmtTotal.setDate(2, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));

                    pstmtTotal.executeUpdate();

                }

            }

        } catch (SQLException ex) {

            ex.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());

            Logger.getLogger(WardOccupancyIntfr.class.getName()).log(Level.SEVERE, null, ex);

        }
        
        javax.swing.JOptionPane.showMessageDialog(this, "Confirmation Successful");

        this.clinicsCmbxActionPerformed(evt);

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void clinicsCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clinicsCmbxActionPerformed

        this.occupationTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, unit_no, trim(p_name)as patient_name, service, doctor_req as consultant, patient_source, booking_type, false as Attended FROM pb_bookings WHERE clinic ILIKE '" + this.clinicsCmbx.getSelectedItem().toString() + "' and appointment_date between '" + datePicker1.getDate() + "' and '" + datePicker2.getDate() + "' order by 2"));

        int patientTotal = 0;

        try {

            java.sql.PreparedStatement pstmtTotal = connectDB.prepareStatement("SELECT  count(*) FROM pb_bookings WHERE clinic ILIKE '" + this.clinicsCmbx.getSelectedItem().toString() + "' and appointment_date between '" + datePicker1.getDate() + "' and '" + datePicker2.getDate() + "'");

            java.sql.ResultSet rsetTotal = pstmtTotal.executeQuery();

            while (rsetTotal.next()) {

                patientTotal = rsetTotal.getInt(1);

            }

        } catch (SQLException ex) {

            ex.printStackTrace();

            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());

            Logger.getLogger(WardOccupancyIntfr.class.getName()).log(Level.SEVERE, null, ex);

        }

        this.totalsLabel.setText("Number of appointments for this clinic: " + patientTotal);

        // TODO add your handling code here:
    }//GEN-LAST:event_clinicsCmbxActionPerformed

    private void ViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewActionPerformed
        if (View.isSelected()) {
            jTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, ""
                    + "SELECT distinct  clinics, '' as booked,  '' as honoured, '' as No_show_patients, '' as cancelled FROM pb_clinics order by 1; "));
            try {
                for (int i = 0; i < jTable1.getRowCount(); i++) {

                    java.sql.Statement ps114 = connectDB.createStatement();
                    java.sql.ResultSet rst114 = ps114.executeQuery(" SELECT    count( distinct patient_no)  FROM pb_bookings where appointment_date between '" + datePicker3.getDate() + "' and '" + datePicker4.getDate() + "' and clinic= '" + jTable1.getValueAt(i, 0) + "' ");
                    while (rst114.next()) {
                        jTable1.setValueAt(rst114.getString(1), i, 1);;
                    }

                    rst114 = ps114.executeQuery("SELECT count( distinct hp_patient_visit.patient_no)  FROM hp_patient_visit,pb_bookings where hp_patient_visit.patient_no=pb_bookings.patient_no and appointment_date=date and appointment_date between '" + datePicker3.getDate() + "' and '" + datePicker4.getDate() + "' and pb_bookings.clinic= '" + jTable1.getValueAt(i, 0) + "' ");
                    while (rst114.next()) {
                        jTable1.setValueAt(rst114.getString(1), i, 2);;
                    }

                    rst114 = ps114.executeQuery("SELECT    count(distinct patient_no)  FROM pb_bookings where appointment_date between '" + datePicker3.getDate() + "' and '" + datePicker4.getDate() + "' and cancel=true and clinic= '" + jTable1.getValueAt(i, 0) + "' ");
                    while (rst114.next()) {
                        jTable1.setValueAt(rst114.getString(1), i, 4);;
                    }

                    int noshow = 0;
                    noshow = Integer.valueOf(jTable1.getValueAt(i, 1).toString()) - Integer.valueOf(jTable1.getValueAt(i, 2).toString()) - Integer.valueOf(jTable1.getValueAt(i, 4).toString());
                    jTable1.setValueAt(noshow, i, 3);;
                }
            } catch (java.sql.SQLException sq) {

                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

        }
// TODO add your handling code here:
    }//GEN-LAST:event_ViewActionPerformed

    private void View1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_View1ActionPerformed
        if (View1.isSelected()) {
            if (bookedChkbx.isSelected()) {
                bookingsReportTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT distinct patient_no,p_name,appointment_date,telno, service , unit_no  FROM pb_bookings where clinic ILIKE '" + specialtyClinicCmbx.getSelectedItem().toString() + "' and appointment_date between '" + datePicker5.getDate() + "' and '" + datePicker6.getDate() + "'"));
            }
            if (cancelledChkbx.isSelected()) {
                bookingsReportTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT distinct patient_no,p_name,appointment_date,telno, service , unit_no  FROM pb_bookings where clinic ILIKE '" + specialtyClinicCmbx.getSelectedItem().toString() + "' and appointment_date between '" + datePicker5.getDate() + "' and '" + datePicker6.getDate() + "' and cancel=true"));
            }

            if (attendedChbx.isSelected()) {
                bookingsReportTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, p_name as patient_name, service, quantity, status, booking_date, booking_no, \n"
                        + "       appointment_date,  doctor_req, telno, email, clinic, \n"
                        + "       patient_source, booking_type, type_of_booking, unit_no \n"
                        + "  FROM public.pb_bookings WHERE attended = true AND  appointment_date between '" + datePicker5.getDate() + "' and '" + datePicker6.getDate() + "' and pb_bookings.clinic ILIKE '" + specialtyClinicCmbx.getSelectedItem().toString() + "' ORDER BY 2"));

//        bookingsReportTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB,"SELECT  distinct hp_patient_visit.patient_no ,'' as p_name,'' as appointment_date,'' as  telno,'' as  service , '' as unit_no FROM hp_patient_visit,pb_bookings where hp_patient_visit.patient_no=pb_bookings.patient_no and appointment_date=date and  appointment_date between '"+datePicker5.getDate()+"' and '"+datePicker6.getDate()+"' and pb_bookings.clinic ILIKE '"+specialtyClinicCmbx.getSelectedItem().toString()+"' "));
//    try{
//    java.sql.Statement ps114 = connectDB.createStatement();
//    for(int i=0; i<jTable2.getRowCount();i++){
//                java.sql.ResultSet rst114 = ps114.executeQuery("SELECT p_name as patient_no,appointment_date,telno, service , unit_no  FROM pb_bookings where clinic ILIKE '"+specialtyClinicCmbx.getSelectedItem().toString()+"' and appointment_date between '"+datePicker5.getDate()+"' and '"+datePicker6.getDate()+"' and patient_no='"+jTable2.getValueAt(i, 0)+"'" +
//"");
//                while (rst114.next()) {
//                    jTable2.setValueAt(rst114.getString(1), i, 1);
//                    jTable2.setValueAt(rst114.getString(2), i, 2);
//                    jTable2.setValueAt(rst114.getString(3), i, 3);
//                    jTable2.setValueAt(rst114.getString(4), i, 4);
//                    jTable2.setValueAt(rst114.getString(5), i, 5);
//                    
//                }
//        }
//    }
//        catch(Exception esd){
//            System.out.println("the error is "+esd);
//        }
            }

            if (noshowChkbx.isSelected()) {
                bookingsReportTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT distinct patient_no,'' as p_name,'' as appointment_date,'' as  telno,'' as  service , '' as unit_no   FROM pb_bookings where clinic ILIKE '" + specialtyClinicCmbx.getSelectedItem().toString() + "' and appointment_date between '" + datePicker5.getDate() + "' and '" + datePicker6.getDate() + "' except SELECT  distinct hp_patient_visit.patient_no ,'' as p_name,'' as appointment_date,'' as  telno,'' as  service , '' as unit_no FROM hp_patient_visit,pb_bookings where hp_patient_visit.patient_no=pb_bookings.patient_no and appointment_date=date and   appointment_date between '" + datePicker5.getDate() + "' and '" + datePicker6.getDate() + "' and pb_bookings.clinic ILIKE '" + specialtyClinicCmbx.getSelectedItem().toString() + "' "));
                try {
                    java.sql.Statement ps114 = connectDB.createStatement();
                    for (int i = 0; i < bookingsReportTable.getRowCount(); i++) {
                        java.sql.ResultSet rst114 = ps114.executeQuery("(SELECT p_name,appointment_date,telno, service , unit_no  FROM pb_bookings where clinic ILIKE '" + specialtyClinicCmbx.getSelectedItem().toString() + "' and appointment_date between '" + datePicker5.getDate() + "' and '" + datePicker6.getDate() + "' and patient_no='" + bookingsReportTable.getValueAt(i, 0) + "')"
                                + "");
                        while (rst114.next()) {
                            bookingsReportTable.setValueAt(rst114.getString(1), i, 1);
                            bookingsReportTable.setValueAt(rst114.getString(2), i, 2);
                            bookingsReportTable.setValueAt(rst114.getString(3), i, 3);
                            bookingsReportTable.setValueAt(rst114.getString(4), i, 4);
                            bookingsReportTable.setValueAt(rst114.getString(5), i, 5);

                        }
                    }
                } catch (Exception esd) {
                    System.out.println("the error is " + esd);
                }

            }

        }

// TODO add your handling code here:
    }//GEN-LAST:event_View1ActionPerformed

    private void cancelledChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelledChkbxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cancelledChkbxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox View;
    private javax.swing.JCheckBox View1;
    private javax.swing.JCheckBox attendedChbx;
    private javax.swing.JCheckBox bookedChkbx;
    private javax.swing.JTable bookingsReportTable;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox cancelledChkbx;
    private javax.swing.JComboBox clinicsCmbx;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private com.afrisoftech.lib.DatePicker datePicker2;
    private com.afrisoftech.lib.DatePicker datePicker3;
    private com.afrisoftech.lib.DatePicker datePicker4;
    private com.afrisoftech.lib.DatePicker datePicker5;
    private com.afrisoftech.lib.DatePicker datePicker6;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JCheckBox noshowChkbx;
    private javax.swing.JPanel occupationButtonPanel;
    private javax.swing.JScrollPane occupationJScrl;
    private javax.swing.JTable occupationTable;
    private javax.swing.JPanel occupationsHeaderTable;
    private javax.swing.JPanel occupationsPanel;
    private javax.swing.JComboBox specialtyClinicCmbx;
    private javax.swing.JLabel totalsLabel;
    // End of variables declaration//GEN-END:variables
}
