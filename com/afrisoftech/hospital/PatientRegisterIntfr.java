/*
 * PatientRegisterIntfr.java
 *
 * Created on August 13, 2002, 3:24 PM
 *
 * This class represents a patient's profile.
 *
 */
package com.afrisoftech.hospital;

//import java.sql.SQLException;
//import au.com.southsky.jfreesane.SaneException;
import biz.systempartners.claims.XMLClaimFile;
import static com.afrisoftech.hospital.HospitalMain.connectDB;
import static com.afrisoftech.hospital.HospitalMain.saccopn;
import com.afrisoftech.lib.DBObject;
//import com.afrisoftech.lib.DBObject;
import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeEvent;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.net.UnknownHostException;
import java.sql.Date;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
//import org.openide.util.Exceptions;

/**
 *
 * @author Charles Wanjema Waweru <cwaweru@systempartners.biz>, Francis King'oi
 * Waweru <francis@systempartners.biz>, Peter Ndung'u Waweru
 * <pndung'u@systempartners.biz>
 *
 */
public class PatientRegisterIntfr extends javax.swing.JInternalFrame {

    com.afrisoftech.lib.DBObject dbObject;
    /**
     * Creates new form banksintfr
     */
    javax.swing.table.TableModel tableModel = null;
    java.sql.Connection connectDB = null;
    private java.lang.String shift_no = null;
    javax.swing.ComboBoxModel mainComboBoxModel;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;
    private final javax.swing.JTextField comboTextField = new javax.swing.JTextField();
    javax.swing.ComboBoxModel oldComboBox6Model;
    boolean panel5Showing = false;
    private java.lang.String cash_no = null;
    String nhifStatusTxt = null;
    String cashPoint = null;
    String receiptNo1 = null;
    public static String receiptNo2 = null;
    private boolean manualNo;
    private boolean autonumber;
    java.lang.String visitID = null;
    Boolean reVisit = false;
    private boolean inpatientActivation = false;
    private String patientNo = null;
    String selectedchkbx = null;
    //   javax.swing.JSpinner beginDateSpinner = null;
    private String nhifStatus;
    private String selectedStatus = null;
    private String selectedStatusgender = null;
    String interviewer = null;
    com.github.sarxos.webcam.Webcam webcam = null;
    WebcamPanel panel = null;
    private Executor executor = Executors.newSingleThreadExecutor();
    private Dimension captureSize = WebcamResolution.VGA.getSize();
    private Dimension displaySize = WebcamResolution.QQVGA.getSize();
    java.sql.Timestamp serviceStartTime = null;
    File imageFile = null;
    String defaultServicePoint = null;

    public PatientRegisterIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();

        dbObject = new com.afrisoftech.lib.DBObject();
        branchTxt.setText(getCashPoint());
        jTextField22.setText(getShiftNumber());
        this.initializeWebCam();
        // panel.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     *
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        patientSearchbtnGrp = new javax.swing.ButtonGroup();
        patientSearchDialog = new javax.swing.JDialog();
        patientSearchMainPanel = new javax.swing.JPanel();
        patientSearchTxt = new javax.swing.JTextField();
        patientSearchJscrl = new javax.swing.JScrollPane();
        patientSearchTable = new com.afrisoftech.dbadmin.JTable();
        dispose = new javax.swing.JButton();
        jSearchDialog1 = new javax.swing.JDialog();
        jSearchPanel1 = new javax.swing.JPanel();
        jTextField111 = new javax.swing.JTextField();
        jSearchScrollPane1 = new javax.swing.JScrollPane();
        jSearchTable1 = new com.afrisoftech.dbadmin.JTable();
        dispose1 = new javax.swing.JButton();
        jSearchDialog2 = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        jTextField112 = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        jSearchTable2 = new com.afrisoftech.dbadmin.JTable();
        select2 = new javax.swing.JButton();
        dispose2 = new javax.swing.JButton();
        jDialog31 = new javax.swing.JDialog();
        //jDialog3.setSize(600,400);
        jPanel121 = new javax.swing.JPanel();
        jPanel1111 = new javax.swing.JPanel();
        jLabel66111 = new javax.swing.JLabel();
        jTextField14111 = new javax.swing.JTextField();
        jLabel3111 = new javax.swing.JLabel();
        jTextField4111 = new javax.swing.JTextField();
        jPanel31 = new javax.swing.JPanel();
        jLabel582211 = new javax.swing.JLabel();
        jLabel5821111 = new javax.swing.JLabel();
        jTextField3111 = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jTextField1611 = new javax.swing.JTextField();
        searchButton13 = new javax.swing.JButton();
        jTextField10 = new javax.swing.JTextField();
        jSeparator111 = new javax.swing.JSeparator();
        jButton301111 = new javax.swing.JButton();
        jButton252111 = new javax.swing.JButton();
        jButton1111 = new javax.swing.JButton();
        jSearchDialog11 = new javax.swing.JDialog();
        jSearchPanel11 = new javax.swing.JPanel();
        jTextField1111 = new javax.swing.JTextField();
        jSearchScrollPane11 = new javax.swing.JScrollPane();
        jSearchTable11 = new com.afrisoftech.dbadmin.JTable();
        dispose11 = new javax.swing.JButton();
        jSearchDialog111 = new javax.swing.JDialog();
        jSearchPanel111 = new javax.swing.JPanel();
        jTextField11111 = new javax.swing.JTextField();
        jSearchScrollPane111 = new javax.swing.JScrollPane();
        jSearchTable111 = new com.afrisoftech.dbadmin.JTable();
        dispose111 = new javax.swing.JButton();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        jSearchDialog3 = new javax.swing.JDialog();
        jSearchPanel3 = new javax.swing.JPanel();
        jTextField1112 = new javax.swing.JTextField();
        jSearchScrollPane3 = new javax.swing.JScrollPane();
        jSearchTable3 = new com.afrisoftech.dbadmin.JTable();
        jButton51 = new javax.swing.JButton();
        buttonGroup6 = new javax.swing.ButtonGroup();
        diseaseDialog = new javax.swing.JDialog();
        jSearchPanel4 = new javax.swing.JPanel();
        diseaseSearchTxt = new javax.swing.JTextField();
        diseaseSearchScrollPane = new javax.swing.JScrollPane();
        diseaseSearchTable = new com.afrisoftech.dbadmin.JTable();
        disposeDiseaseSearchBtn = new javax.swing.JButton();
        diseaseSearchBtngrp = new javax.swing.ButtonGroup();
        jSearchDialog4 = new javax.swing.JDialog();
        jSearchPanel5 = new javax.swing.JPanel();
        jTextField28 = new javax.swing.JTextField();
        jSearchScrollPane4 = new javax.swing.JScrollPane();
        jSearchTable4 = new com.afrisoftech.dbadmin.JXTable();
        dispose3 = new javax.swing.JButton();
        ageTxt = new javax.swing.JTextField();
        facilitySearchDialog = new javax.swing.JDialog();
        facilitySearchMainPanel = new javax.swing.JPanel();
        facilitySearchTxt = new javax.swing.JTextField();
        facilitySearchJscrl = new javax.swing.JScrollPane();
        facilitySearchTable = new com.afrisoftech.dbadmin.JTable();
        dispose4 = new javax.swing.JButton();
        nokbuttonGroup = new javax.swing.ButtonGroup();
        fingerPrintDialog = new javax.swing.JDialog();
        fingerprintIconLabel = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        headerPanel = new javax.swing.JPanel();
        searchbyNumberChkbx = new javax.swing.JCheckBox();
        searchbyNameChkbx = new javax.swing.JCheckBox();
        createNewFileRbtn = new javax.swing.JRadioButton();
        revisitRbtn = new javax.swing.JRadioButton();
        jLabel13 = new javax.swing.JLabel();
        patientCategoryCmbx = new javax.swing.JComboBox();
        jLabel23 = new javax.swing.JLabel();
        datePicker4 = new com.afrisoftech.lib.DatePicker();
        createOldFileRbtn = new javax.swing.JRadioButton();
        jTextField22 = new javax.swing.JTextField();
        jRadioButton2 = new javax.swing.JRadioButton();
        datePicker2 = new com.afrisoftech.lib.DatePicker();
        jLabel54 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jCheckBox9 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();
        jTextField9 = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        cardsSoldTxt = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        filesSoldTxt = new javax.swing.JTextField();
        billindDetailsTabbedPane = new javax.swing.JTabbedPane();
        bioDataPanel = new javax.swing.JPanel();
        patientSearchPanel = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        surNameTxt = new javax.swing.JTextField();
        firstNameTxt = new javax.swing.JTextField();
        jLabel582 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jPanel4111 = new javax.swing.JPanel();
        jCheckBox1111 = new javax.swing.JCheckBox();
        jCheckBox2111 = new javax.swing.JCheckBox();
        jLabel27 = new javax.swing.JLabel();
        maritalStatusesPanel = new javax.swing.JPanel();
        jCheckBox1113 = new javax.swing.JCheckBox();
        jCheckBox2113 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox11 = new javax.swing.JCheckBox();
        dateofLastVisitLbl = new javax.swing.JLabel();
        dateofLastVisitTxt = new javax.swing.JTextField();
        ageLbl = new javax.swing.JLabel();
        specialtyClinicLbl = new javax.swing.JLabel();
        specialtyClinicCmbx = new javax.swing.JComboBox();
        cSheetNoLbl = new javax.swing.JLabel();
        cSheetNoTxt = new javax.swing.JTextField();
        urgencyCMBX = new javax.swing.JComboBox();
        jLabel57 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        ageLabel = new javax.swing.JLabel();
        dateofBirthPanel = new javax.swing.JPanel();
        jLabel66 = new javax.swing.JLabel();
        datePickerYOB = new com.afrisoftech.lib.DatePicker();
        jLabel3 = new javax.swing.JLabel();
        ageYrsTxt = new javax.swing.JFormattedTextField();
        jLabel60 = new javax.swing.JLabel();
        disabilityCmbx = new javax.swing.JComboBox();
        otherDetailsPanel = new javax.swing.JPanel();
        physicalResidenceLbl = new javax.swing.JLabel();
        residenceTxt = new javax.swing.JTextField();
        nokDetails = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        idNoLbl2 = new javax.swing.JLabel();
        nokResidenceTxt = new javax.swing.JTextField();
        NokEmailLbl = new javax.swing.JLabel();
        emailAddTxt1 = new javax.swing.JTextField();
        jTextField20 = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        idNoLbl3 = new javax.swing.JLabel();
        nokTelephoneTxt = new javax.swing.JTextField();
        nokNameTxt = new javax.swing.JTextField();
        nokRelationShipCmbx = new javax.swing.JComboBox();
        nokChkbx = new javax.swing.JCheckBox();
        samaritanChkbx = new javax.swing.JCheckBox();
        referredFromLbl = new javax.swing.JLabel();
        unitNumberLbl = new javax.swing.JLabel();
        oldFileNumberTxt = new javax.swing.JTextField();
        referralTypeCmbx = new javax.swing.JComboBox();
        clinicNumberLbl = new javax.swing.JLabel();
        clinicNumberTxt = new javax.swing.JTextField();
        registrationPointLbl = new javax.swing.JLabel();
        servicePointCmbx = new javax.swing.JComboBox();
        placeofBirthLbl = new javax.swing.JLabel();
        placeOfBirthTxt = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        referralCountyCmbx = new javax.swing.JComboBox();
        referralCountyLbl = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        referralFacilityNameTxt = new javax.swing.JTextField();
        searchButton4 = new javax.swing.JButton();
        otherPatientDetailsPanel = new javax.swing.JPanel();
        nhifChbx = new javax.swing.JCheckBox();
        jLabel51 = new javax.swing.JLabel();
        nhifNumberTxt = new javax.swing.JTextField();
        idNoLbl = new javax.swing.JLabel();
        idPassportTxt = new javax.swing.JTextField();
        passPortNoLbl = new javax.swing.JLabel();
        emailAddTxt = new javax.swing.JTextField();
        jLabel5722 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jTextField5821 = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        locationTxt = new javax.swing.JTextField();
        currentResidenceTxt = new javax.swing.JTextField();
        countyofBirthLbl = new javax.swing.JLabel();
        residenceCountyLbl = new javax.swing.JLabel();
        idNoLbl1 = new javax.swing.JLabel();
        nationalityCmbx = new javax.swing.JComboBox();
        countyofBirthCmbx = new javax.swing.JComboBox();
        countyofResidenceCmbx = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel61 = new javax.swing.JLabel();
        informationSourceCmbx = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        educationLevelCmbx = new javax.swing.JComboBox();
        jLabel35 = new javax.swing.JLabel();
        occupationCmbx = new javax.swing.JComboBox();
        jLabel38 = new javax.swing.JLabel();
        religionCmbx = new javax.swing.JComboBox();
        nhifPanel = new javax.swing.JPanel();
        jLabel52 = new javax.swing.JLabel();
        employerTxt = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        employerTelTxt = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextField19 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        districtCmbx = new javax.swing.JComboBox();
        jLabel33 = new javax.swing.JLabel();
        jTextField25 = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        jTextField26 = new javax.swing.JTextField();
        insuranceDetailsPanel = new javax.swing.JPanel();
        insurerDetailsPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jPanel64 = new javax.swing.JPanel();
        jTextField36 = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jTextField13 = new javax.swing.JTextField();
        jPanel641 = new javax.swing.JPanel();
        jTextField361 = new javax.swing.JTextField();
        searchButton2 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jTextField18 = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jTextField12 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jTextField15 = new javax.swing.JTextField();
        cardSerialNoLbl = new javax.swing.JLabel();
        cardSerialNoTxt = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jTextField17 = new javax.swing.JTextField();
        creditCardDetailsPanel = new javax.swing.JPanel();
        cardDetailsPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jTextField7 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        rtaPanel = new javax.swing.JPanel();
        rtaMainPanel = new javax.swing.JPanel();
        rtaTypeOfAccidentLbl = new javax.swing.JLabel();
        rtaModeofArrivalLbl = new javax.swing.JLabel();
        typeofAccidentCmbx = new javax.swing.JComboBox();
        modeofArrivalCmbx = new javax.swing.JComboBox();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        nameofPoliceOfficerTxt = new javax.swing.JTextField();
        policeStationTxt = new javax.swing.JTextField();
        policeForceNumberTxt = new javax.swing.JTextField();
        accidentVehicleNumberTxt = new javax.swing.JTextField();
        accidentDriverIDTxt = new javax.swing.JTextField();
        driverNameTxt = new javax.swing.JTextField();
        accidentDriverLicenseTxt = new javax.swing.JTextField();
        accidentTimeDateSpinner = new javax.swing.JSpinner();
        rtaButtonPanel = new javax.swing.JPanel();
        rtaSpacerLbl = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        diagnosisPanel = new javax.swing.JPanel();
        diagnosisTPane = new javax.swing.JPanel();
        diseaseChooserPanel = new javax.swing.JPanel();
        diseaseFieldTxt = new javax.swing.JTextField();
        searchButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        diseaseTbl = new com.afrisoftech.dbadmin.JTable();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        diseaseSearchCodeRbtn = new javax.swing.JRadioButton();
        diseaseSearchDescriptionRbtn = new javax.swing.JRadioButton();
        diagnosisActionsPanel = new javax.swing.JPanel();
        diagnosisBtn = new javax.swing.JButton();
        spacerLbl = new javax.swing.JLabel();
        closeBtn = new javax.swing.JButton();
        reportsPanel = new javax.swing.JPanel();
        reportsHeaderPanel = new javax.swing.JPanel();
        startDatePicker = new com.afrisoftech.lib.DatePicker();
        endDatePicker = new com.afrisoftech.lib.DatePicker();
        patientSpecialityCmbx = new javax.swing.JComboBox();
        reportsMainPanel = new javax.swing.JPanel();
        reportsScrollPane = new javax.swing.JScrollPane();
        reportsTable = new com.afrisoftech.dbadmin.JXTable();
        reportsActionPanel = new javax.swing.JPanel();
        refreshBtn = new javax.swing.JButton();
        reportsHelpBtn = new javax.swing.JButton();
        reportsSpacerLbl = new javax.swing.JLabel();
        mapsPanel = new javax.swing.JPanel();
        mapPanel1 = new com.roots.map.MapPanel();
        previousPanel = new javax.swing.JPanel();
        previousVisitsScrollPane = new javax.swing.JScrollPane();
        previousVisitsTable = new com.afrisoftech.dbadmin.JXTable();
        payModePanel = new javax.swing.JPanel();
        branchTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanel61 = new javax.swing.JPanel();
        jTextField3611 = new javax.swing.JTextField();
        searchButton11 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        paymentModeCmbx = new javax.swing.JComboBox();
        jPanel6 = new javax.swing.JPanel();
        patientNumberTxt = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        jLabel572 = new javax.swing.JLabel();
        registrationStatusLbl = new javax.swing.JLabel();
        buttonPanel = new javax.swing.JPanel();
        saveRegistrationBtn = new javax.swing.JButton();
        savePrintRegistrationBtn = new javax.swing.JButton();
        editFileBtn = new javax.swing.JButton();
        clearFieldsBtn = new javax.swing.JButton();
        closeFormBtn = new javax.swing.JButton();
        helpBtn = new javax.swing.JButton();
        readSmartCardBtn = new javax.swing.JButton();
        reprintFileBtn = new javax.swing.JButton();
        scanDocumentBtn = new javax.swing.JButton();
        bookingBtn = new javax.swing.JButton();
        webCameraPanel = new javax.swing.JPanel();
        webCamPanel =  new javax.swing.JPanel();
        startBtn = new javax.swing.JButton(new StartAction());
        takeSnapBtn = new javax.swing.JButton();
        fingerPrintReaderBtn = new javax.swing.JButton();

        patientSearchDialog.setUndecorated(true);
        patientSearchDialog.setResizable(false);
        patientSearchDialog.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                patientSearchDialogComponentHidden(evt);
            }
        });
        patientSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

        patientSearchMainPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        patientSearchMainPanel.setLayout(new java.awt.GridBagLayout());

        patientSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                patientSearchTxtCaretUpdate(evt);
            }
        });
        patientSearchTxt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                patientSearchTxtFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        patientSearchMainPanel.add(patientSearchTxt, gridBagConstraints);

        patientSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
        patientSearchTable.setShowHorizontalLines(false);
        /*int rowsNo = 0;
        //try {

            crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

            crset1.setConnectionSource(pConnDB);

            // try {
                //crset1.execute();

                // crset2.setExecuteOnLoad(true);
                patientSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                    new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                    new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

                }));

                tableModel = patientSearchTable.getModel();

                patientSearchJscrl.setViewportView(patientSearchTable);

                /*   }catch(java.sql.SQLException sqlex){
                javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                System.out.println(sqlex.getMessage());

            }

            javax.swing.table.TableColumn column = null;

            for (int i = 0; i < 4; i++) {

                column = patientSearchTable.getColumnModel().getColumn(i);

                if (i == 1) {

                    column.setPreferredWidth(400);
                    //sport column is bigger
                } else {

                    column.setPreferredWidth(200);

                }
            }*/
            patientSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    patientSearchTableMouseClicked(evt);
                }
            });
            patientSearchJscrl.setViewportView(patientSearchTable);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            patientSearchMainPanel.add(patientSearchJscrl, gridBagConstraints);

            dispose.setText("Cancel");
            dispose.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    disposeActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            patientSearchMainPanel.add(dispose, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            patientSearchDialog.getContentPane().add(patientSearchMainPanel, gridBagConstraints);

            jSearchDialog1.setUndecorated(true);
            jSearchDialog1.getContentPane().setLayout(new java.awt.GridBagLayout());

            jSearchPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jSearchPanel1.setLayout(new java.awt.GridBagLayout());

            jTextField111.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    jTextField111CaretUpdate(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 300.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
            jSearchPanel1.add(jTextField111, gridBagConstraints);

            jSearchTable1.setToolTipText("Click on the target row to select the patient from the search.");
            jSearchTable1.setShowHorizontalLines(false);
            /*int rowsNo = 0;
            //try {

                crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

                crset1.setConnectionSource(pConnDB);

                // try {
                    //crset1.execute();

                    // crset2.setExecuteOnLoad(true);
                    patientSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                        new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                        new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                        new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                        new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

                    }));

                    tableModel = patientSearchTable.getModel();

                    patientSearchJscrl.setViewportView(patientSearchTable);

                    /*   }catch(java.sql.SQLException sqlex){
                    javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                    System.out.println(sqlex.getMessage());

                }

                javax.swing.table.TableColumn column = null;

                for (int i = 0; i < 4; i++) {

                    column = patientSearchTable.getColumnModel().getColumn(i);

                    if (i == 1) {

                        column.setPreferredWidth(400);
                        //sport column is bigger
                    } else {

                        column.setPreferredWidth(200);

                    }
                }*/
                jSearchTable1.addMouseListener(new java.awt.event.MouseAdapter() {
                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                        jSearchTable1MouseClicked(evt);
                    }
                });
                jSearchScrollPane1.setViewportView(jSearchTable1);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 20.0;
                jSearchPanel1.add(jSearchScrollPane1, gridBagConstraints);

                dispose1.setMnemonic('l');
                dispose1.setText("Close");
                dispose1.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        dispose1ActionPerformed(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jSearchPanel1.add(dispose1, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 1.0;
                jSearchDialog1.getContentPane().add(jSearchPanel1, gridBagConstraints);

                jSearchDialog2.setUndecorated(true);
                jSearchDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

                jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                jSearchPanel2.setLayout(new java.awt.GridBagLayout());

                jTextField112.addCaretListener(new javax.swing.event.CaretListener() {
                    public void caretUpdate(javax.swing.event.CaretEvent evt) {
                        jTextField112CaretUpdate(evt);
                    }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 300.0;
                gridBagConstraints.weighty = 1.0;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
                jSearchPanel2.add(jTextField112, gridBagConstraints);

                jSearchTable2.setToolTipText("Click on the target row to select the patient from the search.");
                jSearchTable2.setShowHorizontalLines(false);
                /*int rowsNo = 0;
                //try {

                    crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

                    crset1.setConnectionSource(pConnDB);

                    // try {
                        //crset1.execute();

                        // crset2.setExecuteOnLoad(true);
                        patientSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                            new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                            new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                            new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                            new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

                        }));

                        tableModel = patientSearchTable.getModel();

                        patientSearchJscrl.setViewportView(patientSearchTable);

                        /*   }catch(java.sql.SQLException sqlex){
                        javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                        System.out.println(sqlex.getMessage());

                    }

                    javax.swing.table.TableColumn column = null;

                    for (int i = 0; i < 4; i++) {

                        column = patientSearchTable.getColumnModel().getColumn(i);

                        if (i == 1) {

                            column.setPreferredWidth(400);
                            //sport column is bigger
                        } else {

                            column.setPreferredWidth(200);

                        }
                    }*/
                    jSearchTable2.addMouseListener(new java.awt.event.MouseAdapter() {
                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                            jSearchTable2MouseClicked(evt);
                        }
                    });
                    jSearchScrollPane2.setViewportView(jSearchTable2);

                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 1;
                    gridBagConstraints.gridwidth = 3;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 1.0;
                    gridBagConstraints.weighty = 20.0;
                    jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

                    select2.setText("Select");
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.gridy = 0;
                    gridBagConstraints.weightx = 1.0;
                    gridBagConstraints.weighty = 1.0;
                    jSearchPanel2.add(select2, gridBagConstraints);

                    dispose2.setText("Close");
                    dispose2.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            dispose2ActionPerformed(evt);
                        }
                    });
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 2;
                    gridBagConstraints.gridy = 0;
                    gridBagConstraints.weightx = 1.0;
                    gridBagConstraints.weighty = 1.0;
                    jSearchPanel2.add(dispose2, gridBagConstraints);

                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 1;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 1.0;
                    gridBagConstraints.weighty = 1.0;
                    jSearchDialog2.getContentPane().add(jSearchPanel2, gridBagConstraints);

                    jDialog31.setTitle("Enter Doctors Fee");
                    jDialog31.setResizable(false);
                    jDialog31.setSize(400,200);
                    jDialog31.getContentPane().setLayout(new java.awt.GridBagLayout());

                    jPanel121.setLayout(new java.awt.GridBagLayout());

                    jPanel1111.setBackground(new java.awt.Color(130, 232, 255));
                    jPanel1111.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter Doctor's details here"));
                    jPanel1111.setLayout(new java.awt.GridBagLayout());

                    jLabel66111.setText("Amount");
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 2;
                    gridBagConstraints.gridy = 2;
                    jPanel1111.add(jLabel66111, gridBagConstraints);

                    jTextField14111.setEditable(false);
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 3;
                    gridBagConstraints.gridy = 2;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                    gridBagConstraints.weightx = 1.0;
                    gridBagConstraints.weighty = 1.0;
                    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                    jPanel1111.add(jTextField14111, gridBagConstraints);

                    jLabel3111.setText("Category");
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 2;
                    gridBagConstraints.gridy = 1;
                    gridBagConstraints.weightx = 1.0;
                    jPanel1111.add(jLabel3111, gridBagConstraints);

                    jTextField4111.setEditable(false);
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 3;
                    gridBagConstraints.gridy = 1;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                    gridBagConstraints.weightx = 1.0;
                    gridBagConstraints.weighty = 1.0;
                    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                    jPanel1111.add(jTextField4111, gridBagConstraints);

                    jPanel31.setBackground(new java.awt.Color(204, 204, 255));
                    jPanel31.setLayout(new java.awt.GridBagLayout());

                    jLabel582211.setText("Doctor's No.");
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 1;
                    gridBagConstraints.weightx = 1.0;
                    gridBagConstraints.weighty = 1.0;
                    jPanel31.add(jLabel582211, gridBagConstraints);

                    jLabel5821111.setText("Doc. Name");
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 2;
                    gridBagConstraints.weightx = 1.0;
                    gridBagConstraints.weighty = 1.0;
                    jPanel31.add(jLabel5821111, gridBagConstraints);

                    jTextField3111.setEditable(false);
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.gridy = 2;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                    gridBagConstraints.weightx = 4.0;
                    gridBagConstraints.weighty = 1.0;
                    jPanel31.add(jTextField3111, gridBagConstraints);

                    jPanel4.setLayout(new java.awt.GridBagLayout());

                    jTextField1611.setEditable(false);
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.gridy = 1;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                    gridBagConstraints.weightx = 1.0;
                    gridBagConstraints.weighty = 1.0;
                    jPanel4.add(jTextField1611, gridBagConstraints);

                    searchButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
                    searchButton13.setToolTipText("Search");
                    searchButton13.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                    searchButton13.setMaximumSize(new java.awt.Dimension(74, 53));
                    searchButton13.setMinimumSize(new java.awt.Dimension(74, 53));
                    searchButton13.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                    searchButton13.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            searchButton13ActionPerformed(evt);
                        }
                    });
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 2;
                    gridBagConstraints.gridy = 1;
                    jPanel4.add(searchButton13, gridBagConstraints);

                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 1;
                    gridBagConstraints.gridy = 1;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                    gridBagConstraints.weightx = 1.0;
                    gridBagConstraints.weighty = 1.0;
                    jPanel31.add(jPanel4, gridBagConstraints);

                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 1;
                    gridBagConstraints.gridwidth = 2;
                    gridBagConstraints.gridheight = 5;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 2.0;
                    gridBagConstraints.weighty = 1.0;
                    jPanel1111.add(jPanel31, gridBagConstraints);

                    jTextField10.setPreferredSize(new java.awt.Dimension(0, 0));
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                    gridBagConstraints.weightx = 1.0;
                    jPanel1111.add(jTextField10, gridBagConstraints);

                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 1;
                    gridBagConstraints.gridwidth = 5;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
                    gridBagConstraints.weightx = 5.0;
                    gridBagConstraints.weighty = 10.0;
                    gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
                    jPanel121.add(jPanel1111, gridBagConstraints);
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 4;
                    gridBagConstraints.gridwidth = 6;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                    gridBagConstraints.weightx = 1.0;
                    gridBagConstraints.weighty = 1.0;
                    jPanel121.add(jSeparator111, gridBagConstraints);

                    jButton301111.setMnemonic('O');
                    jButton301111.setText("Ok");
                    jButton301111.setToolTipText("Click here to enter data");
                    jButton301111.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            jButton301111ActionPerformed(evt);
                        }
                    });
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 10;
                    gridBagConstraints.weightx = 1.0;
                    gridBagConstraints.weighty = 1.0;
                    jPanel121.add(jButton301111, gridBagConstraints);

                    jButton252111.setMnemonic('c');
                    jButton252111.setText("Close");
                    jButton252111.setToolTipText("Click here to close window");
                    jButton252111.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            jButton252111ActionPerformed(evt);
                        }
                    });
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 3;
                    gridBagConstraints.gridy = 10;
                    gridBagConstraints.weightx = 1.0;
                    gridBagConstraints.weighty = 1.0;
                    jPanel121.add(jButton252111, gridBagConstraints);

                    jButton1111.setMnemonic('h');
                    jButton1111.setText("Help");
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 4;
                    gridBagConstraints.gridy = 10;
                    gridBagConstraints.weightx = 1.0;
                    gridBagConstraints.weighty = 1.0;
                    jPanel121.add(jButton1111, gridBagConstraints);

                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                    gridBagConstraints.weightx = 1.0;
                    gridBagConstraints.weighty = 1.0;
                    jDialog31.getContentPane().add(jPanel121, gridBagConstraints);

                    jSearchDialog11.setUndecorated(true);
                    jSearchDialog11.getContentPane().setLayout(new java.awt.GridBagLayout());

                    jSearchPanel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                    jSearchPanel11.setLayout(new java.awt.GridBagLayout());

                    jTextField1111.addCaretListener(new javax.swing.event.CaretListener() {
                        public void caretUpdate(javax.swing.event.CaretEvent evt) {
                            jTextField1111CaretUpdate(evt);
                        }
                    });
                    gridBagConstraints = new java.awt.GridBagConstraints();
                    gridBagConstraints.gridx = 0;
                    gridBagConstraints.gridy = 0;
                    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                    gridBagConstraints.weightx = 300.0;
                    gridBagConstraints.weighty = 1.0;
                    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
                    jSearchPanel11.add(jTextField1111, gridBagConstraints);

                    jSearchTable11.setToolTipText("Click on the target row to select the patient from the search.");
                    jSearchTable11.setShowHorizontalLines(false);
                    /*int rowsNo = 0;
                    //try {

                        crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

                        crset1.setConnectionSource(pConnDB);

                        // try {
                            //crset1.execute();

                            // crset2.setExecuteOnLoad(true);
                            patientSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                                new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                                new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                                new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                                new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

                            }));

                            tableModel = patientSearchTable.getModel();

                            patientSearchJscrl.setViewportView(patientSearchTable);

                            /*   }catch(java.sql.SQLException sqlex){
                            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                            System.out.println(sqlex.getMessage());

                        }

                        javax.swing.table.TableColumn column = null;

                        for (int i = 0; i < 4; i++) {

                            column = patientSearchTable.getColumnModel().getColumn(i);

                            if (i == 1) {

                                column.setPreferredWidth(400);
                                //sport column is bigger
                            } else {

                                column.setPreferredWidth(200);

                            }
                        }*/
                        jSearchTable11.addMouseListener(new java.awt.event.MouseAdapter() {
                            public void mouseClicked(java.awt.event.MouseEvent evt) {
                                jSearchTable11MouseClicked(evt);
                            }
                        });
                        jSearchScrollPane11.setViewportView(jSearchTable11);

                        gridBagConstraints = new java.awt.GridBagConstraints();
                        gridBagConstraints.gridx = 0;
                        gridBagConstraints.gridy = 1;
                        gridBagConstraints.gridwidth = 3;
                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                        gridBagConstraints.weightx = 1.0;
                        gridBagConstraints.weighty = 20.0;
                        jSearchPanel11.add(jSearchScrollPane11, gridBagConstraints);

                        dispose11.setMnemonic('l');
                        dispose11.setText("Close");
                        dispose11.addActionListener(new java.awt.event.ActionListener() {
                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                dispose11ActionPerformed(evt);
                            }
                        });
                        gridBagConstraints = new java.awt.GridBagConstraints();
                        gridBagConstraints.gridx = 2;
                        gridBagConstraints.gridy = 0;
                        gridBagConstraints.weightx = 1.0;
                        gridBagConstraints.weighty = 1.0;
                        jSearchPanel11.add(dispose11, gridBagConstraints);

                        gridBagConstraints = new java.awt.GridBagConstraints();
                        gridBagConstraints.gridx = 0;
                        gridBagConstraints.gridy = 1;
                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                        gridBagConstraints.weightx = 1.0;
                        gridBagConstraints.weighty = 1.0;
                        jSearchDialog11.getContentPane().add(jSearchPanel11, gridBagConstraints);

                        jSearchDialog111.setUndecorated(true);
                        jSearchDialog111.getContentPane().setLayout(new java.awt.GridBagLayout());

                        jSearchPanel111.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                        jSearchPanel111.setLayout(new java.awt.GridBagLayout());

                        jTextField11111.addCaretListener(new javax.swing.event.CaretListener() {
                            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                                jTextField11111CaretUpdate(evt);
                            }
                        });
                        gridBagConstraints = new java.awt.GridBagConstraints();
                        gridBagConstraints.gridx = 1;
                        gridBagConstraints.gridy = 0;
                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                        gridBagConstraints.weightx = 300.0;
                        gridBagConstraints.weighty = 1.0;
                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
                        jSearchPanel111.add(jTextField11111, gridBagConstraints);

                        jSearchTable111.setToolTipText("Click on the target row to select the patient from the search.");
                        jSearchTable111.setShowHorizontalLines(false);
                        /*int rowsNo = 0;
                        //try {

                            crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

                            crset1.setConnectionSource(pConnDB);

                            // try {
                                //crset1.execute();

                                // crset2.setExecuteOnLoad(true);
                                patientSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                                    new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                                    new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                                    new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                                    new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

                                }));

                                tableModel = patientSearchTable.getModel();

                                patientSearchJscrl.setViewportView(patientSearchTable);

                                /*   }catch(java.sql.SQLException sqlex){
                                javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                                System.out.println(sqlex.getMessage());

                            }

                            javax.swing.table.TableColumn column = null;

                            for (int i = 0; i < 4; i++) {

                                column = patientSearchTable.getColumnModel().getColumn(i);

                                if (i == 1) {

                                    column.setPreferredWidth(400);
                                    //sport column is bigger
                                } else {

                                    column.setPreferredWidth(200);

                                }
                            }*/
                            jSearchTable111.addMouseListener(new java.awt.event.MouseAdapter() {
                                public void mouseClicked(java.awt.event.MouseEvent evt) {
                                    jSearchTable111MouseClicked(evt);
                                }
                            });
                            jSearchScrollPane111.setViewportView(jSearchTable111);

                            gridBagConstraints = new java.awt.GridBagConstraints();
                            gridBagConstraints.gridx = 0;
                            gridBagConstraints.gridy = 1;
                            gridBagConstraints.gridwidth = 3;
                            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                            gridBagConstraints.weightx = 1.0;
                            gridBagConstraints.weighty = 20.0;
                            jSearchPanel111.add(jSearchScrollPane111, gridBagConstraints);

                            dispose111.setMnemonic('l');
                            dispose111.setText("Close");
                            dispose111.addActionListener(new java.awt.event.ActionListener() {
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    dispose111ActionPerformed(evt);
                                }
                            });
                            gridBagConstraints = new java.awt.GridBagConstraints();
                            gridBagConstraints.gridx = 0;
                            gridBagConstraints.gridy = 0;
                            gridBagConstraints.weightx = 1.0;
                            gridBagConstraints.weighty = 1.0;
                            jSearchPanel111.add(dispose111, gridBagConstraints);

                            gridBagConstraints = new java.awt.GridBagConstraints();
                            gridBagConstraints.gridx = 0;
                            gridBagConstraints.gridy = 1;
                            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                            gridBagConstraints.weightx = 1.0;
                            gridBagConstraints.weighty = 1.0;
                            jSearchDialog111.getContentPane().add(jSearchPanel111, gridBagConstraints);

                            jSearchDialog3.setUndecorated(true);
                            jSearchDialog3.getContentPane().setLayout(new java.awt.GridBagLayout());

                            jSearchPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                            jSearchPanel3.setLayout(new java.awt.GridBagLayout());

                            jTextField1112.addCaretListener(new javax.swing.event.CaretListener() {
                                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                                    jTextField1112CaretUpdate(evt);
                                }
                            });
                            gridBagConstraints = new java.awt.GridBagConstraints();
                            gridBagConstraints.gridx = 0;
                            gridBagConstraints.gridy = 0;
                            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                            gridBagConstraints.weightx = 300.0;
                            gridBagConstraints.weighty = 1.0;
                            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
                            jSearchPanel3.add(jTextField1112, gridBagConstraints);

                            jSearchTable3.setToolTipText("Click on the target row to select the patient from the search.");
                            jSearchTable3.setShowHorizontalLines(false);
                            /*javax.swing.table.TableColumn column = null;

                            for (int i = 0; i < 4; i++) {

                                column = patientSearchTable.getColumnModel().getColumn(i);

                                if (i == 1) {

                                    column.setPreferredWidth(400);
                                    //sport column is bigger
                                } else {

                                    column.setPreferredWidth(200);

                                }
                            }
                            */
                            jSearchTable3.addMouseListener(new java.awt.event.MouseAdapter() {
                                public void mouseClicked(java.awt.event.MouseEvent evt) {
                                    jSearchTable3MouseClicked(evt);
                                }
                            });
                            jSearchScrollPane3.setViewportView(jSearchTable3);

                            gridBagConstraints = new java.awt.GridBagConstraints();
                            gridBagConstraints.gridx = 0;
                            gridBagConstraints.gridy = 1;
                            gridBagConstraints.gridwidth = 3;
                            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                            gridBagConstraints.weightx = 1.0;
                            gridBagConstraints.weighty = 20.0;
                            jSearchPanel3.add(jSearchScrollPane3, gridBagConstraints);

                            jButton51.setText("Close");
                            jButton51.addActionListener(new java.awt.event.ActionListener() {
                                public void actionPerformed(java.awt.event.ActionEvent evt) {
                                    jButton51ActionPerformed(evt);
                                }
                            });
                            gridBagConstraints = new java.awt.GridBagConstraints();
                            gridBagConstraints.gridx = 2;
                            gridBagConstraints.gridy = 0;
                            gridBagConstraints.weightx = 1.0;
                            gridBagConstraints.weighty = 1.0;
                            jSearchPanel3.add(jButton51, gridBagConstraints);

                            gridBagConstraints = new java.awt.GridBagConstraints();
                            gridBagConstraints.gridx = 0;
                            gridBagConstraints.gridy = 1;
                            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                            gridBagConstraints.weightx = 1.0;
                            gridBagConstraints.weighty = 1.0;
                            jSearchDialog3.getContentPane().add(jSearchPanel3, gridBagConstraints);

                            diseaseDialog.setResizable(false);
                            diseaseDialog.setUndecorated(true);
                            diseaseDialog.addComponentListener(new java.awt.event.ComponentAdapter() {
                                public void componentHidden(java.awt.event.ComponentEvent evt) {
                                    diseaseDialogComponentHidden(evt);
                                }
                            });
                            diseaseDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

                            jSearchPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                            jSearchPanel4.setLayout(new java.awt.GridBagLayout());

                            diseaseSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
                                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                                    diseaseSearchTxtCaretUpdate(evt);
                                }
                            });
                            diseaseSearchTxt.addFocusListener(new java.awt.event.FocusAdapter() {
                                public void focusLost(java.awt.event.FocusEvent evt) {
                                    diseaseSearchTxtFocusLost(evt);
                                }
                            });
                            gridBagConstraints = new java.awt.GridBagConstraints();
                            gridBagConstraints.gridx = 1;
                            gridBagConstraints.gridy = 0;
                            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                            gridBagConstraints.weightx = 300.0;
                            gridBagConstraints.weighty = 1.0;
                            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
                            jSearchPanel4.add(diseaseSearchTxt, gridBagConstraints);

                            diseaseSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
                            diseaseSearchTable.setShowHorizontalLines(false);
                            /*int rowsNo = 0;
                            //try {

                                crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

                                crset1.setConnectionSource(pConnDB);

                                // try {
                                    //crset1.execute();

                                    // crset2.setExecuteOnLoad(true);
                                    patientSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                                        new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                                        new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                                        new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                                        new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

                                    }));

                                    tableModel = patientSearchTable.getModel();

                                    patientSearchJscrl.setViewportView(patientSearchTable);

                                    /*   }catch(java.sql.SQLException sqlex){
                                    javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                                    System.out.println(sqlex.getMessage());

                                }

                                javax.swing.table.TableColumn column = null;

                                for (int i = 0; i < 4; i++) {

                                    column = patientSearchTable.getColumnModel().getColumn(i);

                                    if (i == 1) {

                                        column.setPreferredWidth(400);
                                        //sport column is bigger
                                    } else {

                                        column.setPreferredWidth(200);

                                    }
                                }*/
                                diseaseSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
                                    public void mouseClicked(java.awt.event.MouseEvent evt) {
                                        diseaseSearchTableMouseClicked(evt);
                                    }
                                });
                                diseaseSearchScrollPane.setViewportView(diseaseSearchTable);

                                gridBagConstraints = new java.awt.GridBagConstraints();
                                gridBagConstraints.gridx = 0;
                                gridBagConstraints.gridy = 1;
                                gridBagConstraints.gridwidth = 3;
                                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                gridBagConstraints.weightx = 1.0;
                                gridBagConstraints.weighty = 20.0;
                                jSearchPanel4.add(diseaseSearchScrollPane, gridBagConstraints);

                                disposeDiseaseSearchBtn.setText("Dispose");
                                disposeDiseaseSearchBtn.addActionListener(new java.awt.event.ActionListener() {
                                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                                        disposeDiseaseSearchBtnActionPerformed(evt);
                                    }
                                });
                                gridBagConstraints = new java.awt.GridBagConstraints();
                                gridBagConstraints.gridx = 0;
                                gridBagConstraints.gridy = 0;
                                gridBagConstraints.weightx = 1.0;
                                gridBagConstraints.weighty = 1.0;
                                jSearchPanel4.add(disposeDiseaseSearchBtn, gridBagConstraints);

                                gridBagConstraints = new java.awt.GridBagConstraints();
                                gridBagConstraints.gridx = 0;
                                gridBagConstraints.gridy = 1;
                                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                gridBagConstraints.weightx = 1.0;
                                gridBagConstraints.weighty = 1.0;
                                diseaseDialog.getContentPane().add(jSearchPanel4, gridBagConstraints);

                                jSearchDialog4.setAutoRequestFocus(false);
                                jSearchDialog4.setFocusable(false);
                                jSearchDialog4.setFocusableWindowState(false);
                                jSearchDialog4.setUndecorated(true);
                                jSearchDialog4.setResizable(false);
                                jSearchDialog4.addComponentListener(new java.awt.event.ComponentAdapter() {
                                    public void componentHidden(java.awt.event.ComponentEvent evt) {
                                        jSearchDialog4ComponentHidden(evt);
                                    }
                                });
                                jSearchDialog4.getContentPane().setLayout(new java.awt.GridBagLayout());

                                jSearchPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                                jSearchPanel5.setFocusable(false);
                                jSearchPanel5.setLayout(new java.awt.GridBagLayout());

                                jTextField28.setEditable(false);
                                jTextField28.setFocusable(false);
                                jTextField28.addCaretListener(new javax.swing.event.CaretListener() {
                                    public void caretUpdate(javax.swing.event.CaretEvent evt) {
                                        jTextField28CaretUpdate(evt);
                                    }
                                });
                                jTextField28.addFocusListener(new java.awt.event.FocusAdapter() {
                                    public void focusLost(java.awt.event.FocusEvent evt) {
                                        jTextField28FocusLost(evt);
                                    }
                                });
                                gridBagConstraints = new java.awt.GridBagConstraints();
                                gridBagConstraints.gridx = 0;
                                gridBagConstraints.gridy = 0;
                                gridBagConstraints.gridwidth = 2;
                                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                gridBagConstraints.weightx = 300.0;
                                gridBagConstraints.weighty = 1.0;
                                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
                                jSearchPanel5.add(jTextField28, gridBagConstraints);

                                jSearchScrollPane4.setFocusable(false);

                                jSearchTable4.setToolTipText("Click on the target row to select the patient from the search.");
                                jSearchTable4.setFocusable(false);
                                jSearchTable4.setShowHorizontalLines(false);
                                /*int rowsNo = 0;
                                //try {

                                    crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

                                    crset1.setConnectionSource(pConnDB);

                                    // try {
                                        //crset1.execute();

                                        // crset2.setExecuteOnLoad(true);
                                        patientSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                                            new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                                            new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                                            new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                                            new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

                                        }));

                                        tableModel = patientSearchTable.getModel();

                                        patientSearchJscrl.setViewportView(patientSearchTable);

                                        /*   }catch(java.sql.SQLException sqlex){
                                        javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                                        System.out.println(sqlex.getMessage());

                                    }

                                    javax.swing.table.TableColumn column = null;

                                    for (int i = 0; i < 4; i++) {

                                        column = patientSearchTable.getColumnModel().getColumn(i);

                                        if (i == 1) {

                                            column.setPreferredWidth(400);
                                            //sport column is bigger
                                        } else {

                                            column.setPreferredWidth(200);

                                        }
                                    }*/
                                    jSearchTable4.addMouseListener(new java.awt.event.MouseAdapter() {
                                        public void mouseClicked(java.awt.event.MouseEvent evt) {
                                            jSearchTable4MouseClicked(evt);
                                        }
                                    });
                                    jSearchScrollPane4.setViewportView(jSearchTable4);

                                    gridBagConstraints = new java.awt.GridBagConstraints();
                                    gridBagConstraints.gridx = 0;
                                    gridBagConstraints.gridy = 1;
                                    gridBagConstraints.gridwidth = 3;
                                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                    gridBagConstraints.weightx = 1.0;
                                    gridBagConstraints.weighty = 20.0;
                                    jSearchPanel5.add(jSearchScrollPane4, gridBagConstraints);

                                    dispose3.setText("Dispose/Close");
                                    dispose3.setFocusable(false);
                                    dispose3.addActionListener(new java.awt.event.ActionListener() {
                                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                            dispose3ActionPerformed(evt);
                                        }
                                    });
                                    gridBagConstraints = new java.awt.GridBagConstraints();
                                    gridBagConstraints.gridx = 2;
                                    gridBagConstraints.gridy = 0;
                                    gridBagConstraints.weightx = 1.0;
                                    gridBagConstraints.weighty = 1.0;
                                    jSearchPanel5.add(dispose3, gridBagConstraints);

                                    gridBagConstraints = new java.awt.GridBagConstraints();
                                    gridBagConstraints.gridx = 0;
                                    gridBagConstraints.gridy = 1;
                                    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                    gridBagConstraints.weightx = 1.0;
                                    gridBagConstraints.weighty = 1.0;
                                    jSearchDialog4.getContentPane().add(jSearchPanel5, gridBagConstraints);

                                    ageTxt.setEditable(false);
                                    ageTxt.setEnabled(false);
                                    ageTxt.setMinimumSize(new java.awt.Dimension(65, 20));
                                    ageTxt.setOpaque(false);
                                    ageTxt.setPreferredSize(new java.awt.Dimension(60, 20));
                                    ageTxt.addCaretListener(new javax.swing.event.CaretListener() {
                                        public void caretUpdate(javax.swing.event.CaretEvent evt) {
                                            ageTxtCaretUpdate(evt);
                                        }
                                    });

                                    facilitySearchDialog.setUndecorated(true);
                                    facilitySearchDialog.setResizable(false);
                                    facilitySearchDialog.addComponentListener(new java.awt.event.ComponentAdapter() {
                                        public void componentHidden(java.awt.event.ComponentEvent evt) {
                                            facilitySearchDialogComponentHidden(evt);
                                        }
                                    });
                                    facilitySearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

                                    facilitySearchMainPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                                    facilitySearchMainPanel.setLayout(new java.awt.GridBagLayout());

                                    facilitySearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
                                        public void caretUpdate(javax.swing.event.CaretEvent evt) {
                                            facilitySearchTxtCaretUpdate(evt);
                                        }
                                    });
                                    facilitySearchTxt.addFocusListener(new java.awt.event.FocusAdapter() {
                                        public void focusLost(java.awt.event.FocusEvent evt) {
                                            facilitySearchTxtFocusLost(evt);
                                        }
                                    });
                                    gridBagConstraints = new java.awt.GridBagConstraints();
                                    gridBagConstraints.gridx = 0;
                                    gridBagConstraints.gridy = 0;
                                    gridBagConstraints.gridwidth = 2;
                                    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                    gridBagConstraints.weightx = 300.0;
                                    gridBagConstraints.weighty = 1.0;
                                    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
                                    facilitySearchMainPanel.add(facilitySearchTxt, gridBagConstraints);

                                    facilitySearchTable.setToolTipText("Click on the target row to select the patient from the search.");
                                    facilitySearchTable.setShowHorizontalLines(false);
                                    /*int rowsNo = 0;
                                    //try {

                                        crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

                                        crset1.setConnectionSource(pConnDB);

                                        // try {
                                            //crset1.execute();

                                            // crset2.setExecuteOnLoad(true);
                                            patientSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                                                new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                                                new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                                                new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                                                new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

                                            }));

                                            tableModel = patientSearchTable.getModel();

                                            patientSearchJscrl.setViewportView(patientSearchTable);

                                            /*   }catch(java.sql.SQLException sqlex){
                                            javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                                            System.out.println(sqlex.getMessage());

                                        }

                                        javax.swing.table.TableColumn column = null;

                                        for (int i = 0; i < 4; i++) {

                                            column = patientSearchTable.getColumnModel().getColumn(i);

                                            if (i == 1) {

                                                column.setPreferredWidth(400);
                                                //sport column is bigger
                                            } else {

                                                column.setPreferredWidth(200);

                                            }
                                        }*/
                                        facilitySearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
                                            public void mouseClicked(java.awt.event.MouseEvent evt) {
                                                facilitySearchTableMouseClicked(evt);
                                            }
                                        });
                                        facilitySearchJscrl.setViewportView(facilitySearchTable);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.gridwidth = 3;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 20.0;
                                        facilitySearchMainPanel.add(facilitySearchJscrl, gridBagConstraints);

                                        dispose4.setText("Cancel");
                                        dispose4.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                dispose4ActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 2;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        facilitySearchMainPanel.add(dispose4, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        facilitySearchDialog.getContentPane().add(facilitySearchMainPanel, gridBagConstraints);

                                        fingerPrintDialog.setTitle("Fingerprint Reader");
                                        fingerPrintDialog.setBackground(new java.awt.Color(51, 102, 255));
                                        fingerPrintDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

                                        fingerprintIconLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(102, 204, 255), new java.awt.Color(0, 51, 255), new java.awt.Color(153, 255, 255), new java.awt.Color(204, 102, 255)));
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.gridwidth = 2;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 100.0;
                                        fingerPrintDialog.getContentPane().add(fingerprintIconLabel, gridBagConstraints);

                                        setClosable(true);
                                        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
                                        setIconifiable(true);
                                        setMaximizable(true);
                                        setResizable(true);
                                        setTitle("Patient Register (Form for creating new files for OUT-Patients and retrieval for existing files) - Form 204 A & B ");
                                        try {
                                            setSelected(true);
                                        } catch (java.beans.PropertyVetoException e1) {
                                            e1.printStackTrace();
                                        }
                                        setVisible(true);
                                        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
                                            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                                            }
                                            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                                            }
                                            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                                                formInternalFrameClosing(evt);
                                            }
                                            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
                                            }
                                            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
                                            }
                                            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
                                            }
                                            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                                            }
                                        });
                                        addComponentListener(new java.awt.event.ComponentAdapter() {
                                            public void componentShown(java.awt.event.ComponentEvent evt) {
                                                formComponentShown(evt);
                                            }
                                        });
                                        addFocusListener(new java.awt.event.FocusAdapter() {
                                            public void focusGained(java.awt.event.FocusEvent evt) {
                                                formFocusGained(evt);
                                            }
                                        });
                                        getContentPane().setLayout(new java.awt.GridBagLayout());

                                        mainPanel.setLayout(new java.awt.GridBagLayout());

                                        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
                                        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 9;
                                        gridBagConstraints.gridwidth = 6;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.ipadx = 5;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        mainPanel.add(jLabel2, gridBagConstraints);

                                        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
                                        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
                                            public void mouseClicked(java.awt.event.MouseEvent evt) {
                                                jPanel1MouseClicked(evt);
                                            }
                                            public void mouseEntered(java.awt.event.MouseEvent evt) {
                                                jPanel1MouseEntered(evt);
                                            }
                                        });
                                        jPanel1.addComponentListener(new java.awt.event.ComponentAdapter() {
                                            public void componentShown(java.awt.event.ComponentEvent evt) {
                                                jPanel1ComponentShown(evt);
                                            }
                                        });
                                        jPanel1.setLayout(new java.awt.GridBagLayout());

                                        headerPanel.setBackground(new java.awt.Color(204, 255, 204));
                                        headerPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                                        headerPanel.setLayout(new java.awt.GridBagLayout());

                                        searchbyNumberChkbx.setBackground(new java.awt.Color(204, 255, 204));
                                        buttonGroup3.add(searchbyNumberChkbx);
                                        searchbyNumberChkbx.setSelected(true);
                                        searchbyNumberChkbx.setText("Search by patient number");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        headerPanel.add(searchbyNumberChkbx, gridBagConstraints);

                                        searchbyNameChkbx.setBackground(new java.awt.Color(204, 255, 204));
                                        buttonGroup3.add(searchbyNameChkbx);
                                        searchbyNameChkbx.setText("Search by patient name");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weighty = 1.0;
                                        headerPanel.add(searchbyNameChkbx, gridBagConstraints);

                                        createNewFileRbtn.setBackground(new java.awt.Color(204, 255, 204));
                                        buttonGroup4.add(createNewFileRbtn);
                                        createNewFileRbtn.setForeground(new java.awt.Color(51, 51, 255));
                                        createNewFileRbtn.setText("Create new patient file");
                                        createNewFileRbtn.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                createNewFileRbtnActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        headerPanel.add(createNewFileRbtn, gridBagConstraints);

                                        revisitRbtn.setBackground(new java.awt.Color(204, 255, 204));
                                        buttonGroup4.add(revisitRbtn);
                                        revisitRbtn.setForeground(new java.awt.Color(102, 0, 0));
                                        revisitRbtn.setSelected(true);
                                        revisitRbtn.setText("Revisit");
                                        revisitRbtn.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                revisitRbtnActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 2;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        headerPanel.add(revisitRbtn, gridBagConstraints);

                                        jLabel13.setForeground(new java.awt.Color(255, 51, 153));
                                        jLabel13.setText("Patient Category");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 4;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        headerPanel.add(jLabel13, gridBagConstraints);

                                        patientCategoryCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT patient_type FROM pb_patient_categories ORDER BY 1"));
                                        patientCategoryCmbx.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                patientCategoryCmbxActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 5;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.gridwidth = 2;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                                        headerPanel.add(patientCategoryCmbx, gridBagConstraints);

                                        jLabel23.setText("Current visit date");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        headerPanel.add(jLabel23, gridBagConstraints);

                                        datePicker4.setEnabled(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 4;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.ipadx = 2;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
                                        headerPanel.add(datePicker4, gridBagConstraints);

                                        buttonGroup4.add(createOldFileRbtn);
                                        createOldFileRbtn.setForeground(new java.awt.Color(51, 51, 255));
                                        createOldFileRbtn.setText("Create old patient file");
                                        createOldFileRbtn.setEnabled(false);
                                        createOldFileRbtn.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                createOldFileRbtnActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        headerPanel.add(createOldFileRbtn, gridBagConstraints);

                                        jTextField22.setEditable(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 2;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        headerPanel.add(jTextField22, gridBagConstraints);

                                        buttonGroup4.add(jRadioButton2);
                                        jRadioButton2.setText("Reprint file");
                                        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                jRadioButton2ActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 0;
                                        headerPanel.add(jRadioButton2, gridBagConstraints);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 6;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.gridwidth = 2;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        headerPanel.add(datePicker2, gridBagConstraints);

                                        jLabel54.setText("Appoint. date");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 5;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 2);
                                        headerPanel.add(jLabel54, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.gridwidth = 5;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        jPanel1.add(headerPanel, gridBagConstraints);

                                        jPanel3.setBackground(new java.awt.Color(153, 255, 153));
                                        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
                                        jPanel3.setLayout(new java.awt.GridBagLayout());

                                        buttonGroup5.add(jCheckBox9);
                                        jCheckBox9.setText("Special");
                                        jCheckBox9.setEnabled(false);
                                        jCheckBox9.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                jCheckBox9ActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 5;
                                        gridBagConstraints.gridy = 9;
                                        gridBagConstraints.weightx = 1.0;
                                        jPanel3.add(jCheckBox9, gridBagConstraints);

                                        buttonGroup5.add(jCheckBox2);
                                        jCheckBox2.setText("Review");
                                        jCheckBox2.setEnabled(false);
                                        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                jCheckBox2ActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 6;
                                        gridBagConstraints.gridy = 9;
                                        gridBagConstraints.weightx = 1.0;
                                        jPanel3.add(jCheckBox2, gridBagConstraints);

                                        buttonGroup5.add(jCheckBox1);
                                        jCheckBox1.setText("First Visit");
                                        jCheckBox1.setContentAreaFilled(false);
                                        jCheckBox1.setEnabled(false);
                                        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                jCheckBox1ActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 4;
                                        gridBagConstraints.gridy = 9;
                                        gridBagConstraints.weightx = 1.0;
                                        jPanel3.add(jCheckBox1, gridBagConstraints);

                                        buttonGroup5.add(jCheckBox10);
                                        jCheckBox10.setText("Off Peak");
                                        jCheckBox10.setEnabled(false);
                                        jCheckBox10.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                jCheckBox10ActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 7;
                                        gridBagConstraints.gridy = 9;
                                        gridBagConstraints.weightx = 1.0;
                                        jPanel3.add(jCheckBox10, gridBagConstraints);

                                        jTextField9.setMinimumSize(new java.awt.Dimension(0, 0));
                                        jTextField9.setPreferredSize(new java.awt.Dimension(0, 0));
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 8;
                                        gridBagConstraints.gridy = 9;
                                        jPanel3.add(jTextField9, gridBagConstraints);

                                        jLabel39.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
                                        jLabel39.setText("Total cards sold");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 9;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        jPanel3.add(jLabel39, gridBagConstraints);

                                        cardsSoldTxt.setBackground(new java.awt.Color(204, 204, 255));
                                        cardsSoldTxt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
                                        cardsSoldTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
                                        cardsSoldTxt.setText("0");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 9;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        jPanel3.add(cardsSoldTxt, gridBagConstraints);

                                        jLabel40.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
                                        jLabel40.setText("Total files sold");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 2;
                                        gridBagConstraints.gridy = 9;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        jPanel3.add(jLabel40, gridBagConstraints);

                                        filesSoldTxt.setBackground(new java.awt.Color(204, 204, 255));
                                        filesSoldTxt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
                                        filesSoldTxt.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
                                        filesSoldTxt.setText("0");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 9;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        jPanel3.add(filesSoldTxt, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 3;
                                        gridBagConstraints.gridwidth = 5;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        jPanel1.add(jPanel3, gridBagConstraints);

                                        billindDetailsTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
                                            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                                                billindDetailsTabbedPaneStateChanged(evt);
                                            }
                                        });

                                        bioDataPanel.addFocusListener(new java.awt.event.FocusAdapter() {
                                            public void focusGained(java.awt.event.FocusEvent evt) {
                                                bioDataPanelFocusGained(evt);
                                            }
                                        });
                                        bioDataPanel.setLayout(new java.awt.GridBagLayout());

                                        patientSearchPanel.setBackground(new java.awt.Color(153, 255, 204));
                                        patientSearchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(255, 102, 255), new java.awt.Color(102, 255, 51), null), "Patient Details (Highlighted fields MUST be filled.)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 255))); // NOI18N
                                        patientSearchPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
                                            public void mouseMoved(java.awt.event.MouseEvent evt) {
                                                patientSearchPanelMouseMoved(evt);
                                            }
                                        });
                                        patientSearchPanel.setLayout(new java.awt.GridBagLayout());

                                        jLabel20.setForeground(new java.awt.Color(255, 51, 153));
                                        jLabel20.setText("Patient Surname/ Last Name");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        patientSearchPanel.add(jLabel20, gridBagConstraints);

                                        surNameTxt.setEditable(false);
                                        surNameTxt.setDragEnabled(true);
                                        surNameTxt.setFocusCycleRoot(true);
                                        surNameTxt.setNextFocusableComponent(firstNameTxt);
                                        surNameTxt.addCaretListener(new javax.swing.event.CaretListener() {
                                            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                                                surNameTxtCaretUpdate(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        patientSearchPanel.add(surNameTxt, gridBagConstraints);

                                        firstNameTxt.setEditable(false);
                                        firstNameTxt.setNextFocusableComponent(specialtyClinicCmbx);
                                        firstNameTxt.addCaretListener(new javax.swing.event.CaretListener() {
                                            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                                                firstNameTxtCaretUpdate(evt);
                                            }
                                        });
                                        firstNameTxt.addFocusListener(new java.awt.event.FocusAdapter() {
                                            public void focusLost(java.awt.event.FocusEvent evt) {
                                                firstNameTxtFocusLost(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        patientSearchPanel.add(firstNameTxt, gridBagConstraints);

                                        jLabel582.setForeground(new java.awt.Color(255, 51, 153));
                                        jLabel582.setText("Other Patient Names");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        patientSearchPanel.add(jLabel582, gridBagConstraints);

                                        jLabel16.setForeground(new java.awt.Color(255, 51, 153));
                                        jLabel16.setText("Gender (Tick Only one)");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 5;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        patientSearchPanel.add(jLabel16, gridBagConstraints);

                                        jPanel4111.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
                                        jPanel4111.setLayout(new java.awt.GridBagLayout());

                                        patientSearchbtnGrp.add(jCheckBox1111);
                                        jCheckBox1111.setSelected(true);
                                        jCheckBox1111.setText("Male");
                                        jCheckBox1111.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
                                        jCheckBox1111.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 7;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        jPanel4111.add(jCheckBox1111, gridBagConstraints);

                                        patientSearchbtnGrp.add(jCheckBox2111);
                                        jCheckBox2111.setText("Female");
                                        jCheckBox2111.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
                                        jCheckBox2111.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 7;
                                        gridBagConstraints.weightx = 1.0;
                                        jPanel4111.add(jCheckBox2111, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 5;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        patientSearchPanel.add(jPanel4111, gridBagConstraints);

                                        jLabel27.setForeground(new java.awt.Color(255, 51, 153));
                                        jLabel27.setText("Marital Status");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 6;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        patientSearchPanel.add(jLabel27, gridBagConstraints);

                                        maritalStatusesPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
                                        maritalStatusesPanel.setLayout(new java.awt.GridBagLayout());

                                        buttonGroup6.add(jCheckBox1113);
                                        jCheckBox1113.setSelected(true);
                                        jCheckBox1113.setText("Single");
                                        jCheckBox1113.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
                                        jCheckBox1113.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        maritalStatusesPanel.add(jCheckBox1113, gridBagConstraints);

                                        buttonGroup6.add(jCheckBox2113);
                                        jCheckBox2113.setText("Married");
                                        jCheckBox2113.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
                                        jCheckBox2113.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        maritalStatusesPanel.add(jCheckBox2113, gridBagConstraints);

                                        buttonGroup6.add(jCheckBox3);
                                        jCheckBox3.setText("Divorced");
                                        jCheckBox3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                                        jCheckBox3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        maritalStatusesPanel.add(jCheckBox3, gridBagConstraints);

                                        buttonGroup6.add(jCheckBox11);
                                        jCheckBox11.setText("Widowed");
                                        jCheckBox11.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
                                        jCheckBox11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
                                        jCheckBox11.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        maritalStatusesPanel.add(jCheckBox11, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 6;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        patientSearchPanel.add(maritalStatusesPanel, gridBagConstraints);

                                        dateofLastVisitLbl.setForeground(new java.awt.Color(0, 0, 255));
                                        dateofLastVisitLbl.setText("Date of last visit");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 10;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        patientSearchPanel.add(dateofLastVisitLbl, gridBagConstraints);

                                        dateofLastVisitTxt.setEditable(false);
                                        dateofLastVisitTxt.setForeground(new java.awt.Color(0, 0, 204));
                                        dateofLastVisitTxt.addMouseListener(new java.awt.event.MouseAdapter() {
                                            public void mouseClicked(java.awt.event.MouseEvent evt) {
                                                dateofLastVisitTxtMouseClicked(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 10;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        patientSearchPanel.add(dateofLastVisitTxt, gridBagConstraints);

                                        ageLbl.setForeground(new java.awt.Color(255, 51, 153));
                                        ageLbl.setText("Age(YRS)");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 7;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        patientSearchPanel.add(ageLbl, gridBagConstraints);

                                        specialtyClinicLbl.setForeground(new java.awt.Color(255, 51, 153));
                                        specialtyClinicLbl.setText("Specialty Clinic");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 3;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        patientSearchPanel.add(specialtyClinicLbl, gridBagConstraints);

                                        specialtyClinicCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select '-' union SELECT distinct clinics FROM pb_clinics ORDER BY 1"));
                                        specialtyClinicCmbx.setNextFocusableComponent(cSheetNoTxt);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 3;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        patientSearchPanel.add(specialtyClinicCmbx, gridBagConstraints);

                                        cSheetNoLbl.setForeground(new java.awt.Color(255, 51, 153));
                                        cSheetNoLbl.setText("C-Sheet Number");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 4;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        patientSearchPanel.add(cSheetNoLbl, gridBagConstraints);

                                        cSheetNoTxt.setToolTipText("Charge Scheet Number");
                                        cSheetNoTxt.setNextFocusableComponent(ageTxt);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 4;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        patientSearchPanel.add(cSheetNoTxt, gridBagConstraints);

                                        urgencyCMBX.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
                                        urgencyCMBX.setForeground(new java.awt.Color(255, 0, 102));
                                        urgencyCMBX.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Normal", "Emergency" }));
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        patientSearchPanel.add(urgencyCMBX, gridBagConstraints);

                                        jLabel57.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
                                        jLabel57.setForeground(new java.awt.Color(255, 51, 153));
                                        jLabel57.setText("Patient Urgency");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        patientSearchPanel.add(jLabel57, gridBagConstraints);

                                        jLabel58.setText("jLabel58");
                                        patientSearchPanel.add(jLabel58, new java.awt.GridBagConstraints());
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 7;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        patientSearchPanel.add(ageLabel, gridBagConstraints);

                                        dateofBirthPanel.setBackground(new java.awt.Color(153, 255, 204));
                                        dateofBirthPanel.addMouseListener(new java.awt.event.MouseAdapter() {
                                            public void mouseExited(java.awt.event.MouseEvent evt) {
                                                dateofBirthPanelMouseExited(evt);
                                            }
                                            public void mouseReleased(java.awt.event.MouseEvent evt) {
                                                dateofBirthPanelMouseReleased(evt);
                                            }
                                        });
                                        dateofBirthPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
                                            public void mouseDragged(java.awt.event.MouseEvent evt) {
                                                dateofBirthPanelMouseDragged(evt);
                                            }
                                            public void mouseMoved(java.awt.event.MouseEvent evt) {
                                                dateofBirthPanelMouseMoved(evt);
                                            }
                                        });
                                        dateofBirthPanel.setLayout(new java.awt.GridBagLayout());

                                        jLabel66.setForeground(new java.awt.Color(255, 51, 153));
                                        jLabel66.setText("Date of Birth");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        dateofBirthPanel.add(jLabel66, gridBagConstraints);

                                        this.datePickerYOB.getDateEditor().addPropertyChangeListener(new java.beans.PropertyChangeListener() {

                                            @Override
                                            public void propertyChange(PropertyChangeEvent evt) {
                                                changeDate();
                                            }
                                        });

                                        datePickerYOB.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
                                            public void mouseMoved(java.awt.event.MouseEvent evt) {
                                                datePickerYOBMouseMoved(evt);
                                            }
                                        });
                                        datePickerYOB.addInputMethodListener(new java.awt.event.InputMethodListener() {
                                            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                                            }
                                            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                                                datePickerYOBInputMethodTextChanged(evt);
                                            }
                                        });
                                        datePickerYOB.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                                            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                                                datePickerYOBPropertyChange(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        dateofBirthPanel.add(datePickerYOB, gridBagConstraints);

                                        jLabel3.setText("Age (YRS)");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 2;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        dateofBirthPanel.add(jLabel3, gridBagConstraints);

                                        ageYrsTxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
                                        ageYrsTxt.addCaretListener(new javax.swing.event.CaretListener() {
                                            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                                                ageYrsTxtCaretUpdate(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        dateofBirthPanel.add(ageYrsTxt, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 8;
                                        gridBagConstraints.gridwidth = 2;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        patientSearchPanel.add(dateofBirthPanel, gridBagConstraints);

                                        jLabel60.setForeground(new java.awt.Color(255, 51, 153));
                                        jLabel60.setText("Patient with disability");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 9;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        patientSearchPanel.add(jLabel60, gridBagConstraints);

                                        disabilityCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "N", "Y" }));
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 9;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        patientSearchPanel.add(disabilityCmbx, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.gridwidth = 2;
                                        gridBagConstraints.gridheight = 2;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 5.0;
                                        bioDataPanel.add(patientSearchPanel, gridBagConstraints);

                                        otherDetailsPanel.setBackground(new java.awt.Color(204, 255, 204));
                                        otherDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(255, 102, 102), null, null), "Other Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 255))); // NOI18N
                                        otherDetailsPanel.setLayout(new java.awt.GridBagLayout());

                                        physicalResidenceLbl.setForeground(new java.awt.Color(255, 51, 153));
                                        physicalResidenceLbl.setText("Physical Residence");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        otherDetailsPanel.add(physicalResidenceLbl, gridBagConstraints);

                                        residenceTxt.addCaretListener(new javax.swing.event.CaretListener() {
                                            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                                                residenceTxtCaretUpdate(evt);
                                            }
                                        });
                                        residenceTxt.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                residenceTxtActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        otherDetailsPanel.add(residenceTxt, gridBagConstraints);

                                        nokDetails.setBackground(new java.awt.Color(153, 255, 204));
                                        nokDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Next of Kin (NOK)Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 255))); // NOI18N
                                        nokDetails.setLayout(new java.awt.GridBagLayout());

                                        jLabel28.setBackground(new java.awt.Color(255, 204, 255));
                                        jLabel28.setForeground(new java.awt.Color(255, 51, 153));
                                        jLabel28.setText("NOK Names");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        nokDetails.add(jLabel28, gridBagConstraints);

                                        jLabel29.setBackground(new java.awt.Color(255, 204, 255));
                                        jLabel29.setForeground(new java.awt.Color(255, 51, 153));
                                        jLabel29.setText("NOK Relationship");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 4;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        nokDetails.add(jLabel29, gridBagConstraints);

                                        idNoLbl2.setText("Physical Residence");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 6;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        nokDetails.add(idNoLbl2, gridBagConstraints);

                                        nokResidenceTxt.setEditable(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 4;
                                        gridBagConstraints.gridy = 6;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                                        nokDetails.add(nokResidenceTxt, gridBagConstraints);

                                        NokEmailLbl.setText("Email Address");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 7;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        nokDetails.add(NokEmailLbl, gridBagConstraints);

                                        emailAddTxt1.setEditable(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 4;
                                        gridBagConstraints.gridy = 7;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                                        nokDetails.add(emailAddTxt1, gridBagConstraints);

                                        jTextField20.setEditable(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 4;
                                        gridBagConstraints.gridy = 3;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.ipadx = 90;
                                        gridBagConstraints.weightx = 2.5;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                                        nokDetails.add(jTextField20, gridBagConstraints);

                                        jLabel30.setBackground(new java.awt.Color(255, 204, 255));
                                        jLabel30.setText("Postal Address");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 3;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        nokDetails.add(jLabel30, gridBagConstraints);

                                        idNoLbl3.setText("Telephone Number");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 5;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        nokDetails.add(idNoLbl3, gridBagConstraints);

                                        nokTelephoneTxt.setEditable(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 4;
                                        gridBagConstraints.gridy = 5;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                                        nokDetails.add(nokTelephoneTxt, gridBagConstraints);

                                        nokNameTxt.setEditable(false);
                                        nokNameTxt.addCaretListener(new javax.swing.event.CaretListener() {
                                            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                                                nokNameTxtCaretUpdate(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 4;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.ipadx = 90;
                                        gridBagConstraints.weightx = 2.5;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                                        nokDetails.add(nokNameTxt, gridBagConstraints);

                                        nokRelationShipCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB,"SELECT DISTINCT relation_description FROM nok_relationship order by 1"));
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 4;
                                        gridBagConstraints.gridy = 4;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                                        nokDetails.add(nokRelationShipCmbx, gridBagConstraints);

                                        nokChkbx.setBackground(new java.awt.Color(153, 255, 204));
                                        nokbuttonGroup.add(nokChkbx);
                                        nokChkbx.setSelected(true);
                                        nokChkbx.setText("Next of Kin");
                                        nokChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        nokDetails.add(nokChkbx, gridBagConstraints);

                                        samaritanChkbx.setBackground(new java.awt.Color(153, 255, 204));
                                        nokbuttonGroup.add(samaritanChkbx);
                                        samaritanChkbx.setText("Good Samaritan");
                                        samaritanChkbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 4;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                                        nokDetails.add(samaritanChkbx, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 9;
                                        gridBagConstraints.gridwidth = 2;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        otherDetailsPanel.add(nokDetails, gridBagConstraints);

                                        referredFromLbl.setForeground(new java.awt.Color(255, 51, 153));
                                        referredFromLbl.setText("Referred Type ");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 4;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        otherDetailsPanel.add(referredFromLbl, gridBagConstraints);

                                        unitNumberLbl.setForeground(new java.awt.Color(255, 51, 153));
                                        unitNumberLbl.setText("OLD File Number(Unit Number)");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        otherDetailsPanel.add(unitNumberLbl, gridBagConstraints);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        otherDetailsPanel.add(oldFileNumberTxt, gridBagConstraints);

                                        referralTypeCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "County Hospital", "Health Center(Outside County)", "Health Center(Within County)", "Private Facility or Doctor", "NGO Facility", "Outside country", "Casualty dept at This Facility", "Other dept at This Facility", "Not Refered/Unknown Status" }));
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 4;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        otherDetailsPanel.add(referralTypeCmbx, gridBagConstraints);

                                        clinicNumberLbl.setForeground(new java.awt.Color(255, 51, 153));
                                        clinicNumberLbl.setText("Other Numbers");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 3;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        otherDetailsPanel.add(clinicNumberLbl, gridBagConstraints);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 3;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        otherDetailsPanel.add(clinicNumberTxt, gridBagConstraints);

                                        registrationPointLbl.setText("Registration Service Point");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 8;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        otherDetailsPanel.add(registrationPointLbl, gridBagConstraints);

                                        servicePointCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT point_name  FROM records_service_points ORDER BY 1"));
                                        servicePointCmbx.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                servicePointCmbxActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 8;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        otherDetailsPanel.add(servicePointCmbx, gridBagConstraints);

                                        placeofBirthLbl.setText("Place of Birth");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        otherDetailsPanel.add(placeofBirthLbl, gridBagConstraints);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        otherDetailsPanel.add(placeOfBirthTxt, gridBagConstraints);

                                        jLabel22.setText("Referral County");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 7;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        otherDetailsPanel.add(jLabel22, gridBagConstraints);

                                        referralCountyCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT county_name FROM pb_county ORDER BY 1"));
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 7;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        otherDetailsPanel.add(referralCountyCmbx, gridBagConstraints);

                                        referralCountyLbl.setText("Referral Facility");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 6;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        otherDetailsPanel.add(referralCountyLbl, gridBagConstraints);

                                        jPanel9.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                                        jPanel9.setMaximumSize(new java.awt.Dimension(4, 19));
                                        jPanel9.setMinimumSize(new java.awt.Dimension(50, 29));
                                        jPanel9.setPreferredSize(new java.awt.Dimension(48, 20));
                                        jPanel9.setLayout(new java.awt.GridBagLayout());

                                        referralFacilityNameTxt.setMinimumSize(new java.awt.Dimension(5, 19));
                                        referralFacilityNameTxt.setPreferredSize(new java.awt.Dimension(5, 19));
                                        referralFacilityNameTxt.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                referralFacilityNameTxtActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 200.0;
                                        gridBagConstraints.weighty = 1.0;
                                        jPanel9.add(referralFacilityNameTxt, gridBagConstraints);

                                        searchButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
                                        searchButton4.setToolTipText("Search");
                                        searchButton4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                                        searchButton4.setMaximumSize(new java.awt.Dimension(40, 25));
                                        searchButton4.setMinimumSize(new java.awt.Dimension(40, 25));
                                        searchButton4.setPreferredSize(new java.awt.Dimension(40, 25));
                                        searchButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                                        searchButton4.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                searchButton4ActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        jPanel9.add(searchButton4, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 6;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 2.0;
                                        gridBagConstraints.weighty = 1.0;
                                        otherDetailsPanel.add(jPanel9, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.gridwidth = 2;
                                        gridBagConstraints.gridheight = 2;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        bioDataPanel.add(otherDetailsPanel, gridBagConstraints);

                                        otherPatientDetailsPanel.setBackground(new java.awt.Color(0, 255, 204));
                                        otherPatientDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Contact and Localization Deails"));
                                        otherPatientDetailsPanel.setLayout(new java.awt.GridBagLayout());

                                        nhifChbx.setBackground(new java.awt.Color(0, 255, 204));
                                        nhifChbx.setText("NHIF Registered");
                                        nhifChbx.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 9;
                                        gridBagConstraints.gridwidth = 4;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        otherPatientDetailsPanel.add(nhifChbx, gridBagConstraints);

                                        jLabel51.setText("NHIF Claim Number");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 10;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        otherPatientDetailsPanel.add(jLabel51, gridBagConstraints);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 10;
                                        gridBagConstraints.gridwidth = 3;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 3.0;
                                        gridBagConstraints.weighty = 1.0;
                                        otherPatientDetailsPanel.add(nhifNumberTxt, gridBagConstraints);

                                        idNoLbl.setText("ID/NO or PassPort No.");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        otherPatientDetailsPanel.add(idNoLbl, gridBagConstraints);

                                        idPassportTxt.setEditable(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.gridwidth = 3;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        otherPatientDetailsPanel.add(idPassportTxt, gridBagConstraints);

                                        passPortNoLbl.setText("Email Address");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 6;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        otherPatientDetailsPanel.add(passPortNoLbl, gridBagConstraints);

                                        emailAddTxt.setEditable(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 6;
                                        gridBagConstraints.gridwidth = 3;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 5.0;
                                        gridBagConstraints.weighty = 1.0;
                                        otherPatientDetailsPanel.add(emailAddTxt, gridBagConstraints);

                                        jLabel5722.setBackground(new java.awt.Color(255, 204, 255));
                                        jLabel5722.setText("Postal Address");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 7;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        otherPatientDetailsPanel.add(jLabel5722, gridBagConstraints);

                                        jTextField5.setEditable(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 7;
                                        gridBagConstraints.gridwidth = 3;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        otherPatientDetailsPanel.add(jTextField5, gridBagConstraints);

                                        jLabel26.setBackground(new java.awt.Color(255, 0, 0));
                                        jLabel26.setText("Cell Phone (Mobile) No:");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        otherPatientDetailsPanel.add(jLabel26, gridBagConstraints);

                                        jTextField5821.setEditable(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.gridwidth = 3;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        otherPatientDetailsPanel.add(jTextField5821, gridBagConstraints);

                                        jLabel32.setForeground(new java.awt.Color(255, 0, 51));
                                        jLabel32.setText("Home Village");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 8;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        otherPatientDetailsPanel.add(jLabel32, gridBagConstraints);

                                        jLabel31.setText("Location (Sub-Regional Br.)");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 5;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        otherPatientDetailsPanel.add(jLabel31, gridBagConstraints);

                                        locationTxt.setEditable(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 5;
                                        gridBagConstraints.gridwidth = 3;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        otherPatientDetailsPanel.add(locationTxt, gridBagConstraints);

                                        currentResidenceTxt.setEditable(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 8;
                                        gridBagConstraints.gridwidth = 3;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        otherPatientDetailsPanel.add(currentResidenceTxt, gridBagConstraints);

                                        countyofBirthLbl.setText("County of Birth");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 3;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        otherPatientDetailsPanel.add(countyofBirthLbl, gridBagConstraints);

                                        residenceCountyLbl.setText("County of Residence");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 4;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        otherPatientDetailsPanel.add(residenceCountyLbl, gridBagConstraints);

                                        idNoLbl1.setForeground(new java.awt.Color(255, 51, 153));
                                        idNoLbl1.setText("Nationality");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        otherPatientDetailsPanel.add(idNoLbl1, gridBagConstraints);

                                        nationalityCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT country_name FROM pb_country ORDER BY 1"));
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        otherPatientDetailsPanel.add(nationalityCmbx, gridBagConstraints);

                                        countyofBirthCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT county_name FROM pb_county ORDER BY 1"));
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 3;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        otherPatientDetailsPanel.add(countyofBirthCmbx, gridBagConstraints);

                                        countyofResidenceCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT county_name FROM pb_county ORDER BY 1"));
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 4;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        otherPatientDetailsPanel.add(countyofResidenceCmbx, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 2;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.gridheight = 2;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        bioDataPanel.add(otherPatientDetailsPanel, gridBagConstraints);

                                        billindDetailsTabbedPane.addTab("Patient Bio Data", bioDataPanel);

                                        jPanel2.setLayout(new java.awt.GridBagLayout());

                                        jPanel5.setLayout(new java.awt.GridBagLayout());

                                        jLabel61.setForeground(new java.awt.Color(255, 51, 51));
                                        jLabel61.setText("Information Source");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 10;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        jPanel5.add(jLabel61, gridBagConstraints);

                                        informationSourceCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT info_name FROM pb_information ORDER BY info_name"));
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 10;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        jPanel5.add(informationSourceCmbx, gridBagConstraints);

                                        jLabel21.setText("Education Level");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 11;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        jPanel5.add(jLabel21, gridBagConstraints);

                                        educationLevelCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT edu_name FROM pb_education ORDER BY edu_name"));
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 11;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                                        jPanel5.add(educationLevelCmbx, gridBagConstraints);

                                        jLabel35.setText("Occupation");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 12;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        jPanel5.add(jLabel35, gridBagConstraints);

                                        occupationCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT occupations FROM pb_occupation ORDER BY occupations"));
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 12;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                                        jPanel5.add(occupationCmbx, gridBagConstraints);

                                        jLabel38.setText("Religion");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 13;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        jPanel5.add(jLabel38, gridBagConstraints);

                                        religionCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT religion_name FROM pb_religion union select '-' as religion_name ORDER BY religion_name"));
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 13;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                                        jPanel5.add(religionCmbx, gridBagConstraints);

                                        nhifPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
                                        nhifPanel.setLayout(new java.awt.GridBagLayout());
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridwidth = 2;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        jPanel5.add(nhifPanel, gridBagConstraints);

                                        jLabel52.setText("Employer");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 14;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        jPanel5.add(jLabel52, gridBagConstraints);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 14;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                                        jPanel5.add(employerTxt, gridBagConstraints);

                                        jLabel53.setText("Employer Telephone");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 15;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        jPanel5.add(jLabel53, gridBagConstraints);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 15;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                                        jPanel5.add(employerTelTxt, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        jPanel2.add(jPanel5, gridBagConstraints);

                                        jPanel8.setLayout(new java.awt.GridBagLayout());

                                        jLabel4.setText("NOK County of Residence");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 8;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        jPanel8.add(jLabel4, gridBagConstraints);

                                        jTextField19.setEditable(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 8;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                                        jPanel8.add(jTextField19, gridBagConstraints);

                                        jLabel5.setText("District (Regional Branch)");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 9;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        jPanel8.add(jLabel5, gridBagConstraints);

                                        districtCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT DISTINCT district_name FROM pb_district ORDER BY district_name"));
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 9;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                                        jPanel8.add(districtCmbx, gridBagConstraints);

                                        jLabel33.setText("Name of Chief");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 12;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        jPanel8.add(jLabel33, gridBagConstraints);

                                        jTextField25.setEditable(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 12;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                                        jPanel8.add(jTextField25, gridBagConstraints);

                                        jLabel34.setText("Name of Sub Chief");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 13;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        jPanel8.add(jLabel34, gridBagConstraints);

                                        jTextField26.setEditable(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 13;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                                        jPanel8.add(jTextField26, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        jPanel2.add(jPanel8, gridBagConstraints);

                                        billindDetailsTabbedPane.addTab("Other Details (Demographic Information)", jPanel2);

                                        insuranceDetailsPanel.setLayout(new java.awt.GridBagLayout());

                                        insurerDetailsPanel.setBackground(new java.awt.Color(255, 239, 255));
                                        insurerDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Select type of scheme & then select staff no", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 11), new java.awt.Color(102, 102, 255))); // NOI18N
                                        insurerDetailsPanel.setMinimumSize(new java.awt.Dimension(100, 143));
                                        insurerDetailsPanel.setPreferredSize(new java.awt.Dimension(100, 129));
                                        insurerDetailsPanel.addFocusListener(new java.awt.event.FocusAdapter() {
                                            public void focusGained(java.awt.event.FocusEvent evt) {
                                                insurerDetailsPanelFocusGained(evt);
                                            }
                                        });
                                        insurerDetailsPanel.setLayout(new java.awt.GridBagLayout());

                                        jLabel10.setForeground(new java.awt.Color(255, 102, 153));
                                        jLabel10.setText("Card Holder Name");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 2;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        insurerDetailsPanel.add(jLabel10, gridBagConstraints);

                                        jLabel12.setForeground(new java.awt.Color(255, 102, 204));
                                        jLabel12.setText("Scheme Member No.");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 2;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        insurerDetailsPanel.add(jLabel12, gridBagConstraints);

                                        jLabel17.setText("Expiry Date");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 4;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        insurerDetailsPanel.add(jLabel17, gridBagConstraints);

                                        jLabel14.setText("Insurer/Payer");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        insurerDetailsPanel.add(jLabel14, gridBagConstraints);

                                        jTextField2.setEditable(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        insurerDetailsPanel.add(jTextField2, gridBagConstraints);

                                        jLabel18.setText("Scheme Name");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        insurerDetailsPanel.add(jLabel18, gridBagConstraints);

                                        jPanel64.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                                        jPanel64.setMinimumSize(new java.awt.Dimension(82, 37));
                                        jPanel64.setLayout(new java.awt.GridBagLayout());
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 200.0;
                                        gridBagConstraints.weighty = 1.0;
                                        jPanel64.add(jTextField36, gridBagConstraints);

                                        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
                                        searchButton.setToolTipText("Search");
                                        searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                                        searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
                                        searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
                                        searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                                        searchButton.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                searchButtonActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 2;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        jPanel64.add(searchButton, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
                                        insurerDetailsPanel.add(jPanel64, gridBagConstraints);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
                                        insurerDetailsPanel.add(jTextField13, gridBagConstraints);

                                        jPanel641.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                                        jPanel641.setMinimumSize(new java.awt.Dimension(82, 37));
                                        jPanel641.setPreferredSize(new java.awt.Dimension(20, 20));
                                        jPanel641.setLayout(new java.awt.GridBagLayout());

                                        jTextField361.setEditable(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 200.0;
                                        gridBagConstraints.weighty = 1.0;
                                        jPanel641.add(jTextField361, gridBagConstraints);

                                        searchButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
                                        searchButton2.setToolTipText("Search");
                                        searchButton2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                                        searchButton2.setMaximumSize(new java.awt.Dimension(74, 53));
                                        searchButton2.setMinimumSize(new java.awt.Dimension(30, 53));
                                        searchButton2.setPreferredSize(new java.awt.Dimension(20, 9));
                                        searchButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                                        searchButton2.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                searchButton2ActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 2;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        jPanel641.add(searchButton2, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        insurerDetailsPanel.add(jPanel641, gridBagConstraints);

                                        jPanel7.setBackground(new java.awt.Color(204, 204, 255));
                                        jPanel7.setLayout(new java.awt.GridBagLayout());

                                        jCheckBox4.setBackground(new java.awt.Color(204, 204, 255));
                                        buttonGroup2.add(jCheckBox4);
                                        jCheckBox4.setSelected(true);
                                        jCheckBox4.setText("Search By No");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        jPanel7.add(jCheckBox4, gridBagConstraints);

                                        jCheckBox5.setBackground(new java.awt.Color(204, 204, 255));
                                        buttonGroup2.add(jCheckBox5);
                                        jCheckBox5.setText("Search By Name");
                                        jPanel7.add(jCheckBox5, new java.awt.GridBagConstraints());

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
                                        insurerDetailsPanel.add(jPanel7, gridBagConstraints);

                                        jCheckBox6.setBackground(new java.awt.Color(51, 255, 51));
                                        jCheckBox6.setText("View Account Status");
                                        jCheckBox6.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                jCheckBox6ActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 0;
                                        insurerDetailsPanel.add(jCheckBox6, gridBagConstraints);

                                        jTextField18.setEditable(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 4;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        insurerDetailsPanel.add(jTextField18, gridBagConstraints);

                                        jLabel25.setText("Member Balance");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 2;
                                        gridBagConstraints.gridy = 3;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        insurerDetailsPanel.add(jLabel25, gridBagConstraints);

                                        jTextField12.setEditable(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 3;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
                                        insurerDetailsPanel.add(jTextField12, gridBagConstraints);

                                        jLabel19.setText("Scheme A/C No.");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 3;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        insurerDetailsPanel.add(jLabel19, gridBagConstraints);

                                        jTextField15.setEditable(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 3;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        insurerDetailsPanel.add(jTextField15, gridBagConstraints);

                                        cardSerialNoLbl.setText("Card Serial No.");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 2;
                                        gridBagConstraints.gridy = 4;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        insurerDetailsPanel.add(cardSerialNoLbl, gridBagConstraints);

                                        cardSerialNoTxt.setEditable(false);
                                        cardSerialNoTxt.setPreferredSize(new java.awt.Dimension(120, 20));
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 4;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
                                        insurerDetailsPanel.add(cardSerialNoTxt, gridBagConstraints);

                                        jLabel24.setText("Card Abbr.");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 5;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        insurerDetailsPanel.add(jLabel24, gridBagConstraints);

                                        jTextField17.setEditable(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 5;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        insurerDetailsPanel.add(jTextField17, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.gridwidth = 6;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.ipadx = 5;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        insuranceDetailsPanel.add(insurerDetailsPanel, gridBagConstraints);

                                        billindDetailsTabbedPane.addTab("Medical Insurance Billing Details", insuranceDetailsPanel);

                                        creditCardDetailsPanel.setLayout(new java.awt.GridBagLayout());

                                        cardDetailsPanel.setBackground(new java.awt.Color(219, 243, 255));
                                        cardDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Select card name then enter card number and the expiry date "));
                                        cardDetailsPanel.setEnabled(false);
                                        cardDetailsPanel.setLayout(new java.awt.GridBagLayout());

                                        jLabel7.setText("Card Name");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        cardDetailsPanel.add(jLabel7, gridBagConstraints);

                                        jComboBox3.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT card_name FROM pb_creditcard_types ORDER By card_name"));
                                        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                jComboBox3ActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        cardDetailsPanel.add(jComboBox3, gridBagConstraints);

                                        jTextField7.setEditable(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        cardDetailsPanel.add(jTextField7, gridBagConstraints);

                                        jLabel8.setText("Issurer");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        cardDetailsPanel.add(jLabel8, gridBagConstraints);

                                        jLabel9.setText("Card No.");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 2;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        cardDetailsPanel.add(jLabel9, gridBagConstraints);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                                        cardDetailsPanel.add(jTextField8, gridBagConstraints);

                                        jLabel15.setText("Expiry Date");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 2;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.weightx = 1.0;
                                        cardDetailsPanel.add(jLabel15, gridBagConstraints);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
                                        cardDetailsPanel.add(datePicker1, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.gridwidth = 6;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        creditCardDetailsPanel.add(cardDetailsPanel, gridBagConstraints);

                                        billindDetailsTabbedPane.addTab("Credit Card Details", creditCardDetailsPanel);

                                        rtaPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Road Traffic Accident Victim"));
                                        rtaPanel.setLayout(new java.awt.GridBagLayout());

                                        rtaMainPanel.setLayout(new java.awt.GridBagLayout());

                                        rtaTypeOfAccidentLbl.setText("Type of Accident");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        rtaMainPanel.add(rtaTypeOfAccidentLbl, gridBagConstraints);

                                        rtaModeofArrivalLbl.setText("Mode of Arrival");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 2;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        rtaMainPanel.add(rtaModeofArrivalLbl, gridBagConstraints);

                                        typeofAccidentCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "RTA", "Cyclist", "Assault", "Gender Violence", "Pedestrial", "Self Inflicted", "Other" }));
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        rtaMainPanel.add(typeofAccidentCmbx, gridBagConstraints);

                                        modeofArrivalCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Walking", "Carried", "Wheel Chair", "Stretcher", "Ambulance", "Others" }));
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        rtaMainPanel.add(modeofArrivalCmbx, gridBagConstraints);

                                        jLabel41.setText("Name of Police Officer");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        rtaMainPanel.add(jLabel41, gridBagConstraints);

                                        jLabel42.setText("Police Officer Force No.");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 2;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        rtaMainPanel.add(jLabel42, gridBagConstraints);

                                        jLabel43.setText("Police Station for Accident Scene");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        rtaMainPanel.add(jLabel43, gridBagConstraints);

                                        jLabel44.setText("Date and Time of Accident");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 2;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        rtaMainPanel.add(jLabel44, gridBagConstraints);

                                        jLabel46.setText("Accident Vehicle No.");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 2;
                                        gridBagConstraints.gridy = 3;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        rtaMainPanel.add(jLabel46, gridBagConstraints);

                                        jLabel47.setText("Name of Driver");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 3;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        rtaMainPanel.add(jLabel47, gridBagConstraints);

                                        jLabel48.setText("Driver's ID No.");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 2;
                                        gridBagConstraints.gridy = 4;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        rtaMainPanel.add(jLabel48, gridBagConstraints);

                                        jLabel49.setText("Driving License No.");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 4;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        rtaMainPanel.add(jLabel49, gridBagConstraints);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        rtaMainPanel.add(nameofPoliceOfficerTxt, gridBagConstraints);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        rtaMainPanel.add(policeStationTxt, gridBagConstraints);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        rtaMainPanel.add(policeForceNumberTxt, gridBagConstraints);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 3;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        rtaMainPanel.add(accidentVehicleNumberTxt, gridBagConstraints);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 4;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        rtaMainPanel.add(accidentDriverIDTxt, gridBagConstraints);

                                        driverNameTxt.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                driverNameTxtActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 3;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        rtaMainPanel.add(driverNameTxt, gridBagConstraints);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 4;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        rtaMainPanel.add(accidentDriverLicenseTxt, gridBagConstraints);

                                        try {
                                            java.text.DateFormat dateFormat = java.text.DateFormat.getDateInstance(java.text.DateFormat.MEDIUM);
                                            java.util.Date dateInstance = java.util.Calendar.getInstance().getTime();
                                            //        java.lang.String dateString2Parse = null;
                                            //        dateString2Parse = String.valueOf(dateInstance.getDate())+"-"+String.valueOf(dateInstance.getMonth()+1)+"-200"+String.valueOf(dateInstance.getYear()-100);

                                            java.util.Date formattedDate = dateFormat.parse(dateInstance.toLocaleString());
                                            System.out.println(dateFormat.format(formattedDate));
                                            javax.swing.SpinnerDateModel beginDate = new javax.swing.SpinnerDateModel(formattedDate, null, null,java.util.Calendar.DAY_OF_MONTH);
                                            //   javax.swing.SpinnerDateModel endDate = new javax.swing.SpinnerDateModel(formattedDate, null, null,java.util.Calendar.DAY_OF_MONTH);

                                            accidentTimeDateSpinner = new javax.swing.JSpinner(beginDate);
                                            /*
                                            * //     endDateSpinner = new javax.swing.JSpinner(endDate);

                                            gridBagConstraints = new java.awt.GridBagConstraints();
                                            gridBagConstraints.gridx = 3;
                                            gridBagConstraints.gridy = 2;
                                            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
                                            gridBagConstraints.weightx = 1.0;
                                            gridBagConstraints.weighty = 1.0;
                                            rtaMainPanel.add(accidentTimeDateSpinner, gridBagConstraints);
                                            */
                                        } catch(java.text.ParseException parseExec) {

                                            javax.swing.JOptionPane.showMessageDialog(new javax.swing.JFrame(), parseExec.getMessage());

                                        }
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        rtaMainPanel.add(accidentTimeDateSpinner, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1000.0;
                                        rtaPanel.add(rtaMainPanel, gridBagConstraints);

                                        rtaButtonPanel.setLayout(new java.awt.GridBagLayout());
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 500.0;
                                        gridBagConstraints.weighty = 1.0;
                                        rtaButtonPanel.add(rtaSpacerLbl, gridBagConstraints);

                                        jButton6.setText("Record RTA details");
                                        jButton6.setEnabled(false);
                                        jButton6.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                jButton6ActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        rtaButtonPanel.add(jButton6, gridBagConstraints);

                                        jButton7.setText("Clear RTA fields");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        rtaButtonPanel.add(jButton7, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        rtaPanel.add(rtaButtonPanel, gridBagConstraints);

                                        billindDetailsTabbedPane.addTab("RTA", rtaPanel);

                                        diagnosisPanel.setLayout(new java.awt.GridBagLayout());

                                        diagnosisTPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter diagnosis information here"));
                                        diagnosisTPane.setEnabled(false);
                                        diagnosisTPane.setLayout(new java.awt.GridBagLayout());

                                        diseaseChooserPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                                        diseaseChooserPanel.setMaximumSize(new java.awt.Dimension(4, 19));
                                        diseaseChooserPanel.setMinimumSize(new java.awt.Dimension(50, 29));
                                        diseaseChooserPanel.setPreferredSize(new java.awt.Dimension(48, 20));
                                        diseaseChooserPanel.setLayout(new java.awt.GridBagLayout());

                                        diseaseFieldTxt.setEditable(false);
                                        diseaseFieldTxt.setMinimumSize(new java.awt.Dimension(5, 19));
                                        diseaseFieldTxt.setPreferredSize(new java.awt.Dimension(5, 19));
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 200.0;
                                        gridBagConstraints.weighty = 1.0;
                                        diseaseChooserPanel.add(diseaseFieldTxt, gridBagConstraints);

                                        searchButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
                                        searchButton3.setToolTipText("Search");
                                        searchButton3.setEnabled(false);
                                        searchButton3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                                        searchButton3.setMaximumSize(new java.awt.Dimension(40, 25));
                                        searchButton3.setMinimumSize(new java.awt.Dimension(40, 25));
                                        searchButton3.setPreferredSize(new java.awt.Dimension(40, 25));
                                        searchButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                                        searchButton3.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                searchButton3ActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        diseaseChooserPanel.add(searchButton3, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 100.0;
                                        gridBagConstraints.weighty = 1.0;
                                        diagnosisTPane.add(diseaseChooserPanel, gridBagConstraints);

                                        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder("Diseases/Diagnosis table"));

                                        diseaseTbl.setModel(new javax.swing.table.DefaultTableModel(
                                            new Object [][] {
                                                {null, null, null, null},
                                                {null, null, null, null},
                                                {null, null, null, null},
                                                {null, null, null, null},
                                                {null, null, null, null},
                                                {null, null, null, null},
                                                {null, null, null, null},
                                                {null, null, null, null},
                                                {null, null, null, null},
                                                {null, null, null, null},
                                                {null, null, null, null},
                                                {null, null, null, null},
                                                {null, null, null, null},
                                                {null, null, null, null},
                                                {null, null, null, null},
                                                {null, null, null, null},
                                                {null, null, null, null},
                                                {null, null, null, null},
                                                {null, null, null, null},
                                                {null, null, null, null}
                                            },
                                            new String [] {
                                                "Disease Code", "Disease Description/Name", "Specific Information", "Other Remarks"
                                            }
                                        ));
                                        jScrollPane1.setViewportView(diseaseTbl);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.gridwidth = 5;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1000.0;
                                        diagnosisTPane.add(jScrollPane1, gridBagConstraints);

                                        jLabel36.setText("Select Disease/Condition here");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        diagnosisTPane.add(jLabel36, gridBagConstraints);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 2;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 5.0;
                                        gridBagConstraints.weighty = 1.0;
                                        diagnosisTPane.add(jLabel37, gridBagConstraints);

                                        diseaseSearchBtngrp.add(diseaseSearchCodeRbtn);
                                        diseaseSearchCodeRbtn.setSelected(true);
                                        diseaseSearchCodeRbtn.setText("Search by disease code");
                                        diseaseSearchCodeRbtn.setEnabled(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        diagnosisTPane.add(diseaseSearchCodeRbtn, gridBagConstraints);

                                        diseaseSearchBtngrp.add(diseaseSearchDescriptionRbtn);
                                        diseaseSearchDescriptionRbtn.setText("Search by disease name/description");
                                        diseaseSearchDescriptionRbtn.setEnabled(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        diagnosisTPane.add(diseaseSearchDescriptionRbtn, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1000.0;
                                        diagnosisPanel.add(diagnosisTPane, gridBagConstraints);

                                        diagnosisActionsPanel.setLayout(new java.awt.GridBagLayout());

                                        diagnosisBtn.setText("Save disgnosis");
                                        diagnosisBtn.setEnabled(false);
                                        diagnosisBtn.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                diagnosisBtnActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        diagnosisActionsPanel.add(diagnosisBtn, gridBagConstraints);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.weightx = 1000.0;
                                        gridBagConstraints.weighty = 1.0;
                                        diagnosisActionsPanel.add(spacerLbl, gridBagConstraints);

                                        closeBtn.setText("Close");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 2;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        diagnosisActionsPanel.add(closeBtn, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        diagnosisPanel.add(diagnosisActionsPanel, gridBagConstraints);

                                        billindDetailsTabbedPane.addTab("Diagnosis", diagnosisPanel);

                                        reportsPanel.setLayout(new java.awt.GridBagLayout());

                                        reportsHeaderPanel.setLayout(new java.awt.GridBagLayout());

                                        startDatePicker.setBorder(javax.swing.BorderFactory.createTitledBorder("Select start date"));
                                        startDatePicker.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                                            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                                                startDatePickerPropertyChange(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        reportsHeaderPanel.add(startDatePicker, gridBagConstraints);

                                        endDatePicker.setBorder(javax.swing.BorderFactory.createTitledBorder("Select end date"));
                                        endDatePicker.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
                                            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                                                endDatePickerPropertyChange(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        reportsHeaderPanel.add(endDatePicker, gridBagConstraints);

                                        patientSpecialityCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "SELECT '--ALL--' as department UNION SELECT DISTINCT clinic as department from hp_patient_visit ORDER BY 1")
                                        );
                                        patientSpecialityCmbx.setBorder(javax.swing.BorderFactory.createTitledBorder("Select service specialty"));
                                        patientSpecialityCmbx.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                patientSpecialityCmbxActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 3.0;
                                        gridBagConstraints.weighty = 1.0;
                                        reportsHeaderPanel.add(patientSpecialityCmbx, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        reportsPanel.add(reportsHeaderPanel, gridBagConstraints);

                                        reportsMainPanel.setLayout(new java.awt.GridBagLayout());

                                        reportsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT DISTINCT patient_no, initcap(name) as patient_name, input_date::time(0) as registration_time, comments as NEW_OR_REVISIT, test as home_address, department as clinic, payment as pay_mode, age, gender, marital_status, clinic, user_name as registrar from hp_patient_visit WHERE date = current_date order by 3")
                                        );
                                        reportsScrollPane.setViewportView(reportsTable);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        reportsMainPanel.add(reportsScrollPane, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 100.0;
                                        reportsPanel.add(reportsMainPanel, gridBagConstraints);

                                        reportsActionPanel.setLayout(new java.awt.GridBagLayout());

                                        refreshBtn.setText("Refresh report");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 0;
                                        reportsActionPanel.add(refreshBtn, gridBagConstraints);

                                        reportsHelpBtn.setText("Get help");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 2;
                                        gridBagConstraints.gridy = 0;
                                        reportsActionPanel.add(reportsHelpBtn, gridBagConstraints);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 200.0;
                                        gridBagConstraints.weighty = 1.0;
                                        reportsActionPanel.add(reportsSpacerLbl, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        reportsPanel.add(reportsActionPanel, gridBagConstraints);

                                        billindDetailsTabbedPane.addTab("Report of registered patients", reportsPanel);

                                        mapsPanel.setLayout(new java.awt.GridBagLayout());

                                        mapPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Funsoft Healthcare Geographic Information System (GIS)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 2, 11), new java.awt.Color(102, 102, 255))); // NOI18N
                                        mapPanel1.setMapPosition(new java.awt.Point(9655, 8084));
                                        mapPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
                                            public void mouseClicked(java.awt.event.MouseEvent evt) {
                                                mapPanel1MouseClicked(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        mapsPanel.add(mapPanel1, gridBagConstraints);

                                        billindDetailsTabbedPane.addTab("Spatial Information/GIS MAPS", mapsPanel);

                                        previousPanel.setLayout(new java.awt.GridBagLayout());

                                        previousVisitsTable.setModel(new javax.swing.table.DefaultTableModel(
                                            new Object [][] {

                                            },
                                            new String [] {

                                            }
                                        ));
                                        previousVisitsScrollPane.setViewportView(previousVisitsTable);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        previousPanel.add(previousVisitsScrollPane, gridBagConstraints);

                                        billindDetailsTabbedPane.addTab("Previous Visits", previousPanel);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.gridwidth = 5;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 50.0;
                                        gridBagConstraints.weighty = 100.0;
                                        jPanel1.add(billindDetailsTabbedPane, gridBagConstraints);

                                        payModePanel.setBackground(new java.awt.Color(204, 255, 255));
                                        payModePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enter patient details (You can search by Admission/Patient number, ID number, Telephone Number or Next of Kin details)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 255))); // NOI18N
                                        payModePanel.setLayout(new java.awt.GridBagLayout());

                                        branchTxt.setEditable(false);
                                        branchTxt.addComponentListener(new java.awt.event.ComponentAdapter() {
                                            public void componentShown(java.awt.event.ComponentEvent evt) {
                                                branchTxtComponentShown(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
                                        payModePanel.add(branchTxt, gridBagConstraints);

                                        jLabel11.setText("Branch");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 2;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        payModePanel.add(jLabel11, gridBagConstraints);

                                        jLabel6.setText("Search From IP");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        payModePanel.add(jLabel6, gridBagConstraints);

                                        jPanel61.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                                        jPanel61.setPreferredSize(new java.awt.Dimension(48, 20));
                                        jPanel61.setLayout(new java.awt.GridBagLayout());

                                        jTextField3611.setEditable(false);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 200.0;
                                        gridBagConstraints.weighty = 1.0;
                                        jPanel61.add(jTextField3611, gridBagConstraints);

                                        searchButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
                                        searchButton11.setToolTipText("Search");
                                        searchButton11.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                                        searchButton11.setMaximumSize(new java.awt.Dimension(40, 25));
                                        searchButton11.setMinimumSize(new java.awt.Dimension(40, 25));
                                        searchButton11.setPreferredSize(new java.awt.Dimension(30, 22));
                                        searchButton11.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                                        searchButton11.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                searchButton11ActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        jPanel61.add(searchButton11, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 2.0;
                                        gridBagConstraints.weighty = 1.0;
                                        payModePanel.add(jPanel61, gridBagConstraints);

                                        jLabel1.setForeground(new java.awt.Color(255, 51, 153));
                                        jLabel1.setText("Payment Mode");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 2;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        payModePanel.add(jLabel1, gridBagConstraints);

                                        paymentModeCmbx.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select DISTINCT initcap(payment_mode) as payment_mode from pb_paymentmodes order by payment_mode"));
                                        paymentModeCmbx.setSelectedItem("Cash");
                                        paymentModeCmbx.setPreferredSize(new java.awt.Dimension(130, 20));
                                        paymentModeCmbx.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                paymentModeCmbxActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 3;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 30);
                                        payModePanel.add(paymentModeCmbx, gridBagConstraints);

                                        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                                        jPanel6.setMaximumSize(new java.awt.Dimension(4, 19));
                                        jPanel6.setMinimumSize(new java.awt.Dimension(50, 29));
                                        jPanel6.setPreferredSize(new java.awt.Dimension(48, 20));
                                        jPanel6.setLayout(new java.awt.GridBagLayout());

                                        patientNumberTxt.setMinimumSize(new java.awt.Dimension(5, 19));
                                        patientNumberTxt.setPreferredSize(new java.awt.Dimension(5, 19));
                                        patientNumberTxt.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                patientNumberTxtActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 200.0;
                                        gridBagConstraints.weighty = 1.0;
                                        jPanel6.add(patientNumberTxt, gridBagConstraints);

                                        searchButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
                                        searchButton1.setToolTipText("Search");
                                        searchButton1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
                                        searchButton1.setMaximumSize(new java.awt.Dimension(40, 25));
                                        searchButton1.setMinimumSize(new java.awt.Dimension(40, 25));
                                        searchButton1.setPreferredSize(new java.awt.Dimension(40, 25));
                                        searchButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                                        searchButton1.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                searchButton1ActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        jPanel6.add(searchButton1, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 2.0;
                                        gridBagConstraints.weighty = 1.0;
                                        payModePanel.add(jPanel6, gridBagConstraints);

                                        jLabel572.setForeground(new java.awt.Color(255, 51, 153));
                                        jLabel572.setText("Patient Hospital No./ID");
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
                                        payModePanel.add(jLabel572, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.gridwidth = 5;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        jPanel1.add(payModePanel, gridBagConstraints);

                                        registrationStatusLbl.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
                                        registrationStatusLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 4;
                                        gridBagConstraints.gridwidth = 5;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        jPanel1.add(registrationStatusLbl, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.gridwidth = 6;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.ipadx = 5;
                                        gridBagConstraints.ipady = 5;
                                        gridBagConstraints.weightx = 3.0;
                                        gridBagConstraints.weighty = 10.0;
                                        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
                                        mainPanel.add(jPanel1, gridBagConstraints);

                                        buttonPanel.setBackground(new java.awt.Color(204, 204, 255));
                                        buttonPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
                                        buttonPanel.setMinimumSize(new java.awt.Dimension(80, 189));
                                        buttonPanel.setPreferredSize(new java.awt.Dimension(80, 189));
                                        buttonPanel.addHierarchyListener(new java.awt.event.HierarchyListener() {
                                            public void hierarchyChanged(java.awt.event.HierarchyEvent evt) {
                                                buttonPanelHierarchyChanged(evt);
                                            }
                                        });
                                        buttonPanel.setLayout(new java.awt.GridBagLayout());

                                        saveRegistrationBtn.setMnemonic('S');
                                        saveRegistrationBtn.setText("Save file data");
                                        saveRegistrationBtn.setToolTipText("Click here to enter data");
                                        saveRegistrationBtn.setMinimumSize(new java.awt.Dimension(30, 25));
                                        saveRegistrationBtn.setPreferredSize(new java.awt.Dimension(30, 25));
                                        saveRegistrationBtn.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
                                            public void mouseMoved(java.awt.event.MouseEvent evt) {
                                                saveRegistrationBtnMouseMoved(evt);
                                            }
                                        });
                                        saveRegistrationBtn.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                saveRegistrationBtnActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 0;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        buttonPanel.add(saveRegistrationBtn, gridBagConstraints);

                                        savePrintRegistrationBtn.setMnemonic('P');
                                        savePrintRegistrationBtn.setText("Save file & print");
                                        savePrintRegistrationBtn.setMaximumSize(new java.awt.Dimension(25, 25));
                                        savePrintRegistrationBtn.setMinimumSize(new java.awt.Dimension(30, 25));
                                        savePrintRegistrationBtn.setPreferredSize(new java.awt.Dimension(30, 25));
                                        savePrintRegistrationBtn.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                savePrintRegistrationBtnActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        buttonPanel.add(savePrintRegistrationBtn, gridBagConstraints);

                                        editFileBtn.setMnemonic('E');
                                        editFileBtn.setText("Edit file data");
                                        editFileBtn.setToolTipText("Click here to edit data");
                                        editFileBtn.setMinimumSize(new java.awt.Dimension(30, 25));
                                        editFileBtn.setPreferredSize(new java.awt.Dimension(30, 25));
                                        editFileBtn.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                editFileBtnActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 8;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        buttonPanel.add(editFileBtn, gridBagConstraints);

                                        clearFieldsBtn.setMnemonic('l');
                                        clearFieldsBtn.setText("Clear form fields");
                                        clearFieldsBtn.setToolTipText("Click here to clear fields");
                                        clearFieldsBtn.setMinimumSize(new java.awt.Dimension(30, 25));
                                        clearFieldsBtn.setPreferredSize(new java.awt.Dimension(30, 25));
                                        clearFieldsBtn.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                clearFieldsBtnActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 9;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        buttonPanel.add(clearFieldsBtn, gridBagConstraints);

                                        closeFormBtn.setMnemonic('c');
                                        closeFormBtn.setText("Close form");
                                        closeFormBtn.setToolTipText("Click here to close window");
                                        closeFormBtn.setMinimumSize(new java.awt.Dimension(30, 25));
                                        closeFormBtn.setPreferredSize(new java.awt.Dimension(30, 25));
                                        closeFormBtn.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                closeFormBtnActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 10;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        buttonPanel.add(closeFormBtn, gridBagConstraints);

                                        helpBtn.setMnemonic('h');
                                        helpBtn.setText("Help");
                                        helpBtn.setMinimumSize(new java.awt.Dimension(30, 25));
                                        helpBtn.setPreferredSize(new java.awt.Dimension(30, 25));
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 11;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        buttonPanel.add(helpBtn, gridBagConstraints);

                                        readSmartCardBtn.setText("Read Smart Card");
                                        readSmartCardBtn.setMinimumSize(new java.awt.Dimension(50, 25));
                                        readSmartCardBtn.setPreferredSize(new java.awt.Dimension(50, 25));
                                        readSmartCardBtn.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                readSmartCardBtnActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 3;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        buttonPanel.add(readSmartCardBtn, gridBagConstraints);

                                        reprintFileBtn.setMnemonic('R');
                                        reprintFileBtn.setText("Reprint file data");
                                        reprintFileBtn.setMaximumSize(new java.awt.Dimension(25, 25));
                                        reprintFileBtn.setMinimumSize(new java.awt.Dimension(30, 25));
                                        reprintFileBtn.setPreferredSize(new java.awt.Dimension(30, 25));
                                        reprintFileBtn.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                reprintFileBtnActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 2;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        buttonPanel.add(reprintFileBtn, gridBagConstraints);

                                        scanDocumentBtn.setText("Scan Document");
                                        scanDocumentBtn.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                scanDocumentBtnActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 4;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        buttonPanel.add(scanDocumentBtn, gridBagConstraints);

                                        bookingBtn.setText("Booking of Patient");
                                        bookingBtn.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                bookingBtnActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 7;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        buttonPanel.add(bookingBtn, gridBagConstraints);

                                        webCameraPanel.setBackground(new java.awt.Color(204, 204, 255));
                                        webCameraPanel.setBorder(new javax.swing.border.MatteBorder(null));
                                        webCameraPanel.setMaximumSize(new java.awt.Dimension(142, 37));
                                        webCameraPanel.setLayout(new java.awt.GridBagLayout());

                                        webCamPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                                        webCamPanel.setMaximumSize(new java.awt.Dimension(142, 37));
                                        webCamPanel.setLayout(new java.awt.GridBagLayout());
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridwidth = 2;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 10.0;
                                        webCameraPanel.add(webCamPanel, gridBagConstraints);

                                        startBtn.setText("Start");
                                        startBtn.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                startBtnActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        webCameraPanel.add(startBtn, gridBagConstraints);

                                        takeSnapBtn.setText("Take Snap");
                                        takeSnapBtn.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                takeSnapBtnActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 1;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        webCameraPanel.add(takeSnapBtn, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 5;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 2.0;
                                        gridBagConstraints.weighty = 20.0;
                                        buttonPanel.add(webCameraPanel, gridBagConstraints);

                                        fingerPrintReaderBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/fingerprint_images.jpg"))); // NOI18N
                                        fingerPrintReaderBtn.setText("Finger Print Reader");
                                        fingerPrintReaderBtn.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
                                        fingerPrintReaderBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                                        fingerPrintReaderBtn.addActionListener(new java.awt.event.ActionListener() {
                                            public void actionPerformed(java.awt.event.ActionEvent evt) {
                                                fingerPrintReaderBtnActionPerformed(evt);
                                            }
                                        });
                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 0;
                                        gridBagConstraints.gridy = 6;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        buttonPanel.add(fingerPrintReaderBtn, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.gridx = 6;
                                        gridBagConstraints.gridy = 1;
                                        gridBagConstraints.gridheight = 9;
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        mainPanel.add(buttonPanel, gridBagConstraints);

                                        gridBagConstraints = new java.awt.GridBagConstraints();
                                        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                                        gridBagConstraints.weightx = 1.0;
                                        gridBagConstraints.weighty = 1.0;
                                        getContentPane().add(mainPanel, gridBagConstraints);

                                        setBounds(0, 0, 1244, 550);
                                    }// </editor-fold>//GEN-END:initComponents

    private void reprintFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reprintFileBtnActionPerformed

        int slipNo = 0;
        String rct = null;
        String selectedchkbx = null;
        String selectedchkbx1 = null;
        String receiptNo = null;
        String amt = null;

        if (this.jCheckBox2111.isSelected()) {
            selectedchkbx = jCheckBox2111.getText();
        } else {

            selectedchkbx = jCheckBox1111.getText();
        }

        if (this.jCheckBox2113.isSelected()) {
            selectedchkbx1 = jCheckBox2113.getText();
        } else {

            selectedchkbx1 = jCheckBox1113.getText();
        }

//        if (createNewFileRbtn.isSelected()) {
//            com.afrisoftech.reports.PatientFilePdf pFile = new com.afrisoftech.reports.PatientFilePdf();
//            pFile.PatientFilePdf(connectDB, patientNumberTxt.getText().toUpperCase(), firstNameTxt.getText().toUpperCase() + " " + surNameTxt.getText().toUpperCase(), datePickerYOB.getDate(), selectedchkbx.toUpperCase(), selectedchkbx1.toUpperCase(), ageTxt.getText().toUpperCase(), locationTxt.getText().toUpperCase(), currentResidenceTxt.getText().toUpperCase(), jTextField5.getText().toUpperCase(), jTextField5821.getText().toUpperCase(), nokNameTxt.getText().toUpperCase(), nokRelationShipCmbx.getSelectedItem().toString().toUpperCase(), jTextField20.getText().toUpperCase(), nokTelephoneTxt.getText().toUpperCase(), nokResidenceTxt.getText().toUpperCase());
//        }
        try {
            java.sql.Statement stmt11 = connectDB.createStatement();
            java.sql.ResultSet rset11 = stmt11.executeQuery("SELECT  description,receipt_no, debit  FROM ac_cash_collection where  patient_no='" + patientNumberTxt.getText() + "' and receipt_time::date >= current_date-1 ");
            while (rset11.next()) {
                receiptNo = rset11.getObject(2).toString();
                amt = rset11.getObject(3).toString();
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
            Logger.getLogger(PatientRegisterIntfr.class.getName()).log(Level.SEVERE, null, ex);
            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
        }

        selectedStatusgender = selectedchkbx;
        selectedStatus = selectedchkbx1;

        com.afrisoftech.reports.PatientRegFormPdf.connectDB = connectDB;
////        com.afrisoftech.reports.PatientRegFormPdf regForm = new com.afrisoftech.reports.PatientRegFormPdf();
////        regForm.callPdf(connectDB, patientNumberTxt.getText(), "OP");

//        // TODO add your handling code here:

    }//GEN-LAST:event_reprintFileBtnActionPerformed

    private void readSmartCardBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readSmartCardBtnActionPerformed
        residenceTxt.setText("");
        nokNameTxt.setText("");
        // jTextField14.setText("");
        jTextField5.setText("");
        jTextField7.setText("");
        jTextField8.setText("");
        jTextField5821.setText("");
        emailAddTxt.setText("");
        idPassportTxt.setText("");
        jTextField13.setText("");
        jTextField361.setText("");
        jTextField2.setText("");
        jTextField15.setText("");
        jTextField18.setText("");

        jTextField17.setText("");
        jTextField36.setText("");
        jTextField12.setText(null);
        jTextField13.setText("");
        cardSerialNoTxt.setText("");
        java.io.File xmlDocFile = null;
        //  try {

        // xmlDocFile = java.io.File.createTempFile("CLAIM"+biz.systempartners.claims.DateLables.getDateLabel()+"_", ".xml", new java.io.File(System.getProperty("docsdir")));
        xmlDocFile = new java.io.File(System.getProperty("docsdir"), "ForwardedCardData.xml");//.createTempFile("HospitalClaimsFile", ".xml", new java.io.File(System.getProperty("docsdir")));

        // } catch(java.io.IOException ioExec){
        //    ioExec.printStackTrace();
        // }
        biz.systempartners.claims.XMLClaimFile claimFile = new biz.systempartners.claims.XMLClaimFile();

        claimFile.processFile(xmlDocFile);

        //jTextField3.setText(claimFile.patientNumber);
        surNameTxt.setText(claimFile.patientSurName);
        firstNameTxt.setText(claimFile.patientForenames);
        paymentModeCmbx.setSelectedItem("Scheme");
        jTextField5.setText(claimFile.patientAddress);
        jTextField5821.setText(claimFile.patientTelephone);
        emailAddTxt.setText(claimFile.patientEmail);
        java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat();//.getInstance();
        dateFormat.applyPattern("yyyy-MM-dd");
        idPassportTxt.setText(claimFile.patientID);
        cardSerialNoTxt.setText(claimFile.cardNumber);

        if (claimFile.patientDOB != null) {
            try {
                datePickerYOB.setDate(dateFormat.parse(XMLClaimFile.patientDOB));
            } catch (ParseException ex) {
                ex.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
        jTextField13.setText(claimFile.medicalAidNumber);
        jTextField36.setText(claimFile.patientSurName + " " + claimFile.patientForenames);
        //  jTextField361.setText(claimFile.medicalAidCode);
        // jTextField2.setText(claimFile.medicalAidPlan);
        jTextField12.setText(claimFile.cardBalance);
        jTextField18.setText(claimFile.medicalAidExpiry);
        jTextField17.setText(claimFile.medicalAidCode);
        xmlDocFile.delete();

        claimFile.medicalAidCode = null;

        claimFile.patientSurName = null;
        claimFile.patientForenames = null;
        claimFile.patientAddress = null;
        claimFile.patientTelephone = null;
        claimFile.patientEmail = null;
        // java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat();//.getInstance();
        dateFormat.applyPattern("yyyy-MM-dd");
        claimFile.patientID = null;
        claimFile.cardNumber = null;

        if (claimFile.patientDOB != null) {
            try {
                datePickerYOB.setDate(dateFormat.parse(claimFile.patientDOB));
            } catch (ParseException ex) {
                ex.printStackTrace();
                javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
        claimFile.medicalAidNumber = null;
        claimFile.patientSurName = null;
        claimFile.patientForenames = null;
        claimFile.medicalAidCode = null;
        claimFile.medicalAidPlan = null;
        claimFile.cardBalance = null;
        claimFile.medicalAidExpiry = null;
        claimFile.medicalAidCode = null;

        /*
         * jButton3.setEnabled(false); java.io.File xmlDocFile = null;
         *
         * xmlDocFile = new
         * java.io.File(System.getProperty("docsdir"),"ForwardedCardData.xml");//.createTempFile("HospitalClaimsFile",
         * ".xml", new java.io.File(System.getProperty("docsdir")));
         *
         * biz.systempartners.claims.XMLClaimFile claimFile = new
         * biz.systempartners.claims.XMLClaimFile();
         *
         * claimFile.processFile(xmlDocFile);
         *
         * jTextField3.setText(claimFile.patientNumber);
         * jTextField21.setText(claimFile.patientSurName);
         * jTextField6.setText(claimFile.patientForenames);
         * jComboBox1.setSelectedItem("Scheme");
         * jTextField5.setText(claimFile.patientAddress);
         * jTextField5821.setText(claimFile.patientTelephone);
         * emailAddTxt.setText(claimFile.patientEmail);
         * java.text.SimpleDateFormat dateFormat = new
         * java.text.SimpleDateFormat();//.getInstance();
         * dateFormat.applyPattern("yyyy-MM-dd");
         *
         * if(claimFile.patientDOB != null) { try {
         * datePickerYOB.setDate(dateFormat.parse(claimFile.patientDOB)); }
         * catch (ParseException ex) { ex.printStackTrace();
         * javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage()); } }
         * jTextField13.setText(claimFile.cardNumber);
         * jTextField36.setText(claimFile.patientSurName+"
         * "+claimFile.patientForenames);
         * jTextField361.setText(claimFile.medicalAidCode);
         * jTextField2.setText(claimFile.medicalAidNumber);
         */
// TODO add your handling code here:
    }//GEN-LAST:event_readSmartCardBtnActionPerformed

    private void patientSearchDialogComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_patientSearchDialogComponentHidden
//        jSearchDialog.dispose();
// TODO add your handling code here:
    }//GEN-LAST:event_patientSearchDialogComponentHidden

    private void patientSearchTxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_patientSearchTxtFocusLost
        //      jSearchDialog.dispose();
// TODO add your handling code here:
    }//GEN-LAST:event_patientSearchTxtFocusLost

    private void branchTxtComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_branchTxtComponentShown
// Add your handling code here:
    }//GEN-LAST:event_branchTxtComponentShown

    private void jCheckBox10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox10ActionPerformed
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select rate from pb_operating_parameters where category ILIKE 'OP%'");
            while (rset.next()) {
                jTextField9.setText(rset.getObject(1).toString());
                System.out.println(jTextField9.getText());
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
        }   // Add your handling code here:
    }//GEN-LAST:event_jCheckBox10ActionPerformed

    private void jSearchTable3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable3MouseClicked

        inpatientActivation = true;
        String name = null;
        int pNo = 0;

        /*
         * jTextField72.setText(""); jTextField82.setText("");
         * jTextField91.setText(""); jTextField32.setText("");
         * jTextField42.setText("");
         */
        jTextField2.setText(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 0).toString());

        jTextField3611.setText(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 0).toString());
        firstNameTxt.setText(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 1).toString());
        surNameTxt.setText(jSearchTable3.getValueAt(jSearchTable3.getSelectedRow(), 2).toString());

        try {
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select nok,residence, date_part('year', age(now(),year_of_birth::timestamp)),address,sex,tel_no from hp_inpatient_register where patient_no ='" + jTextField3611.getText() + "'");
            while (rset.next()) {
                patientNumberTxt.setText(jTextField3611.getText());
                nokNameTxt.setText(dbObject.getDBObject(rset.getObject(1), "-"));
                residenceTxt.setText(dbObject.getDBObject(rset.getObject(2), "-"));
                ageTxt.setText(rset.getString(3)); //(dbObject.getDBObject(rset.getObject(3), "-"));
                jTextField5.setText(dbObject.getDBObject(rset.getObject(4), "-"));
                jTextField5821.setText(dbObject.getDBObject(rset.getObject(6), "-"));

                if (rset.getObject(5).toString().startsWith("M")) {
                    jCheckBox1111.setSelected(true);
                } else {
                    jCheckBox2111.setSelected(true);
                }
            }

        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
        }

        //   jButton301.setEnabled(true);
        jSearchDialog3.dispose();

        javax.swing.JOptionPane.showMessageDialog(this, "Patient Number [" + patientNumberTxt.getText() + "] outstanding bill status total : [" + com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(com.afrisoftech.lib.PatientAccountStatus.getOutstandillBill(connectDB, patientNumberTxt.getText()) + com.afrisoftech.lib.PatientAccountStatus.getPersonalDebtStatus(connectDB, patientNumberTxt.getText())) + "], Abscondment status bill : [" + com.afrisoftech.lib.PatientAccountStatus.getAbscondmentStatus(connectDB, patientNumberTxt.getText()) + "]");

        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable3MouseClicked

    private void jButton51ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton51ActionPerformed
        jSearchDialog3.dispose();// Add your handling code here:
    }//GEN-LAST:event_jButton51ActionPerformed

    private void jTextField1112CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1112CaretUpdate
        if (jTextField1112.getCaretPosition() < 3) {

            System.out.println("Nothing");
        } else {
            if (this.searchbyNameChkbx.isSelected()) {
                jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, (upper(second_name||' '||last_name)) as name,first_name AS surname from hp_inpatient_register where (upper(second_name||' '||first_name||' '||last_name)) ILIKE '%" + jTextField1112.getText().toString() + "%' ORDER BY second_name"));
                /*
                 * try { searchRowSet.execute("SELECT patient_no,
                 * (upper(second_name||' '||first_name||' '||last_name)) as name
                 * from hp_inpatient_register where (upper(second_name||'
                 * '||first_name||' '||last_name)) ILIKE
                 * '"+jTextField111.getText().toString()+"%' ORDER BY
                 * second_name");
                 *
                 * // searchRowSet.execute("SELECT patient_no,
                 * (upper(first_name||' '||second_name||' '||last_name)) as
                 * name, year_of_birth, residence from hp_inpatient_register
                 * where (upper(first_name||' '||second_name||' '||last_name))
                 * ILIKE '"+jTextField111.getText().toString()+"%' EXCEPT select
                 * patient_no,patient_name from hp_admission where patient_name
                 * ILIKE '"+jTextField111.getText().toString()+"%' ORDER BY
                 * name"); // searchRowSet.execute(); //
                 * searchRowSet.execute("SELECT patient_no, (upper(first_name||'
                 * '||second_name||' '||last_name)) as name, year_of_birth,
                 * residence from hp_patient_register where first_name '~
                 * '~"+jTextField11.getText()+"' order by name");
                 *
                 * jSearchTable.setModel(new
                 * org.netbeans.lib.sql.models.TableModel(searchRowSet, new
                 * org.netbeans.lib.sql.models.TableModel.Column[] { new
                 * org.netbeans.lib.sql.models.TableModel.Column("patient_no",
                 * "Patient no", false), new
                 * org.netbeans.lib.sql.models.TableModel.Column("name", "Name",
                 * false), // new
                 * org.netbeans.lib.sql.models.TableModel.Column("year_of_birth",
                 * "Year of birth", false), // new
                 * org.netbeans.lib.sql.models.TableModel.Column("residence",
                 * "Residence", false) }));
                 */
                jSearchTable3.setShowHorizontalLines(false);
                jSearchScrollPane3.setViewportView(jSearchTable3);

            } else {
                if (this.searchbyNumberChkbx.isSelected()) {
                    jSearchTable3.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, (upper(second_name||' '||last_name)) as name,first_name AS surname from hp_inpatient_register where patient_no ILIKE '%" + jTextField1112.getText().toString() + "%' ORDER BY second_name"));

                    /*
                     * try { searchRowSet.execute("SELECT patient_no,
                     * (upper(second_name||' '||first_name||' '||last_name)) as
                     * name from hp_inpatient_register where patient_no ILIKE
                     * '"+jTextField111.getText().toString()+"%' ORDER BY
                     * second_name");
                     *
                     * // searchRowSet.execute("SELECT patient_no,
                     * (upper(first_name||' '||second_name||' '||last_name)) as
                     * name, year_of_birth, residence from hp_inpatient_register
                     * where (upper(first_name||' '||second_name||'
                     * '||last_name)) ILIKE
                     * '"+jTextField111.getText().toString()+"%' EXCEPT select
                     * patient_no,patient_name from hp_admission where
                     * patient_name ILIKE
                     * '"+jTextField111.getText().toString()+"%' ORDER BY
                     * name"); // searchRowSet.execute(); //
                     * searchRowSet.execute("SELECT patient_no,
                     * (upper(first_name||' '||second_name||' '||last_name)) as
                     * name, year_of_birth, residence from hp_patient_register
                     * where first_name '~ '~"+jTextField11.getText()+"' order
                     * by name");
                     *
                     * jSearchTable.setModel(new
                     * org.netbeans.lib.sql.models.TableModel(searchRowSet, new
                     * org.netbeans.lib.sql.models.TableModel.Column[] { new
                     * org.netbeans.lib.sql.models.TableModel.Column("patient_no",
                     * "Patient no", false), new
                     * org.netbeans.lib.sql.models.TableModel.Column("name",
                     * "Name", false), // new
                     * org.netbeans.lib.sql.models.TableModel.Column("year_of_birth",
                     * "Year of birth", false), // new
                     * org.netbeans.lib.sql.models.TableModel.Column("residence",
                     * "Residence", false) }));
                     */
                    jSearchTable3.setShowHorizontalLines(false);
                    jSearchScrollPane3.setViewportView(jSearchTable3);

                }
            }
        }        // Add your handling code here:
    }//GEN-LAST:event_jTextField1112CaretUpdate

    private void searchButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton11ActionPerformed
        this.helpBtn.setVisible(true);
        searchButton3Clicked();        // Add your handling code here:
    }//GEN-LAST:event_searchButton11ActionPerformed
    private void searchButton3Clicked() {

        System.out.println("Showing dialog");

        java.awt.Point point = this.jTextField3611.getLocationOnScreen();

        jSearchDialog3.setSize(700, 200);

        jSearchDialog3.setLocation(point);

        jSearchDialog3.setVisible(true);

    }
    private void jCheckBox9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox9ActionPerformed
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select rate from pb_operating_parameters where category ILIKE 'SP%'");
            while (rset.next()) {
                jTextField9.setText(rset.getObject(1).toString());
                System.out.println(jTextField9.getText());
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
        }        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox9ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select rate from pb_operating_parameters where category ILIKE 'RV%'");
            while (rset.next()) {
                jTextField9.setText(rset.getObject(1).toString());
                System.out.println(jTextField9.getText());
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
            javax.swing.JOptionPane.showMessageDialog(this, sqe.getMessage());
        }        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void revisitRbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revisitRbtnActionPerformed
//        servicePointCmbx.setSelectedItem(defaultServicePoint);
        serviceStartTime = com.afrisoftech.lib.ServerTime.getSQLTimeStamp(connectDB);
        patientNumberTxt.grabFocus();
        paymentModeCmbx.setSelectedItem("Cash");
        patientCategoryCmbx.setSelectedItem("Above 5 Yrs".toUpperCase());
        savePrintRegistrationBtn.setEnabled(true);
        saveRegistrationBtn.setText("Save file data");
        registrationStatusLbl.setText("");
        saveRegistrationBtn.setEnabled(true);
        editFileBtn.setEnabled(true);
        savePrintRegistrationBtn.setEnabled(true);
        this.reVisit = false;

        searchbyNameChkbx.setEnabled(true);
        searchbyNumberChkbx.setEnabled(true);
        searchButton1.setEnabled(true);
        patientNumberTxt.setEditable(true);
        residenceTxt.setEditable(false);
        nokNameTxt.setEditable(false);
        //   datePickerYOB.setEditable(false);
        jTextField5.setEditable(false);
        jTextField7.setEditable(false);
        jTextField8.setEditable(false);
        jTextField5821.setEditable(false);
        jTextField2.setEditable(false);
        surNameTxt.setEditable(false);
        firstNameTxt.setEditable(false);

        jTextField19.setEditable(false);
        ageTxt.setEditable(false);
        locationTxt.setEditable(false);
        currentResidenceTxt.setEditable(false);
        jTextField25.setEditable(false);
        jTextField26.setEditable(false);
        idPassportTxt.setEditable(false);
        emailAddTxt.setEditable(false);
        jTextField20.setEditable(false);
        firstNameTxt.setEditable(false);
        nationalityCmbx.setEditable(false);
        nokResidenceTxt.setEditable(false);
        nokRelationShipCmbx.setEditable(false);
        nokTelephoneTxt.setEditable(false);
        emailAddTxt1.setEditable(false);

        patientNumberTxt.setText("");
        residenceTxt.setText("");
        nokNameTxt.setText("");
        // jTextField14.setText("");
        jTextField5.setText("");
        jTextField7.setText("");
        jTextField8.setText("");
        jTextField5821.setText("");
        jTextField2.setText("");
        surNameTxt.setText("");
        jTextField20.setText("");
        firstNameTxt.setText("");
        // nationalityCmbx.setSelectedItem(null);
        nokResidenceTxt.setText("");
        //nokRelationShipCmbx.setSelectedItem(null);
        nokTelephoneTxt.setText("");
        emailAddTxt1.setText("");

        jTextField19.setText("");
        ageTxt.setText("");
        locationTxt.setText("");
        currentResidenceTxt.setText("");
        jTextField25.setText("");
        jTextField26.setText("");
        // jButton301.setEnabled(true);
        //jButton3.setEnabled(true);

        this.reVisit = true;
        // Add your handling code here:
    }//GEN-LAST:event_revisitRbtnActionPerformed

    private void createNewFileRbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewFileRbtnActionPerformed
        servicePointCmbx.setSelectedItem(defaultServicePoint);
        serviceStartTime = com.afrisoftech.lib.ServerTime.getSQLTimeStamp(connectDB);
        paymentModeCmbx.setSelectedItem("Cash");

        patientCategoryCmbx.setSelectedItem("Above 5 Yrs".toUpperCase());
        registrationStatusLbl.setText("");
        saveRegistrationBtn.setEnabled(true);
        savePrintRegistrationBtn.setEnabled(true);
        this.reVisit = false;
        editFileBtn.setEnabled(false);
        saveRegistrationBtn.setText("Save file data");
        searchbyNameChkbx.setEnabled(false);
        searchbyNumberChkbx.setEnabled(false);
        searchButton1.setEnabled(false);
        patientNumberTxt.setEditable(true);
        residenceTxt.setEditable(true);
        nokNameTxt.setEditable(true);
        // jTextField14.setEditable(true);
        jTextField5.setEditable(true);
        jTextField7.setEditable(true);
        jTextField8.setEditable(true);
        jTextField5821.setEditable(true);
        jTextField2.setEditable(true);
        surNameTxt.setEditable(true);
        firstNameTxt.setEditable(true);
        idPassportTxt.setEditable(true);
        emailAddTxt.setEditable(true);
        nationalityCmbx.setEditable(true);
        nokResidenceTxt.setEditable(true);
//        nokRelationShipCmbx.setEditable(true);
        nokTelephoneTxt.setEditable(true);
        emailAddTxt1.setEditable(true);
        jTextField20.setEditable(true);

        jTextField19.setEditable(true);
        ageTxt.setEditable(true);
        locationTxt.setEditable(true);
        currentResidenceTxt.setEditable(true);
        jTextField25.setEditable(true);
        jTextField26.setEditable(true);
        patientNumberTxt.setText("");
        residenceTxt.setText("");
        nokNameTxt.setText("");
        // jTextField14.setText("");
        jTextField5.setText("");
        jTextField7.setText("");
        jTextField8.setText("");
        jTextField5821.setText("");
        jTextField2.setText("");
        surNameTxt.setText("");
        jTextField20.setText("");
        firstNameTxt.setText("");
        //nationalityCmbx.setSelectedItem(null);
        nokResidenceTxt.setText("");
        //nokRelationShipCmbx.setSelectedItem(null);
        nokTelephoneTxt.setText("");
        emailAddTxt1.setText("");

        jTextField19.setText("");
        ageTxt.setText("");
        locationTxt.setText("");
        currentResidenceTxt.setText("");
        jTextField25.setText("");
        jTextField26.setText("");
        oldFileNumberTxt.setText("");
        clinicNumberTxt.setText("");
        referralTypeCmbx.setSelectedItem("-");

        try {
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select distinct patient_no,oid from hp_patient_register where date is not null ORDER BY oid DESC LIMIT 1");
            while (rset.next()) {
//                currentFileSeqNoTxt.setText(rset.getObject(1).toString());
            }
            rset.close();
            stmt.close();

            java.sql.Statement stmtx = connectDB.createStatement();
            java.sql.ResultSet rsetx = stmtx.executeQuery("select auto_numbering from pb_patient_names");
            while (rsetx.next()) {
                autonumber = rsetx.getBoolean(1);
            }
            rsetx.close();
            stmtx.close();
            if (autonumber) {
                patientNumberTxt.setEditable(false);
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("selection not successful");
            javax.swing.JOptionPane.showMessageDialog(this, sqe.getMessage());
        }

        // Add your handling code here:
    }//GEN-LAST:event_createNewFileRbtnActionPerformed

    private void savePrintRegistrationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePrintRegistrationBtnActionPerformed
        String cmbx1 = paymentModeCmbx.getSelectedItem().toString();
        saveRegistrationBtnActionPerformed(evt);
        int slipNo = 0;
        String rct = null;
        String selectedchkbx = null;
        String selectedchkbx1 = null;

        if (this.jCheckBox2111.isSelected()) {
            selectedchkbx = jCheckBox2111.getText();
        } else {

            selectedchkbx = jCheckBox1111.getText();
        }

        if (this.jCheckBox2113.isSelected()) {
            selectedchkbx1 = jCheckBox2113.getText();
        } else {
            if (this.jCheckBox1113.isSelected()) {
                selectedchkbx1 = jCheckBox1113.getText();
            } else {
                if (this.jCheckBox3.isSelected()) {
                    selectedchkbx1 = jCheckBox3.getText();
                } else {
                    if (this.jCheckBox11.isSelected()) {
                        selectedchkbx1 = jCheckBox11.getText();
                    }
                }
            }
        }

        selectedStatusgender = selectedchkbx;
        selectedStatus = selectedchkbx1;

        if (cmbx1.equalsIgnoreCase("Scheme")) {

            try {
                java.sql.Statement stm = connectDB.createStatement();
                java.sql.ResultSet rs = stm.executeQuery("select currval('creditslip_no_seq')");
                while (rs.next()) {
                    slipNo = rs.getInt(1);

                }
                java.sql.Statement ps112 = connectDB.createStatement();
                java.sql.ResultSet rst112 = ps112.executeQuery("select rct_format from receipt_pref");
                while (rst112.next()) {
                    rct = rst112.getObject(1).toString();
                }

                com.afrisoftech.txtreports.CreditSlipTxt policy = new com.afrisoftech.txtreports.CreditSlipTxt(connectDB, patientNumberTxt.getText(), jTextField361.getText(), firstNameTxt.getText() + " " + surNameTxt.getText(), jTextField2.getText(), jTextField13.getText(), slipNo);

            } catch (java.sql.SQLException sq) {

                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }

        }

        if (createNewFileRbtn.isSelected()) {
            com.afrisoftech.reports.PatientFilePdf pFile = new com.afrisoftech.reports.PatientFilePdf();
            //         pFile.PatientFilePdf(connectDB, patientNumberTxt.getText().toUpperCase(), firstNameTxt.getText().toUpperCase() + " " + surNameTxt.getText().toUpperCase(), datePickerYOB.getDate(), selectedchkbx.toUpperCase(), selectedchkbx1.toUpperCase(), ageTxt.getText().toUpperCase(), locationTxt.getText().toUpperCase(), currentResidenceTxt.getText().toUpperCase(), jTextField5.getText().toUpperCase(), jTextField5821.getText().toUpperCase(), nokNameTxt.getText().toUpperCase(), nokRelationShipCmbx.getSelectedItem().toString().toUpperCase(), jTextField20.getText().toUpperCase(), nokTelephoneTxt.getText().toUpperCase(), nokResidenceTxt.getText().toUpperCase());
        }
        // Add your handling code here:
    }//GEN-LAST:event_savePrintRegistrationBtnActionPerformed

    private void dispose111ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispose111ActionPerformed
        jSearchDialog111.dispose();        // Add your handling code here:
    }//GEN-LAST:event_dispose111ActionPerformed

    private void jSearchTable111MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable111MouseClicked
        //  jComboBox2.setSelectedItem(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0));
        patientNumberTxt.setText(jSearchTable111.getValueAt(jSearchTable111.getSelectedRow(), 0).toString());
        firstNameTxt.setText(jSearchTable111.getValueAt(jSearchTable111.getSelectedRow(), 1).toString());
        jSearchDialog111.dispose();
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select nok,residence,year_of_birth,tel_no,address,sex,last_visit,pay_mode from hp_patient_register where patient_no ='" + patientNumberTxt.getText() + "'");
            while (rset.next()) {
                paymentModeCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(8), "-"));
                dateofLastVisitTxt.setText(dbObject.getDBObject(rset.getObject(7), "-"));
                nokNameTxt.setText(dbObject.getDBObject(rset.getObject(1), "-"));
                residenceTxt.setText(dbObject.getDBObject(rset.getObject(2), "-"));
                //  jTextField14.setText(dbObject.getDBObject(rset.getObject(3), "-"));
                jTextField5821.setText(dbObject.getDBObject(rset.getObject(4), "-"));
                jTextField5.setText(dbObject.getDBObject(rset.getObject(5), "-"));
                if (rset.getObject(6).toString().startsWith("M")) {
                    jCheckBox1111.setSelected(true);

                } else {

                    if (rset.getObject(6).toString().startsWith("F")) {
                        jCheckBox2111.setSelected(true);
                    } else {
                    }
                }
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
        }
        //    if(jComboBox1.getSelectedItem().equals("Scheme")){
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select payer,description,account_no,member_name,expiry_date from hp_patient_register where patient_no ='" + patientNumberTxt.getText() + "'");
            while (rset.next()) {
                // jComboBox6.setSelectedItem(rset.getObject(1).toString());
                jTextField2.setText(dbObject.getDBObject(rset.getObject(1), "-"));
                jTextField361.setText(dbObject.getDBObject(rset.getObject(2), "-"));
                jTextField13.setText(dbObject.getDBObject(rset.getObject(3), "-"));
                jTextField36.setText(dbObject.getDBObject(rset.getObject(4), "-"));
                jTextField18.setText(dbObject.getDBObject(rset.getObject(5), "-"));

            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
        }
        // }

        saveRegistrationBtn.setEnabled(true);
        savePrintRegistrationBtn.setEnabled(true);
        jSearchDialog111.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable111MouseClicked

    private void jTextField11111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField11111CaretUpdate
        if (jTextField11111.getCaretPosition() < 3) {

            System.out.println("Nothing");
        } else {

            jSearchTable111.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, (upper(second_name||' '||first_name)) as name, year_of_birth, residence from hp_patient_register where patient_no ILIKE '" + jTextField11111.getText() + "%' order by patient_no"));
            /*
             * searchRowSet111.execute("SELECT patient_no, (upper(second_name||'
             * '||first_name)) as name, year_of_birth, residence from
             * hp_patient_register where patient_no ILIKE
             * '"+jTextField11111.getText()+"%' order by patient_no");
             * jSearchTable111.setModel(new
             * org.netbeans.lib.sql.models.TableModel(searchRowSet111, new
             * org.netbeans.lib.sql.models.TableModel.Column[] { new
             * org.netbeans.lib.sql.models.TableModel.Column("patient_no",
             * "Patient no", false), new
             * org.netbeans.lib.sql.models.TableModel.Column("name", "Name",
             * false),
             *
             * new
             * org.netbeans.lib.sql.models.TableModel.Column("year_of_birth",
             * "Year of birth", false), new
             * org.netbeans.lib.sql.models.TableModel.Column("residence",
             * "Residence", false) }));
             */
            jSearchTable111.setShowHorizontalLines(false);
            jSearchScrollPane111.setViewportView(jSearchTable111);

        }   // Add your handling code here:
    }//GEN-LAST:event_jTextField11111CaretUpdate

    private void dispose11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispose11ActionPerformed
        jSearchDialog11.dispose();    // Add your handling code here:
    }//GEN-LAST:event_dispose11ActionPerformed

    private void jSearchTable11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable11MouseClicked
        boolean applylimit = false;
        String accNo = null;
        jTextField361.setText(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 1).toString());
        jTextField18.setText(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 3).toString());
        jTextField2.setText(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 2).toString());
        jTextField15.setText(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 0).toString());

        accNo = jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 0).toString();
        java.util.Date exp = null;
        java.util.Date date = null;
        double limit = 0.00;
        double balance = 0.00;
        String Suspended = null;
        String Closed = null;
        jSearchDialog11.dispose();
        try {
            connectDB.setAutoCommit(false);
            java.sql.Statement stmt1 = connectDB.createStatement();
            java.sql.ResultSet rset1 = stmt1.executeQuery("select sum(balance-credit_bal) from ac_debtors where payee = '" + jTextField361.getText() + "' and dealer = '" + jTextField2.getText() + "'");
            while (rset1.next()) {
                balance = rset1.getDouble(1);
            }

            java.sql.Statement stmt1x = connectDB.createStatement();
            java.sql.ResultSet rset1x = stmt1x.executeQuery("select distinct applylimit from hp_schemestaff where account_no = '" + accNo + "'");
            while (rset1x.next()) {
                applylimit = rset1x.getBoolean(1);
            }

            if (applylimit) {
                jTextField36.setEditable(false);
                jTextField13.setEditable(false);
            } else {
                jTextField36.setEditable(true);
                jTextField13.setEditable(true);
            }
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select suspended, closed,expiry_date,current_date,scheme_limit from ac_schemes where scheme_name = '" + jTextField361.getText() + "' and payer_name = '" + jTextField2.getText() + "'");
            while (rset.next()) {
                Suspended = rset.getObject(1).toString();
                Closed = rset.getObject(2).toString();
                exp = rset.getDate(3);
                date = rset.getDate(4);
                limit = rset.getDouble(5);

            }
            if (Suspended.equals("true")) {

                javax.swing.JOptionPane.showMessageDialog(this, "SCHEME SUSPENDED !!", "Suspension MESSAGE", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                jTextField361.setText("");
                jTextField2.setText("");
            } else {
                if (Closed.equals("true")) {

                    javax.swing.JOptionPane.showMessageDialog(this, "SCHEME CLOSED !!", "Viability MESSAGE", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                    jTextField361.setText("");
                    jTextField2.setText("");
                } else {

                    if (exp.before(date)) {

                        javax.swing.JOptionPane.showMessageDialog(this, "SCHEME EXPIRED !! ON " + date, "Expiry MESSAGE", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                        jTextField361.setText("");
                        jTextField2.setText("");
                    } else {
                        if (balance > limit) {

                            javax.swing.JOptionPane.showMessageDialog(this, "SCHEME LIMIT IS " + limit + " AND DEBT IS " + balance + "\n Hence Limit exceeded by " + (balance - limit), "Debt Status MESSAGE", javax.swing.JOptionPane.PLAIN_MESSAGE);
                            jTextField361.setText("");
                            jTextField2.setText("");
                        }
                    }
                }
            }
            paymentModeCmbx.setSelectedItem("Scheme");
        } catch (java.sql.SQLException sqlExec) {

            sqlExec.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable11MouseClicked

    private void jTextField1111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1111CaretUpdate
        if (jTextField1111.getCaretPosition() < 3) {

            System.out.println("Nothing");
        } else {
            jSearchTable11.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT account_no,scheme_name,payer_name,expiry_date from ac_schemes where scheme_name ILIKE '" + jTextField1111.getText() + "%' and (allowed ilike 'Both' or allowed ilike 'OPD%') order by scheme_name"));

            /*
             * searchRowSet11.execute("SELECT
             * account_no,scheme_name,payer_name,expiry_date from ac_schemes
             * where scheme_name ILIKE '"+jTextField1111.getText()+"%' and
             * (allowed ilike 'Both' or allowed ilike 'OPD%') order by
             * scheme_name"); // searchRowSet.execute("SELECT patient_no,
             * (upper(first_name||' '||second_name)) as name, year_of_birth,
             * residence from hp_patient_register where (upper(first_name||'
             * '||second_name)) ILIKE '"+jTextField11.getText()+"%' order by
             * first_name");
             *
             * jSearchTable11.setModel(new
             * org.netbeans.lib.sql.models.TableModel(searchRowSet11, new
             * org.netbeans.lib.sql.models.TableModel.Column[] { new
             * org.netbeans.lib.sql.models.TableModel.Column("account_no",
             * "Account no", false), new
             * org.netbeans.lib.sql.models.TableModel.Column("scheme_name",
             * "Name", false), new
             * org.netbeans.lib.sql.models.TableModel.Column("payer_name",
             * "Payer", false), new
             * org.netbeans.lib.sql.models.TableModel.Column("expiry_date",
             * "Date", false) }));
             */
            jSearchTable11.setShowHorizontalLines(false);
            jSearchScrollPane11.setViewportView(jSearchTable11);

        }   // Add your handling code here:
    }//GEN-LAST:event_jTextField1111CaretUpdate
    private void searchButton11aClicked() {

        System.out.println("Showing dialog");

        java.awt.Point point = this.jTextField361.getLocationOnScreen();

        jSearchDialog11.setSize(600, 200);

        jSearchDialog11.setLocation(point);
        jSearchDialog11.setVisible(true);
//jSearchDialog11.dispose();

    }
    private void jButton301111ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton301111ActionPerformed
        try {

            //            java.lang.Object selectedGuaran = jComboBox2.getSelectedItem();
            java.util.Calendar calendar = java.util.Calendar.getInstance();

            long dateNow = calendar.getTimeInMillis();

            java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

            System.out.println(datenowSql1.toString());

            //     java.sql.Timestamp datenowSql= new java.sql.Timestamp(dateNow);
            //     System.out.println(datenowSql.toString());
            String activity = null;
            String actNo = null;
            String billNo = null;
            String rate = null;
            String transNo = null;
            String patientAcc = null;
            String insAcc = null;
            String cardAcc = null;
            String AccDesc = null;
            String cardName = null;
            String insName = null;
            String user = null;

            try {
                connectDB.setAutoCommit(false);

                java.sql.Statement stmt = connectDB.createStatement();
                java.sql.ResultSet rset = stmt.executeQuery("select activity,code,current_user from pb_activity where activity_category ='CF'");
                while (rset.next()) {
                    activity = rset.getObject(1).toString();
                    actNo = rset.getObject(2).toString();
                    user = rset.getObject(3).toString();

                }

                java.sql.Statement stmt3 = connectDB.createStatement();
                java.sql.ResultSet rset3 = stmt3.executeQuery("select nextval('transaction_no_seq')");
                while (rset3.next()) {
                    transNo = rset3.getObject(1).toString();
                    receiptNo1 = "O" + rset3.getObject(1).toString();

                }

                System.out.println(receiptNo1);
                /*
                 * java.sql.PreparedStatement pstmt1 =
                 * connectDB.prepareStatement("UPDATE hp_patient_register set
                 * values(?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
                 * ?,?,?,?,?,?)");
                 */

 /*
                 * java.sql.Statement stm1 = connectDB.createStatement();
                 * java.sql.ResultSet rse1 = stm1.executeQuery("select
                 * code,activity,user from pb_activity where activity_category
                 * ='PR'"); while (rse1.next())
                 *
                 * patientAcc = rse1.getObject(1).toString(); AccDesc =
                 * rse1.getObject(2).toString(); user =
                 * rse1.getObject(3).toString();
                 *
                 * java.sql.Statement stm3 = connectDB.createStatement();
                 * java.sql.ResultSet rse3 = stm3.executeQuery("select
                 * code,activity from pb_activity where activity_category
                 * ='RC'"); while (rse3.next())
                 *
                 * cardAcc = rse3.getObject(1).toString(); cardName =
                 * rse3.getObject(2).toString();
                 */
                java.sql.Statement stm2 = connectDB.createStatement();
                java.sql.ResultSet rse2 = stm2.executeQuery("select code,activity from pb_activity where activity_category ='DA'");
                while (rse2.next()) {
                    insAcc = rse2.getObject(1).toString();
                }
                insName = rse2.getObject(2).toString();
                //     if(jCheckBox1.isSelected()||jCheckBox2.isSelected()){

                java.sql.Statement stmt1 = connectDB.createStatement();
                java.sql.ResultSet rset1 = stmt1.executeQuery("select nextval('billing_no_seq')");
                while (rset1.next()) {
                    billNo = rset1.getObject(1).toString();
                }

                java.sql.PreparedStatement pstmt21 = connectDB.prepareStatement("insert into ac_doctors_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                pstmt21.setString(1, jTextField1611.getText());
                pstmt21.setString(2, "" + activity + "");
                pstmt21.setString(3, jTextField3111.getText());
                pstmt21.setString(4, transNo);
                pstmt21.setString(5, actNo);
                pstmt21.setString(6, "Doctors Fee");
                pstmt21.setString(7, "00");
                pstmt21.setString(8, jTextField14111.getText());
                pstmt21.setString(9, "");
                pstmt21.setString(10, patientNumberTxt.getText());

                pstmt21.setString(11, activity);
                pstmt21.setString(12, "false");
                pstmt21.setString(14, "'now'");
                pstmt21.setString(13, user);
                pstmt21.executeUpdate();

                java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                pstmt2.setString(1, actNo);
                pstmt2.setString(2, "" + activity + "");
                pstmt2.setString(3, patientNumberTxt.getText());
                pstmt2.setString(4, firstNameTxt.getText() + " " + surNameTxt.getText());
                pstmt2.setString(5, "");
                pstmt2.setString(6, "");
                pstmt2.setString(7, "");
                pstmt2.setString(8, "");
                pstmt2.setString(9, "");
                pstmt2.setString(10, "");
                pstmt2.setString(11, "");
                pstmt2.setString(12, "");
                pstmt2.setString(13, "");
                pstmt2.setString(14, activity);
                pstmt2.setString(15, "Revenue");
                pstmt2.setString(16, "00");
                pstmt2.setString(17, jTextField10.getText());
                pstmt2.setString(18, "'now'");
                pstmt2.setString(19, "" + transNo + "");
                pstmt2.setString(20, "false");
                pstmt2.setString(21, "false");
                pstmt2.setString(22, "false");
                pstmt2.setString(23, user);
                pstmt2.executeUpdate();

                // com.afrisoftech.nochospital.PatientCardPdf policy = new PatientCardPdf();
                // policy.PatientCardPdf(connectDB, jComboBox2.getSelectedItem().toString());
                connectDB.commit();
                connectDB.setAutoCommit(true);
                this.jDialog31.dispose();

            } catch (java.sql.SQLException sq) {

                try {
                    connectDB.rollback();
                } catch (java.sql.SQLException sql) {
                    javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
                System.out.println(sq.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }
        } catch (java.lang.Exception ex) {
            System.out.println(ex.getMessage());
            javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

        }     // Add your handling code here:
    }//GEN-LAST:event_jButton301111ActionPerformed

    private void jButton252111ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton252111ActionPerformed
        this.jDialog31.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton252111ActionPerformed

    private void searchButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton13ActionPerformed
        searchButton111Clicked();       // Add your handling code here:
    }//GEN-LAST:event_searchButton13ActionPerformed

    private void dispose2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispose2ActionPerformed
        jSearchDialog2.dispose(); // Add your handling code here:
    }//GEN-LAST:event_dispose2ActionPerformed

    private void jSearchTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2MouseClicked
        double rate = 0.00;
        double amt = 0.00;
        double total = 0.00;
        double HosRate = 0.00;
        jTextField3111.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
        jTextField1611.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0).toString());
        jTextField4111.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 2).toString());
        try {
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select doctor/100 from pb_patient_categories where patient_type = '" + this.patientCategoryCmbx.getSelectedItem().toString() + "'");
            while (rset.next()) {
                amt = rset.getDouble(1);
            }
            rate = Double.parseDouble(jTextField9.getText());
            total = (amt * rate);
            HosRate = (rate - total);
            jTextField14111.setText("" + total + "");
            jTextField10.setText("" + HosRate + "");
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Insert not successful");
        }

        jSearchDialog2.dispose();    // Add your handling code here:
    }//GEN-LAST:event_jSearchTable2MouseClicked
    private void searchButton111Clicked() {

        System.out.println("Showing dialog");

        jSearchDialog2.dispose();
        java.awt.Point point = this.jTextField3111.getLocationOnScreen();

        jSearchDialog2.setSize(400, 200);

        jSearchDialog2.setLocation(point);
        jSearchDialog2.setVisible(true);

    }
    private void jTextField112CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField112CaretUpdate
        if (jTextField112.getCaretPosition() < 3) {

            System.out.println("Nothing");
        } else {
            jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT staff_no, (upper(first_name||' '||middle_name)) as name,staff_category from pb_doctors_list where (upper(first_name||' '||middle_name)) ILIKE '" + jTextField112.getText() + "%' order by first_name"));

            /*
             * searchRowSet2.execute("SELECT staff_no, (upper(first_name||'
             * '||middle_name)) as name,staff_category from pb_doctors_list
             * where (upper(first_name||' '||middle_name)) ILIKE
             * '"+jTextField112.getText()+"%' order by first_name"); //
             * searchRowSet.execute("SELECT patient_no, (upper(first_name||'
             * '||second_name)) as name, year_of_birth, residence from
             * hp_patient_register where (upper(first_name||' '||second_name))
             * ILIKE '"+jTextField11.getText()+"%' order by first_name");
             *
             * jSearchTable2.setModel(new
             * org.netbeans.lib.sql.models.TableModel(searchRowSet2, new
             * org.netbeans.lib.sql.models.TableModel.Column[] { new
             * org.netbeans.lib.sql.models.TableModel.Column("staff_no", "Staff
             * no", false), new
             * org.netbeans.lib.sql.models.TableModel.Column("name", "Name",
             * false), new
             * org.netbeans.lib.sql.models.TableModel.Column("staff_category",
             * "Category", false)
             *
             * }));
             */
            jSearchTable2.setShowHorizontalLines(false);
            jSearchScrollPane2.setViewportView(jSearchTable2);

        }  // Add your handling code here:
    }//GEN-LAST:event_jTextField112CaretUpdate

    private void dispose1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispose1ActionPerformed
        jSearchDialog1.dispose();          // Add your handling code here:
    }//GEN-LAST:event_dispose1ActionPerformed

    private void jSearchTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable1MouseClicked
        boolean applylimit = false;
        String accNo = null;
        double limit = 0.00;
        double pharm = 0.00;
        double bill = 0.00;
        double balance = 0.00;
        jTextField36.setText(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 1).toString());
        jTextField13.setText(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 0).toString());
        //  jTextField15.setText(jSearchTable1.getValueAt(jSearchTable1.getSelectedRow(), 2).toString());

        try {
            java.sql.Statement stmt1x = connectDB.createStatement();
            java.sql.ResultSet rset1x = stmt1x.executeQuery("select applylimit,staff_no,limit_amount from hp_schemestaff where staff_no = '" + jTextField13.getText() + "'");
            while (rset1x.next()) {
                applylimit = rset1x.getBoolean(1);
                accNo = rset1x.getString(2);
                limit = rset1x.getDouble(3);
            }
            if (applylimit) {

                java.sql.Statement stf = connectDB.createStatement();
                java.sql.ResultSet rsf = stf.executeQuery("SELECT sum(amount) FROM hp_patient_billing WHERE visit_id = '" + accNo + "' AND payment_mode ILIKE 'Scheme'");
                while (rsf.next()) {
                    bill = rsf.getFloat(1);
                }

                java.sql.Statement stf2 = connectDB.createStatement();
                java.sql.ResultSet rsf2 = stf2.executeQuery("SELECT sum(amount) FROM hp_pharmacy WHERE visit_id = '" + accNo + "' AND pay_mode ILIKE 'Scheme'");
                while (rsf2.next()) {
                    pharm = rsf2.getFloat(1);
                }
                /*
                 * java.sql.Statement stmt = connectDB.createStatement();
                 * java.sql.ResultSet rset = stmt.executeQuery("select
                 * sum(balance) from ac_debtors where account_no = '" + accNo +
                 * "' and member_no = '" + jTextField13.getText() + "'"); while
                 * (rset.next()) { bill = rset.getDouble(1); }
                 */
                balance = limit - (bill + pharm);

                if (balance > 0) {
                    jTextField12.setText(java.lang.String.valueOf(balance));
                } else {

                    javax.swing.JOptionPane.showMessageDialog(this, "Your limit is " + limit + " AND balance = " + balance + "\n Hence Limit exceeded by " + (balance), "Debt Status MESSAGE", javax.swing.JOptionPane.PLAIN_MESSAGE);
                    jTextField36.setText("");
                    jTextField13.setText("");
                    jTextField361.setText("");
                    jTextField15.setText("");
                    jTextField2.setText("");
                    paymentModeCmbx.setSelectedItem("Cash");
//jTextField13.setText("");

                }
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            // System.out.println("Insert not successful");
        }

        jSearchDialog1.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable1MouseClicked

    private void jTextField111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField111CaretUpdate
        if (jTextField111.getCaretPosition() < 2) {

            System.out.println("Nothing");
        } else {
            if (this.jCheckBox5.isSelected()) {
                jSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select trim(staff_no) as scheme, staff_name as name,sheme_name from scheme_members_view where staff_name ILIKE '" + jTextField111.getText().toString() + "%' and sheme_name = '" + jTextField361.getText().toString() + "' ORDER BY staff_name"));
                /*
                 * searchRowSet1.execute("select trim(staff_no) as scheme,
                 * staff_name as name,sheme_name from scheme_members_view where
                 * staff_name ILIKE '"+jTextField111.getText().toString()+"%'
                 * and sheme_name = '"+jTextField361.getText().toString()+"'
                 * ORDER BY staff_name");
                 *
                 * jSearchTable1.setModel(new
                 * org.netbeans.lib.sql.models.TableModel(searchRowSet1, new
                 * org.netbeans.lib.sql.models.TableModel.Column[] { new
                 * org.netbeans.lib.sql.models.TableModel.Column("scheme",
                 * "Member Acc.", false), new
                 * org.netbeans.lib.sql.models.TableModel.Column("name", "Name",
                 * false), new
                 * org.netbeans.lib.sql.models.TableModel.Column("sheme_name",
                 * "Scheme Name", false)
                 *
                 * }));
                 */
                jSearchTable1.setShowHorizontalLines(false);
                jSearchScrollPane1.setViewportView(jSearchTable1);

            } else {
                jSearchTable1.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select trim(staff_no) as scheme, staff_name as name,sheme_name from scheme_members_view where staff_no ILIKE '" + jTextField111.getText().toString() + "%' and sheme_name = '" + jTextField361.getText().toString() + "' ORDER BY staff_no"));

                /*
                 * searchRowSet1.execute("select trim(staff_no) as scheme,
                 * staff_name as name,sheme_name from scheme_members_view where
                 * staff_no ILIKE '"+jTextField111.getText().toString()+"%' and
                 * sheme_name = '"+jTextField361.getText().toString()+"' ORDER
                 * BY staff_no");
                 *
                 * jSearchTable1.setModel(new
                 * org.netbeans.lib.sql.models.TableModel(searchRowSet1, new
                 * org.netbeans.lib.sql.models.TableModel.Column[] { new
                 * org.netbeans.lib.sql.models.TableModel.Column("scheme",
                 * "Member Acc.", false), new
                 * org.netbeans.lib.sql.models.TableModel.Column("name", "Name",
                 * false), new
                 * org.netbeans.lib.sql.models.TableModel.Column("sheme_name",
                 * "Scheme Name", false)
                 *
                 * }));
                 */
                jSearchTable1.setShowHorizontalLines(false);
                jSearchScrollPane1.setViewportView(jSearchTable1);

            }
        }

        // Add your handling code here:
    }//GEN-LAST:event_jTextField111CaretUpdate
    private void searchButton11Clicked() {

        System.out.println("Showing dialog");

        jSearchDialog1.dispose();
        java.awt.Point point = this.jTextField36.getLocationOnScreen();

        jSearchDialog1.setSize(400, 200);

        jSearchDialog1.setLocation(point);

        jSearchDialog1.setVisible(true);

    }
    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        this.patientSearchDialog.dispose();   // Add your handling code here:
    }//GEN-LAST:event_jPanel1MouseClicked

    private void patientSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientSearchTableMouseClicked
        inpatientActivation = false;
        //  jComboBox2.setSelectedItem(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0));
        patientNumberTxt.setText(patientSearchTable.getValueAt(patientSearchTable.getSelectedRow(), 0).toString());
        firstNameTxt.setText(patientSearchTable.getValueAt(patientSearchTable.getSelectedRow(), 1).toString());
        surNameTxt.setText(patientSearchTable.getValueAt(patientSearchTable.getSelectedRow(), 2).toString());
        patientSearchDialog.dispose();
        jSearchDialog4.dispose();
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("SELECT nok,residence,year_of_birth,tel_no,address,upper(sex) as sex,"
                    + "pay_mode,last_visit,upper(second_name) as other_names, upper(first_name) as surname,emails,id_no,"
                    + "information_source,education_level,occupation, emails, id_no, nok_add, pat_nationality, nok_telno,"
                    + "nok_relationship, nok_residence, nok_email, pat_marital_status, tribe, district, locations,"
                    + "sub_location, chief_name, sub_chief, (current_date-year_of_birth::date)/365,home_county,residence_county,patient_race,charge_sheet_no,tribe,refer_source "
                    + ",year_of_birth::date, nhif_number, nhif_status, birth_place FROM hp_patient_register WHERE patient_no ILIKE '" + patientNumberTxt.getText() + "'");
            while (rset.next()) {
                //jComboBox1.setSelectedItem(dbObject.getDBObject(rset.getObject(7), "-"));
                dateofLastVisitTxt.setText(dbObject.getDBObject(rset.getObject(8), "-"));
                nokNameTxt.setText(dbObject.getDBObject(rset.getObject(1), "-"));
                residenceTxt.setText(dbObject.getDBObject(rset.getObject(2), "-"));
                //  jTextField14.setText(dbObject.getDBObject(rset.getObject(3), "-"));
                jTextField5821.setText(dbObject.getDBObject(rset.getObject(4), "-"));
                jTextField5.setText(dbObject.getDBObject(rset.getObject(5), "-"));
                if (rset.getObject(6).toString().startsWith("M")) {
                    jCheckBox1111.setSelected(true);

                } else {

                    if (rset.getObject(6).toString().startsWith("F")) {
                        jCheckBox2111.setSelected(true);
                    } else {
                    }
                }
                firstNameTxt.setText(dbObject.getDBObject(rset.getObject(9), "-"));
                surNameTxt.setText(dbObject.getDBObject(rset.getObject(10), "-"));
                // nationalityCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(19), "-"));
                //  idNoTxt.setText(dbObject.getDBObject(rset.getObject(12), "-"));
                //  emailAddTxt.setText(dbObject.getDBObject(rset.getObject(11), "-"));
                this.informationSourceCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(13), "-"));
                this.educationLevelCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(14), "-"));
                this.occupationCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(15), "-"));
                ////////
                this.emailAddTxt.setText(dbObject.getDBObject(rset.getObject(16), "-"));
                this.idPassportTxt.setText(dbObject.getDBObject(rset.getObject(17), "-"));
                this.jTextField20.setText(dbObject.getDBObject(rset.getObject(18), "-"));
                this.nationalityCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(19), "-"));
                this.nokTelephoneTxt.setText(dbObject.getDBObject(rset.getObject(20), "-"));
                this.nokRelationShipCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(21), "-"));
                System.out.println("here is the nok  " + rset.getObject(21).toString());
                this.nokResidenceTxt.setText(dbObject.getDBObject(rset.getObject(22), "-"));
                this.emailAddTxt1.setText(dbObject.getDBObject(rset.getObject(23), "-"));
                //       this.(dbObject.getDBObject(rset.getObject(24), "-"));
                this.jTextField19.setText(dbObject.getDBObject(rset.getObject(25), "-"));
                this.ageTxt.setText(dbObject.getDBObject(rset.getObject(31), "-"));
                this.datePickerYOB.setDate(Date.valueOf(String.valueOf(dbObject.getDBObject(rset.getDate("year_of_birth"), ""))));
                this.locationTxt.setText(dbObject.getDBObject(rset.getObject(27), "-"));
                this.currentResidenceTxt.setText(dbObject.getDBObject(rset.getObject(28), "-"));
                this.jTextField25.setText(dbObject.getDBObject(rset.getObject(29), "-"));
                this.jTextField26.setText(dbObject.getDBObject(rset.getObject(30), "-"));
                this.nhifNumberTxt.setText(rset.getString("nhif_number"));
                this.placeOfBirthTxt.setText(rset.getString("birth_place"));
                if (rset.getBoolean("nhif_status")) {
                    nhifChbx.setSelected(true);
                } else {
                    nhifChbx.setSelected(false);
                }
                // jTextField12.setText(dbObject.getDBObject(rset.getObject(6), "-"));
                //  dbObject.getDBObject(rset1.getObject(3), "-")

                if (rset.getObject(24).toString().startsWith("S")) {
                    jCheckBox1113.setSelected(true);

                }
                if (rset.getObject(24).toString().startsWith("M")) {
                    jCheckBox2113.setSelected(true);

                }
                if (rset.getObject(24).toString().startsWith("D")) {
                    jCheckBox3.setSelected(true);

                } else {

                    if (rset.getObject(24).toString().startsWith("W")) {
                        jCheckBox11.setSelected(true);
                    } else {
                    }
                }

                countyofBirthCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(32), "-"));
                countyofResidenceCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(33), "-"));
                jTextField5821.setText(dbObject.getDBObject(rset.getObject(4), "-"));
                oldFileNumberTxt.setText(dbObject.getDBObject(rset.getObject(34), "-"));
                cSheetNoTxt.setText(dbObject.getDBObject(rset.getObject(35), "-"));
                clinicNumberTxt.setText(dbObject.getDBObject(rset.getObject(36), "-"));
                referralTypeCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(37), "-"));

            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
            javax.swing.JOptionPane.showMessageDialog(this, sqe.getMessage());
        }
        //   if(jComboBox1.getSelectedItem().equals("Scheme")){
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select payer,description,account_no,member_name,expiry_date from hp_patient_register where patient_no ='" + patientNumberTxt.getText() + "'");
            while (rset.next()) {
                // jComboBox6.setSelectedItem(rset.getObject(1).toString());
                jTextField2.setText(dbObject.getDBObject(rset.getObject(1), "-"));
                jTextField361.setText(dbObject.getDBObject(rset.getObject(2), "-"));
                jTextField15.setText(dbObject.getDBObject(rset.getObject(3), "-"));
                jTextField36.setText(dbObject.getDBObject(rset.getObject(4), "-"));
                jTextField18.setText(dbObject.getDBObject(rset.getObject(5), "-"));
                nokNameTxt.setEditable(true);
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
            javax.swing.JOptionPane.showMessageDialog(this, sqe.getMessage());
        }
//        try {

        startBtn.setEnabled(true);
        imageFile = null;
        imageFile = com.afrisoftech.lib.SaveBytea2DB.getStoredImage(connectDB, patientNumberTxt.getText());
        if (imageFile != null) {
            System.out.println("The image has played");
//                javax.swing.ImageIcon imgCapture = new javax.swing.ImageIcon(com.afrisoftech.lib.SaveBytea2DB.getStoredImage(connectDB, patientNumberTxt.getText()).toURL());
//                javax.swing.JLabel photoButton = new javax.swing.JLabel(imgCapture);
            webCameraPanel.remove(panel);
            webCamPanel = new ImagePanel();
//            webCamPanel.setSize(webCameraPanel.getSize());
            //webCameraPanel.add(webCamPanel);
            //  webCameraPanel.revalidate();
            webCamPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            webCamPanel.setMaximumSize(new java.awt.Dimension(142, 37));
            webCamPanel.setLayout(new java.awt.GridBagLayout());
            java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 10.0;
            webCameraPanel.add(webCamPanel, gridBagConstraints);
            imageFile.delete();
        } else {
            //    webCamPanel = new ImagePanel();
            webCameraPanel.remove(webCamPanel);
            if (panel != null) {
                panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                panel.setMaximumSize(new java.awt.Dimension(142, 37));
                panel.setLayout(new java.awt.GridBagLayout());
                java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 10.0;
                webCameraPanel.add(panel, gridBagConstraints);
            }
        }
        webCameraPanel.revalidate();
        //  com.afrisoftech.lib.SaveBytea2DB.insertBytea(connectDB, file, "JPG", "image/jpeg", patientNumberTxt.getText(), file.getName(), "OUT_PATIENT_REGISTER");
//        } catch (IOException e1) {
//            e1.printStackTrace();
//        }
        //}

        //     emailAddTxt.setText("");
        //     idNoTxt.setText("");
        // jButton301.setEnabled(true);
        patientSearchDialog.dispose();
        residenceTxt.setEditable(true);
        previousVisitsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT input_date::timestamp(0) as visit_date, clinic as speciality_visited, parameter as registration_point, user_name as registration_officer, marital_status, urgency as case_type FROM hp_patient_visit WHERE patient_no = '" + patientNumberTxt.getText() + "' UNION SELECT data_capture_time::timestamp(0) as visit_date, ward as speciality_visited, diagnosis3 as registration_point, user_name as registration_officer, marital_status, comments as case_type FROM hp_admission WHERE patient_no = '" + patientNumberTxt.getText() + "' ORDER BY 1"));
        // Flagging patients whole accounts have outstanding bills
        javax.swing.JOptionPane.showMessageDialog(this, "Patient Number [" + patientNumberTxt.getText() + "] outstanding bill status total : [" + com.afrisoftech.lib.CurrencyFormatter.getFormattedDouble(com.afrisoftech.lib.PatientAccountStatus.getOutstandillBill(connectDB, patientNumberTxt.getText()) + com.afrisoftech.lib.PatientAccountStatus.getPersonalDebtStatus(connectDB, patientNumberTxt.getText())) + "], Abscondment status bill : [" + com.afrisoftech.lib.PatientAccountStatus.getAbscondmentStatus(connectDB, patientNumberTxt.getText()) + "]");

        // Add your handling code here:
    }//GEN-LAST:event_patientSearchTableMouseClicked

    private void patientSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_patientSearchTxtCaretUpdate
        if (searchbyNameChkbx.isSelected()) {
            if (patientSearchTxt.getCaretPosition() < 3) {

                System.out.println("Nothing");
            } else {
                patientSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, upper(second_name) as other_names, upper(first_name) as surname, year_of_birth, residence, tel_no as telephone_no, id_no, nok_telno as nok_tel_no, nok as next_of_kin from hp_patient_register where second_name||' '||first_name ILIKE '%" + patientSearchTxt.getText() + "%' or nok ILIKE '%" + patientSearchTxt.getText() + "%' order by second_name"));

                patientSearchTable.setShowHorizontalLines(false);
                patientSearchJscrl.setViewportView(patientSearchTable);
            }

        } else if (searchbyNumberChkbx.isSelected()) {
            if (patientSearchTxt.getCaretPosition() < 3) {

                System.out.println("Nothing");
            } else {

                patientSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, upper(second_name) as other_names, upper(first_name) as surname, year_of_birth, residence, patient_race as unit_number, tel_no as telephone_no, id_no, nok_telno as nok_tel_no, nok as next_of_kin from hp_patient_register where patient_no ILIKE '%" + patientSearchTxt.getText() + "%'  or patient_race ILIKE '" + patientSearchTxt.getText() + "%' or tel_no ILIKE '" + patientSearchTxt.getText() + "%' or nok_telno  ILIKE '" + patientSearchTxt.getText() + "%' or id_no ILIKE '" + patientSearchTxt.getText() + "%'  order by patient_no"));

                patientSearchTable.setShowHorizontalLines(false);
                patientSearchJscrl.setViewportView(patientSearchTable);

            }

        }
        // Add your handling code here:
    }//GEN-LAST:event_patientSearchTxtCaretUpdate

    private void disposeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disposeActionPerformed

        patientSearchDialog.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_disposeActionPerformed

    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        if (jRadioButton2.isSelected()) {
            saveRegistrationBtn.setEnabled(false);
            savePrintRegistrationBtn.setEnabled(false);
        } else if (revisitRbtn.isSelected()) {
            saveRegistrationBtn.setEnabled(true);
            savePrintRegistrationBtn.setEnabled(true);
        }
        billindDetailsTabbedPane.setSelectedIndex(0);
        searchButtonClicked();

        // Add your handling code here:
    }//GEN-LAST:event_searchButton1ActionPerformed

    private void editFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editFileBtnActionPerformed

        registrationStatusLbl.setText("");

        searchbyNameChkbx.setEnabled(false);
        searchbyNumberChkbx.setEnabled(false);
        searchButton1.setEnabled(false);
        patientNumberTxt.setEditable(false);
        residenceTxt.setEditable(true);
        nokNameTxt.setEditable(true);
        jTextField17.setEditable(true);
        jTextField5.setEditable(true);
        jTextField7.setEditable(true);
        jTextField8.setEditable(true);
        jTextField5821.setEditable(true);
        jTextField2.setEditable(false);
        surNameTxt.setEditable(true);
        firstNameTxt.setEditable(true);
        idPassportTxt.setEditable(true);
        emailAddTxt.setEditable(true);
        residenceTxt.setEditable(true);
        nokNameTxt.setEditable(true);
        jTextField17.setEditable(true);
        jTextField5.setEditable(true);
        jTextField7.setEditable(true);
        jTextField8.setEditable(true);
        jTextField5821.setEditable(true);
        jTextField2.setEditable(true);
        jTextField20.setEditable(true);
        firstNameTxt.setEditable(true);
        nationalityCmbx.setEditable(true);
//        nokRelationShipCmbx.setEditable(true);
        nokTelephoneTxt.setEditable(true);
        nokResidenceTxt.setEditable(true);
        emailAddTxt1.setEnabled(true);
        emailAddTxt1.setText("");
        nokRelationShipCmbx.setSelectedItem(null);

        nokTelephoneTxt.setText("");
        nokNameTxt.setText("");
        nokResidenceTxt.setText("");
        jTextField19.setEditable(true);
        ageTxt.setEditable(true);
        locationTxt.setEditable(true);
        currentResidenceTxt.setEditable(true);
        jTextField25.setEditable(true);
        jTextField26.setEditable(true);
        emailAddTxt1.setEditable(true);
        // emailAddTxt1.setText("");

        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("SELECT nok,residence,year_of_birth::date,tel_no,address,upper(sex) as sex,pay_mode,last_visit,upper(second_name) as other_names, upper(first_name) as surname,emails,id_no,"
                    + "information_source,education_level,occupation, emails, id_no, nok_add, pat_nationality, nok_telno,"
                    + "nok_relationship, nok_residence, nok_email, pat_marital_status, tribe, district, locations,"
                    + "sub_location, chief_name, sub_chief,(current_date-year_of_birth::date)/365 FROM hp_patient_register WHERE patient_no ILIKE '" + patientNumberTxt.getText() + "'");
            jSearchDialog4.setVisible(false);
            while (rset.next()) {
                paymentModeCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(7), "-"));
                dateofLastVisitTxt.setText(dbObject.getDBObject(rset.getObject(8), "-"));
                nokNameTxt.setText(dbObject.getDBObject(rset.getObject(1), "-"));
                residenceTxt.setText(dbObject.getDBObject(rset.getObject(2), "-"));
                //  jTextField14.setText(dbObject.getDBObject(rset.getObject(3), "-"));
                jTextField5821.setText(dbObject.getDBObject(rset.getObject(4), "-"));
                jTextField5.setText(dbObject.getDBObject(rset.getObject(5), "-"));
                if (rset.getObject(6).toString().startsWith("M")) {
                    jCheckBox1111.setSelected(true);

                } else {

                    if (rset.getObject(6).toString().startsWith("F")) {
                        jCheckBox2111.setSelected(true);
                    } else {
                    }
                }
                firstNameTxt.setText(dbObject.getDBObject(rset.getObject(9), "-"));
                surNameTxt.setText(dbObject.getDBObject(rset.getObject(10), "-"));
                idPassportTxt.setText(dbObject.getDBObject(rset.getObject(12), "-"));
                emailAddTxt.setText(dbObject.getDBObject(rset.getObject(11), "-"));
                this.informationSourceCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(13), "-"));
                this.educationLevelCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(14), "-"));
                this.occupationCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(15), "-"));
                ////////
                this.emailAddTxt.setText(dbObject.getDBObject(rset.getObject(16), "-"));
                this.idPassportTxt.setText(dbObject.getDBObject(rset.getObject(17), "-"));
                this.jTextField20.setText(dbObject.getDBObject(rset.getObject(18), "-"));
                this.nationalityCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(19), "-"));
                this.nokTelephoneTxt.setText(dbObject.getDBObject(rset.getObject(20), "-"));
                nokRelationShipCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(21), "-"));

                this.nokResidenceTxt.setText(dbObject.getDBObject(rset.getObject(22), "-"));
                this.emailAddTxt1.setText(dbObject.getDBObject(rset.getObject(23), "-"));
                //        this.(dbObject.getDBObject(rset.getObject(24), "-"));
                this.jTextField19.setText(dbObject.getDBObject(rset.getObject(25), "-"));
                this.ageTxt.setText(dbObject.getDBObject(rset.getObject(31), "-"));
                this.locationTxt.setText(dbObject.getDBObject(rset.getObject(27), "-"));
                this.currentResidenceTxt.setText(dbObject.getDBObject(rset.getObject(28), "-"));
                this.jTextField25.setText(dbObject.getDBObject(rset.getObject(29), "-"));
                this.jTextField26.setText(dbObject.getDBObject(rset.getObject(30), "-"));
                // jTextField12.setText(dbObject.getDBObject(rset.getObject(6), "-"));
                //  dbObject.getDBObject(rset1.getObject(3), "-")
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
        }
        //   if(jComboBox1.getSelectedItem().equals("Scheme")){
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select payer,description,account_no,member_name,expiry_date from hp_patient_register where patient_no ='" + patientNumberTxt.getText() + "'");
            while (rset.next()) {
                // jComboBox6.setSelectedItem(rset.getObject(1).toString());
                jTextField2.setText(dbObject.getDBObject(rset.getObject(1), "-"));
                jTextField361.setText(dbObject.getDBObject(rset.getObject(2), "-"));
                jTextField15.setText(dbObject.getDBObject(rset.getObject(3), "-"));
                jTextField36.setText(dbObject.getDBObject(rset.getObject(4), "-"));
                jTextField18.setText(dbObject.getDBObject(rset.getObject(5), "-"));
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
        }
        //}
        saveRegistrationBtn.setEnabled(true);
        saveRegistrationBtn.setText("Update");
        patientSearchDialog.dispose();

        //   javax.swing.JFrame bank = new NewPatients(connectDB, pConnDB, jTextField3.getText());
        //  bank.setVisible(true);        // Add your handling code here:
    }//GEN-LAST:event_editFileBtnActionPerformed

    private void jCheckBox12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox4ActionPerformed
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select rate from pb_operating_parameters where service_type ILIKE 'CF'");
            while (rset.next()) {
                jTextField9.setText(rset.getObject(1).toString());
                System.out.println(rset.getObject(1).toString());
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
        }
        // this.jDialog31.setVisible(true);

        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox4ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select rate from pb_operating_parameters where category ='CF' and service_type ilike 'cons%'");
            while (rset.next()) {
                jTextField9.setText(rset.getObject(1).toString());
                System.out.println(jTextField9.getText());
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
        }
        //this.jDialog31.setVisible(true);// Add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void saveRegistrationBtnMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveRegistrationBtnMouseMoved
        jLabel2.setText("");        // Add your handling code here:
    }//GEN-LAST:event_saveRegistrationBtnMouseMoved

    private void jPanel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseEntered
    }//GEN-LAST:event_jPanel1MouseEntered

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        //      try {
        //            crset5.execute();
        //            crset11.execute();
        //      } catch(java.sql.SQLException sqlExec) {
        ///
        //          javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
        //       }        // Add your handling code here:
    }//GEN-LAST:event_formFocusGained

    private void clearFieldsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFieldsBtnActionPerformed
        //   jComboBox1.setSelectedItem(null);
        patientCategoryCmbx.setSelectedItem(null);
        //   jComboBox1.setSelectedItem(null);
        //        jComboBox9.setSelectedItem(null);
        //        jComboBox6.setSelectedItem(null);
        //        jComboBox2.setSelectedItem(null);
        residenceTxt.setText("");
        nokNameTxt.setText("");
        //jTextField14.setText("");
        jTextField5.setText("");
        jTextField7.setText("");
        jTextField8.setText("");
        jTextField5821.setText("");
        jTextField2.setText("");
        emailAddTxt.setText("");
        idPassportTxt.setText("");
        jTextField13.setText("");
        jTextField361.setText("");
        //jTextField14.setText("");
        jTextField36.setText("");
        surNameTxt.setText("");
        firstNameTxt.setText("");
        patientNumberTxt.setText("");
        jTextField18.setText("");
        jTextField17.setText("");
        jTextField12.setText("");
        cardSerialNoTxt.setText("");
        emailAddTxt1.setText("");
        nokRelationShipCmbx.setSelectedItem(null);

        nokTelephoneTxt.setText("");
        nokNameTxt.setText("");
        nokResidenceTxt.setText("");
        jTextField20.setText("");
        nationalityCmbx.setSelectedItem(null);
        jTextField19.setText("");
        ageTxt.setText("");
        locationTxt.setText("");
        currentResidenceTxt.setText("");
        jTextField25.setText("");
        jTextField26.setText("");
        this.clearForm();
        // Add your handling code here:
    }//GEN-LAST:event_clearFieldsBtnActionPerformed

    private void closeFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFormBtnActionPerformed
        if (panel != null) {
            panel.stop();
            this.setVisible(false);
        }
// Add your handling code here:
    }//GEN-LAST:event_closeFormBtnActionPerformed

    private void jPanel52ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel52ComponentShown
        //     jPanel2.setVisible(false);   // Add your handling code here:
    }//GEN-LAST:event_jPanel52ComponentShown

    private void paymentModeCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentModeCmbxActionPerformed
        if (paymentModeCmbx.getSelectedItem() != null) {
            if (paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Credit Card")) {
                billindDetailsTabbedPane.setSelectedComponent(creditCardDetailsPanel);
                // jPanel5.setVisible(false);
                // jPanel2.setVisible(true);
                //panel5Showing = false;
            } else {
                if (paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {
                    billindDetailsTabbedPane.setSelectedComponent(insuranceDetailsPanel);
                    //  jPanel2.setVisible(false);
                    // jPanel5.setVisible(true);

                } else {
                    billindDetailsTabbedPane.setSelectedComponent(bioDataPanel);
                    // jPanel2.setVisible(false);
                    // jPanel5.setVisible(false);
                }
            }

            //jButton301.setEnabled(true);
            savePrintRegistrationBtn.setEnabled(true);
            registrationStatusLbl.setText("");
        }
        // Add your handling code here:
    }//GEN-LAST:event_paymentModeCmbxActionPerformed

    private void saveRegistrationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveRegistrationBtnActionPerformed

        int unitNo = 0;
        try {
            if (createNewFileRbtn.isSelected()) {
                java.sql.Statement stmtx = connectDB.createStatement();

                if (!oldFileNumberTxt.getText().equalsIgnoreCase("")) {
                    java.sql.ResultSet rsetx = stmtx.executeQuery("SELECT count(*) FROM hp_patient_register WHERE patient_race ='" + oldFileNumberTxt.getText() + "' ");
                    while (rsetx.next()) {
                        unitNo = rsetx.getInt(1);
                    }

                }

                if (!clinicNumberTxt.getText().equalsIgnoreCase("")) {
                    java.sql.ResultSet rsetx = stmtx.executeQuery("SELECT count(*) FROM hp_patient_register WHERE tribe ='" + clinicNumberTxt.getText() + "' ");
                    while (rsetx.next()) {
                        unitNo = rsetx.getInt(1);
                    }

                }
                System.out.println("Here is the unit No. " + unitNo);

            }
        } catch (java.sql.SQLException sqlEx) {
            sqlEx.printStackTrace();
            javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getMessage());
        }

        if (unitNo > 0) {
            System.out.println("the unit no is " + unitNo);

            javax.swing.JOptionPane.showMessageDialog(this, "The Unit Number is already in use", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }

//        if (unitNo <= 0) {
//            if (oldFileNumberTxt.getText().toCharArray().length > 0 || clinicNumberTxt.getText().toCharArray().length > 0) {
//                if (referredcombo.getSelectedItem() != "-") {
//                    if (nokRelationShipCmbx.getSelectedItem() != null) {
//                        if (nokNameTxt.getText().toCharArray().length > 2) {
        if (nationalityCmbx.getSelectedItem() != null) {
//            if (ageTxt.getText().toCharArray().length > 0) {
            if (!specialtyClinicCmbx.getSelectedItem().toString().equalsIgnoreCase("-")) {
                if (residenceTxt.getText().toCharArray().length > 0) {
                    //  if (cSheetNoTxt.getText().toCharArray().length >= 0) {
                    if (firstNameTxt.getText().toCharArray().length > 2) {
                        if (surNameTxt.getText().toCharArray().length > 2) {
                            if (paymentModeCmbx.getSelectedItem() != null) {
                                if (patientCategoryCmbx.getSelectedItem() != null) {
                                    if (urgencyCMBX.getSelectedIndex() > 0) {
                                        Object category = paymentModeCmbx.getSelectedItem();
                                        double ager = java.lang.Double.valueOf(ageTxt.getText().toString());
                                        if (ager < 5) {
                                            patientCategoryCmbx.setSelectedItem("Under 5 Yrs".toUpperCase());
                                        }
                                        if (category == null) {
                                            javax.swing.JOptionPane.showMessageDialog(this, "You must select patient category", "Warning Message!", javax.swing.JOptionPane.WARNING_MESSAGE);

                                        } else {
                                            if (createNewFileRbtn.isSelected()) {
                                                reVisit = false;
                                            } else {
                                                reVisit = true;
                                            }
                                            java.util.Date periodFrom = null;
                                            java.util.Date periodTo = null;
                                            java.util.Date todays = null;
                                            java.util.Calendar calendar = java.util.Calendar.getInstance();
                                            String yrs = null;
                                            java.sql.Savepoint registerSavePoint = null;
                                            java.sql.Date dateOfBirth = null;
                                            java.sql.Date toDaysDate = null;
                                            int saveOption = 0;
                                            java.sql.Timestamp datenowSql = null;

                                            try {
                                                //   try {
                                                try {
                                                    connectDB.setAutoCommit(false);
                                                    registerSavePoint = connectDB.setSavepoint("registration");
                                                    java.sql.Statement stm12fa = connectDB.createStatement();
                                                    java.sql.ResultSet rse12fa = stm12fa.executeQuery("select current_user,now()");
                                                    while (rse12fa.next()) {
                                                        datenowSql = rse12fa.getTimestamp(2);
                                                    }

                                                    String patientNo2 = null;

                                                    // System.out.println("This date is not printing " + datenowSql.toString());
                                                    java.sql.Statement stmtfd = connectDB.createStatement();
                                                    java.sql.ResultSet rsetfd = stmtfd.executeQuery("SELECT EXTRACT(YEAR FROM TIMESTAMP 'now')");
                                                    while (rsetfd.next()) {
                                                        yrs = rsetfd.getString(1);
                                                    }

                                                    java.sql.Statement stmtfa = connectDB.createStatement();
                                                    java.sql.ResultSet rsetfa = stmtfa.executeQuery("SELECT 'now'::date");
                                                    while (rsetfa.next()) {
                                                        toDaysDate = rsetfa.getDate(1);
                                                        todays = rsetfa.getDate(1);

                                                    }
                                                    try {

                                                        // Date parser
                                                        java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yy");
                                                        com.afrisoftech.lib.DateFormatter dateFormatter = new com.afrisoftech.lib.DateFormatter(dateFormat.parse(datePicker1.getDate().toString().trim()), "yy");

                                                        java.lang.String monthString = dateFormatter.getDateString();

                                                        yrs = monthString;

                                                        // Catch java.text.parse exception.
                                                    } catch (java.text.ParseException prs) {
                                                        prs.printStackTrace();
                                                    }

                                                    java.sql.Statement stmtf = connectDB.createStatement();
                                                    java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + datePicker4.getDate() + "' BETWEEN period_from AND period_to");
                                                    while (rsetf.next()) {
                                                        periodFrom = rsetf.getDate(1);
                                                        periodTo = rsetf.getDate(2);
                                                    }

                                                    java.sql.Statement stmtfs = connectDB.createStatement();
                                                    java.sql.ResultSet rsetfs = stmtfs.executeQuery("SELECT '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePickerYOB.getDate()) + "'::DATE ");
                                                    while (rsetfs.next()) {
                                                        dateOfBirth = rsetfs.getDate(1);

                                                    }
                                                    if (periodFrom != null && periodTo != null) {
                                                        if (datePicker4.getDate().before(periodFrom) || datePicker4.getDate().after(periodTo)) {
                                                            javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                                                        } else {

                                                            if (saveOption == javax.swing.JOptionPane.YES_OPTION || datePicker4.getDate().equals(toDaysDate)) {

                                                                int occurence = 0;
                                                                String mainAcc = null;
                                                                String activity = null;
                                                                String actNo = null;
                                                                String billNo = null;
                                                                String rate = null;
                                                                String transNo = null;
                                                                String patientAcc = null;
                                                                String insAcc = null;
                                                                String cardAcc = null;
                                                                String AccDesc = null;
                                                                String cardName = null;
                                                                String insName = null;
                                                                String user = null;
                                                                String preFix = null;
                                                                int digitNo = 0;
                                                                String yrEnd = null;
                                                                boolean incYr = false;
                                                                int slipNo = 0;
                                                                String Cons = null;

                                                                String selectedchkbx1 = null;
                                                                String useoneNumber = null;

                                                                if (jCheckBox9.isSelected()) {
                                                                    Cons = jCheckBox9.getText();
                                                                } else {
                                                                    if (jCheckBox2.isSelected()) {
                                                                        Cons = jCheckBox2.getText();
                                                                    }
                                                                    Cons = jCheckBox1.getText();
                                                                }
                                                                if (this.jCheckBox2111.isSelected()) {
                                                                    selectedchkbx = jCheckBox2111.getText();
                                                                } else {

                                                                    selectedchkbx = jCheckBox1111.getText();
                                                                }

                                                                if (this.jCheckBox2113.isSelected()) {
                                                                    selectedchkbx1 = jCheckBox2113.getText();
                                                                } else {

                                                                    selectedchkbx1 = jCheckBox1113.getText();
                                                                }
                                                                String patientNo = null;
                                                                String patientsNo = com.afrisoftech.lib.DateLables.getDateLabel();
                                                                int pNo = 0;

                                                                if (saveRegistrationBtn.getText().equalsIgnoreCase("Save file data")) {

                                                                    //     if (this.jTextField21.getText().toCharArray().length < 1 || this.jTextField6.getText().toCharArray().length < 1){// || this.jTextField1.getText().toCharArray().length < 1){
                                                                    java.sql.Statement stm12 = connectDB.createStatement();

                                                                    java.sql.ResultSet rse12 = stm12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                                                                    while (rse12.next()) {

                                                                        patientAcc = rse12.getObject(1).toString();
                                                                        AccDesc = rse12.getObject(2).toString();
                                                                    }

                                                                    java.sql.Statement stmt3 = connectDB.createStatement();
                                                                    java.sql.ResultSet rset3 = stmt3.executeQuery("select nextval('transaction_no_seq')");
                                                                    while (rset3.next()) {
                                                                        transNo = rset3.getObject(1).toString();
                                                                        receiptNo1 = "O" + rset3.getObject(1).toString();

                                                                    }
                                                                    java.sql.Statement stmn = connectDB.createStatement();
                                                                    java.sql.ResultSet rsn = stmn.executeQuery("select current_user");
                                                                    while (rsn.next()) {
                                                                        user = rsn.getObject(1).toString();
                                                                    }

                                                                    java.sql.Statement stmnz = connectDB.createStatement();
                                                                    java.sql.ResultSet rsnz = stmnz.executeQuery("select auto_numbering,use_one_number from pb_patient_names");
                                                                    while (rsnz.next()) {
                                                                        manualNo = rsnz.getBoolean(1);
                                                                        useoneNumber = rsnz.getString(2);
                                                                    }

                                                                    if (manualNo) {
                                                                        java.sql.Statement stmnz1 = connectDB.createStatement();
                                                                        java.sql.ResultSet rsnz1 = stmnz1.executeQuery("select prefix_item,digit_no,yr_end,inc_year from pb_patient_names");
                                                                        while (rsnz1.next()) {
                                                                            preFix = rsnz1.getString(1);
                                                                            digitNo = rsnz1.getInt(2);
                                                                            yrEnd = rsnz1.getString(3);
                                                                            incYr = rsnz1.getBoolean(4);
                                                                        }
                                                                    }
                                                                    java.sql.Statement stmt = connectDB.createStatement();
                                                                    if (jCheckBox9.isSelected()) {
                                                                        java.sql.ResultSet rset = stmt.executeQuery("select service_type,gl_account,main_service from pb_operating_parameters where category ILIKE 'SP%'");
                                                                        while (rset.next()) {
                                                                            activity = rset.getObject(1).toString();
                                                                            actNo = rset.getObject(2).toString();
                                                                            mainAcc = rset.getObject(3).toString();

                                                                        }
                                                                    } else {
                                                                        if (jCheckBox2.isSelected()) {
                                                                            java.sql.ResultSet rset = stmt.executeQuery("select service_type,gl_account,main_service from pb_operating_parameters where category ILIKE 'RV%'");
                                                                            while (rset.next()) {
                                                                                activity = rset.getObject(1).toString();
                                                                                actNo = rset.getObject(2).toString();
                                                                                mainAcc = rset.getObject(3).toString();

                                                                            }
                                                                        } else {
                                                                            if (jCheckBox1.isSelected()) {
                                                                                java.sql.ResultSet rset = stmt.executeQuery("select service_type,gl_account,main_service from pb_operating_parameters where category ILIKE 'CF%'");
                                                                                while (rset.next()) {
                                                                                    activity = rset.getObject(1).toString();
                                                                                    actNo = rset.getObject(2).toString();
                                                                                    mainAcc = rset.getObject(3).toString();

                                                                                }
                                                                            } else {
                                                                                if (jCheckBox10.isSelected()) {
                                                                                    java.sql.ResultSet rset = stmt.executeQuery("select service_type,gl_account,main_service from pb_operating_parameters where category ILIKE 'OP%'");
                                                                                    while (rset.next()) {
                                                                                        activity = rset.getObject(1).toString();
                                                                                        actNo = rset.getObject(2).toString();
                                                                                        mainAcc = rset.getObject(3).toString();

                                                                                    }
                                                                                }

                                                                            }
                                                                        }
                                                                    }
                                                                    //booking

                                                                    String bill = "";
                                                                    java.sql.Statement ps11d = connectDB.createStatement();
                                                                    java.sql.ResultSet rst11d = ps11d.executeQuery("select nextval('booking_no_seq')");
                                                                    while (rst11d.next()) {
                                                                        // rst11.getObject(1).toString();
                                                                        bill = rst11d.getObject(1).toString();
                                                                    }

                                                                    if (datePicker2.getDate().after(datePicker4.getDate())) {

                                                                        java.sql.PreparedStatement pstmts = connectDB.prepareStatement("INSERT INTO pb_bookings VALUES(initcap(?),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

                                                                        pstmts.setString(1, surNameTxt.getText() + " " + firstNameTxt.getText());
                                                                        pstmts.setObject(2, "Consultation");
                                                                        pstmts.setDouble(3, java.lang.Double.valueOf("1.00"));
                                                                        pstmts.setString(4, "Booked");
                                                                        pstmts.setTimestamp(5, new java.sql.Timestamp(java.util.Calendar.getInstance().getTimeInMillis()));
                                                                        pstmts.setString(6, bill);
                                                                        pstmts.setDate(7, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                                                                        pstmts.setString(8, patientNumberTxt.getText());
                                                                        pstmts.setString(9, user);
                                                                        pstmts.setString(10, jTextField5821.getText());
                                                                        pstmts.setObject(11, emailAddTxt.getText());
                                                                        pstmts.setObject(12, specialtyClinicCmbx.getSelectedItem());
                                                                        pstmts.setObject(13, "OP");
                                                                        pstmts.setObject(14, "Normal");
                                                                        pstmts.setObject(15, "New Booking");
                                                                        pstmts.setObject(16, oldFileNumberTxt.getText());
                                                                        pstmts.executeUpdate();

                                                                    }

                                                                    //if (this.jComboBox1.getSelectedItem().toString().equalsIgnoreCase("Cash") | this.jComboBox1.getSelectedItem().toString().equalsIgnoreCase("Cheque")) {
                                                                    if (!this.paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {

                                                                        if (revisitRbtn.isSelected()) {
                                                                            if (!inpatientActivation) {
                                                                                java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("UPDATE hp_patient_register set pay_mode = '" + paymentModeCmbx.getSelectedItem().toString() + "',category = '" + patientCategoryCmbx.getSelectedItem().toString() + "',last_visit = '" + datePicker4.getDate().toString() + "',payer = '',description = ''  WHERE patient_no = '" + patientNumberTxt.getText() + "'");
                                                                                pstmt1.executeUpdate();
                                                                                // this.registrationStatusLbl.setText("PATIENT ACTIVATED SUCCESSFULLY");
                                                                                //  this.registrationStatusLbl.setVisible(true);

                                                                                javax.swing.JOptionPane.showMessageDialog(this, "Patient Activated Successfully", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                                                                            } else {

                                                                                java.sql.Statement stm = connectDB.createStatement();

                                                                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO hp_patient_register VALUES(upper(?), upper(?), upper(?), upper(?), ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

                                                                                pstmt.setString(1, patientNumberTxt.getText());

                                                                                if (surNameTxt.getText().equals("")) {
                                                                                    javax.swing.JOptionPane.showMessageDialog(this, "You must enter names", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                                                                } else {
                                                                                    pstmt.setString(2, surNameTxt.getText());
                                                                                }
                                                                                pstmt.setString(3, firstNameTxt.getText());
                                                                                pstmt.setString(4, "");
                                                                                pstmt.setString(5, nokNameTxt.getText());
                                                                                pstmt.setString(6, residenceTxt.getText());
                                                                                pstmt.setString(7, jTextField5.getText());
                                                                                pstmt.setDate(8, dateOfBirth);
                                                                                pstmt.setString(9, jTextField5821.getText());
                                                                                if (selectedchkbx == null) {
                                                                                    javax.swing.JOptionPane.showMessageDialog(this, "You must tick patient Gender", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                                                                } else {
                                                                                    pstmt.setObject(10, selectedchkbx);
                                                                                }

                                                                                pstmt.setDate(11, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker4.getDate()));
                                                                                pstmt.setObject(12, paymentModeCmbx.getSelectedItem());
                                                                                pstmt.setString(13, "");
                                                                                pstmt.setString(14, "");
                                                                                pstmt.setString(15, "");
                                                                                pstmt.setObject(16, patientCategoryCmbx.getSelectedItem());
                                                                                pstmt.setObject(17, null);
                                                                                pstmt.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker4.getDate()));
                                                                                pstmt.setObject(19, clinicNumberTxt.getText());
                                                                                pstmt.setString(20, "");
                                                                                pstmt.setString(21, "");
                                                                                pstmt.setString(22, emailAddTxt.getText());
                                                                                pstmt.setString(23, idPassportTxt.getText());
                                                                                pstmt.setString(24, jTextField20.getText());
                                                                                pstmt.setObject(25, patientsNo);
                                                                                pstmt.setString(26, nationalityCmbx.getSelectedItem().toString());
                                                                                pstmt.setString(27, nokTelephoneTxt.getText());
                                                                                pstmt.setString(28, nokRelationShipCmbx.getSelectedItem().toString().toUpperCase());
                                                                                pstmt.setString(29, nokResidenceTxt.getText());
                                                                                pstmt.setString(30, emailAddTxt1.getText());
                                                                                pstmt.setObject(31, selectedchkbx1);
                                                                                pstmt.setString(32, clinicNumberTxt.getText());
                                                                                pstmt.setString(33, this.districtCmbx.getSelectedItem().toString());
                                                                                pstmt.setString(34, locationTxt.getText());
                                                                                pstmt.setString(35, currentResidenceTxt.getText());
                                                                                pstmt.setString(36, jTextField25.getText());
                                                                                pstmt.setString(37, jTextField26.getText());
                                                                                pstmt.setString(38, informationSourceCmbx.getSelectedItem().toString());
                                                                                pstmt.setString(39, educationLevelCmbx.getSelectedItem().toString());
                                                                                pstmt.setString(40, occupationCmbx.getSelectedItem().toString());
                                                                                pstmt.setString(41, religionCmbx.getSelectedItem().toString());
                                                                                pstmt.setString(42, oldFileNumberTxt.getText());
                                                                                pstmt.setString(43, placeOfBirthTxt.getText());
                                                                                pstmt.setBoolean(44, true);
                                                                                pstmt.setString(45, this.emailAddTxt.getText());
                                                                                pstmt.setString(46, this.countyofBirthCmbx.getSelectedItem().toString());
                                                                                pstmt.setString(47, this.countyofResidenceCmbx.getSelectedItem().toString());
                                                                                pstmt.setBoolean(48, this.nhifChbx.isSelected());
                                                                                pstmt.setString(49, this.nhifNumberTxt.getText());
                                                                                pstmt.setString(50, this.employerTxt.getText());
                                                                                pstmt.setString(51, this.employerTelTxt.getText());
                                                                                pstmt.setString(52, this.referralTypeCmbx.getSelectedItem().toString());
                                                                                pstmt.setString(53, this.cSheetNoTxt.getText());
                                                                                pstmt.setString(54, this.specialtyClinicCmbx.getSelectedItem().toString());
                                                                                pstmt.setString(55, this.disabilityCmbx.getSelectedItem().toString());

                                                                                pstmt.executeUpdate();
                                                                                javax.swing.JOptionPane.showMessageDialog(this, "Patient File Activated Successfully", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                                                                                inpatientActivation = false;
                                                                            }

                                                                        } else {
                                                                            if (createNewFileRbtn.isSelected() || createOldFileRbtn.isSelected()) {

                                                                                java.sql.Statement stmtp = connectDB.createStatement();
                                                                                java.sql.ResultSet rsetp = stmtp.executeQuery("select patient_no from hp_patient_register where patient_no ='" + this.patientNumberTxt.getText() + "' AND patient_no != ''");
                                                                                while (rsetp.next()) {
                                                                                    patientNo = rsetp.getObject(1).toString();
                                                                                }

                                                                                if (this.patientNumberTxt.getText().equalsIgnoreCase(patientNo)) {
                                                                                    this.registrationStatusLbl.setForeground(java.awt.Color.red);
                                                                                    this.registrationStatusLbl.setText("Patient No. Already On File");

                                                                                } else {
                                                                                    if (createNewFileRbtn.isSelected()) {
                                                                                        // File to be automatically numbered if new.
                                                                                        manualNo = true;
                                                                                    } else {
                                                                                        if (revisitRbtn.isSelected() || createOldFileRbtn.isSelected()) {
                                                                                            // File to be assigned number appearing on the file.
                                                                                            manualNo = false;
                                                                                        }
                                                                                    }
                                                                                    java.sql.Statement stm1 = connectDB.createStatement();
                                                                                    if (manualNo) {

                                                                                        patientsNo = patientsNo;
                                                                                    } else {
                                                                                        if (patientNumberTxt.getText().toString().equalsIgnoreCase("") | patientNumberTxt.getText().toString().equalsIgnoreCase(" ") | patientNumberTxt.getText().toString().equalsIgnoreCase("  ") | patientNumberTxt.getText().toString().equalsIgnoreCase("   ") | patientNumberTxt.getText().toString().equalsIgnoreCase("    ")) {
                                                                                            // if(jTextField3.getText().toString().equalsIgnoreCase("") | jTextField3.getText().toString().equalsIgnoreCase(" ").concat("")){
                                                                                            javax.swing.JOptionPane.showMessageDialog(this, "You cannot save without the patient no", "CAUTION MESSAGE", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                                                                                        } else {
                                                                                            if (revisitRbtn.isSelected() || createOldFileRbtn.isSelected()) {
                                                                                                patientsNo = patientNumberTxt.getText();
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                    java.sql.Statement stm = connectDB.createStatement();

                                                                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO hp_patient_register VALUES(upper(?), upper(?), upper(?), upper(?), ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

                                                                                    pstmt.setString(1, patientsNo);

                                                                                    if (surNameTxt.getText().equals("")) {
                                                                                        javax.swing.JOptionPane.showMessageDialog(this, "You must enter names", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                                                                    } else {
                                                                                        pstmt.setString(2, surNameTxt.getText());
                                                                                    }
                                                                                    pstmt.setString(3, firstNameTxt.getText());
                                                                                    pstmt.setString(4, "");
                                                                                    pstmt.setString(5, nokNameTxt.getText());
                                                                                    pstmt.setString(6, residenceTxt.getText());
                                                                                    pstmt.setString(7, jTextField5.getText());
                                                                                    pstmt.setDate(8, dateOfBirth);
                                                                                    pstmt.setString(9, jTextField5821.getText());
                                                                                    if (selectedchkbx == null) {
                                                                                        javax.swing.JOptionPane.showMessageDialog(this, "You must tick patient Gender", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                                                                    } else {
                                                                                        pstmt.setObject(10, selectedchkbx);
                                                                                    }

                                                                                    pstmt.setDate(11, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker4.getDate()));
                                                                                    pstmt.setObject(12, paymentModeCmbx.getSelectedItem());
                                                                                    pstmt.setString(13, "");
                                                                                    pstmt.setString(14, "");
                                                                                    pstmt.setString(15, "");
                                                                                    pstmt.setObject(16, patientCategoryCmbx.getSelectedItem());
                                                                                    pstmt.setObject(17, null);
                                                                                    pstmt.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker4.getDate()));
                                                                                    pstmt.setObject(19, branchTxt.getText());
                                                                                    pstmt.setString(20, "");
                                                                                    pstmt.setString(21, "");
                                                                                    pstmt.setString(22, emailAddTxt.getText());
                                                                                    pstmt.setString(23, idPassportTxt.getText());
                                                                                    pstmt.setString(24, jTextField20.getText());
                                                                                    pstmt.setObject(25, patientsNo);
                                                                                    pstmt.setString(26, nationalityCmbx.getSelectedItem().toString());
                                                                                    pstmt.setString(27, nokTelephoneTxt.getText());
                                                                                    pstmt.setString(28, nokRelationShipCmbx.getSelectedItem().toString().toUpperCase());
                                                                                    pstmt.setString(29, nokResidenceTxt.getText());
                                                                                    pstmt.setString(30, emailAddTxt1.getText());
                                                                                    pstmt.setObject(31, selectedchkbx1);
                                                                                    pstmt.setString(32, clinicNumberTxt.getText());
                                                                                    pstmt.setString(33, this.districtCmbx.getSelectedItem().toString());
                                                                                    pstmt.setString(34, locationTxt.getText());
                                                                                    pstmt.setString(35, currentResidenceTxt.getText());
                                                                                    pstmt.setString(36, jTextField25.getText());
                                                                                    pstmt.setString(37, jTextField26.getText());
                                                                                    pstmt.setString(38, informationSourceCmbx.getSelectedItem().toString());
                                                                                    pstmt.setString(39, educationLevelCmbx.getSelectedItem().toString());
                                                                                    pstmt.setString(40, occupationCmbx.getSelectedItem().toString());
                                                                                    pstmt.setString(41, religionCmbx.getSelectedItem().toString());
                                                                                    pstmt.setString(42, oldFileNumberTxt.getText());
                                                                                    pstmt.setString(43, placeOfBirthTxt.getText());
                                                                                    pstmt.setBoolean(44, true);
                                                                                    pstmt.setString(45, this.emailAddTxt.getText());
                                                                                    pstmt.setString(46, this.countyofBirthCmbx.getSelectedItem().toString());
                                                                                    pstmt.setString(47, this.countyofResidenceCmbx.getSelectedItem().toString());
                                                                                    pstmt.setBoolean(48, this.nhifChbx.isSelected());
                                                                                    pstmt.setString(49, this.nhifNumberTxt.getText());
                                                                                    pstmt.setString(50, this.employerTxt.getText());
                                                                                    pstmt.setString(51, this.employerTelTxt.getText());
                                                                                    pstmt.setString(52, this.referralTypeCmbx.getSelectedItem().toString());
                                                                                    pstmt.setString(53, this.cSheetNoTxt.getText());
                                                                                    pstmt.setString(54, this.specialtyClinicCmbx.getSelectedItem().toString());
                                                                                    pstmt.setString(55, this.disabilityCmbx.getSelectedItem().toString());

                                                                                    pstmt.executeUpdate();
                                                                                    // javax.swing.JOptionPane.showMessageDialog(this, "Patient Registered Successfully for Pateint Number :["++"] and Name : ["++"]", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                                                                                    //      this.registrationStatusLbl.setText("PATIENT REGISTRATION SUCCESSFUL");
                                                                                    //     this.registrationStatusLbl.setVisible(true);
                                                                                }
                                                                            }
                                                                        }

                                                                    } else {
                                                                        if (this.paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Credit Card")) {
                                                                            if (revisitRbtn.isSelected()) {
                                                                                if (!inpatientActivation) {
                                                                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("UPDATE hp_patient_register set description = '" + jComboBox3.getSelectedItem() + "',member_name = '',payer = '" + jTextField7.getText() + "',account_no ='" + jTextField8.getText() + "',expiry_date = '" + java.sql.Date.valueOf(jTextField18.getText().toString()) + "',last_visit = '" + datePicker4.getDate() + "',pay_mode = '" + paymentModeCmbx.getSelectedItem().toString() + "', category =  '" + patientCategoryCmbx.getSelectedItem().toString() + "' WHERE patient_no ilike '" + patientNumberTxt.getText() + "%'");
                                                                                    pstmt.executeUpdate();
                                                                                    // this.registrationStatusLbl.setText("PATIENT ACTIVATED SUCCESSFULLY");
                                                                                    // this.registrationStatusLbl.setVisible(true);
                                                                                    javax.swing.JOptionPane.showMessageDialog(this, "Patient Activated Successfully", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                                                                                } else {
                                                                                    java.sql.Statement stm = connectDB.createStatement();

                                                                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO hp_patient_register VALUES(upper(?), upper(?), upper(?), upper(?), ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

                                                                                    pstmt.setString(1, patientNumberTxt.getText());

                                                                                    if (surNameTxt.getText().equals("")) {
                                                                                        javax.swing.JOptionPane.showMessageDialog(this, "You must enter names", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                                                                    } else {
                                                                                        pstmt.setString(2, surNameTxt.getText());
                                                                                    }
                                                                                    pstmt.setString(3, firstNameTxt.getText());
                                                                                    pstmt.setString(4, "");
                                                                                    pstmt.setString(5, nokNameTxt.getText());
                                                                                    pstmt.setString(6, residenceTxt.getText());
                                                                                    pstmt.setString(7, jTextField5.getText());
                                                                                    pstmt.setDate(8, dateOfBirth);
                                                                                    pstmt.setString(9, jTextField5821.getText());
                                                                                    if (selectedchkbx == null) {
                                                                                        javax.swing.JOptionPane.showMessageDialog(this, "You must tick patient Gender", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                                                                    } else {
                                                                                        pstmt.setObject(10, selectedchkbx);
                                                                                    }

                                                                                    pstmt.setDate(11, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker4.getDate()));
                                                                                    pstmt.setObject(12, paymentModeCmbx.getSelectedItem());
                                                                                    pstmt.setString(13, jTextField7.getText());
                                                                                    pstmt.setString(14, jTextField8.getText());
                                                                                    pstmt.setString(15, jComboBox3.getSelectedItem().toString());
                                                                                    pstmt.setObject(16, patientCategoryCmbx.getSelectedItem());
                                                                                    pstmt.setDate(17, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                                                                    pstmt.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker4.getDate()));
                                                                                    pstmt.setObject(19, branchTxt.getText());
                                                                                    pstmt.setString(20, "");
                                                                                    pstmt.setString(21, jTextField8.getText());
                                                                                    pstmt.setString(22, emailAddTxt.getText());
                                                                                    pstmt.setString(23, idPassportTxt.getText());
                                                                                    pstmt.setString(24, jTextField20.getText());
                                                                                    pstmt.setObject(25, patientsNo);
                                                                                    pstmt.setString(26, nationalityCmbx.getSelectedItem().toString());
                                                                                    pstmt.setString(27, nokTelephoneTxt.getText());
                                                                                    pstmt.setString(28, nokRelationShipCmbx.getSelectedItem().toString().toUpperCase());
                                                                                    pstmt.setString(29, nokResidenceTxt.getText());
                                                                                    pstmt.setString(30, emailAddTxt1.getText());
                                                                                    pstmt.setObject(31, selectedchkbx1);
                                                                                    pstmt.setString(32, clinicNumberTxt.getText());
                                                                                    pstmt.setString(33, ageTxt.getText());
                                                                                    pstmt.setString(34, locationTxt.getText());
                                                                                    pstmt.setString(35, currentResidenceTxt.getText());
                                                                                    pstmt.setString(36, jTextField25.getText());
                                                                                    pstmt.setString(37, jTextField26.getText());
                                                                                    pstmt.setString(38, informationSourceCmbx.getSelectedItem().toString());
                                                                                    pstmt.setString(39, educationLevelCmbx.getSelectedItem().toString());
                                                                                    pstmt.setString(40, occupationCmbx.getSelectedItem().toString());
                                                                                    pstmt.setString(41, religionCmbx.getSelectedItem().toString());
                                                                                    pstmt.setString(42, oldFileNumberTxt.getText());
                                                                                    pstmt.setString(43, placeOfBirthTxt.getText());
                                                                                    pstmt.setBoolean(44, true);
                                                                                    pstmt.setString(45, this.emailAddTxt.getText());
                                                                                    pstmt.setString(46, this.countyofBirthCmbx.getSelectedItem().toString());
                                                                                    pstmt.setString(47, this.countyofResidenceCmbx.getSelectedItem().toString());
                                                                                    pstmt.setBoolean(48, this.nhifChbx.isSelected());
                                                                                    pstmt.setString(49, this.nhifNumberTxt.getText());
                                                                                    pstmt.setString(50, this.employerTxt.getText());
                                                                                    pstmt.setString(51, this.employerTelTxt.getText());
                                                                                    pstmt.setString(52, this.referralTypeCmbx.getSelectedItem().toString());
                                                                                    pstmt.setString(53, this.cSheetNoTxt.getText());
                                                                                    pstmt.setString(54, this.specialtyClinicCmbx.getSelectedItem().toString());
                                                                                    pstmt.setString(55, this.disabilityCmbx.getSelectedItem().toString());
                                                                                    pstmt.executeUpdate();

                                                                                    //  this.registrationStatusLbl.setText("PATIENT REGISTRATION SUCCESSFUL");
                                                                                    //  this.registrationStatusLbl.setVisible(true);
                                                                                    javax.swing.JOptionPane.showMessageDialog(this, "Patient Activated Successfully", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                                                                                    inpatientActivation = false;
                                                                                }
                                                                            } else {
                                                                                if (createNewFileRbtn.isSelected() || createOldFileRbtn.isSelected()) {

                                                                                    java.sql.Statement stmtp = connectDB.createStatement();
                                                                                    java.sql.ResultSet rsetp = stmtp.executeQuery("select patient_no from hp_patient_register where patient_no ='" + this.patientNumberTxt.getText() + "' AND patient_no != ''");
                                                                                    while (rsetp.next()) {
                                                                                        patientNo = rsetp.getObject(1).toString();
                                                                                    }

                                                                                    if (this.patientNumberTxt.getText().equalsIgnoreCase(patientNo)) {
                                                                                        this.registrationStatusLbl.setForeground(java.awt.Color.red);
                                                                                        this.registrationStatusLbl.setText("Patient No. Already On File");
                                                                                        this.registrationStatusLbl.setVisible(true);
                                                                                    } else {
                                                                                        // Check if the file being created is a new on or its an old file which has not been created
                                                                                        if (createNewFileRbtn.isSelected()) {
                                                                                            // File to be automatically numbered if new.
                                                                                            manualNo = true;
                                                                                        } else {
                                                                                            if (revisitRbtn.isSelected() || createOldFileRbtn.isSelected()) {
                                                                                                // File to be assigned number appearing on the file.
                                                                                                manualNo = false;
                                                                                            }
                                                                                        }
                                                                                        java.sql.Statement stm1 = connectDB.createStatement();
                                                                                        if (manualNo) {
                                                                                            patientsNo = patientsNo;
                                                                                        } else {
                                                                                            if (patientNumberTxt.getText().toString().equalsIgnoreCase("") | patientNumberTxt.getText().toString().equalsIgnoreCase(" ") | patientNumberTxt.getText().toString().equalsIgnoreCase("  ") | patientNumberTxt.getText().toString().equalsIgnoreCase("   ") | patientNumberTxt.getText().toString().equalsIgnoreCase("    ")) {
                                                                                                // if(jTextField3.getText().toString().equalsIgnoreCase("") | jTextField3.getText().toString().equalsIgnoreCase(" ").concat("")){
                                                                                                javax.swing.JOptionPane.showMessageDialog(this, "You cannot save without the patient no", "CAUTION MESSAGE", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                                                                                            } else {
                                                                                                if (revisitRbtn.isSelected() || createOldFileRbtn.isSelected()) {
                                                                                                    patientsNo = patientNumberTxt.getText();
                                                                                                }
                                                                                            }
                                                                                        }

                                                                                        java.sql.Statement stm = connectDB.createStatement();

                                                                                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO hp_patient_register VALUES(upper(?), upper(?), upper(?), upper(?), ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

                                                                                        pstmt.setString(1, patientsNo);

                                                                                        if (surNameTxt.getText().equals("")) {
                                                                                            javax.swing.JOptionPane.showMessageDialog(this, "You must enter names", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                                                                        } else {
                                                                                            pstmt.setString(2, surNameTxt.getText());
                                                                                        }
                                                                                        pstmt.setString(3, firstNameTxt.getText());
                                                                                        pstmt.setString(4, "");
                                                                                        pstmt.setString(5, nokNameTxt.getText());
                                                                                        pstmt.setString(6, residenceTxt.getText());
                                                                                        pstmt.setString(7, jTextField5.getText());
                                                                                        pstmt.setDate(8, dateOfBirth);
                                                                                        pstmt.setString(9, jTextField5821.getText());
                                                                                        if (selectedchkbx == null) {
                                                                                            javax.swing.JOptionPane.showMessageDialog(this, "You must tick patient Gender", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                                                                        } else {
                                                                                            pstmt.setObject(10, selectedchkbx);
                                                                                        }

                                                                                        pstmt.setDate(11, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker4.getDate()));
                                                                                        pstmt.setObject(12, paymentModeCmbx.getSelectedItem());
                                                                                        pstmt.setString(13, jTextField7.getText());
                                                                                        pstmt.setString(14, jTextField8.getText());
                                                                                        pstmt.setString(15, jComboBox3.getSelectedItem().toString());
                                                                                        pstmt.setObject(16, patientCategoryCmbx.getSelectedItem());
                                                                                        pstmt.setDate(17, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                                                                        pstmt.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker4.getDate()));
                                                                                        pstmt.setObject(19, branchTxt.getText());
                                                                                        pstmt.setString(20, "");
                                                                                        pstmt.setString(21, jTextField8.getText());
                                                                                        pstmt.setString(22, emailAddTxt.getText());
                                                                                        pstmt.setString(23, idPassportTxt.getText());
                                                                                        pstmt.setString(24, jTextField20.getText());
                                                                                        pstmt.setObject(25, patientsNo);
                                                                                        pstmt.setString(26, nationalityCmbx.getSelectedItem().toString());
                                                                                        pstmt.setString(27, nokTelephoneTxt.getText());
                                                                                        pstmt.setString(28, nokRelationShipCmbx.getSelectedItem().toString().toUpperCase());
                                                                                        pstmt.setString(29, nokResidenceTxt.getText());
                                                                                        pstmt.setString(30, emailAddTxt1.getText());
                                                                                        pstmt.setObject(31, selectedchkbx1);
                                                                                        pstmt.setString(32, clinicNumberTxt.getText());
                                                                                        pstmt.setString(33, ageTxt.getText());
                                                                                        pstmt.setString(34, locationTxt.getText());
                                                                                        pstmt.setString(35, currentResidenceTxt.getText());
                                                                                        pstmt.setString(36, jTextField25.getText());
                                                                                        pstmt.setString(37, jTextField26.getText());
                                                                                        pstmt.setString(38, informationSourceCmbx.getSelectedItem().toString());
                                                                                        pstmt.setString(39, educationLevelCmbx.getSelectedItem().toString());
                                                                                        pstmt.setString(40, occupationCmbx.getSelectedItem().toString());
                                                                                        pstmt.setString(41, religionCmbx.getSelectedItem().toString());
                                                                                        pstmt.setString(42, oldFileNumberTxt.getText());
                                                                                        pstmt.setString(43, placeOfBirthTxt.getText());
                                                                                        pstmt.setBoolean(44, true);
                                                                                        pstmt.setString(45, this.emailAddTxt.getText());
                                                                                        pstmt.setString(46, this.countyofBirthCmbx.getSelectedItem().toString());
                                                                                        pstmt.setString(47, this.countyofResidenceCmbx.getSelectedItem().toString());
                                                                                        pstmt.setBoolean(48, this.nhifChbx.isSelected());
                                                                                        pstmt.setString(49, this.nhifNumberTxt.getText());
                                                                                        pstmt.setString(50, this.employerTxt.getText());
                                                                                        pstmt.setString(51, this.employerTelTxt.getText());
                                                                                        pstmt.setString(52, this.referralTypeCmbx.getSelectedItem().toString());
                                                                                        pstmt.setString(53, this.cSheetNoTxt.getText());
                                                                                        pstmt.setString(54, this.specialtyClinicCmbx.getSelectedItem().toString());
                                                                                        pstmt.setString(55, this.disabilityCmbx.getSelectedItem().toString());
                                                                                        pstmt.executeUpdate();

                                                                                        //  this.registrationStatusLbl.setText("PATIENT REGISTRATION SUCCESSFUL");
                                                                                        //  this.registrationStatusLbl.setVisible(true);
                                                                                        ////             javax.swing.JOptionPane.showMessageDialog(this, "Patient Registered Successfully", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                                                                                    }
                                                                                }
                                                                            }

                                                                        } else {
                                                                            if (this.paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {
                                                                                java.util.Date time = null;
                                                                                java.util.Date term = null;
                                                                                java.util.Date exp = null;
                                                                                java.util.Date date = null;
                                                                                double limit = 0.00;
                                                                                double balance = 0.00;
                                                                                String Suspended = null;
                                                                                String Closed = null;
                                                                                jSearchDialog11.dispose();
                                                                                java.sql.Statement stmt1h = connectDB.createStatement();
                                                                                java.sql.ResultSet rset1h = stmt1h.executeQuery("select count(payee) from ac_debtors where payee = '" + jTextField361.getText() + "' and dealer = '" + jTextField2.getText() + "'");
                                                                                while (rset1h.next()) {
                                                                                    occurence = rset1h.getInt(1);
                                                                                }
                                                                                if (occurence > 1) {
                                                                                    java.sql.Statement stmt1 = connectDB.createStatement();
                                                                                    java.sql.ResultSet rset1 = stmt1.executeQuery("select sum(balance-credit_bal) from ac_debtors where payee = '" + jTextField361.getText() + "' and dealer = '" + jTextField2.getText() + "'");
                                                                                    while (rset1.next()) {
                                                                                        balance = rset1.getDouble(1);
                                                                                    }
                                                                                } else {
                                                                                    balance = 0.00;
                                                                                }
                                                                                java.sql.PreparedStatement stmtq = connectDB.prepareStatement("select suspended, closed,expiry_date,current_date,scheme_limit,term_date,current_timestamp from ac_schemes where account_no = ?");//createStatement();
                                                                                stmtq.setString(1, jTextField15.getText());
                                                                                java.sql.ResultSet rsetq = stmtq.executeQuery();// scheme_name = '"+jTextField361.getText()+"' and payer_name = '"+jTextField2.getText()+"'");
                                                                                while (rsetq.next()) {
                                                                                    Suspended = rsetq.getObject(1).toString();
                                                                                    Closed = rsetq.getObject(2).toString();
                                                                                    exp = rsetq.getDate(3);
                                                                                    date = rsetq.getDate(4);
                                                                                    limit = rsetq.getDouble(5);
                                                                                    term = rsetq.getTimestamp(6);
                                                                                    time = rsetq.getTimestamp(7);
                                                                                }
                                                                                if (Suspended.equals("true")) {

                                                                                    javax.swing.JOptionPane.showMessageDialog(this, "SCHEME SUSPENDED !!", "Suspension MESSAGE", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                                                                                    jTextField361.setText("");
                                                                                    jTextField2.setText("");
                                                                                } else {
                                                                                    if (Closed.equals("true")) {

                                                                                        javax.swing.JOptionPane.showMessageDialog(this, "SCHEME CLOSED !!", "Viability MESSAGE", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                                                                                        jTextField361.setText("");
                                                                                        jTextField2.setText("");
                                                                                    } else {
                                                                                        if (exp.before(date)) {

                                                                                            javax.swing.JOptionPane.showMessageDialog(this, "SCHEME EXPIRED !! ON " + exp, "Expiry MESSAGE", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                                                                                            jTextField361.setText("");
                                                                                            jTextField2.setText("");
                                                                                        } else {
                                                                                            if (term.before(time)) {

                                                                                                javax.swing.JOptionPane.showMessageDialog(this, "SCHEME TERMINATED !! ON " + term, "Expiry MESSAGE", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                                                                                                jTextField361.setText("");
                                                                                                jTextField2.setText("");
                                                                                            } else {

                                                                                                if (balance > limit) {

                                                                                                    javax.swing.JOptionPane.showMessageDialog(this, "SCHEME LIMIT IS " + limit + " AND DEBT IS " + balance + "\n Hence Limit exceeded by " + (balance - limit), "Debt Status MESSAGE", javax.swing.JOptionPane.PLAIN_MESSAGE);
                                                                                                    jTextField361.setText("");
                                                                                                    jTextField2.setText("");
                                                                                                } else {

                                                                                                    java.sql.Statement stm = connectDB.createStatement();
                                                                                                    java.sql.ResultSet rs = stm.executeQuery("select nextval('creditslip_no_seq'),current_user");
                                                                                                    while (rs.next()) {
                                                                                                        slipNo = rs.getInt(1);
                                                                                                        //  user = rs.getObject(2).toString();
                                                                                                    }

                                                                                                    if (revisitRbtn.isSelected()) {
                                                                                                        if (!inpatientActivation) {
                                                                                                            java.sql.PreparedStatement pstmt11 = connectDB.prepareStatement("UPDATE hp_patient_register set description = '" + jTextField361.getText() + "',payer = '" + jTextField2.getText() + "',account_no ='" + jTextField15.getText() + "',expiry_date = '" + datePicker1.getDate() + "',member_name ='" + jTextField36.getText() + "',last_visit = '" + datePicker4.getDate().toString() + "',pay_mode = '" + paymentModeCmbx.getSelectedItem().toString() + "',category = '" + patientCategoryCmbx.getSelectedItem() + "',card_no = '" + jTextField13.getText() + "' WHERE patient_no ilike '" + patientNumberTxt.getText() + "'");
                                                                                                            pstmt11.executeUpdate();
                                                                                                            javax.swing.JOptionPane.showMessageDialog(this, "Patient Activated Successfully", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                                                                                                        } else {
                                                                                                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO hp_patient_register VALUES(upper(?), upper(?), upper(?), upper(?), ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

                                                                                                            pstmt.setString(1, patientNumberTxt.getText());

                                                                                                            if (surNameTxt.getText().equals("")) {
                                                                                                                javax.swing.JOptionPane.showMessageDialog(this, "You must enter names", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                                                                                            } else {
                                                                                                                pstmt.setString(2, surNameTxt.getText());
                                                                                                            }
                                                                                                            pstmt.setString(3, firstNameTxt.getText());
                                                                                                            pstmt.setString(4, "");
                                                                                                            pstmt.setString(5, nokNameTxt.getText());
                                                                                                            pstmt.setString(6, residenceTxt.getText());
                                                                                                            pstmt.setString(7, jTextField5.getText());
                                                                                                            pstmt.setDate(8, dateOfBirth);
                                                                                                            pstmt.setString(9, jTextField5821.getText());
                                                                                                            if (selectedchkbx == null) {
                                                                                                                javax.swing.JOptionPane.showMessageDialog(this, "You must tick patient Gender", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                                                                                            } else {
                                                                                                                pstmt.setObject(10, selectedchkbx);
                                                                                                            }

                                                                                                            pstmt.setDate(11, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker4.getDate()));
                                                                                                            pstmt.setObject(12, paymentModeCmbx.getSelectedItem());
                                                                                                            pstmt.setString(13, jTextField2.getText());
                                                                                                            pstmt.setString(14, jTextField15.getText());
                                                                                                            pstmt.setString(15, jTextField361.getText());
                                                                                                            pstmt.setObject(16, patientCategoryCmbx.getSelectedItem());
                                                                                                            pstmt.setObject(17, java.sql.Date.valueOf(jTextField18.getText()));
                                                                                                            pstmt.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker4.getDate()));
                                                                                                            pstmt.setObject(19, branchTxt.getText());
                                                                                                            pstmt.setString(20, jTextField36.getText());
                                                                                                            pstmt.setString(21, jTextField13.getText());
                                                                                                            pstmt.setString(22, emailAddTxt.getText());
                                                                                                            pstmt.setString(23, idPassportTxt.getText());
                                                                                                            pstmt.setString(24, jTextField20.getText());
                                                                                                            pstmt.setObject(25, patientsNo);
                                                                                                            pstmt.setString(26, nationalityCmbx.getSelectedItem().toString());
                                                                                                            pstmt.setString(27, nokTelephoneTxt.getText());
                                                                                                            pstmt.setString(28, nokRelationShipCmbx.getSelectedItem().toString().toUpperCase());
                                                                                                            pstmt.setString(29, nokResidenceTxt.getText());
                                                                                                            pstmt.setString(30, emailAddTxt1.getText());
                                                                                                            pstmt.setObject(31, selectedchkbx1);
                                                                                                            pstmt.setString(32, clinicNumberTxt.getText());
                                                                                                            pstmt.setString(33, ageTxt.getText());
                                                                                                            pstmt.setString(34, locationTxt.getText());
                                                                                                            pstmt.setString(35, currentResidenceTxt.getText());
                                                                                                            pstmt.setString(36, jTextField25.getText());
                                                                                                            pstmt.setString(37, jTextField26.getText());
                                                                                                            pstmt.setString(38, informationSourceCmbx.getSelectedItem().toString());
                                                                                                            pstmt.setString(39, educationLevelCmbx.getSelectedItem().toString());
                                                                                                            pstmt.setString(40, occupationCmbx.getSelectedItem().toString());
                                                                                                            pstmt.setString(41, religionCmbx.getSelectedItem().toString());
                                                                                                            pstmt.setString(42, oldFileNumberTxt.getText());
                                                                                                            pstmt.setString(43, placeOfBirthTxt.getText());
                                                                                                            pstmt.setBoolean(44, true);
                                                                                                            pstmt.setString(45, this.emailAddTxt.getText());
                                                                                                            pstmt.setString(46, this.countyofBirthCmbx.getSelectedItem().toString());
                                                                                                            pstmt.setString(47, this.countyofResidenceCmbx.getSelectedItem().toString());
                                                                                                            pstmt.setBoolean(48, this.nhifChbx.isSelected());
                                                                                                            pstmt.setString(49, this.nhifNumberTxt.getText());
                                                                                                            pstmt.setString(50, this.employerTxt.getText());
                                                                                                            pstmt.setString(51, this.employerTelTxt.getText());
                                                                                                            pstmt.setString(52, this.referralTypeCmbx.getSelectedItem().toString());
                                                                                                            pstmt.setString(53, this.cSheetNoTxt.getText());
                                                                                                            pstmt.setString(54, this.specialtyClinicCmbx.getSelectedItem().toString());
                                                                                                            pstmt.setString(55, this.disabilityCmbx.getSelectedItem().toString());
                                                                                                            pstmt.executeUpdate();

                                                                                                            // this.registrationStatusLbl.setText("PATIENT REGISTRATION SUCCESSFUL");
                                                                                                            javax.swing.JOptionPane.showMessageDialog(this, "Patient File Activated Successfully", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                                                                                                            inpatientActivation = false;
                                                                                                        }

                                                                                                    } else {
                                                                                                        if (createNewFileRbtn.isSelected() || createOldFileRbtn.isSelected()) {

                                                                                                            java.sql.Statement stmtp = connectDB.createStatement();
                                                                                                            java.sql.ResultSet rsetp = stmtp.executeQuery("select patient_no from hp_patient_register where patient_no ='" + this.patientNumberTxt.getText() + "'  AND patient_no != ''");
                                                                                                            while (rsetp.next()) {
                                                                                                                patientNo = rsetp.getObject(1).toString();
                                                                                                            }

                                                                                                            if (this.patientNumberTxt.getText().equalsIgnoreCase(patientNo)) {
                                                                                                                this.registrationStatusLbl.setForeground(java.awt.Color.red);
                                                                                                                this.registrationStatusLbl.setText("Patient No. Already On File");

                                                                                                            } else {
// Check if the file being created is a new or its an old file which has not been created
                                                                                                                if (createNewFileRbtn.isSelected()) {
                                                                                                                    // File to be automatically numbered if new.
                                                                                                                    manualNo = true;
                                                                                                                } else {
                                                                                                                    if (revisitRbtn.isSelected() || createOldFileRbtn.isSelected()) {
                                                                                                                        // File to be assigned number appearing on the file.
                                                                                                                        manualNo = false;
                                                                                                                    }
                                                                                                                }
                                                                                                                java.sql.Statement stm1 = connectDB.createStatement();
                                                                                                                if (manualNo) {

                                                                                                                    patientsNo = patientsNo;
                                                                                                                } else {
                                                                                                                    if (patientNumberTxt.getText().toString().equalsIgnoreCase("") | patientNumberTxt.getText().toString().equalsIgnoreCase(" ") | patientNumberTxt.getText().toString().equalsIgnoreCase("  ") | patientNumberTxt.getText().toString().equalsIgnoreCase("   ") | patientNumberTxt.getText().toString().equalsIgnoreCase("    ")) {
                                                                                                                        // if(jTextField3.getText().toString().equalsIgnoreCase("") | jTextField3.getText().toString().equalsIgnoreCase(" ").concat("")){
                                                                                                                        javax.swing.JOptionPane.showMessageDialog(this, "You cannot save without the patient no", "CAUTION MESSAGE", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                                                                                                                    } else {
                                                                                                                        if (revisitRbtn.isSelected() || createOldFileRbtn.isSelected()) {
                                                                                                                            patientsNo = patientNumberTxt.getText();
                                                                                                                        }
                                                                                                                    }
                                                                                                                }

                                                                                                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT INTO hp_patient_register VALUES(upper(?), upper(?), upper(?), upper(?), ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");

                                                                                                                pstmt.setString(1, patientsNo);

                                                                                                                if (surNameTxt.getText().equals("")) {
                                                                                                                    javax.swing.JOptionPane.showMessageDialog(this, "You must enter names", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                                                                                                } else {
                                                                                                                    pstmt.setString(2, surNameTxt.getText());
                                                                                                                }
                                                                                                                pstmt.setString(3, firstNameTxt.getText());
                                                                                                                pstmt.setString(4, "");
                                                                                                                pstmt.setString(5, nokNameTxt.getText());
                                                                                                                pstmt.setString(6, residenceTxt.getText());
                                                                                                                pstmt.setString(7, jTextField5.getText());
                                                                                                                pstmt.setDate(8, dateOfBirth);
                                                                                                                pstmt.setString(9, jTextField5821.getText());
                                                                                                                if (selectedchkbx == null) {
                                                                                                                    javax.swing.JOptionPane.showMessageDialog(this, "You must tick patient Gender", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                                                                                                                } else {
                                                                                                                    pstmt.setObject(10, selectedchkbx);
                                                                                                                }

                                                                                                                pstmt.setDate(11, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker4.getDate()));
                                                                                                                pstmt.setObject(12, paymentModeCmbx.getSelectedItem());
                                                                                                                pstmt.setString(13, jTextField2.getText());
                                                                                                                pstmt.setString(14, jTextField15.getText());
                                                                                                                pstmt.setString(15, jTextField361.getText());
                                                                                                                pstmt.setObject(16, patientCategoryCmbx.getSelectedItem());
                                                                                                                pstmt.setObject(17, java.sql.Date.valueOf(jTextField18.getText()));
                                                                                                                pstmt.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker4.getDate()));
                                                                                                                pstmt.setObject(19, branchTxt.getText());
                                                                                                                pstmt.setString(20, jTextField36.getText());
                                                                                                                pstmt.setString(21, jTextField13.getText());
                                                                                                                pstmt.setString(22, emailAddTxt.getText());
                                                                                                                pstmt.setString(23, idPassportTxt.getText());
                                                                                                                pstmt.setString(24, jTextField20.getText());
                                                                                                                pstmt.setObject(25, patientsNo);
                                                                                                                pstmt.setString(26, nationalityCmbx.getSelectedItem().toString());
                                                                                                                pstmt.setString(27, nokTelephoneTxt.getText());
                                                                                                                pstmt.setString(28, nokRelationShipCmbx.getSelectedItem().toString().toUpperCase());
                                                                                                                pstmt.setString(29, nokResidenceTxt.getText());
                                                                                                                pstmt.setString(30, emailAddTxt1.getText());
                                                                                                                pstmt.setObject(31, selectedchkbx1);
                                                                                                                pstmt.setString(32, clinicNumberTxt.getText());
                                                                                                                pstmt.setString(33, ageTxt.getText());
                                                                                                                pstmt.setString(34, locationTxt.getText());
                                                                                                                pstmt.setString(35, currentResidenceTxt.getText());
                                                                                                                pstmt.setString(36, jTextField25.getText());
                                                                                                                pstmt.setString(37, jTextField26.getText());
                                                                                                                pstmt.setString(38, informationSourceCmbx.getSelectedItem().toString());
                                                                                                                pstmt.setString(39, educationLevelCmbx.getSelectedItem().toString());
                                                                                                                pstmt.setString(40, occupationCmbx.getSelectedItem().toString());
                                                                                                                pstmt.setString(41, religionCmbx.getSelectedItem().toString());
                                                                                                                pstmt.setString(42, oldFileNumberTxt.getText());
                                                                                                                pstmt.setString(43, placeOfBirthTxt.getText());
                                                                                                                pstmt.setBoolean(44, true);
                                                                                                                pstmt.setString(45, this.emailAddTxt.getText());
                                                                                                                pstmt.setString(46, this.countyofBirthCmbx.getSelectedItem().toString());
                                                                                                                pstmt.setString(47, this.countyofResidenceCmbx.getSelectedItem().toString());
                                                                                                                pstmt.setBoolean(48, this.nhifChbx.isSelected());
                                                                                                                pstmt.setString(49, this.nhifNumberTxt.getText());
                                                                                                                pstmt.setString(50, this.employerTxt.getText());
                                                                                                                pstmt.setString(51, this.employerTelTxt.getText());
                                                                                                                pstmt.setString(52, this.referralTypeCmbx.getSelectedItem().toString());
                                                                                                                pstmt.setString(53, this.cSheetNoTxt.getText());
                                                                                                                pstmt.setString(54, this.specialtyClinicCmbx.getSelectedItem().toString());
                                                                                                                pstmt.setString(55, this.disabilityCmbx.getSelectedItem().toString());

                                                                                                                pstmt.executeUpdate();

                                                                                                                // this.registrationStatusLbl.setText("PATIENT REGISTRATION SUCCESSFUL");
                                                                                                                ////                   javax.swing.JOptionPane.showMessageDialog(this, "Patient Registered Successfully", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                                                                                                            }
                                                                                                        }
                                                                                                    }

                                                                                                    if (createNewFileRbtn.isSelected()) {
                                                                                                        patientsNo = patientsNo;
                                                                                                    } else {
                                                                                                        if (revisitRbtn.isSelected() || createOldFileRbtn.isSelected()) {
                                                                                                            patientsNo = patientNumberTxt.getText();
                                                                                                        }
                                                                                                    }
                                                                                                    java.sql.PreparedStatement pstmt2a = connectDB.prepareStatement("INSERT INTO credit_acc_slip VALUES(?,?,?,?,?,?, ?, ?,?,?,?,?,?)");

                                                                                                    pstmt2a.setString(1, patientsNo);
                                                                                                    pstmt2a.setString(2, firstNameTxt.getText() + " " + surNameTxt.getText());
                                                                                                    pstmt2a.setString(3, jTextField361.getText());
                                                                                                    pstmt2a.setString(4, jTextField2.getText());
                                                                                                    pstmt2a.setDouble(5, 0.00);
                                                                                                    pstmt2a.setInt(6, slipNo);
                                                                                                    pstmt2a.setDate(8, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker4.getDate()));
                                                                                                    pstmt2a.setString(7, user);
                                                                                                    pstmt2a.setString(9, jTextField15.getText());
                                                                                                    pstmt2a.setString(10, jTextField13.getText());
                                                                                                    pstmt2a.setString(11, jTextField36.getText());
                                                                                                    pstmt2a.setString(12, cardSerialNoTxt.getText());
                                                                                                    System.out.println("Text Field 12 : [" + jTextField12.getText().toCharArray().length + "]");
                                                                                                    if (jTextField12.getText().trim().toCharArray().length > 0) {
                                                                                                        pstmt2a.setDouble(13, java.lang.Double.parseDouble(jTextField12.getText()));// == "" ? 0.00 : java.lang.Double.parseDouble(jTextField12.getText()));
                                                                                                    } else {
                                                                                                        pstmt2a.setDouble(13, 0.00);
                                                                                                    }
                                                                                                    //                                     pstmt2a.setObject(13,jTextField12.getText());
                                                                                                    pstmt2a.executeUpdate();

                                                                                                    if (jTextField17.getText().equalsIgnoreCase("")) {
                                                                                                    } else {
                                                                                                        java.sql.PreparedStatement pstmt11 = connectDB.prepareStatement("UPDATE ac_schemes SET usesmartcard = true,sch_abbrev = '" + jTextField17.getText() + "' WHERE account_no = '" + jTextField15.getText() + "'");
                                                                                                        pstmt11.executeUpdate();
                                                                                                    }

                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                //  javax.swing.JOptionPane.showMessageDialog(this, "Insert Successful", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                                                                            }
                                                                        }
                                                                    }

                                                                    if (createNewFileRbtn.isSelected()) {
                                                                        patientsNo = patientsNo;
                                                                    } else {
                                                                        if (revisitRbtn.isSelected() || createOldFileRbtn.isSelected()) {
                                                                            patientsNo = patientNumberTxt.getText();
                                                                        }
                                                                    }

                                                                    java.sql.PreparedStatement pstmt21a = connectDB.prepareStatement("INSERT INTO hp_patient_visit("
                                                                            + "patient_no, name, ip_no, payment, visit_no, services, quantity,"
                                                                            + "department, amount, test, date, result, doctor_name, user_name,"
                                                                            + "input_date, transaction_type, nature, time, comments, parameter,"
                                                                            + "status, age, gender, marital_status,clinic, urgency, patient_disability,"
                                                                            + " service_start_time, samaritan_name, samaritan_tel_no, nok_name, nok_tel_no, "
                                                                            + "referral_type, referral_county, referral_facility)"
                                                                            + "VALUES (?, ?, ?, ?, ?, ?, ?,"
                                                                            + "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,"
                                                                            + "?,?,?,?, ?, ?, ?, ?, ?)");
                                                                    pstmt21a.setString(1, patientsNo);
                                                                    pstmt21a.setString(2, firstNameTxt.getText() + " " + surNameTxt.getText());
                                                                    pstmt21a.setString(3, "OP");
                                                                    pstmt21a.setObject(4, paymentModeCmbx.getSelectedItem());
                                                                    pstmt21a.setInt(5, slipNo);
                                                                    pstmt21a.setObject(6, referralTypeCmbx.getSelectedItem());
                                                                    pstmt21a.setDouble(7, 1);
                                                                    pstmt21a.setObject(8, patientCategoryCmbx.getSelectedItem());
                                                                    pstmt21a.setDouble(9, 0.00);
                                                                    pstmt21a.setString(10, residenceTxt.getText());
                                                                    pstmt21a.setDate(11, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker4.getDate()));
                                                                    pstmt21a.setDouble(12, 0.00);
                                                                    pstmt21a.setString(13, "");
                                                                    pstmt21a.setString(14, user);
                                                                    pstmt21a.setTimestamp(15, com.afrisoftech.lib.ServerTime.getSQLTimeStamp(connectDB));
                                                                    pstmt21a.setString(16, "Registration");
                                                                    pstmt21a.setString(17, "1");
                                                                    pstmt21a.setInt(18, Integer.parseInt("0"));
                                                                    if (createNewFileRbtn.isSelected()) {
                                                                        pstmt21a.setString(19, "New");
                                                                    } else {
                                                                        pstmt21a.setString(19, "Old");
                                                                    }
                                                                    pstmt21a.setObject(20, servicePointCmbx.getSelectedItem());
                                                                    pstmt21a.setBoolean(21, false);
                                                                    pstmt21a.setDouble(22, Double.parseDouble(ageTxt.getText()));
                                                                    pstmt21a.setString(23, selectedchkbx);
                                                                    pstmt21a.setString(24, selectedchkbx1);
                                                                    pstmt21a.setObject(25, specialtyClinicCmbx.getSelectedItem());
                                                                    pstmt21a.setObject(26, urgencyCMBX.getSelectedItem());
                                                                    pstmt21a.setObject(27, disabilityCmbx.getSelectedItem());
                                                                    pstmt21a.setTimestamp(28, serviceStartTime);
                                                                    if (samaritanChkbx.isSelected()) {
                                                                        pstmt21a.setObject(29, nokNameTxt.getText());
                                                                        pstmt21a.setObject(30, nokTelephoneTxt.getText());
                                                                        pstmt21a.setObject(31, null);
                                                                        pstmt21a.setObject(32, null);
                                                                    } else {
                                                                        pstmt21a.setObject(29, null);
                                                                        pstmt21a.setObject(30, null);
                                                                        pstmt21a.setObject(31, nokNameTxt.getText());
                                                                        pstmt21a.setObject(32, nokTelephoneTxt.getText());
                                                                    }
                                                                    pstmt21a.setObject(33, referralTypeCmbx.getSelectedItem());
                                                                    pstmt21a.setObject(34, referralCountyCmbx.getSelectedItem());
                                                                    pstmt21a.setObject(35, referralFacilityNameTxt.getText());
                                                                    pstmt21a.executeUpdate();

                                                                    java.sql.Statement stm1 = connectDB.createStatement();
                                                                    if (createNewFileRbtn.isSelected()) {
                                                                        java.sql.Statement stmnz1 = connectDB.createStatement();
                                                                        java.sql.ResultSet rsnz1 = stmnz1.executeQuery("select prefix_item,digit_no,yr_end,inc_year from pb_patient_names");
                                                                        while (rsnz1.next()) {
                                                                            preFix = rsnz1.getString(1);
                                                                            digitNo = rsnz1.getInt(2);
                                                                            yrEnd = rsnz1.getString(3);
                                                                            incYr = rsnz1.getBoolean(4);
                                                                        }
                                                                        String patNos = null;

                                                                        java.sql.Statement stmtx = connectDB.createStatement();

                                                                        if (manualNo) {
                                                                            java.sql.Statement pss1x = connectDB.createStatement();
                                                                            java.sql.ResultSet rss1x = pss1x.executeQuery("select nextval('outpatient_no_seq')");
                                                                            while (rss1x.next()) {
                                                                                patNos = rss1x.getObject(1).toString();

                                                                                if (incYr) {
                                                                                    if (preFix.equalsIgnoreCase("noPrefix")) {
                                                                                        java.sql.Statement pss1 = connectDB.createStatement();
                                                                                        java.sql.ResultSet rss1 = pss1.executeQuery("select lpad('" + patNos + "'," + digitNo + ",'0')||'/'||'" + yrs + "'");
                                                                                        while (rss1.next()) {
                                                                                            patientNo2 = rss1.getObject(1).toString();
                                                                                            patientNumberTxt.setText(rss1.getObject(1).toString());
                                                                                        }
                                                                                    } else {
                                                                                        java.sql.Statement pss1 = connectDB.createStatement();
                                                                                        java.sql.ResultSet rss1 = pss1.executeQuery("select '" + preFix + "'||lpad('" + patNos + "'," + digitNo + ",'0')||'/'||'" + yrs + "'");
                                                                                        while (rss1.next()) {
                                                                                            patientNo2 = rss1.getObject(1).toString();
                                                                                            patientNumberTxt.setText(rss1.getObject(1).toString());
                                                                                        }
                                                                                    }
                                                                                } else {
                                                                                    if (preFix.equalsIgnoreCase("noPrefix")) {
                                                                                        java.sql.Statement pss1 = connectDB.createStatement();
                                                                                        java.sql.ResultSet rss1 = pss1.executeQuery("select lpad('" + patNos + "'," + digitNo + ",'0')");
                                                                                        while (rss1.next()) {
                                                                                            patientNo2 = rss1.getObject(1).toString();
                                                                                            patientNumberTxt.setText(rss1.getObject(1).toString());
                                                                                        }
                                                                                    } else {
                                                                                        java.sql.Statement pss1 = connectDB.createStatement();
                                                                                        java.sql.ResultSet rss1 = pss1.executeQuery("select '" + preFix + "'||lpad('" + patNos + "'," + digitNo + ",'0')");
                                                                                        while (rss1.next()) {
                                                                                            patientNo2 = rss1.getObject(1).toString();
                                                                                            patientNumberTxt.setText(rss1.getObject(1).toString());
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            java.sql.PreparedStatement pstm = connectDB.prepareStatement("UPDATE hp_patient_register SET patient_no = '" + patientNumberTxt.getText() + "' WHERE patient_no = '" + patientsNo + "'");
                                                                            pstm.executeUpdate();

                                                                            java.sql.PreparedStatement pstmt112 = connectDB.prepareStatement("UPDATE hp_patient_billing SET patient_no = '" + patientNumberTxt.getText() + "' WHERE patient_no = '" + patientsNo + "'");
                                                                            pstmt112.executeUpdate();

                                                                            java.sql.PreparedStatement pstmt112x = connectDB.prepareStatement("UPDATE ac_ledger SET patient_no = '" + patientNumberTxt.getText() + "' WHERE patient_no = '" + patientsNo + "'");
                                                                            pstmt112x.executeUpdate();

                                                                            java.sql.PreparedStatement pstmt112c = connectDB.prepareStatement("UPDATE hp_patient_card SET patient_no = '" + patientNumberTxt.getText() + "' WHERE patient_no = '" + patientsNo + "'");
                                                                            pstmt112c.executeUpdate();

                                                                            java.sql.PreparedStatement pstmn = connectDB.prepareStatement("UPDATE hp_patient_visit SET patient_no = '" + patientNumberTxt.getText() + "' WHERE patient_no = '" + patientsNo + "'");
                                                                            pstmn.executeUpdate();

                                                                            java.sql.PreparedStatement pstmg = connectDB.prepareStatement("UPDATE credit_acc_slip SET patient_no = '" + patientNumberTxt.getText() + "' WHERE patient_no = '" + patientsNo + "'");
                                                                            pstmg.executeUpdate();

                                                                            javax.swing.JOptionPane.showMessageDialog(this, "Patient registration successful for Patient Number :[" + patientNumberTxt.getText() + "] and Name : [" + firstNameTxt.getText() + " " + surNameTxt.getText() + "]", "Confirmation Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                                                                        } else {
                                                                            if (patientNumberTxt.getText().toString().equalsIgnoreCase("") | patientNumberTxt.getText().toString().equalsIgnoreCase(" ") | patientNumberTxt.getText().toString().equalsIgnoreCase("  ") | patientNumberTxt.getText().toString().equalsIgnoreCase("   ") | patientNumberTxt.getText().toString().equalsIgnoreCase("    ")) {
                                                                                // if(jTextField3.getText().toString().equalsIgnoreCase("") | jTextField3.getText().toString().equalsIgnoreCase(" ").concat("")){
                                                                                javax.swing.JOptionPane.showMessageDialog(this, "You cannot save without a patient no", "CAUTION!", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                                                                            } else {
                                                                                patientsNo = patientNumberTxt.getText();
                                                                            }
                                                                        }
                                                                    }

                                                                    java.sql.Statement stmtn = connectDB.createStatement();
                                                                    java.sql.ResultSet rsetn = stmtn.executeQuery("select distinct patient_no,oid from hp_patient_register where patient_no is not null AND department = '" + branchTxt.getText() + "' ORDER BY oid DESC LIMIT 1");
                                                                    while (rsetn.next()) {
                                                                        //   currentFileSeqNoTxt.setText(rsetn.getObject(1).toString());
                                                                    }

                                                                } else {
                                                                    if (saveRegistrationBtn.getText().equalsIgnoreCase("Update")) {

                                                                        //    System.out.println("PSTMT1 : and JTEXTFIELD21 : "+jTextField21.toString());
                                                                        java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("UPDATE hp_patient_register set first_name = ?,"
                                                                                + " category = ?,second_name = ?,nok = ?, "
                                                                                + " residence = ?,address = ?, year_of_birth = ?,"
                                                                                + " tel_no = ?, emails = ?, id_no = ?,nok_add = ?, "
                                                                                + " pat_nationality = ?,nok_telno = ?,nok_relationship = ?, "
                                                                                + " nok_residence = ?, nok_email = ?, pat_marital_status = ?,"
                                                                                + " tribe = ?, district = ?, locations = ?, sub_location = ?, chief_name = ?,"
                                                                                + " sub_chief = ?, information_source = ?, education_level = ?, "
                                                                                + " occupation = ?,pat_religion = ?,sex = ?, home_county = ?, "
                                                                                + "residence_county = ?, nhif_status = ?, "
                                                                                + "nhif_number = ?, employer_name = ?, employer_telephone = ?, refer_source = ?,"
                                                                                + "charge_sheet_no = ?, specialty_clinic = ?,patient_race = ?, birth_place = ? WHERE patient_no = ?");
                                                                        pstmt1.setString(1, surNameTxt.getText());
                                                                        pstmt1.setObject(2, patientCategoryCmbx.getSelectedItem());
                                                                        pstmt1.setString(3, firstNameTxt.getText());
                                                                        pstmt1.setString(4, nokNameTxt.getText());
                                                                        pstmt1.setString(5, residenceTxt.getText());
                                                                        pstmt1.setString(6, jTextField5.getText());
                                                                        pstmt1.setDate(7, dateOfBirth);
                                                                        pstmt1.setString(8, jTextField5821.getText());
                                                                        pstmt1.setString(9, emailAddTxt.getText());
                                                                        pstmt1.setString(10, idPassportTxt.getText());
                                                                        pstmt1.setObject(11, jTextField20.getText());
                                                                        pstmt1.setObject(12, nationalityCmbx.getSelectedItem());
                                                                        pstmt1.setString(13, nokTelephoneTxt.getText());
                                                                        pstmt1.setObject(14, nokRelationShipCmbx.getSelectedItem());
                                                                        pstmt1.setString(15, nokResidenceTxt.getText());
                                                                        pstmt1.setString(16, emailAddTxt1.getText());
                                                                        pstmt1.setString(17, selectedchkbx1);
                                                                        pstmt1.setString(18, clinicNumberTxt.getText());
                                                                        pstmt1.setObject(19, districtCmbx.getSelectedItem());
                                                                        pstmt1.setString(20, locationTxt.getText());
                                                                        pstmt1.setString(21, currentResidenceTxt.getText());
                                                                        pstmt1.setString(22, jTextField25.getText());
                                                                        pstmt1.setString(23, jTextField26.getText());
                                                                        pstmt1.setObject(24, informationSourceCmbx.getSelectedItem());
                                                                        pstmt1.setObject(25, educationLevelCmbx.getSelectedItem());
                                                                        pstmt1.setObject(26, occupationCmbx.getSelectedItem());
                                                                        pstmt1.setObject(27, religionCmbx.getSelectedItem());
                                                                        pstmt1.setString(28, selectedchkbx);
                                                                        pstmt1.setObject(29, countyofBirthCmbx.getSelectedItem());
                                                                        pstmt1.setObject(30, countyofResidenceCmbx.getSelectedItem());
                                                                        pstmt1.setObject(31, nhifChbx.isSelected());
                                                                        pstmt1.setString(32, nhifNumberTxt.getText());
                                                                        pstmt1.setString(33, employerTxt.getText());
                                                                        pstmt1.setString(34, employerTelTxt.getText());
                                                                        pstmt1.setObject(35, referralTypeCmbx.getSelectedItem());
                                                                        pstmt1.setString(36, cSheetNoTxt.getText());
                                                                        pstmt1.setObject(37, specialtyClinicCmbx.getSelectedItem());
                                                                        pstmt1.setString(38, oldFileNumberTxt.getText());
                                                                        pstmt1.setString(39, placeOfBirthTxt.getText());
                                                                        pstmt1.setString(40, patientNumberTxt.getText());

                                                                        pstmt1.executeUpdate();

                                                                        java.sql.PreparedStatement pstmn = connectDB.prepareStatement("UPDATE hp_patient_visit SET name = ? WHERE patient_no = ?");
                                                                        pstmn.setString(1, firstNameTxt.getText() + " " + surNameTxt.getText());
                                                                        pstmn.setString(2, patientNumberTxt.getText());
                                                                        pstmn.executeUpdate();

                                                                        java.sql.PreparedStatement pstmny = connectDB.prepareStatement("UPDATE hp_patient_visit SET  age = '" + ageTxt.getText() + "', gender = '" + selectedchkbx + "', marital_status = '" + selectedchkbx1 + "' WHERE patient_no = '" + patientNumberTxt.getText() + "' AND date = '" + com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker4.getDate()) + "'");
                                                                        // pstmny.
                                                                        pstmny.executeUpdate();

                                                                        java.sql.PreparedStatement pstmnx = connectDB.prepareStatement("UPDATE credit_acc_slip SET pat_name = '" + firstNameTxt.getText() + " " + surNameTxt.getText() + "' WHERE patient_no = '" + patientNumberTxt.getText() + "'");
                                                                        pstmnx.executeUpdate();

                                                                        java.sql.PreparedStatement pstmnw = connectDB.prepareStatement("UPDATE ac_ledger SET dealer = '" + firstNameTxt.getText() + " " + surNameTxt.getText() + "' WHERE patient_no = '" + patientNumberTxt.getText() + "' and description not ilike '%grn account%'");
                                                                        pstmnw.executeUpdate();

                                                                        java.sql.PreparedStatement pstmnf = connectDB.prepareStatement("UPDATE hp_patient_billing SET patient_name = '" + firstNameTxt.getText() + " " + surNameTxt.getText() + "' WHERE patient_no = '" + patientNumberTxt.getText() + "'");
                                                                        pstmnf.executeUpdate();

                                                                        java.sql.PreparedStatement pstmnq = connectDB.prepareStatement("UPDATE hp_pharmacy SET patient_name = '" + firstNameTxt.getText() + " " + surNameTxt.getText() + "' WHERE patient_no = '" + patientNumberTxt.getText() + "'");
                                                                        pstmnq.executeUpdate();

                                                                        java.sql.PreparedStatement pstm = connectDB.prepareStatement("UPDATE hp_patient_register SET waiting_patient = 'true' WHERE patient_no = '" + patientNumberTxt.getText() + "'");
                                                                        pstm.executeUpdate();
                                                                    }
                                                                }

                                                                java.lang.Boolean registerReceipt = false;
                                                                java.sql.Statement stm12fd = connectDB.createStatement();
                                                                java.sql.ResultSet rse12fd = stm12fd.executeQuery("SELECT register_receipt FROM pb_patient_names");
                                                                while (rse12fd.next()) {
                                                                    registerReceipt = rse12fd.getBoolean(1);
                                                                }

                                                                java.sql.Date dates = null;
                                                                String mdepartment = null;
                                                                String Department = null;
                                                                String glCode = null;
                                                                String services = null;
                                                                double amts = 0.00;
                                                                String rcode = null;

                                                                java.sql.Statement stm1211 = connectDB.createStatement();
                                                                java.sql.ResultSet rse1211 = stm1211.executeQuery("select activity,code from pb_activity where activity_category ='RC'");
                                                                while (rse1211.next()) {
                                                                    //rname = rse1211.getObject(1).toString();
                                                                    rcode = rse1211.getObject(2).toString();
                                                                }
                                                                boolean exempt = false;
                                                                java.sql.Statement stmX = connectDB.createStatement();
                                                                java.sql.ResultSet rseX = stmX.executeQuery("SELECT exemption FROM pb_patient_categories WHERE patient_type ILIKE '" + patientCategoryCmbx.getSelectedItem().toString() + "'");
                                                                while (rseX.next()) {
                                                                    //rname = rse1211.getObject(1).toString();
                                                                    exempt = rseX.getBoolean(1);
                                                                }

                                                                java.sql.Statement stm121x = connectDB.createStatement();
                                                                java.sql.ResultSet rse121x = null;

                                                                if (exempt) {
                                                                    rse121x = stm121x.executeQuery("SELECT service_type,0,gl_account from pb_operating_parameters WHERE (category ILIKE 'rfee' OR category ILIKE 'sfee')");

                                                                } else {

                                                                    if (ager > 5) {
                                                                        rse121x = stm121x.executeQuery("SELECT service_type,rate,gl_account from pb_operating_parameters WHERE (category ILIKE 'rfee' OR category ILIKE 'sfee')");

                                                                    } else {
                                                                        if (createNewFileRbtn.isSelected()) {
                                                                            rse121x = stm121x.executeQuery("SELECT service_type,rate,gl_account from pb_operating_parameters WHERE (category ILIKE 'pdfee' OR category ILIKE 'sfee')");

                                                                        } else {
                                                                            rse121x = stm121x.executeQuery("SELECT service_type,0,gl_account from pb_operating_parameters WHERE (category ILIKE 'pdfee' OR category ILIKE 'sfee')");

                                                                        }
                                                                    }

                                                                    if (!this.paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {
                                                                        if (!registerReceipt) {
                                                                            while (rse121x.next()) {

                                                                                services = rse121x.getObject(1).toString();
                                                                                amts = rse121x.getDouble(2);
                                                                                glCode = rse121x.getObject(3).toString();
                                                                                java.sql.Statement stm121 = connectDB.createStatement();
                                                                                java.sql.ResultSet rse121 = stm121.executeQuery("select activity,code,department from pb_activity where code = '" + glCode + "'");
                                                                                while (rse121.next()) {

                                                                                    Department = rse121.getObject(1).toString();
                                                                                    glCode = rse121.getObject(2).toString();
                                                                                    mdepartment = rse121.getObject(3).toString();
                                                                                }

                                                                                java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("INSERT INTO hp_patient_billing("
                                                                                        + "patient_no, patient_name, payment_mode, patient_category, service,"
                                                                                        + "quantity, amount, gl_code, trans_date, inpatient_no, user_name, "
                                                                                        + "paid, revenue_code, visit_id, doctor, collected) VALUES (?, ?, ?, ?, ?,"
                                                                                        + "?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");

                                                                                pstmt2.setString(1, patientNumberTxt.getText());
                                                                                pstmt2.setString(2, firstNameTxt.getText() + " " + surNameTxt.getText());
                                                                                pstmt2.setObject(3, paymentModeCmbx.getSelectedItem());
                                                                                pstmt2.setObject(4, patientCategoryCmbx.getSelectedItem());
                                                                                pstmt2.setString(5, services);
                                                                                pstmt2.setDouble(6, 1);
                                                                                pstmt2.setDouble(7, amts);
                                                                                pstmt2.setString(8, glCode);
                                                                                pstmt2.setDate(9, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker4.getDate()));
                                                                                pstmt2.setString(10, transNo);
                                                                                pstmt2.setBoolean(12, false);
                                                                                pstmt2.setString(11, user);
                                                                                pstmt2.setString(13, Department);
                                                                                pstmt2.setString(14, transNo);
                                                                                pstmt2.setString(15, "");
                                                                                pstmt2.setBoolean(16, true);
                                                                                pstmt2.executeUpdate();
                                                                            }
                                                                        } else {
                                                                            java.sql.Statement stm12fx = connectDB.createStatement();
                                                                            java.sql.ResultSet rse12fx = stm12fx.executeQuery("select cash_point,start_date::DATE from ac_shifts WHERE shift_no = '" + jTextField22.getText() + "'");
                                                                            while (rse12fx.next()) {
                                                                                cashPoint = rse12fx.getString(1);
                                                                                dates = rse12fx.getDate(2);
                                                                            }
                                                                            while (rse121x.next()) {
                                                                                services = rse121x.getObject(1).toString();
                                                                                amts = rse121x.getDouble(2);
                                                                                glCode = rse121x.getObject(3).toString();
                                                                                java.sql.Statement stm121 = connectDB.createStatement();
                                                                                java.sql.ResultSet rse121 = stm121.executeQuery("select activity,code,department from pb_activity where code = '" + glCode + "'");
                                                                                while (rse121.next()) {

                                                                                    Department = rse121.getObject(1).toString();
                                                                                    glCode = rse121.getObject(2).toString();
                                                                                    mdepartment = rse121.getObject(3).toString();
                                                                                }

                                                                                java.sql.PreparedStatement pstmt212 = connectDB.prepareStatement("INSERT INTO ac_ledger values(?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                                                                pstmt212.setObject(1, glCode);
                                                                                pstmt212.setString(2, Department);
                                                                                pstmt212.setString(3, patientNumberTxt.getText());

                                                                                pstmt212.setString(4, firstNameTxt.getText() + " " + surNameTxt.getText());
                                                                                pstmt212.setString(5, "");
                                                                                pstmt212.setString(6, "");
                                                                                pstmt212.setString(7, "");
                                                                                pstmt212.setString(8, "OP");
                                                                                pstmt212.setString(9, "");
                                                                                pstmt212.setObject(10, paymentModeCmbx.getSelectedItem());
                                                                                pstmt212.setString(11, jTextField22.getText());
                                                                                pstmt212.setString(12, "");
                                                                                pstmt212.setString(13, "");
                                                                                pstmt212.setString(14, services);
                                                                                pstmt212.setString(15, "Revenue");
                                                                                pstmt212.setDouble(16, 0.00);
                                                                                pstmt212.setDouble(17, amts);
                                                                                pstmt212.setDate(18, dates);//.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                                                                pstmt212.setString(19, transNo);
                                                                                pstmt212.setBoolean(20, false);
                                                                                pstmt212.setBoolean(21, false);
                                                                                pstmt212.setBoolean(22, false);
                                                                                pstmt212.setString(23, user);
                                                                                pstmt212.setString(24, cashPoint);
                                                                                pstmt212.setString(25, jTextField22.getText());
                                                                                pstmt212.executeUpdate();
                                                                                //}

                                                                                java.sql.PreparedStatement pstmt25 = connectDB.prepareStatement("INSERT INTO ac_cash_collection values(?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                                                                pstmt25.setObject(1, glCode);
                                                                                pstmt25.setObject(2, services);
                                                                                pstmt25.setString(3, patientNumberTxt.getText());
                                                                                pstmt25.setString(4, firstNameTxt.getText() + " " + surNameTxt.getText());
                                                                                pstmt25.setObject(5, paymentModeCmbx.getSelectedItem());
                                                                                pstmt25.setString(6, "");
                                                                                pstmt25.setString(7, "");
                                                                                pstmt25.setString(8, "");
                                                                                pstmt25.setString(9, "");
                                                                                pstmt25.setString(10, rcode);
                                                                                pstmt25.setString(11, "");
                                                                                pstmt25.setString(12, receiptNo1);
                                                                                pstmt25.setString(13, "");
                                                                                pstmt25.setString(14, firstNameTxt.getText() + " " + surNameTxt.getText());
                                                                                pstmt25.setString(15, "Receipts");
                                                                                pstmt25.setDouble(16, amts);
                                                                                pstmt25.setDouble(17, 0.00);
                                                                                pstmt25.setDate(18, dates);//com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                                                                pstmt25.setString(19, "" + transNo + "");
                                                                                pstmt25.setBoolean(20, false);
                                                                                pstmt25.setBoolean(21, false);
                                                                                pstmt25.setBoolean(22, false);
                                                                                pstmt25.setString(23, user);
                                                                                pstmt25.setString(24, cashPoint);
                                                                                pstmt25.setString(25, jTextField22.getText());
                                                                                pstmt25.setDate(26, null);
                                                                                pstmt25.setDouble(27, 1);
                                                                                pstmt25.setDate(28, null);
                                                                                pstmt25.setTimestamp(29, datenowSql);
                                                                                pstmt25.setString(30, mdepartment);
                                                                                pstmt25.executeUpdate();
                                                                            }

                                                                            java.sql.PreparedStatement psr = connectDB.prepareStatement("INSERT INTO ac_receipts_no("
                                                                                    + "account_no, account_name, date, amount, shift_no, "
                                                                                    + "cash_point, reference, user_name) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
                                                                            psr.setString(1, patientNumberTxt.getText());
                                                                            psr.setString(2, firstNameTxt.getText() + " " + surNameTxt.getText());
                                                                            psr.setDate(3, dates); //com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker1.getDate()));
                                                                            psr.setDouble(4, amts);
                                                                            psr.setInt(5, java.lang.Integer.valueOf(jTextField22.getText()));
                                                                            psr.setString(6, cashPoint);
                                                                            psr.setString(7, receiptNo1);
                                                                            psr.setString(8, user);
                                                                            psr.executeUpdate();
                                                                            System.out.println(receiptNo1 + "  2");
                                                                            java.sql.Statement ps1q = connectDB.createStatement();
                                                                            java.sql.ResultSet rst1q = ps1q.executeQuery("SELECT LPAD(receipt_no::TEXT,6,'0'::TEXT) FROM ac_receipts_no WHERE reference = '" + receiptNo1 + "'");
                                                                            while (rst1q.next()) {
                                                                                receiptNo2 = rst1q.getObject(1).toString();
                                                                            }

                                                                            java.sql.PreparedStatement pstmt112f = connectDB.prepareStatement("UPDATE ac_cash_collection SET receipt_no = '" + receiptNo2 + "' WHERE receipt_no = '" + receiptNo1 + "'");
                                                                            pstmt112f.executeUpdate();
                                                                            //      com.afrisoftech.txtreports.GokReceiptsTxt policy = new com.afrisoftech.txtreports.GokReceiptsTxt(connectDB, firstNameTxt.getText() + " " + surNameTxt.getText(), java.lang.String.valueOf(amts), receiptNo2, this.paymentModeCmbx.getSelectedItem().toString(), java.lang.String.valueOf(amts), java.lang.String.valueOf(0), jTextField22.getText(), oldFileNumberTxt.getText());

                                                                        }

                                                                    }
                                                                }
                                                                if (createNewFileRbtn.isSelected()) {
                                                                    //  com.afrisoftech.reports.PatientFilePdf pFile = new com.afrisoftech.reports.PatientFilePdf();
                                                                    //  pFile.PatientFilePdf(connectDB, jTextField3.getText().toUpperCase(),jTextField6.getText().toUpperCase()+" "+jTextField21.getText().toUpperCase(),datePickerYOB.getDate(),selectedchkbx.toUpperCase(),selectedchkbx1.toUpperCase(), this.districtCmbx.getSelectedItem().toString().toUpperCase(),jTextField23.getText().toUpperCase(),jTextField24.getText().toUpperCase(),jTextField5.getText().toUpperCase(),jTextField5821.getText().toUpperCase(),jTextField1.getText().toUpperCase(),nokRelationShipCmbx.getSelectedItem().toString().toUpperCase(),jTextField20.getText().toUpperCase(),nokTelTxt.getText().toUpperCase(),nokResidenceTxt.getText().toUpperCase());
                                                                }
                                                                java.sql.PreparedStatement pstm = connectDB.prepareStatement("UPDATE hp_patient_register SET waiting_patient = 'true' WHERE patient_no = '" + patientNumberTxt.getText() + "'");
                                                                pstm.executeUpdate();
                                                                if (paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("Scheme")) {

                                                                    String rct = null;
                                                                    java.sql.Statement stm = connectDB.createStatement();
                                                                    java.sql.ResultSet rs = stm.executeQuery("select currval('creditslip_no_seq')");
                                                                    while (rs.next()) {
                                                                        slipNo = rs.getInt(1);

                                                                    }
                                                                    java.sql.Statement ps112 = connectDB.createStatement();
                                                                    java.sql.ResultSet rst112 = ps112.executeQuery("select rct_format from receipt_pref");
                                                                    while (rst112.next()) {
                                                                        rct = rst112.getObject(1).toString();
                                                                    }

                                                                    com.afrisoftech.txtreports.CreditSlipTxt policy = new com.afrisoftech.txtreports.CreditSlipTxt(connectDB, patientNumberTxt.getText(), jTextField361.getText(), firstNameTxt.getText() + " " + surNameTxt.getText(), jTextField2.getText(), jTextField13.getText(), slipNo);

                                                                }

                                                                if (patientCategoryCmbx.getSelectedItem().toString().equalsIgnoreCase("RTA")) {

                                                                    java.text.SimpleDateFormat simpleDateFormat = new java.text.SimpleDateFormat();

                                                                    simpleDateFormat.applyPattern("EEE MMM dd hh:mm:ss zzz yyyy");

                                                                    java.text.DateFormat dateFormat = SimpleDateFormat.getDateTimeInstance();

                                                                    java.sql.PreparedStatement pstmtRTA = connectDB.prepareStatement("INSERT INTO rta_info("
                                                                            + "patient_no, accident_type, arrival_mode, police_officer_no, police_station,"
                                                                            + "date_time, driver_name, accident_vehicle_no, driver_license, driver_id_no)"
                                                                            + "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                                                                    pstmtRTA.setString(1, patientNumberTxt.getText());
                                                                    pstmtRTA.setString(2, this.typeofAccidentCmbx.getSelectedItem().toString());
                                                                    pstmtRTA.setString(3, this.modeofArrivalCmbx.getSelectedItem().toString());
                                                                    pstmtRTA.setString(4, this.nameofPoliceOfficerTxt.getText());
                                                                    pstmtRTA.setString(5, this.policeStationTxt.getText());
                                                                    pstmtRTA.setTimestamp(6, new java.sql.Timestamp(simpleDateFormat.parse(accidentTimeDateSpinner.getValue().toString()).getTime()));
                                                                    pstmtRTA.setString(7, this.driverNameTxt.getText());
                                                                    pstmtRTA.setString(8, this.accidentVehicleNumberTxt.getText());
                                                                    pstmtRTA.setString(9, this.accidentDriverLicenseTxt.getText());
                                                                    pstmtRTA.setString(10, this.accidentDriverIDTxt.getText());
                                                                    pstmtRTA.execute();

                                                                }

                                                                paymentModeCmbx.setSelectedItem(null);
                                                                saveRegistrationBtn.setEnabled(false);
                                                                savePrintRegistrationBtn.setEnabled(false);
                                                                saveRegistrationBtn.setText("Save file data");

                                                                connectDB.commit();
                                                                connectDB.setAutoCommit(true);

                                                            } else {
                                                                javax.swing.JOptionPane.showMessageDialog(this, "Please confirm that you are working within the open accounting period");
                                                            }
                                                        }

                                                    }
                                                } catch (java.lang.Exception sq) {
                                                    sq.printStackTrace();
                                                    System.out.println(sq.getMessage());
                                                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                                                    try {
                                                        connectDB.rollback(registerSavePoint);
                                                    } catch (java.sql.SQLException sql) {
                                                        sql.printStackTrace();
                                                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                                                    }

                                                }

                                                if (nhifChbx.isSelected()) {
                                                    nhifStatusTxt = "YES";
                                                } else {
                                                    nhifStatusTxt = "NO";
                                                }

                                                try {
                                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT current_user");
                                                    java.sql.ResultSet rset = pstmt.executeQuery();
                                                    while (rset.next()) {
                                                        interviewer = rset.getString(1);
                                                    }
                                                } catch (java.sql.SQLException sqlEx) {
                                                    sqlEx.printStackTrace();
                                                    javax.swing.JOptionPane.showMessageDialog(this, sqlEx.getMessage());
                                                }

                                                String selectedchkbx = null;
                                                String selectedchkbx1 = null;

                                                if (this.jCheckBox2111.isSelected()) {
                                                    selectedchkbx = jCheckBox2111.getText();
                                                } else {

                                                    selectedchkbx = jCheckBox1111.getText();
                                                }

                                                if (this.jCheckBox2113.isSelected()) {
                                                    selectedchkbx1 = jCheckBox2113.getText();
                                                } else {
                                                    if (this.jCheckBox1113.isSelected()) {
                                                        selectedchkbx1 = jCheckBox1113.getText();
                                                    } else {
                                                        if (this.jCheckBox3.isSelected()) {
                                                            selectedchkbx1 = jCheckBox3.getText();
                                                        } else {
                                                            if (this.jCheckBox11.isSelected()) {
                                                                selectedchkbx1 = jCheckBox11.getText();
                                                            }
                                                        }
                                                    }
                                                }

                                                selectedStatusgender = selectedchkbx;
                                                selectedStatus = selectedchkbx1;

                                                //  com.afrisoftech.reports.PatientRegFormPdf.connectDB = connectDB;
                                                com.afrisoftech.reports.PatientRegFormPdf regForm = new com.afrisoftech.reports.PatientRegFormPdf();
                                                String accidentDate = "";
                                                if (patientCategoryCmbx.getSelectedItem().toString().equalsIgnoreCase("RTA")) {
                                                    accidentDate = accidentTimeDateSpinner.getValue().toString();
                                                } else {
                                                    accidentDate = "";
                                                }
//                                                                             System.out.println(firstNameTxt.getText().toUpperCase() + " " + surNameTxt.getText().toUpperCase()+ " " + 
//                                                                                    ageTxt.getText()+ " " +  selectedStatus+ " " +  nationalityCmbx.getSelectedItem().toString()+ " " + 
//                                                                                    idPassportTxt.getText()+ " " +  districtCmbx.getSelectedItem().toString()+ " " +  occupationCmbx.getSelectedItem().toString()+ " " +  selectedStatus+ " " + 
//                                                                                    religionCmbx.getSelectedItem().toString()+ " " +  jTextField5821.getText()+ " " +  " "+ " " +  currentResidenceTxt.getText()+ " " +  locationTxt.getText()+ " " +  countyofBirthCmbx.getSelectedItem().toString()+ " " + 
//                                                                                    countyofResidenceCmbx.getSelectedItem().toString()+ " " +  nokNameTxt.getText()+ " " +  nokRelationShipCmbx.getSelectedItem().toString()+ " " +  nokTelephoneTxt.getText()+ " " +  this.referredcombo.getSelectedItem().toString()+ " " +  " "+ " " +  specialtyClinicCmbx.getSelectedItem().toString()+ " " +  nhifStatusTxt+ " " +  nhifNumberTxt.getText()+ " " + 
//                                                                                    educationLevelCmbx.getSelectedItem().toString()+ " " +  employerTelTxt.getText()+ " " +  employerTxt.getText()+ " " +  " "+ " " +  " "+ " " +  cSheetNoTxt.getText()+ " " +  " "+ " " + 
//                                                                                    interviewer+ " " +  com.afrisoftech.lib.ServerTime.serverTimeStamp(connectDB)+ " " +  jComboBox2.getSelectedItem().toString()+ " " +  oldFileNumberTxt.getText()+ " " +  patientNumberTxt.getText()+ " " +  ""+ " " +  ""+ " " +  ""+ " " +  nhifNumberTxt.getText()+ " " +  datePicker2.getDate()+ " " +  selectedStatusgender+ " " + 
//                                                                                    typeofAccidentCmbx.getSelectedItem().toString()+ " " + modeofArrivalCmbx.getSelectedItem().toString()+ " " + 
//                                                                                    nameofPoliceOfficerTxt.getText()+ " " + policeForceNumberTxt.getText()+ " " + 
//                                                                                     policeStationTxt.getText()+ " " +  accidentDate+ " " + 
//                                                                                     driverNameTxt.getText()+ " " + accidentVehicleNumberTxt.getText()+ " " + 
//                                                                                     accidentDriverLicenseTxt.getText()+ " " + accidentDriverIDTxt.getText());

////                                                regForm.callPdf(connectDB, patientNumberTxt.getText(), "OP");
//                                                                            regForm.generatePdf(firstNameTxt.getText().toUpperCase() + " " + surNameTxt.getText().toUpperCase(),
//                                                                                    ageTxt.getText(), selectedStatus, nationalityCmbx.getSelectedItem().toString(),
//                                                                                    idPassportTxt.getText(), districtCmbx.getSelectedItem().toString(), occupationCmbx.getSelectedItem().toString(), selectedStatus,
//                                                                                    religionCmbx.getSelectedItem().toString(), jTextField5821.getText(), " ", currentResidenceTxt.getText(), locationTxt.getText(), countyofBirthCmbx.getSelectedItem().toString(),
//                                                                                    countyofResidenceCmbx.getSelectedItem().toString(), nokNameTxt.getText(), nokRelationShipCmbx.getSelectedItem().toString(), nokTelephoneTxt.getText(), this.referredcombo.getSelectedItem().toString(), " ", specialtyClinicCmbx.getSelectedItem().toString(), nhifStatusTxt, nhifNumberTxt.getText(),
//                                                                                    educationLevelCmbx.getSelectedItem().toString(), employerTelTxt.getText(), employerTxt.getText(), " ", " ", cSheetNoTxt.getText(), " ",
//                                                                                    interviewer, com.afrisoftech.lib.ServerTime.serverTimeStamp(connectDB), jComboBox2.getSelectedItem().toString(), oldFileNumberTxt.getText(), patientNumberTxt.getText(), "", "", "", nhifNumberTxt.getText(), datePicker2.getDate(), selectedStatusgender,
//                                                                                    typeofAccidentCmbx.getSelectedItem().toString(),modeofArrivalCmbx.getSelectedItem().toString(),
//                                                                                    nameofPoliceOfficerTxt.getText(),policeForceNumberTxt.getText(),
//                                                                                     policeStationTxt.getText(), accidentDate,
//                                                                                     driverNameTxt.getText(),accidentVehicleNumberTxt.getText(),
//                                                                                     accidentDriverLicenseTxt.getText(),accidentDriverIDTxt.getText());
                                                this.typeofAccidentCmbx.setSelectedItem(null);
                                                this.modeofArrivalCmbx.setSelectedItem(null);
                                                this.nameofPoliceOfficerTxt.setText(null);
                                                this.policeStationTxt.setText(null);
                                                this.driverNameTxt.setText(null);
                                                this.accidentVehicleNumberTxt.setText(null);
                                                this.accidentDriverLicenseTxt.setText(null);
                                                this.accidentDriverIDTxt.setText(null);
                                                this.clearForm();
                                            } catch (java.lang.Exception ex) {
                                                ex.printStackTrace();
                                                System.out.println(ex.getMessage());
                                                javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries. \n DETAILS : " + ex.toString(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                                            }

                                        }
                                    } else {
                                        javax.swing.JOptionPane.showMessageDialog(this, "ERROR: The \"Patient Urgency\" field MUST be Selected");
                                    }

                                } else {
                                    javax.swing.JOptionPane.showMessageDialog(this, "ERROR: The \"Patient Category\" field MUST be filled");
                                }

                            } else {
                                javax.swing.JOptionPane.showMessageDialog(this, "ERROR: The \"Pay Mode\" field MUST be filled");
                            }

                        } else {
                            javax.swing.JOptionPane.showMessageDialog(this, "ERROR: The \"Patient Last/Surname Name\" field MUST be filled");
                        }

                    } else {
                        javax.swing.JOptionPane.showMessageDialog(this, "ERROR: The \"First Name\" field MUST be filled");
                    }

//                                            } else {
//                                                javax.swing.JOptionPane.showMessageDialog(this, "ERROR: The \"Charge Sheet (C-Sheet) Number\" field MUST be filled");
//                                            }
                } else {
                    javax.swing.JOptionPane.showMessageDialog(this, "ERROR: The \"Physical Residence\" field MUST be filled");
                }

            } else {
                javax.swing.JOptionPane.showMessageDialog(this, "ERROR: The \"Specialty Clinic\" field MUST be filled");
            }

//            } else {
//                javax.swing.JOptionPane.showMessageDialog(this, "ERROR: The \"Age (in years)\" field MUST be filled");
//            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "ERROR: The \"Nationality\" field MUST be filled");
        }

//                        } else {
//                            javax.swing.JOptionPane.showMessageDialog(this, "ERROR: The \"NOK Name\" field MUST be filled");
//                        }
//
//                    } else {
//                        javax.swing.JOptionPane.showMessageDialog(this, "ERROR: The \"NOK Relationship\" field MUST be filled");
//                    }
//                } else {
//                    javax.swing.JOptionPane.showMessageDialog(this, "ERROR: The \"Referred from\" field MUST be filled");
//                }
//            } else {
//                javax.swing.JOptionPane.showMessageDialog(this, "ERROR: Either the \"Unit No or Clinic No\" field MUST be filled");
//            }
//        }
// Add your handling code here:
    }//GEN-LAST:event_saveRegistrationBtnActionPerformed

    private void jPanel1ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel1ComponentShown
        // Add your handling code here:
    }//GEN-LAST:event_jPanel1ComponentShown

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // Add your handling code here:
    }//GEN-LAST:event_formComponentShown

    private void ageTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_ageTxtCaretUpdate
//        if (this.ageTxt.getText().equalsIgnoreCase("")) {
//        } else {
//            java.util.Calendar calendar = java.util.Calendar.getInstance();
//            float age = Float.valueOf(ageTxt.getText());
//            if (ageTxt.getText().toCharArray().length > 0) {
//                for (int i = 0; i < age; i++) {
//                    calendar.roll(java.util.Calendar.YEAR, false);
//                }
//                this.datePickerYOB.setDate(calendar.getTime());
//            } else {
//                javax.swing.JOptionPane.showMessageDialog(this, "You MUST provide Age as a number.");
//            }
//        }
        // TODO add your handling code here:
    }//GEN-LAST:event_ageTxtCaretUpdate

    private void diseaseSearchTxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_diseaseSearchTxtFocusLost
        // TODO add your handling code here:
}//GEN-LAST:event_diseaseSearchTxtFocusLost

    private void diseaseSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_diseaseSearchTxtCaretUpdate
        //   if (diseaseTbl.getSelectedRows().length > 1) {
        if (diseaseSearchTxt.getCaretPosition() < 1) {

            System.out.println("Nothing");
        } else {
            if (this.diseaseSearchCodeRbtn.isSelected()) {
                diseaseSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT code, disease_name FROM hp_diseases WHERE code ILIKE '%" + diseaseSearchTxt.getText().toString() + "%' ORDER BY code"));
                diseaseSearchTable.setShowHorizontalLines(false);
                diseaseSearchScrollPane.setViewportView(diseaseSearchTable);

            } else {
                if (this.diseaseSearchDescriptionRbtn.isSelected()) {
                    diseaseSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT code, disease_name FROM hp_diseases WHERE disease_name ILIKE '%" + diseaseSearchTxt.getText().toString() + "%' ORDER BY disease_name"));

                    diseaseSearchTable.setShowHorizontalLines(false);
                    diseaseSearchScrollPane.setViewportView(diseaseSearchTable);

                }
            }
        }

        //     } else {
        //         javax.swing.JOptionPane.showMessageDialog(this, "You MUST select one of the empty rows on the table labelled Diseases/Diagnosis table.");
        ////     }
// TODO add your handling code here:
}//GEN-LAST:event_diseaseSearchTxtCaretUpdate

    private void diseaseSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_diseaseSearchTableMouseClicked

        diseaseTbl.setValueAt(diseaseSearchTable.getValueAt(diseaseSearchTable.getSelectedRow(), 0), diseaseTbl.getSelectedRow(), 0);
        diseaseTbl.setValueAt(diseaseSearchTable.getValueAt(diseaseSearchTable.getSelectedRow(), 1), diseaseTbl.getSelectedRow(), 1);
        diseaseDialog.dispose();
        // TODO add your handling code here:
}//GEN-LAST:event_diseaseSearchTableMouseClicked

    private void disposeDiseaseSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disposeDiseaseSearchBtnActionPerformed

        diseaseDialog.dispose();
        // TODO add your handling code here:
}//GEN-LAST:event_disposeDiseaseSearchBtnActionPerformed

    private void diseaseDialogComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_diseaseDialogComponentHidden
        // TODO add your handling code here:
}//GEN-LAST:event_diseaseDialogComponentHidden

    private void createOldFileRbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createOldFileRbtnActionPerformed
        createNewFileRbtnActionPerformed(evt);
        patientNumberTxt.setEditable(true);
        paymentModeCmbx.setSelectedItem("Cash");
        patientCategoryCmbx.setSelectedItem("Above 5 Yrs".toUpperCase());
        // TODO add your handling code here:
}//GEN-LAST:event_createOldFileRbtnActionPerformed

    private void patientNumberTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientNumberTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientNumberTxtActionPerformed

    private void jTextField28CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField28CaretUpdate
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField28CaretUpdate

    private void jTextField28FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField28FocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField28FocusLost

    private void jSearchTable4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable4MouseClicked

        revisitRbtn.setSelected(true);
        //  jComboBox2.setSelectedItem(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0));
        patientNumberTxt.setText(jSearchTable4.getValueAt(jSearchTable4.getSelectedRow(), 0).toString());
        firstNameTxt.setText(jSearchTable4.getValueAt(jSearchTable4.getSelectedRow(), 1).toString());
        surNameTxt.setText(jSearchTable4.getValueAt(jSearchTable4.getSelectedRow(), 2).toString());
        jSearchDialog4.dispose();
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("SELECT nok,residence,year_of_birth,tel_no,address,upper(sex) as sex,"
                    + "pay_mode,last_visit,upper(second_name) as other_names, upper(first_name) as surname,emails,id_no,"
                    + "information_source,education_level,occupation, emails, id_no, nok_add, pat_nationality, nok_telno,"
                    + "nok_relationship, nok_residence, nok_email, pat_marital_status, tribe, district, locations,"
                    + "sub_location, chief_name, sub_chief, (current_date-year_of_birth::date)/365 FROM hp_patient_register WHERE patient_no ILIKE '" + patientNumberTxt.getText() + "'");
            while (rset.next()) {
                //jComboBox1.setSelectedItem(dbObject.getDBObject(rset.getObject(7), "-"));
                dateofLastVisitTxt.setText(dbObject.getDBObject(rset.getObject(8), "-"));
                nokNameTxt.setText(dbObject.getDBObject(rset.getObject(1), "-"));
                residenceTxt.setText(dbObject.getDBObject(rset.getObject(2), "-"));
                //  jTextField14.setText(dbObject.getDBObject(rset.getObject(3), "-"));
                jTextField5821.setText(dbObject.getDBObject(rset.getObject(4), "-"));
                jTextField5.setText(dbObject.getDBObject(rset.getObject(5), "-"));
                if (rset.getObject(6).toString().startsWith("M")) {
                    jCheckBox1111.setSelected(true);

                } else {

                    if (rset.getObject(6).toString().startsWith("F")) {
                        jCheckBox2111.setSelected(true);
                    } else {
                    }
                }
                firstNameTxt.setText(dbObject.getDBObject(rset.getObject(9), "-"));
                surNameTxt.setText(dbObject.getDBObject(rset.getObject(10), "-"));
                // nationalityCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(19), "-"));
                //  idNoTxt.setText(dbObject.getDBObject(rset.getObject(12), "-"));
                //  emailAddTxt.setText(dbObject.getDBObject(rset.getObject(11), "-"));
                this.informationSourceCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(13), "-"));
                this.educationLevelCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(14), "-"));
                this.occupationCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(15), "-"));
                ////////
                this.emailAddTxt.setText(dbObject.getDBObject(rset.getObject(16), "-"));
                this.idPassportTxt.setText(dbObject.getDBObject(rset.getObject(17), "-"));
                this.jTextField20.setText(dbObject.getDBObject(rset.getObject(18), "-"));
                this.nationalityCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(19), "-"));
                this.nokTelephoneTxt.setText(dbObject.getDBObject(rset.getObject(20), "-"));
                nokRelationShipCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(21), "-"));

                this.nokResidenceTxt.setText(dbObject.getDBObject(rset.getObject(22), "-"));
                this.emailAddTxt1.setText(dbObject.getDBObject(rset.getObject(23), "-"));
                //        this.(dbObject.getDBObject(rset.getObject(24), "-"));
                this.jTextField19.setText(dbObject.getDBObject(rset.getObject(25), "-"));
                this.ageTxt.setText(dbObject.getDBObject(rset.getObject(31), "-"));
                this.locationTxt.setText(dbObject.getDBObject(rset.getObject(27), "-"));
                this.currentResidenceTxt.setText(dbObject.getDBObject(rset.getObject(28), "-"));
                this.jTextField25.setText(dbObject.getDBObject(rset.getObject(29), "-"));
                this.jTextField26.setText(dbObject.getDBObject(rset.getObject(30), "-"));
                // jTextField12.setText(dbObject.getDBObject(rset.getObject(6), "-"));
                //  dbObject.getDBObject(rset1.getObject(3), "-")
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
        }
        //   if(jComboBox1.getSelectedItem().equals("Scheme")){
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select payer,description,account_no,member_name,expiry_date from hp_patient_register where patient_no ='" + patientNumberTxt.getText() + "'");
            while (rset.next()) {
                // jComboBox6.setSelectedItem(rset.getObject(1).toString());
                jTextField2.setText(dbObject.getDBObject(rset.getObject(1), "-"));
                jTextField361.setText(dbObject.getDBObject(rset.getObject(2), "-"));
                jTextField15.setText(dbObject.getDBObject(rset.getObject(3), "-"));
                jTextField36.setText(dbObject.getDBObject(rset.getObject(4), "-"));
                jTextField18.setText(dbObject.getDBObject(rset.getObject(5), "-"));
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
        }
        //}

        //     emailAddTxt.setText("");
        //     idNoTxt.setText("");
        saveRegistrationBtn.setEnabled(true);

        jSearchDialog4.dispose();

        // TODO add your handling code here:
    }//GEN-LAST:event_jSearchTable4MouseClicked

    private void dispose3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispose3ActionPerformed

        jSearchDialog4.dispose();

        // TODO add your handling code here:
    }//GEN-LAST:event_dispose3ActionPerformed

    private void jSearchDialog4ComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jSearchDialog4ComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_jSearchDialog4ComponentHidden

    private void scanDocumentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanDocumentBtnActionPerformed
        /*
         try {
         try {
         au.com.southsky.jfreesane.SaneSession saneSession =
         au.com.southsky.jfreesane.SaneSession.withRemoteSane(InetAddress.getLocalHost());

         java.util.List<au.com.southsky.jfreesane.SaneDevice> devices = null;
         try {
         devices = saneSession.listDevices();
         } catch (SaneException ex) {
         Logger.getLogger(PatientRegisterIntfr.class.getName()).log(Level.SEVERE,
         null, ex);
         }
         for (int i = 0; i < devices.size(); i++) {
         System.out.println("Scanner device N0. [" + i + "] is "
         + devices.get(i).toString());
         }
         au.com.southsky.jfreesane.SaneDevice device = devices.get(0); // determine which device you want to use
         device.open();
         try {
         BufferedImage image = device.acquireImage();
         } catch (SaneException ex) {
         Logger.getLogger(PatientRegisterIntfr.class.getName()).log(Level.SEVERE,
         null, ex);
         }
         } catch (UnknownHostException ex) {
         Logger.getLogger(PatientRegisterIntfr.class.getName()).log(Level.SEVERE,
         null, ex);
         }
         } catch (IOException ex) {
         Logger.getLogger(PatientRegisterIntfr.class.getName()).log(Level.SEVERE,
         null, ex);
         }

         */
        // TODO add your handling code here:
    }//GEN-LAST:event_scanDocumentBtnActionPerformed

    private void patientCategoryCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientCategoryCmbxActionPerformed
        if (paymentModeCmbx.getSelectedItem() != null) {
            if (paymentModeCmbx.getSelectedItem().toString().equalsIgnoreCase("RTA")) {
                billindDetailsTabbedPane.setSelectedComponent(rtaPanel);
            }
        }        // TODO add your handling code here:
    }//GEN-LAST:event_patientCategoryCmbxActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        //jButton301.setEnabled(false);
        //jButton3.setEnabled(false);
        patientNumberTxt.grabFocus();
        paymentModeCmbx.setSelectedItem("Cash");
        patientCategoryCmbx.setSelectedItem("Above 5 Yrs".toUpperCase());
        savePrintRegistrationBtn.setEnabled(true);
        saveRegistrationBtn.setText("Save file data");
        registrationStatusLbl.setText("");
        saveRegistrationBtn.setEnabled(false);
        savePrintRegistrationBtn.setEnabled(false);
        this.reVisit = false;
        editFileBtn.setEnabled(true);

        searchbyNameChkbx.setEnabled(true);
        searchbyNumberChkbx.setEnabled(true);
        searchButton1.setEnabled(true);
        patientNumberTxt.setEditable(true);
        residenceTxt.setEditable(false);
        nokNameTxt.setEditable(false);
        //   datePickerYOB.setEditable(false);
        jTextField5.setEditable(false);
        jTextField7.setEditable(false);
        jTextField8.setEditable(false);
        jTextField5821.setEditable(false);
        jTextField2.setEditable(false);
        surNameTxt.setEditable(false);
        firstNameTxt.setEditable(false);

        jTextField19.setEditable(false);
        ageTxt.setEditable(false);
        locationTxt.setEditable(false);
        currentResidenceTxt.setEditable(false);
        jTextField25.setEditable(false);
        jTextField26.setEditable(false);
        idPassportTxt.setEditable(false);
        emailAddTxt.setEditable(false);
        jTextField20.setEditable(false);
        firstNameTxt.setEditable(false);
        nationalityCmbx.setEditable(false);
        nokResidenceTxt.setEditable(false);
        nokRelationShipCmbx.setEditable(false);
        nokTelephoneTxt.setEditable(false);
        emailAddTxt1.setEditable(false);

        patientNumberTxt.setText("");
        residenceTxt.setText("");
        nokNameTxt.setText("");
        // jTextField14.setText("");
        jTextField5.setText("");
        jTextField7.setText("");
        jTextField8.setText("");
        jTextField5821.setText("");
        jTextField2.setText("");
        surNameTxt.setText("");
        jTextField20.setText("");
        firstNameTxt.setText("");
        // nationalityCmbx.setSelectedItem(null);
        nokResidenceTxt.setText("");
        //nokRelationShipCmbx.setSelectedItem(null);
        nokTelephoneTxt.setText("");
        emailAddTxt1.setText("");

        jTextField19.setText("");
        ageTxt.setText("");
        locationTxt.setText("");
        currentResidenceTxt.setText("");
        jTextField25.setText("");
        jTextField26.setText("");
        // jButton301.setEnabled(true);
        //jButton3.setEnabled(true);

        this.reVisit = true;        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void bookingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookingBtnActionPerformed
        TheatreBookingIntfr comp = new TheatreBookingIntfr(connectDB, pConnDB);
        saccopn.add(comp, javax.swing.JLayeredPane.DEFAULT_LAYER);
        try {
            comp.setSelected(true);
        } catch (java.beans.PropertyVetoException pvt) {
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_bookingBtnActionPerformed

    private void takeSnapBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_takeSnapBtnActionPerformed
        if (patientNumberTxt.getText().length() > 3) {
            try {
                imageFile = new File(String.format(patientNumberTxt.getText().replace("/", "") + "-%d.jpg", System.currentTimeMillis()));
                ImageIO.write(webcam.getImage(), "JPG", imageFile);
                System.out.println("Image saved in " + imageFile.getAbsolutePath());
                if (Thread.currentThread().isAlive()) {
                    Thread.currentThread().interrupt();
                }
                startBtn.setEnabled(true);
//                javax.swing.ImageIcon imgCapture = new javax.swing.ImageIcon(file.toURL());
//                webCamPanel.removeAll();
//                webCamPanel.add(new javax.swing.JButton(imgCapture));
                webCameraPanel.remove(panel);
                webCamPanel = new ImagePanel();
                webCamPanel.setSize(webCameraPanel.getSize());
                //webCameraPanel.add(webCamPanel);
                //  webCameraPanel.revalidate();
                webCamPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                webCamPanel.setMaximumSize(new java.awt.Dimension(142, 37));
                webCamPanel.setLayout(new java.awt.GridBagLayout());
                java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 10.0;
                webCameraPanel.add(webCamPanel, gridBagConstraints);
                com.afrisoftech.lib.SaveBytea2DB.insertBytea(connectDB, imageFile, "JPG", "image/jpeg", patientNumberTxt.getText(), imageFile.getName(), "OUT_PATIENT_REGISTER");
                imageFile.delete();
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "The Patient Number MUST be a valid file number on patient registry");
        }
        clearForm();
        // TODO add your handling code here:
    }//GEN-LAST:event_takeSnapBtnActionPerformed

    private void billindDetailsTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_billindDetailsTabbedPaneStateChanged
        // jComboBox1.setSelectedItem("Scheme");
        //   System.out.println("component changed : ["+billindDetailsTabbedPane.getSelectedIndex()/*getSelectedComponent()*/+"]");
        // TODO add your handling code here:
    }//GEN-LAST:event_billindDetailsTabbedPaneStateChanged

    private void patientSpecialityCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientSpecialityCmbxActionPerformed
        if (patientSpecialityCmbx.getSelectedItem().toString().contains("ALL")) {
            reportsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT DISTINCT patient_no, initcap(name) as patient_name, input_date::time(0) as registration_time, (SELECT home_county FROM hp_patient_register WHERE hp_patient_visit.patient_no = hp_patient_register.patient_no) as birth_county, (SELECT residence_county FROM hp_patient_register WHERE hp_patient_visit.patient_no = hp_patient_register.patient_no) as residence_county, comments as NEW_OR_REVISIT, test as home_address, department as category, payment as pay_mode, age::int, gender, marital_status, clinic, user_name as registrar from hp_patient_visit WHERE date between '" + startDatePicker.getDate() + "' AND  '" + endDatePicker.getDate() + "' AND transaction_type = 'Registration' order by 3"));
        } else {
            reportsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT DISTINCT patient_no, initcap(name) as patient_name, input_date::time(0) as registration_time, (SELECT home_county FROM hp_patient_register WHERE hp_patient_visit.patient_no = hp_patient_register.patient_no) as birth_county, (SELECT residence_county FROM hp_patient_register WHERE hp_patient_visit.patient_no = hp_patient_register.patient_no) as residence_county, comments as NEW_OR_REVISIT, test as home_address, department as category, payment as pay_mode, age::int, gender, marital_status, clinic, user_name as registrar from hp_patient_visit WHERE date between '" + startDatePicker.getDate() + "' AND  '" + endDatePicker.getDate() + "' AND clinic ilike '" + patientSpecialityCmbx.getSelectedItem().toString() + "' AND transaction_type = 'Registration'  order by 3"));
        }
        reportsSpacerLbl.setForeground(Color.red);
        reportsSpacerLbl.setText("Number of patients : [" + reportsTable.getRowCount() + "]");
        // TODO add your handling code here:
    }//GEN-LAST:event_patientSpecialityCmbxActionPerformed

    private void endDatePickerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_endDatePickerPropertyChange
        if (patientSpecialityCmbx.getSelectedItem().toString().contains("ALL")) {
            reportsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT DISTINCT patient_no, initcap(name) as patient_name, date as visit_date, comments as NEW_OR_REVISIT, test as home_address, department as clinic, payment as pay_mode, age, gender, marital_status, user_name as registar from hp_patient_visit WHERE date between '" + startDatePicker.getDate() + "' AND  '" + endDatePicker.getDate() + "'  order by name"));
        } else {
            reportsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT DISTINCT patient_no, initcap(name) as patient_name, date as visit_date, comments as NEW_OR_REVISIT, test as home_address, department as clinic, payment as pay_mode, age, gender, marital_status, user_name as registar from hp_patient_visit WHERE date between '" + startDatePicker.getDate() + "' AND  '" + endDatePicker.getDate() + "' AND department ilike '" + patientSpecialityCmbx.getSelectedItem().toString() + "' order by name"));
        }        // TODO add your handling code here:
    }//GEN-LAST:event_endDatePickerPropertyChange

    private void startDatePickerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_startDatePickerPropertyChange
        if (patientSpecialityCmbx.getSelectedItem().toString().contains("ALL")) {
            reportsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT DISTINCT patient_no, initcap(name) as patient_name, date as visit_date, comments as NEW_OR_REVISIT, test as home_address, department as clinic, payment as pay_mode, age, gender, marital_status, user_name as registar from hp_patient_visit WHERE date between '" + startDatePicker.getDate() + "' AND  '" + endDatePicker.getDate() + "'  order by 2"));
        } else {
            reportsTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT DISTINCT patient_no, initcap(name) as patient_name, date as visit_date, comments as NEW_OR_REVISIT, test as home_address, department as clinic, payment as pay_mode, age, gender, marital_status, user_name as registar from hp_patient_visit WHERE date between '" + startDatePicker.getDate() + "' AND  '" + endDatePicker.getDate() + "' AND department ilike '" + patientSpecialityCmbx.getSelectedItem().toString() + "' order by 2"));
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_startDatePickerPropertyChange

    private void diagnosisBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_diagnosisBtnActionPerformed
        java.sql.Array diseaseCodeArraySet = null;
        // int n = 0;
        java.util.Vector arrayVector = new java.util.Vector(1, 1);
        for (int i = 0; i < diseaseTbl.getRowCount(); i++) {
            if (diseaseTbl.getValueAt(i, 0) != null) {
                arrayVector.addElement(diseaseTbl.getValueAt(i, 0));
            }
        }
        java.lang.Object arraySet[] = arrayVector.toArray();

        try {
            diseaseCodeArraySet = connectDB.createArrayOf("varchar", arraySet);
            java.sql.PreparedStatement diagnosisPstmt = connectDB.prepareStatement("UPDATE hp_patient_visist SET diagnosis = ? WHERE patient_no = ? AND visit_no = ?");
            diagnosisPstmt.setArray(1, diseaseCodeArraySet);
            diagnosisPstmt.setString(2, patientNumberTxt.getText());
            //  diagnosisPstmt.setString(3, );

            // TODO add your handling code here:
        } catch (SQLException ex) {
            Logger.getLogger(PatientRegisterIntfr.class.getName()).log(Level.SEVERE, null, ex);
            javax.swing.JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_diagnosisBtnActionPerformed

    private void searchButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton3ActionPerformed

        System.out.println("Showing dialog");

        java.awt.Point point = this.diseaseFieldTxt.getLocationOnScreen();

        diseaseDialog.setSize(450, 200);

        diseaseDialog.setLocation(point);

        diseaseDialog.setVisible(true);

        // TODO add your handling code here:
    }//GEN-LAST:event_searchButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void driverNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_driverNameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_driverNameTxtActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select insurer from pb_creditcard_types where card_name ='" + jComboBox3.getSelectedItem() + "'");
            while (rset.next()) {
                jTextField7.setText(rset.getObject(1).toString());

            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Insert not successful");
        }   // Add your handling code here:
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void insurerDetailsPanelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_insurerDetailsPanelFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_insurerDetailsPanelFocusGained

    private void jCheckBox6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox6ActionPerformed
        javax.swing.JInternalFrame dismth = new SchemeStatusIntfr(connectDB, pConnDB);
        dismth.setVisible(true);
        this.getParent().add(dismth, javax.swing.JLayeredPane.DEFAULT_LAYER);
        try {
            dismth.setSelected(true);
        } catch (java.beans.PropertyVetoException pvt) {
        }        // Add your handling code here:
    }//GEN-LAST:event_jCheckBox6ActionPerformed

    private void searchButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton2ActionPerformed
        searchButton11aClicked();        // Add your handling code here:

        // Add your handling code here:
    }//GEN-LAST:event_searchButton2ActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchButton11Clicked();        // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed

    private void bioDataPanelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_bioDataPanelFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_bioDataPanelFocusGained

    private void nokNameTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_nokNameTxtCaretUpdate
        if (this.ageTxt.getText().equalsIgnoreCase("")) {
        } else {
            double ager = java.lang.Double.valueOf(ageTxt.getText().toString());
            if (ager < 5) {
                patientCategoryCmbx.setSelectedItem("Under 5 Yrs".toUpperCase());
            }

        }// TODO add your handling code here:
    }//GEN-LAST:event_nokNameTxtCaretUpdate

    private void residenceTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_residenceTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_residenceTxtActionPerformed

    private void residenceTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_residenceTxtCaretUpdate
        if (this.ageTxt.getText().equalsIgnoreCase("")) {
        } else {
            double ager = java.lang.Double.valueOf(ageTxt.getText().toString());
            if (ager < 5) {
                patientCategoryCmbx.setSelectedItem("Under 5 Yrs".toUpperCase());
            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_residenceTxtCaretUpdate

    private void patientSearchPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientSearchPanelMouseMoved
        //   changeDate();
    }//GEN-LAST:event_patientSearchPanelMouseMoved

    private void dateofBirthPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dateofBirthPanelMouseMoved
        //       ageLabel.setText(com.afrisoftech.lib.PatientAge.getPatientActualAge(connectDB, this.datePickerYOB.getDate()));
        //       ageTxt.setText(String.valueOf(com.afrisoftech.lib.PatientAge.getPatientAge(connectDB, this.datePickerYOB.getDate())));
        //changeDate();
        //       this.datePickerYOB.
    }//GEN-LAST:event_dateofBirthPanelMouseMoved

    private void dateofBirthPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dateofBirthPanelMouseDragged
        // changeDate();
    }//GEN-LAST:event_dateofBirthPanelMouseDragged

    private void dateofBirthPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dateofBirthPanelMouseReleased

    }//GEN-LAST:event_dateofBirthPanelMouseReleased

    private void dateofBirthPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dateofBirthPanelMouseExited
        //          ageLabel.setText(com.afrisoftech.lib.PatientAge.getPatientActualAge(connectDB, this.datePickerYOB.getDate()));
        //       ageTxt.setText(String.valueOf(com.afrisoftech.lib.PatientAge.getPatientAge(connectDB, this.datePickerYOB.getDate())));
    }//GEN-LAST:event_dateofBirthPanelMouseExited

    private void datePickerYOBPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_datePickerYOBPropertyChange
        //  if(this.datePickerYOB.getCalendarButton().action(java.awt.Event.ACTION_EVENT, evt))
        {
        }
    }//GEN-LAST:event_datePickerYOBPropertyChange

    private void datePickerYOBInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_datePickerYOBInputMethodTextChanged
        //       ageLabel.setText(com.afrisoftech.lib.PatientAge.getPatientActualAge(connectDB, this.datePickerYOB.getDate()));
        //       ageTxt.setText(String.valueOf(com.afrisoftech.lib.PatientAge.getPatientAge(connectDB, this.datePickerYOB.getDate())));
    }//GEN-LAST:event_datePickerYOBInputMethodTextChanged

    private void datePickerYOBMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_datePickerYOBMouseMoved
        //changeDate();
    }//GEN-LAST:event_datePickerYOBMouseMoved

    private void dateofLastVisitTxtMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dateofLastVisitTxtMouseClicked
        // ageTxt.setText(String.valueOf(com.afrisoftech.lib.PatientAge.getPatientAge(connectDB, this.datePickerYOB.getDate())));
        //      ageTxt.setText(com.afrisoftech.lib.PatientAge.getPatientActualAge(connectDB, this.datePickerYOB.getDate()));
    }//GEN-LAST:event_dateofLastVisitTxtMouseClicked

    private void firstNameTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_firstNameTxtCaretUpdate

        searchbyNameChkbx.setSelected(true);

        System.out.println("Showing dialog");

        java.awt.Point point = this.firstNameTxt.getLocationOnScreen();

        point.setLocation(firstNameTxt.getLocationOnScreen().x, firstNameTxt.getLocationOnScreen().y + 20);

        jSearchDialog4.setSize(700, 200);

        jSearchDialog4.setLocation(point);

        jSearchDialog4.setVisible(true);

        if (searchbyNameChkbx.isSelected()) {
            if (firstNameTxt.getCaretPosition() < 3) {

                System.out.println("Nothing");
            } else {
                jSearchTable4.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, upper(second_name) as other_names, upper(first_name) as surname, year_of_birth, residence from hp_patient_register where (replace(second_name, '''', '') ILIKE '%" + surNameTxt.getText().replace("'", "") + "%' AND replace(first_name, '''', '') ILIKE '%" + firstNameTxt.getText().replace("'", "") + "%') OR (replace(first_name, '''', '') ILIKE '%" + surNameTxt.getText().replace("'", "") + "%' AND replace(second_name, '''', '') ILIKE '%" + firstNameTxt.getText().replace("'", "") + "%') order by second_name"));
//                jSearchTable4.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT * FROM patient_names('" + firstNameTxt.getText() + "','" + surNameTxt.getText() + "','' ) order by second_name"));

                jSearchTable4.setShowHorizontalLines(false);
                jSearchScrollPane4.setViewportView(jSearchTable4);
            }
            firstNameTxt.requestFocusInWindow();
        } else if (searchbyNumberChkbx.isSelected()) {
            if (firstNameTxt.getCaretPosition() < 3) {

                System.out.println("Nothing");
            } else {

                jSearchTable4.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, upper(second_name) as other_names, upper(first_name) as surname, year_of_birth, residence from hp_patient_register where patient_no ILIKE '%" + firstNameTxt.getText() + "%' order by patient_no"));

                jSearchTable4.setShowHorizontalLines(false);
                jSearchScrollPane4.setViewportView(jSearchTable4);

            }

        }

        firstNameTxt.requestFocusInWindow();

        // TODO add your handling code here:
    }//GEN-LAST:event_firstNameTxtCaretUpdate

    private void surNameTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_surNameTxtCaretUpdate
//          jTextField11.setEditable(false);

//        searchbyNameChkbx.setSelected(true);
//
//        System.out.println("Showing dialog");
//
//        java.awt.Point point = this.surNameTxt.getLocationOnScreen();
//
//        point.setLocation(surNameTxt.getLocationOnScreen().x, surNameTxt.getLocationOnScreen().y + 20);
//
//        jSearchDialog4.setSize(700, 200);
//
//        jSearchDialog4.setLocation(point);
//
//        jSearchDialog4.setVisible(true);
//
//        if (searchbyNameChkbx.isSelected()) {
//            if (surNameTxt.getCaretPosition() < 3) {
//
//                System.out.println("Nothing");
//            } else {
//                jSearchTable4.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, upper(second_name) as other_names, upper(first_name) as surname, year_of_birth, residence from hp_patient_register where second_name||' '||first_name ILIKE '%" + surNameTxt.getText() + "%' order by second_name"));
//
//                jSearchTable4.setShowHorizontalLines(false);
//                jSearchScrollPane4.setViewportView(jSearchTable4);
//            }
//            surNameTxt.requestFocusInWindow();
//        } else if (searchbyNumberChkbx.isSelected()) {
//            if (surNameTxt.getCaretPosition() < 3) {
//
//                System.out.println("Nothing");
//            } else {
//
//                jSearchTable4.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT patient_no, upper(second_name) as other_names, upper(first_name) as surname, year_of_birth, residence from hp_patient_register where patient_no ILIKE '%" + surNameTxt.getText() + "%' order by patient_no"));
//
//                jSearchTable4.setShowHorizontalLines(false);
//                jSearchScrollPane4.setViewportView(jSearchTable4);
//
//            }
//
//        }
//
//        surNameTxt.requestFocusInWindow();
        // TODO add your handling code here:
    }//GEN-LAST:event_surNameTxtCaretUpdate

    private void mapPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapPanel1MouseClicked

        System.out.println("This is the map cordinates : Langitude - " + mapPanel1.format(mapPanel1.position2lat(mapPanel1.getCursorPosition().y, mapPanel1.getZoom())) + " , " + this.mapPanel1.format(mapPanel1.position2lon(mapPanel1.getCursorPosition().x, mapPanel1.getZoom())));

//       java.sql.PreparedStatement pstmt = connectDB.prepareStatement("INSERT into funsoft_gis_data(patient_no, latitude_axis, longitude_axis) values(?,?,?)");
//  
//       pstmt.execute();
        // TODO add your handling code here:
    }//GEN-LAST:event_mapPanel1MouseClicked

    private void buttonPanelHierarchyChanged(java.awt.event.HierarchyEvent evt) {//GEN-FIRST:event_buttonPanelHierarchyChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_buttonPanelHierarchyChanged

    private void ageYrsTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_ageYrsTxtCaretUpdate

        if (ageYrsTxt.getText().length() > 0) {
            try {
                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT current_date - round(? * 365.25)::int");
                pstmt.setInt(1, Integer.parseInt(ageYrsTxt.getText()));
                java.sql.ResultSet rset = pstmt.executeQuery();
                while (rset.next()) {
                    datePickerYOB.setDate(rset.getDate(1));
                }

            } catch (java.sql.SQLException sq) {
                javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage());
                sq.printStackTrace();
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_ageYrsTxtCaretUpdate

    private void referralFacilityNameTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_referralFacilityNameTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_referralFacilityNameTxtActionPerformed

    private void searchButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton4ActionPerformed
        System.out.println("Showing dialog");

        java.awt.Point point = this.referralCountyLbl.getLocationOnScreen();

        facilitySearchDialog.setSize(700, 200);

        facilitySearchDialog.setLocation(point);

        facilitySearchDialog.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_searchButton4ActionPerformed

    private void facilitySearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_facilitySearchTxtCaretUpdate
        if (facilitySearchTxt.getText().length() > 2) {
            facilitySearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT facility_code, facility_name, upper(county), constituency FROM master_facility_list WHERE facility_name ilike '%" + facilitySearchTxt.getText() + "%' OR facility_code ILIKE '%" + facilitySearchTxt.getText() + "%' ORDER BY 2"));
        }
// TODO add your handling code here:
    }//GEN-LAST:event_facilitySearchTxtCaretUpdate

    private void facilitySearchTxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_facilitySearchTxtFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_facilitySearchTxtFocusLost

    private void facilitySearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_facilitySearchTableMouseClicked

        referralFacilityNameTxt.setText(facilitySearchTable.getValueAt(facilitySearchTable.getSelectedRow(), 1).toString());

        referralCountyCmbx.setSelectedItem(facilitySearchTable.getValueAt(facilitySearchTable.getSelectedRow(), 2).toString());

        facilitySearchDialog.dispose();

        // TODO add your handling code here:
    }//GEN-LAST:event_facilitySearchTableMouseClicked

    private void dispose4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispose4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dispose4ActionPerformed

    private void facilitySearchDialogComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_facilitySearchDialogComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_facilitySearchDialogComponentHidden

    private void startBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBtnActionPerformed
//        this.initializeWebCam();
//        StartAction startAction = new StartAction();
//        
//        startAction.actionPerformed(evt);
        // TODO add your handling code here:
    }//GEN-LAST:event_startBtnActionPerformed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing

        panel.stop();
        // TODO add your handling code here:
    }//GEN-LAST:event_formInternalFrameClosing

    private void firstNameTxtFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_firstNameTxtFocusLost

        jSearchDialog4.dispose();
        
        // TODO add your handling code here:
    }//GEN-LAST:event_firstNameTxtFocusLost

    private void servicePointCmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_servicePointCmbxActionPerformed

        try {
               java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT count(patient_no) FROM ac_ledger WHERE date = '"+datePicker2.getDate()+"' AND service_type ILIKE '%card%' AND patient_no IN (SELECT patient_no FROM hp_patient_visit WHERE UPPER(parameter) = '"+servicePointCmbx.getSelectedItem().toString().toUpperCase()+"' AND date = '"+datePicker2.getDate()+"')");
               java.sql.ResultSet rset = pstmt.executeQuery();
            while(rset.next()){
                cardsSoldTxt.setText(String.valueOf(rset.getInt(1)));
            }
            rset.close();
            pstmt.close();
        } catch (SQLException ex){
            ex.printStackTrace();
        }
        
        
        try {
            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("SELECT count(patient_no) FROM ac_ledger WHERE date = '"+datePicker2.getDate()+"' AND service_type ILIKE '%file%' AND patient_no IN (SELECT patient_no FROM hp_patient_visit WHERE UPPER(parameter) = '"+servicePointCmbx.getSelectedItem().toString().toUpperCase()+"' AND date = '"+datePicker2.getDate()+"' UNION SELECT patient_no FROM hp_admission WHERE UPPER(diagnosis3) = '"+servicePointCmbx.getSelectedItem().toString().toUpperCase()+"' AND date = '"+datePicker2.getDate()+"')");
            java.sql.ResultSet rset = pstmt.executeQuery();
            while(rset.next()){
                filesSoldTxt.setText(String.valueOf(rset.getInt(1)));
            }
            rset.close();
            pstmt.close();
        } catch (SQLException ex){
            ex.printStackTrace();
        }
        
//        defaultServicePoint = servicePointCmbx.getSelectedItem().toString();
            // TODO add your handling code here:
    }//GEN-LAST:event_servicePointCmbxActionPerformed

    private void fingerPrintReaderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fingerPrintReaderBtnActionPerformed

        com.afrisoftech.lib.biometric.SecuGen secugenFingerPrint = new com.afrisoftech.lib.biometric.SecuGen();
        
        secugenFingerPrint.registerFingerPrint(connectDB, visitID);
        
        // TODO add your handling code here:
    }//GEN-LAST:event_fingerPrintReaderBtnActionPerformed
    private void changeDate() {
        ageLabel.setText(com.afrisoftech.lib.PatientAge.getPatientActualAge(connectDB, this.datePickerYOB.getDate()));
        ageTxt.setText(String.valueOf(com.afrisoftech.lib.PatientAge.getPatientAge(connectDB, this.datePickerYOB.getDate())));

    }

    public java.lang.String getCashPoint() {

        try {

            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("select code from ac_cash_points_setup where description = current_user");
            while (rsetf.next()) {
                cashPoint = rsetf.getObject(1).toString();

            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("select not successful");
        }

        return cashPoint;

    }

    private void searchButtonClicked() {

        System.out.println("Showing dialog");

        java.awt.Point point = this.patientNumberTxt.getLocationOnScreen();

        patientSearchDialog.setSize(700, 200);

        patientSearchDialog.setLocation(point);

        patientSearchDialog.setVisible(true);

    }

    public java.lang.String getShiftNumber() {
        try {

            java.sql.Statement stmt = connectDB.createStatement();

            // java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE cash_point = '"+System.getProperty("cashpoint")+"' AND user_name = current_user AND (status = 'Running' OR status = 'Suspended')");
            java.sql.ResultSet rset = stmt.executeQuery("SELECT shift_no FROM ac_shifts WHERE user_name = current_user AND (status = 'Running' OR status = 'Suspended')");

            while (rset.next()) {

                shift_no = rset.getString(1);

            }

        } catch (java.sql.SQLException sqlExec) {

            javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());

        }

        return shift_no;

    }

    private void getPatientFile(java.lang.String patientNumber) {
        //  jComboBox2.setSelectedItem(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0));
        // jTextField3.setText(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0).toString());
        // jTextField6.setText(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1).toString());
        // jTextField21.setText(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 2).toString());
        // jSearchDialog.dispose();
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("SELECT nok,residence,year_of_birth,tel_no,address,upper(sex) as sex,"
                    + "pay_mode,last_visit,upper(second_name) as other_names, upper(first_name) as surname,emails,id_no,"
                    + "information_source,education_level,occupation, emails, id_no, nok_add, pat_nationality, nok_telno,"
                    + "nok_relationship, nok_residence, nok_email, pat_marital_status, tribe, district, locations,"
                    + "sub_location, chief_name, sub_chief, (current_date-year_of_birth::date)/365 FROM hp_patient_register WHERE patient_no ILIKE '" + patientNumberTxt.getText() + "'");
            while (rset.next()) {
                //jComboBox1.setSelectedItem(dbObject.getDBObject(rset.getObject(7), "-"));
                dateofLastVisitTxt.setText(dbObject.getDBObject(rset.getObject(8), "-"));
                nokNameTxt.setText(dbObject.getDBObject(rset.getObject(1), "-"));
                residenceTxt.setText(dbObject.getDBObject(rset.getObject(2), "-"));
                //  jTextField14.setText(dbObject.getDBObject(rset.getObject(3), "-"));
                jTextField5821.setText(dbObject.getDBObject(rset.getObject(4), "-"));
                jTextField5.setText(dbObject.getDBObject(rset.getObject(5), "-"));
                if (rset.getObject(6).toString().startsWith("M")) {
                    jCheckBox1111.setSelected(true);

                } else {

                    if (rset.getObject(6).toString().startsWith("F")) {
                        jCheckBox2111.setSelected(true);
                    } else {
                    }
                }
                firstNameTxt.setText(dbObject.getDBObject(rset.getObject(9), "-"));
                surNameTxt.setText(dbObject.getDBObject(rset.getObject(10), "-"));
                // nationalityCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(19), "-"));
                //  idNoTxt.setText(dbObject.getDBObject(rset.getObject(12), "-"));
                //  emailAddTxt.setText(dbObject.getDBObject(rset.getObject(11), "-"));
                this.informationSourceCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(13), "-"));
                this.educationLevelCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(14), "-"));
                this.occupationCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(15), "-"));
                ////////
                this.emailAddTxt.setText(dbObject.getDBObject(rset.getObject(16), "-"));
                this.idPassportTxt.setText(dbObject.getDBObject(rset.getObject(17), "-"));
                this.jTextField20.setText(dbObject.getDBObject(rset.getObject(18), "-"));
                this.nationalityCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(19), "-"));
                this.nokTelephoneTxt.setText(dbObject.getDBObject(rset.getObject(20), "-"));
                nokRelationShipCmbx.setSelectedItem(dbObject.getDBObject(rset.getObject(21), "-"));

                this.nokResidenceTxt.setText(dbObject.getDBObject(rset.getObject(22), "-"));
                this.emailAddTxt1.setText(dbObject.getDBObject(rset.getObject(23), "-"));
                //        this.(dbObject.getDBObject(rset.getObject(24), "-"));
                this.jTextField19.setText(dbObject.getDBObject(rset.getObject(25), "-"));
                this.ageTxt.setText(dbObject.getDBObject(rset.getObject(31), "-"));
                this.locationTxt.setText(dbObject.getDBObject(rset.getObject(27), "-"));
                this.currentResidenceTxt.setText(dbObject.getDBObject(rset.getObject(28), "-"));
                this.jTextField25.setText(dbObject.getDBObject(rset.getObject(29), "-"));
                this.jTextField26.setText(dbObject.getDBObject(rset.getObject(30), "-"));
                // jTextField12.setText(dbObject.getDBObject(rset.getObject(6), "-"));
                //  dbObject.getDBObject(rset1.getObject(3), "-")
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
        }
        //   if(jComboBox1.getSelectedItem().equals("Scheme")){
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select payer,description,account_no,member_name,expiry_date from hp_patient_register where patient_no ='" + patientNumberTxt.getText() + "'");
            while (rset.next()) {
                // jComboBox6.setSelectedItem(rset.getObject(1).toString());
                jTextField2.setText(dbObject.getDBObject(rset.getObject(1), "-"));
                jTextField361.setText(dbObject.getDBObject(rset.getObject(2), "-"));
                jTextField15.setText(dbObject.getDBObject(rset.getObject(3), "-"));
                jTextField36.setText(dbObject.getDBObject(rset.getObject(4), "-"));
                jTextField18.setText(dbObject.getDBObject(rset.getObject(5), "-"));
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Select not successful");
            javax.swing.JOptionPane.showMessageDialog(this, sqe.getMessage());
        }
        //}

        //     emailAddTxt.setText("");
        //     idNoTxt.setText("");
        saveRegistrationBtn.setEnabled(true);
    }

    public void takeSnaphotFromVideo() {

        //	super("Test Snap Different Size");
        if (webcam.isOpen()) {
            webcam.close();

        }
        webcam.setViewSize(captureSize);

        panel.setFPSDisplayed(true);
        panel.setFillArea(true);

        // start application with disable snapshot button - we enable it when
        // webcam is started
        takeSnapBtn.setEnabled(false);

        //setLayout(new FlowLayout());
        //add(panel);
        //add(btSnapMe);
        //add(btStart);
        //pack();
        //setVisible(true);
        //setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    private class StartAction extends AbstractAction implements Runnable {

        public StartAction() {
            super("Start");
        }

        @Override
        public void actionPerformed(ActionEvent e) {
//            panel.stop();
//            initializeWebCam();
            webCameraPanel.remove(webCamPanel);
            startBtn.setEnabled(false);
            takeSnapBtn.setEnabled(true);
            if (panel != null) {
                panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
                panel.setMaximumSize(new java.awt.Dimension(142, 37));
                panel.setLayout(new java.awt.GridBagLayout());
                java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.0;
                gridBagConstraints.weighty = 10.0;
                panel.setSize(displaySize);
                webCameraPanel.add(panel, gridBagConstraints);

                webCameraPanel.validate();
            }

            // remember to start panel asynchronously - otherwise GUI will be
            // blocked while OS is opening webcam HW (will have to wait for
            // webcam to be ready) and this causes GUI to hang, stop responding
            // and repainting
            executor.execute(this);

            this.run();

        }

        @Override
        public void run() {
            if (panel != null) {
                panel.start();
            }
        }
    }

    // jSearchDialog.dispose();
    public class ImagePanel extends javax.swing.JPanel {

        private Image image;

        public ImagePanel() {
            try {
                if (imageFile != null) {
                    image = ImageIO.read(imageFile);
                }
            } catch (IOException ex) {
                // handle exception...
            }
        }

        @Override
        protected void paintComponent(java.awt.Graphics g) {
            super.paintComponent(g);
            System.out.println("Doing image painting");
            g.drawImage(image, 0, 0, this.getWidth(), this.getHeight(), this); // see javadoc for more info on the parameters            
        }

    }

    private void initializeWebCam() {
        webcam = Webcam.getDefault();
        if (webcam != null) {
            webCameraPanel.remove(webCamPanel);
            panel = new com.github.sarxos.webcam.WebcamPanel(webcam);
            panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            panel.setMaximumSize(new java.awt.Dimension(142, 37));
            panel.setLayout(new java.awt.GridBagLayout());
            java.awt.GridBagConstraints gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 10.0;
            webCameraPanel.add(panel, gridBagConstraints);
            //   this.takeSnaphotFromVideo();
            this.setSize(com.afrisoftech.hospital.HospitalMain.saccopn.getSize());
        }
    }

    private void clearForm() {

        this.getContentPane().removeAll();

        this.initComponents();

        this.setSize(this.getParent().getSize());

        startBtn.doClick();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel NokEmailLbl;
    private javax.swing.JTextField accidentDriverIDTxt;
    private javax.swing.JTextField accidentDriverLicenseTxt;
    private javax.swing.JSpinner accidentTimeDateSpinner;
    private javax.swing.JTextField accidentVehicleNumberTxt;
    private javax.swing.JLabel ageLabel;
    private javax.swing.JLabel ageLbl;
    private javax.swing.JTextField ageTxt;
    private javax.swing.JFormattedTextField ageYrsTxt;
    private javax.swing.JTabbedPane billindDetailsTabbedPane;
    private javax.swing.JPanel bioDataPanel;
    private javax.swing.JButton bookingBtn;
    private javax.swing.JTextField branchTxt;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JLabel cSheetNoLbl;
    private javax.swing.JTextField cSheetNoTxt;
    private javax.swing.JPanel cardDetailsPanel;
    private javax.swing.JLabel cardSerialNoLbl;
    private javax.swing.JTextField cardSerialNoTxt;
    private javax.swing.JTextField cardsSoldTxt;
    private javax.swing.JButton clearFieldsBtn;
    private javax.swing.JLabel clinicNumberLbl;
    private javax.swing.JTextField clinicNumberTxt;
    private javax.swing.JButton closeBtn;
    public javax.swing.JButton closeFormBtn;
    private javax.swing.JComboBox countyofBirthCmbx;
    private javax.swing.JLabel countyofBirthLbl;
    private javax.swing.JComboBox countyofResidenceCmbx;
    public javax.swing.JRadioButton createNewFileRbtn;
    public javax.swing.JRadioButton createOldFileRbtn;
    private javax.swing.JPanel creditCardDetailsPanel;
    private javax.swing.JTextField currentResidenceTxt;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private com.afrisoftech.lib.DatePicker datePicker2;
    private com.afrisoftech.lib.DatePicker datePicker4;
    private com.afrisoftech.lib.DatePicker datePickerYOB;
    private javax.swing.JPanel dateofBirthPanel;
    private javax.swing.JLabel dateofLastVisitLbl;
    private javax.swing.JTextField dateofLastVisitTxt;
    private javax.swing.JPanel diagnosisActionsPanel;
    private javax.swing.JButton diagnosisBtn;
    private javax.swing.JPanel diagnosisPanel;
    private javax.swing.JPanel diagnosisTPane;
    private javax.swing.JComboBox disabilityCmbx;
    private javax.swing.JPanel diseaseChooserPanel;
    private javax.swing.JDialog diseaseDialog;
    private javax.swing.JTextField diseaseFieldTxt;
    private javax.swing.ButtonGroup diseaseSearchBtngrp;
    private javax.swing.JRadioButton diseaseSearchCodeRbtn;
    private javax.swing.JRadioButton diseaseSearchDescriptionRbtn;
    private javax.swing.JScrollPane diseaseSearchScrollPane;
    private javax.swing.JTable diseaseSearchTable;
    private javax.swing.JTextField diseaseSearchTxt;
    private javax.swing.JTable diseaseTbl;
    private javax.swing.JButton dispose;
    private javax.swing.JButton dispose1;
    private javax.swing.JButton dispose11;
    private javax.swing.JButton dispose111;
    private javax.swing.JButton dispose2;
    private javax.swing.JButton dispose3;
    private javax.swing.JButton dispose4;
    private javax.swing.JButton disposeDiseaseSearchBtn;
    private javax.swing.JComboBox districtCmbx;
    private javax.swing.JTextField driverNameTxt;
    private javax.swing.JButton editFileBtn;
    private javax.swing.JComboBox educationLevelCmbx;
    private javax.swing.JTextField emailAddTxt;
    private javax.swing.JTextField emailAddTxt1;
    private javax.swing.JTextField employerTelTxt;
    private javax.swing.JTextField employerTxt;
    private com.afrisoftech.lib.DatePicker endDatePicker;
    private static javax.swing.JDialog facilitySearchDialog;
    private javax.swing.JScrollPane facilitySearchJscrl;
    private javax.swing.JPanel facilitySearchMainPanel;
    private javax.swing.JTable facilitySearchTable;
    private javax.swing.JTextField facilitySearchTxt;
    private javax.swing.JTextField filesSoldTxt;
    public static javax.swing.JDialog fingerPrintDialog;
    private javax.swing.JButton fingerPrintReaderBtn;
    public static javax.swing.JLabel fingerprintIconLabel;
    private javax.swing.JTextField firstNameTxt;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JButton helpBtn;
    private javax.swing.JLabel idNoLbl;
    private javax.swing.JLabel idNoLbl1;
    private javax.swing.JLabel idNoLbl2;
    private javax.swing.JLabel idNoLbl3;
    private javax.swing.JTextField idPassportTxt;
    private javax.swing.JComboBox informationSourceCmbx;
    private javax.swing.JPanel insuranceDetailsPanel;
    private javax.swing.JPanel insurerDetailsPanel;
    private javax.swing.JButton jButton1111;
    private javax.swing.JButton jButton252111;
    private javax.swing.JButton jButton301111;
    private javax.swing.JButton jButton51;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox1111;
    private javax.swing.JCheckBox jCheckBox1113;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox2111;
    private javax.swing.JCheckBox jCheckBox2113;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JDialog jDialog31;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel3111;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel572;
    private javax.swing.JLabel jLabel5722;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel582;
    private javax.swing.JLabel jLabel5821111;
    private javax.swing.JLabel jLabel582211;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel66111;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel1111;
    private javax.swing.JPanel jPanel121;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel4111;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel61;
    private javax.swing.JPanel jPanel64;
    private javax.swing.JPanel jPanel641;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JDialog jSearchDialog1;
    private javax.swing.JDialog jSearchDialog11;
    private javax.swing.JDialog jSearchDialog111;
    private javax.swing.JDialog jSearchDialog2;
    private javax.swing.JDialog jSearchDialog3;
    private javax.swing.JDialog jSearchDialog4;
    private javax.swing.JPanel jSearchPanel1;
    private javax.swing.JPanel jSearchPanel11;
    private javax.swing.JPanel jSearchPanel111;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JPanel jSearchPanel3;
    private javax.swing.JPanel jSearchPanel4;
    private javax.swing.JPanel jSearchPanel5;
    private javax.swing.JScrollPane jSearchScrollPane1;
    private javax.swing.JScrollPane jSearchScrollPane11;
    private javax.swing.JScrollPane jSearchScrollPane111;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JScrollPane jSearchScrollPane3;
    private javax.swing.JScrollPane jSearchScrollPane4;
    private javax.swing.JTable jSearchTable1;
    private javax.swing.JTable jSearchTable11;
    private javax.swing.JTable jSearchTable111;
    private javax.swing.JTable jSearchTable2;
    private javax.swing.JTable jSearchTable3;
    private javax.swing.JTable jSearchTable4;
    private javax.swing.JSeparator jSeparator111;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField111;
    private javax.swing.JTextField jTextField1111;
    private javax.swing.JTextField jTextField11111;
    private javax.swing.JTextField jTextField1112;
    private javax.swing.JTextField jTextField112;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14111;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField1611;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JTextField jTextField18;
    private javax.swing.JTextField jTextField19;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField20;
    private javax.swing.JTextField jTextField22;
    private javax.swing.JTextField jTextField25;
    private javax.swing.JTextField jTextField26;
    private javax.swing.JTextField jTextField28;
    private javax.swing.JTextField jTextField3111;
    private javax.swing.JTextField jTextField36;
    private javax.swing.JTextField jTextField361;
    private javax.swing.JTextField jTextField3611;
    private javax.swing.JTextField jTextField4111;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField5821;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JTextField locationTxt;
    private javax.swing.JPanel mainPanel;
    private com.roots.map.MapPanel mapPanel1;
    private javax.swing.JPanel mapsPanel;
    private javax.swing.JPanel maritalStatusesPanel;
    private javax.swing.JComboBox modeofArrivalCmbx;
    private javax.swing.JTextField nameofPoliceOfficerTxt;
    private javax.swing.JComboBox nationalityCmbx;
    private javax.swing.JCheckBox nhifChbx;
    private javax.swing.JTextField nhifNumberTxt;
    private javax.swing.JPanel nhifPanel;
    private javax.swing.JCheckBox nokChkbx;
    private javax.swing.JPanel nokDetails;
    private javax.swing.JTextField nokNameTxt;
    private javax.swing.JComboBox nokRelationShipCmbx;
    private javax.swing.JTextField nokResidenceTxt;
    private javax.swing.JTextField nokTelephoneTxt;
    private javax.swing.ButtonGroup nokbuttonGroup;
    private javax.swing.JComboBox occupationCmbx;
    private javax.swing.JTextField oldFileNumberTxt;
    private javax.swing.JPanel otherDetailsPanel;
    private javax.swing.JPanel otherPatientDetailsPanel;
    private javax.swing.JLabel passPortNoLbl;
    private javax.swing.JComboBox patientCategoryCmbx;
    private javax.swing.JTextField patientNumberTxt;
    private static javax.swing.JDialog patientSearchDialog;
    private javax.swing.JScrollPane patientSearchJscrl;
    private javax.swing.JPanel patientSearchMainPanel;
    private javax.swing.JPanel patientSearchPanel;
    private javax.swing.JTable patientSearchTable;
    private javax.swing.JTextField patientSearchTxt;
    private javax.swing.ButtonGroup patientSearchbtnGrp;
    private javax.swing.JComboBox patientSpecialityCmbx;
    private javax.swing.JPanel payModePanel;
    private javax.swing.JComboBox paymentModeCmbx;
    private javax.swing.JLabel physicalResidenceLbl;
    private javax.swing.JTextField placeOfBirthTxt;
    private javax.swing.JLabel placeofBirthLbl;
    private javax.swing.JTextField policeForceNumberTxt;
    private javax.swing.JTextField policeStationTxt;
    private javax.swing.JPanel previousPanel;
    private javax.swing.JScrollPane previousVisitsScrollPane;
    private javax.swing.JTable previousVisitsTable;
    private javax.swing.JButton readSmartCardBtn;
    private javax.swing.JComboBox referralCountyCmbx;
    private javax.swing.JLabel referralCountyLbl;
    private javax.swing.JTextField referralFacilityNameTxt;
    private javax.swing.JComboBox referralTypeCmbx;
    private javax.swing.JLabel referredFromLbl;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JLabel registrationPointLbl;
    private javax.swing.JLabel registrationStatusLbl;
    private javax.swing.JComboBox religionCmbx;
    private javax.swing.JPanel reportsActionPanel;
    private javax.swing.JPanel reportsHeaderPanel;
    private javax.swing.JButton reportsHelpBtn;
    private javax.swing.JPanel reportsMainPanel;
    private javax.swing.JPanel reportsPanel;
    private javax.swing.JScrollPane reportsScrollPane;
    private javax.swing.JLabel reportsSpacerLbl;
    private javax.swing.JTable reportsTable;
    private javax.swing.JButton reprintFileBtn;
    private javax.swing.JLabel residenceCountyLbl;
    private javax.swing.JTextField residenceTxt;
    public javax.swing.JRadioButton revisitRbtn;
    private javax.swing.JPanel rtaButtonPanel;
    private javax.swing.JPanel rtaMainPanel;
    private javax.swing.JLabel rtaModeofArrivalLbl;
    private javax.swing.JPanel rtaPanel;
    private javax.swing.JLabel rtaSpacerLbl;
    private javax.swing.JLabel rtaTypeOfAccidentLbl;
    private javax.swing.JCheckBox samaritanChkbx;
    private javax.swing.JButton savePrintRegistrationBtn;
    public static javax.swing.JButton saveRegistrationBtn;
    private javax.swing.JButton scanDocumentBtn;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchButton1;
    private javax.swing.JButton searchButton11;
    private javax.swing.JButton searchButton13;
    private javax.swing.JButton searchButton2;
    private javax.swing.JButton searchButton3;
    private javax.swing.JButton searchButton4;
    private javax.swing.JCheckBox searchbyNameChkbx;
    private javax.swing.JCheckBox searchbyNumberChkbx;
    private javax.swing.JButton select2;
    private javax.swing.JComboBox servicePointCmbx;
    private javax.swing.JLabel spacerLbl;
    private javax.swing.JComboBox specialtyClinicCmbx;
    private javax.swing.JLabel specialtyClinicLbl;
    private javax.swing.JButton startBtn;
    private com.afrisoftech.lib.DatePicker startDatePicker;
    private javax.swing.JTextField surNameTxt;
    private javax.swing.JButton takeSnapBtn;
    private javax.swing.JComboBox typeofAccidentCmbx;
    private javax.swing.JLabel unitNumberLbl;
    private javax.swing.JComboBox urgencyCMBX;
    private javax.swing.JPanel webCamPanel;
    private javax.swing.JPanel webCameraPanel;
    // End of variables declaration//GEN-END:variables
}
