/*
 * stockprices.java
 *
 * Created on November 5, 2002, 11:47 AM
 */
package com.afrisoftech.hospital;

/**
 *
 * @author root
 */
public class CreditInvAmmendIntfr extends javax.swing.JInternalFrame {

    javax.swing.JComboBox cmbox2 = null;
    java.sql.Connection connectDB = null;
    com.afrisoftech.lib.DBObject dbObject;
    org.netbeans.lib.sql.pool.PooledConnectionSource pConnDB = null;

    public CreditInvAmmendIntfr(java.sql.Connection connDb, org.netbeans.lib.sql.pool.PooledConnectionSource pconnDB) {

        dbObject = new com.afrisoftech.lib.DBObject();

        connectDB = connDb;

        pConnDB = pconnDB;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSearchDialog2 = new javax.swing.JDialog();
        jSearchPanel2 = new javax.swing.JPanel();
        jTextField113 = new javax.swing.JTextField();
        jSearchScrollPane2 = new javax.swing.JScrollPane();
        jSearchTable2 = new com.afrisoftech.dbadmin.JTable();
        jButton52 = new javax.swing.JButton();
        jSearchDialog21 = new javax.swing.JDialog();
        jSearchPanel21 = new javax.swing.JPanel();
        jTextField1131 = new javax.swing.JTextField();
        jSearchScrollPane21 = new javax.swing.JScrollPane();
        jSearchTable21 = new com.afrisoftech.dbadmin.JTable();
        jButton521 = new javax.swing.JButton();
        jSearchDialog11 = new javax.swing.JDialog();
        jSearchPanel11 = new javax.swing.JPanel();
        jTextField1111 = new javax.swing.JTextField();
        jSearchScrollPane11 = new javax.swing.JScrollPane();
        jSearchTable11 = new com.afrisoftech.dbadmin.JTable();
        dispose11 = new javax.swing.JButton();
        invoiceSearchDialog = new javax.swing.JDialog();
        invoiceSearchPanel = new javax.swing.JPanel();
        invoiceNumberSearchTxt = new javax.swing.JTextField();
        invoiceSearchJscrl = new javax.swing.JScrollPane();
        invoiceSearchTable = new com.afrisoftech.dbadmin.JTable();
        closeBtn = new javax.swing.JButton();
        jSearchDialog = new javax.swing.JDialog();
        jSearchPanel = new javax.swing.JPanel();
        jTextField112 = new javax.swing.JTextField();
        jSearchScrollPane = new javax.swing.JScrollPane();
        jSearchTable = new com.afrisoftech.dbadmin.JTable();
        jButton9 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jSearchDialog23 = new javax.swing.JDialog();
        jSearchPanel23 = new javax.swing.JPanel();
        jTextField1133 = new javax.swing.JTextField();
        jSearchScrollPane23 = new javax.swing.JScrollPane();
        jSearchTable23 = new com.afrisoftech.dbadmin.JTable();
        jButton523 = new javax.swing.JButton();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        jSearchDialog231 = new javax.swing.JDialog();
        jSearchPanel24 = new javax.swing.JPanel();
        jTextField1134 = new javax.swing.JTextField();
        jSearchScrollPane24 = new javax.swing.JScrollPane();
        jSearchTable24 = new com.afrisoftech.dbadmin.JTable();
        jButton524 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel61 = new javax.swing.JPanel();
        jPanel31 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        jPanel41 = new javax.swing.JPanel();
        ipInvoiceNumberTxt = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jPanel6411 = new javax.swing.JPanel();
        searchButton21 = new javax.swing.JButton();
        ipSchemeNameTxt = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        ipPatientNameTxt = new javax.swing.JTextField();
        jLabel71 = new javax.swing.JLabel();
        ipSchemePayerTxt = new javax.swing.JTextField();
        jLabel91 = new javax.swing.JLabel();
        ipPatientNumberTxt = new javax.swing.JTextField();
        jLabel81 = new javax.swing.JLabel();
        jLabel101 = new javax.swing.JLabel();
        ipAccountNumberTxt = new javax.swing.JTextField();
        jLabel411 = new javax.swing.JLabel();
        ipSchemeMemeberNameTxt = new javax.swing.JTextField();
        jLabel111 = new javax.swing.JLabel();
        ipSchemeMemberNumberTxt = new javax.swing.JTextField();
        selectionPanel = new javax.swing.JPanel();
        debitorCreditPanel = new javax.swing.JPanel();
        ipCRRdbtn = new javax.swing.JRadioButton();
        jLabel13 = new javax.swing.JLabel();
        ipDRRdbtn = new javax.swing.JRadioButton();
        jPanel9 = new javax.swing.JPanel();
        ipServiceOfferedChkbx = new javax.swing.JCheckBox();
        jLabel131 = new javax.swing.JLabel();
        ipConsultantsChkbx = new javax.swing.JCheckBox();
        paymentModeLbl = new javax.swing.JLabel();
        ipPaymentModeCmbx = new javax.swing.JComboBox();
        datePicker = new com.afrisoftech.lib.DatePicker();
        reasonLbl = new javax.swing.JLabel();
        ipCRDRReasonTxt = new javax.swing.JTextField();
        billingTablePane = new javax.swing.JPanel();
        billingTableJscrl = new javax.swing.JScrollPane();
        ipBillingTable = new com.afrisoftech.dbadmin.JTable();
        actionPanel = new javax.swing.JPanel();
        try  {
            java.lang.Class.forName("org.postgresql.Driver");
            System.out.println("Found driver");
        } catch(java.lang.ClassNotFoundException cnf){
            System.out.println("driver not found");
        }
        saveCreditDebitNoteBtn = new javax.swing.JButton();
        refreshFormBtn = new javax.swing.JButton();
        removeRowBtn = new javax.swing.JButton();
        closeFormBtn = new javax.swing.JButton();
        helpBtn = new javax.swing.JButton();
        spacerLabel = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        ipDebitTxt = new javax.swing.JTextField();
        jTextField51 = new javax.swing.JTextField();
        jLabel61 = new javax.swing.JLabel();
        ipBalanceTxt = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jTextField114 = new javax.swing.JTextField();
        jLabel92 = new javax.swing.JLabel();
        jComboBox11 = new javax.swing.JComboBox();
        datePicker1 = new com.afrisoftech.lib.DatePicker();
        jLabel62 = new javax.swing.JLabel();
        jList1 = new javax.swing.JList();
        jLabel43 = new javax.swing.JLabel();
        jPanel42 = new javax.swing.JPanel();
        jTextField92 = new javax.swing.JTextField();
        searchButton3 = new javax.swing.JButton();
        jTextField14 = new javax.swing.JTextField();
        jTextField15 = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        opInvoiceNumberTxt = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel641 = new javax.swing.JPanel();
        searchButton2 = new javax.swing.JButton();
        opSchemeNameTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        opPatientNameTxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        opSchemePayerTxt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        opPatientNumberTxt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        opSchemeAcctNumberTxt = new javax.swing.JTextField();
        jLabel41 = new javax.swing.JLabel();
        opSchemeMemberNameTxt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        opSchemeMemberNumberTxt = new javax.swing.JTextField();
        datePicker2 = new com.afrisoftech.lib.DatePicker();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        opCRRdbtn = new javax.swing.JRadioButton();
        jLabel16 = new javax.swing.JLabel();
        opDRRdbtn = new javax.swing.JRadioButton();
        jPanel15 = new javax.swing.JPanel();
        opServicesOfferedChkbx = new javax.swing.JCheckBox();
        jLabel132 = new javax.swing.JLabel();
        opConsultantsCRDRChkbx = new javax.swing.JCheckBox();
        jLabel532 = new javax.swing.JLabel();
        opCRDRReasonTxt = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        opBillingTable = new com.afrisoftech.dbadmin.JTable();
        jPanel17 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jTextField115 = new javax.swing.JTextField();
        jLabel93 = new javax.swing.JLabel();
        jComboBox12 = new javax.swing.JComboBox();
        datePicker3 = new com.afrisoftech.lib.DatePicker();
        jLabel63 = new javax.swing.JLabel();
        jList2 = new javax.swing.JList();
        jLabel44 = new javax.swing.JLabel();
        jPanel43 = new javax.swing.JPanel();
        jTextField93 = new javax.swing.JTextField();
        searchButton4 = new javax.swing.JButton();
        jTextField16 = new javax.swing.JTextField();
        jTextField17 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        opDebitTxt = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        opBalanceTxt = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        try  {
            java.lang.Class.forName("org.postgresql.Driver");
            System.out.println("Found driver");
        } catch(java.lang.ClassNotFoundException cnf){
            System.out.println("driver not found");
        }
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        jSearchDialog2.setModal(true);
        jSearchDialog2.setUndecorated(true);
        jSearchDialog2.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel2.setLayout(new java.awt.GridBagLayout());

        jTextField113.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField113CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel2.add(jTextField113, gridBagConstraints);

        jSearchTable2.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable2.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable2MouseClicked(evt);
            }
        });
        jSearchScrollPane2.setViewportView(jSearchTable2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel2.add(jSearchScrollPane2, gridBagConstraints);

        jButton52.setMnemonic('l');
        jButton52.setText("Close");
        jButton52.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton52ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel2.add(jButton52, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog2.getContentPane().add(jSearchPanel2, gridBagConstraints);

        jSearchDialog21.setModal(true);
        jSearchDialog21.setUndecorated(true);
        jSearchDialog21.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel21.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel21.setLayout(new java.awt.GridBagLayout());

        jTextField1131.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1131CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel21.add(jTextField1131, gridBagConstraints);

        jSearchTable21.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable21.setShowHorizontalLines(false);
        /*javax.swing.table.TableColumn column = null;

        for (int i = 0; i < 4; i++) {

            column = jSearchTable2.getColumnModel().getColumn(i);

            if (i == 1) {

                column.setPreferredWidth(400);
                //sport column is bigger
            } else {

                column.setPreferredWidth(200);

            }
        }
        */
        jSearchTable21.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSearchTable21MouseClicked(evt);
            }
        });
        jSearchScrollPane21.setViewportView(jSearchTable21);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 20.0;
        jSearchPanel21.add(jSearchScrollPane21, gridBagConstraints);

        jButton521.setText("Close");
        jButton521.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton521ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchPanel21.add(jButton521, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jSearchDialog21.getContentPane().add(jSearchPanel21, gridBagConstraints);

        jSearchDialog11.setModal(true);
        jSearchDialog11.setUndecorated(true);
        jSearchDialog11.getContentPane().setLayout(new java.awt.GridBagLayout());

        jSearchPanel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jSearchPanel11.setLayout(new java.awt.GridBagLayout());

        jTextField1111.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField1111CaretUpdate(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 300.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jSearchPanel11.add(jTextField1111, gridBagConstraints);

        jSearchTable11.setToolTipText("Click on the target row to select the patient from the search.");
        jSearchTable11.setShowHorizontalLines(false);
        /*int rowsNo = 0;
        //try {

            crset1.setCommand("SELECT patient_no, (upper(first_name||' '||second_name||' '||last_name)) as name, year_of_birth, residence from hp_patient_register order by name");

            crset1.setConnectionSource(pConnDB);

            // try {
                //crset1.execute();

                // crset2.setExecuteOnLoad(true);
                jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(crset1, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("patient_no", "Patient No.", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("name", "Name", false),

                    new org.netbeans.lib.sql.models.TableModel.Column("year_of_birth", "Birth date", true),
                    new org.netbeans.lib.sql.models.TableModel.Column("residence", "Residence", true)

                }));

                tableModel = jSearchTable.getModel();

                jSearchScrollPane.setViewportView(jSearchTable);

                /*   }catch(java.sql.SQLException sqlex){
                javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                System.out.println(sqlex.getMessage());

            }

            javax.swing.table.TableColumn column = null;

            for (int i = 0; i < 4; i++) {

                column = jSearchTable.getColumnModel().getColumn(i);

                if (i == 1) {

                    column.setPreferredWidth(400);
                    //sport column is bigger
                } else {

                    column.setPreferredWidth(200);

                }
            }*/
            jSearchTable11.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jSearchTable11MouseClicked(evt);
                }
            });
            jSearchScrollPane11.setViewportView(jSearchTable11);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            jSearchPanel11.add(jSearchScrollPane11, gridBagConstraints);

            dispose11.setMnemonic('l');
            dispose11.setText("Close");
            dispose11.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    dispose11ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel11.add(dispose11, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchDialog11.getContentPane().add(jSearchPanel11, gridBagConstraints);

            invoiceSearchDialog.setModal(true);
            invoiceSearchDialog.setUndecorated(true);
            invoiceSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

            invoiceSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            invoiceSearchPanel.setLayout(new java.awt.GridBagLayout());

            invoiceNumberSearchTxt.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    invoiceNumberSearchTxtCaretUpdate(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 300.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
            invoiceSearchPanel.add(invoiceNumberSearchTxt, gridBagConstraints);

            invoiceSearchTable.setToolTipText("Click on the target row to select the patient from the search.");
            invoiceSearchTable.setShowHorizontalLines(false);
            /*javax.swing.table.TableColumn column = null;

            for (int i = 0; i < 4; i++) {

                column = jSearchTable2.getColumnModel().getColumn(i);

                if (i == 1) {

                    column.setPreferredWidth(400);
                    //sport column is bigger
                } else {

                    column.setPreferredWidth(200);

                }
            }
            */
            invoiceSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    invoiceSearchTableMouseClicked(evt);
                }
            });
            invoiceSearchJscrl.setViewportView(invoiceSearchTable);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            invoiceSearchPanel.add(invoiceSearchJscrl, gridBagConstraints);

            closeBtn.setMnemonic('l');
            closeBtn.setText("Close");
            closeBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    closeBtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            invoiceSearchPanel.add(closeBtn, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            invoiceSearchDialog.getContentPane().add(invoiceSearchPanel, gridBagConstraints);

            jSearchDialog.setModal(true);
            jSearchDialog.setUndecorated(true);
            jSearchDialog.getContentPane().setLayout(new java.awt.GridBagLayout());

            jSearchPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jSearchPanel.setLayout(new java.awt.GridBagLayout());

            jTextField112.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    jTextField112CaretUpdate(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 10.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 100);
            jSearchPanel.add(jTextField112, gridBagConstraints);

            jSearchTable.setShowHorizontalLines(false);
            /*    try {
                searchRowSet.setCommand("select product,selling_price,gl_code FROM st_stock_prices WHERE department = 'Pharmacy' order by product");
                searchRowSet.setConnectionSource(pConnDB);

                searchRowSet.execute();

                // crset2.setExecuteOnLoad(true);
                jSearchTable.setModel(new org.netbeans.lib.sql.models.TableModel(searchRowSet, new org.netbeans.lib.sql.models.TableModel.Column[] {
                    new org.netbeans.lib.sql.models.TableModel.Column("product", "Description", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("selling_price", "Amount", false),
                    new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl_code", false)

                }));
                // jSearchScrollPane.setViewportView(jSearchTable);

            } catch(java.sql.SQLException sqlex){
                javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);

                System.out.println(sqlex.getMessage());
            }
            */
            jSearchTable.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jSearchTableMouseClicked(evt);
                }
            });
            jSearchScrollPane.setViewportView(jSearchTable);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            jSearchPanel.add(jSearchScrollPane, gridBagConstraints);

            jButton9.setText("Dispose");
            jButton9.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton9ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel.add(jButton9, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchDialog.getContentPane().add(jSearchPanel, gridBagConstraints);

            jSearchDialog23.setModal(true);
            jSearchDialog23.setUndecorated(true);
            jSearchDialog23.getContentPane().setLayout(new java.awt.GridBagLayout());

            jSearchPanel23.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jSearchPanel23.setLayout(new java.awt.GridBagLayout());

            jTextField1133.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    jTextField1133CaretUpdate(evt);
                }
            });
            jTextField1133.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jTextField1133ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 300.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
            jSearchPanel23.add(jTextField1133, gridBagConstraints);

            jSearchTable23.setToolTipText("Click on the target row to select the patient from the search.");
            jSearchTable23.setShowHorizontalLines(false);
            /*javax.swing.table.TableColumn column = null;

            for (int i = 0; i < 4; i++) {

                column = jSearchTable2.getColumnModel().getColumn(i);

                if (i == 1) {

                    column.setPreferredWidth(400);
                    //sport column is bigger
                } else {

                    column.setPreferredWidth(200);

                }
            }
            */
            jSearchTable23.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jSearchTable23MouseClicked(evt);
                }
            });
            jSearchScrollPane23.setViewportView(jSearchTable23);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            jSearchPanel23.add(jSearchScrollPane23, gridBagConstraints);

            jButton523.setText("Close");
            jButton523.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton523ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel23.add(jButton523, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchDialog23.getContentPane().add(jSearchPanel23, gridBagConstraints);

            jSearchDialog231.setModal(true);
            jSearchDialog231.setUndecorated(true);
            jSearchDialog231.getContentPane().setLayout(new java.awt.GridBagLayout());

            jSearchPanel24.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jSearchPanel24.setLayout(new java.awt.GridBagLayout());

            jTextField1134.addCaretListener(new javax.swing.event.CaretListener() {
                public void caretUpdate(javax.swing.event.CaretEvent evt) {
                    jTextField1134CaretUpdate(evt);
                }
            });
            jTextField1134.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jTextField1134ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 300.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
            jSearchPanel24.add(jTextField1134, gridBagConstraints);

            jSearchTable24.setToolTipText("Click on the target row to select the patient from the search.");
            jSearchTable24.setShowHorizontalLines(false);
            /*javax.swing.table.TableColumn column = null;

            for (int i = 0; i < 4; i++) {

                column = jSearchTable2.getColumnModel().getColumn(i);

                if (i == 1) {

                    column.setPreferredWidth(400);
                    //sport column is bigger
                } else {

                    column.setPreferredWidth(200);

                }
            }
            */
            jSearchTable24.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jSearchTable24MouseClicked(evt);
                }
            });
            jSearchScrollPane24.setViewportView(jSearchTable24);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 20.0;
            jSearchPanel24.add(jSearchScrollPane24, gridBagConstraints);

            jButton524.setText("Close");
            jButton524.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton524ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchPanel24.add(jButton524, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jSearchDialog231.getContentPane().add(jSearchPanel24, gridBagConstraints);

            setClosable(true);
            setIconifiable(true);
            setMaximizable(true);
            setResizable(true);
            setTitle("Credit and Debit Notes for A/C Receivables");
            setPreferredSize(new java.awt.Dimension(650, 700));
            setVisible(true);
            getContentPane().setLayout(new java.awt.GridBagLayout());
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.gridheight = 4;
            getContentPane().add(jLabel5, gridBagConstraints);

            jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jTabbedPane1MouseClicked(evt);
                }
            });

            jPanel61.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    jPanel61MouseClicked(evt);
                }
            });
            jPanel61.setLayout(new java.awt.GridBagLayout());

            jPanel31.setBorder(javax.swing.BorderFactory.createTitledBorder("Patient Details"));
            jPanel31.setLayout(new java.awt.GridBagLayout());

            jLabel31.setText("Invoice No.");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel31.add(jLabel31, gridBagConstraints);

            jPanel41.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jPanel41.setLayout(new java.awt.GridBagLayout());

            ipInvoiceNumberTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel41.add(ipInvoiceNumberTxt, gridBagConstraints);

            searchButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
            searchButton1.setToolTipText("Search");
            searchButton1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            searchButton1.setMaximumSize(new java.awt.Dimension(74, 53));
            searchButton1.setMinimumSize(new java.awt.Dimension(74, 53));
            searchButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            searchButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchButton1ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 2;
            jPanel41.add(searchButton1, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 3.0;
            gridBagConstraints.weighty = 1.0;
            jPanel31.add(jPanel41, gridBagConstraints);

            jLabel12.setText("Scheme Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel31.add(jLabel12, gridBagConstraints);

            jPanel6411.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jPanel6411.setMinimumSize(new java.awt.Dimension(82, 37));
            jPanel6411.setLayout(new java.awt.GridBagLayout());

            searchButton21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
            searchButton21.setToolTipText("Search");
            searchButton21.setEnabled(false);
            searchButton21.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            searchButton21.setMaximumSize(new java.awt.Dimension(74, 53));
            searchButton21.setMinimumSize(new java.awt.Dimension(74, 53));
            searchButton21.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 1;
            jPanel6411.add(searchButton21, gridBagConstraints);

            ipSchemeNameTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel6411.add(ipSchemeNameTxt, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 3.0;
            jPanel31.add(jPanel6411, gridBagConstraints);

            jLabel42.setText("Patient Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel31.add(jLabel42, gridBagConstraints);

            ipPatientNameTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel31.add(ipPatientNameTxt, gridBagConstraints);

            jLabel71.setText("Scheme Payer");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel31.add(jLabel71, gridBagConstraints);

            ipSchemePayerTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            jPanel31.add(ipSchemePayerTxt, gridBagConstraints);

            jLabel91.setText("Patient No");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel31.add(jLabel91, gridBagConstraints);

            ipPatientNumberTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
            jPanel31.add(ipPatientNumberTxt, gridBagConstraints);

            jLabel81.setText("Date");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel31.add(jLabel81, gridBagConstraints);

            jLabel101.setText("Account No.");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel31.add(jLabel101, gridBagConstraints);

            ipAccountNumberTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel31.add(ipAccountNumberTxt, gridBagConstraints);

            jLabel411.setText("Member Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel31.add(jLabel411, gridBagConstraints);

            ipSchemeMemeberNameTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel31.add(ipSchemeMemeberNameTxt, gridBagConstraints);

            jLabel111.setText("Member No");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel31.add(jLabel111, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            jPanel31.add(ipSchemeMemberNumberTxt, gridBagConstraints);

            selectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
            selectionPanel.setLayout(new java.awt.GridBagLayout());

            debitorCreditPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
            debitorCreditPanel.setLayout(new java.awt.GridBagLayout());

            buttonGroup1.add(ipCRRdbtn);
            ipCRRdbtn.setSelected(true);
            ipCRRdbtn.setText("Credit Invoice");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            debitorCreditPanel.add(ipCRRdbtn, gridBagConstraints);

            jLabel13.setText("Or");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            debitorCreditPanel.add(jLabel13, gridBagConstraints);

            buttonGroup1.add(ipDRRdbtn);
            ipDRRdbtn.setText("Debit Invoice");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            debitorCreditPanel.add(ipDRRdbtn, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            selectionPanel.add(debitorCreditPanel, gridBagConstraints);

            jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
            jPanel9.setLayout(new java.awt.GridBagLayout());

            buttonGroup2.add(ipServiceOfferedChkbx);
            ipServiceOfferedChkbx.setSelected(true);
            ipServiceOfferedChkbx.setText("Services Offered");
            ipServiceOfferedChkbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    ipServiceOfferedChkbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            jPanel9.add(ipServiceOfferedChkbx, gridBagConstraints);

            jLabel131.setText("Or");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 5;
            jPanel9.add(jLabel131, gridBagConstraints);

            buttonGroup2.add(ipConsultantsChkbx);
            ipConsultantsChkbx.setText("Consultants");
            ipConsultantsChkbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    ipConsultantsChkbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            jPanel9.add(ipConsultantsChkbx, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            selectionPanel.add(jPanel9, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.gridheight = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
            gridBagConstraints.weightx = 1.0;
            jPanel31.add(selectionPanel, gridBagConstraints);

            paymentModeLbl.setText("Payment Mode");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel31.add(paymentModeLbl, gridBagConstraints);

            ipPaymentModeCmbx.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cash", "Scheme" }));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            jPanel31.add(ipPaymentModeCmbx, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 2.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
            jPanel31.add(datePicker, gridBagConstraints);

            reasonLbl.setText("Reason");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel31.add(reasonLbl, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel31.add(ipCRDRReasonTxt, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.gridwidth = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 3.0;
            jPanel61.add(jPanel31, gridBagConstraints);

            billingTablePane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            billingTablePane.setLayout(new java.awt.GridBagLayout());

            ipBillingTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null}
                },
                new String [] {
                    "Date", "Description", "Reference", "Qty", "Amt.", "Gl Code"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class
                };
                boolean[] canEdit = new boolean [] {
                    true, false, true, true, true, true
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            ipBillingTable.setGridColor(new java.awt.Color(204, 204, 255));
            ipBillingTable.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    ipBillingTableMouseClicked(evt);
                }
            });
            ipBillingTable.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    ipBillingTableKeyReleased(evt);
                }
            });
            billingTableJscrl.setViewportView(ipBillingTable);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 50.0;
            gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
            billingTablePane.add(billingTableJscrl, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 100.0;
            jPanel61.add(billingTablePane, gridBagConstraints);

            actionPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            actionPanel.setLayout(new java.awt.GridBagLayout());

            saveCreditDebitNoteBtn.setMnemonic('s');
            saveCreditDebitNoteBtn.setText("Raise Credit Note");
            saveCreditDebitNoteBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    saveCreditDebitNoteBtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            actionPanel.add(saveCreditDebitNoteBtn, gridBagConstraints);

            refreshFormBtn.setMnemonic('R');
            refreshFormBtn.setText("Refresh");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            actionPanel.add(refreshFormBtn, gridBagConstraints);

            removeRowBtn.setMnemonic('r');
            removeRowBtn.setText("Remove Row");
            removeRowBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    removeRowBtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            actionPanel.add(removeRowBtn, gridBagConstraints);

            closeFormBtn.setMnemonic('C');
            closeFormBtn.setText("Close form");
            closeFormBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    closeFormBtnActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            actionPanel.add(closeFormBtn, gridBagConstraints);

            helpBtn.setMnemonic('h');
            helpBtn.setText("Help");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            actionPanel.add(helpBtn, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 200.0;
            gridBagConstraints.weighty = 1.0;
            actionPanel.add(spacerLabel, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.gridwidth = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            jPanel61.add(actionPanel, gridBagConstraints);

            jPanel21.setLayout(new java.awt.GridBagLayout());

            jLabel21.setText("Debit");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel21.add(jLabel21, gridBagConstraints);

            ipDebitTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            ipDebitTxt.setText("0.00");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel21.add(ipDebitTxt, gridBagConstraints);

            jTextField51.setEditable(false);
            jTextField51.setMinimumSize(new java.awt.Dimension(0, 0));
            jTextField51.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            jPanel21.add(jTextField51, gridBagConstraints);

            jLabel61.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
            jLabel61.setText("Balance");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 4;
            jPanel21.add(jLabel61, gridBagConstraints);

            ipBalanceTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            ipBalanceTxt.setText("0.00");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 10);
            jPanel21.add(ipBalanceTxt, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.gridwidth = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel61.add(jPanel21, gridBagConstraints);

            jPanel10.setLayout(new java.awt.GridBagLayout());

            jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter Doctor details"));
            jPanel12.setLayout(new java.awt.GridBagLayout());

            jLabel15.setText("A/C Description");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
            jPanel12.add(jLabel15, gridBagConstraints);

            jLabel22.setText("GL Account");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
            jPanel12.add(jLabel22, gridBagConstraints);

            jTextField114.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
            jPanel12.add(jTextField114, gridBagConstraints);

            jLabel92.setText("Doctor Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
            jPanel12.add(jLabel92, gridBagConstraints);

            jComboBox11.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select activity from pb_activity order by activity"));
            jComboBox11.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jComboBox11ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel12.add(jComboBox11, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel12.add(datePicker1, gridBagConstraints);

            jLabel62.setText("Date");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
            jPanel12.add(jLabel62, gridBagConstraints);
            jPanel12.add(jList1, new java.awt.GridBagConstraints());

            jLabel43.setText("A/C No");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
            jPanel12.add(jLabel43, gridBagConstraints);

            jPanel42.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jPanel42.setLayout(new java.awt.GridBagLayout());

            jTextField92.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel42.add(jTextField92, gridBagConstraints);

            searchButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
            searchButton3.setToolTipText("Search");
            searchButton3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            searchButton3.setMaximumSize(new java.awt.Dimension(74, 53));
            searchButton3.setMinimumSize(new java.awt.Dimension(74, 53));
            searchButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            searchButton3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchButton3ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 2;
            jPanel42.add(searchButton3, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            jPanel12.add(jPanel42, gridBagConstraints);

            jTextField14.setMinimumSize(new java.awt.Dimension(0, 0));
            jTextField14.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            jPanel12.add(jTextField14, gridBagConstraints);

            jTextField15.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            jPanel12.add(jTextField15, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridwidth = 6;
            gridBagConstraints.gridheight = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 2.0;
            gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
            jPanel10.add(jPanel12, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 100.0;
            jPanel61.add(jPanel10, gridBagConstraints);

            jTabbedPane1.addTab("IN-Patient", jPanel61);

            jPanel6.setLayout(new java.awt.GridBagLayout());

            jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Patient Details"));
            jPanel3.setLayout(new java.awt.GridBagLayout());

            jLabel3.setText("Invoice No.");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel3.add(jLabel3, gridBagConstraints);

            jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jPanel4.setLayout(new java.awt.GridBagLayout());

            opInvoiceNumberTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel4.add(opInvoiceNumberTxt, gridBagConstraints);

            searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
            searchButton.setToolTipText("Search");
            searchButton.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            searchButton.setMaximumSize(new java.awt.Dimension(74, 53));
            searchButton.setMinimumSize(new java.awt.Dimension(74, 53));
            searchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            searchButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchButtonActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 2;
            jPanel4.add(searchButton, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 3.0;
            gridBagConstraints.weighty = 1.0;
            jPanel3.add(jPanel4, gridBagConstraints);

            jLabel1.setText("Scheme Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel3.add(jLabel1, gridBagConstraints);

            jPanel641.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jPanel641.setMinimumSize(new java.awt.Dimension(82, 37));
            jPanel641.setLayout(new java.awt.GridBagLayout());

            searchButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
            searchButton2.setToolTipText("Search");
            searchButton2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            searchButton2.setMaximumSize(new java.awt.Dimension(74, 53));
            searchButton2.setMinimumSize(new java.awt.Dimension(74, 53));
            searchButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            searchButton2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchButton2ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 1;
            jPanel641.add(searchButton2, gridBagConstraints);

            opSchemeNameTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel641.add(opSchemeNameTxt, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 3.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
            jPanel3.add(jPanel641, gridBagConstraints);

            jLabel4.setText("Patient Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel3.add(jLabel4, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel3.add(opPatientNameTxt, gridBagConstraints);

            jLabel7.setText("Scheme Payer");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel3.add(jLabel7, gridBagConstraints);

            opSchemePayerTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.ipadx = 3;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
            jPanel3.add(opSchemePayerTxt, gridBagConstraints);

            jLabel9.setText("Patient No");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel3.add(jLabel9, gridBagConstraints);

            opPatientNumberTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
            jPanel3.add(opPatientNumberTxt, gridBagConstraints);

            jLabel8.setText("Date");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel3.add(jLabel8, gridBagConstraints);

            jLabel10.setText("Account No.");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel3.add(jLabel10, gridBagConstraints);

            opSchemeAcctNumberTxt.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
            jPanel3.add(opSchemeAcctNumberTxt, gridBagConstraints);

            jLabel41.setText("Member Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel3.add(jLabel41, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 2.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
            jPanel3.add(opSchemeMemberNameTxt, gridBagConstraints);

            jLabel11.setText("Member No");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel3.add(jLabel11, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            jPanel3.add(opSchemeMemberNumberTxt, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
            jPanel3.add(datePicker2, gridBagConstraints);

            jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
            jPanel13.setLayout(new java.awt.GridBagLayout());

            jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
            jPanel14.setLayout(new java.awt.GridBagLayout());

            buttonGroup3.add(opCRRdbtn);
            opCRRdbtn.setSelected(true);
            opCRRdbtn.setText("Credit Invoice");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel14.add(opCRRdbtn, gridBagConstraints);

            jLabel16.setText("Or");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            jPanel14.add(jLabel16, gridBagConstraints);

            buttonGroup3.add(opDRRdbtn);
            opDRRdbtn.setText("Debit Invoice");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel14.add(opDRRdbtn, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            jPanel13.add(jPanel14, gridBagConstraints);

            jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
            jPanel15.setLayout(new java.awt.GridBagLayout());

            buttonGroup4.add(opServicesOfferedChkbx);
            opServicesOfferedChkbx.setSelected(true);
            opServicesOfferedChkbx.setText("Services Offered");
            opServicesOfferedChkbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    opServicesOfferedChkbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            jPanel15.add(opServicesOfferedChkbx, gridBagConstraints);

            jLabel132.setText("Or");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 5;
            jPanel15.add(jLabel132, gridBagConstraints);

            buttonGroup4.add(opConsultantsCRDRChkbx);
            opConsultantsCRDRChkbx.setText("Consultants");
            opConsultantsCRDRChkbx.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    opConsultantsCRDRChkbxActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 6;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            jPanel15.add(opConsultantsCRDRChkbx, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            jPanel13.add(jPanel15, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.gridheight = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
            gridBagConstraints.weightx = 1.0;
            jPanel3.add(jPanel13, gridBagConstraints);

            jLabel532.setText("Reason");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 30, 0, 0);
            jPanel3.add(jLabel532, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
            jPanel3.add(opCRDRReasonTxt, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.gridwidth = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 3.0;
            jPanel6.add(jPanel3, gridBagConstraints);

            jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            jPanel5.setLayout(new java.awt.GridBagLayout());

            opBillingTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null},
                    {null, null, null, null, null, null}
                },
                new String [] {
                    "Date", "Description", "Reference", "Qty", "Amount", "Gl Code"
                }
            ) {
                Class[] types = new Class [] {
                    java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Object.class
                };
                boolean[] canEdit = new boolean [] {
                    true, false, true, true, true, true
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }

                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            });
            opBillingTable.setGridColor(new java.awt.Color(204, 204, 255));
            opBillingTable.addKeyListener(new java.awt.event.KeyAdapter() {
                public void keyReleased(java.awt.event.KeyEvent evt) {
                    opBillingTableKeyReleased(evt);
                }
            });
            opBillingTable.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    opBillingTableMouseClicked(evt);
                }
            });
            jScrollPane1.setViewportView(opBillingTable);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 0;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
            jPanel5.add(jScrollPane1, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 50.0;
            jPanel6.add(jPanel5, gridBagConstraints);

            jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter Doctor details"));
            jPanel17.setLayout(new java.awt.GridBagLayout());

            jLabel17.setText("A/C Description");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
            jPanel17.add(jLabel17, gridBagConstraints);

            jLabel23.setText("GL Account");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
            jPanel17.add(jLabel23, gridBagConstraints);

            jTextField115.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
            jPanel17.add(jTextField115, gridBagConstraints);

            jLabel93.setText("Doctor Name");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
            jPanel17.add(jLabel93, gridBagConstraints);

            jComboBox12.setModel(com.afrisoftech.lib.ComboBoxModel.ComboBoxModel(connectDB, "select activity from pb_activity where activity_category ilike 'CA' order by activity"));
            jComboBox12.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jComboBox12ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel17.add(jComboBox12, gridBagConstraints);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel17.add(datePicker3, gridBagConstraints);

            jLabel63.setText("Date");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
            jPanel17.add(jLabel63, gridBagConstraints);
            jPanel17.add(jList2, new java.awt.GridBagConstraints());

            jLabel44.setText("A/C No");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 0);
            jPanel17.add(jLabel44, gridBagConstraints);

            jPanel43.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            jPanel43.setLayout(new java.awt.GridBagLayout());

            jTextField93.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel43.add(jTextField93, gridBagConstraints);

            searchButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kiwi/images/date.gif"))); // NOI18N
            searchButton4.setToolTipText("Search");
            searchButton4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
            searchButton4.setMaximumSize(new java.awt.Dimension(74, 53));
            searchButton4.setMinimumSize(new java.awt.Dimension(74, 53));
            searchButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
            searchButton4.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    searchButton4ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 2;
            jPanel43.add(searchButton4, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            jPanel17.add(jPanel43, gridBagConstraints);

            jTextField16.setMinimumSize(new java.awt.Dimension(0, 0));
            jTextField16.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 0;
            jPanel17.add(jTextField16, gridBagConstraints);

            jTextField17.setEditable(false);
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            jPanel17.add(jTextField17, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 1;
            gridBagConstraints.gridwidth = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 2.0;
            gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
            jPanel6.add(jPanel17, gridBagConstraints);

            jPanel2.setLayout(new java.awt.GridBagLayout());

            jLabel2.setText("Debit");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel2.add(jLabel2, gridBagConstraints);

            opDebitTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            opDebitTxt.setText("0.00");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 1;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
            jPanel2.add(opDebitTxt, gridBagConstraints);

            jTextField5.setEditable(false);
            jTextField5.setMinimumSize(new java.awt.Dimension(0, 0));
            jTextField5.setPreferredSize(new java.awt.Dimension(0, 0));
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            jPanel2.add(jTextField5, gridBagConstraints);

            jLabel6.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
            jLabel6.setText("Balance");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 4;
            jPanel2.add(jLabel6, gridBagConstraints);

            opBalanceTxt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
            opBalanceTxt.setText("0.00");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 4;
            gridBagConstraints.gridwidth = 2;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 10);
            jPanel2.add(opBalanceTxt, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 3;
            gridBagConstraints.gridwidth = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel6.add(jPanel2, gridBagConstraints);

            jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
            jPanel1.setLayout(new java.awt.GridBagLayout());

            jButton1.setMnemonic('O');
            jButton1.setText("Raise Credit Note");
            jButton1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton1ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel1.add(jButton1, gridBagConstraints);

            jButton3.setMnemonic('R');
            jButton3.setText("Refresh");
            jButton3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton3ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 2;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel1.add(jButton3, gridBagConstraints);

            jButton6.setMnemonic('r');
            jButton6.setText("Remove Row");
            jButton6.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton6ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 3;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel1.add(jButton6, gridBagConstraints);

            jButton4.setMnemonic('C');
            jButton4.setText("Close");
            jButton4.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton4ActionPerformed(evt);
                }
            });
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 4;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel1.add(jButton4, gridBagConstraints);

            jButton5.setMnemonic('h');
            jButton5.setText("Help");
            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 5;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            jPanel1.add(jButton5, gridBagConstraints);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridx = 0;
            gridBagConstraints.gridy = 5;
            gridBagConstraints.gridwidth = 6;
            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
            jPanel6.add(jPanel1, gridBagConstraints);

            jTabbedPane1.addTab("OUT-Patient", jPanel6);

            gridBagConstraints = new java.awt.GridBagConstraints();
            gridBagConstraints.gridwidth = 3;
            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
            gridBagConstraints.weightx = 1.0;
            gridBagConstraints.weighty = 1.0;
            getContentPane().add(jTabbedPane1, gridBagConstraints);

            setBounds(0, 0, 667, 495);
        }// </editor-fold>//GEN-END:initComponents

    private void jButton524ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton524ActionPerformed

        jSearchDialog231.dispose();
// TODO add your handling code here:
    }//GEN-LAST:event_jButton524ActionPerformed

    private void jSearchTable24MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable24MouseClicked
        jTextField93.setText(jSearchTable24.getValueAt(jSearchTable24.getSelectedRow(), 0).toString());
        jTextField17.setText(jSearchTable24.getValueAt(jSearchTable24.getSelectedRow(), 1).toString());
        this.jSearchDialog231.dispose();// TODO add your handling code here:
    }//GEN-LAST:event_jSearchTable24MouseClicked

    private void jTextField1134CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1134CaretUpdate
        if (this.jTextField1134.getCaretPosition() < 1) {
            System.out.print("Nothing");
        } else {
            if (this.jTextField1134.getCaretPosition() < 1) {
                System.out.print("Nothing");
            } else {
                jSearchTable24.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct first_name as name,staff_no from pb_doctors_list where first_name ILIKE '" + jTextField1134.getText() + "%' order by first_name"));


                jSearchScrollPane24.setViewportView(jSearchTable24);
                System.out.println("Cannot sort out");

            }
        } // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1134CaretUpdate

    private void jTextField1134ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1134ActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_jTextField1134ActionPerformed

    private void searchButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton4ActionPerformed
        searchButton231Clicked(); // TODO add your handling code here:
    }//GEN-LAST:event_searchButton4ActionPerformed
    private void searchButton231Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.jTextField93.getLocationOnScreen();

        jSearchDialog231.setSize(400, 200);

        jSearchDialog231.setLocation(point);

        jSearchDialog231.setVisible(true);
    }
    private void jComboBox12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox12ActionPerformed
        try {
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select code from pb_activity where activity ='" + jComboBox12.getSelectedItem() + "'");
            while (rset.next()) {
                jTextField115.setText(rset.getObject(1).toString());


            }


        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }  // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox12ActionPerformed

    private void opConsultantsCRDRChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opConsultantsCRDRChkbxActionPerformed
        jPanel17.setVisible(true);
        jPanel5.setVisible(false);// TODO add your handling code here:
    }//GEN-LAST:event_opConsultantsCRDRChkbxActionPerformed

    private void opServicesOfferedChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opServicesOfferedChkbxActionPerformed
        jPanel5.setVisible(true);
        jPanel17.setVisible(false);// TODO add your handling code here:
    }//GEN-LAST:event_opServicesOfferedChkbxActionPerformed

    private void removeRowBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRowBtnActionPerformed

        int rows2Delete = ipBillingTable.getSelectedRowCount();

        int[] selectedRows = ipBillingTable.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {



                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) ipBillingTable.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }



            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) ipBillingTable.getModel();

                defTableModel.removeRow(ipBillingTable.getSelectedRow());
            }
        }
        this.tableModelTableChanged1();    // Add your handling code here:
    }//GEN-LAST:event_removeRowBtnActionPerformed

    private void ipBillingTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ipBillingTableKeyReleased
        double resFloat = 0.00;
        //  double totalSum = 0.00;
        double floatTotal = java.lang.Double.parseDouble(ipBalanceTxt.getText());

        if (ipBillingTable.getValueAt(ipBillingTable.getSelectedRow(), 1) != null) {
            double floatCol2 = java.lang.Double.parseDouble(ipBillingTable.getValueAt(ipBillingTable.getSelectedRow(), 3).toString());

            double floatCol3 = java.lang.Double.parseDouble(ipBillingTable.getValueAt(ipBillingTable.getSelectedRow(), 4).toString());

            double resVal = floatCol2 * floatCol3;


            opBillingTable.setValueAt(new java.lang.Float(resVal), ipBillingTable.getSelectedRow(), 4);

            for (int i = 0; i < ipBillingTable.getRowCount(); i++) {

                if (ipBillingTable.getValueAt(i, 0) != null) {//toString().compareToIgnoreCase(null) {

                    resFloat = resFloat + Double.parseDouble(ipBillingTable.getValueAt(i, 4).toString());


                    // totalSum = floatTotal + resFloat;

                }
            }
            this.tableModelTableChanged1();
        }    // Add your handling code here:
    }//GEN-LAST:event_ipBillingTableKeyReleased
    public void tableModelTableChanged1() {
        System.out.println("Calculating totals for table 11 and 2.");
        //        double resFloat = 0.00;
        double resFloat = 0.00;


        for (int i = 0; i < ipBillingTable.getRowCount(); i++) {

            if (ipBillingTable.getValueAt(i, 4) != null) {

                resFloat = resFloat + Double.parseDouble(ipBillingTable.getValueAt(i, 4).toString());

                ipBalanceTxt.setText(java.lang.String.valueOf(resFloat));

            } else {
                resFloat = resFloat + Double.parseDouble(ipBillingTable.getValueAt(i, 4).toString());

                ipBalanceTxt.setText(java.lang.String.valueOf(resFloat));

            }
        }
        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    public void tableModelTableChanged1(javax.swing.event.TableModelEvent evt) {

        //        double resFloat = 0.00;
        double resFloat = 0.00;

        for (int i = 0; i < ipBillingTable.getRowCount(); i++) {

            if (ipBillingTable.getValueAt(i, 4) != null) {

                //   if (jTable11.getSelectedColumn() == 1) {

                resFloat = resFloat + Double.parseDouble(ipBillingTable.getValueAt(i, 4).toString());

                //   }

                ipBalanceTxt.setText(java.lang.String.valueOf(resFloat));

            } else {
                resFloat = resFloat + Double.parseDouble(ipBillingTable.getValueAt(i, 4).toString());

                //   }

                ipBalanceTxt.setText(java.lang.String.valueOf(resFloat));
            }

        }

        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }
    private void opBillingTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_opBillingTableKeyReleased
        double resFloat = 0.00;
        //  double totalSum = 0.00;
        double floatTotal = java.lang.Double.parseDouble(opBalanceTxt.getText());

        if (opBillingTable.getValueAt(opBillingTable.getSelectedRow(), 1) != null) {
            double floatCol2 = java.lang.Double.parseDouble(opBillingTable.getValueAt(opBillingTable.getSelectedRow(), 3).toString());

            double floatCol3 = java.lang.Double.parseDouble(opBillingTable.getValueAt(opBillingTable.getSelectedRow(), 4).toString());

            double resVal = floatCol2 * floatCol3;


            opBillingTable.setValueAt(new java.lang.Float(resVal), opBillingTable.getSelectedRow(), 4);

            for (int i = 0; i < opBillingTable.getRowCount(); i++) {

                if (opBillingTable.getValueAt(i, 0) != null) {//toString().compareToIgnoreCase(null) {

                    resFloat = resFloat + Double.parseDouble(opBillingTable.getValueAt(i, 4).toString());


                    // totalSum = floatTotal + resFloat;

                }
            }
            this.tableModelTableChanged();
        }        // Add your handling code here:
    }//GEN-LAST:event_opBillingTableKeyReleased
    public void tableModelTableChanged() {
        System.out.println("Calculating totals for table 11 and 2.");
        //        double resFloat = 0.00;
        double resFloat = 0.00;


        for (int i = 0; i < opBillingTable.getRowCount(); i++) {

            if (opBillingTable.getValueAt(i, 4) != null) {

                resFloat = resFloat + Double.parseDouble(opBillingTable.getValueAt(i, 4).toString());

                opBalanceTxt.setText(java.lang.String.valueOf(resFloat));

            } else {
                resFloat = resFloat + Double.parseDouble(opBillingTable.getValueAt(i, 4).toString());

                opBalanceTxt.setText(java.lang.String.valueOf(resFloat));

            }
        }
        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }

    public void tableModelTableChanged(javax.swing.event.TableModelEvent evt) {

        //        double resFloat = 0.00;
        double resFloat = 0.00;

        for (int i = 0; i < opBillingTable.getRowCount(); i++) {

            if (opBillingTable.getValueAt(i, 4) != null) {

                //   if (jTable11.getSelectedColumn() == 1) {

                resFloat = resFloat + Double.parseDouble(opBillingTable.getValueAt(i, 4).toString());

                //   }

                opBalanceTxt.setText(java.lang.String.valueOf(resFloat));

            } else {
                resFloat = resFloat + Double.parseDouble(opBillingTable.getValueAt(i, 4).toString());

                //   }

                opBalanceTxt.setText(java.lang.String.valueOf(resFloat));
            }

        }

        //               jTextField31.setText(java.lang.String.valueOf(resFloat));
    }
    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        jPanel10.setVisible(false);      // Add your handling code here:
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void jPanel61MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel61MouseClicked
        jPanel10.setVisible(false); // Add your handling code here:
    }//GEN-LAST:event_jPanel61MouseClicked

    private void jComboBox11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox11ActionPerformed
        try {
            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select code from pb_activity where activity ='" + jComboBox11.getSelectedItem() + "'");
            while (rset.next()) {
                jTextField114.setText(rset.getObject(1).toString());


            }


        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            //  System.out.println("Insert not successful");
        }        // Add your handling code here:
    }//GEN-LAST:event_jComboBox11ActionPerformed

    private void jSearchTable23MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable23MouseClicked
        jTextField92.setText(jSearchTable23.getValueAt(jSearchTable23.getSelectedRow(), 0).toString());
        jTextField15.setText(jSearchTable23.getValueAt(jSearchTable23.getSelectedRow(), 1).toString());
        this.jSearchDialog23.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable23MouseClicked

    private void jButton523ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton523ActionPerformed
        this.jSearchDialog23.dispose(); // Add your handling code here:
    }//GEN-LAST:event_jButton523ActionPerformed

    private void jTextField1133CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1133CaretUpdate
        if (this.jTextField1133.getCaretPosition() < 1) {
            System.out.print("Nothing");
        } else {
            if (this.jTextField1133.getCaretPosition() < 1) {
                System.out.print("Nothing");
            } else {
                jSearchTable23.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select distinct first_name as name,staff_no from pb_doctors_list where first_name ILIKE '" + jTextField1133.getText() + "%' order by first_name"));


                jSearchScrollPane23.setViewportView(jSearchTable23);
                System.out.println("Cannot sort out");

            }
        }        // Add your handling code here:
    }//GEN-LAST:event_jTextField1133CaretUpdate

    private void jTextField1133ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1133ActionPerformed
        // Add your handling code here:
    }//GEN-LAST:event_jTextField1133ActionPerformed

    private void searchButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton3ActionPerformed
        searchButton23Clicked();     // Add your handling code here:
    }//GEN-LAST:event_searchButton3ActionPerformed
    private void searchButton23Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.jTextField92.getLocationOnScreen();

        jSearchDialog23.setSize(600, 200);

        jSearchDialog23.setLocation(point);

        jSearchDialog23.setVisible(true);
    }
    private void ipConsultantsChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipConsultantsChkbxActionPerformed
        jPanel10.setVisible(true);
        billingTablePane.setVisible(false);
        // Add your handling code here:
    }//GEN-LAST:event_ipConsultantsChkbxActionPerformed

    private void ipServiceOfferedChkbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ipServiceOfferedChkbxActionPerformed
        billingTablePane.setVisible(true);
        jPanel10.setVisible(false);
        // Add your handling code here:
    }//GEN-LAST:event_ipServiceOfferedChkbxActionPerformed

    private void ipBillingTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ipBillingTableMouseClicked
        if (ipBillingTable.getSelectedColumn() == 1) {

            this.cmboxMouseClicked();
        } // Add your handling code here:
    }//GEN-LAST:event_ipBillingTableMouseClicked

    private void jSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTableMouseClicked

        if (opBillingTable.getSelectedColumn() == 1) {
            opBillingTable.setValueAt(com.afrisoftech.lib.ServerTime.serverDate(connectDB), ipBillingTable.getSelectedRow(), 0);
            opBillingTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0), opBillingTable.getSelectedRow(), 1);
            opBillingTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1), opBillingTable.getSelectedRow(), 4);
            opBillingTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 2), opBillingTable.getSelectedRow(), 5);
            //  jTable1.setValueAt(new java.lang.Double(jSearchTable.getSelectedRow(),1), jTable1.getSelectedRow(), 4);
            jSearchDialog.dispose();
        } else {
            if (ipBillingTable.getSelectedColumn() == 1) {
                ipBillingTable.setValueAt(com.afrisoftech.lib.ServerTime.serverDate(connectDB), ipBillingTable.getSelectedRow(), 0);
                ipBillingTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 0), ipBillingTable.getSelectedRow(), 1);
                ipBillingTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 1), ipBillingTable.getSelectedRow(), 4);
                ipBillingTable.setValueAt(jSearchTable.getValueAt(jSearchTable.getSelectedRow(), 2), ipBillingTable.getSelectedRow(), 5);
                //  jTable1.setValueAt(new java.lang.Double(jSearchTable.getSelectedRow(),1), jTable1.getSelectedRow(), 4);
                jSearchDialog.dispose();
            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTableMouseClicked

    private void jTextField112CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField112CaretUpdate
        if (jTextField112.getCaretPosition() > 2) {
            jSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select DISTINCT service_type as product,rate as selling_price,gl_code,main_service as department FROM pricelist WHERE service_type in (SELECT DISTINCT service FROM hp_patient_card WHERE invoice_no = '" + ipInvoiceNumberTxt.getText() + "') AND main_service in (SELECT DISTINCT main_service FROM hp_patient_card WHERE invoice_no = '" + ipInvoiceNumberTxt.getText() + "') and service_type ilike '%" + jTextField112.getText() + "%'  order by service_type"));


            jSearchScrollPane.setViewportView(jSearchTable);
            System.out.println("selecting filtered services on Inv");


        }        // Add your handling code here:
    }//GEN-LAST:event_jTextField112CaretUpdate

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        this.jSearchDialog.dispose();      // Add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void opBillingTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_opBillingTableMouseClicked

        if (opBillingTable.getSelectedColumn() == 1) {

            this.cmboxMouseClicked();
        }
        // Add your handling code here:
    }//GEN-LAST:event_opBillingTableMouseClicked
    private void cmboxMouseClicked() {
        if (opBillingTable.getSelectedColumn() == 1) {

            System.out.println("Showing dialog");
            java.awt.Point point = opBillingTable.getLocationOnScreen();
            jSearchDialog.setSize(600, 200);
            jSearchDialog.setLocation(point);
            jSearchDialog.setVisible(true);


        } else {
            if (ipBillingTable.getSelectedColumn() == 1) {

                System.out.println("Showing dialog");
                java.awt.Point point = billingTableJscrl.getLocationOnScreen();
                jSearchDialog.setSize(600, 200);
                jSearchDialog.setLocation(point);
                jSearchDialog.setVisible(true);

            }
        }
    }

    private void invoiceSearchTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_invoiceSearchTableMouseClicked
        int i = 0;
        int invno = 0;
        this.ipBalanceTxt.setText("");
        ipSchemeNameTxt.setText("");
        ipAccountNumberTxt.setText("");
        ipSchemePayerTxt.setText("");
        ipDebitTxt.setText("");
        ipBalanceTxt.setText("");
        ipPatientNameTxt.setText("");
        ipAccountNumberTxt.setText("");

        String code = null;
        //jTextField13.setText(jSearchTable22.getValueAt(jSearchTable22.getSelectedRow(), 2).toString());
        ipPatientNumberTxt.setText(invoiceSearchTable.getValueAt(invoiceSearchTable.getSelectedRow(), 1).toString());
        ipInvoiceNumberTxt.setText(invoiceSearchTable.getValueAt(invoiceSearchTable.getSelectedRow(), 0).toString());
        // jTextField61.setText(jSearchTable22.getValueAt(jSearchTable22.getSelectedRow(), 2).toString());
        //jTextField7.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 3).toString());

        invoiceSearchDialog.dispose();
        try {

            /* java.sql.Statement stmts1 = connectDB.createStatement();
             java.sql.ResultSet rsets1 = stmts1.executeQuery("select date::date from hp_patient_card where invoice_no ='"+jTextField91.getText()+"' order by date DESC LIMIT 1");
             while (rsets1.next()){
             jTextField61.setText(rsets1.getObject(1).toString());
             }*/
            java.sql.Statement stmts = connectDB.createStatement();
            java.sql.ResultSet rsets = stmts.executeQuery("select count(invoice_no) from ac_debtors where invoice_no ='" + ipInvoiceNumberTxt.getText() + "'");
            while (rsets.next()) {
                invno = rsets.getInt(1);
            }

            if (invno > 0) {
                java.sql.Statement stmt = connectDB.createStatement();
                java.sql.ResultSet rset = stmt.executeQuery("select payee,account_no,dealer,debit,balance,item from ac_debtors where invoice_no ='" + ipInvoiceNumberTxt.getText() + "'");
                while (rset.next()) {
                    // jComboBox6.setSelectedItem(rset.getObject(1).toString());
                    ipSchemeNameTxt.setText(rset.getObject(1).toString());
                    ipAccountNumberTxt.setText(rset.getObject(2).toString());
                    ipSchemePayerTxt.setText(rset.getObject(3).toString());
                    ipDebitTxt.setText(rset.getObject(4).toString());
                    ipBalanceTxt.setText(rset.getObject(5).toString());
                    ipPatientNameTxt.setText(rset.getObject(6).toString());

                }
            } else {
                java.sql.Statement stmt = connectDB.createStatement();
                java.sql.ResultSet rset = stmt.executeQuery("select patient_name from hp_admission where patient_no ='" + ipPatientNumberTxt.getText() + "'");
                while (rset.next()) {

                    ipSchemeNameTxt.setText("");
                    ipAccountNumberTxt.setText("");
                    ipSchemePayerTxt.setText("");
                    ipDebitTxt.setText("");
                    ipBalanceTxt.setText("");
                    ipPatientNameTxt.setText(rset.getObject(1).toString());

                }
            }
        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Insert not successful");
        }
        // this.populateTable11(this.jTextField91.getText());


        invoiceSearchDialog.dispose();         // Add your handling code here:
    }//GEN-LAST:event_invoiceSearchTableMouseClicked
    private void populateTable11(java.lang.String patient_no1) {
        for (int k = 0; k < ipBillingTable.getRowCount(); k++) {
            for (int r = 0; r < ipBillingTable.getColumnCount(); r++) {
                ipBillingTable.getModel().setValueAt(null, k, r);
            }
        }
        //       this.jComboBox1.setSelectedItem(null);
        //       this.jTextField3.setText("");
        int i = 0;
        int j = 0;
        /*try {
         java.sql.Statement stmt = connectDB.createStatement();
         
         java.sql.ResultSet rset = stmt.executeQuery("SELECT count(invoice_no) FROM hp_patient_card WHERE invoice_no = '"+patient_no1+"'");
         
         while (rset.next()) {
         j = rset.getInt(1);
         }
         /*   if (j > 0){
         java.sql.Statement stmtTable1 = connectDB.createStatement();
         java.sql.Statement stmtTable11 = connectDB.createStatement();
         
         //  java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT description, quantity,(amount/quantity)::numeric(10,2),amount,gl_code  FROM hp_pharmacy WHERE patient_no = '"+patient_no+"' AND paid = false UNION SELECT service, quantity,(amount/quantity)::numeric(10,2),amount,gl_code  FROM hp_patient_billing WHERE patient_no = '"+patient_no+"' AND paid = false");
         java.sql.ResultSet rsetTable11 = stmtTable1.executeQuery(" select date::date,initcap(service) as service,reference,dosage,debit from hp_patient_card where invoice_no = '"+patient_no1+"' AND debit >0 order by date::date");
         
         while (rsetTable11.next()) {
         
         System.out.println("Working at table row "+i);
         jTable11.setValueAt(rsetTable11.getObject(1), i, 0);
         jTable11.setValueAt(rsetTable11.getObject(2), i, 1);
         jTable11.setValueAt(rsetTable11.getObject(3), i, 2);
         jTable11.setValueAt(rsetTable11.getObject(4), i, 3);
         jTable11.setValueAt(rsetTable11.getObject(5), i, 4);
         // jTable1.setValueAt(rsetTable1.getObject(6), i, 6);
         
         i++;
         
         }
         
         java.sql.ResultSet rsetTable111 = stmtTable11.executeQuery(" select gl_code from pricelist where service_type = '"+jTable1.getModel().getValueAt(i,2).toString()+"'");
         
         while (rsetTable111.next()) {
         
         System.out.println("Working at table row "+i);
         jTable11.setValueAt(rsetTable111.getObject(1), i, 5);
         
         }
         }else{
         javax.swing.JOptionPane.showMessageDialog(this,"Cannot Retrive Data ","Confirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
         
         }
         
         
         } catch(java.sql.SQLException sqlExec) {
         
         javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
         
         }*/

    }

    private void closeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeBtnActionPerformed
        invoiceSearchDialog.dispose();// Add your handling code here:
    }//GEN-LAST:event_closeBtnActionPerformed

    private void invoiceNumberSearchTxtCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_invoiceNumberSearchTxtCaretUpdate
        if (this.invoiceNumberSearchTxt.getCaretPosition() < 3) {
            System.out.print("Nothing");
        } else {
            invoiceSearchTable.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select DISTINCT invoice_no,admission_no as pat_no from ac_debtors  where invoice_no ILIKE '%" + invoiceNumberSearchTxt.getText() + "%'  group by invoice_no,admission_no order by invoice_no"));
            invoiceSearchJscrl.setViewportView(invoiceSearchTable);
            System.out.println("Cannot sort out");

        }        // Add your handling code here:
    }//GEN-LAST:event_invoiceNumberSearchTxtCaretUpdate

    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
        searchButton22Clicked();         // Add your handling code here:
    }//GEN-LAST:event_searchButton1ActionPerformed
    private void searchButton22Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.ipInvoiceNumberTxt.getLocationOnScreen();

        invoiceSearchDialog.setSize(700, 200);

        invoiceSearchDialog.setLocation(point);

        invoiceSearchDialog.setVisible(true);
    }
    private void closeFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeFormBtnActionPerformed
        setVisible(false);        // Add your handling code here:
    }//GEN-LAST:event_closeFormBtnActionPerformed

    private void saveCreditDebitNoteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCreditDebitNoteBtnActionPerformed
        java.util.Date periodFrom = null;
        java.util.Date periodTo = null;

        try {

            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open'");
            while (rsetf.next()) {
                periodFrom = rsetf.getDate(1);
                periodTo = rsetf.getDate(2);
            }

        } catch (java.sql.SQLException sq) {
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());

        }

        if (datePicker.getDate().before(periodFrom) || datePicker.getDate().after(periodTo)) {
            javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        } else {
            if (ipBillingTable.isEditing()) {
                ipBillingTable.getCellEditor().stopCellEditing();
            }
            java.util.Calendar calendar = java.util.Calendar.getInstance();

            long dateNow = calendar.getTimeInMillis();

            java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

            System.out.println(datenowSql1.toString());

            java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

            System.out.println(datenowSql.toString());


            try {
                String receiptNo = null;
                String actCode = null;
                String glCode = null;
                String bankAcc = null;
                String glCode1 = null;
                String bankAcc1 = null;
                String crNote = null;
                String payMode = null;
                String patCat = null;
                String patientAcc = null;
                String cardNo = null;
                String scheme = null;
                String cardName = null;
                String isurer = null;
                String expDate = null;
                String staffNo = null;
                String actNames = null;
                String user = null;
                String actNames1 = null;
                String actCode1 = null;
                String invoiceNo = null;
                String docacc = null;
                String docnames = null;
                double balance = 0.00;
                String InvDate = null;
                String transNo = null;
                invoiceNo = this.ipInvoiceNumberTxt.getText();



                try {
                    connectDB.setAutoCommit(false);
                    java.sql.Statement stm1 = connectDB.createStatement();

                    //Get the credit note indentifier
                    java.sql.Statement ps221 = connectDB.createStatement();
                    java.sql.ResultSet rs221 = ps221.executeQuery("select nextval('transaction_no_seq'),current_user,'CI'||(nextval('schemecredit_no_seq'))");
                    while (rs221.next()) {
                        crNote = rs221.getObject(1).toString();
                        user = rs221.getObject(2).toString();
                        crNote = rs221.getObject(3).toString();
                    }
                    //Get the account to affect on ledger with Credit or Debit notes
                    java.sql.Statement pss12 = connectDB.createStatement();
                    java.sql.ResultSet rsts11 = pss12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                    while (rsts11.next()) {
                        actCode = rsts11.getObject(1).toString();
                        actNames = rsts11.getObject(2).toString();
                    }

                    java.sql.Statement pss12q = connectDB.createStatement();
                    java.sql.ResultSet rsts11q = pss12q.executeQuery("select date from ac_debtors where invoice_no  = '" + invoiceNo + "'");
                    while (rsts11q.next()) {
                        InvDate = rsts11q.getObject(1).toString();

                    }

                    java.sql.Statement pss12x = connectDB.createStatement();
                    java.sql.ResultSet rsts11x = pss12x.executeQuery("select code,activity from pb_activity where activity_category ='CA'");
                    while (rsts11x.next()) {
                        docacc = rsts11x.getObject(1).toString();
                        docnames = rsts11x.getObject(2).toString();
                    }
                    java.sql.Statement pss11 = connectDB.createStatement();
                    java.sql.ResultSet rsts1 = pss11.executeQuery("select code,activity from pb_activity where activity_category ='DA'");
                    while (rsts1.next()) {
                        actCode1 = rsts1.getObject(1).toString();
                        actNames1 = rsts1.getObject(2).toString();

                    }


                    if (ipDRRdbtn.isSelected() && ipServiceOfferedChkbx.isSelected()) {
//                        for (int i = 0; i < ipBillingTable.getRowCount(); i++){
//                            
//                            
//                            if (ipBillingTable.getModel().getValueAt(i,0) != null){
//                                
//                                balance = Double.parseDouble(ipBalanceTxt.getText().toString());
//                                
//                                java.sql.Statement pssq = connectDB.createStatement();
//                                java.sql.ResultSet rse121 = pssq.executeQuery("select main_service,gl_account from pb_operating_parameters where service_type ILIKE '"+ipBillingTable.getModel().getValueAt(i,1).toString()+"%' union select department,gl_code from st_stock_prices where product ILIKE '"+ipBillingTable.getModel().getValueAt(i,1).toString()+"%'");
//                                while (rse121.next()){
//                                    glCode = dbObject.getDBObject(rse121.getObject(1), "-");
//                                    glCode1 = dbObject.getDBObject(rse121.getObject(2), "-");
//                                }
//                                java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
//                                pstmt.setString(1,ipPatientNumberTxt.getText());
//                                pstmt.setObject(2,ipBillingTable.getValueAt(i,1).toString());
//                                pstmt.setString(3,"");
//                                pstmt.setString(4,opSchemePayerTxt.getText());
//                                pstmt.setString(5,crNote);
//                                pstmt.setString(7,ipSchemeNameTxt.getText());
//                                pstmt.setString(6,"");
//                                pstmt.setString(8,"");
//                                pstmt.setString(9,ipSchemePayerTxt.getText());
//                                pstmt.setDate(10,null);
//                                pstmt.setString(11,"");
//                                pstmt.setDouble(12,java.lang.Double.valueOf(ipBillingTable.getValueAt(i,4).toString()));
//                                pstmt.setDouble(13,0.00);
//                                pstmt.setDate(14,com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()));
//                                pstmt.setObject(15,actCode);
//                                pstmt.setString(16,glCode);
//                                pstmt.setDouble(17,java.lang.Double.valueOf(ipBillingTable.getValueAt(i,3).toString()));
//                                pstmt.setObject(18,ipSchemeMemberNumberTxt.getText());
//                                pstmt.setBoolean(19,true);
//                                pstmt.setString(20,"Receipt");
//                                pstmt.setBoolean(21,true);
//                                pstmt.setString(22,actNames);
//                                pstmt.setString(23,ipInvoiceNumberTxt.getText());
//                                pstmt.setString(24,user);
//                                pstmt.setString(25,"");
//                                pstmt.setString(26,"IP");
//                                pstmt.executeUpdate();
//                                
//                                java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
//                                pstmt2.setObject(1,ipBillingTable.getValueAt(i,5).toString());
//                                pstmt2.setObject(2,glCode);
//                                pstmt2.setString(3,ipPatientNumberTxt.getText());
//                                pstmt2.setString(4,ipPatientNameTxt.getText());
//                                pstmt2.setString(5,ipCRDRReasonTxt.getText());
//                                pstmt2.setString(6,"");
//                                pstmt2.setString(7,"");
//                                pstmt2.setString(8,"IP");
//                                pstmt2.setString(9,"");
//                                pstmt2.setString(10,ipPaymentModeCmbx.getSelectedItem().toString());
//                                pstmt2.setString(11,"");
//                                pstmt2.setString(12,"");
//                                pstmt2.setString(13,"");
//                                pstmt2.setString(14,ipBillingTable.getValueAt(i,1).toString());
//                                pstmt2.setString(15,"Debit Note");
//                                pstmt2.setDouble(16,0.00);
//                                pstmt2.setDouble(17,java.lang.Double.valueOf(ipBillingTable.getValueAt(i,4).toString()));
//                                pstmt2.setDate(18,com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker11.getDate()));
//                                pstmt2.setString(19,crNote);
//                                pstmt2.setBoolean(20,false);
//                                pstmt2.setBoolean(21,false);
//                                pstmt2.setBoolean(22,false);
//                                pstmt2.setString(23,user);
//                                pstmt2.executeUpdate();
//                            }
//                        }

                        java.sql.PreparedStatement pstmtu = connectDB.prepareStatement("insert into ac_debtors values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                        pstmtu.setString(1, actCode1);
                        pstmtu.setObject(2, ipSchemePayerTxt.getText());
                        pstmtu.setString(3, ipPatientNameTxt.getText());
                        pstmtu.setString(4, ipPatientNumberTxt.getText());
                        pstmtu.setString(5, ipSchemeNameTxt.getText());
                        pstmtu.setString(6, ipCRDRReasonTxt.getText());
                        pstmtu.setString(7, ipAccountNumberTxt.getText());
                        pstmtu.setString(8, crNote);
                        pstmtu.setString(9, crNote);
                        pstmtu.setString(10, ipInvoiceNumberTxt.getText());
                        pstmtu.setString(11, crNote);
                        pstmtu.setString(12, "Credit Note");
                        pstmtu.setDouble(13, java.lang.Double.valueOf(ipBalanceTxt.getText()));
                        pstmtu.setDouble(14, 0.00);
                        pstmtu.setDate(15, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
                        pstmtu.setObject(16, crNote);
                        pstmtu.setString(17, actNames1);
                        pstmtu.setBoolean(18, false);
                        pstmtu.setBoolean(19, true);
                        pstmtu.setString(20, user);
                        pstmtu.setString(21, "");
                        pstmtu.setDouble(24, 0.00);
                        pstmtu.setBoolean(23, false);
                        pstmtu.setDouble(22, java.lang.Double.valueOf(ipBalanceTxt.getText()));
                        pstmtu.setString(25, "-");
                        // pstmt.setString(26,"IP");
                        pstmtu.executeUpdate();

                        java.sql.PreparedStatement pstmt21 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                        pstmt21.setObject(1, actCode);
                        pstmt21.setObject(2, actNames);
                        pstmt21.setString(3, ipPatientNumberTxt.getText());
                        pstmt21.setString(4, ipPatientNameTxt.getText());
                        pstmt21.setString(5, ipCRDRReasonTxt.getText());
                        pstmt21.setString(6, "");
                        pstmt21.setString(7, "");
                        pstmt21.setString(8, "IP");
                        pstmt21.setString(9, "");
                        pstmt21.setString(10, "");
                        pstmt21.setString(11, "");
                        pstmt21.setString(12, "");
                        pstmt21.setString(13, "");
                        pstmt21.setString(14, "Credit Note");
                        pstmt21.setString(15, "Credit Note");
                        pstmt21.setDouble(16, 0.00);
                        pstmt21.setDouble(17, java.lang.Double.valueOf(ipBalanceTxt.getText()));
                        pstmt21.setDate(18, com.afrisoftech.lib.ServerTime.getSQLDate(connectDB));
                        pstmt21.setString(19, crNote);
                        pstmt21.setBoolean(20, false);
                        pstmt21.setBoolean(21, false);
                        pstmt21.setBoolean(22, false);
                        pstmt21.setString(23, user);
                        pstmt21.executeUpdate();
                    } else {

                        if (ipCRRdbtn.isSelected() && ipServiceOfferedChkbx.isSelected()) {
                            for (int i = 0; i < ipBillingTable.getRowCount(); i++) {
                                if (ipBillingTable.getModel().getValueAt(i, 0) != null) {

                                    java.sql.Statement pssq = connectDB.createStatement();
                                    java.sql.ResultSet rse121 = pssq.executeQuery("select main_service,gl_account from pb_operating_parameters where service_type ILIKE '" + ipBillingTable.getModel().getValueAt(i, 1).toString() + "%' union select department,gl_code from st_stock_prices where product ILIKE '" + ipBillingTable.getModel().getValueAt(i, 1).toString() + "%'");
                                    while (rse121.next()) {
                                        glCode = dbObject.getDBObject(rse121.getObject(1), "-");
                                        glCode1 = dbObject.getDBObject(rse121.getObject(2), "-");
                                    }
                                    java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                    pstmt.setString(1, ipPatientNumberTxt.getText());
                                    pstmt.setObject(2, ipBillingTable.getValueAt(i, 1).toString());
                                    pstmt.setString(3, "");
                                    pstmt.setString(4, opSchemePayerTxt.getText());
                                    pstmt.setString(5, crNote);
                                    pstmt.setString(7, ipSchemeNameTxt.getText());
                                    pstmt.setString(6, "");
                                    pstmt.setString(8, "");
                                    pstmt.setString(9, ipSchemePayerTxt.getText());
                                    pstmt.setDate(10, null);
                                    pstmt.setString(11, "");
                                    pstmt.setDouble(13, java.lang.Double.valueOf(ipBillingTable.getValueAt(i, 4).toString()));
                                    pstmt.setDouble(12, 0.00);
                                    pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker.getDate()));
                                    pstmt.setObject(15, actCode);
                                    pstmt.setString(16, glCode);
                                    pstmt.setDouble(17, java.lang.Double.valueOf(ipBillingTable.getValueAt(i, 3).toString()));
                                    pstmt.setObject(18, ipSchemeMemberNumberTxt.getText());
                                    pstmt.setBoolean(19, true);
                                    pstmt.setString(20, "Receipt");
                                    pstmt.setBoolean(21, true);
                                    pstmt.setString(22, actNames);
                                    pstmt.setString(23, ipInvoiceNumberTxt.getText());
                                    pstmt.setString(24, user);
                                    pstmt.setString(25, "");
                                    pstmt.setString(26, "IP");
                                    // pstmt.executeUpdate(); // No need to affect the original invoice details

                                    java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                    pstmt2.setObject(1, ipBillingTable.getValueAt(i, 5).toString());
                                    pstmt2.setObject(2, glCode);
                                    pstmt2.setString(3, ipPatientNumberTxt.getText());
                                    pstmt2.setString(4, ipPatientNameTxt.getText());
                                    pstmt2.setString(5, ipCRDRReasonTxt.getText());
                                    pstmt2.setString(6, "");
                                    pstmt2.setString(7, "");
                                    pstmt2.setString(8, "IP");
                                    pstmt2.setString(9, "");
                                    pstmt2.setString(10, ipPaymentModeCmbx.getSelectedItem().toString());
                                    pstmt2.setString(11, "");
                                    pstmt2.setString(12, "");
                                    pstmt2.setString(13, "");
                                    pstmt2.setString(14, ipBillingTable.getValueAt(i, 1).toString());
                                    pstmt2.setString(15, "Credit Note");
                                    pstmt2.setDouble(17, 0.00);
                                    pstmt2.setDouble(16, java.lang.Double.valueOf(ipBillingTable.getValueAt(i, 4).toString()));
                                    pstmt2.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker.getDate()));
                                    pstmt2.setString(19, crNote);
                                    pstmt2.setBoolean(20, false);
                                    pstmt2.setBoolean(21, false);
                                    pstmt2.setBoolean(22, false);
                                    pstmt2.setString(23, user);
                                    // pstmt2.executeUpdate(); //No need to affect sales ledger


                                }
                            }

                            java.sql.PreparedStatement pstmtu = connectDB.prepareStatement("insert into ac_debtors values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                            pstmtu.setString(1, actCode1);
                            pstmtu.setObject(2, ipSchemePayerTxt.getText());
                            pstmtu.setString(3, ipPatientNameTxt.getText());
                            pstmtu.setString(4, ipPatientNumberTxt.getText());
                            pstmtu.setString(5, ipSchemeNameTxt.getText());
                            pstmtu.setString(6, ipCRDRReasonTxt.getText());
                            pstmtu.setString(7, ipAccountNumberTxt.getText());
                            pstmtu.setString(8, crNote);
                            pstmtu.setString(9, crNote);
                            pstmtu.setString(10, ipInvoiceNumberTxt.getText());
                            pstmtu.setString(11, crNote);
                            pstmtu.setString(12, "Credit Note");
                            pstmtu.setDouble(14, java.lang.Double.valueOf(ipBalanceTxt.getText()));
                            pstmtu.setDouble(13, 0.00);
                            pstmtu.setDate(15, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker.getDate()));
                            pstmtu.setObject(16, crNote);
                            pstmtu.setString(17, actNames1);
                            pstmtu.setBoolean(18, false);
                            pstmtu.setBoolean(19, true);
                            pstmtu.setString(20, user);
                            pstmtu.setString(21, "");
                            pstmtu.setDouble(22, 0.00);
                            pstmtu.setBoolean(23, false);
                            pstmtu.setDouble(24, java.lang.Double.valueOf(ipBalanceTxt.getText()));
                            pstmtu.setString(25, "-");
                            // pstmt.setString(26,"IP");
                            pstmtu.executeUpdate();

                            java.sql.PreparedStatement pstmt21 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                            pstmt21.setObject(1, actCode);
                            pstmt21.setObject(2, actNames);
                            pstmt21.setString(3, ipPatientNumberTxt.getText());
                            pstmt21.setString(4, ipPatientNameTxt.getText());
                            pstmt21.setString(5, ipCRDRReasonTxt.getText());
                            pstmt21.setString(6, "");
                            pstmt21.setString(7, "");
                            pstmt21.setString(8, "IP");
                            pstmt21.setString(9, "");
                            pstmt21.setString(10, "");
                            pstmt21.setString(11, "");
                            pstmt21.setString(12, "");
                            pstmt21.setString(13, "");
                            pstmt21.setString(14, "Credit Note");
                            pstmt21.setString(15, "Amend Invoice");
                            pstmt21.setDouble(17, 0.00);
                            pstmt21.setDouble(16, java.lang.Double.valueOf(ipBalanceTxt.getText()));
                            pstmt21.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker.getDate()));
                            pstmt21.setString(19, crNote);
                            pstmt21.setBoolean(20, false);
                            pstmt21.setBoolean(21, false);
                            pstmt21.setBoolean(22, false);
                            pstmt21.setString(23, user);
                            pstmt21.executeUpdate();
                        }
                    }
                    if (ipDRRdbtn.isSelected() && ipConsultantsChkbx.isSelected()) {
                        java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                        pstmt.setString(1, ipPatientNumberTxt.getText());
                        pstmt.setObject(2, jComboBox11.getSelectedItem().toString());
                        pstmt.setString(3, "");
                        pstmt.setString(4, opSchemePayerTxt.getText());
                        pstmt.setString(5, crNote);
                        pstmt.setString(7, ipSchemeNameTxt.getText());
                        pstmt.setString(6, "");
                        pstmt.setString(8, "");
                        pstmt.setString(9, ipSchemePayerTxt.getText());
                        pstmt.setDate(10, null);
                        pstmt.setString(11, "");
                        pstmt.setDouble(12, java.lang.Double.valueOf(ipBalanceTxt.getText()));
                        pstmt.setDouble(13, 0.00);
                        pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker.getDate()));
                        pstmt.setObject(15, actCode);
                        pstmt.setString(16, glCode);
                        pstmt.setDouble(17, 1);
                        pstmt.setObject(18, ipSchemeMemberNumberTxt.getText());
                        pstmt.setBoolean(19, true);
                        pstmt.setString(20, "Receipt");
                        pstmt.setBoolean(21, true);
                        pstmt.setString(22, actNames);
                        pstmt.setString(23, ipInvoiceNumberTxt.getText());
                        pstmt.setString(24, user);
                        pstmt.setString(25, "");
                        pstmt.setString(26, "IP");
                        pstmt.executeUpdate();

                        java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_doctors_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                        pstmt2.setObject(1, jTextField15.getText());
                        pstmt2.setObject(2, ipCRDRReasonTxt.getText());
                        pstmt2.setString(3, jTextField92.getText());
                        pstmt2.setString(4, crNote);
                        pstmt2.setString(5, docacc);
                        pstmt2.setString(6, "Credit Note");
                        pstmt2.setDouble(8, java.lang.Double.valueOf(ipBalanceTxt.getText()));
                        pstmt2.setDouble(7, 0.00);
                        pstmt2.setString(9, jTextField92.getText());
                        pstmt2.setString(10, ipPatientNumberTxt.getText());
                        pstmt2.setString(11, ipCRDRReasonTxt.getText());
                        pstmt2.setBoolean(12, false);
                        pstmt2.setString(13, user);
                        pstmt2.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker.getDate()));
                        pstmt2.setString(15, crNote);
                        pstmt2.setString(16, ipPatientNameTxt.getText());
                        pstmt2.setDouble(18, java.lang.Double.valueOf(ipBalanceTxt.getText()));
                        pstmt2.setDouble(17, 0.00);
                        pstmt2.setString(19, ipPaymentModeCmbx.getSelectedItem().toString());
                        pstmt2.executeUpdate();


                        java.sql.PreparedStatement pstmt21 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                        pstmt21.setObject(1, actCode);
                        pstmt21.setObject(2, actNames);
                        pstmt21.setString(3, ipPatientNumberTxt.getText());
                        pstmt21.setString(4, ipPatientNameTxt.getText());
                        pstmt21.setString(5, ipCRDRReasonTxt.getText());
                        pstmt21.setString(6, "");
                        pstmt21.setString(7, "");
                        pstmt21.setString(8, "IP");
                        pstmt21.setString(9, "");
                        pstmt21.setString(10, "");
                        pstmt21.setString(11, "");
                        pstmt21.setString(12, "");
                        pstmt21.setString(13, "");
                        pstmt21.setString(14, "Credit Note");
                        pstmt21.setString(15, "Credit Note");
                        pstmt21.setDouble(16, 0.00);
                        pstmt21.setDouble(17, java.lang.Double.valueOf(ipBalanceTxt.getText()));
                        pstmt21.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker.getDate()));
                        pstmt21.setString(19, crNote);
                        pstmt21.setBoolean(20, false);
                        pstmt21.setBoolean(21, false);
                        pstmt21.setBoolean(22, false);
                        pstmt21.setString(23, user);
                        pstmt21.executeUpdate();

                        java.sql.PreparedStatement pstmtu = connectDB.prepareStatement("insert into ac_debtors values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                        pstmtu.setString(1, actCode1);
                        pstmtu.setObject(2, ipSchemePayerTxt.getText());
                        pstmtu.setString(3, ipPatientNameTxt.getText());
                        pstmtu.setString(4, ipPatientNumberTxt.getText());
                        pstmtu.setString(5, ipSchemeNameTxt.getText());
                        pstmtu.setString(6, ipCRDRReasonTxt.getText());
                        pstmtu.setString(7, ipAccountNumberTxt.getText());
                        pstmtu.setString(8, crNote);
                        pstmtu.setString(9, crNote);
                        pstmtu.setString(10, ipInvoiceNumberTxt.getText());
                        pstmtu.setString(11, crNote);
                        pstmtu.setString(12, "Credit Note");
                        pstmtu.setDouble(13, java.lang.Double.valueOf(ipBalanceTxt.getText()));
                        pstmtu.setDouble(14, 0.00);
                        pstmtu.setDate(15, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker.getDate()));
                        pstmtu.setObject(16, crNote);
                        pstmtu.setString(17, actNames1);
                        pstmtu.setBoolean(18, false);
                        pstmtu.setBoolean(19, true);
                        pstmtu.setString(20, user);
                        pstmtu.setString(21, "");
                        pstmtu.setDouble(24, 0.00);
                        pstmtu.setBoolean(23, false);
                        pstmtu.setDouble(22, java.lang.Double.valueOf(ipBalanceTxt.getText()));
                        pstmtu.setString(25, "-");
                        pstmtu.executeUpdate();

                    } else {

                        if (ipCRRdbtn.isSelected() && ipConsultantsChkbx.isSelected()) {
                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                            pstmt.setString(1, ipPatientNumberTxt.getText());
                            pstmt.setObject(2, jComboBox11.getSelectedItem().toString());
                            pstmt.setString(3, "");
                            pstmt.setString(4, opSchemePayerTxt.getText());
                            pstmt.setString(5, crNote);
                            pstmt.setString(7, ipSchemeNameTxt.getText());
                            pstmt.setString(6, "");
                            pstmt.setString(8, "");
                            pstmt.setString(9, ipSchemePayerTxt.getText());
                            pstmt.setDate(10, null);
                            pstmt.setString(11, "");
                            pstmt.setDouble(13, java.lang.Double.valueOf(ipBalanceTxt.getText()));
                            pstmt.setDouble(12, 0.00);
                            pstmt.setObject(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker.getDate()));
                            pstmt.setObject(15, actCode);
                            pstmt.setString(16, glCode);
                            pstmt.setDouble(17, 1);
                            pstmt.setObject(18, ipSchemeMemberNumberTxt.getText());
                            pstmt.setBoolean(19, true);
                            pstmt.setString(20, "Receipt");
                            pstmt.setBoolean(21, true);
                            pstmt.setString(22, actNames);
                            pstmt.setString(23, ipInvoiceNumberTxt.getText());
                            pstmt.setString(24, user);
                            pstmt.setString(25, "");
                            pstmt.setString(26, "IP");
                            pstmt.executeUpdate();

                            java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_doctors_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                            pstmt2.setObject(1, jTextField15.getText());
                            pstmt2.setObject(2, ipCRDRReasonTxt.getText());
                            pstmt2.setString(3, jTextField92.getText());
                            pstmt2.setString(4, crNote);
                            pstmt2.setString(5, docacc);
                            pstmt2.setString(6, "Credit Note");
                            pstmt2.setDouble(7, java.lang.Double.valueOf(ipBalanceTxt.getText()));
                            pstmt2.setDouble(8, 0.00);
                            pstmt2.setString(9, jTextField92.getText());
                            pstmt2.setString(10, ipPatientNumberTxt.getText());
                            pstmt2.setString(11, ipCRDRReasonTxt.getText());
                            pstmt2.setBoolean(12, false);
                            pstmt2.setString(13, user);
                            pstmt2.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker.getDate()));
                            pstmt2.setString(15, crNote);
                            pstmt2.setString(16, ipPatientNameTxt.getText());
                            pstmt2.setDouble(17, java.lang.Double.valueOf(ipBalanceTxt.getText()));
                            pstmt2.setDouble(18, 0.00);
                            pstmt2.setString(19, ipPaymentModeCmbx.getSelectedItem().toString());
                            pstmt2.executeUpdate();

                            java.sql.PreparedStatement pstmtu = connectDB.prepareStatement("insert into ac_debtors values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                            pstmtu.setString(1, actCode1);
                            pstmtu.setObject(2, ipSchemePayerTxt.getText());
                            pstmtu.setString(3, ipPatientNameTxt.getText());
                            pstmtu.setString(4, ipPatientNumberTxt.getText());
                            pstmtu.setString(5, ipSchemeNameTxt.getText());
                            pstmtu.setString(6, ipCRDRReasonTxt.getText());
                            pstmtu.setString(7, ipAccountNumberTxt.getText());
                            pstmtu.setString(8, crNote);
                            pstmtu.setString(9, crNote);
                            pstmtu.setString(10, ipInvoiceNumberTxt.getText());
                            pstmtu.setString(11, crNote);
                            pstmtu.setString(12, "Credit Note");
                            pstmtu.setDouble(14, java.lang.Double.valueOf(ipBalanceTxt.getText()));
                            pstmtu.setDouble(13, 0.00);
                            pstmtu.setDate(15, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker.getDate()));
                            pstmtu.setObject(16, crNote);
                            pstmtu.setString(17, actNames1);
                            pstmtu.setBoolean(18, false);
                            pstmtu.setBoolean(19, true);
                            pstmtu.setString(20, user);
                            pstmtu.setString(21, "");
                            pstmtu.setDouble(22, 0.00);
                            pstmtu.setBoolean(23, false);
                            pstmtu.setDouble(24, java.lang.Double.valueOf(ipBalanceTxt.getText()));
                            pstmtu.setString(25, "-");
                            pstmtu.executeUpdate();

                            java.sql.PreparedStatement pstmt21 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                            pstmt21.setObject(1, actCode);
                            pstmt21.setObject(2, actNames);
                            pstmt21.setString(3, ipPatientNumberTxt.getText());
                            pstmt21.setString(4, ipPatientNameTxt.getText());
                            pstmt21.setString(5, ipCRDRReasonTxt.getText());
                            pstmt21.setString(6, "");
                            pstmt21.setString(7, "");
                            pstmt21.setString(8, "IP");
                            pstmt21.setString(9, "");
                            pstmt21.setString(10, "");
                            pstmt21.setString(11, "");
                            pstmt21.setString(12, "");
                            pstmt21.setString(13, "");
                            pstmt21.setString(14, "Credit Note");
                            pstmt21.setString(15, "Credit Note");
                            pstmt21.setDouble(17, 0.00);
                            pstmt21.setDouble(16, java.lang.Double.valueOf(ipBalanceTxt.getText()));
                            pstmt21.setDate(18, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker.getDate()));
                            pstmt21.setString(19, crNote);
                            pstmt21.setBoolean(20, false);
                            pstmt21.setBoolean(21, false);
                            pstmt21.setBoolean(22, false);
                            pstmt21.setString(23, user);
                            pstmt21.executeUpdate();
                        }

                    }

                    connectDB.commit();
                    connectDB.setAutoCommit(true);
                    invoiceNo = ipInvoiceNumberTxt.getText();

                    CreditFinalInPatientlnvPdf policy = new CreditFinalInPatientlnvPdf();
                    policy.CreditFinalInPatientInvPdf(connectDB, crNote);

                    javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully ", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    opSchemeMemberNameTxt.setText("");
                    ipDebitTxt.setText("");
                    ipBalanceTxt.setText("");
                    for (int k = 0; k < ipBillingTable.getRowCount(); k++) {
                        for (int r = 0; r < ipBillingTable.getColumnCount(); r++) {
                            ipBillingTable.getModel().setValueAt(null, k, r);
                        }
                    }
                    ipBalanceTxt.setText("");
                } catch (java.sql.SQLException sq) {

                    try {
                        connectDB.rollback();
                    } catch (java.sql.SQLException sql) {
                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                    System.out.println(sq.getMessage());
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                }

            } catch (java.lang.Exception ex) {
                System.out.println(ex.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

            }
        }
        // Add your handling code here:
    }//GEN-LAST:event_saveCreditDebitNoteBtnActionPerformed

    private void dispose11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dispose11ActionPerformed
        jSearchDialog11.dispose(); // Add your handling code here:
    }//GEN-LAST:event_dispose11ActionPerformed

    private void jSearchTable11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable11MouseClicked
        opSchemeNameTxt.setText(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 1).toString());
        opSchemePayerTxt.setText(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 2).toString());
        opSchemeAcctNumberTxt.setText(jSearchTable11.getValueAt(jSearchTable11.getSelectedRow(), 0).toString());

        jSearchDialog11.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable11MouseClicked

    private void searchButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton2ActionPerformed
        searchButton11aClicked();         // Add your handling code here:
    }//GEN-LAST:event_searchButton2ActionPerformed

    private void jTextField1111CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1111CaretUpdate
        if (jTextField1111.getCaretPosition() < 3) {

            System.out.println("Nothing");
        } else {

            jSearchTable11.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "SELECT account_no,scheme_name,payer_name from ac_schemes where scheme_name ILIKE '" + jTextField1111.getText() + "%' order by scheme_name"));

            jSearchTable11.setShowHorizontalLines(false);
            jSearchScrollPane11.setViewportView(jSearchTable11);

        }         // Add your handling code here:
    }//GEN-LAST:event_jTextField1111CaretUpdate
    private void searchButton11aClicked() {

        System.out.println("Showing dialog");

        jSearchDialog11.dispose();
        java.awt.Point point = this.opSchemeNameTxt.getLocationOnScreen();

        jSearchDialog11.setSize(400, 200);

        jSearchDialog11.setLocation(point);
        jSearchDialog11.setVisible(true);
    }

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        int rows2Delete = opBillingTable.getSelectedRowCount();

        int[] selectedRows = opBillingTable.getSelectedRows();

        if (rows2Delete < 1) {

            java.awt.Toolkit.getDefaultToolkit().beep();

            javax.swing.JOptionPane.showMessageDialog(this, "There are no selected rows to delete!");

        } else {

            if (rows2Delete > 1) {

                for (int i = 0; i < selectedRows.length; i++) {



                    javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) opBillingTable.getModel();

                    defTableModel.removeRow(selectedRows[i]);

                }



            } else {

                javax.swing.table.DefaultTableModel defTableModel = (javax.swing.table.DefaultTableModel) opBillingTable.getModel();

                defTableModel.removeRow(opBillingTable.getSelectedRow());
            }
        }
        this.tableModelTableChanged();
        // Add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton521ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton521ActionPerformed
        jSearchDialog21.dispose();      // Add your handling code here:
    }//GEN-LAST:event_jButton521ActionPerformed
    /*  private void populateTable2(java.lang.String patient_no) {
   
     int i = 0;
     int j = 0;
     try {
     java.sql.Statement stmt = connectDB.createStatement();
   
     java.sql.ResultSet rset = stmt.executeQuery("SELECT count(patient_no) FROM hp_patient_card WHERE patient_no = '"+patient_no+"' AND paid = false");
   
     while (rset.next()) {
     j = rset.getInt(1);
     }
     if (j > 0){
     java.sql.Statement stmtTable1 = connectDB.createStatement();
   
     java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("select date::date as date,service,dosage as quantity,debit-credit as amount FROM hp_patient_card WHERE patient_no ='"+jTextField91.getText()+"' and paid = false AND payment_mode = 'Scheme'");
   
     while (rsetTable1.next()) {
   
     System.out.println("Working at table row "+i);
     jTable11.setValueAt(rsetTable1.getObject(1), i, 0);
     jTable11.setValueAt(rsetTable1.getObject(2), i, 1);
     jTable11.setValueAt(rsetTable1.getObject(3), i, 2);
     jTable11.setValueAt(rsetTable1.getObject(4), i, 3);
     //   jTable11.setValueAt(rsetTable1.getObject(5), i, 4);
   
     i++;
   
     //                i = i + i;
     //            jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
     }
     }
   
     } catch(java.sql.SQLException sqlExec) {
   
     javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
   
     }
   
   
     }
   
     */

    private void jSearchTable21MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable21MouseClicked
        String payer = null;
        String scm = null;
        String accno = null;
        String date = null;
        String cat = null;
        String code = null;
        /*    jTextField11.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 1).toString());
         jTextField91.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 0).toString());
         //jTextField21.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 2).toString());
         //jTextField71.setText(jSearchTable21.getValueAt(jSearchTable21.getSelectedRow(), 3).toString());
     
         try {
         //
         java.sql.Statement stmt = connectDB.createStatement();
         java.sql.ResultSet rset = stmt.executeQuery("select account_no, description,payer from hp_inpatient_register where patient_no ILIKE '"+jTextField91.getText()+"%'");
         while (rset.next()){
         // jComboBox6.setSelectedItem(rset.getObject(1).toString());
         payer = dbObject.getDBObject(rset.getObject(3), "-");
         scm = dbObject.getDBObject(rset.getObject(2), "-");
         accno =dbObject.getDBObject(rset.getObject(1), "-");
         jTextField21.setText(accno);
         jTextField71.setText(scm);
         jTextField41.setText(payer);
     
     
         }
         } catch (java.sql.SQLException sqe) {
         sqe.printStackTrace();
         System.out.println("Insert not successful");
         }
     
         try{
     
         java.sql.Statement pss1 = connectDB.createStatement();
         java.sql.ResultSet rset11 = pss1.executeQuery("select account_no from ac_schemes where scheme_name = '"+jTextField71.getText()+"' and payer_name = '"+jTextField41.getText()+"'");
         while (rset11.next()){
         code = dbObject.getDBObject(rset11.getObject(1), "-");
     
     
         jTextField10.setText(code);
         // jTextField51.setText(date);
         // jTextField61.setText(cat);
         }
         } catch (java.sql.SQLException sqe) {
         sqe.printStackTrace();
         System.out.println("select not successful");
         }
     
         try{
     
         java.sql.Statement pss1 = connectDB.createStatement();
         java.sql.ResultSet rset1 = pss1.executeQuery("select account_no,expiry_date,category from hp_inpatient_register where patient_no = '"+jTextField91.getText()+"'");
         while (rset1.next()){
         cat = dbObject.getDBObject(rset1.getObject(3), "-");
         date = dbObject.getDBObject(rset1.getObject(2), null);
         accno =dbObject.getDBObject(rset1.getObject(1), "-");
     
     
         jTextField21.setText(accno);
         jTextField51.setText(date);
         jTextField61.setText(cat);
         }
     
         java.sql.Statement pss11 = connectDB.createStatement();
         java.sql.ResultSet rss11 = pss11.executeQuery("select round(sum(debit-credit),2) from hp_patient_card where patient_no = '"+jTextField91.getText()+"' AND paid = false");
         while (rss11.next()){
         // jTextField2.setText(rss1.getObject(1).toString());
         jTextField31.setText(rss11.getObject(1).toString());
         }
         } catch(java.sql.SQLException sqlex){
         javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
     
         System.out.println(sqlex.getMessage());
         }
         for (int k = 0; k < jTable11.getRowCount(); k++ ) {
         for (int r = 0; r < jTable11.getColumnCount(); r++ ) {
         jTable11.getModel().setValueAt(null,k,r);
         }
         }
         //this.populateTable2(jTextField91.getText());
         /*        try {
         crset21.setCommand("select date::date as date,service,dosage as quantity,debit as amount FROM hp_patient_card WHERE patient_no ='"+jTextField91.getText()+"' and paid = false AND payment_mode = 'Scheme'");// union select date_prescribed as date,description as service,quantity,amount,gl_code from hp_pharmacy WHERE patient_no ='"+jTextField9.getText()+"' and paid = false");
     
         crset21.setConnectionSource(pConnDB);
     
         crset21.execute();
     
         // crset2.setExecuteOnLoad(true);
         jTable11.setModel(new org.netbeans.lib.sql.models.TableModel(crset21, new org.netbeans.lib.sql.models.TableModel.Column[] {
         new org.netbeans.lib.sql.models.TableModel.Column("date", "Date", false),
         new org.netbeans.lib.sql.models.TableModel.Column("service", "Description", false),
         new org.netbeans.lib.sql.models.TableModel.Column("quantity", "Quantity", false),
         new org.netbeans.lib.sql.models.TableModel.Column("amount", "Amount KShs.", false)
         //  new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl Code", false)
     
         }));
     
         //  tableModel = jTable1.getModel();
     
         jScrollPane11.setViewportView(jTable11);
     
         } catch(java.sql.SQLException sqlex){
         javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
     
         System.out.println(sqlex.getMessage());
         }
     
         */

        //  jSearchDialog21.dispose();
        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable21MouseClicked
    private void searchButton21Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        //     java.awt.Point point = this.jTextField11.getLocationOnScreen();

        jSearchDialog21.setSize(400, 200);

        //  jSearchDialog21.setLocation(point);

        jSearchDialog21.setVisible(true);
    }
    private void jTextField1131CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField1131CaretUpdate

        jSearchTable21.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select patient_no as pat_no,second_name||' '|| first_name as name from hp_inpatient_register where patient_no ILIKE '" + jTextField1131.getText() + "%' AND pay_mode = 'Scheme' order by second_name"));

        jSearchScrollPane21.setViewportView(jSearchTable21);
        System.out.println("Cannot sort out");


        // Add your handling code here:
    }//GEN-LAST:event_jTextField1131CaretUpdate

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchButton2Clicked();        // Add your handling code here:
    }//GEN-LAST:event_searchButtonActionPerformed
    private void searchButton2Clicked() {

        System.out.println("Showing dialog");

        // java.awt.Point point = this.jComboBox1311.getLocationOnScreen();
        java.awt.Point point = this.opInvoiceNumberTxt.getLocationOnScreen();

        jSearchDialog2.setSize(700, 200);

        jSearchDialog2.setLocation(point);

        jSearchDialog2.setVisible(true);
    }
    private void jTextField113CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField113CaretUpdate
        // if(this.jCheckBox2.isSelected()){
        if (this.jTextField113.getCaretPosition() < 3) {
            System.out.print("Nothing");
        } else {
            jSearchTable2.setModel(com.afrisoftech.dbadmin.TableModel.createTableVectors(connectDB, "select invoice_no,admission_no as pat_no,item as name,date from ac_debtors  where invoice_no ILIKE '%" + jTextField113.getText() + "%' order by invoice_no"));

            jSearchScrollPane2.setViewportView(jSearchTable2);
            System.out.println("Cannot sort out");

        }

        // Add your handling code here:
    }//GEN-LAST:event_jTextField113CaretUpdate

    private void jSearchTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSearchTable2MouseClicked
        int i = 0;

        this.opBalanceTxt.setText("");

        opSchemeAcctNumberTxt.setText("");

        String code = null;
        opPatientNameTxt.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 2).toString());
        opPatientNumberTxt.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 1).toString());
        opInvoiceNumberTxt.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 0).toString());
        // jTextField6.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 3).toString());
        //jTextField7.setText(jSearchTable2.getValueAt(jSearchTable2.getSelectedRow(), 3).toString());

        jSearchDialog2.dispose();
        try {

            java.sql.Statement stmt = connectDB.createStatement();
            java.sql.ResultSet rset = stmt.executeQuery("select payee,account_no,dealer,debit,balance from ac_debtors where invoice_no ='" + opInvoiceNumberTxt.getText() + "'");
            while (rset.next()) {
                // jComboBox6.setSelectedItem(rset.getObject(1).toString());
                opSchemeNameTxt.setText(rset.getObject(1).toString());
                opSchemeAcctNumberTxt.setText(rset.getObject(2).toString());
                opSchemePayerTxt.setText(rset.getObject(3).toString());
                opDebitTxt.setText(rset.getObject(4).toString());
                opBalanceTxt.setText(rset.getObject(5).toString());

            }

            java.sql.Statement stmt2 = connectDB.createStatement();
            java.sql.ResultSet rset2 = stmt2.executeQuery("select account_no,member_name from hp_patient_register where patient_no ='" + opPatientNumberTxt.getText() + "'");
            while (rset2.next()) {
                opSchemeMemberNumberTxt.setText(rset2.getObject(1).toString());
                opSchemeMemberNameTxt.setText(rset2.getObject(2).toString());

            }

        } catch (java.sql.SQLException sqe) {
            sqe.printStackTrace();
            System.out.println("Insert not successful");
        }
        // this.populateTable1(this.jTextField9.getText());
     /*   try{
      
         java.sql.Statement pss1 = connectDB.createStatement();
         java.sql.ResultSet rset11 = pss1.executeQuery("select account_no from ac_schemes where scheme_name = '"+jTextField7.getText()+"' and payer_name = '"+jTextField4.getText()+"'");
         while (rset11.next()){
         code = dbObject.getDBObject(rset11.getObject(1), "-");
      
      
         jTextField8.setText(code);
         // jTextField51.setText(date);
         // jTextField61.setText(cat);
         }
         } catch (java.sql.SQLException sqe) {
         sqe.printStackTrace();
         System.out.println("select not successful");
         }
      
         try{
         // java.sql.Statement pss = connectDB.createStatement();
         //  java.sql.ResultSet rss = pss.executeQuery("select first_name||' '||second_name||' '||last_name from hp_patient_register where patient_no ='"+jTextField9.getText()+"'");
         // while (rss.next()){
         //     jTextField1.setText(rss.getObject(1).toString());
         //}
      
         java.sql.Statement pss1 = connectDB.createStatement();
         java.sql.ResultSet rss1 = pss1.executeQuery("select account_no,expiry_date,category from hp_patient_register where patient_no = '"+jTextField9.getText()+"'");
         while (rss1.next()){
         jTextField2.setText(rss1.getObject(1).toString());
         jTextField5.setText(rss1.getObject(2).toString());
         jTextField6.setText(rss1.getObject(3).toString());
         }
      
         java.sql.Statement pss11 = connectDB.createStatement();
         java.sql.ResultSet rss11 = pss11.executeQuery("select sum(amount) from patient_bill where patient_no = '"+jTextField9.getText()+"'");
         while (rss11.next()){
         // jTextField2.setText(rss1.getObject(1).toString());
         jTextField3.setText(rss11.getObject(1).toString());
         }
         } catch(java.sql.SQLException sqlex){
         javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
      
         System.out.println(sqlex.getMessage());
         }
         /*
         try {
         crset2.setCommand("select date::date,service,dosage,debit FROM hp_patient_card WHERE patient_no ='"+jComboBox2.getSelectedItem()+"' and paid = false AND payment_mode = 'Scheme' AND scheme ='"+jComboBox1.getSelectedItem()+"' and debit >0");
      
         crset2.setConnectionSource(pConnDB);
      
         crset2.execute();
      
         // crset2.setExecuteOnLoad(true);
         jTable1.setModel(new org.netbeans.lib.sql.models.TableModel(crset2, new org.netbeans.lib.sql.models.TableModel.Column[] {
         new org.netbeans.lib.sql.models.TableModel.Column("date", "Date", false),
         new org.netbeans.lib.sql.models.TableModel.Column("service", "Description", false),
         new org.netbeans.lib.sql.models.TableModel.Column("dosage", "Quantity", false),
         new org.netbeans.lib.sql.models.TableModel.Column("debit", "Amount KShs.", false)
      
         }));
      
         //  tableModel = jTable1.getModel();
      
         jScrollPane1.setViewportView(jTable1);
      
         } catch(java.sql.SQLException sqlex){
         javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
      
         System.out.println(sqlex.getMessage());
         }
         */

        //   this.populateTable1(jTextField9.getText());
/*        try {
         crset2.setCommand("select trans_date::date as date,service,quantity,amount,gl_code FROM hp_patient_billing WHERE patient_no ='"+jTextField9.getText()+"' and paid = false AND payment_mode = 'Scheme' union select date_prescribed as date,description as service,quantity,amount,gl_code from hp_pharmacy WHERE patient_no ='"+jTextField9.getText()+"' and paid = false");
 
         crset2.setConnectionSource(pConnDB);
 
         crset2.execute();
 
         // crset2.setExecuteOnLoad(true);
         jTable1.setModel(new org.netbeans.lib.sql.models.TableModel(crset2, new org.netbeans.lib.sql.models.TableModel.Column[] {
         new org.netbeans.lib.sql.models.TableModel.Column("date", "Date", false),
         new org.netbeans.lib.sql.models.TableModel.Column("service", "Description", false),
         new org.netbeans.lib.sql.models.TableModel.Column("quantity", "Quantity", false),
         new org.netbeans.lib.sql.models.TableModel.Column("amount", "Amount KShs.", false),
         new org.netbeans.lib.sql.models.TableModel.Column("gl_code", "Gl Code", false)
 
         }));
 
         //  tableModel = jTable1.getModel();
 
         jScrollPane1.setViewportView(jTable1);
 
         } catch(java.sql.SQLException sqlex){
         javax.swing.JOptionPane.showMessageDialog(this,sqlex.getMessage(),"Error Message!",javax.swing.JOptionPane.ERROR_MESSAGE);
 
         System.out.println(sqlex.getMessage());
         }
         */

        jSearchDialog2.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jSearchTable2MouseClicked
    /*  private void populateTable1(java.lang.String patient_no) {
     for (int k = 0; k < jTable1.getRowCount(); k++ ) {
     for (int r = 0; r < jTable1.getColumnCount(); r++ ) {
     jTable1.getModel().setValueAt(null,k,r);
     }
     }
     //       this.jComboBox1.setSelectedItem(null);
     //       this.jTextField3.setText("");
     int i = 0;
     int j = 0;
     try {
     java.sql.Statement stmt = connectDB.createStatement();
   
     java.sql.ResultSet rset = stmt.executeQuery("SELECT count(invoice_no) FROM hp_patient_card WHERE invoice_no = '"+patient_no+"'");
   
     while (rset.next()) {
     j = rset.getInt(1);
     }
     if (j > 0){
     java.sql.Statement stmtTable1 = connectDB.createStatement();
     java.sql.Statement stmtTable111 = connectDB.createStatement();
   
     //  java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery("SELECT description, quantity,(amount/quantity)::numeric(10,2),amount,gl_code  FROM hp_pharmacy WHERE patient_no = '"+patient_no+"' AND paid = false UNION SELECT service, quantity,(amount/quantity)::numeric(10,2),amount,gl_code  FROM hp_patient_billing WHERE patient_no = '"+patient_no+"' AND paid = false");
     java.sql.ResultSet rsetTable1 = stmtTable1.executeQuery(" select date::date,initcap(service) as service,reference,dosage,debit from hp_patient_card where invoice_no = '"+patient_no+"' AND debit >0 order by date::date");
   
     while (rsetTable1.next()) {
   
     System.out.println("Working at table row "+i);
     jTable1.setValueAt(rsetTable1.getObject(1), i, 0);
     jTable1.setValueAt(rsetTable1.getObject(2), i, 1);
     jTable1.setValueAt(rsetTable1.getObject(3), i, 2);
     jTable1.setValueAt(rsetTable1.getObject(4), i, 3);
     jTable1.setValueAt(rsetTable1.getObject(5), i, 4);
     // jTable1.setValueAt(rsetTable1.getObject(6), i, 6);
     java.sql.ResultSet rsetTable111 = stmtTable111.executeQuery(" select gl_code from pricelist where service_type ILIKE '"+jTable1.getModel().getValueAt(i,1).toString()+"%' UNION all select gl_account from pb_operating_parameters where service_type ILIKE '"+jTable1.getModel().getValueAt(i,1).toString()+"%'");
   
     while (rsetTable111.next()) {
   
     System.out.println("Working at table row "+i);
     jTable1.setValueAt(rsetTable111.getObject(1), i, 5);
   
     }
   
     i++;
   
     }
   
   
   
     }else{
     javax.swing.JOptionPane.showMessageDialog(this,"Cannot Retrive Data ","Confirmation Message!",javax.swing.JOptionPane.INFORMATION_MESSAGE);
   
     }
   
   
     } catch(java.sql.SQLException sqlExec) {
   
     javax.swing.JOptionPane.showMessageDialog(this, sqlExec.getMessage());
   
     }
   
     }*/

    private void jButton52ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton52ActionPerformed
        jSearchDialog2.dispose();        // Add your handling code here:
    }//GEN-LAST:event_jButton52ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //       this.getContentPane().removeAll();
        //       this.initComponents();
        // Add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed
    //    private void cmbox2ActionPerformed(java.awt.event.ActionEvent evt){
       /* java.lang.Object selectedGuaran = cmbox2.getSelectedItem();
     int i = jTable1.getSelectedRow();
        
     if (selectedGuaran != null) {
        
     try {
     java.sql.Statement pstmt = connectDB.createStatement();
     java.sql.ResultSet rs = pstmt.executeQuery("select item_code,units from st_stock_item where description = '"+selectedGuaran+"'");
     while (rs.next())
     jTable1.setValueAt(rs.getObject(1),i,1);
     jTable1.setValueAt(rs.getObject(2),i,2);
     } catch(java.sql.SQLException sqlex){
     System.out.println(sqlex.getMessage());
        
     }
     */
    //}
    //   }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        setVisible(false); // Add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        java.util.Date periodFrom = null;
        java.util.Date periodTo = null;

        try {

            java.sql.Statement stmtf = connectDB.createStatement();
            java.sql.ResultSet rsetf = stmtf.executeQuery("SELECT period_from,period_to FROM period_setup WHERE period_status ilike 'Open' AND '" + datePicker2.getDate() + "' BETWEEN period_from AND period_to");
            while (rsetf.next()) {
                periodFrom = rsetf.getDate(1);
                periodTo = rsetf.getDate(2);
            }

        } catch (java.sql.SQLException sq) {
            javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
            System.out.println(sq.getMessage());

        }

        if (datePicker2.getDate().before(periodFrom) || datePicker2.getDate().after(periodTo)) {
            javax.swing.JOptionPane.showMessageDialog(this, "You cannot save before or after the accounting period set \n Contact head of accounts".toUpperCase(), "Caution Message", javax.swing.JOptionPane.INFORMATION_MESSAGE);

        } else {
            if (opBillingTable.isEditing()) {
                opBillingTable.getCellEditor().stopCellEditing();
            }
            java.util.Calendar calendar = java.util.Calendar.getInstance();

            long dateNow = calendar.getTimeInMillis();

            java.sql.Date datenowSql1 = new java.sql.Date(dateNow);

            System.out.println(datenowSql1.toString());

            java.sql.Timestamp datenowSql = new java.sql.Timestamp(dateNow);

            System.out.println(datenowSql.toString());
            try {
                String receiptNo = null;
                String actCode = null;
                String glCode = null;
                String bankAcc = null;
                String glCode1 = null;
                String bankAcc1 = null;
                String crNote = null;
                String payMode = null;
                String patCat = null;
                String patientAcc = null;
                String cardNo = null;
                String scheme = null;
                String cardName = null;
                String isurer = null;
                String expDate = null;
                String staffNo = null;
                String actNames = null;
                String user = null;
                String actNames1 = null;
                String actCode1 = null;
                String invoiceNo = null;
                String transNo = null;

                invoiceNo = this.opInvoiceNumberTxt.getText();

                try {
                    connectDB.setAutoCommit(false);


                    //  java.sql.PreparedStatement pstmt311z = connectDB.prepareStatement("delete from ac_debtors WHERE staff_no = '"+jTable1.getModel().getValueAt(i,2).toString()+"'");
                    //  pstmt311z.executeUpdate();

                    java.sql.Statement ps221 = connectDB.createStatement();
                    java.sql.ResultSet rs221 = ps221.executeQuery("select nextval('transaction_no_seq'),current_user,'CO'||(nextval('schemecredit_no_seq'))");
                    while (rs221.next()) {
                        crNote = rs221.getObject(1).toString();
                        user = rs221.getObject(2).toString();
                        crNote = rs221.getObject(3).toString();
                    }


                    java.sql.Statement pss12 = connectDB.createStatement();
                    java.sql.ResultSet rsts11 = pss12.executeQuery("select code,activity from pb_activity where activity_category ='PR'");
                    while (rsts11.next()) {
                        actCode = rsts11.getObject(1).toString();
                        actNames = rsts11.getObject(2).toString();
                    }
                    java.sql.Statement pss11 = connectDB.createStatement();
                    java.sql.ResultSet rsts1 = pss11.executeQuery("select code,activity,current_user from pb_activity where activity_category ='DA'");
                    while (rsts1.next()) {
                        actCode1 = rsts1.getObject(1).toString();
                        actNames1 = rsts1.getObject(2).toString();
                        user = rsts1.getObject(3).toString();
                    }
                    if (opServicesOfferedChkbx.isSelected()) {
                        for (int i = 0; i < opBillingTable.getRowCount(); i++) {
                            if (opBillingTable.getModel().getValueAt(i, 0) != null) {

                                java.sql.Statement pssq = connectDB.createStatement();
                                // java.sql.ResultSet rse121 = pssq.executeQuery("select main_service,gl_account from pb_operating_parameters where service_type ILIKE '"+jTable1.getModel().getValueAt(i,1).toString()+"%' union select department,gl_code from st_stock_prices where product ILIKE '"+jTable1.getModel().getValueAt(i,1).toString()+"%'");
                                java.sql.ResultSet rse121 = pssq.executeQuery("select activity from pb_activity where code ILIKE '" + opBillingTable.getModel().getValueAt(i, 5).toString() + "%'");

                                while (rse121.next()) {

                                    glCode1 = dbObject.getDBObject(rse121.getObject(1), "-");
                                }

                                /* java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                                 pstmt.setString(1,jTextField10.getText());
                                 pstmt.setObject(2,jTable1.getModel().getValueAt(i,1).toString());
                                 pstmt.setString(3,"");
                                 pstmt.setString(4,"Scheme");
                                 pstmt.setString(5,crNote);
                                 pstmt.setString(7,jTextField7.getText());
                                 pstmt.setString(6,"");
                                 pstmt.setString(8,"");
                                 pstmt.setString(9,jTextField4.getText());
                                 pstmt.setDate(10,null);
                                 pstmt.setString(11,"");
                                 pstmt.setDouble(13,java.lang.Double.valueOf(jTable1.getModel().getValueAt(i,4).toString()));
                                 pstmt.setDouble(12,0.00);
                                 pstmt.setDate(14,com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                                 pstmt.setObject(15,actCode);
                                 pstmt.setString(16,glCode1);
                                 pstmt.setDouble(17,java.lang.Double.valueOf(jTable1.getValueAt(i,3).toString()));
                                 pstmt.setObject(18,jTextField12.getText());
                                 pstmt.setBoolean(19,true);
                                 pstmt.setString(20,"Receipts");
                                 pstmt.setBoolean(21,true);
                                 pstmt.setString(22,actNames);
                                 pstmt.setString(23,jTextField9.getText());
                                 pstmt.setString(24,user);
                                 pstmt.setString(25,"");
                                 pstmt.setString(26,"OP");
                                 pstmt.executeUpdate();*/



                                java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                pstmt1.setString(1, opPatientNumberTxt.getText());
                                pstmt1.setObject(2, opBillingTable.getValueAt(i, 1).toString());
                                pstmt1.setString(3, "");
                                pstmt1.setString(4, "Scheme");
                                pstmt1.setString(5, crNote);
                                pstmt1.setString(7, opSchemeNameTxt.getText());
                                pstmt1.setString(6, "");
                                pstmt1.setString(8, "");
                                pstmt1.setString(9, opSchemePayerTxt.getText());
                                pstmt1.setDate(10, null);
                                pstmt1.setString(11, "");
                                pstmt1.setDouble(12, java.lang.Double.valueOf(opBillingTable.getValueAt(i, 4).toString()));
                                pstmt1.setDouble(13, 0.00);
                                pstmt1.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                                pstmt1.setObject(15, actCode);
                                pstmt1.setString(16, glCode1);
                                pstmt1.setDouble(17, java.lang.Double.valueOf(opBillingTable.getValueAt(i, 3).toString()));
                                pstmt1.setObject(18, opSchemeMemberNumberTxt.getText());
                                pstmt1.setBoolean(19, true);
                                pstmt1.setString(20, "Receipts");
                                pstmt1.setBoolean(21, true);
                                pstmt1.setString(22, actNames);
                                pstmt1.setString(23, opInvoiceNumberTxt.getText());
                                pstmt1.setString(24, user);
                                pstmt1.executeUpdate();

                                /*
                                 java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                                 pstmt2.setObject(1,jTable1.getValueAt(i,5).toString());
                                 pstmt2.setObject(2,glCode1);
                                 pstmt2.setString(3,jTextField10.getText());
                                 pstmt2.setString(4,jTextField1.getText());
                                 pstmt2.setString(5,"");
                                 pstmt2.setString(6,cardNo);
                                 pstmt2.setString(7,cardName);
                                 pstmt2.setString(8,"OP");
                                 pstmt2.setString(9,isurer);
                                 pstmt2.setString(10,"Scheme");
                                 pstmt2.setString(11,"");
                                 pstmt2.setString(12,"");
                                 pstmt2.setString(13,"");
                                 pstmt2.setString(14,jTable1.getValueAt(i,1).toString());
                                 pstmt2.setString(15,"Revenue");
                                 pstmt2.setDouble(17,0.00);
                                 pstmt2.setDouble(16,java.lang.Double.valueOf(jTable1.getValueAt(i,4).toString()));
                                 pstmt2.setDate(18,com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                                 pstmt2.setString(19,crNote);
                                 pstmt2.setBoolean(20,false);
                                 pstmt2.setBoolean(21,false);
                                 pstmt2.setBoolean(22,false);
                                 pstmt2.setString(23,user);
                                 pstmt2.executeUpdate();*/



                            }
                        }

                        java.sql.PreparedStatement pstmtu = connectDB.prepareStatement("insert into ac_debtors values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                        pstmtu.setString(1, actCode1);
                        pstmtu.setObject(2, opSchemePayerTxt.getText());
                        pstmtu.setString(3, opPatientNameTxt.getText());
                        pstmtu.setString(4, opPatientNumberTxt.getText());
                        pstmtu.setString(5, opSchemeNameTxt.getText());
                        pstmtu.setString(6, opCRDRReasonTxt.getText());
                        pstmtu.setString(7, opSchemeAcctNumberTxt.getText());
                        pstmtu.setString(8, crNote);
                        pstmtu.setString(9, crNote);
                        pstmtu.setString(10, opInvoiceNumberTxt.getText());
                        pstmtu.setString(11, crNote);
                        pstmtu.setString(12, "Credit Note");
                        pstmtu.setDouble(14, java.lang.Double.valueOf(opBalanceTxt.getText()));
                        pstmtu.setDouble(13, 0.00);
                        pstmtu.setDate(15, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                        pstmtu.setObject(16, crNote);
                        pstmtu.setString(17, actNames1);
                        pstmtu.setBoolean(18, false);
                        pstmtu.setBoolean(19, true);
                        pstmtu.setString(20, user);
                        pstmtu.setString(21, "");
                        pstmtu.setDouble(22, 0.00);
                        pstmtu.setBoolean(23, false);
                        pstmtu.setDouble(24, java.lang.Double.valueOf(opBalanceTxt.getText()));
                        pstmtu.setString(25, "-");
                        pstmtu.executeUpdate();
                    } else {
                        if (opConsultantsCRDRChkbx.isSelected()) {
                            String docacc = null;
                            String docnames = null;

                            java.sql.Statement pss12x = connectDB.createStatement();
                            java.sql.ResultSet rsts11x = pss12x.executeQuery("select code,activity from pb_activity where activity_category ='CA'");
                            while (rsts11x.next()) {
                                docacc = rsts11x.getObject(1).toString();
                                docnames = rsts11x.getObject(2).toString();
                            }

                            java.sql.PreparedStatement pstmt2 = connectDB.prepareStatement("insert into ac_doctors_ledger values(?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
                            pstmt2.setObject(1, jTextField17.getText());
                            pstmt2.setObject(2, opCRDRReasonTxt.getText());
                            pstmt2.setString(3, jTextField93.getText());
                            pstmt2.setString(4, crNote);
                            pstmt2.setString(5, docacc);
                            pstmt2.setString(6, "Credit Note");
                            pstmt2.setDouble(8, java.lang.Double.valueOf(opBalanceTxt.getText()));
                            pstmt2.setDouble(7, 0.00);
                            pstmt2.setString(9, opInvoiceNumberTxt.getText());
                            pstmt2.setString(10, ipPatientNumberTxt.getText());
                            pstmt2.setString(11, opCRDRReasonTxt.getText());
                            pstmt2.setBoolean(12, false);
                            pstmt2.setString(13, user);
                            pstmt2.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                            pstmt2.setString(15, crNote);
                            pstmt2.setString(16, opPatientNameTxt.getText());
                            pstmt2.setDouble(18, java.lang.Double.valueOf(opBalanceTxt.getText()));
                            pstmt2.setDouble(17, 0.00);
                            pstmt2.setString(19, ipPaymentModeCmbx.getSelectedItem().toString());
                            pstmt2.executeUpdate();

                            java.sql.PreparedStatement pstmt = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?)");
                            pstmt.setString(1, opPatientNumberTxt.getText());
                            pstmt.setObject(2, opCRDRReasonTxt.getText());
                            pstmt.setString(3, "");
                            pstmt.setString(4, "Scheme");
                            pstmt.setString(5, crNote);
                            pstmt.setString(7, opSchemeNameTxt.getText());
                            pstmt.setString(6, "");
                            pstmt.setString(8, "");
                            pstmt.setString(9, opSchemePayerTxt.getText());
                            pstmt.setDate(10, null);
                            pstmt.setString(11, "");
                            pstmt.setDouble(13, java.lang.Double.valueOf(opBalanceTxt.getText()));
                            pstmt.setDouble(12, 0.00);
                            pstmt.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                            pstmt.setObject(15, actCode);
                            pstmt.setString(16, glCode1);
                            pstmt.setDouble(17, -1);
                            pstmt.setObject(18, opSchemeMemberNumberTxt.getText());
                            pstmt.setBoolean(19, true);
                            pstmt.setString(20, "Receipts");
                            pstmt.setBoolean(21, true);
                            pstmt.setString(22, actNames);
                            pstmt.setString(23, opInvoiceNumberTxt.getText());
                            pstmt.setString(24, user);
                            pstmt.setString(25, "");
                            pstmt.setString(26, "OP");
                            pstmt.executeUpdate();



                            java.sql.PreparedStatement pstmt1 = connectDB.prepareStatement("insert into hp_patient_card values(?,?,?,?,?,?,?,?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?)");
                            pstmt1.setString(1, opPatientNumberTxt.getText());
                            pstmt1.setObject(2, opCRDRReasonTxt.getText());
                            pstmt1.setString(3, "");
                            pstmt1.setString(4, "Scheme");
                            pstmt1.setString(5, crNote);
                            pstmt1.setString(7, opSchemeNameTxt.getText());
                            pstmt1.setString(6, "");
                            pstmt1.setString(8, "");
                            pstmt1.setString(9, opSchemePayerTxt.getText());
                            pstmt1.setDate(10, null);
                            pstmt1.setString(11, "");
                            pstmt1.setDouble(12, java.lang.Double.valueOf(opBalanceTxt.getText()));
                            pstmt1.setDouble(13, 0.00);
                            pstmt1.setDate(14, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                            pstmt1.setObject(15, actCode);
                            pstmt1.setString(16, glCode1);
                            pstmt1.setDouble(17, 1);
                            pstmt1.setObject(18, opSchemeMemberNumberTxt.getText());
                            pstmt1.setBoolean(19, true);
                            pstmt1.setString(20, "Receipts");
                            pstmt1.setBoolean(21, true);
                            pstmt1.setString(22, actNames);
                            pstmt1.setString(23, "");
                            pstmt1.setString(24, user);
                            pstmt1.executeUpdate();

                            java.sql.PreparedStatement pstmtu = connectDB.prepareStatement("insert into ac_debtors values(?,?,?,?,?,?,?, ?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?)");
                            pstmtu.setString(1, actCode1);
                            pstmtu.setObject(2, opSchemePayerTxt.getText());
                            pstmtu.setString(3, opPatientNameTxt.getText());
                            pstmtu.setString(4, opPatientNumberTxt.getText());
                            pstmtu.setString(5, opSchemeNameTxt.getText());
                            pstmtu.setString(6, opCRDRReasonTxt.getText());
                            pstmtu.setString(7, opSchemeAcctNumberTxt.getText());
                            pstmtu.setString(8, crNote);
                            pstmtu.setString(9, crNote);
                            pstmtu.setString(10, opInvoiceNumberTxt.getText());
                            pstmtu.setString(11, crNote);
                            pstmtu.setString(12, "Credit Note");
                            pstmtu.setDouble(14, java.lang.Double.valueOf(opBalanceTxt.getText()));
                            pstmtu.setDouble(13, 0.00);
                            pstmtu.setDate(15, com.afrisoftech.lib.SQLDateFormat.getSQLDate(datePicker2.getDate()));
                            pstmtu.setObject(16, crNote);
                            pstmtu.setString(17, actNames1);
                            pstmtu.setBoolean(18, false);
                            pstmtu.setBoolean(19, true);
                            pstmtu.setString(20, user);
                            pstmtu.setString(21, "");
                            pstmtu.setDouble(22, 0.00);
                            pstmtu.setBoolean(23, false);
                            pstmtu.setDouble(24, java.lang.Double.valueOf(opBalanceTxt.getText()));
                            pstmtu.setString(25, "-");
                            pstmtu.executeUpdate();
                        }
                    }





                    java.sql.PreparedStatement pstmt221 = connectDB.prepareStatement("UPDATE hp_patient_register set account_no ='" + opSchemeMemberNumberTxt.getText() + "',member_name = '" + opSchemeMemberNameTxt.getText() + "' WHERE patient_no = '" + opPatientNumberTxt.getText() + "'");
                    pstmt221.executeUpdate();

                    connectDB.commit();
                    connectDB.setAutoCommit(true);
                    invoiceNo = opInvoiceNumberTxt.getText();

                    OpCreditPdf policy = new OpCreditPdf();
                    policy.OpCreditPdf(connectDB, crNote, crNote);

                    javax.swing.JOptionPane.showMessageDialog(this, "Data Inserted Successfully ", "Confirmation Message!", javax.swing.JOptionPane.INFORMATION_MESSAGE);

                    opPatientNameTxt.setText("");
                    opDebitTxt.setText("");
                    opBalanceTxt.setText("");
                    for (int k = 0; k < opBillingTable.getRowCount(); k++) {
                        for (int r = 0; r < opBillingTable.getColumnCount(); r++) {
                            opBillingTable.getModel().setValueAt(null, k, r);
                        }
                    }
                    opBalanceTxt.setText("");
                } catch (java.sql.SQLException sq) {
                    sq.printStackTrace();
                    try {
                        connectDB.rollback();
                    } catch (java.sql.SQLException sql) {
                        javax.swing.JOptionPane.showMessageDialog(this, sql.getMessage(), "Error Message!", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                    System.out.println(sq.getMessage());
                    javax.swing.JOptionPane.showMessageDialog(this, sq.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);

                }

            } catch (java.lang.Exception ex) {
                System.out.println(ex.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, "TRANSACTION ERROR : Please double check your entries.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);


            }
        }
        // }// Add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionPanel;
    private javax.swing.JScrollPane billingTableJscrl;
    private javax.swing.JPanel billingTablePane;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JButton closeBtn;
    private javax.swing.JButton closeFormBtn;
    private com.afrisoftech.lib.DatePicker datePicker;
    private com.afrisoftech.lib.DatePicker datePicker1;
    private com.afrisoftech.lib.DatePicker datePicker2;
    private com.afrisoftech.lib.DatePicker datePicker3;
    private javax.swing.JPanel debitorCreditPanel;
    private javax.swing.JButton dispose11;
    private javax.swing.JButton helpBtn;
    private javax.swing.JTextField invoiceNumberSearchTxt;
    private javax.swing.JDialog invoiceSearchDialog;
    private javax.swing.JScrollPane invoiceSearchJscrl;
    private javax.swing.JPanel invoiceSearchPanel;
    private javax.swing.JTable invoiceSearchTable;
    private javax.swing.JTextField ipAccountNumberTxt;
    private javax.swing.JTextField ipBalanceTxt;
    private javax.swing.JTable ipBillingTable;
    private javax.swing.JTextField ipCRDRReasonTxt;
    private javax.swing.JRadioButton ipCRRdbtn;
    private javax.swing.JCheckBox ipConsultantsChkbx;
    private javax.swing.JRadioButton ipDRRdbtn;
    private javax.swing.JTextField ipDebitTxt;
    private javax.swing.JTextField ipInvoiceNumberTxt;
    private javax.swing.JTextField ipPatientNameTxt;
    private javax.swing.JTextField ipPatientNumberTxt;
    private javax.swing.JComboBox ipPaymentModeCmbx;
    private javax.swing.JTextField ipSchemeMemberNumberTxt;
    private javax.swing.JTextField ipSchemeMemeberNameTxt;
    private javax.swing.JTextField ipSchemeNameTxt;
    private javax.swing.JTextField ipSchemePayerTxt;
    private javax.swing.JCheckBox ipServiceOfferedChkbx;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton52;
    private javax.swing.JButton jButton521;
    private javax.swing.JButton jButton523;
    private javax.swing.JButton jButton524;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox11;
    private javax.swing.JComboBox jComboBox12;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel101;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel111;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel131;
    private javax.swing.JLabel jLabel132;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel411;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel532;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JLabel jLabel92;
    private javax.swing.JLabel jLabel93;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel61;
    private javax.swing.JPanel jPanel641;
    private javax.swing.JPanel jPanel6411;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JDialog jSearchDialog;
    private javax.swing.JDialog jSearchDialog11;
    private javax.swing.JDialog jSearchDialog2;
    private javax.swing.JDialog jSearchDialog21;
    private javax.swing.JDialog jSearchDialog23;
    private javax.swing.JDialog jSearchDialog231;
    private javax.swing.JPanel jSearchPanel;
    private javax.swing.JPanel jSearchPanel11;
    private javax.swing.JPanel jSearchPanel2;
    private javax.swing.JPanel jSearchPanel21;
    private javax.swing.JPanel jSearchPanel23;
    private javax.swing.JPanel jSearchPanel24;
    private javax.swing.JScrollPane jSearchScrollPane;
    private javax.swing.JScrollPane jSearchScrollPane11;
    private javax.swing.JScrollPane jSearchScrollPane2;
    private javax.swing.JScrollPane jSearchScrollPane21;
    private javax.swing.JScrollPane jSearchScrollPane23;
    private javax.swing.JScrollPane jSearchScrollPane24;
    private javax.swing.JTable jSearchTable;
    private javax.swing.JTable jSearchTable11;
    private javax.swing.JTable jSearchTable2;
    private javax.swing.JTable jSearchTable21;
    private javax.swing.JTable jSearchTable23;
    private javax.swing.JTable jSearchTable24;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1111;
    private javax.swing.JTextField jTextField112;
    private javax.swing.JTextField jTextField113;
    private javax.swing.JTextField jTextField1131;
    private javax.swing.JTextField jTextField1133;
    private javax.swing.JTextField jTextField1134;
    private javax.swing.JTextField jTextField114;
    private javax.swing.JTextField jTextField115;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField51;
    private javax.swing.JTextField jTextField92;
    private javax.swing.JTextField jTextField93;
    private javax.swing.JTextField opBalanceTxt;
    private javax.swing.JTable opBillingTable;
    private javax.swing.JTextField opCRDRReasonTxt;
    private javax.swing.JRadioButton opCRRdbtn;
    private javax.swing.JCheckBox opConsultantsCRDRChkbx;
    private javax.swing.JRadioButton opDRRdbtn;
    private javax.swing.JTextField opDebitTxt;
    private javax.swing.JTextField opInvoiceNumberTxt;
    private javax.swing.JTextField opPatientNameTxt;
    private javax.swing.JTextField opPatientNumberTxt;
    private javax.swing.JTextField opSchemeAcctNumberTxt;
    private javax.swing.JTextField opSchemeMemberNameTxt;
    private javax.swing.JTextField opSchemeMemberNumberTxt;
    private javax.swing.JTextField opSchemeNameTxt;
    private javax.swing.JTextField opSchemePayerTxt;
    private javax.swing.JCheckBox opServicesOfferedChkbx;
    private javax.swing.JLabel paymentModeLbl;
    private javax.swing.JLabel reasonLbl;
    private javax.swing.JButton refreshFormBtn;
    private javax.swing.JButton removeRowBtn;
    private javax.swing.JButton saveCreditDebitNoteBtn;
    private javax.swing.JButton searchButton;
    private javax.swing.JButton searchButton1;
    private javax.swing.JButton searchButton2;
    private javax.swing.JButton searchButton21;
    private javax.swing.JButton searchButton3;
    private javax.swing.JButton searchButton4;
    private javax.swing.JPanel selectionPanel;
    private javax.swing.JLabel spacerLabel;
    // End of variables declaration//GEN-END:variables
}
